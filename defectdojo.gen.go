// Package defectDojoAPIV2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package defectDojoAPIV2

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"gopkg.in/yaml.v2"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BasicAuthScopes  = "basicAuth.Scopes"
	CookieAuthScopes = "cookieAuth.Scopes"
	TokenAuthScopes  = "tokenAuth.Scopes"
)

// Defines values for EngagementEngagementType.
const (
	EngagementEngagementTypeCICD        EngagementEngagementType = "CI/CD"
	EngagementEngagementTypeInteractive EngagementEngagementType = "Interactive"
	EngagementEngagementTypeNil         EngagementEngagementType = "<nil>"
)

// Defines values for EngagementStatus.
const (
	EngagementStatusBlocked            EngagementStatus = "Blocked"
	EngagementStatusCancelled          EngagementStatus = "Cancelled"
	EngagementStatusCompleted          EngagementStatus = "Completed"
	EngagementStatusInProgress         EngagementStatus = "In Progress"
	EngagementStatusNil                EngagementStatus = "<nil>"
	EngagementStatusNotStarted         EngagementStatus = "Not Started"
	EngagementStatusOnHold             EngagementStatus = "On Hold"
	EngagementStatusWaitingForResource EngagementStatus = "Waiting for Resource"
)

// Defines values for ImportScanGroupBy.
const (
	ImportScanGroupByComponentName                 ImportScanGroupBy = "component_name"
	ImportScanGroupByComponentNameComponentVersion ImportScanGroupBy = "component_name+component_version"
	ImportScanGroupByFilePath                      ImportScanGroupBy = "file_path"
)

// Defines values for ImportScanMinimumSeverity.
const (
	ImportScanMinimumSeverityCritical ImportScanMinimumSeverity = "Critical"
	ImportScanMinimumSeverityHigh     ImportScanMinimumSeverity = "High"
	ImportScanMinimumSeverityInfo     ImportScanMinimumSeverity = "Info"
	ImportScanMinimumSeverityLow      ImportScanMinimumSeverity = "Low"
	ImportScanMinimumSeverityMedium   ImportScanMinimumSeverity = "Medium"
)

// Defines values for ImportScanScanType.
const (
	ImportScanScanTypeAWSProwlerScan                                 ImportScanScanType = "AWS Prowler Scan"
	ImportScanScanTypeAWSScout2Scan                                  ImportScanScanType = "AWS Scout2 Scan"
	ImportScanScanTypeAWSSecurityHubScan                             ImportScanScanType = "AWS Security Hub Scan"
	ImportScanScanTypeAcunetix360Scan                                ImportScanScanType = "Acunetix360 Scan"
	ImportScanScanTypeAcunetixScan                                   ImportScanScanType = "Acunetix Scan"
	ImportScanScanTypeAnchoreEngineScan                              ImportScanScanType = "Anchore Engine Scan"
	ImportScanScanTypeAnchoreEnterprisePolicyCheck                   ImportScanScanType = "Anchore Enterprise Policy Check"
	ImportScanScanTypeAnchoreGrype                                   ImportScanScanType = "Anchore Grype"
	ImportScanScanTypeAppSpiderScan                                  ImportScanScanType = "AppSpider Scan"
	ImportScanScanTypeAquaScan                                       ImportScanScanType = "Aqua Scan"
	ImportScanScanTypeArachniScan                                    ImportScanScanType = "Arachni Scan"
	ImportScanScanTypeAuditJSScan                                    ImportScanScanType = "AuditJS Scan"
	ImportScanScanTypeAzureSecurityCenterRecommendationsScan         ImportScanScanType = "Azure Security Center Recommendations Scan"
	ImportScanScanTypeBanditScan                                     ImportScanScanType = "Bandit Scan"
	ImportScanScanTypeBlackduckComponentRisk                         ImportScanScanType = "Blackduck Component Risk"
	ImportScanScanTypeBlackduckHubScan                               ImportScanScanType = "Blackduck Hub Scan"
	ImportScanScanTypeBrakemanScan                                   ImportScanScanType = "Brakeman Scan"
	ImportScanScanTypeBugCrowdScan                                   ImportScanScanType = "BugCrowd Scan"
	ImportScanScanTypeBundlerAuditScan                               ImportScanScanType = "Bundler-Audit Scan"
	ImportScanScanTypeBurpEnterpriseScan                             ImportScanScanType = "Burp Enterprise Scan"
	ImportScanScanTypeBurpGraphQLAPI                                 ImportScanScanType = "Burp GraphQL API"
	ImportScanScanTypeBurpRESTAPI                                    ImportScanScanType = "Burp REST API"
	ImportScanScanTypeBurpScan                                       ImportScanScanType = "Burp Scan"
	ImportScanScanTypeCargoAuditScan                                 ImportScanScanType = "CargoAudit Scan"
	ImportScanScanTypeCheckmarxOSA                                   ImportScanScanType = "Checkmarx OSA"
	ImportScanScanTypeCheckmarxScan                                  ImportScanScanType = "Checkmarx Scan"
	ImportScanScanTypeCheckmarxScanDetailed                          ImportScanScanType = "Checkmarx Scan detailed"
	ImportScanScanTypeCheckovScan                                    ImportScanScanType = "Checkov Scan"
	ImportScanScanTypeClairKlarScan                                  ImportScanScanType = "Clair Klar Scan"
	ImportScanScanTypeClairScan                                      ImportScanScanType = "Clair Scan"
	ImportScanScanTypeCloudsploitScan                                ImportScanScanType = "Cloudsploit Scan"
	ImportScanScanTypeCobaltIoAPIImport                              ImportScanScanType = "Cobalt.io API Import"
	ImportScanScanTypeCobaltIoScan                                   ImportScanScanType = "Cobalt.io Scan"
	ImportScanScanTypeContrastScan                                   ImportScanScanType = "Contrast Scan"
	ImportScanScanTypeCoverityAPI                                    ImportScanScanType = "Coverity API"
	ImportScanScanTypeCrashtestSecurityJSONFile                      ImportScanScanType = "Crashtest Security JSON File"
	ImportScanScanTypeCrashtestSecurityXMLFile                       ImportScanScanType = "Crashtest Security XML File"
	ImportScanScanTypeCredScanScan                                   ImportScanScanType = "CredScan Scan"
	ImportScanScanTypeCycloneDXScan                                  ImportScanScanType = "CycloneDX Scan"
	ImportScanScanTypeDSOPScan                                       ImportScanScanType = "DSOP Scan"
	ImportScanScanTypeDawnScannerScan                                ImportScanScanType = "DawnScanner Scan"
	ImportScanScanTypeDependencyCheckScan                            ImportScanScanType = "Dependency Check Scan"
	ImportScanScanTypeDependencyTrackFindingPackagingFormatFPFExport ImportScanScanType = "Dependency Track Finding Packaging Format (FPF) Export"
	ImportScanScanTypeDetectSecretsScan                              ImportScanScanType = "Detect-secrets Scan"
	ImportScanScanTypeDockleScan                                     ImportScanScanType = "Dockle Scan"
	ImportScanScanTypeDrHeaderJSONImporter                           ImportScanScanType = "DrHeader JSON Importer"
	ImportScanScanTypeESLintScan                                     ImportScanScanType = "ESLint Scan"
	ImportScanScanTypeEdgescanScan                                   ImportScanScanType = "Edgescan Scan"
	ImportScanScanTypeFortifyScan                                    ImportScanScanType = "Fortify Scan"
	ImportScanScanTypeGenericFindingsImport                          ImportScanScanType = "Generic Findings Import"
	ImportScanScanTypeGitLabAPIFuzzingReportScan                     ImportScanScanType = "GitLab API Fuzzing Report Scan"
	ImportScanScanTypeGitLabContainerScan                            ImportScanScanType = "GitLab Container Scan"
	ImportScanScanTypeGitLabDASTReport                               ImportScanScanType = "GitLab DAST Report"
	ImportScanScanTypeGitLabDependencyScanningReport                 ImportScanScanType = "GitLab Dependency Scanning Report"
	ImportScanScanTypeGitLabSASTReport                               ImportScanScanType = "GitLab SAST Report"
	ImportScanScanTypeGitLabSecretDetectionReport                    ImportScanScanType = "GitLab Secret Detection Report"
	ImportScanScanTypeGithubVulnerabilityScan                        ImportScanScanType = "Github Vulnerability Scan"
	ImportScanScanTypeGitleaksScan                                   ImportScanScanType = "Gitleaks Scan"
	ImportScanScanTypeGosecScanner                                   ImportScanScanType = "Gosec Scanner"
	ImportScanScanTypeHackerOneCases                                 ImportScanScanType = "HackerOne Cases"
	ImportScanScanTypeHadolintDockerfileCheck                        ImportScanScanType = "Hadolint Dockerfile check"
	ImportScanScanTypeHarborVulnerabilityScan                        ImportScanScanType = "Harbor Vulnerability Scan"
	ImportScanScanTypeHorusecScan                                    ImportScanScanType = "Horusec Scan"
	ImportScanScanTypeHuskyCIReport                                  ImportScanScanType = "HuskyCI Report"
	ImportScanScanTypeIBMAppScanDAST                                 ImportScanScanType = "IBM AppScan DAST"
	ImportScanScanTypeImmuniwebScan                                  ImportScanScanType = "Immuniweb Scan"
	ImportScanScanTypeIntSightsReport                                ImportScanScanType = "IntSights Report"
	ImportScanScanTypeJFrogXrayScan                                  ImportScanScanType = "JFrog Xray Scan"
	ImportScanScanTypeJFrogXrayUnifiedScan                           ImportScanScanType = "JFrog Xray Unified Scan"
	ImportScanScanTypeKICSScan                                       ImportScanScanType = "KICS Scan"
	ImportScanScanTypeKiuwanScan                                     ImportScanScanType = "Kiuwan Scan"
	ImportScanScanTypeKubeBenchScan                                  ImportScanScanType = "kube-bench Scan"
	ImportScanScanTypeMeterianScan                                   ImportScanScanType = "Meterian Scan"
	ImportScanScanTypeMicrofocusWebinspectScan                       ImportScanScanType = "Microfocus Webinspect Scan"
	ImportScanScanTypeMobSFScan                                      ImportScanScanType = "MobSF Scan"
	ImportScanScanTypeMobsfscanScan                                  ImportScanScanType = "Mobsfscan Scan"
	ImportScanScanTypeMozillaObservatoryScan                         ImportScanScanType = "Mozilla Observatory Scan"
	ImportScanScanTypeNPMAuditScan                                   ImportScanScanType = "NPM Audit Scan"
	ImportScanScanTypeNessusScan                                     ImportScanScanType = "Nessus Scan"
	ImportScanScanTypeNessusWASScan                                  ImportScanScanType = "Nessus WAS Scan"
	ImportScanScanTypeNetsparkerScan                                 ImportScanScanType = "Netsparker Scan"
	ImportScanScanTypeNexposeScan                                    ImportScanScanType = "Nexpose Scan"
	ImportScanScanTypeNiktoScan                                      ImportScanScanType = "Nikto Scan"
	ImportScanScanTypeNmapScan                                       ImportScanScanType = "Nmap Scan"
	ImportScanScanTypeNodeSecurityPlatformScan                       ImportScanScanType = "Node Security Platform Scan"
	ImportScanScanTypeNucleiScan                                     ImportScanScanType = "Nuclei Scan"
	ImportScanScanTypeORTEvaluatedModelImporter                      ImportScanScanType = "ORT evaluated model Importer"
	ImportScanScanTypeOpenVASCSV                                     ImportScanScanType = "OpenVAS CSV"
	ImportScanScanTypeOpenscapVulnerabilityScan                      ImportScanScanType = "Openscap Vulnerability Scan"
	ImportScanScanTypeOssIndexDevauditSCAScanImporter                ImportScanScanType = "OssIndex Devaudit SCA Scan Importer"
	ImportScanScanTypeOutpost24Scan                                  ImportScanScanType = "Outpost24 Scan"
	ImportScanScanTypePHPSecurityAuditV2                             ImportScanScanType = "PHP Security Audit v2"
	ImportScanScanTypePHPSymfonySecurityCheck                        ImportScanScanType = "PHP Symfony Security Check"
	ImportScanScanTypePMDScan                                        ImportScanScanType = "PMD Scan"
	ImportScanScanTypePipAuditScan                                   ImportScanScanType = "pip-audit Scan"
	ImportScanScanTypeQualysInfrastructureScanWebGUIXML              ImportScanScanType = "Qualys Infrastructure Scan (WebGUI XML)"
	ImportScanScanTypeQualysScan                                     ImportScanScanType = "Qualys Scan"
	ImportScanScanTypeQualysWebappScan                               ImportScanScanType = "Qualys Webapp Scan"
	ImportScanScanTypeRetireJsScan                                   ImportScanScanType = "Retire.js Scan"
	ImportScanScanTypeRiskReconAPIImporter                           ImportScanScanType = "Risk Recon API Importer"
	ImportScanScanTypeRubocopScan                                    ImportScanScanType = "Rubocop Scan"
	ImportScanScanTypeRustyHogScan                                   ImportScanScanType = "Rusty Hog Scan"
	ImportScanScanTypeSARIF                                          ImportScanScanType = "SARIF"
	ImportScanScanTypeSKFScan                                        ImportScanScanType = "SKF Scan"
	ImportScanScanTypeSSLLabsScan                                    ImportScanScanType = "SSL Labs Scan"
	ImportScanScanTypeSSLyzeScanJSON                                 ImportScanScanType = "SSLyze Scan (JSON)"
	ImportScanScanTypeScantistScan                                   ImportScanScanType = "Scantist Scan"
	ImportScanScanTypeScoutSuiteScan                                 ImportScanScanType = "Scout Suite Scan"
	ImportScanScanTypeSemgrepJSONReport                              ImportScanScanType = "Semgrep JSON Report"
	ImportScanScanTypeSnykScan                                       ImportScanScanType = "Snyk Scan"
	ImportScanScanTypeSolarAppscreenerScan                           ImportScanScanType = "Solar Appscreener Scan"
	ImportScanScanTypeSonarQubeAPIImport                             ImportScanScanType = "SonarQube API Import"
	ImportScanScanTypeSonarQubeScan                                  ImportScanScanType = "SonarQube Scan"
	ImportScanScanTypeSonarQubeScanDetailed                          ImportScanScanType = "SonarQube Scan detailed"
	ImportScanScanTypeSonatypeApplicationScan                        ImportScanScanType = "Sonatype Application Scan"
	ImportScanScanTypeSpotBugsScan                                   ImportScanScanType = "SpotBugs Scan"
	ImportScanScanTypeSslscan                                        ImportScanScanType = "Sslscan"
	ImportScanScanTypeSslyzeScan                                     ImportScanScanType = "Sslyze Scan"
	ImportScanScanTypeStackHawkHawkScan                              ImportScanScanType = "StackHawk HawkScan"
	ImportScanScanTypeTFSecScan                                      ImportScanScanType = "TFSec Scan"
	ImportScanScanTypeTerrascanScan                                  ImportScanScanType = "Terrascan Scan"
	ImportScanScanTypeTestsslScan                                    ImportScanScanType = "Testssl Scan"
	ImportScanScanTypeTrivyScan                                      ImportScanScanType = "Trivy Scan"
	ImportScanScanTypeTrufflehog3Scan                                ImportScanScanType = "Trufflehog3 Scan"
	ImportScanScanTypeTrufflehogScan                                 ImportScanScanType = "Trufflehog Scan"
	ImportScanScanTypeTrustwaveFusionAPIScan                         ImportScanScanType = "Trustwave Fusion API Scan"
	ImportScanScanTypeTrustwaveScanCSV                               ImportScanScanType = "Trustwave Scan (CSV)"
	ImportScanScanTypeTwistlockImageScan                             ImportScanScanType = "Twistlock Image Scan"
	ImportScanScanTypeVCGScan                                        ImportScanScanType = "VCG Scan"
	ImportScanScanTypeVeracodeScan                                   ImportScanScanType = "Veracode Scan"
	ImportScanScanTypeWFuzzJSONReport                                ImportScanScanType = "WFuzz JSON report"
	ImportScanScanTypeWapitiScan                                     ImportScanScanType = "Wapiti Scan"
	ImportScanScanTypeWhiteHatSentinel                               ImportScanScanType = "WhiteHat Sentinel"
	ImportScanScanTypeWhitesourceScan                                ImportScanScanType = "Whitesource Scan"
	ImportScanScanTypeWpscan                                         ImportScanScanType = "Wpscan"
	ImportScanScanTypeXanitizerScan                                  ImportScanScanType = "Xanitizer Scan"
	ImportScanScanTypeYarnAuditScan                                  ImportScanScanType = "Yarn Audit Scan"
	ImportScanScanTypeZAPScan                                        ImportScanScanType = "ZAP Scan"
)

// Defines values for JIRAInstanceDefaultIssueType.
const (
	JIRAInstanceDefaultIssueTypeBug      JIRAInstanceDefaultIssueType = "Bug"
	JIRAInstanceDefaultIssueTypeEpic     JIRAInstanceDefaultIssueType = "Epic"
	JIRAInstanceDefaultIssueTypeSecurity JIRAInstanceDefaultIssueType = "Security"
	JIRAInstanceDefaultIssueTypeSpike    JIRAInstanceDefaultIssueType = "Spike"
	JIRAInstanceDefaultIssueTypeStory    JIRAInstanceDefaultIssueType = "Story"
	JIRAInstanceDefaultIssueTypeTask     JIRAInstanceDefaultIssueType = "Task"
)

// Defines values for NotificationsAutoCloseEngagement.
const (
	NotificationsAutoCloseEngagementAlert   NotificationsAutoCloseEngagement = "alert"
	NotificationsAutoCloseEngagementMail    NotificationsAutoCloseEngagement = "mail"
	NotificationsAutoCloseEngagementMsteams NotificationsAutoCloseEngagement = "msteams"
	NotificationsAutoCloseEngagementSlack   NotificationsAutoCloseEngagement = "slack"
)

// Defines values for NotificationsCloseEngagement.
const (
	NotificationsCloseEngagementAlert   NotificationsCloseEngagement = "alert"
	NotificationsCloseEngagementMail    NotificationsCloseEngagement = "mail"
	NotificationsCloseEngagementMsteams NotificationsCloseEngagement = "msteams"
	NotificationsCloseEngagementSlack   NotificationsCloseEngagement = "slack"
)

// Defines values for NotificationsCodeReview.
const (
	NotificationsCodeReviewAlert   NotificationsCodeReview = "alert"
	NotificationsCodeReviewMail    NotificationsCodeReview = "mail"
	NotificationsCodeReviewMsteams NotificationsCodeReview = "msteams"
	NotificationsCodeReviewSlack   NotificationsCodeReview = "slack"
)

// Defines values for NotificationsEngagementAdded.
const (
	NotificationsEngagementAddedAlert   NotificationsEngagementAdded = "alert"
	NotificationsEngagementAddedMail    NotificationsEngagementAdded = "mail"
	NotificationsEngagementAddedMsteams NotificationsEngagementAdded = "msteams"
	NotificationsEngagementAddedSlack   NotificationsEngagementAdded = "slack"
)

// Defines values for NotificationsJiraUpdate.
const (
	NotificationsJiraUpdateAlert   NotificationsJiraUpdate = "alert"
	NotificationsJiraUpdateMail    NotificationsJiraUpdate = "mail"
	NotificationsJiraUpdateMsteams NotificationsJiraUpdate = "msteams"
	NotificationsJiraUpdateSlack   NotificationsJiraUpdate = "slack"
)

// Defines values for NotificationsOther.
const (
	NotificationsOtherAlert   NotificationsOther = "alert"
	NotificationsOtherMail    NotificationsOther = "mail"
	NotificationsOtherMsteams NotificationsOther = "msteams"
	NotificationsOtherSlack   NotificationsOther = "slack"
)

// Defines values for NotificationsProductAdded.
const (
	NotificationsProductAddedAlert   NotificationsProductAdded = "alert"
	NotificationsProductAddedMail    NotificationsProductAdded = "mail"
	NotificationsProductAddedMsteams NotificationsProductAdded = "msteams"
	NotificationsProductAddedSlack   NotificationsProductAdded = "slack"
)

// Defines values for NotificationsProductTypeAdded.
const (
	NotificationsProductTypeAddedAlert   NotificationsProductTypeAdded = "alert"
	NotificationsProductTypeAddedMail    NotificationsProductTypeAdded = "mail"
	NotificationsProductTypeAddedMsteams NotificationsProductTypeAdded = "msteams"
	NotificationsProductTypeAddedSlack   NotificationsProductTypeAdded = "slack"
)

// Defines values for NotificationsReviewRequested.
const (
	NotificationsReviewRequestedAlert   NotificationsReviewRequested = "alert"
	NotificationsReviewRequestedMail    NotificationsReviewRequested = "mail"
	NotificationsReviewRequestedMsteams NotificationsReviewRequested = "msteams"
	NotificationsReviewRequestedSlack   NotificationsReviewRequested = "slack"
)

// Defines values for NotificationsRiskAcceptanceExpiration.
const (
	NotificationsRiskAcceptanceExpirationAlert   NotificationsRiskAcceptanceExpiration = "alert"
	NotificationsRiskAcceptanceExpirationMail    NotificationsRiskAcceptanceExpiration = "mail"
	NotificationsRiskAcceptanceExpirationMsteams NotificationsRiskAcceptanceExpiration = "msteams"
	NotificationsRiskAcceptanceExpirationSlack   NotificationsRiskAcceptanceExpiration = "slack"
)

// Defines values for NotificationsScanAdded.
const (
	NotificationsScanAddedAlert   NotificationsScanAdded = "alert"
	NotificationsScanAddedMail    NotificationsScanAdded = "mail"
	NotificationsScanAddedMsteams NotificationsScanAdded = "msteams"
	NotificationsScanAddedSlack   NotificationsScanAdded = "slack"
)

// Defines values for NotificationsSlaBreach.
const (
	NotificationsSlaBreachAlert   NotificationsSlaBreach = "alert"
	NotificationsSlaBreachMail    NotificationsSlaBreach = "mail"
	NotificationsSlaBreachMsteams NotificationsSlaBreach = "msteams"
	NotificationsSlaBreachSlack   NotificationsSlaBreach = "slack"
)

// Defines values for NotificationsStaleEngagement.
const (
	NotificationsStaleEngagementAlert   NotificationsStaleEngagement = "alert"
	NotificationsStaleEngagementMail    NotificationsStaleEngagement = "mail"
	NotificationsStaleEngagementMsteams NotificationsStaleEngagement = "msteams"
	NotificationsStaleEngagementSlack   NotificationsStaleEngagement = "slack"
)

// Defines values for NotificationsTestAdded.
const (
	NotificationsTestAddedAlert   NotificationsTestAdded = "alert"
	NotificationsTestAddedMail    NotificationsTestAdded = "mail"
	NotificationsTestAddedMsteams NotificationsTestAdded = "msteams"
	NotificationsTestAddedSlack   NotificationsTestAdded = "slack"
)

// Defines values for NotificationsUpcomingEngagement.
const (
	NotificationsUpcomingEngagementAlert   NotificationsUpcomingEngagement = "alert"
	NotificationsUpcomingEngagementMail    NotificationsUpcomingEngagement = "mail"
	NotificationsUpcomingEngagementMsteams NotificationsUpcomingEngagement = "msteams"
	NotificationsUpcomingEngagementSlack   NotificationsUpcomingEngagement = "slack"
)

// Defines values for NotificationsUserMentioned.
const (
	NotificationsUserMentionedAlert   NotificationsUserMentioned = "alert"
	NotificationsUserMentionedMail    NotificationsUserMentioned = "mail"
	NotificationsUserMentionedMsteams NotificationsUserMentioned = "msteams"
	NotificationsUserMentionedSlack   NotificationsUserMentioned = "slack"
)

// Defines values for PatchedEngagementEngagementType.
const (
	PatchedEngagementEngagementTypeCICD        PatchedEngagementEngagementType = "CI/CD"
	PatchedEngagementEngagementTypeInteractive PatchedEngagementEngagementType = "Interactive"
	PatchedEngagementEngagementTypeNil         PatchedEngagementEngagementType = "<nil>"
)

// Defines values for PatchedEngagementStatus.
const (
	PatchedEngagementStatusBlocked            PatchedEngagementStatus = "Blocked"
	PatchedEngagementStatusCancelled          PatchedEngagementStatus = "Cancelled"
	PatchedEngagementStatusCompleted          PatchedEngagementStatus = "Completed"
	PatchedEngagementStatusInProgress         PatchedEngagementStatus = "In Progress"
	PatchedEngagementStatusNil                PatchedEngagementStatus = "<nil>"
	PatchedEngagementStatusNotStarted         PatchedEngagementStatus = "Not Started"
	PatchedEngagementStatusOnHold             PatchedEngagementStatus = "On Hold"
	PatchedEngagementStatusWaitingForResource PatchedEngagementStatus = "Waiting for Resource"
)

// Defines values for PatchedJIRAInstanceDefaultIssueType.
const (
	PatchedJIRAInstanceDefaultIssueTypeBug      PatchedJIRAInstanceDefaultIssueType = "Bug"
	PatchedJIRAInstanceDefaultIssueTypeEpic     PatchedJIRAInstanceDefaultIssueType = "Epic"
	PatchedJIRAInstanceDefaultIssueTypeSecurity PatchedJIRAInstanceDefaultIssueType = "Security"
	PatchedJIRAInstanceDefaultIssueTypeSpike    PatchedJIRAInstanceDefaultIssueType = "Spike"
	PatchedJIRAInstanceDefaultIssueTypeStory    PatchedJIRAInstanceDefaultIssueType = "Story"
	PatchedJIRAInstanceDefaultIssueTypeTask     PatchedJIRAInstanceDefaultIssueType = "Task"
)

// Defines values for PatchedNotificationsAutoCloseEngagement.
const (
	PatchedNotificationsAutoCloseEngagementAlert   PatchedNotificationsAutoCloseEngagement = "alert"
	PatchedNotificationsAutoCloseEngagementMail    PatchedNotificationsAutoCloseEngagement = "mail"
	PatchedNotificationsAutoCloseEngagementMsteams PatchedNotificationsAutoCloseEngagement = "msteams"
	PatchedNotificationsAutoCloseEngagementSlack   PatchedNotificationsAutoCloseEngagement = "slack"
)

// Defines values for PatchedNotificationsCloseEngagement.
const (
	PatchedNotificationsCloseEngagementAlert   PatchedNotificationsCloseEngagement = "alert"
	PatchedNotificationsCloseEngagementMail    PatchedNotificationsCloseEngagement = "mail"
	PatchedNotificationsCloseEngagementMsteams PatchedNotificationsCloseEngagement = "msteams"
	PatchedNotificationsCloseEngagementSlack   PatchedNotificationsCloseEngagement = "slack"
)

// Defines values for PatchedNotificationsCodeReview.
const (
	PatchedNotificationsCodeReviewAlert   PatchedNotificationsCodeReview = "alert"
	PatchedNotificationsCodeReviewMail    PatchedNotificationsCodeReview = "mail"
	PatchedNotificationsCodeReviewMsteams PatchedNotificationsCodeReview = "msteams"
	PatchedNotificationsCodeReviewSlack   PatchedNotificationsCodeReview = "slack"
)

// Defines values for PatchedNotificationsEngagementAdded.
const (
	PatchedNotificationsEngagementAddedAlert   PatchedNotificationsEngagementAdded = "alert"
	PatchedNotificationsEngagementAddedMail    PatchedNotificationsEngagementAdded = "mail"
	PatchedNotificationsEngagementAddedMsteams PatchedNotificationsEngagementAdded = "msteams"
	PatchedNotificationsEngagementAddedSlack   PatchedNotificationsEngagementAdded = "slack"
)

// Defines values for PatchedNotificationsJiraUpdate.
const (
	PatchedNotificationsJiraUpdateAlert   PatchedNotificationsJiraUpdate = "alert"
	PatchedNotificationsJiraUpdateMail    PatchedNotificationsJiraUpdate = "mail"
	PatchedNotificationsJiraUpdateMsteams PatchedNotificationsJiraUpdate = "msteams"
	PatchedNotificationsJiraUpdateSlack   PatchedNotificationsJiraUpdate = "slack"
)

// Defines values for PatchedNotificationsOther.
const (
	PatchedNotificationsOtherAlert   PatchedNotificationsOther = "alert"
	PatchedNotificationsOtherMail    PatchedNotificationsOther = "mail"
	PatchedNotificationsOtherMsteams PatchedNotificationsOther = "msteams"
	PatchedNotificationsOtherSlack   PatchedNotificationsOther = "slack"
)

// Defines values for PatchedNotificationsProductAdded.
const (
	PatchedNotificationsProductAddedAlert   PatchedNotificationsProductAdded = "alert"
	PatchedNotificationsProductAddedMail    PatchedNotificationsProductAdded = "mail"
	PatchedNotificationsProductAddedMsteams PatchedNotificationsProductAdded = "msteams"
	PatchedNotificationsProductAddedSlack   PatchedNotificationsProductAdded = "slack"
)

// Defines values for PatchedNotificationsProductTypeAdded.
const (
	PatchedNotificationsProductTypeAddedAlert   PatchedNotificationsProductTypeAdded = "alert"
	PatchedNotificationsProductTypeAddedMail    PatchedNotificationsProductTypeAdded = "mail"
	PatchedNotificationsProductTypeAddedMsteams PatchedNotificationsProductTypeAdded = "msteams"
	PatchedNotificationsProductTypeAddedSlack   PatchedNotificationsProductTypeAdded = "slack"
)

// Defines values for PatchedNotificationsReviewRequested.
const (
	PatchedNotificationsReviewRequestedAlert   PatchedNotificationsReviewRequested = "alert"
	PatchedNotificationsReviewRequestedMail    PatchedNotificationsReviewRequested = "mail"
	PatchedNotificationsReviewRequestedMsteams PatchedNotificationsReviewRequested = "msteams"
	PatchedNotificationsReviewRequestedSlack   PatchedNotificationsReviewRequested = "slack"
)

// Defines values for PatchedNotificationsRiskAcceptanceExpiration.
const (
	PatchedNotificationsRiskAcceptanceExpirationAlert   PatchedNotificationsRiskAcceptanceExpiration = "alert"
	PatchedNotificationsRiskAcceptanceExpirationMail    PatchedNotificationsRiskAcceptanceExpiration = "mail"
	PatchedNotificationsRiskAcceptanceExpirationMsteams PatchedNotificationsRiskAcceptanceExpiration = "msteams"
	PatchedNotificationsRiskAcceptanceExpirationSlack   PatchedNotificationsRiskAcceptanceExpiration = "slack"
)

// Defines values for PatchedNotificationsScanAdded.
const (
	PatchedNotificationsScanAddedAlert   PatchedNotificationsScanAdded = "alert"
	PatchedNotificationsScanAddedMail    PatchedNotificationsScanAdded = "mail"
	PatchedNotificationsScanAddedMsteams PatchedNotificationsScanAdded = "msteams"
	PatchedNotificationsScanAddedSlack   PatchedNotificationsScanAdded = "slack"
)

// Defines values for PatchedNotificationsSlaBreach.
const (
	PatchedNotificationsSlaBreachAlert   PatchedNotificationsSlaBreach = "alert"
	PatchedNotificationsSlaBreachMail    PatchedNotificationsSlaBreach = "mail"
	PatchedNotificationsSlaBreachMsteams PatchedNotificationsSlaBreach = "msteams"
	PatchedNotificationsSlaBreachSlack   PatchedNotificationsSlaBreach = "slack"
)

// Defines values for PatchedNotificationsStaleEngagement.
const (
	PatchedNotificationsStaleEngagementAlert   PatchedNotificationsStaleEngagement = "alert"
	PatchedNotificationsStaleEngagementMail    PatchedNotificationsStaleEngagement = "mail"
	PatchedNotificationsStaleEngagementMsteams PatchedNotificationsStaleEngagement = "msteams"
	PatchedNotificationsStaleEngagementSlack   PatchedNotificationsStaleEngagement = "slack"
)

// Defines values for PatchedNotificationsTestAdded.
const (
	PatchedNotificationsTestAddedAlert   PatchedNotificationsTestAdded = "alert"
	PatchedNotificationsTestAddedMail    PatchedNotificationsTestAdded = "mail"
	PatchedNotificationsTestAddedMsteams PatchedNotificationsTestAdded = "msteams"
	PatchedNotificationsTestAddedSlack   PatchedNotificationsTestAdded = "slack"
)

// Defines values for PatchedNotificationsUpcomingEngagement.
const (
	PatchedNotificationsUpcomingEngagementAlert   PatchedNotificationsUpcomingEngagement = "alert"
	PatchedNotificationsUpcomingEngagementMail    PatchedNotificationsUpcomingEngagement = "mail"
	PatchedNotificationsUpcomingEngagementMsteams PatchedNotificationsUpcomingEngagement = "msteams"
	PatchedNotificationsUpcomingEngagementSlack   PatchedNotificationsUpcomingEngagement = "slack"
)

// Defines values for PatchedNotificationsUserMentioned.
const (
	PatchedNotificationsUserMentionedAlert   PatchedNotificationsUserMentioned = "alert"
	PatchedNotificationsUserMentionedMail    PatchedNotificationsUserMentioned = "mail"
	PatchedNotificationsUserMentionedMsteams PatchedNotificationsUserMentioned = "msteams"
	PatchedNotificationsUserMentionedSlack   PatchedNotificationsUserMentioned = "slack"
)

// Defines values for PatchedProductBusinessCriticality.
const (
	PatchedProductBusinessCriticalityEmpty    PatchedProductBusinessCriticality = ""
	PatchedProductBusinessCriticalityHigh     PatchedProductBusinessCriticality = "high"
	PatchedProductBusinessCriticalityLow      PatchedProductBusinessCriticality = "low"
	PatchedProductBusinessCriticalityMedium   PatchedProductBusinessCriticality = "medium"
	PatchedProductBusinessCriticalityNil      PatchedProductBusinessCriticality = "<nil>"
	PatchedProductBusinessCriticalityNone     PatchedProductBusinessCriticality = "none"
	PatchedProductBusinessCriticalityVeryHigh PatchedProductBusinessCriticality = "very high"
	PatchedProductBusinessCriticalityVeryLow  PatchedProductBusinessCriticality = "very low"
)

// Defines values for PatchedProductLifecycle.
const (
	PatchedProductLifecycleConstruction PatchedProductLifecycle = "construction"
	PatchedProductLifecycleEmpty        PatchedProductLifecycle = ""
	PatchedProductLifecycleNil          PatchedProductLifecycle = "<nil>"
	PatchedProductLifecycleProduction   PatchedProductLifecycle = "production"
	PatchedProductLifecycleRetirement   PatchedProductLifecycle = "retirement"
)

// Defines values for PatchedProductOrigin.
const (
	PatchedProductOriginContractor        PatchedProductOrigin = "contractor"
	PatchedProductOriginEmpty             PatchedProductOrigin = ""
	PatchedProductOriginInternal          PatchedProductOrigin = "internal"
	PatchedProductOriginNil               PatchedProductOrigin = "<nil>"
	PatchedProductOriginOpenSource        PatchedProductOrigin = "open source"
	PatchedProductOriginOutsourced        PatchedProductOrigin = "outsourced"
	PatchedProductOriginPurchased         PatchedProductOrigin = "purchased"
	PatchedProductOriginThirdPartyLibrary PatchedProductOrigin = "third party library"
)

// Defines values for PatchedProductPlatform.
const (
	PatchedProductPlatformDesktop    PatchedProductPlatform = "desktop"
	PatchedProductPlatformEmpty      PatchedProductPlatform = ""
	PatchedProductPlatformIot        PatchedProductPlatform = "iot"
	PatchedProductPlatformMobile     PatchedProductPlatform = "mobile"
	PatchedProductPlatformNil        PatchedProductPlatform = "<nil>"
	PatchedProductPlatformWeb        PatchedProductPlatform = "web"
	PatchedProductPlatformWebService PatchedProductPlatform = "web service"
)

// Defines values for PatchedRegulationCategory.
const (
	PatchedRegulationCategoryCorporate PatchedRegulationCategory = "corporate"
	PatchedRegulationCategoryEducation PatchedRegulationCategory = "education"
	PatchedRegulationCategoryFinance   PatchedRegulationCategory = "finance"
	PatchedRegulationCategoryMedical   PatchedRegulationCategory = "medical"
	PatchedRegulationCategoryOther     PatchedRegulationCategory = "other"
	PatchedRegulationCategoryPrivacy   PatchedRegulationCategory = "privacy"
)

// Defines values for PatchedSystemSettingsJiraMinimumSeverity.
const (
	PatchedSystemSettingsJiraMinimumSeverityCritical PatchedSystemSettingsJiraMinimumSeverity = "Critical"
	PatchedSystemSettingsJiraMinimumSeverityEmpty    PatchedSystemSettingsJiraMinimumSeverity = ""
	PatchedSystemSettingsJiraMinimumSeverityHigh     PatchedSystemSettingsJiraMinimumSeverity = "High"
	PatchedSystemSettingsJiraMinimumSeverityInfo     PatchedSystemSettingsJiraMinimumSeverity = "Info"
	PatchedSystemSettingsJiraMinimumSeverityLow      PatchedSystemSettingsJiraMinimumSeverity = "Low"
	PatchedSystemSettingsJiraMinimumSeverityMedium   PatchedSystemSettingsJiraMinimumSeverity = "Medium"
	PatchedSystemSettingsJiraMinimumSeverityNil      PatchedSystemSettingsJiraMinimumSeverity = "<nil>"
)

// Defines values for PatchedSystemSettingsTimeZone.
const (
	PatchedSystemSettingsTimeZoneAfricaAbidjan                  PatchedSystemSettingsTimeZone = "Africa/Abidjan"
	PatchedSystemSettingsTimeZoneAfricaAccra                    PatchedSystemSettingsTimeZone = "Africa/Accra"
	PatchedSystemSettingsTimeZoneAfricaAddisAbaba               PatchedSystemSettingsTimeZone = "Africa/Addis_Ababa"
	PatchedSystemSettingsTimeZoneAfricaAlgiers                  PatchedSystemSettingsTimeZone = "Africa/Algiers"
	PatchedSystemSettingsTimeZoneAfricaAsmara                   PatchedSystemSettingsTimeZone = "Africa/Asmara"
	PatchedSystemSettingsTimeZoneAfricaAsmera                   PatchedSystemSettingsTimeZone = "Africa/Asmera"
	PatchedSystemSettingsTimeZoneAfricaBamako                   PatchedSystemSettingsTimeZone = "Africa/Bamako"
	PatchedSystemSettingsTimeZoneAfricaBangui                   PatchedSystemSettingsTimeZone = "Africa/Bangui"
	PatchedSystemSettingsTimeZoneAfricaBanjul                   PatchedSystemSettingsTimeZone = "Africa/Banjul"
	PatchedSystemSettingsTimeZoneAfricaBissau                   PatchedSystemSettingsTimeZone = "Africa/Bissau"
	PatchedSystemSettingsTimeZoneAfricaBlantyre                 PatchedSystemSettingsTimeZone = "Africa/Blantyre"
	PatchedSystemSettingsTimeZoneAfricaBrazzaville              PatchedSystemSettingsTimeZone = "Africa/Brazzaville"
	PatchedSystemSettingsTimeZoneAfricaBujumbura                PatchedSystemSettingsTimeZone = "Africa/Bujumbura"
	PatchedSystemSettingsTimeZoneAfricaCairo                    PatchedSystemSettingsTimeZone = "Africa/Cairo"
	PatchedSystemSettingsTimeZoneAfricaCasablanca               PatchedSystemSettingsTimeZone = "Africa/Casablanca"
	PatchedSystemSettingsTimeZoneAfricaCeuta                    PatchedSystemSettingsTimeZone = "Africa/Ceuta"
	PatchedSystemSettingsTimeZoneAfricaConakry                  PatchedSystemSettingsTimeZone = "Africa/Conakry"
	PatchedSystemSettingsTimeZoneAfricaDakar                    PatchedSystemSettingsTimeZone = "Africa/Dakar"
	PatchedSystemSettingsTimeZoneAfricaDarEsSalaam              PatchedSystemSettingsTimeZone = "Africa/Dar_es_Salaam"
	PatchedSystemSettingsTimeZoneAfricaDjibouti                 PatchedSystemSettingsTimeZone = "Africa/Djibouti"
	PatchedSystemSettingsTimeZoneAfricaDouala                   PatchedSystemSettingsTimeZone = "Africa/Douala"
	PatchedSystemSettingsTimeZoneAfricaElAaiun                  PatchedSystemSettingsTimeZone = "Africa/El_Aaiun"
	PatchedSystemSettingsTimeZoneAfricaFreetown                 PatchedSystemSettingsTimeZone = "Africa/Freetown"
	PatchedSystemSettingsTimeZoneAfricaGaborone                 PatchedSystemSettingsTimeZone = "Africa/Gaborone"
	PatchedSystemSettingsTimeZoneAfricaHarare                   PatchedSystemSettingsTimeZone = "Africa/Harare"
	PatchedSystemSettingsTimeZoneAfricaJohannesburg             PatchedSystemSettingsTimeZone = "Africa/Johannesburg"
	PatchedSystemSettingsTimeZoneAfricaJuba                     PatchedSystemSettingsTimeZone = "Africa/Juba"
	PatchedSystemSettingsTimeZoneAfricaKampala                  PatchedSystemSettingsTimeZone = "Africa/Kampala"
	PatchedSystemSettingsTimeZoneAfricaKhartoum                 PatchedSystemSettingsTimeZone = "Africa/Khartoum"
	PatchedSystemSettingsTimeZoneAfricaKigali                   PatchedSystemSettingsTimeZone = "Africa/Kigali"
	PatchedSystemSettingsTimeZoneAfricaKinshasa                 PatchedSystemSettingsTimeZone = "Africa/Kinshasa"
	PatchedSystemSettingsTimeZoneAfricaLagos                    PatchedSystemSettingsTimeZone = "Africa/Lagos"
	PatchedSystemSettingsTimeZoneAfricaLibreville               PatchedSystemSettingsTimeZone = "Africa/Libreville"
	PatchedSystemSettingsTimeZoneAfricaLome                     PatchedSystemSettingsTimeZone = "Africa/Lome"
	PatchedSystemSettingsTimeZoneAfricaLuanda                   PatchedSystemSettingsTimeZone = "Africa/Luanda"
	PatchedSystemSettingsTimeZoneAfricaLubumbashi               PatchedSystemSettingsTimeZone = "Africa/Lubumbashi"
	PatchedSystemSettingsTimeZoneAfricaLusaka                   PatchedSystemSettingsTimeZone = "Africa/Lusaka"
	PatchedSystemSettingsTimeZoneAfricaMalabo                   PatchedSystemSettingsTimeZone = "Africa/Malabo"
	PatchedSystemSettingsTimeZoneAfricaMaputo                   PatchedSystemSettingsTimeZone = "Africa/Maputo"
	PatchedSystemSettingsTimeZoneAfricaMaseru                   PatchedSystemSettingsTimeZone = "Africa/Maseru"
	PatchedSystemSettingsTimeZoneAfricaMbabane                  PatchedSystemSettingsTimeZone = "Africa/Mbabane"
	PatchedSystemSettingsTimeZoneAfricaMogadishu                PatchedSystemSettingsTimeZone = "Africa/Mogadishu"
	PatchedSystemSettingsTimeZoneAfricaMonrovia                 PatchedSystemSettingsTimeZone = "Africa/Monrovia"
	PatchedSystemSettingsTimeZoneAfricaNairobi                  PatchedSystemSettingsTimeZone = "Africa/Nairobi"
	PatchedSystemSettingsTimeZoneAfricaNdjamena                 PatchedSystemSettingsTimeZone = "Africa/Ndjamena"
	PatchedSystemSettingsTimeZoneAfricaNiamey                   PatchedSystemSettingsTimeZone = "Africa/Niamey"
	PatchedSystemSettingsTimeZoneAfricaNouakchott               PatchedSystemSettingsTimeZone = "Africa/Nouakchott"
	PatchedSystemSettingsTimeZoneAfricaOuagadougou              PatchedSystemSettingsTimeZone = "Africa/Ouagadougou"
	PatchedSystemSettingsTimeZoneAfricaPortoNovo                PatchedSystemSettingsTimeZone = "Africa/Porto-Novo"
	PatchedSystemSettingsTimeZoneAfricaSaoTome                  PatchedSystemSettingsTimeZone = "Africa/Sao_Tome"
	PatchedSystemSettingsTimeZoneAfricaTimbuktu                 PatchedSystemSettingsTimeZone = "Africa/Timbuktu"
	PatchedSystemSettingsTimeZoneAfricaTripoli                  PatchedSystemSettingsTimeZone = "Africa/Tripoli"
	PatchedSystemSettingsTimeZoneAfricaTunis                    PatchedSystemSettingsTimeZone = "Africa/Tunis"
	PatchedSystemSettingsTimeZoneAfricaWindhoek                 PatchedSystemSettingsTimeZone = "Africa/Windhoek"
	PatchedSystemSettingsTimeZoneAmericaAdak                    PatchedSystemSettingsTimeZone = "America/Adak"
	PatchedSystemSettingsTimeZoneAmericaAnchorage               PatchedSystemSettingsTimeZone = "America/Anchorage"
	PatchedSystemSettingsTimeZoneAmericaAnguilla                PatchedSystemSettingsTimeZone = "America/Anguilla"
	PatchedSystemSettingsTimeZoneAmericaAntigua                 PatchedSystemSettingsTimeZone = "America/Antigua"
	PatchedSystemSettingsTimeZoneAmericaAraguaina               PatchedSystemSettingsTimeZone = "America/Araguaina"
	PatchedSystemSettingsTimeZoneAmericaArgentinaBuenosAires    PatchedSystemSettingsTimeZone = "America/Argentina/Buenos_Aires"
	PatchedSystemSettingsTimeZoneAmericaArgentinaCatamarca      PatchedSystemSettingsTimeZone = "America/Argentina/Catamarca"
	PatchedSystemSettingsTimeZoneAmericaArgentinaComodRivadavia PatchedSystemSettingsTimeZone = "America/Argentina/ComodRivadavia"
	PatchedSystemSettingsTimeZoneAmericaArgentinaCordoba        PatchedSystemSettingsTimeZone = "America/Argentina/Cordoba"
	PatchedSystemSettingsTimeZoneAmericaArgentinaJujuy          PatchedSystemSettingsTimeZone = "America/Argentina/Jujuy"
	PatchedSystemSettingsTimeZoneAmericaArgentinaLaRioja        PatchedSystemSettingsTimeZone = "America/Argentina/La_Rioja"
	PatchedSystemSettingsTimeZoneAmericaArgentinaMendoza        PatchedSystemSettingsTimeZone = "America/Argentina/Mendoza"
	PatchedSystemSettingsTimeZoneAmericaArgentinaRioGallegos    PatchedSystemSettingsTimeZone = "America/Argentina/Rio_Gallegos"
	PatchedSystemSettingsTimeZoneAmericaArgentinaSalta          PatchedSystemSettingsTimeZone = "America/Argentina/Salta"
	PatchedSystemSettingsTimeZoneAmericaArgentinaSanJuan        PatchedSystemSettingsTimeZone = "America/Argentina/San_Juan"
	PatchedSystemSettingsTimeZoneAmericaArgentinaSanLuis        PatchedSystemSettingsTimeZone = "America/Argentina/San_Luis"
	PatchedSystemSettingsTimeZoneAmericaArgentinaTucuman        PatchedSystemSettingsTimeZone = "America/Argentina/Tucuman"
	PatchedSystemSettingsTimeZoneAmericaArgentinaUshuaia        PatchedSystemSettingsTimeZone = "America/Argentina/Ushuaia"
	PatchedSystemSettingsTimeZoneAmericaAruba                   PatchedSystemSettingsTimeZone = "America/Aruba"
	PatchedSystemSettingsTimeZoneAmericaAsuncion                PatchedSystemSettingsTimeZone = "America/Asuncion"
	PatchedSystemSettingsTimeZoneAmericaAtikokan                PatchedSystemSettingsTimeZone = "America/Atikokan"
	PatchedSystemSettingsTimeZoneAmericaAtka                    PatchedSystemSettingsTimeZone = "America/Atka"
	PatchedSystemSettingsTimeZoneAmericaBahia                   PatchedSystemSettingsTimeZone = "America/Bahia"
	PatchedSystemSettingsTimeZoneAmericaBahiaBanderas           PatchedSystemSettingsTimeZone = "America/Bahia_Banderas"
	PatchedSystemSettingsTimeZoneAmericaBarbados                PatchedSystemSettingsTimeZone = "America/Barbados"
	PatchedSystemSettingsTimeZoneAmericaBelem                   PatchedSystemSettingsTimeZone = "America/Belem"
	PatchedSystemSettingsTimeZoneAmericaBelize                  PatchedSystemSettingsTimeZone = "America/Belize"
	PatchedSystemSettingsTimeZoneAmericaBlancSablon             PatchedSystemSettingsTimeZone = "America/Blanc-Sablon"
	PatchedSystemSettingsTimeZoneAmericaBoaVista                PatchedSystemSettingsTimeZone = "America/Boa_Vista"
	PatchedSystemSettingsTimeZoneAmericaBogota                  PatchedSystemSettingsTimeZone = "America/Bogota"
	PatchedSystemSettingsTimeZoneAmericaBoise                   PatchedSystemSettingsTimeZone = "America/Boise"
	PatchedSystemSettingsTimeZoneAmericaBuenosAires             PatchedSystemSettingsTimeZone = "America/Buenos_Aires"
	PatchedSystemSettingsTimeZoneAmericaCambridgeBay            PatchedSystemSettingsTimeZone = "America/Cambridge_Bay"
	PatchedSystemSettingsTimeZoneAmericaCampoGrande             PatchedSystemSettingsTimeZone = "America/Campo_Grande"
	PatchedSystemSettingsTimeZoneAmericaCancun                  PatchedSystemSettingsTimeZone = "America/Cancun"
	PatchedSystemSettingsTimeZoneAmericaCaracas                 PatchedSystemSettingsTimeZone = "America/Caracas"
	PatchedSystemSettingsTimeZoneAmericaCatamarca               PatchedSystemSettingsTimeZone = "America/Catamarca"
	PatchedSystemSettingsTimeZoneAmericaCayenne                 PatchedSystemSettingsTimeZone = "America/Cayenne"
	PatchedSystemSettingsTimeZoneAmericaCayman                  PatchedSystemSettingsTimeZone = "America/Cayman"
	PatchedSystemSettingsTimeZoneAmericaChicago                 PatchedSystemSettingsTimeZone = "America/Chicago"
	PatchedSystemSettingsTimeZoneAmericaChihuahua               PatchedSystemSettingsTimeZone = "America/Chihuahua"
	PatchedSystemSettingsTimeZoneAmericaCoralHarbour            PatchedSystemSettingsTimeZone = "America/Coral_Harbour"
	PatchedSystemSettingsTimeZoneAmericaCordoba                 PatchedSystemSettingsTimeZone = "America/Cordoba"
	PatchedSystemSettingsTimeZoneAmericaCostaRica               PatchedSystemSettingsTimeZone = "America/Costa_Rica"
	PatchedSystemSettingsTimeZoneAmericaCreston                 PatchedSystemSettingsTimeZone = "America/Creston"
	PatchedSystemSettingsTimeZoneAmericaCuiaba                  PatchedSystemSettingsTimeZone = "America/Cuiaba"
	PatchedSystemSettingsTimeZoneAmericaCuracao                 PatchedSystemSettingsTimeZone = "America/Curacao"
	PatchedSystemSettingsTimeZoneAmericaDanmarkshavn            PatchedSystemSettingsTimeZone = "America/Danmarkshavn"
	PatchedSystemSettingsTimeZoneAmericaDawson                  PatchedSystemSettingsTimeZone = "America/Dawson"
	PatchedSystemSettingsTimeZoneAmericaDawsonCreek             PatchedSystemSettingsTimeZone = "America/Dawson_Creek"
	PatchedSystemSettingsTimeZoneAmericaDenver                  PatchedSystemSettingsTimeZone = "America/Denver"
	PatchedSystemSettingsTimeZoneAmericaDetroit                 PatchedSystemSettingsTimeZone = "America/Detroit"
	PatchedSystemSettingsTimeZoneAmericaDominica                PatchedSystemSettingsTimeZone = "America/Dominica"
	PatchedSystemSettingsTimeZoneAmericaEdmonton                PatchedSystemSettingsTimeZone = "America/Edmonton"
	PatchedSystemSettingsTimeZoneAmericaEirunepe                PatchedSystemSettingsTimeZone = "America/Eirunepe"
	PatchedSystemSettingsTimeZoneAmericaElSalvador              PatchedSystemSettingsTimeZone = "America/El_Salvador"
	PatchedSystemSettingsTimeZoneAmericaEnsenada                PatchedSystemSettingsTimeZone = "America/Ensenada"
	PatchedSystemSettingsTimeZoneAmericaFortNelson              PatchedSystemSettingsTimeZone = "America/Fort_Nelson"
	PatchedSystemSettingsTimeZoneAmericaFortWayne               PatchedSystemSettingsTimeZone = "America/Fort_Wayne"
	PatchedSystemSettingsTimeZoneAmericaFortaleza               PatchedSystemSettingsTimeZone = "America/Fortaleza"
	PatchedSystemSettingsTimeZoneAmericaGlaceBay                PatchedSystemSettingsTimeZone = "America/Glace_Bay"
	PatchedSystemSettingsTimeZoneAmericaGodthab                 PatchedSystemSettingsTimeZone = "America/Godthab"
	PatchedSystemSettingsTimeZoneAmericaGooseBay                PatchedSystemSettingsTimeZone = "America/Goose_Bay"
	PatchedSystemSettingsTimeZoneAmericaGrandTurk               PatchedSystemSettingsTimeZone = "America/Grand_Turk"
	PatchedSystemSettingsTimeZoneAmericaGrenada                 PatchedSystemSettingsTimeZone = "America/Grenada"
	PatchedSystemSettingsTimeZoneAmericaGuadeloupe              PatchedSystemSettingsTimeZone = "America/Guadeloupe"
	PatchedSystemSettingsTimeZoneAmericaGuatemala               PatchedSystemSettingsTimeZone = "America/Guatemala"
	PatchedSystemSettingsTimeZoneAmericaGuayaquil               PatchedSystemSettingsTimeZone = "America/Guayaquil"
	PatchedSystemSettingsTimeZoneAmericaGuyana                  PatchedSystemSettingsTimeZone = "America/Guyana"
	PatchedSystemSettingsTimeZoneAmericaHalifax                 PatchedSystemSettingsTimeZone = "America/Halifax"
	PatchedSystemSettingsTimeZoneAmericaHavana                  PatchedSystemSettingsTimeZone = "America/Havana"
	PatchedSystemSettingsTimeZoneAmericaHermosillo              PatchedSystemSettingsTimeZone = "America/Hermosillo"
	PatchedSystemSettingsTimeZoneAmericaIndianaIndianapolis     PatchedSystemSettingsTimeZone = "America/Indiana/Indianapolis"
	PatchedSystemSettingsTimeZoneAmericaIndianaKnox             PatchedSystemSettingsTimeZone = "America/Indiana/Knox"
	PatchedSystemSettingsTimeZoneAmericaIndianaMarengo          PatchedSystemSettingsTimeZone = "America/Indiana/Marengo"
	PatchedSystemSettingsTimeZoneAmericaIndianaPetersburg       PatchedSystemSettingsTimeZone = "America/Indiana/Petersburg"
	PatchedSystemSettingsTimeZoneAmericaIndianaTellCity         PatchedSystemSettingsTimeZone = "America/Indiana/Tell_City"
	PatchedSystemSettingsTimeZoneAmericaIndianaVevay            PatchedSystemSettingsTimeZone = "America/Indiana/Vevay"
	PatchedSystemSettingsTimeZoneAmericaIndianaVincennes        PatchedSystemSettingsTimeZone = "America/Indiana/Vincennes"
	PatchedSystemSettingsTimeZoneAmericaIndianaWinamac          PatchedSystemSettingsTimeZone = "America/Indiana/Winamac"
	PatchedSystemSettingsTimeZoneAmericaIndianapolis            PatchedSystemSettingsTimeZone = "America/Indianapolis"
	PatchedSystemSettingsTimeZoneAmericaInuvik                  PatchedSystemSettingsTimeZone = "America/Inuvik"
	PatchedSystemSettingsTimeZoneAmericaIqaluit                 PatchedSystemSettingsTimeZone = "America/Iqaluit"
	PatchedSystemSettingsTimeZoneAmericaJamaica                 PatchedSystemSettingsTimeZone = "America/Jamaica"
	PatchedSystemSettingsTimeZoneAmericaJujuy                   PatchedSystemSettingsTimeZone = "America/Jujuy"
	PatchedSystemSettingsTimeZoneAmericaJuneau                  PatchedSystemSettingsTimeZone = "America/Juneau"
	PatchedSystemSettingsTimeZoneAmericaKentuckyLouisville      PatchedSystemSettingsTimeZone = "America/Kentucky/Louisville"
	PatchedSystemSettingsTimeZoneAmericaKentuckyMonticello      PatchedSystemSettingsTimeZone = "America/Kentucky/Monticello"
	PatchedSystemSettingsTimeZoneAmericaKnoxIN                  PatchedSystemSettingsTimeZone = "America/Knox_IN"
	PatchedSystemSettingsTimeZoneAmericaKralendijk              PatchedSystemSettingsTimeZone = "America/Kralendijk"
	PatchedSystemSettingsTimeZoneAmericaLaPaz                   PatchedSystemSettingsTimeZone = "America/La_Paz"
	PatchedSystemSettingsTimeZoneAmericaLima                    PatchedSystemSettingsTimeZone = "America/Lima"
	PatchedSystemSettingsTimeZoneAmericaLosAngeles              PatchedSystemSettingsTimeZone = "America/Los_Angeles"
	PatchedSystemSettingsTimeZoneAmericaLouisville              PatchedSystemSettingsTimeZone = "America/Louisville"
	PatchedSystemSettingsTimeZoneAmericaLowerPrinces            PatchedSystemSettingsTimeZone = "America/Lower_Princes"
	PatchedSystemSettingsTimeZoneAmericaMaceio                  PatchedSystemSettingsTimeZone = "America/Maceio"
	PatchedSystemSettingsTimeZoneAmericaManagua                 PatchedSystemSettingsTimeZone = "America/Managua"
	PatchedSystemSettingsTimeZoneAmericaManaus                  PatchedSystemSettingsTimeZone = "America/Manaus"
	PatchedSystemSettingsTimeZoneAmericaMarigot                 PatchedSystemSettingsTimeZone = "America/Marigot"
	PatchedSystemSettingsTimeZoneAmericaMartinique              PatchedSystemSettingsTimeZone = "America/Martinique"
	PatchedSystemSettingsTimeZoneAmericaMatamoros               PatchedSystemSettingsTimeZone = "America/Matamoros"
	PatchedSystemSettingsTimeZoneAmericaMazatlan                PatchedSystemSettingsTimeZone = "America/Mazatlan"
	PatchedSystemSettingsTimeZoneAmericaMendoza                 PatchedSystemSettingsTimeZone = "America/Mendoza"
	PatchedSystemSettingsTimeZoneAmericaMenominee               PatchedSystemSettingsTimeZone = "America/Menominee"
	PatchedSystemSettingsTimeZoneAmericaMerida                  PatchedSystemSettingsTimeZone = "America/Merida"
	PatchedSystemSettingsTimeZoneAmericaMetlakatla              PatchedSystemSettingsTimeZone = "America/Metlakatla"
	PatchedSystemSettingsTimeZoneAmericaMexicoCity              PatchedSystemSettingsTimeZone = "America/Mexico_City"
	PatchedSystemSettingsTimeZoneAmericaMiquelon                PatchedSystemSettingsTimeZone = "America/Miquelon"
	PatchedSystemSettingsTimeZoneAmericaMoncton                 PatchedSystemSettingsTimeZone = "America/Moncton"
	PatchedSystemSettingsTimeZoneAmericaMonterrey               PatchedSystemSettingsTimeZone = "America/Monterrey"
	PatchedSystemSettingsTimeZoneAmericaMontevideo              PatchedSystemSettingsTimeZone = "America/Montevideo"
	PatchedSystemSettingsTimeZoneAmericaMontreal                PatchedSystemSettingsTimeZone = "America/Montreal"
	PatchedSystemSettingsTimeZoneAmericaMontserrat              PatchedSystemSettingsTimeZone = "America/Montserrat"
	PatchedSystemSettingsTimeZoneAmericaNassau                  PatchedSystemSettingsTimeZone = "America/Nassau"
	PatchedSystemSettingsTimeZoneAmericaNewYork                 PatchedSystemSettingsTimeZone = "America/New_York"
	PatchedSystemSettingsTimeZoneAmericaNipigon                 PatchedSystemSettingsTimeZone = "America/Nipigon"
	PatchedSystemSettingsTimeZoneAmericaNome                    PatchedSystemSettingsTimeZone = "America/Nome"
	PatchedSystemSettingsTimeZoneAmericaNoronha                 PatchedSystemSettingsTimeZone = "America/Noronha"
	PatchedSystemSettingsTimeZoneAmericaNorthDakotaBeulah       PatchedSystemSettingsTimeZone = "America/North_Dakota/Beulah"
	PatchedSystemSettingsTimeZoneAmericaNorthDakotaCenter       PatchedSystemSettingsTimeZone = "America/North_Dakota/Center"
	PatchedSystemSettingsTimeZoneAmericaNorthDakotaNewSalem     PatchedSystemSettingsTimeZone = "America/North_Dakota/New_Salem"
	PatchedSystemSettingsTimeZoneAmericaNuuk                    PatchedSystemSettingsTimeZone = "America/Nuuk"
	PatchedSystemSettingsTimeZoneAmericaOjinaga                 PatchedSystemSettingsTimeZone = "America/Ojinaga"
	PatchedSystemSettingsTimeZoneAmericaPanama                  PatchedSystemSettingsTimeZone = "America/Panama"
	PatchedSystemSettingsTimeZoneAmericaPangnirtung             PatchedSystemSettingsTimeZone = "America/Pangnirtung"
	PatchedSystemSettingsTimeZoneAmericaParamaribo              PatchedSystemSettingsTimeZone = "America/Paramaribo"
	PatchedSystemSettingsTimeZoneAmericaPhoenix                 PatchedSystemSettingsTimeZone = "America/Phoenix"
	PatchedSystemSettingsTimeZoneAmericaPortAuPrince            PatchedSystemSettingsTimeZone = "America/Port-au-Prince"
	PatchedSystemSettingsTimeZoneAmericaPortOfSpain             PatchedSystemSettingsTimeZone = "America/Port_of_Spain"
	PatchedSystemSettingsTimeZoneAmericaPortoAcre               PatchedSystemSettingsTimeZone = "America/Porto_Acre"
	PatchedSystemSettingsTimeZoneAmericaPortoVelho              PatchedSystemSettingsTimeZone = "America/Porto_Velho"
	PatchedSystemSettingsTimeZoneAmericaPuertoRico              PatchedSystemSettingsTimeZone = "America/Puerto_Rico"
	PatchedSystemSettingsTimeZoneAmericaPuntaArenas             PatchedSystemSettingsTimeZone = "America/Punta_Arenas"
	PatchedSystemSettingsTimeZoneAmericaRainyRiver              PatchedSystemSettingsTimeZone = "America/Rainy_River"
	PatchedSystemSettingsTimeZoneAmericaRankinInlet             PatchedSystemSettingsTimeZone = "America/Rankin_Inlet"
	PatchedSystemSettingsTimeZoneAmericaRecife                  PatchedSystemSettingsTimeZone = "America/Recife"
	PatchedSystemSettingsTimeZoneAmericaRegina                  PatchedSystemSettingsTimeZone = "America/Regina"
	PatchedSystemSettingsTimeZoneAmericaResolute                PatchedSystemSettingsTimeZone = "America/Resolute"
	PatchedSystemSettingsTimeZoneAmericaRioBranco               PatchedSystemSettingsTimeZone = "America/Rio_Branco"
	PatchedSystemSettingsTimeZoneAmericaRosario                 PatchedSystemSettingsTimeZone = "America/Rosario"
	PatchedSystemSettingsTimeZoneAmericaSantaIsabel             PatchedSystemSettingsTimeZone = "America/Santa_Isabel"
	PatchedSystemSettingsTimeZoneAmericaSantarem                PatchedSystemSettingsTimeZone = "America/Santarem"
	PatchedSystemSettingsTimeZoneAmericaSantiago                PatchedSystemSettingsTimeZone = "America/Santiago"
	PatchedSystemSettingsTimeZoneAmericaSantoDomingo            PatchedSystemSettingsTimeZone = "America/Santo_Domingo"
	PatchedSystemSettingsTimeZoneAmericaSaoPaulo                PatchedSystemSettingsTimeZone = "America/Sao_Paulo"
	PatchedSystemSettingsTimeZoneAmericaScoresbysund            PatchedSystemSettingsTimeZone = "America/Scoresbysund"
	PatchedSystemSettingsTimeZoneAmericaShiprock                PatchedSystemSettingsTimeZone = "America/Shiprock"
	PatchedSystemSettingsTimeZoneAmericaSitka                   PatchedSystemSettingsTimeZone = "America/Sitka"
	PatchedSystemSettingsTimeZoneAmericaStBarthelemy            PatchedSystemSettingsTimeZone = "America/St_Barthelemy"
	PatchedSystemSettingsTimeZoneAmericaStJohns                 PatchedSystemSettingsTimeZone = "America/St_Johns"
	PatchedSystemSettingsTimeZoneAmericaStKitts                 PatchedSystemSettingsTimeZone = "America/St_Kitts"
	PatchedSystemSettingsTimeZoneAmericaStLucia                 PatchedSystemSettingsTimeZone = "America/St_Lucia"
	PatchedSystemSettingsTimeZoneAmericaStThomas                PatchedSystemSettingsTimeZone = "America/St_Thomas"
	PatchedSystemSettingsTimeZoneAmericaStVincent               PatchedSystemSettingsTimeZone = "America/St_Vincent"
	PatchedSystemSettingsTimeZoneAmericaSwiftCurrent            PatchedSystemSettingsTimeZone = "America/Swift_Current"
	PatchedSystemSettingsTimeZoneAmericaTegucigalpa             PatchedSystemSettingsTimeZone = "America/Tegucigalpa"
	PatchedSystemSettingsTimeZoneAmericaThule                   PatchedSystemSettingsTimeZone = "America/Thule"
	PatchedSystemSettingsTimeZoneAmericaThunderBay              PatchedSystemSettingsTimeZone = "America/Thunder_Bay"
	PatchedSystemSettingsTimeZoneAmericaTijuana                 PatchedSystemSettingsTimeZone = "America/Tijuana"
	PatchedSystemSettingsTimeZoneAmericaToronto                 PatchedSystemSettingsTimeZone = "America/Toronto"
	PatchedSystemSettingsTimeZoneAmericaTortola                 PatchedSystemSettingsTimeZone = "America/Tortola"
	PatchedSystemSettingsTimeZoneAmericaVancouver               PatchedSystemSettingsTimeZone = "America/Vancouver"
	PatchedSystemSettingsTimeZoneAmericaVirgin                  PatchedSystemSettingsTimeZone = "America/Virgin"
	PatchedSystemSettingsTimeZoneAmericaWhitehorse              PatchedSystemSettingsTimeZone = "America/Whitehorse"
	PatchedSystemSettingsTimeZoneAmericaWinnipeg                PatchedSystemSettingsTimeZone = "America/Winnipeg"
	PatchedSystemSettingsTimeZoneAmericaYakutat                 PatchedSystemSettingsTimeZone = "America/Yakutat"
	PatchedSystemSettingsTimeZoneAmericaYellowknife             PatchedSystemSettingsTimeZone = "America/Yellowknife"
	PatchedSystemSettingsTimeZoneAntarcticaCasey                PatchedSystemSettingsTimeZone = "Antarctica/Casey"
	PatchedSystemSettingsTimeZoneAntarcticaDavis                PatchedSystemSettingsTimeZone = "Antarctica/Davis"
	PatchedSystemSettingsTimeZoneAntarcticaDumontDUrville       PatchedSystemSettingsTimeZone = "Antarctica/DumontDUrville"
	PatchedSystemSettingsTimeZoneAntarcticaMacquarie            PatchedSystemSettingsTimeZone = "Antarctica/Macquarie"
	PatchedSystemSettingsTimeZoneAntarcticaMawson               PatchedSystemSettingsTimeZone = "Antarctica/Mawson"
	PatchedSystemSettingsTimeZoneAntarcticaMcMurdo              PatchedSystemSettingsTimeZone = "Antarctica/McMurdo"
	PatchedSystemSettingsTimeZoneAntarcticaPalmer               PatchedSystemSettingsTimeZone = "Antarctica/Palmer"
	PatchedSystemSettingsTimeZoneAntarcticaRothera              PatchedSystemSettingsTimeZone = "Antarctica/Rothera"
	PatchedSystemSettingsTimeZoneAntarcticaSouthPole            PatchedSystemSettingsTimeZone = "Antarctica/South_Pole"
	PatchedSystemSettingsTimeZoneAntarcticaSyowa                PatchedSystemSettingsTimeZone = "Antarctica/Syowa"
	PatchedSystemSettingsTimeZoneAntarcticaTroll                PatchedSystemSettingsTimeZone = "Antarctica/Troll"
	PatchedSystemSettingsTimeZoneAntarcticaVostok               PatchedSystemSettingsTimeZone = "Antarctica/Vostok"
	PatchedSystemSettingsTimeZoneArcticLongyearbyen             PatchedSystemSettingsTimeZone = "Arctic/Longyearbyen"
	PatchedSystemSettingsTimeZoneAsiaAden                       PatchedSystemSettingsTimeZone = "Asia/Aden"
	PatchedSystemSettingsTimeZoneAsiaAlmaty                     PatchedSystemSettingsTimeZone = "Asia/Almaty"
	PatchedSystemSettingsTimeZoneAsiaAmman                      PatchedSystemSettingsTimeZone = "Asia/Amman"
	PatchedSystemSettingsTimeZoneAsiaAnadyr                     PatchedSystemSettingsTimeZone = "Asia/Anadyr"
	PatchedSystemSettingsTimeZoneAsiaAqtau                      PatchedSystemSettingsTimeZone = "Asia/Aqtau"
	PatchedSystemSettingsTimeZoneAsiaAqtobe                     PatchedSystemSettingsTimeZone = "Asia/Aqtobe"
	PatchedSystemSettingsTimeZoneAsiaAshgabat                   PatchedSystemSettingsTimeZone = "Asia/Ashgabat"
	PatchedSystemSettingsTimeZoneAsiaAshkhabad                  PatchedSystemSettingsTimeZone = "Asia/Ashkhabad"
	PatchedSystemSettingsTimeZoneAsiaAtyrau                     PatchedSystemSettingsTimeZone = "Asia/Atyrau"
	PatchedSystemSettingsTimeZoneAsiaBaghdad                    PatchedSystemSettingsTimeZone = "Asia/Baghdad"
	PatchedSystemSettingsTimeZoneAsiaBahrain                    PatchedSystemSettingsTimeZone = "Asia/Bahrain"
	PatchedSystemSettingsTimeZoneAsiaBaku                       PatchedSystemSettingsTimeZone = "Asia/Baku"
	PatchedSystemSettingsTimeZoneAsiaBangkok                    PatchedSystemSettingsTimeZone = "Asia/Bangkok"
	PatchedSystemSettingsTimeZoneAsiaBarnaul                    PatchedSystemSettingsTimeZone = "Asia/Barnaul"
	PatchedSystemSettingsTimeZoneAsiaBeirut                     PatchedSystemSettingsTimeZone = "Asia/Beirut"
	PatchedSystemSettingsTimeZoneAsiaBishkek                    PatchedSystemSettingsTimeZone = "Asia/Bishkek"
	PatchedSystemSettingsTimeZoneAsiaBrunei                     PatchedSystemSettingsTimeZone = "Asia/Brunei"
	PatchedSystemSettingsTimeZoneAsiaCalcutta                   PatchedSystemSettingsTimeZone = "Asia/Calcutta"
	PatchedSystemSettingsTimeZoneAsiaChita                      PatchedSystemSettingsTimeZone = "Asia/Chita"
	PatchedSystemSettingsTimeZoneAsiaChoibalsan                 PatchedSystemSettingsTimeZone = "Asia/Choibalsan"
	PatchedSystemSettingsTimeZoneAsiaChongqing                  PatchedSystemSettingsTimeZone = "Asia/Chongqing"
	PatchedSystemSettingsTimeZoneAsiaChungking                  PatchedSystemSettingsTimeZone = "Asia/Chungking"
	PatchedSystemSettingsTimeZoneAsiaColombo                    PatchedSystemSettingsTimeZone = "Asia/Colombo"
	PatchedSystemSettingsTimeZoneAsiaDacca                      PatchedSystemSettingsTimeZone = "Asia/Dacca"
	PatchedSystemSettingsTimeZoneAsiaDamascus                   PatchedSystemSettingsTimeZone = "Asia/Damascus"
	PatchedSystemSettingsTimeZoneAsiaDhaka                      PatchedSystemSettingsTimeZone = "Asia/Dhaka"
	PatchedSystemSettingsTimeZoneAsiaDili                       PatchedSystemSettingsTimeZone = "Asia/Dili"
	PatchedSystemSettingsTimeZoneAsiaDubai                      PatchedSystemSettingsTimeZone = "Asia/Dubai"
	PatchedSystemSettingsTimeZoneAsiaDushanbe                   PatchedSystemSettingsTimeZone = "Asia/Dushanbe"
	PatchedSystemSettingsTimeZoneAsiaFamagusta                  PatchedSystemSettingsTimeZone = "Asia/Famagusta"
	PatchedSystemSettingsTimeZoneAsiaGaza                       PatchedSystemSettingsTimeZone = "Asia/Gaza"
	PatchedSystemSettingsTimeZoneAsiaHarbin                     PatchedSystemSettingsTimeZone = "Asia/Harbin"
	PatchedSystemSettingsTimeZoneAsiaHebron                     PatchedSystemSettingsTimeZone = "Asia/Hebron"
	PatchedSystemSettingsTimeZoneAsiaHoChiMinh                  PatchedSystemSettingsTimeZone = "Asia/Ho_Chi_Minh"
	PatchedSystemSettingsTimeZoneAsiaHongKong                   PatchedSystemSettingsTimeZone = "Asia/Hong_Kong"
	PatchedSystemSettingsTimeZoneAsiaHovd                       PatchedSystemSettingsTimeZone = "Asia/Hovd"
	PatchedSystemSettingsTimeZoneAsiaIrkutsk                    PatchedSystemSettingsTimeZone = "Asia/Irkutsk"
	PatchedSystemSettingsTimeZoneAsiaIstanbul                   PatchedSystemSettingsTimeZone = "Asia/Istanbul"
	PatchedSystemSettingsTimeZoneAsiaJakarta                    PatchedSystemSettingsTimeZone = "Asia/Jakarta"
	PatchedSystemSettingsTimeZoneAsiaJayapura                   PatchedSystemSettingsTimeZone = "Asia/Jayapura"
	PatchedSystemSettingsTimeZoneAsiaJerusalem                  PatchedSystemSettingsTimeZone = "Asia/Jerusalem"
	PatchedSystemSettingsTimeZoneAsiaKabul                      PatchedSystemSettingsTimeZone = "Asia/Kabul"
	PatchedSystemSettingsTimeZoneAsiaKamchatka                  PatchedSystemSettingsTimeZone = "Asia/Kamchatka"
	PatchedSystemSettingsTimeZoneAsiaKarachi                    PatchedSystemSettingsTimeZone = "Asia/Karachi"
	PatchedSystemSettingsTimeZoneAsiaKashgar                    PatchedSystemSettingsTimeZone = "Asia/Kashgar"
	PatchedSystemSettingsTimeZoneAsiaKathmandu                  PatchedSystemSettingsTimeZone = "Asia/Kathmandu"
	PatchedSystemSettingsTimeZoneAsiaKatmandu                   PatchedSystemSettingsTimeZone = "Asia/Katmandu"
	PatchedSystemSettingsTimeZoneAsiaKhandyga                   PatchedSystemSettingsTimeZone = "Asia/Khandyga"
	PatchedSystemSettingsTimeZoneAsiaKolkata                    PatchedSystemSettingsTimeZone = "Asia/Kolkata"
	PatchedSystemSettingsTimeZoneAsiaKrasnoyarsk                PatchedSystemSettingsTimeZone = "Asia/Krasnoyarsk"
	PatchedSystemSettingsTimeZoneAsiaKualaLumpur                PatchedSystemSettingsTimeZone = "Asia/Kuala_Lumpur"
	PatchedSystemSettingsTimeZoneAsiaKuching                    PatchedSystemSettingsTimeZone = "Asia/Kuching"
	PatchedSystemSettingsTimeZoneAsiaKuwait                     PatchedSystemSettingsTimeZone = "Asia/Kuwait"
	PatchedSystemSettingsTimeZoneAsiaMacao                      PatchedSystemSettingsTimeZone = "Asia/Macao"
	PatchedSystemSettingsTimeZoneAsiaMacau                      PatchedSystemSettingsTimeZone = "Asia/Macau"
	PatchedSystemSettingsTimeZoneAsiaMagadan                    PatchedSystemSettingsTimeZone = "Asia/Magadan"
	PatchedSystemSettingsTimeZoneAsiaMakassar                   PatchedSystemSettingsTimeZone = "Asia/Makassar"
	PatchedSystemSettingsTimeZoneAsiaManila                     PatchedSystemSettingsTimeZone = "Asia/Manila"
	PatchedSystemSettingsTimeZoneAsiaMuscat                     PatchedSystemSettingsTimeZone = "Asia/Muscat"
	PatchedSystemSettingsTimeZoneAsiaNicosia                    PatchedSystemSettingsTimeZone = "Asia/Nicosia"
	PatchedSystemSettingsTimeZoneAsiaNovokuznetsk               PatchedSystemSettingsTimeZone = "Asia/Novokuznetsk"
	PatchedSystemSettingsTimeZoneAsiaNovosibirsk                PatchedSystemSettingsTimeZone = "Asia/Novosibirsk"
	PatchedSystemSettingsTimeZoneAsiaOmsk                       PatchedSystemSettingsTimeZone = "Asia/Omsk"
	PatchedSystemSettingsTimeZoneAsiaOral                       PatchedSystemSettingsTimeZone = "Asia/Oral"
	PatchedSystemSettingsTimeZoneAsiaPhnomPenh                  PatchedSystemSettingsTimeZone = "Asia/Phnom_Penh"
	PatchedSystemSettingsTimeZoneAsiaPontianak                  PatchedSystemSettingsTimeZone = "Asia/Pontianak"
	PatchedSystemSettingsTimeZoneAsiaPyongyang                  PatchedSystemSettingsTimeZone = "Asia/Pyongyang"
	PatchedSystemSettingsTimeZoneAsiaQatar                      PatchedSystemSettingsTimeZone = "Asia/Qatar"
	PatchedSystemSettingsTimeZoneAsiaQostanay                   PatchedSystemSettingsTimeZone = "Asia/Qostanay"
	PatchedSystemSettingsTimeZoneAsiaQyzylorda                  PatchedSystemSettingsTimeZone = "Asia/Qyzylorda"
	PatchedSystemSettingsTimeZoneAsiaRangoon                    PatchedSystemSettingsTimeZone = "Asia/Rangoon"
	PatchedSystemSettingsTimeZoneAsiaRiyadh                     PatchedSystemSettingsTimeZone = "Asia/Riyadh"
	PatchedSystemSettingsTimeZoneAsiaSaigon                     PatchedSystemSettingsTimeZone = "Asia/Saigon"
	PatchedSystemSettingsTimeZoneAsiaSakhalin                   PatchedSystemSettingsTimeZone = "Asia/Sakhalin"
	PatchedSystemSettingsTimeZoneAsiaSamarkand                  PatchedSystemSettingsTimeZone = "Asia/Samarkand"
	PatchedSystemSettingsTimeZoneAsiaSeoul                      PatchedSystemSettingsTimeZone = "Asia/Seoul"
	PatchedSystemSettingsTimeZoneAsiaShanghai                   PatchedSystemSettingsTimeZone = "Asia/Shanghai"
	PatchedSystemSettingsTimeZoneAsiaSingapore                  PatchedSystemSettingsTimeZone = "Asia/Singapore"
	PatchedSystemSettingsTimeZoneAsiaSrednekolymsk              PatchedSystemSettingsTimeZone = "Asia/Srednekolymsk"
	PatchedSystemSettingsTimeZoneAsiaTaipei                     PatchedSystemSettingsTimeZone = "Asia/Taipei"
	PatchedSystemSettingsTimeZoneAsiaTashkent                   PatchedSystemSettingsTimeZone = "Asia/Tashkent"
	PatchedSystemSettingsTimeZoneAsiaTbilisi                    PatchedSystemSettingsTimeZone = "Asia/Tbilisi"
	PatchedSystemSettingsTimeZoneAsiaTehran                     PatchedSystemSettingsTimeZone = "Asia/Tehran"
	PatchedSystemSettingsTimeZoneAsiaTelAviv                    PatchedSystemSettingsTimeZone = "Asia/Tel_Aviv"
	PatchedSystemSettingsTimeZoneAsiaThimbu                     PatchedSystemSettingsTimeZone = "Asia/Thimbu"
	PatchedSystemSettingsTimeZoneAsiaThimphu                    PatchedSystemSettingsTimeZone = "Asia/Thimphu"
	PatchedSystemSettingsTimeZoneAsiaTokyo                      PatchedSystemSettingsTimeZone = "Asia/Tokyo"
	PatchedSystemSettingsTimeZoneAsiaTomsk                      PatchedSystemSettingsTimeZone = "Asia/Tomsk"
	PatchedSystemSettingsTimeZoneAsiaUjungPandang               PatchedSystemSettingsTimeZone = "Asia/Ujung_Pandang"
	PatchedSystemSettingsTimeZoneAsiaUlaanbaatar                PatchedSystemSettingsTimeZone = "Asia/Ulaanbaatar"
	PatchedSystemSettingsTimeZoneAsiaUlanBator                  PatchedSystemSettingsTimeZone = "Asia/Ulan_Bator"
	PatchedSystemSettingsTimeZoneAsiaUrumqi                     PatchedSystemSettingsTimeZone = "Asia/Urumqi"
	PatchedSystemSettingsTimeZoneAsiaUstNera                    PatchedSystemSettingsTimeZone = "Asia/Ust-Nera"
	PatchedSystemSettingsTimeZoneAsiaVientiane                  PatchedSystemSettingsTimeZone = "Asia/Vientiane"
	PatchedSystemSettingsTimeZoneAsiaVladivostok                PatchedSystemSettingsTimeZone = "Asia/Vladivostok"
	PatchedSystemSettingsTimeZoneAsiaYakutsk                    PatchedSystemSettingsTimeZone = "Asia/Yakutsk"
	PatchedSystemSettingsTimeZoneAsiaYangon                     PatchedSystemSettingsTimeZone = "Asia/Yangon"
	PatchedSystemSettingsTimeZoneAsiaYekaterinburg              PatchedSystemSettingsTimeZone = "Asia/Yekaterinburg"
	PatchedSystemSettingsTimeZoneAsiaYerevan                    PatchedSystemSettingsTimeZone = "Asia/Yerevan"
	PatchedSystemSettingsTimeZoneAtlanticAzores                 PatchedSystemSettingsTimeZone = "Atlantic/Azores"
	PatchedSystemSettingsTimeZoneAtlanticBermuda                PatchedSystemSettingsTimeZone = "Atlantic/Bermuda"
	PatchedSystemSettingsTimeZoneAtlanticCanary                 PatchedSystemSettingsTimeZone = "Atlantic/Canary"
	PatchedSystemSettingsTimeZoneAtlanticCapeVerde              PatchedSystemSettingsTimeZone = "Atlantic/Cape_Verde"
	PatchedSystemSettingsTimeZoneAtlanticFaeroe                 PatchedSystemSettingsTimeZone = "Atlantic/Faeroe"
	PatchedSystemSettingsTimeZoneAtlanticFaroe                  PatchedSystemSettingsTimeZone = "Atlantic/Faroe"
	PatchedSystemSettingsTimeZoneAtlanticJanMayen               PatchedSystemSettingsTimeZone = "Atlantic/Jan_Mayen"
	PatchedSystemSettingsTimeZoneAtlanticMadeira                PatchedSystemSettingsTimeZone = "Atlantic/Madeira"
	PatchedSystemSettingsTimeZoneAtlanticReykjavik              PatchedSystemSettingsTimeZone = "Atlantic/Reykjavik"
	PatchedSystemSettingsTimeZoneAtlanticSouthGeorgia           PatchedSystemSettingsTimeZone = "Atlantic/South_Georgia"
	PatchedSystemSettingsTimeZoneAtlanticStHelena               PatchedSystemSettingsTimeZone = "Atlantic/St_Helena"
	PatchedSystemSettingsTimeZoneAtlanticStanley                PatchedSystemSettingsTimeZone = "Atlantic/Stanley"
	PatchedSystemSettingsTimeZoneAustraliaACT                   PatchedSystemSettingsTimeZone = "Australia/ACT"
	PatchedSystemSettingsTimeZoneAustraliaAdelaide              PatchedSystemSettingsTimeZone = "Australia/Adelaide"
	PatchedSystemSettingsTimeZoneAustraliaBrisbane              PatchedSystemSettingsTimeZone = "Australia/Brisbane"
	PatchedSystemSettingsTimeZoneAustraliaBrokenHill            PatchedSystemSettingsTimeZone = "Australia/Broken_Hill"
	PatchedSystemSettingsTimeZoneAustraliaCanberra              PatchedSystemSettingsTimeZone = "Australia/Canberra"
	PatchedSystemSettingsTimeZoneAustraliaCurrie                PatchedSystemSettingsTimeZone = "Australia/Currie"
	PatchedSystemSettingsTimeZoneAustraliaDarwin                PatchedSystemSettingsTimeZone = "Australia/Darwin"
	PatchedSystemSettingsTimeZoneAustraliaEucla                 PatchedSystemSettingsTimeZone = "Australia/Eucla"
	PatchedSystemSettingsTimeZoneAustraliaHobart                PatchedSystemSettingsTimeZone = "Australia/Hobart"
	PatchedSystemSettingsTimeZoneAustraliaLHI                   PatchedSystemSettingsTimeZone = "Australia/LHI"
	PatchedSystemSettingsTimeZoneAustraliaLindeman              PatchedSystemSettingsTimeZone = "Australia/Lindeman"
	PatchedSystemSettingsTimeZoneAustraliaLordHowe              PatchedSystemSettingsTimeZone = "Australia/Lord_Howe"
	PatchedSystemSettingsTimeZoneAustraliaMelbourne             PatchedSystemSettingsTimeZone = "Australia/Melbourne"
	PatchedSystemSettingsTimeZoneAustraliaNSW                   PatchedSystemSettingsTimeZone = "Australia/NSW"
	PatchedSystemSettingsTimeZoneAustraliaNorth                 PatchedSystemSettingsTimeZone = "Australia/North"
	PatchedSystemSettingsTimeZoneAustraliaPerth                 PatchedSystemSettingsTimeZone = "Australia/Perth"
	PatchedSystemSettingsTimeZoneAustraliaQueensland            PatchedSystemSettingsTimeZone = "Australia/Queensland"
	PatchedSystemSettingsTimeZoneAustraliaSouth                 PatchedSystemSettingsTimeZone = "Australia/South"
	PatchedSystemSettingsTimeZoneAustraliaSydney                PatchedSystemSettingsTimeZone = "Australia/Sydney"
	PatchedSystemSettingsTimeZoneAustraliaTasmania              PatchedSystemSettingsTimeZone = "Australia/Tasmania"
	PatchedSystemSettingsTimeZoneAustraliaVictoria              PatchedSystemSettingsTimeZone = "Australia/Victoria"
	PatchedSystemSettingsTimeZoneAustraliaWest                  PatchedSystemSettingsTimeZone = "Australia/West"
	PatchedSystemSettingsTimeZoneAustraliaYancowinna            PatchedSystemSettingsTimeZone = "Australia/Yancowinna"
	PatchedSystemSettingsTimeZoneBrazilAcre                     PatchedSystemSettingsTimeZone = "Brazil/Acre"
	PatchedSystemSettingsTimeZoneBrazilDeNoronha                PatchedSystemSettingsTimeZone = "Brazil/DeNoronha"
	PatchedSystemSettingsTimeZoneBrazilEast                     PatchedSystemSettingsTimeZone = "Brazil/East"
	PatchedSystemSettingsTimeZoneBrazilWest                     PatchedSystemSettingsTimeZone = "Brazil/West"
	PatchedSystemSettingsTimeZoneCET                            PatchedSystemSettingsTimeZone = "CET"
	PatchedSystemSettingsTimeZoneCST6CDT                        PatchedSystemSettingsTimeZone = "CST6CDT"
	PatchedSystemSettingsTimeZoneCanadaAtlantic                 PatchedSystemSettingsTimeZone = "Canada/Atlantic"
	PatchedSystemSettingsTimeZoneCanadaCentral                  PatchedSystemSettingsTimeZone = "Canada/Central"
	PatchedSystemSettingsTimeZoneCanadaEastern                  PatchedSystemSettingsTimeZone = "Canada/Eastern"
	PatchedSystemSettingsTimeZoneCanadaMountain                 PatchedSystemSettingsTimeZone = "Canada/Mountain"
	PatchedSystemSettingsTimeZoneCanadaNewfoundland             PatchedSystemSettingsTimeZone = "Canada/Newfoundland"
	PatchedSystemSettingsTimeZoneCanadaPacific                  PatchedSystemSettingsTimeZone = "Canada/Pacific"
	PatchedSystemSettingsTimeZoneCanadaSaskatchewan             PatchedSystemSettingsTimeZone = "Canada/Saskatchewan"
	PatchedSystemSettingsTimeZoneCanadaYukon                    PatchedSystemSettingsTimeZone = "Canada/Yukon"
	PatchedSystemSettingsTimeZoneChileContinental               PatchedSystemSettingsTimeZone = "Chile/Continental"
	PatchedSystemSettingsTimeZoneChileEasterIsland              PatchedSystemSettingsTimeZone = "Chile/EasterIsland"
	PatchedSystemSettingsTimeZoneCuba                           PatchedSystemSettingsTimeZone = "Cuba"
	PatchedSystemSettingsTimeZoneEET                            PatchedSystemSettingsTimeZone = "EET"
	PatchedSystemSettingsTimeZoneEST                            PatchedSystemSettingsTimeZone = "EST"
	PatchedSystemSettingsTimeZoneEST5EDT                        PatchedSystemSettingsTimeZone = "EST5EDT"
	PatchedSystemSettingsTimeZoneEgypt                          PatchedSystemSettingsTimeZone = "Egypt"
	PatchedSystemSettingsTimeZoneEire                           PatchedSystemSettingsTimeZone = "Eire"
	PatchedSystemSettingsTimeZoneEtcGMT                         PatchedSystemSettingsTimeZone = "Etc/GMT"
	PatchedSystemSettingsTimeZoneEtcGMT0                        PatchedSystemSettingsTimeZone = "Etc/GMT+0"
	PatchedSystemSettingsTimeZoneEtcGMT01                       PatchedSystemSettingsTimeZone = "Etc/GMT-0"
	PatchedSystemSettingsTimeZoneEtcGMT02                       PatchedSystemSettingsTimeZone = "Etc/GMT0"
	PatchedSystemSettingsTimeZoneEtcGMT1                        PatchedSystemSettingsTimeZone = "Etc/GMT+1"
	PatchedSystemSettingsTimeZoneEtcGMT10                       PatchedSystemSettingsTimeZone = "Etc/GMT+10"
	PatchedSystemSettingsTimeZoneEtcGMT101                      PatchedSystemSettingsTimeZone = "Etc/GMT-10"
	PatchedSystemSettingsTimeZoneEtcGMT11                       PatchedSystemSettingsTimeZone = "Etc/GMT-1"
	PatchedSystemSettingsTimeZoneEtcGMT111                      PatchedSystemSettingsTimeZone = "Etc/GMT-11"
	PatchedSystemSettingsTimeZoneEtcGMT12                       PatchedSystemSettingsTimeZone = "Etc/GMT+12"
	PatchedSystemSettingsTimeZoneEtcGMT121                      PatchedSystemSettingsTimeZone = "Etc/GMT-12"
	PatchedSystemSettingsTimeZoneEtcGMT13                       PatchedSystemSettingsTimeZone = "Etc/GMT-13"
	PatchedSystemSettingsTimeZoneEtcGMT14                       PatchedSystemSettingsTimeZone = "Etc/GMT-14"
	PatchedSystemSettingsTimeZoneEtcGMT2                        PatchedSystemSettingsTimeZone = "Etc/GMT+2"
	PatchedSystemSettingsTimeZoneEtcGMT21                       PatchedSystemSettingsTimeZone = "Etc/GMT-2"
	PatchedSystemSettingsTimeZoneEtcGMT3                        PatchedSystemSettingsTimeZone = "Etc/GMT+3"
	PatchedSystemSettingsTimeZoneEtcGMT31                       PatchedSystemSettingsTimeZone = "Etc/GMT-3"
	PatchedSystemSettingsTimeZoneEtcGMT4                        PatchedSystemSettingsTimeZone = "Etc/GMT+4"
	PatchedSystemSettingsTimeZoneEtcGMT41                       PatchedSystemSettingsTimeZone = "Etc/GMT-4"
	PatchedSystemSettingsTimeZoneEtcGMT5                        PatchedSystemSettingsTimeZone = "Etc/GMT+5"
	PatchedSystemSettingsTimeZoneEtcGMT51                       PatchedSystemSettingsTimeZone = "Etc/GMT-5"
	PatchedSystemSettingsTimeZoneEtcGMT6                        PatchedSystemSettingsTimeZone = "Etc/GMT+6"
	PatchedSystemSettingsTimeZoneEtcGMT61                       PatchedSystemSettingsTimeZone = "Etc/GMT-6"
	PatchedSystemSettingsTimeZoneEtcGMT7                        PatchedSystemSettingsTimeZone = "Etc/GMT+7"
	PatchedSystemSettingsTimeZoneEtcGMT71                       PatchedSystemSettingsTimeZone = "Etc/GMT-7"
	PatchedSystemSettingsTimeZoneEtcGMT8                        PatchedSystemSettingsTimeZone = "Etc/GMT+8"
	PatchedSystemSettingsTimeZoneEtcGMT81                       PatchedSystemSettingsTimeZone = "Etc/GMT-8"
	PatchedSystemSettingsTimeZoneEtcGMT9                        PatchedSystemSettingsTimeZone = "Etc/GMT+9"
	PatchedSystemSettingsTimeZoneEtcGMT91                       PatchedSystemSettingsTimeZone = "Etc/GMT-9"
	PatchedSystemSettingsTimeZoneEtcGreenwich                   PatchedSystemSettingsTimeZone = "Etc/Greenwich"
	PatchedSystemSettingsTimeZoneEtcUCT                         PatchedSystemSettingsTimeZone = "Etc/UCT"
	PatchedSystemSettingsTimeZoneEtcUTC                         PatchedSystemSettingsTimeZone = "Etc/UTC"
	PatchedSystemSettingsTimeZoneEtcUniversal                   PatchedSystemSettingsTimeZone = "Etc/Universal"
	PatchedSystemSettingsTimeZoneEtcZulu                        PatchedSystemSettingsTimeZone = "Etc/Zulu"
	PatchedSystemSettingsTimeZoneEuropeAmsterdam                PatchedSystemSettingsTimeZone = "Europe/Amsterdam"
	PatchedSystemSettingsTimeZoneEuropeAndorra                  PatchedSystemSettingsTimeZone = "Europe/Andorra"
	PatchedSystemSettingsTimeZoneEuropeAstrakhan                PatchedSystemSettingsTimeZone = "Europe/Astrakhan"
	PatchedSystemSettingsTimeZoneEuropeAthens                   PatchedSystemSettingsTimeZone = "Europe/Athens"
	PatchedSystemSettingsTimeZoneEuropeBelfast                  PatchedSystemSettingsTimeZone = "Europe/Belfast"
	PatchedSystemSettingsTimeZoneEuropeBelgrade                 PatchedSystemSettingsTimeZone = "Europe/Belgrade"
	PatchedSystemSettingsTimeZoneEuropeBerlin                   PatchedSystemSettingsTimeZone = "Europe/Berlin"
	PatchedSystemSettingsTimeZoneEuropeBratislava               PatchedSystemSettingsTimeZone = "Europe/Bratislava"
	PatchedSystemSettingsTimeZoneEuropeBrussels                 PatchedSystemSettingsTimeZone = "Europe/Brussels"
	PatchedSystemSettingsTimeZoneEuropeBucharest                PatchedSystemSettingsTimeZone = "Europe/Bucharest"
	PatchedSystemSettingsTimeZoneEuropeBudapest                 PatchedSystemSettingsTimeZone = "Europe/Budapest"
	PatchedSystemSettingsTimeZoneEuropeBusingen                 PatchedSystemSettingsTimeZone = "Europe/Busingen"
	PatchedSystemSettingsTimeZoneEuropeChisinau                 PatchedSystemSettingsTimeZone = "Europe/Chisinau"
	PatchedSystemSettingsTimeZoneEuropeCopenhagen               PatchedSystemSettingsTimeZone = "Europe/Copenhagen"
	PatchedSystemSettingsTimeZoneEuropeDublin                   PatchedSystemSettingsTimeZone = "Europe/Dublin"
	PatchedSystemSettingsTimeZoneEuropeGibraltar                PatchedSystemSettingsTimeZone = "Europe/Gibraltar"
	PatchedSystemSettingsTimeZoneEuropeGuernsey                 PatchedSystemSettingsTimeZone = "Europe/Guernsey"
	PatchedSystemSettingsTimeZoneEuropeHelsinki                 PatchedSystemSettingsTimeZone = "Europe/Helsinki"
	PatchedSystemSettingsTimeZoneEuropeIsleOfMan                PatchedSystemSettingsTimeZone = "Europe/Isle_of_Man"
	PatchedSystemSettingsTimeZoneEuropeIstanbul                 PatchedSystemSettingsTimeZone = "Europe/Istanbul"
	PatchedSystemSettingsTimeZoneEuropeJersey                   PatchedSystemSettingsTimeZone = "Europe/Jersey"
	PatchedSystemSettingsTimeZoneEuropeKaliningrad              PatchedSystemSettingsTimeZone = "Europe/Kaliningrad"
	PatchedSystemSettingsTimeZoneEuropeKiev                     PatchedSystemSettingsTimeZone = "Europe/Kiev"
	PatchedSystemSettingsTimeZoneEuropeKirov                    PatchedSystemSettingsTimeZone = "Europe/Kirov"
	PatchedSystemSettingsTimeZoneEuropeLisbon                   PatchedSystemSettingsTimeZone = "Europe/Lisbon"
	PatchedSystemSettingsTimeZoneEuropeLjubljana                PatchedSystemSettingsTimeZone = "Europe/Ljubljana"
	PatchedSystemSettingsTimeZoneEuropeLondon                   PatchedSystemSettingsTimeZone = "Europe/London"
	PatchedSystemSettingsTimeZoneEuropeLuxembourg               PatchedSystemSettingsTimeZone = "Europe/Luxembourg"
	PatchedSystemSettingsTimeZoneEuropeMadrid                   PatchedSystemSettingsTimeZone = "Europe/Madrid"
	PatchedSystemSettingsTimeZoneEuropeMalta                    PatchedSystemSettingsTimeZone = "Europe/Malta"
	PatchedSystemSettingsTimeZoneEuropeMariehamn                PatchedSystemSettingsTimeZone = "Europe/Mariehamn"
	PatchedSystemSettingsTimeZoneEuropeMinsk                    PatchedSystemSettingsTimeZone = "Europe/Minsk"
	PatchedSystemSettingsTimeZoneEuropeMonaco                   PatchedSystemSettingsTimeZone = "Europe/Monaco"
	PatchedSystemSettingsTimeZoneEuropeMoscow                   PatchedSystemSettingsTimeZone = "Europe/Moscow"
	PatchedSystemSettingsTimeZoneEuropeNicosia                  PatchedSystemSettingsTimeZone = "Europe/Nicosia"
	PatchedSystemSettingsTimeZoneEuropeOslo                     PatchedSystemSettingsTimeZone = "Europe/Oslo"
	PatchedSystemSettingsTimeZoneEuropeParis                    PatchedSystemSettingsTimeZone = "Europe/Paris"
	PatchedSystemSettingsTimeZoneEuropePodgorica                PatchedSystemSettingsTimeZone = "Europe/Podgorica"
	PatchedSystemSettingsTimeZoneEuropePrague                   PatchedSystemSettingsTimeZone = "Europe/Prague"
	PatchedSystemSettingsTimeZoneEuropeRiga                     PatchedSystemSettingsTimeZone = "Europe/Riga"
	PatchedSystemSettingsTimeZoneEuropeRome                     PatchedSystemSettingsTimeZone = "Europe/Rome"
	PatchedSystemSettingsTimeZoneEuropeSamara                   PatchedSystemSettingsTimeZone = "Europe/Samara"
	PatchedSystemSettingsTimeZoneEuropeSanMarino                PatchedSystemSettingsTimeZone = "Europe/San_Marino"
	PatchedSystemSettingsTimeZoneEuropeSarajevo                 PatchedSystemSettingsTimeZone = "Europe/Sarajevo"
	PatchedSystemSettingsTimeZoneEuropeSaratov                  PatchedSystemSettingsTimeZone = "Europe/Saratov"
	PatchedSystemSettingsTimeZoneEuropeSimferopol               PatchedSystemSettingsTimeZone = "Europe/Simferopol"
	PatchedSystemSettingsTimeZoneEuropeSkopje                   PatchedSystemSettingsTimeZone = "Europe/Skopje"
	PatchedSystemSettingsTimeZoneEuropeSofia                    PatchedSystemSettingsTimeZone = "Europe/Sofia"
	PatchedSystemSettingsTimeZoneEuropeStockholm                PatchedSystemSettingsTimeZone = "Europe/Stockholm"
	PatchedSystemSettingsTimeZoneEuropeTallinn                  PatchedSystemSettingsTimeZone = "Europe/Tallinn"
	PatchedSystemSettingsTimeZoneEuropeTirane                   PatchedSystemSettingsTimeZone = "Europe/Tirane"
	PatchedSystemSettingsTimeZoneEuropeTiraspol                 PatchedSystemSettingsTimeZone = "Europe/Tiraspol"
	PatchedSystemSettingsTimeZoneEuropeUlyanovsk                PatchedSystemSettingsTimeZone = "Europe/Ulyanovsk"
	PatchedSystemSettingsTimeZoneEuropeUzhgorod                 PatchedSystemSettingsTimeZone = "Europe/Uzhgorod"
	PatchedSystemSettingsTimeZoneEuropeVaduz                    PatchedSystemSettingsTimeZone = "Europe/Vaduz"
	PatchedSystemSettingsTimeZoneEuropeVatican                  PatchedSystemSettingsTimeZone = "Europe/Vatican"
	PatchedSystemSettingsTimeZoneEuropeVienna                   PatchedSystemSettingsTimeZone = "Europe/Vienna"
	PatchedSystemSettingsTimeZoneEuropeVilnius                  PatchedSystemSettingsTimeZone = "Europe/Vilnius"
	PatchedSystemSettingsTimeZoneEuropeVolgograd                PatchedSystemSettingsTimeZone = "Europe/Volgograd"
	PatchedSystemSettingsTimeZoneEuropeWarsaw                   PatchedSystemSettingsTimeZone = "Europe/Warsaw"
	PatchedSystemSettingsTimeZoneEuropeZagreb                   PatchedSystemSettingsTimeZone = "Europe/Zagreb"
	PatchedSystemSettingsTimeZoneEuropeZaporozhye               PatchedSystemSettingsTimeZone = "Europe/Zaporozhye"
	PatchedSystemSettingsTimeZoneEuropeZurich                   PatchedSystemSettingsTimeZone = "Europe/Zurich"
	PatchedSystemSettingsTimeZoneGB                             PatchedSystemSettingsTimeZone = "GB"
	PatchedSystemSettingsTimeZoneGBEire                         PatchedSystemSettingsTimeZone = "GB-Eire"
	PatchedSystemSettingsTimeZoneGMT                            PatchedSystemSettingsTimeZone = "GMT"
	PatchedSystemSettingsTimeZoneGMT0                           PatchedSystemSettingsTimeZone = "GMT+0"
	PatchedSystemSettingsTimeZoneGMT01                          PatchedSystemSettingsTimeZone = "GMT-0"
	PatchedSystemSettingsTimeZoneGMT02                          PatchedSystemSettingsTimeZone = "GMT0"
	PatchedSystemSettingsTimeZoneGreenwich                      PatchedSystemSettingsTimeZone = "Greenwich"
	PatchedSystemSettingsTimeZoneHST                            PatchedSystemSettingsTimeZone = "HST"
	PatchedSystemSettingsTimeZoneHongkong                       PatchedSystemSettingsTimeZone = "Hongkong"
	PatchedSystemSettingsTimeZoneIceland                        PatchedSystemSettingsTimeZone = "Iceland"
	PatchedSystemSettingsTimeZoneIndianAntananarivo             PatchedSystemSettingsTimeZone = "Indian/Antananarivo"
	PatchedSystemSettingsTimeZoneIndianChagos                   PatchedSystemSettingsTimeZone = "Indian/Chagos"
	PatchedSystemSettingsTimeZoneIndianChristmas                PatchedSystemSettingsTimeZone = "Indian/Christmas"
	PatchedSystemSettingsTimeZoneIndianCocos                    PatchedSystemSettingsTimeZone = "Indian/Cocos"
	PatchedSystemSettingsTimeZoneIndianComoro                   PatchedSystemSettingsTimeZone = "Indian/Comoro"
	PatchedSystemSettingsTimeZoneIndianKerguelen                PatchedSystemSettingsTimeZone = "Indian/Kerguelen"
	PatchedSystemSettingsTimeZoneIndianMahe                     PatchedSystemSettingsTimeZone = "Indian/Mahe"
	PatchedSystemSettingsTimeZoneIndianMaldives                 PatchedSystemSettingsTimeZone = "Indian/Maldives"
	PatchedSystemSettingsTimeZoneIndianMauritius                PatchedSystemSettingsTimeZone = "Indian/Mauritius"
	PatchedSystemSettingsTimeZoneIndianMayotte                  PatchedSystemSettingsTimeZone = "Indian/Mayotte"
	PatchedSystemSettingsTimeZoneIndianReunion                  PatchedSystemSettingsTimeZone = "Indian/Reunion"
	PatchedSystemSettingsTimeZoneIran                           PatchedSystemSettingsTimeZone = "Iran"
	PatchedSystemSettingsTimeZoneIsrael                         PatchedSystemSettingsTimeZone = "Israel"
	PatchedSystemSettingsTimeZoneJamaica                        PatchedSystemSettingsTimeZone = "Jamaica"
	PatchedSystemSettingsTimeZoneJapan                          PatchedSystemSettingsTimeZone = "Japan"
	PatchedSystemSettingsTimeZoneKwajalein                      PatchedSystemSettingsTimeZone = "Kwajalein"
	PatchedSystemSettingsTimeZoneLibya                          PatchedSystemSettingsTimeZone = "Libya"
	PatchedSystemSettingsTimeZoneMET                            PatchedSystemSettingsTimeZone = "MET"
	PatchedSystemSettingsTimeZoneMST                            PatchedSystemSettingsTimeZone = "MST"
	PatchedSystemSettingsTimeZoneMST7MDT                        PatchedSystemSettingsTimeZone = "MST7MDT"
	PatchedSystemSettingsTimeZoneMexicoBajaNorte                PatchedSystemSettingsTimeZone = "Mexico/BajaNorte"
	PatchedSystemSettingsTimeZoneMexicoBajaSur                  PatchedSystemSettingsTimeZone = "Mexico/BajaSur"
	PatchedSystemSettingsTimeZoneMexicoGeneral                  PatchedSystemSettingsTimeZone = "Mexico/General"
	PatchedSystemSettingsTimeZoneNZ                             PatchedSystemSettingsTimeZone = "NZ"
	PatchedSystemSettingsTimeZoneNZCHAT                         PatchedSystemSettingsTimeZone = "NZ-CHAT"
	PatchedSystemSettingsTimeZoneNavajo                         PatchedSystemSettingsTimeZone = "Navajo"
	PatchedSystemSettingsTimeZonePRC                            PatchedSystemSettingsTimeZone = "PRC"
	PatchedSystemSettingsTimeZonePST8PDT                        PatchedSystemSettingsTimeZone = "PST8PDT"
	PatchedSystemSettingsTimeZonePacificApia                    PatchedSystemSettingsTimeZone = "Pacific/Apia"
	PatchedSystemSettingsTimeZonePacificAuckland                PatchedSystemSettingsTimeZone = "Pacific/Auckland"
	PatchedSystemSettingsTimeZonePacificBougainville            PatchedSystemSettingsTimeZone = "Pacific/Bougainville"
	PatchedSystemSettingsTimeZonePacificChatham                 PatchedSystemSettingsTimeZone = "Pacific/Chatham"
	PatchedSystemSettingsTimeZonePacificChuuk                   PatchedSystemSettingsTimeZone = "Pacific/Chuuk"
	PatchedSystemSettingsTimeZonePacificEaster                  PatchedSystemSettingsTimeZone = "Pacific/Easter"
	PatchedSystemSettingsTimeZonePacificEfate                   PatchedSystemSettingsTimeZone = "Pacific/Efate"
	PatchedSystemSettingsTimeZonePacificEnderbury               PatchedSystemSettingsTimeZone = "Pacific/Enderbury"
	PatchedSystemSettingsTimeZonePacificFakaofo                 PatchedSystemSettingsTimeZone = "Pacific/Fakaofo"
	PatchedSystemSettingsTimeZonePacificFiji                    PatchedSystemSettingsTimeZone = "Pacific/Fiji"
	PatchedSystemSettingsTimeZonePacificFunafuti                PatchedSystemSettingsTimeZone = "Pacific/Funafuti"
	PatchedSystemSettingsTimeZonePacificGalapagos               PatchedSystemSettingsTimeZone = "Pacific/Galapagos"
	PatchedSystemSettingsTimeZonePacificGambier                 PatchedSystemSettingsTimeZone = "Pacific/Gambier"
	PatchedSystemSettingsTimeZonePacificGuadalcanal             PatchedSystemSettingsTimeZone = "Pacific/Guadalcanal"
	PatchedSystemSettingsTimeZonePacificGuam                    PatchedSystemSettingsTimeZone = "Pacific/Guam"
	PatchedSystemSettingsTimeZonePacificHonolulu                PatchedSystemSettingsTimeZone = "Pacific/Honolulu"
	PatchedSystemSettingsTimeZonePacificJohnston                PatchedSystemSettingsTimeZone = "Pacific/Johnston"
	PatchedSystemSettingsTimeZonePacificKanton                  PatchedSystemSettingsTimeZone = "Pacific/Kanton"
	PatchedSystemSettingsTimeZonePacificKiritimati              PatchedSystemSettingsTimeZone = "Pacific/Kiritimati"
	PatchedSystemSettingsTimeZonePacificKosrae                  PatchedSystemSettingsTimeZone = "Pacific/Kosrae"
	PatchedSystemSettingsTimeZonePacificKwajalein               PatchedSystemSettingsTimeZone = "Pacific/Kwajalein"
	PatchedSystemSettingsTimeZonePacificMajuro                  PatchedSystemSettingsTimeZone = "Pacific/Majuro"
	PatchedSystemSettingsTimeZonePacificMarquesas               PatchedSystemSettingsTimeZone = "Pacific/Marquesas"
	PatchedSystemSettingsTimeZonePacificMidway                  PatchedSystemSettingsTimeZone = "Pacific/Midway"
	PatchedSystemSettingsTimeZonePacificNauru                   PatchedSystemSettingsTimeZone = "Pacific/Nauru"
	PatchedSystemSettingsTimeZonePacificNiue                    PatchedSystemSettingsTimeZone = "Pacific/Niue"
	PatchedSystemSettingsTimeZonePacificNorfolk                 PatchedSystemSettingsTimeZone = "Pacific/Norfolk"
	PatchedSystemSettingsTimeZonePacificNoumea                  PatchedSystemSettingsTimeZone = "Pacific/Noumea"
	PatchedSystemSettingsTimeZonePacificPagoPago                PatchedSystemSettingsTimeZone = "Pacific/Pago_Pago"
	PatchedSystemSettingsTimeZonePacificPalau                   PatchedSystemSettingsTimeZone = "Pacific/Palau"
	PatchedSystemSettingsTimeZonePacificPitcairn                PatchedSystemSettingsTimeZone = "Pacific/Pitcairn"
	PatchedSystemSettingsTimeZonePacificPohnpei                 PatchedSystemSettingsTimeZone = "Pacific/Pohnpei"
	PatchedSystemSettingsTimeZonePacificPonape                  PatchedSystemSettingsTimeZone = "Pacific/Ponape"
	PatchedSystemSettingsTimeZonePacificPortMoresby             PatchedSystemSettingsTimeZone = "Pacific/Port_Moresby"
	PatchedSystemSettingsTimeZonePacificRarotonga               PatchedSystemSettingsTimeZone = "Pacific/Rarotonga"
	PatchedSystemSettingsTimeZonePacificSaipan                  PatchedSystemSettingsTimeZone = "Pacific/Saipan"
	PatchedSystemSettingsTimeZonePacificSamoa                   PatchedSystemSettingsTimeZone = "Pacific/Samoa"
	PatchedSystemSettingsTimeZonePacificTahiti                  PatchedSystemSettingsTimeZone = "Pacific/Tahiti"
	PatchedSystemSettingsTimeZonePacificTarawa                  PatchedSystemSettingsTimeZone = "Pacific/Tarawa"
	PatchedSystemSettingsTimeZonePacificTongatapu               PatchedSystemSettingsTimeZone = "Pacific/Tongatapu"
	PatchedSystemSettingsTimeZonePacificTruk                    PatchedSystemSettingsTimeZone = "Pacific/Truk"
	PatchedSystemSettingsTimeZonePacificWake                    PatchedSystemSettingsTimeZone = "Pacific/Wake"
	PatchedSystemSettingsTimeZonePacificWallis                  PatchedSystemSettingsTimeZone = "Pacific/Wallis"
	PatchedSystemSettingsTimeZonePacificYap                     PatchedSystemSettingsTimeZone = "Pacific/Yap"
	PatchedSystemSettingsTimeZonePoland                         PatchedSystemSettingsTimeZone = "Poland"
	PatchedSystemSettingsTimeZonePortugal                       PatchedSystemSettingsTimeZone = "Portugal"
	PatchedSystemSettingsTimeZoneROC                            PatchedSystemSettingsTimeZone = "ROC"
	PatchedSystemSettingsTimeZoneROK                            PatchedSystemSettingsTimeZone = "ROK"
	PatchedSystemSettingsTimeZoneSingapore                      PatchedSystemSettingsTimeZone = "Singapore"
	PatchedSystemSettingsTimeZoneTurkey                         PatchedSystemSettingsTimeZone = "Turkey"
	PatchedSystemSettingsTimeZoneUCT                            PatchedSystemSettingsTimeZone = "UCT"
	PatchedSystemSettingsTimeZoneUSAlaska                       PatchedSystemSettingsTimeZone = "US/Alaska"
	PatchedSystemSettingsTimeZoneUSAleutian                     PatchedSystemSettingsTimeZone = "US/Aleutian"
	PatchedSystemSettingsTimeZoneUSArizona                      PatchedSystemSettingsTimeZone = "US/Arizona"
	PatchedSystemSettingsTimeZoneUSCentral                      PatchedSystemSettingsTimeZone = "US/Central"
	PatchedSystemSettingsTimeZoneUSEastIndiana                  PatchedSystemSettingsTimeZone = "US/East-Indiana"
	PatchedSystemSettingsTimeZoneUSEastern                      PatchedSystemSettingsTimeZone = "US/Eastern"
	PatchedSystemSettingsTimeZoneUSHawaii                       PatchedSystemSettingsTimeZone = "US/Hawaii"
	PatchedSystemSettingsTimeZoneUSIndianaStarke                PatchedSystemSettingsTimeZone = "US/Indiana-Starke"
	PatchedSystemSettingsTimeZoneUSMichigan                     PatchedSystemSettingsTimeZone = "US/Michigan"
	PatchedSystemSettingsTimeZoneUSMountain                     PatchedSystemSettingsTimeZone = "US/Mountain"
	PatchedSystemSettingsTimeZoneUSPacific                      PatchedSystemSettingsTimeZone = "US/Pacific"
	PatchedSystemSettingsTimeZoneUSSamoa                        PatchedSystemSettingsTimeZone = "US/Samoa"
	PatchedSystemSettingsTimeZoneUTC                            PatchedSystemSettingsTimeZone = "UTC"
	PatchedSystemSettingsTimeZoneUniversal                      PatchedSystemSettingsTimeZone = "Universal"
	PatchedSystemSettingsTimeZoneWET                            PatchedSystemSettingsTimeZone = "WET"
	PatchedSystemSettingsTimeZoneWSU                            PatchedSystemSettingsTimeZone = "W-SU"
	PatchedSystemSettingsTimeZoneZulu                           PatchedSystemSettingsTimeZone = "Zulu"
)

// Defines values for PatchedToolConfigurationAuthenticationType.
const (
	PatchedToolConfigurationAuthenticationTypeAPI      PatchedToolConfigurationAuthenticationType = "API"
	PatchedToolConfigurationAuthenticationTypeEmpty    PatchedToolConfigurationAuthenticationType = ""
	PatchedToolConfigurationAuthenticationTypeNil      PatchedToolConfigurationAuthenticationType = "<nil>"
	PatchedToolConfigurationAuthenticationTypePassword PatchedToolConfigurationAuthenticationType = "Password"
	PatchedToolConfigurationAuthenticationTypeSSH      PatchedToolConfigurationAuthenticationType = "SSH"
)

// Defines values for ProductBusinessCriticality.
const (
	ProductBusinessCriticalityEmpty    ProductBusinessCriticality = ""
	ProductBusinessCriticalityHigh     ProductBusinessCriticality = "high"
	ProductBusinessCriticalityLow      ProductBusinessCriticality = "low"
	ProductBusinessCriticalityMedium   ProductBusinessCriticality = "medium"
	ProductBusinessCriticalityNil      ProductBusinessCriticality = "<nil>"
	ProductBusinessCriticalityNone     ProductBusinessCriticality = "none"
	ProductBusinessCriticalityVeryHigh ProductBusinessCriticality = "very high"
	ProductBusinessCriticalityVeryLow  ProductBusinessCriticality = "very low"
)

// Defines values for ProductLifecycle.
const (
	ProductLifecycleConstruction ProductLifecycle = "construction"
	ProductLifecycleEmpty        ProductLifecycle = ""
	ProductLifecycleNil          ProductLifecycle = "<nil>"
	ProductLifecycleProduction   ProductLifecycle = "production"
	ProductLifecycleRetirement   ProductLifecycle = "retirement"
)

// Defines values for ProductOrigin.
const (
	ProductOriginContractor        ProductOrigin = "contractor"
	ProductOriginEmpty             ProductOrigin = ""
	ProductOriginInternal          ProductOrigin = "internal"
	ProductOriginNil               ProductOrigin = "<nil>"
	ProductOriginOpenSource        ProductOrigin = "open source"
	ProductOriginOutsourced        ProductOrigin = "outsourced"
	ProductOriginPurchased         ProductOrigin = "purchased"
	ProductOriginThirdPartyLibrary ProductOrigin = "third party library"
)

// Defines values for ProductPlatform.
const (
	ProductPlatformDesktop    ProductPlatform = "desktop"
	ProductPlatformEmpty      ProductPlatform = ""
	ProductPlatformIot        ProductPlatform = "iot"
	ProductPlatformMobile     ProductPlatform = "mobile"
	ProductPlatformNil        ProductPlatform = "<nil>"
	ProductPlatformWeb        ProductPlatform = "web"
	ProductPlatformWebService ProductPlatform = "web service"
)

// Defines values for ReImportScanGroupBy.
const (
	ReImportScanGroupByComponentName                 ReImportScanGroupBy = "component_name"
	ReImportScanGroupByComponentNameComponentVersion ReImportScanGroupBy = "component_name+component_version"
	ReImportScanGroupByFilePath                      ReImportScanGroupBy = "file_path"
)

// Defines values for ReImportScanMinimumSeverity.
const (
	Critical ReImportScanMinimumSeverity = "Critical"
	High     ReImportScanMinimumSeverity = "High"
	Info     ReImportScanMinimumSeverity = "Info"
	Low      ReImportScanMinimumSeverity = "Low"
	Medium   ReImportScanMinimumSeverity = "Medium"
)

// Defines values for ReImportScanScanType.
const (
	ReImportScanScanTypeAWSProwlerScan                                 ReImportScanScanType = "AWS Prowler Scan"
	ReImportScanScanTypeAWSScout2Scan                                  ReImportScanScanType = "AWS Scout2 Scan"
	ReImportScanScanTypeAWSSecurityHubScan                             ReImportScanScanType = "AWS Security Hub Scan"
	ReImportScanScanTypeAcunetix360Scan                                ReImportScanScanType = "Acunetix360 Scan"
	ReImportScanScanTypeAcunetixScan                                   ReImportScanScanType = "Acunetix Scan"
	ReImportScanScanTypeAnchoreEngineScan                              ReImportScanScanType = "Anchore Engine Scan"
	ReImportScanScanTypeAnchoreEnterprisePolicyCheck                   ReImportScanScanType = "Anchore Enterprise Policy Check"
	ReImportScanScanTypeAnchoreGrype                                   ReImportScanScanType = "Anchore Grype"
	ReImportScanScanTypeAppSpiderScan                                  ReImportScanScanType = "AppSpider Scan"
	ReImportScanScanTypeAquaScan                                       ReImportScanScanType = "Aqua Scan"
	ReImportScanScanTypeArachniScan                                    ReImportScanScanType = "Arachni Scan"
	ReImportScanScanTypeAuditJSScan                                    ReImportScanScanType = "AuditJS Scan"
	ReImportScanScanTypeAzureSecurityCenterRecommendationsScan         ReImportScanScanType = "Azure Security Center Recommendations Scan"
	ReImportScanScanTypeBanditScan                                     ReImportScanScanType = "Bandit Scan"
	ReImportScanScanTypeBlackduckComponentRisk                         ReImportScanScanType = "Blackduck Component Risk"
	ReImportScanScanTypeBlackduckHubScan                               ReImportScanScanType = "Blackduck Hub Scan"
	ReImportScanScanTypeBrakemanScan                                   ReImportScanScanType = "Brakeman Scan"
	ReImportScanScanTypeBugCrowdScan                                   ReImportScanScanType = "BugCrowd Scan"
	ReImportScanScanTypeBundlerAuditScan                               ReImportScanScanType = "Bundler-Audit Scan"
	ReImportScanScanTypeBurpEnterpriseScan                             ReImportScanScanType = "Burp Enterprise Scan"
	ReImportScanScanTypeBurpGraphQLAPI                                 ReImportScanScanType = "Burp GraphQL API"
	ReImportScanScanTypeBurpRESTAPI                                    ReImportScanScanType = "Burp REST API"
	ReImportScanScanTypeBurpScan                                       ReImportScanScanType = "Burp Scan"
	ReImportScanScanTypeCargoAuditScan                                 ReImportScanScanType = "CargoAudit Scan"
	ReImportScanScanTypeCheckmarxOSA                                   ReImportScanScanType = "Checkmarx OSA"
	ReImportScanScanTypeCheckmarxScan                                  ReImportScanScanType = "Checkmarx Scan"
	ReImportScanScanTypeCheckmarxScanDetailed                          ReImportScanScanType = "Checkmarx Scan detailed"
	ReImportScanScanTypeCheckovScan                                    ReImportScanScanType = "Checkov Scan"
	ReImportScanScanTypeClairKlarScan                                  ReImportScanScanType = "Clair Klar Scan"
	ReImportScanScanTypeClairScan                                      ReImportScanScanType = "Clair Scan"
	ReImportScanScanTypeCloudsploitScan                                ReImportScanScanType = "Cloudsploit Scan"
	ReImportScanScanTypeCobaltIoAPIImport                              ReImportScanScanType = "Cobalt.io API Import"
	ReImportScanScanTypeCobaltIoScan                                   ReImportScanScanType = "Cobalt.io Scan"
	ReImportScanScanTypeContrastScan                                   ReImportScanScanType = "Contrast Scan"
	ReImportScanScanTypeCoverityAPI                                    ReImportScanScanType = "Coverity API"
	ReImportScanScanTypeCrashtestSecurityJSONFile                      ReImportScanScanType = "Crashtest Security JSON File"
	ReImportScanScanTypeCrashtestSecurityXMLFile                       ReImportScanScanType = "Crashtest Security XML File"
	ReImportScanScanTypeCredScanScan                                   ReImportScanScanType = "CredScan Scan"
	ReImportScanScanTypeCycloneDXScan                                  ReImportScanScanType = "CycloneDX Scan"
	ReImportScanScanTypeDSOPScan                                       ReImportScanScanType = "DSOP Scan"
	ReImportScanScanTypeDawnScannerScan                                ReImportScanScanType = "DawnScanner Scan"
	ReImportScanScanTypeDependencyCheckScan                            ReImportScanScanType = "Dependency Check Scan"
	ReImportScanScanTypeDependencyTrackFindingPackagingFormatFPFExport ReImportScanScanType = "Dependency Track Finding Packaging Format (FPF) Export"
	ReImportScanScanTypeDetectSecretsScan                              ReImportScanScanType = "Detect-secrets Scan"
	ReImportScanScanTypeDockleScan                                     ReImportScanScanType = "Dockle Scan"
	ReImportScanScanTypeDrHeaderJSONImporter                           ReImportScanScanType = "DrHeader JSON Importer"
	ReImportScanScanTypeESLintScan                                     ReImportScanScanType = "ESLint Scan"
	ReImportScanScanTypeEdgescanScan                                   ReImportScanScanType = "Edgescan Scan"
	ReImportScanScanTypeFortifyScan                                    ReImportScanScanType = "Fortify Scan"
	ReImportScanScanTypeGenericFindingsImport                          ReImportScanScanType = "Generic Findings Import"
	ReImportScanScanTypeGitLabAPIFuzzingReportScan                     ReImportScanScanType = "GitLab API Fuzzing Report Scan"
	ReImportScanScanTypeGitLabContainerScan                            ReImportScanScanType = "GitLab Container Scan"
	ReImportScanScanTypeGitLabDASTReport                               ReImportScanScanType = "GitLab DAST Report"
	ReImportScanScanTypeGitLabDependencyScanningReport                 ReImportScanScanType = "GitLab Dependency Scanning Report"
	ReImportScanScanTypeGitLabSASTReport                               ReImportScanScanType = "GitLab SAST Report"
	ReImportScanScanTypeGitLabSecretDetectionReport                    ReImportScanScanType = "GitLab Secret Detection Report"
	ReImportScanScanTypeGithubVulnerabilityScan                        ReImportScanScanType = "Github Vulnerability Scan"
	ReImportScanScanTypeGitleaksScan                                   ReImportScanScanType = "Gitleaks Scan"
	ReImportScanScanTypeGosecScanner                                   ReImportScanScanType = "Gosec Scanner"
	ReImportScanScanTypeHackerOneCases                                 ReImportScanScanType = "HackerOne Cases"
	ReImportScanScanTypeHadolintDockerfileCheck                        ReImportScanScanType = "Hadolint Dockerfile check"
	ReImportScanScanTypeHarborVulnerabilityScan                        ReImportScanScanType = "Harbor Vulnerability Scan"
	ReImportScanScanTypeHorusecScan                                    ReImportScanScanType = "Horusec Scan"
	ReImportScanScanTypeHuskyCIReport                                  ReImportScanScanType = "HuskyCI Report"
	ReImportScanScanTypeIBMAppScanDAST                                 ReImportScanScanType = "IBM AppScan DAST"
	ReImportScanScanTypeImmuniwebScan                                  ReImportScanScanType = "Immuniweb Scan"
	ReImportScanScanTypeIntSightsReport                                ReImportScanScanType = "IntSights Report"
	ReImportScanScanTypeJFrogXrayScan                                  ReImportScanScanType = "JFrog Xray Scan"
	ReImportScanScanTypeJFrogXrayUnifiedScan                           ReImportScanScanType = "JFrog Xray Unified Scan"
	ReImportScanScanTypeKICSScan                                       ReImportScanScanType = "KICS Scan"
	ReImportScanScanTypeKiuwanScan                                     ReImportScanScanType = "Kiuwan Scan"
	ReImportScanScanTypeKubeBenchScan                                  ReImportScanScanType = "kube-bench Scan"
	ReImportScanScanTypeMeterianScan                                   ReImportScanScanType = "Meterian Scan"
	ReImportScanScanTypeMicrofocusWebinspectScan                       ReImportScanScanType = "Microfocus Webinspect Scan"
	ReImportScanScanTypeMobSFScan                                      ReImportScanScanType = "MobSF Scan"
	ReImportScanScanTypeMobsfscanScan                                  ReImportScanScanType = "Mobsfscan Scan"
	ReImportScanScanTypeMozillaObservatoryScan                         ReImportScanScanType = "Mozilla Observatory Scan"
	ReImportScanScanTypeNPMAuditScan                                   ReImportScanScanType = "NPM Audit Scan"
	ReImportScanScanTypeNessusScan                                     ReImportScanScanType = "Nessus Scan"
	ReImportScanScanTypeNessusWASScan                                  ReImportScanScanType = "Nessus WAS Scan"
	ReImportScanScanTypeNetsparkerScan                                 ReImportScanScanType = "Netsparker Scan"
	ReImportScanScanTypeNexposeScan                                    ReImportScanScanType = "Nexpose Scan"
	ReImportScanScanTypeNiktoScan                                      ReImportScanScanType = "Nikto Scan"
	ReImportScanScanTypeNmapScan                                       ReImportScanScanType = "Nmap Scan"
	ReImportScanScanTypeNodeSecurityPlatformScan                       ReImportScanScanType = "Node Security Platform Scan"
	ReImportScanScanTypeNucleiScan                                     ReImportScanScanType = "Nuclei Scan"
	ReImportScanScanTypeORTEvaluatedModelImporter                      ReImportScanScanType = "ORT evaluated model Importer"
	ReImportScanScanTypeOpenVASCSV                                     ReImportScanScanType = "OpenVAS CSV"
	ReImportScanScanTypeOpenscapVulnerabilityScan                      ReImportScanScanType = "Openscap Vulnerability Scan"
	ReImportScanScanTypeOssIndexDevauditSCAScanImporter                ReImportScanScanType = "OssIndex Devaudit SCA Scan Importer"
	ReImportScanScanTypeOutpost24Scan                                  ReImportScanScanType = "Outpost24 Scan"
	ReImportScanScanTypePHPSecurityAuditV2                             ReImportScanScanType = "PHP Security Audit v2"
	ReImportScanScanTypePHPSymfonySecurityCheck                        ReImportScanScanType = "PHP Symfony Security Check"
	ReImportScanScanTypePMDScan                                        ReImportScanScanType = "PMD Scan"
	ReImportScanScanTypePipAuditScan                                   ReImportScanScanType = "pip-audit Scan"
	ReImportScanScanTypeQualysInfrastructureScanWebGUIXML              ReImportScanScanType = "Qualys Infrastructure Scan (WebGUI XML)"
	ReImportScanScanTypeQualysScan                                     ReImportScanScanType = "Qualys Scan"
	ReImportScanScanTypeQualysWebappScan                               ReImportScanScanType = "Qualys Webapp Scan"
	ReImportScanScanTypeRetireJsScan                                   ReImportScanScanType = "Retire.js Scan"
	ReImportScanScanTypeRiskReconAPIImporter                           ReImportScanScanType = "Risk Recon API Importer"
	ReImportScanScanTypeRubocopScan                                    ReImportScanScanType = "Rubocop Scan"
	ReImportScanScanTypeRustyHogScan                                   ReImportScanScanType = "Rusty Hog Scan"
	ReImportScanScanTypeSARIF                                          ReImportScanScanType = "SARIF"
	ReImportScanScanTypeSKFScan                                        ReImportScanScanType = "SKF Scan"
	ReImportScanScanTypeSSLLabsScan                                    ReImportScanScanType = "SSL Labs Scan"
	ReImportScanScanTypeSSLyzeScanJSON                                 ReImportScanScanType = "SSLyze Scan (JSON)"
	ReImportScanScanTypeScantistScan                                   ReImportScanScanType = "Scantist Scan"
	ReImportScanScanTypeScoutSuiteScan                                 ReImportScanScanType = "Scout Suite Scan"
	ReImportScanScanTypeSemgrepJSONReport                              ReImportScanScanType = "Semgrep JSON Report"
	ReImportScanScanTypeSnykScan                                       ReImportScanScanType = "Snyk Scan"
	ReImportScanScanTypeSolarAppscreenerScan                           ReImportScanScanType = "Solar Appscreener Scan"
	ReImportScanScanTypeSonarQubeAPIImport                             ReImportScanScanType = "SonarQube API Import"
	ReImportScanScanTypeSonarQubeScan                                  ReImportScanScanType = "SonarQube Scan"
	ReImportScanScanTypeSonarQubeScanDetailed                          ReImportScanScanType = "SonarQube Scan detailed"
	ReImportScanScanTypeSonatypeApplicationScan                        ReImportScanScanType = "Sonatype Application Scan"
	ReImportScanScanTypeSpotBugsScan                                   ReImportScanScanType = "SpotBugs Scan"
	ReImportScanScanTypeSslscan                                        ReImportScanScanType = "Sslscan"
	ReImportScanScanTypeSslyzeScan                                     ReImportScanScanType = "Sslyze Scan"
	ReImportScanScanTypeStackHawkHawkScan                              ReImportScanScanType = "StackHawk HawkScan"
	ReImportScanScanTypeTFSecScan                                      ReImportScanScanType = "TFSec Scan"
	ReImportScanScanTypeTerrascanScan                                  ReImportScanScanType = "Terrascan Scan"
	ReImportScanScanTypeTestsslScan                                    ReImportScanScanType = "Testssl Scan"
	ReImportScanScanTypeTrivyScan                                      ReImportScanScanType = "Trivy Scan"
	ReImportScanScanTypeTrufflehog3Scan                                ReImportScanScanType = "Trufflehog3 Scan"
	ReImportScanScanTypeTrufflehogScan                                 ReImportScanScanType = "Trufflehog Scan"
	ReImportScanScanTypeTrustwaveFusionAPIScan                         ReImportScanScanType = "Trustwave Fusion API Scan"
	ReImportScanScanTypeTrustwaveScanCSV                               ReImportScanScanType = "Trustwave Scan (CSV)"
	ReImportScanScanTypeTwistlockImageScan                             ReImportScanScanType = "Twistlock Image Scan"
	ReImportScanScanTypeVCGScan                                        ReImportScanScanType = "VCG Scan"
	ReImportScanScanTypeVeracodeScan                                   ReImportScanScanType = "Veracode Scan"
	ReImportScanScanTypeWFuzzJSONReport                                ReImportScanScanType = "WFuzz JSON report"
	ReImportScanScanTypeWapitiScan                                     ReImportScanScanType = "Wapiti Scan"
	ReImportScanScanTypeWhiteHatSentinel                               ReImportScanScanType = "WhiteHat Sentinel"
	ReImportScanScanTypeWhitesourceScan                                ReImportScanScanType = "Whitesource Scan"
	ReImportScanScanTypeWpscan                                         ReImportScanScanType = "Wpscan"
	ReImportScanScanTypeXanitizerScan                                  ReImportScanScanType = "Xanitizer Scan"
	ReImportScanScanTypeYarnAuditScan                                  ReImportScanScanType = "Yarn Audit Scan"
	ReImportScanScanTypeZAPScan                                        ReImportScanScanType = "ZAP Scan"
)

// Defines values for RegulationCategory.
const (
	RegulationCategoryCorporate RegulationCategory = "corporate"
	RegulationCategoryEducation RegulationCategory = "education"
	RegulationCategoryFinance   RegulationCategory = "finance"
	RegulationCategoryMedical   RegulationCategory = "medical"
	RegulationCategoryOther     RegulationCategory = "other"
	RegulationCategoryPrivacy   RegulationCategory = "privacy"
)

// Defines values for RiskAcceptanceDecision.
const (
	RiskAcceptanceDecisionA RiskAcceptanceDecision = "A"
	RiskAcceptanceDecisionF RiskAcceptanceDecision = "F"
	RiskAcceptanceDecisionM RiskAcceptanceDecision = "M"
	RiskAcceptanceDecisionT RiskAcceptanceDecision = "T"
	RiskAcceptanceDecisionV RiskAcceptanceDecision = "V"
)

// Defines values for RiskAcceptanceRecommendation.
const (
	RiskAcceptanceRecommendationA RiskAcceptanceRecommendation = "A"
	RiskAcceptanceRecommendationF RiskAcceptanceRecommendation = "F"
	RiskAcceptanceRecommendationM RiskAcceptanceRecommendation = "M"
	RiskAcceptanceRecommendationT RiskAcceptanceRecommendation = "T"
	RiskAcceptanceRecommendationV RiskAcceptanceRecommendation = "V"
)

// Defines values for SystemSettingsJiraMinimumSeverity.
const (
	SystemSettingsJiraMinimumSeverityCritical SystemSettingsJiraMinimumSeverity = "Critical"
	SystemSettingsJiraMinimumSeverityEmpty    SystemSettingsJiraMinimumSeverity = ""
	SystemSettingsJiraMinimumSeverityHigh     SystemSettingsJiraMinimumSeverity = "High"
	SystemSettingsJiraMinimumSeverityInfo     SystemSettingsJiraMinimumSeverity = "Info"
	SystemSettingsJiraMinimumSeverityLow      SystemSettingsJiraMinimumSeverity = "Low"
	SystemSettingsJiraMinimumSeverityMedium   SystemSettingsJiraMinimumSeverity = "Medium"
	SystemSettingsJiraMinimumSeverityNil      SystemSettingsJiraMinimumSeverity = "<nil>"
)

// Defines values for SystemSettingsTimeZone.
const (
	SystemSettingsTimeZoneAfricaAbidjan                  SystemSettingsTimeZone = "Africa/Abidjan"
	SystemSettingsTimeZoneAfricaAccra                    SystemSettingsTimeZone = "Africa/Accra"
	SystemSettingsTimeZoneAfricaAddisAbaba               SystemSettingsTimeZone = "Africa/Addis_Ababa"
	SystemSettingsTimeZoneAfricaAlgiers                  SystemSettingsTimeZone = "Africa/Algiers"
	SystemSettingsTimeZoneAfricaAsmara                   SystemSettingsTimeZone = "Africa/Asmara"
	SystemSettingsTimeZoneAfricaAsmera                   SystemSettingsTimeZone = "Africa/Asmera"
	SystemSettingsTimeZoneAfricaBamako                   SystemSettingsTimeZone = "Africa/Bamako"
	SystemSettingsTimeZoneAfricaBangui                   SystemSettingsTimeZone = "Africa/Bangui"
	SystemSettingsTimeZoneAfricaBanjul                   SystemSettingsTimeZone = "Africa/Banjul"
	SystemSettingsTimeZoneAfricaBissau                   SystemSettingsTimeZone = "Africa/Bissau"
	SystemSettingsTimeZoneAfricaBlantyre                 SystemSettingsTimeZone = "Africa/Blantyre"
	SystemSettingsTimeZoneAfricaBrazzaville              SystemSettingsTimeZone = "Africa/Brazzaville"
	SystemSettingsTimeZoneAfricaBujumbura                SystemSettingsTimeZone = "Africa/Bujumbura"
	SystemSettingsTimeZoneAfricaCairo                    SystemSettingsTimeZone = "Africa/Cairo"
	SystemSettingsTimeZoneAfricaCasablanca               SystemSettingsTimeZone = "Africa/Casablanca"
	SystemSettingsTimeZoneAfricaCeuta                    SystemSettingsTimeZone = "Africa/Ceuta"
	SystemSettingsTimeZoneAfricaConakry                  SystemSettingsTimeZone = "Africa/Conakry"
	SystemSettingsTimeZoneAfricaDakar                    SystemSettingsTimeZone = "Africa/Dakar"
	SystemSettingsTimeZoneAfricaDarEsSalaam              SystemSettingsTimeZone = "Africa/Dar_es_Salaam"
	SystemSettingsTimeZoneAfricaDjibouti                 SystemSettingsTimeZone = "Africa/Djibouti"
	SystemSettingsTimeZoneAfricaDouala                   SystemSettingsTimeZone = "Africa/Douala"
	SystemSettingsTimeZoneAfricaElAaiun                  SystemSettingsTimeZone = "Africa/El_Aaiun"
	SystemSettingsTimeZoneAfricaFreetown                 SystemSettingsTimeZone = "Africa/Freetown"
	SystemSettingsTimeZoneAfricaGaborone                 SystemSettingsTimeZone = "Africa/Gaborone"
	SystemSettingsTimeZoneAfricaHarare                   SystemSettingsTimeZone = "Africa/Harare"
	SystemSettingsTimeZoneAfricaJohannesburg             SystemSettingsTimeZone = "Africa/Johannesburg"
	SystemSettingsTimeZoneAfricaJuba                     SystemSettingsTimeZone = "Africa/Juba"
	SystemSettingsTimeZoneAfricaKampala                  SystemSettingsTimeZone = "Africa/Kampala"
	SystemSettingsTimeZoneAfricaKhartoum                 SystemSettingsTimeZone = "Africa/Khartoum"
	SystemSettingsTimeZoneAfricaKigali                   SystemSettingsTimeZone = "Africa/Kigali"
	SystemSettingsTimeZoneAfricaKinshasa                 SystemSettingsTimeZone = "Africa/Kinshasa"
	SystemSettingsTimeZoneAfricaLagos                    SystemSettingsTimeZone = "Africa/Lagos"
	SystemSettingsTimeZoneAfricaLibreville               SystemSettingsTimeZone = "Africa/Libreville"
	SystemSettingsTimeZoneAfricaLome                     SystemSettingsTimeZone = "Africa/Lome"
	SystemSettingsTimeZoneAfricaLuanda                   SystemSettingsTimeZone = "Africa/Luanda"
	SystemSettingsTimeZoneAfricaLubumbashi               SystemSettingsTimeZone = "Africa/Lubumbashi"
	SystemSettingsTimeZoneAfricaLusaka                   SystemSettingsTimeZone = "Africa/Lusaka"
	SystemSettingsTimeZoneAfricaMalabo                   SystemSettingsTimeZone = "Africa/Malabo"
	SystemSettingsTimeZoneAfricaMaputo                   SystemSettingsTimeZone = "Africa/Maputo"
	SystemSettingsTimeZoneAfricaMaseru                   SystemSettingsTimeZone = "Africa/Maseru"
	SystemSettingsTimeZoneAfricaMbabane                  SystemSettingsTimeZone = "Africa/Mbabane"
	SystemSettingsTimeZoneAfricaMogadishu                SystemSettingsTimeZone = "Africa/Mogadishu"
	SystemSettingsTimeZoneAfricaMonrovia                 SystemSettingsTimeZone = "Africa/Monrovia"
	SystemSettingsTimeZoneAfricaNairobi                  SystemSettingsTimeZone = "Africa/Nairobi"
	SystemSettingsTimeZoneAfricaNdjamena                 SystemSettingsTimeZone = "Africa/Ndjamena"
	SystemSettingsTimeZoneAfricaNiamey                   SystemSettingsTimeZone = "Africa/Niamey"
	SystemSettingsTimeZoneAfricaNouakchott               SystemSettingsTimeZone = "Africa/Nouakchott"
	SystemSettingsTimeZoneAfricaOuagadougou              SystemSettingsTimeZone = "Africa/Ouagadougou"
	SystemSettingsTimeZoneAfricaPortoNovo                SystemSettingsTimeZone = "Africa/Porto-Novo"
	SystemSettingsTimeZoneAfricaSaoTome                  SystemSettingsTimeZone = "Africa/Sao_Tome"
	SystemSettingsTimeZoneAfricaTimbuktu                 SystemSettingsTimeZone = "Africa/Timbuktu"
	SystemSettingsTimeZoneAfricaTripoli                  SystemSettingsTimeZone = "Africa/Tripoli"
	SystemSettingsTimeZoneAfricaTunis                    SystemSettingsTimeZone = "Africa/Tunis"
	SystemSettingsTimeZoneAfricaWindhoek                 SystemSettingsTimeZone = "Africa/Windhoek"
	SystemSettingsTimeZoneAmericaAdak                    SystemSettingsTimeZone = "America/Adak"
	SystemSettingsTimeZoneAmericaAnchorage               SystemSettingsTimeZone = "America/Anchorage"
	SystemSettingsTimeZoneAmericaAnguilla                SystemSettingsTimeZone = "America/Anguilla"
	SystemSettingsTimeZoneAmericaAntigua                 SystemSettingsTimeZone = "America/Antigua"
	SystemSettingsTimeZoneAmericaAraguaina               SystemSettingsTimeZone = "America/Araguaina"
	SystemSettingsTimeZoneAmericaArgentinaBuenosAires    SystemSettingsTimeZone = "America/Argentina/Buenos_Aires"
	SystemSettingsTimeZoneAmericaArgentinaCatamarca      SystemSettingsTimeZone = "America/Argentina/Catamarca"
	SystemSettingsTimeZoneAmericaArgentinaComodRivadavia SystemSettingsTimeZone = "America/Argentina/ComodRivadavia"
	SystemSettingsTimeZoneAmericaArgentinaCordoba        SystemSettingsTimeZone = "America/Argentina/Cordoba"
	SystemSettingsTimeZoneAmericaArgentinaJujuy          SystemSettingsTimeZone = "America/Argentina/Jujuy"
	SystemSettingsTimeZoneAmericaArgentinaLaRioja        SystemSettingsTimeZone = "America/Argentina/La_Rioja"
	SystemSettingsTimeZoneAmericaArgentinaMendoza        SystemSettingsTimeZone = "America/Argentina/Mendoza"
	SystemSettingsTimeZoneAmericaArgentinaRioGallegos    SystemSettingsTimeZone = "America/Argentina/Rio_Gallegos"
	SystemSettingsTimeZoneAmericaArgentinaSalta          SystemSettingsTimeZone = "America/Argentina/Salta"
	SystemSettingsTimeZoneAmericaArgentinaSanJuan        SystemSettingsTimeZone = "America/Argentina/San_Juan"
	SystemSettingsTimeZoneAmericaArgentinaSanLuis        SystemSettingsTimeZone = "America/Argentina/San_Luis"
	SystemSettingsTimeZoneAmericaArgentinaTucuman        SystemSettingsTimeZone = "America/Argentina/Tucuman"
	SystemSettingsTimeZoneAmericaArgentinaUshuaia        SystemSettingsTimeZone = "America/Argentina/Ushuaia"
	SystemSettingsTimeZoneAmericaAruba                   SystemSettingsTimeZone = "America/Aruba"
	SystemSettingsTimeZoneAmericaAsuncion                SystemSettingsTimeZone = "America/Asuncion"
	SystemSettingsTimeZoneAmericaAtikokan                SystemSettingsTimeZone = "America/Atikokan"
	SystemSettingsTimeZoneAmericaAtka                    SystemSettingsTimeZone = "America/Atka"
	SystemSettingsTimeZoneAmericaBahia                   SystemSettingsTimeZone = "America/Bahia"
	SystemSettingsTimeZoneAmericaBahiaBanderas           SystemSettingsTimeZone = "America/Bahia_Banderas"
	SystemSettingsTimeZoneAmericaBarbados                SystemSettingsTimeZone = "America/Barbados"
	SystemSettingsTimeZoneAmericaBelem                   SystemSettingsTimeZone = "America/Belem"
	SystemSettingsTimeZoneAmericaBelize                  SystemSettingsTimeZone = "America/Belize"
	SystemSettingsTimeZoneAmericaBlancSablon             SystemSettingsTimeZone = "America/Blanc-Sablon"
	SystemSettingsTimeZoneAmericaBoaVista                SystemSettingsTimeZone = "America/Boa_Vista"
	SystemSettingsTimeZoneAmericaBogota                  SystemSettingsTimeZone = "America/Bogota"
	SystemSettingsTimeZoneAmericaBoise                   SystemSettingsTimeZone = "America/Boise"
	SystemSettingsTimeZoneAmericaBuenosAires             SystemSettingsTimeZone = "America/Buenos_Aires"
	SystemSettingsTimeZoneAmericaCambridgeBay            SystemSettingsTimeZone = "America/Cambridge_Bay"
	SystemSettingsTimeZoneAmericaCampoGrande             SystemSettingsTimeZone = "America/Campo_Grande"
	SystemSettingsTimeZoneAmericaCancun                  SystemSettingsTimeZone = "America/Cancun"
	SystemSettingsTimeZoneAmericaCaracas                 SystemSettingsTimeZone = "America/Caracas"
	SystemSettingsTimeZoneAmericaCatamarca               SystemSettingsTimeZone = "America/Catamarca"
	SystemSettingsTimeZoneAmericaCayenne                 SystemSettingsTimeZone = "America/Cayenne"
	SystemSettingsTimeZoneAmericaCayman                  SystemSettingsTimeZone = "America/Cayman"
	SystemSettingsTimeZoneAmericaChicago                 SystemSettingsTimeZone = "America/Chicago"
	SystemSettingsTimeZoneAmericaChihuahua               SystemSettingsTimeZone = "America/Chihuahua"
	SystemSettingsTimeZoneAmericaCoralHarbour            SystemSettingsTimeZone = "America/Coral_Harbour"
	SystemSettingsTimeZoneAmericaCordoba                 SystemSettingsTimeZone = "America/Cordoba"
	SystemSettingsTimeZoneAmericaCostaRica               SystemSettingsTimeZone = "America/Costa_Rica"
	SystemSettingsTimeZoneAmericaCreston                 SystemSettingsTimeZone = "America/Creston"
	SystemSettingsTimeZoneAmericaCuiaba                  SystemSettingsTimeZone = "America/Cuiaba"
	SystemSettingsTimeZoneAmericaCuracao                 SystemSettingsTimeZone = "America/Curacao"
	SystemSettingsTimeZoneAmericaDanmarkshavn            SystemSettingsTimeZone = "America/Danmarkshavn"
	SystemSettingsTimeZoneAmericaDawson                  SystemSettingsTimeZone = "America/Dawson"
	SystemSettingsTimeZoneAmericaDawsonCreek             SystemSettingsTimeZone = "America/Dawson_Creek"
	SystemSettingsTimeZoneAmericaDenver                  SystemSettingsTimeZone = "America/Denver"
	SystemSettingsTimeZoneAmericaDetroit                 SystemSettingsTimeZone = "America/Detroit"
	SystemSettingsTimeZoneAmericaDominica                SystemSettingsTimeZone = "America/Dominica"
	SystemSettingsTimeZoneAmericaEdmonton                SystemSettingsTimeZone = "America/Edmonton"
	SystemSettingsTimeZoneAmericaEirunepe                SystemSettingsTimeZone = "America/Eirunepe"
	SystemSettingsTimeZoneAmericaElSalvador              SystemSettingsTimeZone = "America/El_Salvador"
	SystemSettingsTimeZoneAmericaEnsenada                SystemSettingsTimeZone = "America/Ensenada"
	SystemSettingsTimeZoneAmericaFortNelson              SystemSettingsTimeZone = "America/Fort_Nelson"
	SystemSettingsTimeZoneAmericaFortWayne               SystemSettingsTimeZone = "America/Fort_Wayne"
	SystemSettingsTimeZoneAmericaFortaleza               SystemSettingsTimeZone = "America/Fortaleza"
	SystemSettingsTimeZoneAmericaGlaceBay                SystemSettingsTimeZone = "America/Glace_Bay"
	SystemSettingsTimeZoneAmericaGodthab                 SystemSettingsTimeZone = "America/Godthab"
	SystemSettingsTimeZoneAmericaGooseBay                SystemSettingsTimeZone = "America/Goose_Bay"
	SystemSettingsTimeZoneAmericaGrandTurk               SystemSettingsTimeZone = "America/Grand_Turk"
	SystemSettingsTimeZoneAmericaGrenada                 SystemSettingsTimeZone = "America/Grenada"
	SystemSettingsTimeZoneAmericaGuadeloupe              SystemSettingsTimeZone = "America/Guadeloupe"
	SystemSettingsTimeZoneAmericaGuatemala               SystemSettingsTimeZone = "America/Guatemala"
	SystemSettingsTimeZoneAmericaGuayaquil               SystemSettingsTimeZone = "America/Guayaquil"
	SystemSettingsTimeZoneAmericaGuyana                  SystemSettingsTimeZone = "America/Guyana"
	SystemSettingsTimeZoneAmericaHalifax                 SystemSettingsTimeZone = "America/Halifax"
	SystemSettingsTimeZoneAmericaHavana                  SystemSettingsTimeZone = "America/Havana"
	SystemSettingsTimeZoneAmericaHermosillo              SystemSettingsTimeZone = "America/Hermosillo"
	SystemSettingsTimeZoneAmericaIndianaIndianapolis     SystemSettingsTimeZone = "America/Indiana/Indianapolis"
	SystemSettingsTimeZoneAmericaIndianaKnox             SystemSettingsTimeZone = "America/Indiana/Knox"
	SystemSettingsTimeZoneAmericaIndianaMarengo          SystemSettingsTimeZone = "America/Indiana/Marengo"
	SystemSettingsTimeZoneAmericaIndianaPetersburg       SystemSettingsTimeZone = "America/Indiana/Petersburg"
	SystemSettingsTimeZoneAmericaIndianaTellCity         SystemSettingsTimeZone = "America/Indiana/Tell_City"
	SystemSettingsTimeZoneAmericaIndianaVevay            SystemSettingsTimeZone = "America/Indiana/Vevay"
	SystemSettingsTimeZoneAmericaIndianaVincennes        SystemSettingsTimeZone = "America/Indiana/Vincennes"
	SystemSettingsTimeZoneAmericaIndianaWinamac          SystemSettingsTimeZone = "America/Indiana/Winamac"
	SystemSettingsTimeZoneAmericaIndianapolis            SystemSettingsTimeZone = "America/Indianapolis"
	SystemSettingsTimeZoneAmericaInuvik                  SystemSettingsTimeZone = "America/Inuvik"
	SystemSettingsTimeZoneAmericaIqaluit                 SystemSettingsTimeZone = "America/Iqaluit"
	SystemSettingsTimeZoneAmericaJamaica                 SystemSettingsTimeZone = "America/Jamaica"
	SystemSettingsTimeZoneAmericaJujuy                   SystemSettingsTimeZone = "America/Jujuy"
	SystemSettingsTimeZoneAmericaJuneau                  SystemSettingsTimeZone = "America/Juneau"
	SystemSettingsTimeZoneAmericaKentuckyLouisville      SystemSettingsTimeZone = "America/Kentucky/Louisville"
	SystemSettingsTimeZoneAmericaKentuckyMonticello      SystemSettingsTimeZone = "America/Kentucky/Monticello"
	SystemSettingsTimeZoneAmericaKnoxIN                  SystemSettingsTimeZone = "America/Knox_IN"
	SystemSettingsTimeZoneAmericaKralendijk              SystemSettingsTimeZone = "America/Kralendijk"
	SystemSettingsTimeZoneAmericaLaPaz                   SystemSettingsTimeZone = "America/La_Paz"
	SystemSettingsTimeZoneAmericaLima                    SystemSettingsTimeZone = "America/Lima"
	SystemSettingsTimeZoneAmericaLosAngeles              SystemSettingsTimeZone = "America/Los_Angeles"
	SystemSettingsTimeZoneAmericaLouisville              SystemSettingsTimeZone = "America/Louisville"
	SystemSettingsTimeZoneAmericaLowerPrinces            SystemSettingsTimeZone = "America/Lower_Princes"
	SystemSettingsTimeZoneAmericaMaceio                  SystemSettingsTimeZone = "America/Maceio"
	SystemSettingsTimeZoneAmericaManagua                 SystemSettingsTimeZone = "America/Managua"
	SystemSettingsTimeZoneAmericaManaus                  SystemSettingsTimeZone = "America/Manaus"
	SystemSettingsTimeZoneAmericaMarigot                 SystemSettingsTimeZone = "America/Marigot"
	SystemSettingsTimeZoneAmericaMartinique              SystemSettingsTimeZone = "America/Martinique"
	SystemSettingsTimeZoneAmericaMatamoros               SystemSettingsTimeZone = "America/Matamoros"
	SystemSettingsTimeZoneAmericaMazatlan                SystemSettingsTimeZone = "America/Mazatlan"
	SystemSettingsTimeZoneAmericaMendoza                 SystemSettingsTimeZone = "America/Mendoza"
	SystemSettingsTimeZoneAmericaMenominee               SystemSettingsTimeZone = "America/Menominee"
	SystemSettingsTimeZoneAmericaMerida                  SystemSettingsTimeZone = "America/Merida"
	SystemSettingsTimeZoneAmericaMetlakatla              SystemSettingsTimeZone = "America/Metlakatla"
	SystemSettingsTimeZoneAmericaMexicoCity              SystemSettingsTimeZone = "America/Mexico_City"
	SystemSettingsTimeZoneAmericaMiquelon                SystemSettingsTimeZone = "America/Miquelon"
	SystemSettingsTimeZoneAmericaMoncton                 SystemSettingsTimeZone = "America/Moncton"
	SystemSettingsTimeZoneAmericaMonterrey               SystemSettingsTimeZone = "America/Monterrey"
	SystemSettingsTimeZoneAmericaMontevideo              SystemSettingsTimeZone = "America/Montevideo"
	SystemSettingsTimeZoneAmericaMontreal                SystemSettingsTimeZone = "America/Montreal"
	SystemSettingsTimeZoneAmericaMontserrat              SystemSettingsTimeZone = "America/Montserrat"
	SystemSettingsTimeZoneAmericaNassau                  SystemSettingsTimeZone = "America/Nassau"
	SystemSettingsTimeZoneAmericaNewYork                 SystemSettingsTimeZone = "America/New_York"
	SystemSettingsTimeZoneAmericaNipigon                 SystemSettingsTimeZone = "America/Nipigon"
	SystemSettingsTimeZoneAmericaNome                    SystemSettingsTimeZone = "America/Nome"
	SystemSettingsTimeZoneAmericaNoronha                 SystemSettingsTimeZone = "America/Noronha"
	SystemSettingsTimeZoneAmericaNorthDakotaBeulah       SystemSettingsTimeZone = "America/North_Dakota/Beulah"
	SystemSettingsTimeZoneAmericaNorthDakotaCenter       SystemSettingsTimeZone = "America/North_Dakota/Center"
	SystemSettingsTimeZoneAmericaNorthDakotaNewSalem     SystemSettingsTimeZone = "America/North_Dakota/New_Salem"
	SystemSettingsTimeZoneAmericaNuuk                    SystemSettingsTimeZone = "America/Nuuk"
	SystemSettingsTimeZoneAmericaOjinaga                 SystemSettingsTimeZone = "America/Ojinaga"
	SystemSettingsTimeZoneAmericaPanama                  SystemSettingsTimeZone = "America/Panama"
	SystemSettingsTimeZoneAmericaPangnirtung             SystemSettingsTimeZone = "America/Pangnirtung"
	SystemSettingsTimeZoneAmericaParamaribo              SystemSettingsTimeZone = "America/Paramaribo"
	SystemSettingsTimeZoneAmericaPhoenix                 SystemSettingsTimeZone = "America/Phoenix"
	SystemSettingsTimeZoneAmericaPortAuPrince            SystemSettingsTimeZone = "America/Port-au-Prince"
	SystemSettingsTimeZoneAmericaPortOfSpain             SystemSettingsTimeZone = "America/Port_of_Spain"
	SystemSettingsTimeZoneAmericaPortoAcre               SystemSettingsTimeZone = "America/Porto_Acre"
	SystemSettingsTimeZoneAmericaPortoVelho              SystemSettingsTimeZone = "America/Porto_Velho"
	SystemSettingsTimeZoneAmericaPuertoRico              SystemSettingsTimeZone = "America/Puerto_Rico"
	SystemSettingsTimeZoneAmericaPuntaArenas             SystemSettingsTimeZone = "America/Punta_Arenas"
	SystemSettingsTimeZoneAmericaRainyRiver              SystemSettingsTimeZone = "America/Rainy_River"
	SystemSettingsTimeZoneAmericaRankinInlet             SystemSettingsTimeZone = "America/Rankin_Inlet"
	SystemSettingsTimeZoneAmericaRecife                  SystemSettingsTimeZone = "America/Recife"
	SystemSettingsTimeZoneAmericaRegina                  SystemSettingsTimeZone = "America/Regina"
	SystemSettingsTimeZoneAmericaResolute                SystemSettingsTimeZone = "America/Resolute"
	SystemSettingsTimeZoneAmericaRioBranco               SystemSettingsTimeZone = "America/Rio_Branco"
	SystemSettingsTimeZoneAmericaRosario                 SystemSettingsTimeZone = "America/Rosario"
	SystemSettingsTimeZoneAmericaSantaIsabel             SystemSettingsTimeZone = "America/Santa_Isabel"
	SystemSettingsTimeZoneAmericaSantarem                SystemSettingsTimeZone = "America/Santarem"
	SystemSettingsTimeZoneAmericaSantiago                SystemSettingsTimeZone = "America/Santiago"
	SystemSettingsTimeZoneAmericaSantoDomingo            SystemSettingsTimeZone = "America/Santo_Domingo"
	SystemSettingsTimeZoneAmericaSaoPaulo                SystemSettingsTimeZone = "America/Sao_Paulo"
	SystemSettingsTimeZoneAmericaScoresbysund            SystemSettingsTimeZone = "America/Scoresbysund"
	SystemSettingsTimeZoneAmericaShiprock                SystemSettingsTimeZone = "America/Shiprock"
	SystemSettingsTimeZoneAmericaSitka                   SystemSettingsTimeZone = "America/Sitka"
	SystemSettingsTimeZoneAmericaStBarthelemy            SystemSettingsTimeZone = "America/St_Barthelemy"
	SystemSettingsTimeZoneAmericaStJohns                 SystemSettingsTimeZone = "America/St_Johns"
	SystemSettingsTimeZoneAmericaStKitts                 SystemSettingsTimeZone = "America/St_Kitts"
	SystemSettingsTimeZoneAmericaStLucia                 SystemSettingsTimeZone = "America/St_Lucia"
	SystemSettingsTimeZoneAmericaStThomas                SystemSettingsTimeZone = "America/St_Thomas"
	SystemSettingsTimeZoneAmericaStVincent               SystemSettingsTimeZone = "America/St_Vincent"
	SystemSettingsTimeZoneAmericaSwiftCurrent            SystemSettingsTimeZone = "America/Swift_Current"
	SystemSettingsTimeZoneAmericaTegucigalpa             SystemSettingsTimeZone = "America/Tegucigalpa"
	SystemSettingsTimeZoneAmericaThule                   SystemSettingsTimeZone = "America/Thule"
	SystemSettingsTimeZoneAmericaThunderBay              SystemSettingsTimeZone = "America/Thunder_Bay"
	SystemSettingsTimeZoneAmericaTijuana                 SystemSettingsTimeZone = "America/Tijuana"
	SystemSettingsTimeZoneAmericaToronto                 SystemSettingsTimeZone = "America/Toronto"
	SystemSettingsTimeZoneAmericaTortola                 SystemSettingsTimeZone = "America/Tortola"
	SystemSettingsTimeZoneAmericaVancouver               SystemSettingsTimeZone = "America/Vancouver"
	SystemSettingsTimeZoneAmericaVirgin                  SystemSettingsTimeZone = "America/Virgin"
	SystemSettingsTimeZoneAmericaWhitehorse              SystemSettingsTimeZone = "America/Whitehorse"
	SystemSettingsTimeZoneAmericaWinnipeg                SystemSettingsTimeZone = "America/Winnipeg"
	SystemSettingsTimeZoneAmericaYakutat                 SystemSettingsTimeZone = "America/Yakutat"
	SystemSettingsTimeZoneAmericaYellowknife             SystemSettingsTimeZone = "America/Yellowknife"
	SystemSettingsTimeZoneAntarcticaCasey                SystemSettingsTimeZone = "Antarctica/Casey"
	SystemSettingsTimeZoneAntarcticaDavis                SystemSettingsTimeZone = "Antarctica/Davis"
	SystemSettingsTimeZoneAntarcticaDumontDUrville       SystemSettingsTimeZone = "Antarctica/DumontDUrville"
	SystemSettingsTimeZoneAntarcticaMacquarie            SystemSettingsTimeZone = "Antarctica/Macquarie"
	SystemSettingsTimeZoneAntarcticaMawson               SystemSettingsTimeZone = "Antarctica/Mawson"
	SystemSettingsTimeZoneAntarcticaMcMurdo              SystemSettingsTimeZone = "Antarctica/McMurdo"
	SystemSettingsTimeZoneAntarcticaPalmer               SystemSettingsTimeZone = "Antarctica/Palmer"
	SystemSettingsTimeZoneAntarcticaRothera              SystemSettingsTimeZone = "Antarctica/Rothera"
	SystemSettingsTimeZoneAntarcticaSouthPole            SystemSettingsTimeZone = "Antarctica/South_Pole"
	SystemSettingsTimeZoneAntarcticaSyowa                SystemSettingsTimeZone = "Antarctica/Syowa"
	SystemSettingsTimeZoneAntarcticaTroll                SystemSettingsTimeZone = "Antarctica/Troll"
	SystemSettingsTimeZoneAntarcticaVostok               SystemSettingsTimeZone = "Antarctica/Vostok"
	SystemSettingsTimeZoneArcticLongyearbyen             SystemSettingsTimeZone = "Arctic/Longyearbyen"
	SystemSettingsTimeZoneAsiaAden                       SystemSettingsTimeZone = "Asia/Aden"
	SystemSettingsTimeZoneAsiaAlmaty                     SystemSettingsTimeZone = "Asia/Almaty"
	SystemSettingsTimeZoneAsiaAmman                      SystemSettingsTimeZone = "Asia/Amman"
	SystemSettingsTimeZoneAsiaAnadyr                     SystemSettingsTimeZone = "Asia/Anadyr"
	SystemSettingsTimeZoneAsiaAqtau                      SystemSettingsTimeZone = "Asia/Aqtau"
	SystemSettingsTimeZoneAsiaAqtobe                     SystemSettingsTimeZone = "Asia/Aqtobe"
	SystemSettingsTimeZoneAsiaAshgabat                   SystemSettingsTimeZone = "Asia/Ashgabat"
	SystemSettingsTimeZoneAsiaAshkhabad                  SystemSettingsTimeZone = "Asia/Ashkhabad"
	SystemSettingsTimeZoneAsiaAtyrau                     SystemSettingsTimeZone = "Asia/Atyrau"
	SystemSettingsTimeZoneAsiaBaghdad                    SystemSettingsTimeZone = "Asia/Baghdad"
	SystemSettingsTimeZoneAsiaBahrain                    SystemSettingsTimeZone = "Asia/Bahrain"
	SystemSettingsTimeZoneAsiaBaku                       SystemSettingsTimeZone = "Asia/Baku"
	SystemSettingsTimeZoneAsiaBangkok                    SystemSettingsTimeZone = "Asia/Bangkok"
	SystemSettingsTimeZoneAsiaBarnaul                    SystemSettingsTimeZone = "Asia/Barnaul"
	SystemSettingsTimeZoneAsiaBeirut                     SystemSettingsTimeZone = "Asia/Beirut"
	SystemSettingsTimeZoneAsiaBishkek                    SystemSettingsTimeZone = "Asia/Bishkek"
	SystemSettingsTimeZoneAsiaBrunei                     SystemSettingsTimeZone = "Asia/Brunei"
	SystemSettingsTimeZoneAsiaCalcutta                   SystemSettingsTimeZone = "Asia/Calcutta"
	SystemSettingsTimeZoneAsiaChita                      SystemSettingsTimeZone = "Asia/Chita"
	SystemSettingsTimeZoneAsiaChoibalsan                 SystemSettingsTimeZone = "Asia/Choibalsan"
	SystemSettingsTimeZoneAsiaChongqing                  SystemSettingsTimeZone = "Asia/Chongqing"
	SystemSettingsTimeZoneAsiaChungking                  SystemSettingsTimeZone = "Asia/Chungking"
	SystemSettingsTimeZoneAsiaColombo                    SystemSettingsTimeZone = "Asia/Colombo"
	SystemSettingsTimeZoneAsiaDacca                      SystemSettingsTimeZone = "Asia/Dacca"
	SystemSettingsTimeZoneAsiaDamascus                   SystemSettingsTimeZone = "Asia/Damascus"
	SystemSettingsTimeZoneAsiaDhaka                      SystemSettingsTimeZone = "Asia/Dhaka"
	SystemSettingsTimeZoneAsiaDili                       SystemSettingsTimeZone = "Asia/Dili"
	SystemSettingsTimeZoneAsiaDubai                      SystemSettingsTimeZone = "Asia/Dubai"
	SystemSettingsTimeZoneAsiaDushanbe                   SystemSettingsTimeZone = "Asia/Dushanbe"
	SystemSettingsTimeZoneAsiaFamagusta                  SystemSettingsTimeZone = "Asia/Famagusta"
	SystemSettingsTimeZoneAsiaGaza                       SystemSettingsTimeZone = "Asia/Gaza"
	SystemSettingsTimeZoneAsiaHarbin                     SystemSettingsTimeZone = "Asia/Harbin"
	SystemSettingsTimeZoneAsiaHebron                     SystemSettingsTimeZone = "Asia/Hebron"
	SystemSettingsTimeZoneAsiaHoChiMinh                  SystemSettingsTimeZone = "Asia/Ho_Chi_Minh"
	SystemSettingsTimeZoneAsiaHongKong                   SystemSettingsTimeZone = "Asia/Hong_Kong"
	SystemSettingsTimeZoneAsiaHovd                       SystemSettingsTimeZone = "Asia/Hovd"
	SystemSettingsTimeZoneAsiaIrkutsk                    SystemSettingsTimeZone = "Asia/Irkutsk"
	SystemSettingsTimeZoneAsiaIstanbul                   SystemSettingsTimeZone = "Asia/Istanbul"
	SystemSettingsTimeZoneAsiaJakarta                    SystemSettingsTimeZone = "Asia/Jakarta"
	SystemSettingsTimeZoneAsiaJayapura                   SystemSettingsTimeZone = "Asia/Jayapura"
	SystemSettingsTimeZoneAsiaJerusalem                  SystemSettingsTimeZone = "Asia/Jerusalem"
	SystemSettingsTimeZoneAsiaKabul                      SystemSettingsTimeZone = "Asia/Kabul"
	SystemSettingsTimeZoneAsiaKamchatka                  SystemSettingsTimeZone = "Asia/Kamchatka"
	SystemSettingsTimeZoneAsiaKarachi                    SystemSettingsTimeZone = "Asia/Karachi"
	SystemSettingsTimeZoneAsiaKashgar                    SystemSettingsTimeZone = "Asia/Kashgar"
	SystemSettingsTimeZoneAsiaKathmandu                  SystemSettingsTimeZone = "Asia/Kathmandu"
	SystemSettingsTimeZoneAsiaKatmandu                   SystemSettingsTimeZone = "Asia/Katmandu"
	SystemSettingsTimeZoneAsiaKhandyga                   SystemSettingsTimeZone = "Asia/Khandyga"
	SystemSettingsTimeZoneAsiaKolkata                    SystemSettingsTimeZone = "Asia/Kolkata"
	SystemSettingsTimeZoneAsiaKrasnoyarsk                SystemSettingsTimeZone = "Asia/Krasnoyarsk"
	SystemSettingsTimeZoneAsiaKualaLumpur                SystemSettingsTimeZone = "Asia/Kuala_Lumpur"
	SystemSettingsTimeZoneAsiaKuching                    SystemSettingsTimeZone = "Asia/Kuching"
	SystemSettingsTimeZoneAsiaKuwait                     SystemSettingsTimeZone = "Asia/Kuwait"
	SystemSettingsTimeZoneAsiaMacao                      SystemSettingsTimeZone = "Asia/Macao"
	SystemSettingsTimeZoneAsiaMacau                      SystemSettingsTimeZone = "Asia/Macau"
	SystemSettingsTimeZoneAsiaMagadan                    SystemSettingsTimeZone = "Asia/Magadan"
	SystemSettingsTimeZoneAsiaMakassar                   SystemSettingsTimeZone = "Asia/Makassar"
	SystemSettingsTimeZoneAsiaManila                     SystemSettingsTimeZone = "Asia/Manila"
	SystemSettingsTimeZoneAsiaMuscat                     SystemSettingsTimeZone = "Asia/Muscat"
	SystemSettingsTimeZoneAsiaNicosia                    SystemSettingsTimeZone = "Asia/Nicosia"
	SystemSettingsTimeZoneAsiaNovokuznetsk               SystemSettingsTimeZone = "Asia/Novokuznetsk"
	SystemSettingsTimeZoneAsiaNovosibirsk                SystemSettingsTimeZone = "Asia/Novosibirsk"
	SystemSettingsTimeZoneAsiaOmsk                       SystemSettingsTimeZone = "Asia/Omsk"
	SystemSettingsTimeZoneAsiaOral                       SystemSettingsTimeZone = "Asia/Oral"
	SystemSettingsTimeZoneAsiaPhnomPenh                  SystemSettingsTimeZone = "Asia/Phnom_Penh"
	SystemSettingsTimeZoneAsiaPontianak                  SystemSettingsTimeZone = "Asia/Pontianak"
	SystemSettingsTimeZoneAsiaPyongyang                  SystemSettingsTimeZone = "Asia/Pyongyang"
	SystemSettingsTimeZoneAsiaQatar                      SystemSettingsTimeZone = "Asia/Qatar"
	SystemSettingsTimeZoneAsiaQostanay                   SystemSettingsTimeZone = "Asia/Qostanay"
	SystemSettingsTimeZoneAsiaQyzylorda                  SystemSettingsTimeZone = "Asia/Qyzylorda"
	SystemSettingsTimeZoneAsiaRangoon                    SystemSettingsTimeZone = "Asia/Rangoon"
	SystemSettingsTimeZoneAsiaRiyadh                     SystemSettingsTimeZone = "Asia/Riyadh"
	SystemSettingsTimeZoneAsiaSaigon                     SystemSettingsTimeZone = "Asia/Saigon"
	SystemSettingsTimeZoneAsiaSakhalin                   SystemSettingsTimeZone = "Asia/Sakhalin"
	SystemSettingsTimeZoneAsiaSamarkand                  SystemSettingsTimeZone = "Asia/Samarkand"
	SystemSettingsTimeZoneAsiaSeoul                      SystemSettingsTimeZone = "Asia/Seoul"
	SystemSettingsTimeZoneAsiaShanghai                   SystemSettingsTimeZone = "Asia/Shanghai"
	SystemSettingsTimeZoneAsiaSingapore                  SystemSettingsTimeZone = "Asia/Singapore"
	SystemSettingsTimeZoneAsiaSrednekolymsk              SystemSettingsTimeZone = "Asia/Srednekolymsk"
	SystemSettingsTimeZoneAsiaTaipei                     SystemSettingsTimeZone = "Asia/Taipei"
	SystemSettingsTimeZoneAsiaTashkent                   SystemSettingsTimeZone = "Asia/Tashkent"
	SystemSettingsTimeZoneAsiaTbilisi                    SystemSettingsTimeZone = "Asia/Tbilisi"
	SystemSettingsTimeZoneAsiaTehran                     SystemSettingsTimeZone = "Asia/Tehran"
	SystemSettingsTimeZoneAsiaTelAviv                    SystemSettingsTimeZone = "Asia/Tel_Aviv"
	SystemSettingsTimeZoneAsiaThimbu                     SystemSettingsTimeZone = "Asia/Thimbu"
	SystemSettingsTimeZoneAsiaThimphu                    SystemSettingsTimeZone = "Asia/Thimphu"
	SystemSettingsTimeZoneAsiaTokyo                      SystemSettingsTimeZone = "Asia/Tokyo"
	SystemSettingsTimeZoneAsiaTomsk                      SystemSettingsTimeZone = "Asia/Tomsk"
	SystemSettingsTimeZoneAsiaUjungPandang               SystemSettingsTimeZone = "Asia/Ujung_Pandang"
	SystemSettingsTimeZoneAsiaUlaanbaatar                SystemSettingsTimeZone = "Asia/Ulaanbaatar"
	SystemSettingsTimeZoneAsiaUlanBator                  SystemSettingsTimeZone = "Asia/Ulan_Bator"
	SystemSettingsTimeZoneAsiaUrumqi                     SystemSettingsTimeZone = "Asia/Urumqi"
	SystemSettingsTimeZoneAsiaUstNera                    SystemSettingsTimeZone = "Asia/Ust-Nera"
	SystemSettingsTimeZoneAsiaVientiane                  SystemSettingsTimeZone = "Asia/Vientiane"
	SystemSettingsTimeZoneAsiaVladivostok                SystemSettingsTimeZone = "Asia/Vladivostok"
	SystemSettingsTimeZoneAsiaYakutsk                    SystemSettingsTimeZone = "Asia/Yakutsk"
	SystemSettingsTimeZoneAsiaYangon                     SystemSettingsTimeZone = "Asia/Yangon"
	SystemSettingsTimeZoneAsiaYekaterinburg              SystemSettingsTimeZone = "Asia/Yekaterinburg"
	SystemSettingsTimeZoneAsiaYerevan                    SystemSettingsTimeZone = "Asia/Yerevan"
	SystemSettingsTimeZoneAtlanticAzores                 SystemSettingsTimeZone = "Atlantic/Azores"
	SystemSettingsTimeZoneAtlanticBermuda                SystemSettingsTimeZone = "Atlantic/Bermuda"
	SystemSettingsTimeZoneAtlanticCanary                 SystemSettingsTimeZone = "Atlantic/Canary"
	SystemSettingsTimeZoneAtlanticCapeVerde              SystemSettingsTimeZone = "Atlantic/Cape_Verde"
	SystemSettingsTimeZoneAtlanticFaeroe                 SystemSettingsTimeZone = "Atlantic/Faeroe"
	SystemSettingsTimeZoneAtlanticFaroe                  SystemSettingsTimeZone = "Atlantic/Faroe"
	SystemSettingsTimeZoneAtlanticJanMayen               SystemSettingsTimeZone = "Atlantic/Jan_Mayen"
	SystemSettingsTimeZoneAtlanticMadeira                SystemSettingsTimeZone = "Atlantic/Madeira"
	SystemSettingsTimeZoneAtlanticReykjavik              SystemSettingsTimeZone = "Atlantic/Reykjavik"
	SystemSettingsTimeZoneAtlanticSouthGeorgia           SystemSettingsTimeZone = "Atlantic/South_Georgia"
	SystemSettingsTimeZoneAtlanticStHelena               SystemSettingsTimeZone = "Atlantic/St_Helena"
	SystemSettingsTimeZoneAtlanticStanley                SystemSettingsTimeZone = "Atlantic/Stanley"
	SystemSettingsTimeZoneAustraliaACT                   SystemSettingsTimeZone = "Australia/ACT"
	SystemSettingsTimeZoneAustraliaAdelaide              SystemSettingsTimeZone = "Australia/Adelaide"
	SystemSettingsTimeZoneAustraliaBrisbane              SystemSettingsTimeZone = "Australia/Brisbane"
	SystemSettingsTimeZoneAustraliaBrokenHill            SystemSettingsTimeZone = "Australia/Broken_Hill"
	SystemSettingsTimeZoneAustraliaCanberra              SystemSettingsTimeZone = "Australia/Canberra"
	SystemSettingsTimeZoneAustraliaCurrie                SystemSettingsTimeZone = "Australia/Currie"
	SystemSettingsTimeZoneAustraliaDarwin                SystemSettingsTimeZone = "Australia/Darwin"
	SystemSettingsTimeZoneAustraliaEucla                 SystemSettingsTimeZone = "Australia/Eucla"
	SystemSettingsTimeZoneAustraliaHobart                SystemSettingsTimeZone = "Australia/Hobart"
	SystemSettingsTimeZoneAustraliaLHI                   SystemSettingsTimeZone = "Australia/LHI"
	SystemSettingsTimeZoneAustraliaLindeman              SystemSettingsTimeZone = "Australia/Lindeman"
	SystemSettingsTimeZoneAustraliaLordHowe              SystemSettingsTimeZone = "Australia/Lord_Howe"
	SystemSettingsTimeZoneAustraliaMelbourne             SystemSettingsTimeZone = "Australia/Melbourne"
	SystemSettingsTimeZoneAustraliaNSW                   SystemSettingsTimeZone = "Australia/NSW"
	SystemSettingsTimeZoneAustraliaNorth                 SystemSettingsTimeZone = "Australia/North"
	SystemSettingsTimeZoneAustraliaPerth                 SystemSettingsTimeZone = "Australia/Perth"
	SystemSettingsTimeZoneAustraliaQueensland            SystemSettingsTimeZone = "Australia/Queensland"
	SystemSettingsTimeZoneAustraliaSouth                 SystemSettingsTimeZone = "Australia/South"
	SystemSettingsTimeZoneAustraliaSydney                SystemSettingsTimeZone = "Australia/Sydney"
	SystemSettingsTimeZoneAustraliaTasmania              SystemSettingsTimeZone = "Australia/Tasmania"
	SystemSettingsTimeZoneAustraliaVictoria              SystemSettingsTimeZone = "Australia/Victoria"
	SystemSettingsTimeZoneAustraliaWest                  SystemSettingsTimeZone = "Australia/West"
	SystemSettingsTimeZoneAustraliaYancowinna            SystemSettingsTimeZone = "Australia/Yancowinna"
	SystemSettingsTimeZoneBrazilAcre                     SystemSettingsTimeZone = "Brazil/Acre"
	SystemSettingsTimeZoneBrazilDeNoronha                SystemSettingsTimeZone = "Brazil/DeNoronha"
	SystemSettingsTimeZoneBrazilEast                     SystemSettingsTimeZone = "Brazil/East"
	SystemSettingsTimeZoneBrazilWest                     SystemSettingsTimeZone = "Brazil/West"
	SystemSettingsTimeZoneCET                            SystemSettingsTimeZone = "CET"
	SystemSettingsTimeZoneCST6CDT                        SystemSettingsTimeZone = "CST6CDT"
	SystemSettingsTimeZoneCanadaAtlantic                 SystemSettingsTimeZone = "Canada/Atlantic"
	SystemSettingsTimeZoneCanadaCentral                  SystemSettingsTimeZone = "Canada/Central"
	SystemSettingsTimeZoneCanadaEastern                  SystemSettingsTimeZone = "Canada/Eastern"
	SystemSettingsTimeZoneCanadaMountain                 SystemSettingsTimeZone = "Canada/Mountain"
	SystemSettingsTimeZoneCanadaNewfoundland             SystemSettingsTimeZone = "Canada/Newfoundland"
	SystemSettingsTimeZoneCanadaPacific                  SystemSettingsTimeZone = "Canada/Pacific"
	SystemSettingsTimeZoneCanadaSaskatchewan             SystemSettingsTimeZone = "Canada/Saskatchewan"
	SystemSettingsTimeZoneCanadaYukon                    SystemSettingsTimeZone = "Canada/Yukon"
	SystemSettingsTimeZoneChileContinental               SystemSettingsTimeZone = "Chile/Continental"
	SystemSettingsTimeZoneChileEasterIsland              SystemSettingsTimeZone = "Chile/EasterIsland"
	SystemSettingsTimeZoneCuba                           SystemSettingsTimeZone = "Cuba"
	SystemSettingsTimeZoneEET                            SystemSettingsTimeZone = "EET"
	SystemSettingsTimeZoneEST                            SystemSettingsTimeZone = "EST"
	SystemSettingsTimeZoneEST5EDT                        SystemSettingsTimeZone = "EST5EDT"
	SystemSettingsTimeZoneEgypt                          SystemSettingsTimeZone = "Egypt"
	SystemSettingsTimeZoneEire                           SystemSettingsTimeZone = "Eire"
	SystemSettingsTimeZoneEtcGMT                         SystemSettingsTimeZone = "Etc/GMT"
	SystemSettingsTimeZoneEtcGMT0                        SystemSettingsTimeZone = "Etc/GMT+0"
	SystemSettingsTimeZoneEtcGMT01                       SystemSettingsTimeZone = "Etc/GMT-0"
	SystemSettingsTimeZoneEtcGMT02                       SystemSettingsTimeZone = "Etc/GMT0"
	SystemSettingsTimeZoneEtcGMT1                        SystemSettingsTimeZone = "Etc/GMT+1"
	SystemSettingsTimeZoneEtcGMT10                       SystemSettingsTimeZone = "Etc/GMT+10"
	SystemSettingsTimeZoneEtcGMT101                      SystemSettingsTimeZone = "Etc/GMT-10"
	SystemSettingsTimeZoneEtcGMT11                       SystemSettingsTimeZone = "Etc/GMT-1"
	SystemSettingsTimeZoneEtcGMT111                      SystemSettingsTimeZone = "Etc/GMT-11"
	SystemSettingsTimeZoneEtcGMT12                       SystemSettingsTimeZone = "Etc/GMT+12"
	SystemSettingsTimeZoneEtcGMT121                      SystemSettingsTimeZone = "Etc/GMT-12"
	SystemSettingsTimeZoneEtcGMT13                       SystemSettingsTimeZone = "Etc/GMT-13"
	SystemSettingsTimeZoneEtcGMT14                       SystemSettingsTimeZone = "Etc/GMT-14"
	SystemSettingsTimeZoneEtcGMT2                        SystemSettingsTimeZone = "Etc/GMT+2"
	SystemSettingsTimeZoneEtcGMT21                       SystemSettingsTimeZone = "Etc/GMT-2"
	SystemSettingsTimeZoneEtcGMT3                        SystemSettingsTimeZone = "Etc/GMT+3"
	SystemSettingsTimeZoneEtcGMT31                       SystemSettingsTimeZone = "Etc/GMT-3"
	SystemSettingsTimeZoneEtcGMT4                        SystemSettingsTimeZone = "Etc/GMT+4"
	SystemSettingsTimeZoneEtcGMT41                       SystemSettingsTimeZone = "Etc/GMT-4"
	SystemSettingsTimeZoneEtcGMT5                        SystemSettingsTimeZone = "Etc/GMT+5"
	SystemSettingsTimeZoneEtcGMT51                       SystemSettingsTimeZone = "Etc/GMT-5"
	SystemSettingsTimeZoneEtcGMT6                        SystemSettingsTimeZone = "Etc/GMT+6"
	SystemSettingsTimeZoneEtcGMT61                       SystemSettingsTimeZone = "Etc/GMT-6"
	SystemSettingsTimeZoneEtcGMT7                        SystemSettingsTimeZone = "Etc/GMT+7"
	SystemSettingsTimeZoneEtcGMT71                       SystemSettingsTimeZone = "Etc/GMT-7"
	SystemSettingsTimeZoneEtcGMT8                        SystemSettingsTimeZone = "Etc/GMT+8"
	SystemSettingsTimeZoneEtcGMT81                       SystemSettingsTimeZone = "Etc/GMT-8"
	SystemSettingsTimeZoneEtcGMT9                        SystemSettingsTimeZone = "Etc/GMT+9"
	SystemSettingsTimeZoneEtcGMT91                       SystemSettingsTimeZone = "Etc/GMT-9"
	SystemSettingsTimeZoneEtcGreenwich                   SystemSettingsTimeZone = "Etc/Greenwich"
	SystemSettingsTimeZoneEtcUCT                         SystemSettingsTimeZone = "Etc/UCT"
	SystemSettingsTimeZoneEtcUTC                         SystemSettingsTimeZone = "Etc/UTC"
	SystemSettingsTimeZoneEtcUniversal                   SystemSettingsTimeZone = "Etc/Universal"
	SystemSettingsTimeZoneEtcZulu                        SystemSettingsTimeZone = "Etc/Zulu"
	SystemSettingsTimeZoneEuropeAmsterdam                SystemSettingsTimeZone = "Europe/Amsterdam"
	SystemSettingsTimeZoneEuropeAndorra                  SystemSettingsTimeZone = "Europe/Andorra"
	SystemSettingsTimeZoneEuropeAstrakhan                SystemSettingsTimeZone = "Europe/Astrakhan"
	SystemSettingsTimeZoneEuropeAthens                   SystemSettingsTimeZone = "Europe/Athens"
	SystemSettingsTimeZoneEuropeBelfast                  SystemSettingsTimeZone = "Europe/Belfast"
	SystemSettingsTimeZoneEuropeBelgrade                 SystemSettingsTimeZone = "Europe/Belgrade"
	SystemSettingsTimeZoneEuropeBerlin                   SystemSettingsTimeZone = "Europe/Berlin"
	SystemSettingsTimeZoneEuropeBratislava               SystemSettingsTimeZone = "Europe/Bratislava"
	SystemSettingsTimeZoneEuropeBrussels                 SystemSettingsTimeZone = "Europe/Brussels"
	SystemSettingsTimeZoneEuropeBucharest                SystemSettingsTimeZone = "Europe/Bucharest"
	SystemSettingsTimeZoneEuropeBudapest                 SystemSettingsTimeZone = "Europe/Budapest"
	SystemSettingsTimeZoneEuropeBusingen                 SystemSettingsTimeZone = "Europe/Busingen"
	SystemSettingsTimeZoneEuropeChisinau                 SystemSettingsTimeZone = "Europe/Chisinau"
	SystemSettingsTimeZoneEuropeCopenhagen               SystemSettingsTimeZone = "Europe/Copenhagen"
	SystemSettingsTimeZoneEuropeDublin                   SystemSettingsTimeZone = "Europe/Dublin"
	SystemSettingsTimeZoneEuropeGibraltar                SystemSettingsTimeZone = "Europe/Gibraltar"
	SystemSettingsTimeZoneEuropeGuernsey                 SystemSettingsTimeZone = "Europe/Guernsey"
	SystemSettingsTimeZoneEuropeHelsinki                 SystemSettingsTimeZone = "Europe/Helsinki"
	SystemSettingsTimeZoneEuropeIsleOfMan                SystemSettingsTimeZone = "Europe/Isle_of_Man"
	SystemSettingsTimeZoneEuropeIstanbul                 SystemSettingsTimeZone = "Europe/Istanbul"
	SystemSettingsTimeZoneEuropeJersey                   SystemSettingsTimeZone = "Europe/Jersey"
	SystemSettingsTimeZoneEuropeKaliningrad              SystemSettingsTimeZone = "Europe/Kaliningrad"
	SystemSettingsTimeZoneEuropeKiev                     SystemSettingsTimeZone = "Europe/Kiev"
	SystemSettingsTimeZoneEuropeKirov                    SystemSettingsTimeZone = "Europe/Kirov"
	SystemSettingsTimeZoneEuropeLisbon                   SystemSettingsTimeZone = "Europe/Lisbon"
	SystemSettingsTimeZoneEuropeLjubljana                SystemSettingsTimeZone = "Europe/Ljubljana"
	SystemSettingsTimeZoneEuropeLondon                   SystemSettingsTimeZone = "Europe/London"
	SystemSettingsTimeZoneEuropeLuxembourg               SystemSettingsTimeZone = "Europe/Luxembourg"
	SystemSettingsTimeZoneEuropeMadrid                   SystemSettingsTimeZone = "Europe/Madrid"
	SystemSettingsTimeZoneEuropeMalta                    SystemSettingsTimeZone = "Europe/Malta"
	SystemSettingsTimeZoneEuropeMariehamn                SystemSettingsTimeZone = "Europe/Mariehamn"
	SystemSettingsTimeZoneEuropeMinsk                    SystemSettingsTimeZone = "Europe/Minsk"
	SystemSettingsTimeZoneEuropeMonaco                   SystemSettingsTimeZone = "Europe/Monaco"
	SystemSettingsTimeZoneEuropeMoscow                   SystemSettingsTimeZone = "Europe/Moscow"
	SystemSettingsTimeZoneEuropeNicosia                  SystemSettingsTimeZone = "Europe/Nicosia"
	SystemSettingsTimeZoneEuropeOslo                     SystemSettingsTimeZone = "Europe/Oslo"
	SystemSettingsTimeZoneEuropeParis                    SystemSettingsTimeZone = "Europe/Paris"
	SystemSettingsTimeZoneEuropePodgorica                SystemSettingsTimeZone = "Europe/Podgorica"
	SystemSettingsTimeZoneEuropePrague                   SystemSettingsTimeZone = "Europe/Prague"
	SystemSettingsTimeZoneEuropeRiga                     SystemSettingsTimeZone = "Europe/Riga"
	SystemSettingsTimeZoneEuropeRome                     SystemSettingsTimeZone = "Europe/Rome"
	SystemSettingsTimeZoneEuropeSamara                   SystemSettingsTimeZone = "Europe/Samara"
	SystemSettingsTimeZoneEuropeSanMarino                SystemSettingsTimeZone = "Europe/San_Marino"
	SystemSettingsTimeZoneEuropeSarajevo                 SystemSettingsTimeZone = "Europe/Sarajevo"
	SystemSettingsTimeZoneEuropeSaratov                  SystemSettingsTimeZone = "Europe/Saratov"
	SystemSettingsTimeZoneEuropeSimferopol               SystemSettingsTimeZone = "Europe/Simferopol"
	SystemSettingsTimeZoneEuropeSkopje                   SystemSettingsTimeZone = "Europe/Skopje"
	SystemSettingsTimeZoneEuropeSofia                    SystemSettingsTimeZone = "Europe/Sofia"
	SystemSettingsTimeZoneEuropeStockholm                SystemSettingsTimeZone = "Europe/Stockholm"
	SystemSettingsTimeZoneEuropeTallinn                  SystemSettingsTimeZone = "Europe/Tallinn"
	SystemSettingsTimeZoneEuropeTirane                   SystemSettingsTimeZone = "Europe/Tirane"
	SystemSettingsTimeZoneEuropeTiraspol                 SystemSettingsTimeZone = "Europe/Tiraspol"
	SystemSettingsTimeZoneEuropeUlyanovsk                SystemSettingsTimeZone = "Europe/Ulyanovsk"
	SystemSettingsTimeZoneEuropeUzhgorod                 SystemSettingsTimeZone = "Europe/Uzhgorod"
	SystemSettingsTimeZoneEuropeVaduz                    SystemSettingsTimeZone = "Europe/Vaduz"
	SystemSettingsTimeZoneEuropeVatican                  SystemSettingsTimeZone = "Europe/Vatican"
	SystemSettingsTimeZoneEuropeVienna                   SystemSettingsTimeZone = "Europe/Vienna"
	SystemSettingsTimeZoneEuropeVilnius                  SystemSettingsTimeZone = "Europe/Vilnius"
	SystemSettingsTimeZoneEuropeVolgograd                SystemSettingsTimeZone = "Europe/Volgograd"
	SystemSettingsTimeZoneEuropeWarsaw                   SystemSettingsTimeZone = "Europe/Warsaw"
	SystemSettingsTimeZoneEuropeZagreb                   SystemSettingsTimeZone = "Europe/Zagreb"
	SystemSettingsTimeZoneEuropeZaporozhye               SystemSettingsTimeZone = "Europe/Zaporozhye"
	SystemSettingsTimeZoneEuropeZurich                   SystemSettingsTimeZone = "Europe/Zurich"
	SystemSettingsTimeZoneGB                             SystemSettingsTimeZone = "GB"
	SystemSettingsTimeZoneGBEire                         SystemSettingsTimeZone = "GB-Eire"
	SystemSettingsTimeZoneGMT                            SystemSettingsTimeZone = "GMT"
	SystemSettingsTimeZoneGMT0                           SystemSettingsTimeZone = "GMT+0"
	SystemSettingsTimeZoneGMT01                          SystemSettingsTimeZone = "GMT-0"
	SystemSettingsTimeZoneGMT02                          SystemSettingsTimeZone = "GMT0"
	SystemSettingsTimeZoneGreenwich                      SystemSettingsTimeZone = "Greenwich"
	SystemSettingsTimeZoneHST                            SystemSettingsTimeZone = "HST"
	SystemSettingsTimeZoneHongkong                       SystemSettingsTimeZone = "Hongkong"
	SystemSettingsTimeZoneIceland                        SystemSettingsTimeZone = "Iceland"
	SystemSettingsTimeZoneIndianAntananarivo             SystemSettingsTimeZone = "Indian/Antananarivo"
	SystemSettingsTimeZoneIndianChagos                   SystemSettingsTimeZone = "Indian/Chagos"
	SystemSettingsTimeZoneIndianChristmas                SystemSettingsTimeZone = "Indian/Christmas"
	SystemSettingsTimeZoneIndianCocos                    SystemSettingsTimeZone = "Indian/Cocos"
	SystemSettingsTimeZoneIndianComoro                   SystemSettingsTimeZone = "Indian/Comoro"
	SystemSettingsTimeZoneIndianKerguelen                SystemSettingsTimeZone = "Indian/Kerguelen"
	SystemSettingsTimeZoneIndianMahe                     SystemSettingsTimeZone = "Indian/Mahe"
	SystemSettingsTimeZoneIndianMaldives                 SystemSettingsTimeZone = "Indian/Maldives"
	SystemSettingsTimeZoneIndianMauritius                SystemSettingsTimeZone = "Indian/Mauritius"
	SystemSettingsTimeZoneIndianMayotte                  SystemSettingsTimeZone = "Indian/Mayotte"
	SystemSettingsTimeZoneIndianReunion                  SystemSettingsTimeZone = "Indian/Reunion"
	SystemSettingsTimeZoneIran                           SystemSettingsTimeZone = "Iran"
	SystemSettingsTimeZoneIsrael                         SystemSettingsTimeZone = "Israel"
	SystemSettingsTimeZoneJamaica                        SystemSettingsTimeZone = "Jamaica"
	SystemSettingsTimeZoneJapan                          SystemSettingsTimeZone = "Japan"
	SystemSettingsTimeZoneKwajalein                      SystemSettingsTimeZone = "Kwajalein"
	SystemSettingsTimeZoneLibya                          SystemSettingsTimeZone = "Libya"
	SystemSettingsTimeZoneMET                            SystemSettingsTimeZone = "MET"
	SystemSettingsTimeZoneMST                            SystemSettingsTimeZone = "MST"
	SystemSettingsTimeZoneMST7MDT                        SystemSettingsTimeZone = "MST7MDT"
	SystemSettingsTimeZoneMexicoBajaNorte                SystemSettingsTimeZone = "Mexico/BajaNorte"
	SystemSettingsTimeZoneMexicoBajaSur                  SystemSettingsTimeZone = "Mexico/BajaSur"
	SystemSettingsTimeZoneMexicoGeneral                  SystemSettingsTimeZone = "Mexico/General"
	SystemSettingsTimeZoneNZ                             SystemSettingsTimeZone = "NZ"
	SystemSettingsTimeZoneNZCHAT                         SystemSettingsTimeZone = "NZ-CHAT"
	SystemSettingsTimeZoneNavajo                         SystemSettingsTimeZone = "Navajo"
	SystemSettingsTimeZonePRC                            SystemSettingsTimeZone = "PRC"
	SystemSettingsTimeZonePST8PDT                        SystemSettingsTimeZone = "PST8PDT"
	SystemSettingsTimeZonePacificApia                    SystemSettingsTimeZone = "Pacific/Apia"
	SystemSettingsTimeZonePacificAuckland                SystemSettingsTimeZone = "Pacific/Auckland"
	SystemSettingsTimeZonePacificBougainville            SystemSettingsTimeZone = "Pacific/Bougainville"
	SystemSettingsTimeZonePacificChatham                 SystemSettingsTimeZone = "Pacific/Chatham"
	SystemSettingsTimeZonePacificChuuk                   SystemSettingsTimeZone = "Pacific/Chuuk"
	SystemSettingsTimeZonePacificEaster                  SystemSettingsTimeZone = "Pacific/Easter"
	SystemSettingsTimeZonePacificEfate                   SystemSettingsTimeZone = "Pacific/Efate"
	SystemSettingsTimeZonePacificEnderbury               SystemSettingsTimeZone = "Pacific/Enderbury"
	SystemSettingsTimeZonePacificFakaofo                 SystemSettingsTimeZone = "Pacific/Fakaofo"
	SystemSettingsTimeZonePacificFiji                    SystemSettingsTimeZone = "Pacific/Fiji"
	SystemSettingsTimeZonePacificFunafuti                SystemSettingsTimeZone = "Pacific/Funafuti"
	SystemSettingsTimeZonePacificGalapagos               SystemSettingsTimeZone = "Pacific/Galapagos"
	SystemSettingsTimeZonePacificGambier                 SystemSettingsTimeZone = "Pacific/Gambier"
	SystemSettingsTimeZonePacificGuadalcanal             SystemSettingsTimeZone = "Pacific/Guadalcanal"
	SystemSettingsTimeZonePacificGuam                    SystemSettingsTimeZone = "Pacific/Guam"
	SystemSettingsTimeZonePacificHonolulu                SystemSettingsTimeZone = "Pacific/Honolulu"
	SystemSettingsTimeZonePacificJohnston                SystemSettingsTimeZone = "Pacific/Johnston"
	SystemSettingsTimeZonePacificKanton                  SystemSettingsTimeZone = "Pacific/Kanton"
	SystemSettingsTimeZonePacificKiritimati              SystemSettingsTimeZone = "Pacific/Kiritimati"
	SystemSettingsTimeZonePacificKosrae                  SystemSettingsTimeZone = "Pacific/Kosrae"
	SystemSettingsTimeZonePacificKwajalein               SystemSettingsTimeZone = "Pacific/Kwajalein"
	SystemSettingsTimeZonePacificMajuro                  SystemSettingsTimeZone = "Pacific/Majuro"
	SystemSettingsTimeZonePacificMarquesas               SystemSettingsTimeZone = "Pacific/Marquesas"
	SystemSettingsTimeZonePacificMidway                  SystemSettingsTimeZone = "Pacific/Midway"
	SystemSettingsTimeZonePacificNauru                   SystemSettingsTimeZone = "Pacific/Nauru"
	SystemSettingsTimeZonePacificNiue                    SystemSettingsTimeZone = "Pacific/Niue"
	SystemSettingsTimeZonePacificNorfolk                 SystemSettingsTimeZone = "Pacific/Norfolk"
	SystemSettingsTimeZonePacificNoumea                  SystemSettingsTimeZone = "Pacific/Noumea"
	SystemSettingsTimeZonePacificPagoPago                SystemSettingsTimeZone = "Pacific/Pago_Pago"
	SystemSettingsTimeZonePacificPalau                   SystemSettingsTimeZone = "Pacific/Palau"
	SystemSettingsTimeZonePacificPitcairn                SystemSettingsTimeZone = "Pacific/Pitcairn"
	SystemSettingsTimeZonePacificPohnpei                 SystemSettingsTimeZone = "Pacific/Pohnpei"
	SystemSettingsTimeZonePacificPonape                  SystemSettingsTimeZone = "Pacific/Ponape"
	SystemSettingsTimeZonePacificPortMoresby             SystemSettingsTimeZone = "Pacific/Port_Moresby"
	SystemSettingsTimeZonePacificRarotonga               SystemSettingsTimeZone = "Pacific/Rarotonga"
	SystemSettingsTimeZonePacificSaipan                  SystemSettingsTimeZone = "Pacific/Saipan"
	SystemSettingsTimeZonePacificSamoa                   SystemSettingsTimeZone = "Pacific/Samoa"
	SystemSettingsTimeZonePacificTahiti                  SystemSettingsTimeZone = "Pacific/Tahiti"
	SystemSettingsTimeZonePacificTarawa                  SystemSettingsTimeZone = "Pacific/Tarawa"
	SystemSettingsTimeZonePacificTongatapu               SystemSettingsTimeZone = "Pacific/Tongatapu"
	SystemSettingsTimeZonePacificTruk                    SystemSettingsTimeZone = "Pacific/Truk"
	SystemSettingsTimeZonePacificWake                    SystemSettingsTimeZone = "Pacific/Wake"
	SystemSettingsTimeZonePacificWallis                  SystemSettingsTimeZone = "Pacific/Wallis"
	SystemSettingsTimeZonePacificYap                     SystemSettingsTimeZone = "Pacific/Yap"
	SystemSettingsTimeZonePoland                         SystemSettingsTimeZone = "Poland"
	SystemSettingsTimeZonePortugal                       SystemSettingsTimeZone = "Portugal"
	SystemSettingsTimeZoneROC                            SystemSettingsTimeZone = "ROC"
	SystemSettingsTimeZoneROK                            SystemSettingsTimeZone = "ROK"
	SystemSettingsTimeZoneSingapore                      SystemSettingsTimeZone = "Singapore"
	SystemSettingsTimeZoneTurkey                         SystemSettingsTimeZone = "Turkey"
	SystemSettingsTimeZoneUCT                            SystemSettingsTimeZone = "UCT"
	SystemSettingsTimeZoneUSAlaska                       SystemSettingsTimeZone = "US/Alaska"
	SystemSettingsTimeZoneUSAleutian                     SystemSettingsTimeZone = "US/Aleutian"
	SystemSettingsTimeZoneUSArizona                      SystemSettingsTimeZone = "US/Arizona"
	SystemSettingsTimeZoneUSCentral                      SystemSettingsTimeZone = "US/Central"
	SystemSettingsTimeZoneUSEastIndiana                  SystemSettingsTimeZone = "US/East-Indiana"
	SystemSettingsTimeZoneUSEastern                      SystemSettingsTimeZone = "US/Eastern"
	SystemSettingsTimeZoneUSHawaii                       SystemSettingsTimeZone = "US/Hawaii"
	SystemSettingsTimeZoneUSIndianaStarke                SystemSettingsTimeZone = "US/Indiana-Starke"
	SystemSettingsTimeZoneUSMichigan                     SystemSettingsTimeZone = "US/Michigan"
	SystemSettingsTimeZoneUSMountain                     SystemSettingsTimeZone = "US/Mountain"
	SystemSettingsTimeZoneUSPacific                      SystemSettingsTimeZone = "US/Pacific"
	SystemSettingsTimeZoneUSSamoa                        SystemSettingsTimeZone = "US/Samoa"
	SystemSettingsTimeZoneUTC                            SystemSettingsTimeZone = "UTC"
	SystemSettingsTimeZoneUniversal                      SystemSettingsTimeZone = "Universal"
	SystemSettingsTimeZoneWET                            SystemSettingsTimeZone = "WET"
	SystemSettingsTimeZoneWSU                            SystemSettingsTimeZone = "W-SU"
	SystemSettingsTimeZoneZulu                           SystemSettingsTimeZone = "Zulu"
)

// Defines values for TestImportFindingActionAction.
const (
	TestImportFindingActionActionC     TestImportFindingActionAction = "C"
	TestImportFindingActionActionEmpty TestImportFindingActionAction = ""
	TestImportFindingActionActionN     TestImportFindingActionAction = "N"
	TestImportFindingActionActionNil   TestImportFindingActionAction = "<nil>"
	TestImportFindingActionActionR     TestImportFindingActionAction = "R"
	TestImportFindingActionActionU     TestImportFindingActionAction = "U"
)

// Defines values for ToolConfigurationAuthenticationType.
const (
	ToolConfigurationAuthenticationTypeAPI      ToolConfigurationAuthenticationType = "API"
	ToolConfigurationAuthenticationTypeEmpty    ToolConfigurationAuthenticationType = ""
	ToolConfigurationAuthenticationTypeNil      ToolConfigurationAuthenticationType = "<nil>"
	ToolConfigurationAuthenticationTypePassword ToolConfigurationAuthenticationType = "Password"
	ToolConfigurationAuthenticationTypeSSH      ToolConfigurationAuthenticationType = "SSH"
)

// Defines values for DojoGroupMembersListParamsPrefetch.
const (
	DojoGroupMembersListParamsPrefetchGroup DojoGroupMembersListParamsPrefetch = "group"
	DojoGroupMembersListParamsPrefetchRole  DojoGroupMembersListParamsPrefetch = "role"
	DojoGroupMembersListParamsPrefetchUser  DojoGroupMembersListParamsPrefetch = "user"
)

// Defines values for DojoGroupMembersRetrieveParamsPrefetch.
const (
	DojoGroupMembersRetrieveParamsPrefetchGroup DojoGroupMembersRetrieveParamsPrefetch = "group"
	DojoGroupMembersRetrieveParamsPrefetchRole  DojoGroupMembersRetrieveParamsPrefetch = "role"
	DojoGroupMembersRetrieveParamsPrefetchUser  DojoGroupMembersRetrieveParamsPrefetch = "user"
)

// Defines values for DojoGroupsListParamsPrefetch.
const (
	DojoGroupsListParamsPrefetchProductGroups     DojoGroupsListParamsPrefetch = "product_groups"
	DojoGroupsListParamsPrefetchProductTypeGroups DojoGroupsListParamsPrefetch = "product_type_groups"
	DojoGroupsListParamsPrefetchUsers             DojoGroupsListParamsPrefetch = "users"
)

// Defines values for DojoGroupsRetrieveParamsPrefetch.
const (
	DojoGroupsRetrieveParamsPrefetchProductGroups     DojoGroupsRetrieveParamsPrefetch = "product_groups"
	DojoGroupsRetrieveParamsPrefetchProductTypeGroups DojoGroupsRetrieveParamsPrefetch = "product_type_groups"
	DojoGroupsRetrieveParamsPrefetchUsers             DojoGroupsRetrieveParamsPrefetch = "users"
)

// Defines values for EndpointsListParamsO.
const (
	EndpointsListParamsOHost         EndpointsListParamsO = "host"
	EndpointsListParamsOMinusHost    EndpointsListParamsO = "-host"
	EndpointsListParamsOMinusProduct EndpointsListParamsO = "-product"
	EndpointsListParamsOProduct      EndpointsListParamsO = "product"
)

// Defines values for EngagementsListParamsO.
const (
	EngagementsListParamsOCreated          EngagementsListParamsO = "created"
	EngagementsListParamsOLead             EngagementsListParamsO = "lead"
	EngagementsListParamsOMinusCreated     EngagementsListParamsO = "-created"
	EngagementsListParamsOMinusLead        EngagementsListParamsO = "-lead"
	EngagementsListParamsOMinusName        EngagementsListParamsO = "-name"
	EngagementsListParamsOMinusStatus      EngagementsListParamsO = "-status"
	EngagementsListParamsOMinusTargetEnd   EngagementsListParamsO = "-target_end"
	EngagementsListParamsOMinusTargetStart EngagementsListParamsO = "-target_start"
	EngagementsListParamsOMinusUpdated     EngagementsListParamsO = "-updated"
	EngagementsListParamsOMinusVersion     EngagementsListParamsO = "-version"
	EngagementsListParamsOName             EngagementsListParamsO = "name"
	EngagementsListParamsOStatus           EngagementsListParamsO = "status"
	EngagementsListParamsOTargetEnd        EngagementsListParamsO = "target_end"
	EngagementsListParamsOTargetStart      EngagementsListParamsO = "target_start"
	EngagementsListParamsOUpdated          EngagementsListParamsO = "updated"
	EngagementsListParamsOVersion          EngagementsListParamsO = "version"
)

// Defines values for EngagementsListParamsStatus.
const (
	Blocked            EngagementsListParamsStatus = "Blocked"
	Cancelled          EngagementsListParamsStatus = "Cancelled"
	Completed          EngagementsListParamsStatus = "Completed"
	InProgress         EngagementsListParamsStatus = "In Progress"
	NotStarted         EngagementsListParamsStatus = "Not Started"
	OnHold             EngagementsListParamsStatus = "On Hold"
	WaitingForResource EngagementsListParamsStatus = "Waiting for Resource"
)

// Defines values for FindingTemplatesListParamsO.
const (
	FindingTemplatesListParamsOCwe        FindingTemplatesListParamsO = "cwe"
	FindingTemplatesListParamsOMinusCwe   FindingTemplatesListParamsO = "-cwe"
	FindingTemplatesListParamsOMinusTitle FindingTemplatesListParamsO = "-title"
	FindingTemplatesListParamsOTitle      FindingTemplatesListParamsO = "title"
)

// Defines values for FindingsListParamsCreated.
const (
	FindingsListParamsCreatedN1 FindingsListParamsCreated = 1
	FindingsListParamsCreatedN2 FindingsListParamsCreated = 2
	FindingsListParamsCreatedN3 FindingsListParamsCreated = 3
	FindingsListParamsCreatedN4 FindingsListParamsCreated = 4
	FindingsListParamsCreatedN5 FindingsListParamsCreated = 5
	FindingsListParamsCreatedN6 FindingsListParamsCreated = 6
	FindingsListParamsCreatedN7 FindingsListParamsCreated = 7
)

// Defines values for FindingsListParamsDate.
const (
	FindingsListParamsDateN1 FindingsListParamsDate = 1
	FindingsListParamsDateN2 FindingsListParamsDate = 2
	FindingsListParamsDateN3 FindingsListParamsDate = 3
	FindingsListParamsDateN4 FindingsListParamsDate = 4
	FindingsListParamsDateN5 FindingsListParamsDate = 5
	FindingsListParamsDateN6 FindingsListParamsDate = 6
	FindingsListParamsDateN7 FindingsListParamsDate = 7
)

// Defines values for FindingsListParamsJiraChange.
const (
	FindingsListParamsJiraChangeN1 FindingsListParamsJiraChange = 1
	FindingsListParamsJiraChangeN2 FindingsListParamsJiraChange = 2
	FindingsListParamsJiraChangeN3 FindingsListParamsJiraChange = 3
	FindingsListParamsJiraChangeN4 FindingsListParamsJiraChange = 4
	FindingsListParamsJiraChangeN5 FindingsListParamsJiraChange = 5
	FindingsListParamsJiraChangeN6 FindingsListParamsJiraChange = 6
	FindingsListParamsJiraChangeN7 FindingsListParamsJiraChange = 7
)

// Defines values for FindingsListParamsJiraCreation.
const (
	FindingsListParamsJiraCreationN1 FindingsListParamsJiraCreation = 1
	FindingsListParamsJiraCreationN2 FindingsListParamsJiraCreation = 2
	FindingsListParamsJiraCreationN3 FindingsListParamsJiraCreation = 3
	FindingsListParamsJiraCreationN4 FindingsListParamsJiraCreation = 4
	FindingsListParamsJiraCreationN5 FindingsListParamsJiraCreation = 5
	FindingsListParamsJiraCreationN6 FindingsListParamsJiraCreation = 6
	FindingsListParamsJiraCreationN7 FindingsListParamsJiraCreation = 7
)

// Defines values for FindingsListParamsLastReviewed.
const (
	FindingsListParamsLastReviewedN1 FindingsListParamsLastReviewed = 1
	FindingsListParamsLastReviewedN2 FindingsListParamsLastReviewed = 2
	FindingsListParamsLastReviewedN3 FindingsListParamsLastReviewed = 3
	FindingsListParamsLastReviewedN4 FindingsListParamsLastReviewed = 4
	FindingsListParamsLastReviewedN5 FindingsListParamsLastReviewed = 5
	FindingsListParamsLastReviewedN6 FindingsListParamsLastReviewed = 6
	FindingsListParamsLastReviewedN7 FindingsListParamsLastReviewed = 7
)

// Defines values for FindingsListParamsMitigated.
const (
	FindingsListParamsMitigatedN1 FindingsListParamsMitigated = 1
	FindingsListParamsMitigatedN2 FindingsListParamsMitigated = 2
	FindingsListParamsMitigatedN3 FindingsListParamsMitigated = 3
	FindingsListParamsMitigatedN4 FindingsListParamsMitigated = 4
	FindingsListParamsMitigatedN5 FindingsListParamsMitigated = 5
	FindingsListParamsMitigatedN6 FindingsListParamsMitigated = 6
	FindingsListParamsMitigatedN7 FindingsListParamsMitigated = 7
)

// Defines values for FindingsListParamsO.
const (
	FindingsListParamsOActive                         FindingsListParamsO = "active"
	FindingsListParamsOComponentName                  FindingsListParamsO = "component_name"
	FindingsListParamsOComponentVersion               FindingsListParamsO = "component_version"
	FindingsListParamsOCreated                        FindingsListParamsO = "created"
	FindingsListParamsOCve                            FindingsListParamsO = "cve"
	FindingsListParamsOCwe                            FindingsListParamsO = "cwe"
	FindingsListParamsODate                           FindingsListParamsO = "date"
	FindingsListParamsODuplicate                      FindingsListParamsO = "duplicate"
	FindingsListParamsODynamicFinding                 FindingsListParamsO = "dynamic_finding"
	FindingsListParamsOFalseP                         FindingsListParamsO = "false_p"
	FindingsListParamsOFoundBy                        FindingsListParamsO = "found_by"
	FindingsListParamsOId                             FindingsListParamsO = "id"
	FindingsListParamsOIsMitigated                    FindingsListParamsO = "is_mitigated"
	FindingsListParamsOLastReviewed                   FindingsListParamsO = "last_reviewed"
	FindingsListParamsOLastStatusUpdate               FindingsListParamsO = "last_status_update"
	FindingsListParamsOMinusActive                    FindingsListParamsO = "-active"
	FindingsListParamsOMinusComponentName             FindingsListParamsO = "-component_name"
	FindingsListParamsOMinusComponentVersion          FindingsListParamsO = "-component_version"
	FindingsListParamsOMinusCreated                   FindingsListParamsO = "-created"
	FindingsListParamsOMinusCve                       FindingsListParamsO = "-cve"
	FindingsListParamsOMinusCwe                       FindingsListParamsO = "-cwe"
	FindingsListParamsOMinusDate                      FindingsListParamsO = "-date"
	FindingsListParamsOMinusDuplicate                 FindingsListParamsO = "-duplicate"
	FindingsListParamsOMinusDynamicFinding            FindingsListParamsO = "-dynamic_finding"
	FindingsListParamsOMinusFalseP                    FindingsListParamsO = "-false_p"
	FindingsListParamsOMinusFoundBy                   FindingsListParamsO = "-found_by"
	FindingsListParamsOMinusId                        FindingsListParamsO = "-id"
	FindingsListParamsOMinusIsMitigated               FindingsListParamsO = "-is_mitigated"
	FindingsListParamsOMinusLastReviewed              FindingsListParamsO = "-last_reviewed"
	FindingsListParamsOMinusLastStatusUpdate          FindingsListParamsO = "-last_status_update"
	FindingsListParamsOMinusNumericalSeverity         FindingsListParamsO = "-numerical_severity"
	FindingsListParamsOMinusOutOfScope                FindingsListParamsO = "-out_of_scope"
	FindingsListParamsOMinusReviewers                 FindingsListParamsO = "-reviewers"
	FindingsListParamsOMinusSeverity                  FindingsListParamsO = "-severity"
	FindingsListParamsOMinusStaticFinding             FindingsListParamsO = "-static_finding"
	FindingsListParamsOMinusTestEngagementProductName FindingsListParamsO = "-test__engagement__product__name"
	FindingsListParamsOMinusTitle                     FindingsListParamsO = "-title"
	FindingsListParamsOMinusUnderDefectReview         FindingsListParamsO = "-under_defect_review"
	FindingsListParamsOMinusUnderReview               FindingsListParamsO = "-under_review"
	FindingsListParamsOMinusVerified                  FindingsListParamsO = "-verified"
	FindingsListParamsONumericalSeverity              FindingsListParamsO = "numerical_severity"
	FindingsListParamsOOutOfScope                     FindingsListParamsO = "out_of_scope"
	FindingsListParamsOReviewers                      FindingsListParamsO = "reviewers"
	FindingsListParamsOSeverity                       FindingsListParamsO = "severity"
	FindingsListParamsOStaticFinding                  FindingsListParamsO = "static_finding"
	FindingsListParamsOTestEngagementProductName      FindingsListParamsO = "test__engagement__product__name"
	FindingsListParamsOTitle                          FindingsListParamsO = "title"
	FindingsListParamsOUnderDefectReview              FindingsListParamsO = "under_defect_review"
	FindingsListParamsOUnderReview                    FindingsListParamsO = "under_review"
	FindingsListParamsOVerified                       FindingsListParamsO = "verified"
)

// Defines values for FindingsListParamsPrefetch.
const (
	FindingsListParamsPrefetchDefectReviewRequestedBy FindingsListParamsPrefetch = "defect_review_requested_by"
	FindingsListParamsPrefetchDuplicateFinding        FindingsListParamsPrefetch = "duplicate_finding"
	FindingsListParamsPrefetchEndpointStatus          FindingsListParamsPrefetch = "endpoint_status"
	FindingsListParamsPrefetchEndpoints               FindingsListParamsPrefetch = "endpoints"
	FindingsListParamsPrefetchFiles                   FindingsListParamsPrefetch = "files"
	FindingsListParamsPrefetchFindingGroupSet         FindingsListParamsPrefetch = "finding_group_set"
	FindingsListParamsPrefetchFoundBy                 FindingsListParamsPrefetch = "found_by"
	FindingsListParamsPrefetchLastReviewedBy          FindingsListParamsPrefetch = "last_reviewed_by"
	FindingsListParamsPrefetchMitigatedBy             FindingsListParamsPrefetch = "mitigated_by"
	FindingsListParamsPrefetchNotes                   FindingsListParamsPrefetch = "notes"
	FindingsListParamsPrefetchReporter                FindingsListParamsPrefetch = "reporter"
	FindingsListParamsPrefetchReviewRequestedBy       FindingsListParamsPrefetch = "review_requested_by"
	FindingsListParamsPrefetchReviewers               FindingsListParamsPrefetch = "reviewers"
	FindingsListParamsPrefetchRiskAcceptanceSet       FindingsListParamsPrefetch = "risk_acceptance_set"
	FindingsListParamsPrefetchSonarqubeIssue          FindingsListParamsPrefetch = "sonarqube_issue"
	FindingsListParamsPrefetchTest                    FindingsListParamsPrefetch = "test"
	FindingsListParamsPrefetchTestImportSet           FindingsListParamsPrefetch = "test_import_set"
)

// Defines values for FindingsListParamsRiskAcceptance.
const (
	FindingsListParamsRiskAcceptanceN1 FindingsListParamsRiskAcceptance = 1
	FindingsListParamsRiskAcceptanceN2 FindingsListParamsRiskAcceptance = 2
	FindingsListParamsRiskAcceptanceN3 FindingsListParamsRiskAcceptance = 3
)

// Defines values for FindingsAcceptRisksCreateParamsCreated.
const (
	FindingsAcceptRisksCreateParamsCreatedN1 FindingsAcceptRisksCreateParamsCreated = 1
	FindingsAcceptRisksCreateParamsCreatedN2 FindingsAcceptRisksCreateParamsCreated = 2
	FindingsAcceptRisksCreateParamsCreatedN3 FindingsAcceptRisksCreateParamsCreated = 3
	FindingsAcceptRisksCreateParamsCreatedN4 FindingsAcceptRisksCreateParamsCreated = 4
	FindingsAcceptRisksCreateParamsCreatedN5 FindingsAcceptRisksCreateParamsCreated = 5
	FindingsAcceptRisksCreateParamsCreatedN6 FindingsAcceptRisksCreateParamsCreated = 6
	FindingsAcceptRisksCreateParamsCreatedN7 FindingsAcceptRisksCreateParamsCreated = 7
)

// Defines values for FindingsAcceptRisksCreateParamsDate.
const (
	FindingsAcceptRisksCreateParamsDateN1 FindingsAcceptRisksCreateParamsDate = 1
	FindingsAcceptRisksCreateParamsDateN2 FindingsAcceptRisksCreateParamsDate = 2
	FindingsAcceptRisksCreateParamsDateN3 FindingsAcceptRisksCreateParamsDate = 3
	FindingsAcceptRisksCreateParamsDateN4 FindingsAcceptRisksCreateParamsDate = 4
	FindingsAcceptRisksCreateParamsDateN5 FindingsAcceptRisksCreateParamsDate = 5
	FindingsAcceptRisksCreateParamsDateN6 FindingsAcceptRisksCreateParamsDate = 6
	FindingsAcceptRisksCreateParamsDateN7 FindingsAcceptRisksCreateParamsDate = 7
)

// Defines values for FindingsAcceptRisksCreateParamsJiraChange.
const (
	FindingsAcceptRisksCreateParamsJiraChangeN1 FindingsAcceptRisksCreateParamsJiraChange = 1
	FindingsAcceptRisksCreateParamsJiraChangeN2 FindingsAcceptRisksCreateParamsJiraChange = 2
	FindingsAcceptRisksCreateParamsJiraChangeN3 FindingsAcceptRisksCreateParamsJiraChange = 3
	FindingsAcceptRisksCreateParamsJiraChangeN4 FindingsAcceptRisksCreateParamsJiraChange = 4
	FindingsAcceptRisksCreateParamsJiraChangeN5 FindingsAcceptRisksCreateParamsJiraChange = 5
	FindingsAcceptRisksCreateParamsJiraChangeN6 FindingsAcceptRisksCreateParamsJiraChange = 6
	FindingsAcceptRisksCreateParamsJiraChangeN7 FindingsAcceptRisksCreateParamsJiraChange = 7
)

// Defines values for FindingsAcceptRisksCreateParamsJiraCreation.
const (
	FindingsAcceptRisksCreateParamsJiraCreationN1 FindingsAcceptRisksCreateParamsJiraCreation = 1
	FindingsAcceptRisksCreateParamsJiraCreationN2 FindingsAcceptRisksCreateParamsJiraCreation = 2
	FindingsAcceptRisksCreateParamsJiraCreationN3 FindingsAcceptRisksCreateParamsJiraCreation = 3
	FindingsAcceptRisksCreateParamsJiraCreationN4 FindingsAcceptRisksCreateParamsJiraCreation = 4
	FindingsAcceptRisksCreateParamsJiraCreationN5 FindingsAcceptRisksCreateParamsJiraCreation = 5
	FindingsAcceptRisksCreateParamsJiraCreationN6 FindingsAcceptRisksCreateParamsJiraCreation = 6
	FindingsAcceptRisksCreateParamsJiraCreationN7 FindingsAcceptRisksCreateParamsJiraCreation = 7
)

// Defines values for FindingsAcceptRisksCreateParamsLastReviewed.
const (
	FindingsAcceptRisksCreateParamsLastReviewedN1 FindingsAcceptRisksCreateParamsLastReviewed = 1
	FindingsAcceptRisksCreateParamsLastReviewedN2 FindingsAcceptRisksCreateParamsLastReviewed = 2
	FindingsAcceptRisksCreateParamsLastReviewedN3 FindingsAcceptRisksCreateParamsLastReviewed = 3
	FindingsAcceptRisksCreateParamsLastReviewedN4 FindingsAcceptRisksCreateParamsLastReviewed = 4
	FindingsAcceptRisksCreateParamsLastReviewedN5 FindingsAcceptRisksCreateParamsLastReviewed = 5
	FindingsAcceptRisksCreateParamsLastReviewedN6 FindingsAcceptRisksCreateParamsLastReviewed = 6
	FindingsAcceptRisksCreateParamsLastReviewedN7 FindingsAcceptRisksCreateParamsLastReviewed = 7
)

// Defines values for FindingsAcceptRisksCreateParamsMitigated.
const (
	FindingsAcceptRisksCreateParamsMitigatedN1 FindingsAcceptRisksCreateParamsMitigated = 1
	FindingsAcceptRisksCreateParamsMitigatedN2 FindingsAcceptRisksCreateParamsMitigated = 2
	FindingsAcceptRisksCreateParamsMitigatedN3 FindingsAcceptRisksCreateParamsMitigated = 3
	FindingsAcceptRisksCreateParamsMitigatedN4 FindingsAcceptRisksCreateParamsMitigated = 4
	FindingsAcceptRisksCreateParamsMitigatedN5 FindingsAcceptRisksCreateParamsMitigated = 5
	FindingsAcceptRisksCreateParamsMitigatedN6 FindingsAcceptRisksCreateParamsMitigated = 6
	FindingsAcceptRisksCreateParamsMitigatedN7 FindingsAcceptRisksCreateParamsMitigated = 7
)

// Defines values for FindingsAcceptRisksCreateParamsO.
const (
	FindingsAcceptRisksCreateParamsOActive                         FindingsAcceptRisksCreateParamsO = "active"
	FindingsAcceptRisksCreateParamsOComponentName                  FindingsAcceptRisksCreateParamsO = "component_name"
	FindingsAcceptRisksCreateParamsOComponentVersion               FindingsAcceptRisksCreateParamsO = "component_version"
	FindingsAcceptRisksCreateParamsOCreated                        FindingsAcceptRisksCreateParamsO = "created"
	FindingsAcceptRisksCreateParamsOCve                            FindingsAcceptRisksCreateParamsO = "cve"
	FindingsAcceptRisksCreateParamsOCwe                            FindingsAcceptRisksCreateParamsO = "cwe"
	FindingsAcceptRisksCreateParamsODate                           FindingsAcceptRisksCreateParamsO = "date"
	FindingsAcceptRisksCreateParamsODuplicate                      FindingsAcceptRisksCreateParamsO = "duplicate"
	FindingsAcceptRisksCreateParamsODynamicFinding                 FindingsAcceptRisksCreateParamsO = "dynamic_finding"
	FindingsAcceptRisksCreateParamsOFalseP                         FindingsAcceptRisksCreateParamsO = "false_p"
	FindingsAcceptRisksCreateParamsOFoundBy                        FindingsAcceptRisksCreateParamsO = "found_by"
	FindingsAcceptRisksCreateParamsOId                             FindingsAcceptRisksCreateParamsO = "id"
	FindingsAcceptRisksCreateParamsOIsMitigated                    FindingsAcceptRisksCreateParamsO = "is_mitigated"
	FindingsAcceptRisksCreateParamsOLastReviewed                   FindingsAcceptRisksCreateParamsO = "last_reviewed"
	FindingsAcceptRisksCreateParamsOLastStatusUpdate               FindingsAcceptRisksCreateParamsO = "last_status_update"
	FindingsAcceptRisksCreateParamsOMinusActive                    FindingsAcceptRisksCreateParamsO = "-active"
	FindingsAcceptRisksCreateParamsOMinusComponentName             FindingsAcceptRisksCreateParamsO = "-component_name"
	FindingsAcceptRisksCreateParamsOMinusComponentVersion          FindingsAcceptRisksCreateParamsO = "-component_version"
	FindingsAcceptRisksCreateParamsOMinusCreated                   FindingsAcceptRisksCreateParamsO = "-created"
	FindingsAcceptRisksCreateParamsOMinusCve                       FindingsAcceptRisksCreateParamsO = "-cve"
	FindingsAcceptRisksCreateParamsOMinusCwe                       FindingsAcceptRisksCreateParamsO = "-cwe"
	FindingsAcceptRisksCreateParamsOMinusDate                      FindingsAcceptRisksCreateParamsO = "-date"
	FindingsAcceptRisksCreateParamsOMinusDuplicate                 FindingsAcceptRisksCreateParamsO = "-duplicate"
	FindingsAcceptRisksCreateParamsOMinusDynamicFinding            FindingsAcceptRisksCreateParamsO = "-dynamic_finding"
	FindingsAcceptRisksCreateParamsOMinusFalseP                    FindingsAcceptRisksCreateParamsO = "-false_p"
	FindingsAcceptRisksCreateParamsOMinusFoundBy                   FindingsAcceptRisksCreateParamsO = "-found_by"
	FindingsAcceptRisksCreateParamsOMinusId                        FindingsAcceptRisksCreateParamsO = "-id"
	FindingsAcceptRisksCreateParamsOMinusIsMitigated               FindingsAcceptRisksCreateParamsO = "-is_mitigated"
	FindingsAcceptRisksCreateParamsOMinusLastReviewed              FindingsAcceptRisksCreateParamsO = "-last_reviewed"
	FindingsAcceptRisksCreateParamsOMinusLastStatusUpdate          FindingsAcceptRisksCreateParamsO = "-last_status_update"
	FindingsAcceptRisksCreateParamsOMinusNumericalSeverity         FindingsAcceptRisksCreateParamsO = "-numerical_severity"
	FindingsAcceptRisksCreateParamsOMinusOutOfScope                FindingsAcceptRisksCreateParamsO = "-out_of_scope"
	FindingsAcceptRisksCreateParamsOMinusReviewers                 FindingsAcceptRisksCreateParamsO = "-reviewers"
	FindingsAcceptRisksCreateParamsOMinusSeverity                  FindingsAcceptRisksCreateParamsO = "-severity"
	FindingsAcceptRisksCreateParamsOMinusStaticFinding             FindingsAcceptRisksCreateParamsO = "-static_finding"
	FindingsAcceptRisksCreateParamsOMinusTestEngagementProductName FindingsAcceptRisksCreateParamsO = "-test__engagement__product__name"
	FindingsAcceptRisksCreateParamsOMinusTitle                     FindingsAcceptRisksCreateParamsO = "-title"
	FindingsAcceptRisksCreateParamsOMinusUnderDefectReview         FindingsAcceptRisksCreateParamsO = "-under_defect_review"
	FindingsAcceptRisksCreateParamsOMinusUnderReview               FindingsAcceptRisksCreateParamsO = "-under_review"
	FindingsAcceptRisksCreateParamsOMinusVerified                  FindingsAcceptRisksCreateParamsO = "-verified"
	FindingsAcceptRisksCreateParamsONumericalSeverity              FindingsAcceptRisksCreateParamsO = "numerical_severity"
	FindingsAcceptRisksCreateParamsOOutOfScope                     FindingsAcceptRisksCreateParamsO = "out_of_scope"
	FindingsAcceptRisksCreateParamsOReviewers                      FindingsAcceptRisksCreateParamsO = "reviewers"
	FindingsAcceptRisksCreateParamsOSeverity                       FindingsAcceptRisksCreateParamsO = "severity"
	FindingsAcceptRisksCreateParamsOStaticFinding                  FindingsAcceptRisksCreateParamsO = "static_finding"
	FindingsAcceptRisksCreateParamsOTestEngagementProductName      FindingsAcceptRisksCreateParamsO = "test__engagement__product__name"
	FindingsAcceptRisksCreateParamsOTitle                          FindingsAcceptRisksCreateParamsO = "title"
	FindingsAcceptRisksCreateParamsOUnderDefectReview              FindingsAcceptRisksCreateParamsO = "under_defect_review"
	FindingsAcceptRisksCreateParamsOUnderReview                    FindingsAcceptRisksCreateParamsO = "under_review"
	FindingsAcceptRisksCreateParamsOVerified                       FindingsAcceptRisksCreateParamsO = "verified"
)

// Defines values for FindingsAcceptRisksCreateParamsRiskAcceptance.
const (
	FindingsAcceptRisksCreateParamsRiskAcceptanceN1 FindingsAcceptRisksCreateParamsRiskAcceptance = 1
	FindingsAcceptRisksCreateParamsRiskAcceptanceN2 FindingsAcceptRisksCreateParamsRiskAcceptance = 2
	FindingsAcceptRisksCreateParamsRiskAcceptanceN3 FindingsAcceptRisksCreateParamsRiskAcceptance = 3
)

// Defines values for FindingsRetrieveParamsPrefetch.
const (
	FindingsRetrieveParamsPrefetchDefectReviewRequestedBy FindingsRetrieveParamsPrefetch = "defect_review_requested_by"
	FindingsRetrieveParamsPrefetchDuplicateFinding        FindingsRetrieveParamsPrefetch = "duplicate_finding"
	FindingsRetrieveParamsPrefetchEndpointStatus          FindingsRetrieveParamsPrefetch = "endpoint_status"
	FindingsRetrieveParamsPrefetchEndpoints               FindingsRetrieveParamsPrefetch = "endpoints"
	FindingsRetrieveParamsPrefetchFiles                   FindingsRetrieveParamsPrefetch = "files"
	FindingsRetrieveParamsPrefetchFindingGroupSet         FindingsRetrieveParamsPrefetch = "finding_group_set"
	FindingsRetrieveParamsPrefetchFoundBy                 FindingsRetrieveParamsPrefetch = "found_by"
	FindingsRetrieveParamsPrefetchLastReviewedBy          FindingsRetrieveParamsPrefetch = "last_reviewed_by"
	FindingsRetrieveParamsPrefetchMitigatedBy             FindingsRetrieveParamsPrefetch = "mitigated_by"
	FindingsRetrieveParamsPrefetchNotes                   FindingsRetrieveParamsPrefetch = "notes"
	FindingsRetrieveParamsPrefetchReporter                FindingsRetrieveParamsPrefetch = "reporter"
	FindingsRetrieveParamsPrefetchReviewRequestedBy       FindingsRetrieveParamsPrefetch = "review_requested_by"
	FindingsRetrieveParamsPrefetchReviewers               FindingsRetrieveParamsPrefetch = "reviewers"
	FindingsRetrieveParamsPrefetchRiskAcceptanceSet       FindingsRetrieveParamsPrefetch = "risk_acceptance_set"
	FindingsRetrieveParamsPrefetchSonarqubeIssue          FindingsRetrieveParamsPrefetch = "sonarqube_issue"
	FindingsRetrieveParamsPrefetchTest                    FindingsRetrieveParamsPrefetch = "test"
	FindingsRetrieveParamsPrefetchTestImportSet           FindingsRetrieveParamsPrefetch = "test_import_set"
)

// Defines values for LanguagesListParamsPrefetch.
const (
	LanguagesListParamsPrefetchLanguage LanguagesListParamsPrefetch = "language"
	LanguagesListParamsPrefetchProduct  LanguagesListParamsPrefetch = "product"
	LanguagesListParamsPrefetchUser     LanguagesListParamsPrefetch = "user"
)

// Defines values for LanguagesRetrieveParamsPrefetch.
const (
	LanguagesRetrieveParamsPrefetchLanguage LanguagesRetrieveParamsPrefetch = "language"
	LanguagesRetrieveParamsPrefetchProduct  LanguagesRetrieveParamsPrefetch = "product"
	LanguagesRetrieveParamsPrefetchUser     LanguagesRetrieveParamsPrefetch = "user"
)

// Defines values for MetadataListParamsPrefetch.
const (
	MetadataListParamsPrefetchEndpoint MetadataListParamsPrefetch = "endpoint"
	MetadataListParamsPrefetchFinding  MetadataListParamsPrefetch = "finding"
	MetadataListParamsPrefetchProduct  MetadataListParamsPrefetch = "product"
)

// Defines values for MetadataRetrieveParamsPrefetch.
const (
	MetadataRetrieveParamsPrefetchEndpoint MetadataRetrieveParamsPrefetch = "endpoint"
	MetadataRetrieveParamsPrefetchFinding  MetadataRetrieveParamsPrefetch = "finding"
	MetadataRetrieveParamsPrefetchProduct  MetadataRetrieveParamsPrefetch = "product"
)

// Defines values for NotificationsListParamsPrefetch.
const (
	NotificationsListParamsPrefetchProduct NotificationsListParamsPrefetch = "product"
	NotificationsListParamsPrefetchUser    NotificationsListParamsPrefetch = "user"
)

// Defines values for NotificationsRetrieveParamsPrefetch.
const (
	NotificationsRetrieveParamsPrefetchProduct NotificationsRetrieveParamsPrefetch = "product"
	NotificationsRetrieveParamsPrefetchUser    NotificationsRetrieveParamsPrefetch = "user"
)

// Defines values for Oa3SchemaRetrieveParamsFormat.
const (
	Json Oa3SchemaRetrieveParamsFormat = "json"
	Yaml Oa3SchemaRetrieveParamsFormat = "yaml"
)

// Defines values for Oa3SchemaRetrieveParamsLang.
const (
	Oa3SchemaRetrieveParamsLangAf     Oa3SchemaRetrieveParamsLang = "af"
	Oa3SchemaRetrieveParamsLangAr     Oa3SchemaRetrieveParamsLang = "ar"
	Oa3SchemaRetrieveParamsLangArDz   Oa3SchemaRetrieveParamsLang = "ar-dz"
	Oa3SchemaRetrieveParamsLangAst    Oa3SchemaRetrieveParamsLang = "ast"
	Oa3SchemaRetrieveParamsLangAz     Oa3SchemaRetrieveParamsLang = "az"
	Oa3SchemaRetrieveParamsLangBe     Oa3SchemaRetrieveParamsLang = "be"
	Oa3SchemaRetrieveParamsLangBg     Oa3SchemaRetrieveParamsLang = "bg"
	Oa3SchemaRetrieveParamsLangBn     Oa3SchemaRetrieveParamsLang = "bn"
	Oa3SchemaRetrieveParamsLangBr     Oa3SchemaRetrieveParamsLang = "br"
	Oa3SchemaRetrieveParamsLangBs     Oa3SchemaRetrieveParamsLang = "bs"
	Oa3SchemaRetrieveParamsLangCa     Oa3SchemaRetrieveParamsLang = "ca"
	Oa3SchemaRetrieveParamsLangCs     Oa3SchemaRetrieveParamsLang = "cs"
	Oa3SchemaRetrieveParamsLangCy     Oa3SchemaRetrieveParamsLang = "cy"
	Oa3SchemaRetrieveParamsLangDa     Oa3SchemaRetrieveParamsLang = "da"
	Oa3SchemaRetrieveParamsLangDe     Oa3SchemaRetrieveParamsLang = "de"
	Oa3SchemaRetrieveParamsLangDsb    Oa3SchemaRetrieveParamsLang = "dsb"
	Oa3SchemaRetrieveParamsLangEl     Oa3SchemaRetrieveParamsLang = "el"
	Oa3SchemaRetrieveParamsLangEn     Oa3SchemaRetrieveParamsLang = "en"
	Oa3SchemaRetrieveParamsLangEnAu   Oa3SchemaRetrieveParamsLang = "en-au"
	Oa3SchemaRetrieveParamsLangEnGb   Oa3SchemaRetrieveParamsLang = "en-gb"
	Oa3SchemaRetrieveParamsLangEo     Oa3SchemaRetrieveParamsLang = "eo"
	Oa3SchemaRetrieveParamsLangEs     Oa3SchemaRetrieveParamsLang = "es"
	Oa3SchemaRetrieveParamsLangEsAr   Oa3SchemaRetrieveParamsLang = "es-ar"
	Oa3SchemaRetrieveParamsLangEsCo   Oa3SchemaRetrieveParamsLang = "es-co"
	Oa3SchemaRetrieveParamsLangEsMx   Oa3SchemaRetrieveParamsLang = "es-mx"
	Oa3SchemaRetrieveParamsLangEsNi   Oa3SchemaRetrieveParamsLang = "es-ni"
	Oa3SchemaRetrieveParamsLangEsVe   Oa3SchemaRetrieveParamsLang = "es-ve"
	Oa3SchemaRetrieveParamsLangEt     Oa3SchemaRetrieveParamsLang = "et"
	Oa3SchemaRetrieveParamsLangEu     Oa3SchemaRetrieveParamsLang = "eu"
	Oa3SchemaRetrieveParamsLangFa     Oa3SchemaRetrieveParamsLang = "fa"
	Oa3SchemaRetrieveParamsLangFi     Oa3SchemaRetrieveParamsLang = "fi"
	Oa3SchemaRetrieveParamsLangFr     Oa3SchemaRetrieveParamsLang = "fr"
	Oa3SchemaRetrieveParamsLangFy     Oa3SchemaRetrieveParamsLang = "fy"
	Oa3SchemaRetrieveParamsLangGa     Oa3SchemaRetrieveParamsLang = "ga"
	Oa3SchemaRetrieveParamsLangGd     Oa3SchemaRetrieveParamsLang = "gd"
	Oa3SchemaRetrieveParamsLangGl     Oa3SchemaRetrieveParamsLang = "gl"
	Oa3SchemaRetrieveParamsLangHe     Oa3SchemaRetrieveParamsLang = "he"
	Oa3SchemaRetrieveParamsLangHi     Oa3SchemaRetrieveParamsLang = "hi"
	Oa3SchemaRetrieveParamsLangHr     Oa3SchemaRetrieveParamsLang = "hr"
	Oa3SchemaRetrieveParamsLangHsb    Oa3SchemaRetrieveParamsLang = "hsb"
	Oa3SchemaRetrieveParamsLangHu     Oa3SchemaRetrieveParamsLang = "hu"
	Oa3SchemaRetrieveParamsLangHy     Oa3SchemaRetrieveParamsLang = "hy"
	Oa3SchemaRetrieveParamsLangIa     Oa3SchemaRetrieveParamsLang = "ia"
	Oa3SchemaRetrieveParamsLangId     Oa3SchemaRetrieveParamsLang = "id"
	Oa3SchemaRetrieveParamsLangIg     Oa3SchemaRetrieveParamsLang = "ig"
	Oa3SchemaRetrieveParamsLangIo     Oa3SchemaRetrieveParamsLang = "io"
	Oa3SchemaRetrieveParamsLangIs     Oa3SchemaRetrieveParamsLang = "is"
	Oa3SchemaRetrieveParamsLangIt     Oa3SchemaRetrieveParamsLang = "it"
	Oa3SchemaRetrieveParamsLangJa     Oa3SchemaRetrieveParamsLang = "ja"
	Oa3SchemaRetrieveParamsLangKa     Oa3SchemaRetrieveParamsLang = "ka"
	Oa3SchemaRetrieveParamsLangKab    Oa3SchemaRetrieveParamsLang = "kab"
	Oa3SchemaRetrieveParamsLangKk     Oa3SchemaRetrieveParamsLang = "kk"
	Oa3SchemaRetrieveParamsLangKm     Oa3SchemaRetrieveParamsLang = "km"
	Oa3SchemaRetrieveParamsLangKn     Oa3SchemaRetrieveParamsLang = "kn"
	Oa3SchemaRetrieveParamsLangKo     Oa3SchemaRetrieveParamsLang = "ko"
	Oa3SchemaRetrieveParamsLangKy     Oa3SchemaRetrieveParamsLang = "ky"
	Oa3SchemaRetrieveParamsLangLb     Oa3SchemaRetrieveParamsLang = "lb"
	Oa3SchemaRetrieveParamsLangLt     Oa3SchemaRetrieveParamsLang = "lt"
	Oa3SchemaRetrieveParamsLangLv     Oa3SchemaRetrieveParamsLang = "lv"
	Oa3SchemaRetrieveParamsLangMk     Oa3SchemaRetrieveParamsLang = "mk"
	Oa3SchemaRetrieveParamsLangMl     Oa3SchemaRetrieveParamsLang = "ml"
	Oa3SchemaRetrieveParamsLangMn     Oa3SchemaRetrieveParamsLang = "mn"
	Oa3SchemaRetrieveParamsLangMr     Oa3SchemaRetrieveParamsLang = "mr"
	Oa3SchemaRetrieveParamsLangMy     Oa3SchemaRetrieveParamsLang = "my"
	Oa3SchemaRetrieveParamsLangNb     Oa3SchemaRetrieveParamsLang = "nb"
	Oa3SchemaRetrieveParamsLangNe     Oa3SchemaRetrieveParamsLang = "ne"
	Oa3SchemaRetrieveParamsLangNl     Oa3SchemaRetrieveParamsLang = "nl"
	Oa3SchemaRetrieveParamsLangNn     Oa3SchemaRetrieveParamsLang = "nn"
	Oa3SchemaRetrieveParamsLangOs     Oa3SchemaRetrieveParamsLang = "os"
	Oa3SchemaRetrieveParamsLangPa     Oa3SchemaRetrieveParamsLang = "pa"
	Oa3SchemaRetrieveParamsLangPl     Oa3SchemaRetrieveParamsLang = "pl"
	Oa3SchemaRetrieveParamsLangPt     Oa3SchemaRetrieveParamsLang = "pt"
	Oa3SchemaRetrieveParamsLangPtBr   Oa3SchemaRetrieveParamsLang = "pt-br"
	Oa3SchemaRetrieveParamsLangRo     Oa3SchemaRetrieveParamsLang = "ro"
	Oa3SchemaRetrieveParamsLangRu     Oa3SchemaRetrieveParamsLang = "ru"
	Oa3SchemaRetrieveParamsLangSk     Oa3SchemaRetrieveParamsLang = "sk"
	Oa3SchemaRetrieveParamsLangSl     Oa3SchemaRetrieveParamsLang = "sl"
	Oa3SchemaRetrieveParamsLangSq     Oa3SchemaRetrieveParamsLang = "sq"
	Oa3SchemaRetrieveParamsLangSr     Oa3SchemaRetrieveParamsLang = "sr"
	Oa3SchemaRetrieveParamsLangSrLatn Oa3SchemaRetrieveParamsLang = "sr-latn"
	Oa3SchemaRetrieveParamsLangSv     Oa3SchemaRetrieveParamsLang = "sv"
	Oa3SchemaRetrieveParamsLangSw     Oa3SchemaRetrieveParamsLang = "sw"
	Oa3SchemaRetrieveParamsLangTa     Oa3SchemaRetrieveParamsLang = "ta"
	Oa3SchemaRetrieveParamsLangTe     Oa3SchemaRetrieveParamsLang = "te"
	Oa3SchemaRetrieveParamsLangTg     Oa3SchemaRetrieveParamsLang = "tg"
	Oa3SchemaRetrieveParamsLangTh     Oa3SchemaRetrieveParamsLang = "th"
	Oa3SchemaRetrieveParamsLangTk     Oa3SchemaRetrieveParamsLang = "tk"
	Oa3SchemaRetrieveParamsLangTr     Oa3SchemaRetrieveParamsLang = "tr"
	Oa3SchemaRetrieveParamsLangTt     Oa3SchemaRetrieveParamsLang = "tt"
	Oa3SchemaRetrieveParamsLangUdm    Oa3SchemaRetrieveParamsLang = "udm"
	Oa3SchemaRetrieveParamsLangUk     Oa3SchemaRetrieveParamsLang = "uk"
	Oa3SchemaRetrieveParamsLangUr     Oa3SchemaRetrieveParamsLang = "ur"
	Oa3SchemaRetrieveParamsLangUz     Oa3SchemaRetrieveParamsLang = "uz"
	Oa3SchemaRetrieveParamsLangVi     Oa3SchemaRetrieveParamsLang = "vi"
	Oa3SchemaRetrieveParamsLangZhHans Oa3SchemaRetrieveParamsLang = "zh-hans"
	Oa3SchemaRetrieveParamsLangZhHant Oa3SchemaRetrieveParamsLang = "zh-hant"
)

// Defines values for ProductGroupsListParamsPrefetch.
const (
	ProductGroupsListParamsPrefetchGroup   ProductGroupsListParamsPrefetch = "group"
	ProductGroupsListParamsPrefetchProduct ProductGroupsListParamsPrefetch = "product"
	ProductGroupsListParamsPrefetchRole    ProductGroupsListParamsPrefetch = "role"
)

// Defines values for ProductGroupsRetrieveParamsPrefetch.
const (
	ProductGroupsRetrieveParamsPrefetchGroup   ProductGroupsRetrieveParamsPrefetch = "group"
	ProductGroupsRetrieveParamsPrefetchProduct ProductGroupsRetrieveParamsPrefetch = "product"
	ProductGroupsRetrieveParamsPrefetchRole    ProductGroupsRetrieveParamsPrefetch = "role"
)

// Defines values for ProductMembersListParamsPrefetch.
const (
	ProductMembersListParamsPrefetchProduct ProductMembersListParamsPrefetch = "product"
	ProductMembersListParamsPrefetchRole    ProductMembersListParamsPrefetch = "role"
	ProductMembersListParamsPrefetchUser    ProductMembersListParamsPrefetch = "user"
)

// Defines values for ProductMembersRetrieveParamsPrefetch.
const (
	ProductMembersRetrieveParamsPrefetchProduct ProductMembersRetrieveParamsPrefetch = "product"
	ProductMembersRetrieveParamsPrefetchRole    ProductMembersRetrieveParamsPrefetch = "role"
	ProductMembersRetrieveParamsPrefetchUser    ProductMembersRetrieveParamsPrefetch = "user"
)

// Defines values for ProductTypeGroupsListParamsPrefetch.
const (
	ProductTypeGroupsListParamsPrefetchGroup       ProductTypeGroupsListParamsPrefetch = "group"
	ProductTypeGroupsListParamsPrefetchProductType ProductTypeGroupsListParamsPrefetch = "product_type"
	ProductTypeGroupsListParamsPrefetchRole        ProductTypeGroupsListParamsPrefetch = "role"
)

// Defines values for ProductTypeGroupsRetrieveParamsPrefetch.
const (
	ProductTypeGroupsRetrieveParamsPrefetchGroup       ProductTypeGroupsRetrieveParamsPrefetch = "group"
	ProductTypeGroupsRetrieveParamsPrefetchProductType ProductTypeGroupsRetrieveParamsPrefetch = "product_type"
	ProductTypeGroupsRetrieveParamsPrefetchRole        ProductTypeGroupsRetrieveParamsPrefetch = "role"
)

// Defines values for ProductTypeMembersListParamsPrefetch.
const (
	ProductTypeMembersListParamsPrefetchProductType ProductTypeMembersListParamsPrefetch = "product_type"
	ProductTypeMembersListParamsPrefetchRole        ProductTypeMembersListParamsPrefetch = "role"
	ProductTypeMembersListParamsPrefetchUser        ProductTypeMembersListParamsPrefetch = "user"
)

// Defines values for ProductTypeMembersRetrieveParamsPrefetch.
const (
	ProductTypeMembersRetrieveParamsPrefetchProductType ProductTypeMembersRetrieveParamsPrefetch = "product_type"
	ProductTypeMembersRetrieveParamsPrefetchRole        ProductTypeMembersRetrieveParamsPrefetch = "role"
	ProductTypeMembersRetrieveParamsPrefetchUser        ProductTypeMembersRetrieveParamsPrefetch = "user"
)

// Defines values for ProductTypesListParamsPrefetch.
const (
	ProductTypesListParamsPrefetchAuthorizationGroups ProductTypesListParamsPrefetch = "authorization_groups"
	ProductTypesListParamsPrefetchMembers             ProductTypesListParamsPrefetch = "members"
)

// Defines values for ProductTypesRetrieveParamsPrefetch.
const (
	ProductTypesRetrieveParamsPrefetchAuthorizationGroups ProductTypesRetrieveParamsPrefetch = "authorization_groups"
	ProductTypesRetrieveParamsPrefetchMembers             ProductTypesRetrieveParamsPrefetch = "members"
)

// Defines values for ProductsListParamsCreated.
const (
	ProductsListParamsCreatedN1 ProductsListParamsCreated = 1
	ProductsListParamsCreatedN2 ProductsListParamsCreated = 2
	ProductsListParamsCreatedN3 ProductsListParamsCreated = 3
	ProductsListParamsCreatedN4 ProductsListParamsCreated = 4
	ProductsListParamsCreatedN5 ProductsListParamsCreated = 5
	ProductsListParamsCreatedN6 ProductsListParamsCreated = 6
	ProductsListParamsCreatedN7 ProductsListParamsCreated = 7
)

// Defines values for ProductsListParamsO.
const (
	ProductsListParamsOBusinessCriticality            ProductsListParamsO = "business_criticality"
	ProductsListParamsOCreated                        ProductsListParamsO = "created"
	ProductsListParamsOExternalAudience               ProductsListParamsO = "external_audience"
	ProductsListParamsOId                             ProductsListParamsO = "id"
	ProductsListParamsOInternetAccessible             ProductsListParamsO = "internet_accessible"
	ProductsListParamsOLifecycle                      ProductsListParamsO = "lifecycle"
	ProductsListParamsOMinusBusinessCriticality       ProductsListParamsO = "-business_criticality"
	ProductsListParamsOMinusCreated                   ProductsListParamsO = "-created"
	ProductsListParamsOMinusExternalAudience          ProductsListParamsO = "-external_audience"
	ProductsListParamsOMinusId                        ProductsListParamsO = "-id"
	ProductsListParamsOMinusInternetAccessible        ProductsListParamsO = "-internet_accessible"
	ProductsListParamsOMinusLifecycle                 ProductsListParamsO = "-lifecycle"
	ProductsListParamsOMinusName                      ProductsListParamsO = "-name"
	ProductsListParamsOMinusOrigin                    ProductsListParamsO = "-origin"
	ProductsListParamsOMinusPlatform                  ProductsListParamsO = "-platform"
	ProductsListParamsOMinusProdNumericGrade          ProductsListParamsO = "-prod_numeric_grade"
	ProductsListParamsOMinusProdType                  ProductsListParamsO = "-prod_type"
	ProductsListParamsOMinusProdTypeName              ProductsListParamsO = "-prod_type__name"
	ProductsListParamsOMinusProductManager            ProductsListParamsO = "-product_manager"
	ProductsListParamsOMinusProductManagerFirstName   ProductsListParamsO = "-product_manager__first_name"
	ProductsListParamsOMinusProductManagerLastName    ProductsListParamsO = "-product_manager__last_name"
	ProductsListParamsOMinusRevenue                   ProductsListParamsO = "-revenue"
	ProductsListParamsOMinusTeamManager               ProductsListParamsO = "-team_manager"
	ProductsListParamsOMinusTeamManagerFirstName      ProductsListParamsO = "-team_manager__first_name"
	ProductsListParamsOMinusTeamManagerLastName       ProductsListParamsO = "-team_manager__last_name"
	ProductsListParamsOMinusTechnicalContact          ProductsListParamsO = "-technical_contact"
	ProductsListParamsOMinusTechnicalContactFirstName ProductsListParamsO = "-technical_contact__first_name"
	ProductsListParamsOMinusTechnicalContactLastName  ProductsListParamsO = "-technical_contact__last_name"
	ProductsListParamsOMinusTid                       ProductsListParamsO = "-tid"
	ProductsListParamsOMinusUpdated                   ProductsListParamsO = "-updated"
	ProductsListParamsOMinusUserRecords               ProductsListParamsO = "-user_records"
	ProductsListParamsOName                           ProductsListParamsO = "name"
	ProductsListParamsOOrigin                         ProductsListParamsO = "origin"
	ProductsListParamsOPlatform                       ProductsListParamsO = "platform"
	ProductsListParamsOProdNumericGrade               ProductsListParamsO = "prod_numeric_grade"
	ProductsListParamsOProdType                       ProductsListParamsO = "prod_type"
	ProductsListParamsOProdTypeName                   ProductsListParamsO = "prod_type__name"
	ProductsListParamsOProductManager                 ProductsListParamsO = "product_manager"
	ProductsListParamsOProductManagerFirstName        ProductsListParamsO = "product_manager__first_name"
	ProductsListParamsOProductManagerLastName         ProductsListParamsO = "product_manager__last_name"
	ProductsListParamsORevenue                        ProductsListParamsO = "revenue"
	ProductsListParamsOTeamManager                    ProductsListParamsO = "team_manager"
	ProductsListParamsOTeamManagerFirstName           ProductsListParamsO = "team_manager__first_name"
	ProductsListParamsOTeamManagerLastName            ProductsListParamsO = "team_manager__last_name"
	ProductsListParamsOTechnicalContact               ProductsListParamsO = "technical_contact"
	ProductsListParamsOTechnicalContactFirstName      ProductsListParamsO = "technical_contact__first_name"
	ProductsListParamsOTechnicalContactLastName       ProductsListParamsO = "technical_contact__last_name"
	ProductsListParamsOTid                            ProductsListParamsO = "tid"
	ProductsListParamsOUpdated                        ProductsListParamsO = "updated"
	ProductsListParamsOUserRecords                    ProductsListParamsO = "user_records"
)

// Defines values for ProductsListParamsPrefetch.
const (
	ProductsListParamsPrefetchAuthorizationGroups ProductsListParamsPrefetch = "authorization_groups"
	ProductsListParamsPrefetchMembers             ProductsListParamsPrefetch = "members"
	ProductsListParamsPrefetchProdType            ProductsListParamsPrefetch = "prod_type"
	ProductsListParamsPrefetchProductManager      ProductsListParamsPrefetch = "product_manager"
	ProductsListParamsPrefetchRegulations         ProductsListParamsPrefetch = "regulations"
	ProductsListParamsPrefetchTeamManager         ProductsListParamsPrefetch = "team_manager"
	ProductsListParamsPrefetchTechnicalContact    ProductsListParamsPrefetch = "technical_contact"
)

// Defines values for ProductsListParamsUpdated.
const (
	ProductsListParamsUpdatedN1 ProductsListParamsUpdated = 1
	ProductsListParamsUpdatedN2 ProductsListParamsUpdated = 2
	ProductsListParamsUpdatedN3 ProductsListParamsUpdated = 3
	ProductsListParamsUpdatedN4 ProductsListParamsUpdated = 4
	ProductsListParamsUpdatedN5 ProductsListParamsUpdated = 5
	ProductsListParamsUpdatedN6 ProductsListParamsUpdated = 6
	ProductsListParamsUpdatedN7 ProductsListParamsUpdated = 7
)

// Defines values for ProductsRetrieveParamsPrefetch.
const (
	ProductsRetrieveParamsPrefetchAuthorizationGroups ProductsRetrieveParamsPrefetch = "authorization_groups"
	ProductsRetrieveParamsPrefetchMembers             ProductsRetrieveParamsPrefetch = "members"
	ProductsRetrieveParamsPrefetchProdType            ProductsRetrieveParamsPrefetch = "prod_type"
	ProductsRetrieveParamsPrefetchProductManager      ProductsRetrieveParamsPrefetch = "product_manager"
	ProductsRetrieveParamsPrefetchRegulations         ProductsRetrieveParamsPrefetch = "regulations"
	ProductsRetrieveParamsPrefetchTeamManager         ProductsRetrieveParamsPrefetch = "team_manager"
	ProductsRetrieveParamsPrefetchTechnicalContact    ProductsRetrieveParamsPrefetch = "technical_contact"
)

// Defines values for TestImportsListParamsPrefetch.
const (
	TestImportsListParamsPrefetchFindingsAffected TestImportsListParamsPrefetch = "findings_affected"
	TestImportsListParamsPrefetchTest             TestImportsListParamsPrefetch = "test"
)

// Defines values for TestImportsListParamsTestImportFindingActionAction.
const (
	C TestImportsListParamsTestImportFindingActionAction = "C"
	N TestImportsListParamsTestImportFindingActionAction = "N"
	R TestImportsListParamsTestImportFindingActionAction = "R"
	U TestImportsListParamsTestImportFindingActionAction = "U"
)

// Defines values for TestImportsRetrieveParamsPrefetch.
const (
	TestImportsRetrieveParamsPrefetchFindingsAffected TestImportsRetrieveParamsPrefetch = "findings_affected"
	TestImportsRetrieveParamsPrefetchTest             TestImportsRetrieveParamsPrefetch = "test"
)

// Defines values for TestsListParamsO.
const (
	TestsListParamsOApiScanConfiguration      TestsListParamsO = "api_scan_configuration"
	TestsListParamsOBranchTag                 TestsListParamsO = "branch_tag"
	TestsListParamsOBuildId                   TestsListParamsO = "build_id"
	TestsListParamsOCommitHash                TestsListParamsO = "commit_hash"
	TestsListParamsOCreated                   TestsListParamsO = "created"
	TestsListParamsOEngagement                TestsListParamsO = "engagement"
	TestsListParamsOLead                      TestsListParamsO = "lead"
	TestsListParamsOMinusApiScanConfiguration TestsListParamsO = "-api_scan_configuration"
	TestsListParamsOMinusBranchTag            TestsListParamsO = "-branch_tag"
	TestsListParamsOMinusBuildId              TestsListParamsO = "-build_id"
	TestsListParamsOMinusCommitHash           TestsListParamsO = "-commit_hash"
	TestsListParamsOMinusCreated              TestsListParamsO = "-created"
	TestsListParamsOMinusEngagement           TestsListParamsO = "-engagement"
	TestsListParamsOMinusLead                 TestsListParamsO = "-lead"
	TestsListParamsOMinusTargetEnd            TestsListParamsO = "-target_end"
	TestsListParamsOMinusTargetStart          TestsListParamsO = "-target_start"
	TestsListParamsOMinusTestType             TestsListParamsO = "-test_type"
	TestsListParamsOMinusTitle                TestsListParamsO = "-title"
	TestsListParamsOMinusUpdated              TestsListParamsO = "-updated"
	TestsListParamsOMinusVersion              TestsListParamsO = "-version"
	TestsListParamsOTargetEnd                 TestsListParamsO = "target_end"
	TestsListParamsOTargetStart               TestsListParamsO = "target_start"
	TestsListParamsOTestType                  TestsListParamsO = "test_type"
	TestsListParamsOTitle                     TestsListParamsO = "title"
	TestsListParamsOUpdated                   TestsListParamsO = "updated"
	TestsListParamsOVersion                   TestsListParamsO = "version"
)

// Defines values for ToolConfigurationsListParamsAuthenticationType.
const (
	API      ToolConfigurationsListParamsAuthenticationType = "API"
	Password ToolConfigurationsListParamsAuthenticationType = "Password"
	SSH      ToolConfigurationsListParamsAuthenticationType = "SSH"
)

// Defines values for UserContactInfosListParamsPrefetch.
const (
	UserContactInfosListParamsPrefetchUser UserContactInfosListParamsPrefetch = "user"
)

// Defines values for UserContactInfosRetrieveParamsPrefetch.
const (
	UserContactInfosRetrieveParamsPrefetchUser UserContactInfosRetrieveParamsPrefetch = "user"
)

// AcceptedRisk defines model for AcceptedRisk.
type AcceptedRisk struct {
	// AcceptedBy Name or email of person who accepts the risk
	AcceptedBy string `json:"accepted_by"`

	// Cve CVE or vulnerability id to accept findings for
	Cve string `json:"cve"`

	// Justification Justification for accepting findings with this CVE
	Justification string `json:"justification"`
}

// AddNewFileOption defines model for AddNewFileOption.
type AddNewFileOption struct {
	File  string `json:"file"`
	Id    *int   `json:"id,omitempty"`
	Title string `json:"title"`
}

// AddNewNoteOption defines model for AddNewNoteOption.
type AddNewNoteOption struct {
	Entry    string `json:"entry"`
	NoteType *int   `json:"note_type"`
	Private  *bool  `json:"private,omitempty"`
}

// AppAnalysis defines model for AppAnalysis.
type AppAnalysis struct {
	Confidence   *int       `json:"confidence"`
	Created      *time.Time `json:"created,omitempty"`
	Icon         *string    `json:"icon"`
	Id           *int       `json:"id,omitempty"`
	Name         string     `json:"name"`
	Product      int        `json:"product"`
	Tags         *[]string  `json:"tags,omitempty"`
	User         int        `json:"user"`
	Version      *string    `json:"version"`
	Website      *string    `json:"website"`
	WebsiteFound *string    `json:"website_found"`
}

// AuthToken defines model for AuthToken.
type AuthToken struct {
	Password *string `json:"password,omitempty"`
	Token    *string `json:"token,omitempty"`
	Username *string `json:"username,omitempty"`
}

// BurpRawRequestResponse defines model for BurpRawRequestResponse.
type BurpRawRequestResponse struct {
	ReqResp []map[string]string `json:"req_resp"`
}

// DeltaStatistics defines model for DeltaStatistics.
type DeltaStatistics struct {
	Closed        SeverityStatusStatistics `json:"closed"`
	Created       SeverityStatusStatistics `json:"created"`
	LeftUntouched SeverityStatusStatistics `json:"left untouched"`
	Reactivated   SeverityStatusStatistics `json:"reactivated"`
}

// DevelopmentEnvironment defines model for DevelopmentEnvironment.
type DevelopmentEnvironment struct {
	Id   *int   `json:"id,omitempty"`
	Name string `json:"name"`
}

// DojoGroup defines model for DojoGroup.
type DojoGroup struct {
	Description *string `json:"description"`
	Id          *int    `json:"id,omitempty"`
	Name        string  `json:"name"`
	Prefetch    *struct {
		ProductGroups     *map[string]Product     `json:"product_groups,omitempty"`
		ProductTypeGroups *map[string]ProductType `json:"product_type_groups,omitempty"`
		Users             *map[string]UserStub    `json:"users,omitempty"`
	} `json:"prefetch,omitempty"`
	Users *[]int `json:"users,omitempty"`
}

// DojoGroupMember defines model for DojoGroupMember.
type DojoGroupMember struct {
	Group    int  `json:"group"`
	Id       *int `json:"id,omitempty"`
	Prefetch *struct {
		Group *map[string]DojoGroup `json:"group,omitempty"`
		Role  *map[string]Role      `json:"role,omitempty"`
		User  *map[string]UserStub  `json:"user,omitempty"`
	} `json:"prefetch,omitempty"`

	// Role This role determines the permissions of the user to manage the group.
	Role int `json:"role"`
	User int `json:"user"`
}

// Endpoint defines model for Endpoint.
type Endpoint struct {
	EndpointParams *[]int `json:"endpoint_params,omitempty"`
	EndpointStatus *[]int `json:"endpoint_status,omitempty"`

	// Fragment The fragment identifier which follows the hash mark. The hash mark should be omitted. For example 'section-13', 'paragraph-2'.
	Fragment *string `json:"fragment"`

	// Host The host name or IP address. It must not include the port number. For example '127.0.0.1', 'localhost', 'yourdomain.com'.
	Host      *string `json:"host"`
	Id        *int    `json:"id,omitempty"`
	Mitigated *bool   `json:"mitigated,omitempty"`

	// Path The location of the resource, it must not start with a '/'. For example endpoint/420/edit
	Path *string `json:"path"`

	// Port The network port associated with the endpoint.
	Port    *int `json:"port"`
	Product *int `json:"product"`

	// Protocol The communication protocol/scheme such as 'http', 'ftp', 'dns', etc.
	Protocol *string `json:"protocol"`

	// Query The query string, the question mark should be omitted.For example 'group=4&team=8'
	Query *string   `json:"query"`
	Tags  *[]string `json:"tags,omitempty"`

	// Userinfo User info as 'alice', 'bob', etc.
	Userinfo *string `json:"userinfo"`
}

// EndpointMetaImporter defines model for EndpointMetaImporter.
type EndpointMetaImporter struct {
	CreateDojoMeta  *bool   `json:"create_dojo_meta,omitempty"`
	CreateEndpoints *bool   `json:"create_endpoints,omitempty"`
	CreateTags      *bool   `json:"create_tags,omitempty"`
	File            string  `json:"file"`
	Product         *int    `json:"product,omitempty"`
	ProductId       *int    `json:"product_id,omitempty"`
	ProductName     *string `json:"product_name,omitempty"`
}

// EndpointStatus defines model for EndpointStatus.
type EndpointStatus struct {
	Date          *time.Time `json:"date,omitempty"`
	Endpoint      *int       `json:"endpoint"`
	FalsePositive *bool      `json:"false_positive,omitempty"`
	Finding       *int       `json:"finding"`
	Id            *int       `json:"id,omitempty"`
	LastModified  *time.Time `json:"last_modified,omitempty"`
	Mitigated     *bool      `json:"mitigated,omitempty"`
	MitigatedBy   *int       `json:"mitigated_by"`
	MitigatedTime *time.Time `json:"mitigated_time,omitempty"`
	OutOfScope    *bool      `json:"out_of_scope,omitempty"`
	RiskAccepted  *bool      `json:"risk_accepted,omitempty"`
}

// Engagement defines model for Engagement.
type Engagement struct {
	Active  *bool `json:"active,omitempty"`
	ApiTest *bool `json:"api_test,omitempty"`

	// BranchTag Tag or branch of the product the engagement tested.
	BranchTag *string `json:"branch_tag"`

	// BuildId Build ID of the product the engagement tested.
	BuildId *string `json:"build_id"`

	// BuildServer Build server responsible for CI/CD test
	BuildServer *int  `json:"build_server"`
	CheckList   *bool `json:"check_list,omitempty"`

	// CommitHash Commit hash from repo
	CommitHash *string    `json:"commit_hash"`
	Created    *time.Time `json:"created,omitempty"`

	// DeduplicationOnEngagement If enabled deduplication will only mark a finding in this engagement as duplicate of another finding if both findings are in this engagement. If disabled, deduplication is on the product level.
	DeduplicationOnEngagement *bool                     `json:"deduplication_on_engagement,omitempty"`
	Description               *string                   `json:"description"`
	DoneTesting               *bool                     `json:"done_testing,omitempty"`
	EngagementType            *EngagementEngagementType `json:"engagement_type"`
	Files                     *[]File                   `json:"files,omitempty"`
	FirstContacted            *openapi_types.Date       `json:"first_contacted"`
	Id                        *int                      `json:"id,omitempty"`
	Lead                      *int                      `json:"lead"`
	Name                      *string                   `json:"name"`
	Notes                     *[]Note                   `json:"notes,omitempty"`

	// OrchestrationEngine Orchestration service responsible for CI/CD test
	OrchestrationEngine *int  `json:"orchestration_engine"`
	PenTest             *bool `json:"pen_test,omitempty"`

	// Preset Settings and notes for performing this engagement.
	Preset         *int    `json:"preset"`
	Product        int     `json:"product"`
	Progress       *string `json:"progress,omitempty"`
	Reason         *string `json:"reason"`
	ReportType     *int    `json:"report_type"`
	Requester      *int    `json:"requester"`
	RiskAcceptance *[]int  `json:"risk_acceptance,omitempty"`

	// SourceCodeManagementServer Source code server for CI/CD test
	SourceCodeManagementServer *int `json:"source_code_management_server"`

	// SourceCodeManagementUri Resource link to source code
	SourceCodeManagementUri *string            `json:"source_code_management_uri"`
	Status                  *EngagementStatus  `json:"status"`
	Tags                    *[]string          `json:"tags,omitempty"`
	TargetEnd               openapi_types.Date `json:"target_end"`
	TargetStart             openapi_types.Date `json:"target_start"`
	TestStrategy            *string            `json:"test_strategy"`
	ThreatModel             *bool              `json:"threat_model,omitempty"`
	TmodelPath              *string            `json:"tmodel_path,omitempty"`

	// Tracker Link to epic or ticket system with changes to version.
	Tracker *string    `json:"tracker"`
	Updated *time.Time `json:"updated,omitempty"`

	// Version Version of the product the engagement tested.
	Version *string `json:"version"`
}

// EngagementEngagementType defines model for Engagement.EngagementType.
type EngagementEngagementType string

// EngagementStatus defines model for Engagement.Status.
type EngagementStatus string

// EngagementPresets defines model for EngagementPresets.
type EngagementPresets struct {
	Created          *time.Time `json:"created,omitempty"`
	Id               *int       `json:"id,omitempty"`
	NetworkLocations *[]int     `json:"network_locations,omitempty"`

	// Notes Description of what needs to be tested or setting up environment for testing
	Notes   *string `json:"notes"`
	Product int     `json:"product"`

	// Scope Scope of Engagement testing, IP's/Resources/URL's)
	Scope    *string `json:"scope,omitempty"`
	TestType *[]int  `json:"test_type,omitempty"`

	// Title Brief description of preset.
	Title *string `json:"title,omitempty"`
}

// EngagementToFiles defines model for EngagementToFiles.
type EngagementToFiles struct {
	EngagementId *int   `json:"engagement_id"`
	Files        []File `json:"files"`
}

// EngagementToNotes defines model for EngagementToNotes.
type EngagementToNotes struct {
	EngagementId *int   `json:"engagement_id"`
	Notes        []Note `json:"notes"`
}

// ExecutiveSummary defines model for ExecutiveSummary.
type ExecutiveSummary struct {
	EngagementName        string             `json:"engagement_name"`
	EngagementTargetEnd   openapi_types.Date `json:"engagement_target_end"`
	EngagementTargetStart openapi_types.Date `json:"engagement_target_start"`
	TestEnvironmentName   string             `json:"test_environment_name"`
	TestStrategyRef       string             `json:"test_strategy_ref"`
	TestTargetEnd         time.Time          `json:"test_target_end"`
	TestTargetStart       time.Time          `json:"test_target_start"`
	TestTypeName          string             `json:"test_type_name"`
	TotalFindings         int                `json:"total_findings"`
}

// File defines model for File.
type File struct {
	File  string `json:"file"`
	Id    *int   `json:"id,omitempty"`
	Title string `json:"title"`
}

// Finding defines model for Finding.
type Finding struct {
	AcceptedRisks *[]RiskAcceptance `json:"accepted_risks,omitempty"`

	// Active Denotes if this flaw is active or not.
	Active *bool `json:"active,omitempty"`
	Age    *int  `json:"age,omitempty"`

	// ComponentName Name of the affected component (library name, part of a system, ...).
	ComponentName *string `json:"component_name"`

	// ComponentVersion Version of the affected component.
	ComponentVersion *string `json:"component_version"`

	// Created The date the finding was created inside DefectDojo.
	Created *time.Time `json:"created,omitempty"`

	// Cve The Common Vulnerabilities and Exposures (CVE) associated with this flaw.
	Cve *string `json:"cve"`

	// Cvssv3 Common Vulnerability Scoring System version 3 (CVSSv3) score associated with this flaw.
	Cvssv3 *string `json:"cvssv3"`

	// Cvssv3Score Numerical CVSSv3 score for the vulnerability. If the vector is given, the score is updated while saving the finding
	Cvssv3Score *float32 `json:"cvssv3_score"`

	// Cwe The CWE number associated with this flaw.
	Cwe *int `json:"cwe"`

	// Date The date the flaw was discovered.
	Date *openapi_types.Date `json:"date,omitempty"`

	// DefectReviewRequestedBy Documents who requested a defect review for this flaw.
	DefectReviewRequestedBy *int `json:"defect_review_requested_by"`

	// Description Longer more descriptive information about the flaw.
	Description   string  `json:"description"`
	DisplayStatus *string `json:"display_status,omitempty"`

	// Duplicate Denotes if this flaw is a duplicate of other flaws reported.
	Duplicate *bool `json:"duplicate,omitempty"`

	// DuplicateFinding Link to the original finding if this finding is a duplicate.
	DuplicateFinding *int `json:"duplicate_finding,omitempty"`

	// DynamicFinding Flaw has been detected from a Dynamic Application Security Testing tool (DAST).
	DynamicFinding *bool `json:"dynamic_finding,omitempty"`

	// EndpointStatus The status of the endpoint associated with this flaw (Vulnerable, Mitigated, ...).
	EndpointStatus *[]int `json:"endpoint_status,omitempty"`

	// Endpoints The hosts within the product that are susceptible to this flaw.
	Endpoints *[]int `json:"endpoints,omitempty"`

	// FalseP Denotes if this flaw has been deemed a false positive by the tester.
	FalseP *bool `json:"false_p,omitempty"`

	// FilePath Identified file(s) containing the flaw.
	FilePath *string `json:"file_path"`

	// Files Files(s) related to the flaw.
	Files         *[]int          `json:"files,omitempty"`
	FindingGroups *[]FindingGroup `json:"finding_groups,omitempty"`
	FindingMeta   *[]FindingMeta  `json:"finding_meta,omitempty"`

	// FoundBy The name of the scanner that identified the flaw.
	FoundBy *[]int `json:"found_by,omitempty"`

	// HashCode A hash over a configurable set of fields that is used for findings deduplication.
	HashCode *string `json:"hash_code,omitempty"`
	Id       *int    `json:"id,omitempty"`

	// Impact Text describing the impact this flaw has on systems, products, enterprise, etc.
	Impact *string `json:"impact"`

	// IsMitigated Denotes if this flaw has been fixed.
	IsMitigated  *bool      `json:"is_mitigated,omitempty"`
	JiraChange   *time.Time `json:"jira_change,omitempty"`
	JiraCreation *time.Time `json:"jira_creation,omitempty"`

	// LastReviewed Provides the date the flaw was last 'touched' by a tester.
	LastReviewed *time.Time `json:"last_reviewed,omitempty"`

	// LastReviewedBy Provides the person who last reviewed the flaw.
	LastReviewedBy *int `json:"last_reviewed_by,omitempty"`

	// LastStatusUpdate Timestamp of latest status update (change in status related fields).
	LastStatusUpdate *time.Time `json:"last_status_update,omitempty"`

	// Line Source line number of the attack vector.
	Line *int `json:"line"`

	// Mitigated Denotes if this flaw has been fixed by storing the date it was fixed.
	Mitigated *time.Time `json:"mitigated,omitempty"`

	// MitigatedBy Documents who has marked this flaw as fixed.
	MitigatedBy *int `json:"mitigated_by,omitempty"`

	// Mitigation Text describing how to best fix the flaw.
	Mitigation *string `json:"mitigation"`

	// NbOccurences Number of occurences in the source tool when several vulnerabilites were found and aggregated by the scanner.
	NbOccurences *int    `json:"nb_occurences"`
	Notes        *[]Note `json:"notes,omitempty"`

	// NumericalSeverity The numerical representation of the severity (S0, S1, S2, S3, S4).
	NumericalSeverity string `json:"numerical_severity"`

	// OutOfScope Denotes if this flaw falls outside the scope of the test and/or engagement.
	OutOfScope *bool `json:"out_of_scope,omitempty"`

	// Param Parameter used to trigger the issue (DAST).
	Param *string `json:"param,omitempty"`

	// Payload Payload used to attack the service / application and trigger the bug / problem.
	Payload  *string `json:"payload,omitempty"`
	Prefetch *struct {
		DefectReviewRequestedBy *map[string]UserStub       `json:"defect_review_requested_by,omitempty"`
		DuplicateFinding        *map[string]Finding        `json:"duplicate_finding,omitempty"`
		EndpointStatus          *map[string]EndpointStatus `json:"endpoint_status,omitempty"`
		Endpoints               *map[string]Endpoint       `json:"endpoints,omitempty"`
		Files                   *map[string]File           `json:"files,omitempty"`
		FindingGroupSet         *map[string]FindingGroup   `json:"finding_group_set,omitempty"`
		FoundBy                 *map[string]TestType       `json:"found_by,omitempty"`
		LastReviewedBy          *map[string]UserStub       `json:"last_reviewed_by,omitempty"`
		MitigatedBy             *map[string]UserStub       `json:"mitigated_by,omitempty"`
		Notes                   *map[string]Note           `json:"notes,omitempty"`
		Reporter                *map[string]UserStub       `json:"reporter,omitempty"`
		ReviewRequestedBy       *map[string]UserStub       `json:"review_requested_by,omitempty"`
		Reviewers               *map[string]UserStub       `json:"reviewers,omitempty"`
		RiskAcceptanceSet       *map[string]RiskAcceptance `json:"risk_acceptance_set,omitempty"`
		SonarqubeIssue          *map[string]SonarqubeIssue `json:"sonarqube_issue,omitempty"`
		Test                    *map[string]Test           `json:"test,omitempty"`
		TestImportSet           *map[string]TestImport     `json:"test_import_set,omitempty"`
	} `json:"prefetch,omitempty"`

	// PublishDate Date when this vulnerability was made publicly available.
	PublishDate *openapi_types.Date `json:"publish_date"`
	PushToJira  *bool               `json:"push_to_jira,omitempty"`

	// References The external documentation available for this flaw.
	References    *string               `json:"references"`
	RelatedFields *FindingRelatedFields `json:"related_fields,omitempty"`

	// Reporter Documents who reported the flaw.
	Reporter        *int                    `json:"reporter,omitempty"`
	RequestResponse *BurpRawRequestResponse `json:"request_response,omitempty"`

	// ReviewRequestedBy Documents who requested a review for this finding.
	ReviewRequestedBy *int `json:"review_requested_by"`

	// Reviewers Documents who reviewed the flaw.
	Reviewers *[]int `json:"reviewers,omitempty"`

	// RiskAccepted Denotes if this finding has been marked as an accepted risk.
	RiskAccepted *bool `json:"risk_accepted,omitempty"`

	// SastSinkObject Sink object (variable, function...) of the attack vector.
	SastSinkObject *string `json:"sast_sink_object"`

	// SastSourceFilePath Source file path of the attack vector.
	SastSourceFilePath *string `json:"sast_source_file_path"`

	// SastSourceLine Source line number of the attack vector.
	SastSourceLine *int `json:"sast_source_line"`

	// SastSourceObject Source object (variable, function...) of the attack vector.
	SastSourceObject *string `json:"sast_source_object"`

	// ScannerConfidence Confidence level of vulnerability which is supplied by the scanner.
	ScannerConfidence *int `json:"scanner_confidence,omitempty"`

	// Service A service is a self-contained piece of functionality within a Product. This is an optional field which is used in deduplication of findings when set.
	Service *string `json:"service"`

	// Severity The severity level of this flaw (Critical, High, Medium, Low, Informational).
	Severity string `json:"severity"`

	// SeverityJustification Text describing why a certain severity was associated with this flaw.
	SeverityJustification *string `json:"severity_justification"`
	SlaDaysRemaining      *int    `json:"sla_days_remaining,omitempty"`

	// SlaStartDate (readonly)The date used as start date for SLA calculation. Set by expiring risk acceptances. Empty by default, causing a fallback to 'date'.
	SlaStartDate *openapi_types.Date `json:"sla_start_date"`

	// SonarqubeIssue The SonarQube issue associated with this finding.
	SonarqubeIssue *int `json:"sonarqube_issue"`

	// StaticFinding Flaw has been detected from a Static Application Security Testing tool (SAST).
	StaticFinding *bool `json:"static_finding,omitempty"`

	// StepsToReproduce Text describing the steps that must be followed in order to reproduce the flaw / bug.
	StepsToReproduce *string   `json:"steps_to_reproduce"`
	Tags             *[]string `json:"tags,omitempty"`

	// Test The test that is associated with this flaw.
	Test     *int `json:"test,omitempty"`
	ThreadId *int `json:"thread_id,omitempty"`

	// Title A short description of the flaw.
	Title string `json:"title"`

	// UnderDefectReview Denotes if this finding is under defect review.
	UnderDefectReview *bool `json:"under_defect_review,omitempty"`

	// UnderReview Denotes is this flaw is currently being reviewed.
	UnderReview *bool `json:"under_review,omitempty"`

	// UniqueIdFromTool Vulnerability technical id from the source tool. Allows to track unique vulnerabilities.
	UniqueIdFromTool *string `json:"unique_id_from_tool"`

	// Url External reference that provides more information about this flaw.
	Url *string `json:"url,omitempty"`

	// Verified Denotes if this flaw has been manually verified by the tester.
	Verified *bool `json:"verified,omitempty"`

	// VulnIdFromTool Non-unique technical id from the source tool associated with the vulnerability type.
	VulnIdFromTool *string `json:"vuln_id_from_tool"`
}

// FindingCreate defines model for FindingCreate.
type FindingCreate struct {
	// Active Denotes if this flaw is active or not.
	Active bool `json:"active"`

	// ComponentName Name of the affected component (library name, part of a system, ...).
	ComponentName *string `json:"component_name"`

	// ComponentVersion Version of the affected component.
	ComponentVersion *string `json:"component_version"`

	// Created The date the finding was created inside DefectDojo.
	Created *time.Time `json:"created,omitempty"`

	// Cve The Common Vulnerabilities and Exposures (CVE) associated with this flaw.
	Cve *string `json:"cve"`

	// Cvssv3 Common Vulnerability Scoring System version 3 (CVSSv3) score associated with this flaw.
	Cvssv3 *string `json:"cvssv3"`

	// Cvssv3Score Numerical CVSSv3 score for the vulnerability. If the vector is given, the score is updated while saving the finding
	Cvssv3Score *float32 `json:"cvssv3_score"`

	// Cwe The CWE number associated with this flaw.
	Cwe *int `json:"cwe"`

	// Date The date the flaw was discovered.
	Date *openapi_types.Date `json:"date,omitempty"`

	// DefectReviewRequestedBy Documents who requested a defect review for this flaw.
	DefectReviewRequestedBy *int `json:"defect_review_requested_by"`

	// Description Longer more descriptive information about the flaw.
	Description string `json:"description"`

	// Duplicate Denotes if this flaw is a duplicate of other flaws reported.
	Duplicate *bool `json:"duplicate,omitempty"`

	// DuplicateFinding Link to the original finding if this finding is a duplicate.
	DuplicateFinding *int `json:"duplicate_finding,omitempty"`

	// DynamicFinding Flaw has been detected from a Dynamic Application Security Testing tool (DAST).
	DynamicFinding *bool `json:"dynamic_finding,omitempty"`

	// EndpointStatus The status of the endpoint associated with this flaw (Vulnerable, Mitigated, ...).
	EndpointStatus *[]int `json:"endpoint_status,omitempty"`

	// Endpoints The hosts within the product that are susceptible to this flaw.
	Endpoints *[]int `json:"endpoints,omitempty"`

	// FalseP Denotes if this flaw has been deemed a false positive by the tester.
	FalseP *bool `json:"false_p,omitempty"`

	// FilePath Identified file(s) containing the flaw.
	FilePath *string `json:"file_path"`

	// Files Files(s) related to the flaw.
	Files   *[]int `json:"files,omitempty"`
	FoundBy []int  `json:"found_by"`

	// HashCode A hash over a configurable set of fields that is used for findings deduplication.
	HashCode *string `json:"hash_code,omitempty"`
	Id       *int    `json:"id,omitempty"`

	// Impact Text describing the impact this flaw has on systems, products, enterprise, etc.
	Impact *string `json:"impact"`

	// IsMitigated Denotes if this flaw has been fixed.
	IsMitigated *bool `json:"is_mitigated,omitempty"`

	// LastReviewed Provides the date the flaw was last 'touched' by a tester.
	LastReviewed *time.Time `json:"last_reviewed,omitempty"`

	// LastReviewedBy Provides the person who last reviewed the flaw.
	LastReviewedBy *int `json:"last_reviewed_by,omitempty"`

	// LastStatusUpdate Timestamp of latest status update (change in status related fields).
	LastStatusUpdate *time.Time `json:"last_status_update,omitempty"`

	// Line Source line number of the attack vector.
	Line *int `json:"line"`

	// Mitigated Denotes if this flaw has been fixed by storing the date it was fixed.
	Mitigated *time.Time `json:"mitigated,omitempty"`

	// MitigatedBy Documents who has marked this flaw as fixed.
	MitigatedBy *int `json:"mitigated_by,omitempty"`

	// Mitigation Text describing how to best fix the flaw.
	Mitigation *string `json:"mitigation"`

	// NbOccurences Number of occurences in the source tool when several vulnerabilites were found and aggregated by the scanner.
	NbOccurences *int   `json:"nb_occurences"`
	Notes        *[]int `json:"notes,omitempty"`

	// NumericalSeverity The numerical representation of the severity (S0, S1, S2, S3, S4).
	NumericalSeverity string `json:"numerical_severity"`

	// OutOfScope Denotes if this flaw falls outside the scope of the test and/or engagement.
	OutOfScope *bool `json:"out_of_scope,omitempty"`

	// Param Parameter used to trigger the issue (DAST).
	Param *string `json:"param,omitempty"`

	// Payload Payload used to attack the service / application and trigger the bug / problem.
	Payload *string `json:"payload,omitempty"`

	// PublishDate Date when this vulnerability was made publicly available.
	PublishDate *openapi_types.Date `json:"publish_date"`
	PushToJira  *bool               `json:"push_to_jira,omitempty"`

	// References The external documentation available for this flaw.
	References *string `json:"references"`

	// Reporter Documents who reported the flaw.
	Reporter *int `json:"reporter,omitempty"`

	// ReviewRequestedBy Documents who requested a review for this finding.
	ReviewRequestedBy *int `json:"review_requested_by"`

	// Reviewers Documents who reviewed the flaw.
	Reviewers *[]int `json:"reviewers,omitempty"`

	// RiskAccepted Denotes if this finding has been marked as an accepted risk.
	RiskAccepted *bool `json:"risk_accepted,omitempty"`

	// SastSinkObject Sink object (variable, function...) of the attack vector.
	SastSinkObject *string `json:"sast_sink_object"`

	// SastSourceFilePath Source file path of the attack vector.
	SastSourceFilePath *string `json:"sast_source_file_path"`

	// SastSourceLine Source line number of the attack vector.
	SastSourceLine *int `json:"sast_source_line"`

	// SastSourceObject Source object (variable, function...) of the attack vector.
	SastSourceObject *string `json:"sast_source_object"`

	// ScannerConfidence Confidence level of vulnerability which is supplied by the scanner.
	ScannerConfidence *int `json:"scanner_confidence,omitempty"`

	// Service A service is a self-contained piece of functionality within a Product. This is an optional field which is used in deduplication of findings when set.
	Service *string `json:"service"`

	// Severity The severity level of this flaw (Critical, High, Medium, Low, Informational).
	Severity string `json:"severity"`

	// SeverityJustification Text describing why a certain severity was associated with this flaw.
	SeverityJustification *string `json:"severity_justification"`

	// SlaStartDate (readonly)The date used as start date for SLA calculation. Set by expiring risk acceptances. Empty by default, causing a fallback to 'date'.
	SlaStartDate *openapi_types.Date `json:"sla_start_date"`

	// SonarqubeIssue The SonarQube issue associated with this finding.
	SonarqubeIssue *int `json:"sonarqube_issue"`

	// StaticFinding Flaw has been detected from a Static Application Security Testing tool (SAST).
	StaticFinding *bool `json:"static_finding,omitempty"`

	// StepsToReproduce Text describing the steps that must be followed in order to reproduce the flaw / bug.
	StepsToReproduce *string   `json:"steps_to_reproduce"`
	Tags             *[]string `json:"tags,omitempty"`
	Test             int       `json:"test"`
	ThreadId         *int      `json:"thread_id,omitempty"`

	// Title A short description of the flaw.
	Title string `json:"title"`

	// UnderDefectReview Denotes if this finding is under defect review.
	UnderDefectReview *bool `json:"under_defect_review,omitempty"`

	// UnderReview Denotes is this flaw is currently being reviewed.
	UnderReview *bool `json:"under_review,omitempty"`

	// UniqueIdFromTool Vulnerability technical id from the source tool. Allows to track unique vulnerabilities.
	UniqueIdFromTool *string `json:"unique_id_from_tool"`
	Url              *string `json:"url"`

	// Verified Denotes if this flaw has been manually verified by the tester.
	Verified bool `json:"verified"`

	// VulnIdFromTool Non-unique technical id from the source tool associated with the vulnerability type.
	VulnIdFromTool *string `json:"vuln_id_from_tool"`
}

// FindingEngagement defines model for FindingEngagement.
type FindingEngagement struct {
	// BranchTag Tag or branch of the product the engagement tested.
	BranchTag *string `json:"branch_tag"`

	// BuildId Build ID of the product the engagement tested.
	BuildId *string `json:"build_id"`

	// CommitHash Commit hash from repo
	CommitHash *string         `json:"commit_hash"`
	Id         *int            `json:"id,omitempty"`
	Name       *string         `json:"name"`
	Product    *FindingProduct `json:"product,omitempty"`

	// Version Version of the product the engagement tested.
	Version *string `json:"version"`
}

// FindingEnvironment defines model for FindingEnvironment.
type FindingEnvironment struct {
	Id   *int   `json:"id,omitempty"`
	Name string `json:"name"`
}

// FindingGroup defines model for FindingGroup.
type FindingGroup struct {
	Id        *int       `json:"id,omitempty"`
	JiraIssue *JIRAIssue `json:"jira_issue,omitempty"`
	Name      string     `json:"name"`
	Test      int        `json:"test"`
}

// FindingMeta defines model for FindingMeta.
type FindingMeta struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

// FindingProdType defines model for FindingProdType.
type FindingProdType struct {
	Id   *int   `json:"id,omitempty"`
	Name string `json:"name"`
}

// FindingProduct defines model for FindingProduct.
type FindingProduct struct {
	Id       *int             `json:"id,omitempty"`
	Name     string           `json:"name"`
	ProdType *FindingProdType `json:"prod_type,omitempty"`
}

// FindingRelatedFields defines model for FindingRelatedFields.
type FindingRelatedFields struct {
	Jira *JIRAIssue   `json:"jira,omitempty"`
	Test *FindingTest `json:"test,omitempty"`
}

// FindingTemplate defines model for FindingTemplate.
type FindingTemplate struct {
	Cve               *string    `json:"cve"`
	Cvssv3            *string    `json:"cvssv3"`
	Cwe               *int       `json:"cwe"`
	Description       *string    `json:"description"`
	Id                *int       `json:"id,omitempty"`
	Impact            *string    `json:"impact"`
	LastUsed          *time.Time `json:"last_used,omitempty"`
	Mitigation        *string    `json:"mitigation"`
	NumericalSeverity *string    `json:"numerical_severity,omitempty"`
	References        *string    `json:"references"`
	Severity          *string    `json:"severity"`
	Tags              *[]string  `json:"tags,omitempty"`

	// TemplateMatch Enables this template for matching remediation advice. Match will be applied to all active, verified findings by CWE.
	TemplateMatch *bool `json:"template_match,omitempty"`

	// TemplateMatchTitle Matches by title text (contains search) and CWE.
	TemplateMatchTitle *bool  `json:"template_match_title,omitempty"`
	Title              string `json:"title"`
}

// FindingTest defines model for FindingTest.
type FindingTest struct {
	// BranchTag Tag or branch that was tested, a reimport may update this field.
	BranchTag *string `json:"branch_tag"`

	// BuildId Build ID that was tested, a reimport may update this field.
	BuildId *string `json:"build_id"`

	// CommitHash Commit hash tested, a reimport may update this field.
	CommitHash  *string             `json:"commit_hash"`
	Engagement  *FindingEngagement  `json:"engagement,omitempty"`
	Environment *FindingEnvironment `json:"environment,omitempty"`
	Id          *int                `json:"id,omitempty"`
	TestType    *FindingTestType    `json:"test_type,omitempty"`
	Title       *string             `json:"title"`
	Version     *string             `json:"version"`
}

// FindingTestType defines model for FindingTestType.
type FindingTestType struct {
	Id   *int   `json:"id,omitempty"`
	Name string `json:"name"`
}

// FindingToFiles defines model for FindingToFiles.
type FindingToFiles struct {
	Files     []File `json:"files"`
	FindingId *int   `json:"finding_id"`
}

// FindingToNotes defines model for FindingToNotes.
type FindingToNotes struct {
	FindingId *int   `json:"finding_id"`
	Notes     []Note `json:"notes"`
}

// GlobalRole defines model for GlobalRole.
type GlobalRole struct {
	Group *int `json:"group"`
	Id    *int `json:"id,omitempty"`

	// Role The global role will be applied to all product types and products.
	Role *int `json:"role"`
	User *int `json:"user"`
}

// ImportLanguages defines model for ImportLanguages.
type ImportLanguages struct {
	File    string `json:"file"`
	Product int    `json:"product"`
}

// ImportScan defines model for ImportScan.
type ImportScan struct {
	Active               *bool   `json:"active,omitempty"`
	ApiScanConfiguration *int    `json:"api_scan_configuration"`
	AutoCreateContext    *bool   `json:"auto_create_context,omitempty"`
	BranchTag            *string `json:"branch_tag,omitempty"`
	BuildId              *string `json:"build_id,omitempty"`

	// CloseOldFindings Select if old findings no longer present in the report get closed as mitigated when importing. If service has been set, only the findings for this service will be closed.
	CloseOldFindings *bool   `json:"close_old_findings,omitempty"`
	CommitHash       *string `json:"commit_hash,omitempty"`
	EndpointToAdd    *int    `json:"endpoint_to_add,omitempty"`
	Engagement       *int    `json:"engagement,omitempty"`
	EngagementId     *int    `json:"engagement_id,omitempty"`
	EngagementName   *string `json:"engagement_name,omitempty"`
	Environment      *string `json:"environment,omitempty"`
	File             *string `json:"file,omitempty"`

	// GroupBy Choose an option to automatically group new findings by the chosen option.
	GroupBy         *ImportScanGroupBy         `json:"group_by,omitempty"`
	Lead            *int                       `json:"lead"`
	MinimumSeverity *ImportScanMinimumSeverity `json:"minimum_severity,omitempty"`
	ProductId       *int                       `json:"product_id,omitempty"`
	ProductName     *string                    `json:"product_name,omitempty"`
	ProductTypeId   *int                       `json:"product_type_id,omitempty"`
	ProductTypeName *string                    `json:"product_type_name,omitempty"`
	PushToJira      *bool                      `json:"push_to_jira,omitempty"`
	ScanDate        *openapi_types.Date        `json:"scan_date,omitempty"`
	ScanType        ImportScanScanType         `json:"scan_type"`

	// Service A service is a self-contained piece of functionality within a Product. This is an optional field which is used in deduplication and closing of old findings when set. This affects the whole engagement/product depending on your deduplication scope.
	Service    *string           `json:"service,omitempty"`
	Statistics *ImportStatistics `json:"statistics,omitempty"`
	Tags       *[]string         `json:"tags,omitempty"`
	Test       *int              `json:"test,omitempty"`
	TestId     *int              `json:"test_id,omitempty"`
	TestTitle  *string           `json:"test_title,omitempty"`
	Verified   *bool             `json:"verified,omitempty"`
	Version    *string           `json:"version,omitempty"`
}

// ImportScanGroupBy Choose an option to automatically group new findings by the chosen option.
type ImportScanGroupBy string

// ImportScanMinimumSeverity defines model for ImportScan.MinimumSeverity.
type ImportScanMinimumSeverity string

// ImportScanScanType defines model for ImportScan.ScanType.
type ImportScanScanType string

// ImportStatistics defines model for ImportStatistics.
type ImportStatistics struct {
	// After Finding statistics as stored in Defect Dojo after the import
	After SeverityStatusStatistics `json:"after"`

	// Before Finding statistics as stored in Defect Dojo before the import
	Before *SeverityStatusStatistics `json:"before,omitempty"`

	// Delta Finding statistics of modifications made by the reimport. Only available when TRACK_IMPORT_HISTORY hass not disabled.
	Delta *DeltaStatistics `json:"delta,omitempty"`
}

// JIRAInstance defines model for JIRAInstance.
type JIRAInstance struct {
	// AcceptedMappingResolution JIRA resolution names (comma-separated values) that maps to an Accepted Finding
	AcceptedMappingResolution *string `json:"accepted_mapping_resolution"`

	// CloseStatusKey Transition ID to Close JIRA issues, visit https://<YOUR JIRA URL>/rest/api/latest/issue/<ANY VALID ISSUE KEY>/transitions?expand=transitions.fields to find the ID for your JIRA instance
	CloseStatusKey int `json:"close_status_key"`

	// ConfigurationName Enter a name to give to this configuration
	ConfigurationName *string `json:"configuration_name,omitempty"`

	// CriticalMappingSeverity Maps to the 'Priority' field in Jira. For example: Critical
	CriticalMappingSeverity string `json:"critical_mapping_severity"`

	// DefaultIssueType You can define extra issue types in settings.py
	DefaultIssueType *JIRAInstanceDefaultIssueType `json:"default_issue_type,omitempty"`

	// EpicNameId To obtain the 'Epic name id' visit https://<YOUR JIRA URL>/rest/api/2/field and search for Epic Name. Copy the number out of cf[number] and paste it here.
	EpicNameId int `json:"epic_name_id"`

	// FalsePositiveMappingResolution JIRA resolution names (comma-separated values) that maps to a False Positive Finding
	FalsePositiveMappingResolution *string `json:"false_positive_mapping_resolution"`

	// FindingText Additional text that will be added to the finding in Jira. For example including how the finding was created or who to contact for more information.
	FindingText *string `json:"finding_text"`

	// GlobalJiraSlaNotification This setting can be overidden at the Product level
	GlobalJiraSlaNotification *bool `json:"global_jira_sla_notification,omitempty"`

	// HighMappingSeverity Maps to the 'Priority' field in Jira. For example: High
	HighMappingSeverity string `json:"high_mapping_severity"`
	Id                  *int   `json:"id,omitempty"`

	// InfoMappingSeverity Maps to the 'Priority' field in Jira. For example: Info
	InfoMappingSeverity string `json:"info_mapping_severity"`

	// IssueTemplateDir Choose the folder containing the Django templates used to render the JIRA issue description. These are stored in dojo/templates/issue-trackers. Leave empty to use the default jira_full templates.
	IssueTemplateDir *string `json:"issue_template_dir"`

	// LowMappingSeverity Maps to the 'Priority' field in Jira. For example: Low
	LowMappingSeverity string `json:"low_mapping_severity"`

	// MediumMappingSeverity Maps to the 'Priority' field in Jira. For example: Medium
	MediumMappingSeverity string `json:"medium_mapping_severity"`

	// OpenStatusKey Transition ID to Re-Open JIRA issues, visit https://<YOUR JIRA URL>/rest/api/latest/issue/<ANY VALID ISSUE KEY>/transitions?expand=transitions.fields to find the ID for your JIRA instance
	OpenStatusKey int     `json:"open_status_key"`
	Password      *string `json:"password,omitempty"`

	// Url For more information how to configure Jira, read the DefectDojo documentation.
	Url      string `json:"url"`
	Username string `json:"username"`
}

// JIRAInstanceDefaultIssueType You can define extra issue types in settings.py
type JIRAInstanceDefaultIssueType string

// JIRAIssue defines model for JIRAIssue.
type JIRAIssue struct {
	Engagement   *int `json:"engagement"`
	Finding      *int `json:"finding"`
	FindingGroup *int `json:"finding_group"`
	Id           *int `json:"id,omitempty"`

	// JiraChange The date the linked Jira issue was last modified.
	JiraChange *time.Time `json:"jira_change"`

	// JiraCreation The date a Jira issue was created from this finding.
	JiraCreation *time.Time `json:"jira_creation"`
	JiraId       string     `json:"jira_id"`
	JiraKey      string     `json:"jira_key"`
	JiraProject  *int       `json:"jira_project"`
	Url          *string    `json:"url,omitempty"`
}

// JIRAProject defines model for JIRAProject.
type JIRAProject struct {
	Component                   *string `json:"component,omitempty"`
	EnableEngagementEpicMapping *bool   `json:"enable_engagement_epic_mapping,omitempty"`
	Engagement                  *int    `json:"engagement"`
	Id                          *int    `json:"id,omitempty"`

	// IssueTemplateDir Choose the folder containing the Django templates used to render the JIRA issue description. These are stored in dojo/templates/issue-trackers. Leave empty to use the default jira_full templates.
	IssueTemplateDir           *string `json:"issue_template_dir"`
	JiraInstance               *int    `json:"jira_instance"`
	Product                    *int    `json:"product"`
	ProductJiraSlaNotification *bool   `json:"product_jira_sla_notification,omitempty"`
	ProjectKey                 *string `json:"project_key,omitempty"`

	// PushAllIssues Automatically maintain parity with JIRA. Always create and update JIRA tickets for findings in this Product.
	PushAllIssues                        *bool `json:"push_all_issues,omitempty"`
	PushNotes                            *bool `json:"push_notes,omitempty"`
	RiskAcceptanceExpirationNotification *bool `json:"risk_acceptance_expiration_notification,omitempty"`
}

// Language defines model for Language.
type Language struct {
	Blank    *int       `json:"blank"`
	Code     *int       `json:"code"`
	Comment  *int       `json:"comment"`
	Created  *time.Time `json:"created,omitempty"`
	Files    *int       `json:"files"`
	Id       *int       `json:"id,omitempty"`
	Language int        `json:"language"`
	Prefetch *struct {
		Language *map[string]LanguageType `json:"language,omitempty"`
		Product  *map[string]Product      `json:"product,omitempty"`
		User     *map[string]UserStub     `json:"user,omitempty"`
	} `json:"prefetch,omitempty"`
	Product int  `json:"product"`
	User    *int `json:"user"`
}

// LanguageType defines model for LanguageType.
type LanguageType struct {
	Color    *string `json:"color"`
	Id       *int    `json:"id,omitempty"`
	Language string  `json:"language"`
}

// Meta defines model for Meta.
type Meta struct {
	Endpoint *int   `json:"endpoint"`
	Finding  *int   `json:"finding"`
	Id       *int   `json:"id,omitempty"`
	Name     string `json:"name"`
	Prefetch *struct {
		Endpoint *map[string]Endpoint `json:"endpoint,omitempty"`
		Finding  *map[string]Finding  `json:"finding,omitempty"`
		Product  *map[string]Product  `json:"product,omitempty"`
	} `json:"prefetch,omitempty"`
	Product *int   `json:"product"`
	Value   string `json:"value"`
}

// NetworkLocations defines model for NetworkLocations.
type NetworkLocations struct {
	Id *int `json:"id,omitempty"`

	// Location Location of network testing: Examples: VPN, Internet or Internal.
	Location string `json:"location"`
}

// Note defines model for Note.
type Note struct {
	Author   *UserStub      `json:"author,omitempty"`
	Date     *time.Time     `json:"date,omitempty"`
	EditTime *time.Time     `json:"edit_time,omitempty"`
	Edited   *bool          `json:"edited,omitempty"`
	Editor   *UserStub      `json:"editor"`
	Entry    string         `json:"entry"`
	History  *[]NoteHistory `json:"history,omitempty"`
	Id       *int           `json:"id,omitempty"`
	NoteType *int           `json:"note_type"`
	Private  *bool          `json:"private,omitempty"`
}

// NoteHistory defines model for NoteHistory.
type NoteHistory struct {
	CurrentEditor *UserStub  `json:"current_editor,omitempty"`
	Data          string     `json:"data"`
	Id            *int       `json:"id,omitempty"`
	NoteType      *int       `json:"note_type"`
	Time          *time.Time `json:"time,omitempty"`
}

// NoteType defines model for NoteType.
type NoteType struct {
	Description string `json:"description"`
	Id          *int   `json:"id,omitempty"`
	IsActive    *bool  `json:"is_active,omitempty"`
	IsMandatory *bool  `json:"is_mandatory,omitempty"`
	IsSingle    *bool  `json:"is_single,omitempty"`
	Name        string `json:"name"`
}

// Notifications defines model for Notifications.
type Notifications struct {
	AutoCloseEngagement *[]NotificationsAutoCloseEngagement `json:"auto_close_engagement,omitempty"`
	CloseEngagement     *[]NotificationsCloseEngagement     `json:"close_engagement,omitempty"`
	CodeReview          *[]NotificationsCodeReview          `json:"code_review,omitempty"`
	EngagementAdded     *[]NotificationsEngagementAdded     `json:"engagement_added,omitempty"`
	Id                  *int                                `json:"id,omitempty"`
	JiraUpdate          *[]NotificationsJiraUpdate          `json:"jira_update,omitempty"`
	Other               *[]NotificationsOther               `json:"other,omitempty"`
	Prefetch            *struct {
		Product *map[string]Product  `json:"product,omitempty"`
		User    *map[string]UserStub `json:"user,omitempty"`
	} `json:"prefetch,omitempty"`
	Product                  *int                                     `json:"product"`
	ProductAdded             *[]NotificationsProductAdded             `json:"product_added,omitempty"`
	ProductTypeAdded         *[]NotificationsProductTypeAdded         `json:"product_type_added,omitempty"`
	ReviewRequested          *[]NotificationsReviewRequested          `json:"review_requested,omitempty"`
	RiskAcceptanceExpiration *[]NotificationsRiskAcceptanceExpiration `json:"risk_acceptance_expiration,omitempty"`
	ScanAdded                *[]NotificationsScanAdded                `json:"scan_added,omitempty"`
	SlaBreach                *[]NotificationsSlaBreach                `json:"sla_breach,omitempty"`
	StaleEngagement          *[]NotificationsStaleEngagement          `json:"stale_engagement,omitempty"`
	TestAdded                *[]NotificationsTestAdded                `json:"test_added,omitempty"`
	UpcomingEngagement       *[]NotificationsUpcomingEngagement       `json:"upcoming_engagement,omitempty"`
	User                     *int                                     `json:"user"`
	UserMentioned            *[]NotificationsUserMentioned            `json:"user_mentioned,omitempty"`
}

// NotificationsAutoCloseEngagement defines model for Notifications.AutoCloseEngagement.
type NotificationsAutoCloseEngagement string

// NotificationsCloseEngagement defines model for Notifications.CloseEngagement.
type NotificationsCloseEngagement string

// NotificationsCodeReview defines model for Notifications.CodeReview.
type NotificationsCodeReview string

// NotificationsEngagementAdded defines model for Notifications.EngagementAdded.
type NotificationsEngagementAdded string

// NotificationsJiraUpdate defines model for Notifications.JiraUpdate.
type NotificationsJiraUpdate string

// NotificationsOther defines model for Notifications.Other.
type NotificationsOther string

// NotificationsProductAdded defines model for Notifications.ProductAdded.
type NotificationsProductAdded string

// NotificationsProductTypeAdded defines model for Notifications.ProductTypeAdded.
type NotificationsProductTypeAdded string

// NotificationsReviewRequested defines model for Notifications.ReviewRequested.
type NotificationsReviewRequested string

// NotificationsRiskAcceptanceExpiration defines model for Notifications.RiskAcceptanceExpiration.
type NotificationsRiskAcceptanceExpiration string

// NotificationsScanAdded defines model for Notifications.ScanAdded.
type NotificationsScanAdded string

// NotificationsSlaBreach defines model for Notifications.SlaBreach.
type NotificationsSlaBreach string

// NotificationsStaleEngagement defines model for Notifications.StaleEngagement.
type NotificationsStaleEngagement string

// NotificationsTestAdded defines model for Notifications.TestAdded.
type NotificationsTestAdded string

// NotificationsUpcomingEngagement defines model for Notifications.UpcomingEngagement.
type NotificationsUpcomingEngagement string

// NotificationsUserMentioned defines model for Notifications.UserMentioned.
type NotificationsUserMentioned string

// PaginatedAppAnalysisList defines model for PaginatedAppAnalysisList.
type PaginatedAppAnalysisList struct {
	Count    *int           `json:"count,omitempty"`
	Next     *string        `json:"next"`
	Previous *string        `json:"previous"`
	Results  *[]AppAnalysis `json:"results,omitempty"`
}

// PaginatedDevelopmentEnvironmentList defines model for PaginatedDevelopmentEnvironmentList.
type PaginatedDevelopmentEnvironmentList struct {
	Count    *int                      `json:"count,omitempty"`
	Next     *string                   `json:"next"`
	Previous *string                   `json:"previous"`
	Results  *[]DevelopmentEnvironment `json:"results,omitempty"`
}

// PaginatedDojoGroupList defines model for PaginatedDojoGroupList.
type PaginatedDojoGroupList struct {
	Count    *int    `json:"count,omitempty"`
	Next     *string `json:"next"`
	Prefetch *struct {
		ProductGroups     *map[string]Product     `json:"product_groups,omitempty"`
		ProductTypeGroups *map[string]ProductType `json:"product_type_groups,omitempty"`
		Users             *map[string]UserStub    `json:"users,omitempty"`
	} `json:"prefetch,omitempty"`
	Previous *string      `json:"previous"`
	Results  *[]DojoGroup `json:"results,omitempty"`
}

// PaginatedDojoGroupMemberList defines model for PaginatedDojoGroupMemberList.
type PaginatedDojoGroupMemberList struct {
	Count    *int    `json:"count,omitempty"`
	Next     *string `json:"next"`
	Prefetch *struct {
		Group *map[string]DojoGroup `json:"group,omitempty"`
		Role  *map[string]Role      `json:"role,omitempty"`
		User  *map[string]UserStub  `json:"user,omitempty"`
	} `json:"prefetch,omitempty"`
	Previous *string            `json:"previous"`
	Results  *[]DojoGroupMember `json:"results,omitempty"`
}

// PaginatedEndpointList defines model for PaginatedEndpointList.
type PaginatedEndpointList struct {
	Count    *int        `json:"count,omitempty"`
	Next     *string     `json:"next"`
	Previous *string     `json:"previous"`
	Results  *[]Endpoint `json:"results,omitempty"`
}

// PaginatedEndpointStatusList defines model for PaginatedEndpointStatusList.
type PaginatedEndpointStatusList struct {
	Count    *int              `json:"count,omitempty"`
	Next     *string           `json:"next"`
	Previous *string           `json:"previous"`
	Results  *[]EndpointStatus `json:"results,omitempty"`
}

// PaginatedEngagementList defines model for PaginatedEngagementList.
type PaginatedEngagementList struct {
	Count    *int          `json:"count,omitempty"`
	Next     *string       `json:"next"`
	Previous *string       `json:"previous"`
	Results  *[]Engagement `json:"results,omitempty"`
}

// PaginatedEngagementPresetsList defines model for PaginatedEngagementPresetsList.
type PaginatedEngagementPresetsList struct {
	Count    *int                 `json:"count,omitempty"`
	Next     *string              `json:"next"`
	Previous *string              `json:"previous"`
	Results  *[]EngagementPresets `json:"results,omitempty"`
}

// PaginatedFindingList defines model for PaginatedFindingList.
type PaginatedFindingList struct {
	Count    *int    `json:"count,omitempty"`
	Next     *string `json:"next"`
	Prefetch *struct {
		DefectReviewRequestedBy *map[string]UserStub       `json:"defect_review_requested_by,omitempty"`
		DuplicateFinding        *map[string]Finding        `json:"duplicate_finding,omitempty"`
		EndpointStatus          *map[string]EndpointStatus `json:"endpoint_status,omitempty"`
		Endpoints               *map[string]Endpoint       `json:"endpoints,omitempty"`
		Files                   *map[string]File           `json:"files,omitempty"`
		FindingGroupSet         *map[string]FindingGroup   `json:"finding_group_set,omitempty"`
		FoundBy                 *map[string]TestType       `json:"found_by,omitempty"`
		LastReviewedBy          *map[string]UserStub       `json:"last_reviewed_by,omitempty"`
		MitigatedBy             *map[string]UserStub       `json:"mitigated_by,omitempty"`
		Notes                   *map[string]Note           `json:"notes,omitempty"`
		Reporter                *map[string]UserStub       `json:"reporter,omitempty"`
		ReviewRequestedBy       *map[string]UserStub       `json:"review_requested_by,omitempty"`
		Reviewers               *map[string]UserStub       `json:"reviewers,omitempty"`
		RiskAcceptanceSet       *map[string]RiskAcceptance `json:"risk_acceptance_set,omitempty"`
		SonarqubeIssue          *map[string]SonarqubeIssue `json:"sonarqube_issue,omitempty"`
		Test                    *map[string]Test           `json:"test,omitempty"`
		TestImportSet           *map[string]TestImport     `json:"test_import_set,omitempty"`
	} `json:"prefetch,omitempty"`
	Previous *string    `json:"previous"`
	Results  *[]Finding `json:"results,omitempty"`
}

// PaginatedFindingTemplateList defines model for PaginatedFindingTemplateList.
type PaginatedFindingTemplateList struct {
	Count    *int               `json:"count,omitempty"`
	Next     *string            `json:"next"`
	Previous *string            `json:"previous"`
	Results  *[]FindingTemplate `json:"results,omitempty"`
}

// PaginatedGlobalRoleList defines model for PaginatedGlobalRoleList.
type PaginatedGlobalRoleList struct {
	Count    *int          `json:"count,omitempty"`
	Next     *string       `json:"next"`
	Previous *string       `json:"previous"`
	Results  *[]GlobalRole `json:"results,omitempty"`
}

// PaginatedJIRAInstanceList defines model for PaginatedJIRAInstanceList.
type PaginatedJIRAInstanceList struct {
	Count    *int            `json:"count,omitempty"`
	Next     *string         `json:"next"`
	Previous *string         `json:"previous"`
	Results  *[]JIRAInstance `json:"results,omitempty"`
}

// PaginatedJIRAIssueList defines model for PaginatedJIRAIssueList.
type PaginatedJIRAIssueList struct {
	Count    *int         `json:"count,omitempty"`
	Next     *string      `json:"next"`
	Previous *string      `json:"previous"`
	Results  *[]JIRAIssue `json:"results,omitempty"`
}

// PaginatedJIRAProjectList defines model for PaginatedJIRAProjectList.
type PaginatedJIRAProjectList struct {
	Count    *int           `json:"count,omitempty"`
	Next     *string        `json:"next"`
	Previous *string        `json:"previous"`
	Results  *[]JIRAProject `json:"results,omitempty"`
}

// PaginatedLanguageList defines model for PaginatedLanguageList.
type PaginatedLanguageList struct {
	Count    *int    `json:"count,omitempty"`
	Next     *string `json:"next"`
	Prefetch *struct {
		Language *map[string]LanguageType `json:"language,omitempty"`
		Product  *map[string]Product      `json:"product,omitempty"`
		User     *map[string]UserStub     `json:"user,omitempty"`
	} `json:"prefetch,omitempty"`
	Previous *string     `json:"previous"`
	Results  *[]Language `json:"results,omitempty"`
}

// PaginatedLanguageTypeList defines model for PaginatedLanguageTypeList.
type PaginatedLanguageTypeList struct {
	Count    *int            `json:"count,omitempty"`
	Next     *string         `json:"next"`
	Previous *string         `json:"previous"`
	Results  *[]LanguageType `json:"results,omitempty"`
}

// PaginatedMetaList defines model for PaginatedMetaList.
type PaginatedMetaList struct {
	Count    *int    `json:"count,omitempty"`
	Next     *string `json:"next"`
	Prefetch *struct {
		Endpoint *map[string]Endpoint `json:"endpoint,omitempty"`
		Finding  *map[string]Finding  `json:"finding,omitempty"`
		Product  *map[string]Product  `json:"product,omitempty"`
	} `json:"prefetch,omitempty"`
	Previous *string `json:"previous"`
	Results  *[]Meta `json:"results,omitempty"`
}

// PaginatedNetworkLocationsList defines model for PaginatedNetworkLocationsList.
type PaginatedNetworkLocationsList struct {
	Count    *int                `json:"count,omitempty"`
	Next     *string             `json:"next"`
	Previous *string             `json:"previous"`
	Results  *[]NetworkLocations `json:"results,omitempty"`
}

// PaginatedNoteList defines model for PaginatedNoteList.
type PaginatedNoteList struct {
	Count    *int    `json:"count,omitempty"`
	Next     *string `json:"next"`
	Previous *string `json:"previous"`
	Results  *[]Note `json:"results,omitempty"`
}

// PaginatedNoteTypeList defines model for PaginatedNoteTypeList.
type PaginatedNoteTypeList struct {
	Count    *int        `json:"count,omitempty"`
	Next     *string     `json:"next"`
	Previous *string     `json:"previous"`
	Results  *[]NoteType `json:"results,omitempty"`
}

// PaginatedNotificationsList defines model for PaginatedNotificationsList.
type PaginatedNotificationsList struct {
	Count    *int    `json:"count,omitempty"`
	Next     *string `json:"next"`
	Prefetch *struct {
		Product *map[string]Product  `json:"product,omitempty"`
		User    *map[string]UserStub `json:"user,omitempty"`
	} `json:"prefetch,omitempty"`
	Previous *string          `json:"previous"`
	Results  *[]Notifications `json:"results,omitempty"`
}

// PaginatedProductAPIScanConfigurationList defines model for PaginatedProductAPIScanConfigurationList.
type PaginatedProductAPIScanConfigurationList struct {
	Count    *int                           `json:"count,omitempty"`
	Next     *string                        `json:"next"`
	Previous *string                        `json:"previous"`
	Results  *[]ProductAPIScanConfiguration `json:"results,omitempty"`
}

// PaginatedProductGroupList defines model for PaginatedProductGroupList.
type PaginatedProductGroupList struct {
	Count    *int    `json:"count,omitempty"`
	Next     *string `json:"next"`
	Prefetch *struct {
		Group   *map[string]DojoGroup `json:"group,omitempty"`
		Product *map[string]Product   `json:"product,omitempty"`
		Role    *map[string]Role      `json:"role,omitempty"`
	} `json:"prefetch,omitempty"`
	Previous *string         `json:"previous"`
	Results  *[]ProductGroup `json:"results,omitempty"`
}

// PaginatedProductList defines model for PaginatedProductList.
type PaginatedProductList struct {
	Count    *int    `json:"count,omitempty"`
	Next     *string `json:"next"`
	Prefetch *struct {
		AuthorizationGroups *map[string]DojoGroup   `json:"authorization_groups,omitempty"`
		Members             *map[string]UserStub    `json:"members,omitempty"`
		ProdType            *map[string]ProductType `json:"prod_type,omitempty"`
		ProductManager      *map[string]UserStub    `json:"product_manager,omitempty"`
		Regulations         *map[string]Regulation  `json:"regulations,omitempty"`
		TeamManager         *map[string]UserStub    `json:"team_manager,omitempty"`
		TechnicalContact    *map[string]UserStub    `json:"technical_contact,omitempty"`
	} `json:"prefetch,omitempty"`
	Previous *string    `json:"previous"`
	Results  *[]Product `json:"results,omitempty"`
}

// PaginatedProductMemberList defines model for PaginatedProductMemberList.
type PaginatedProductMemberList struct {
	Count    *int    `json:"count,omitempty"`
	Next     *string `json:"next"`
	Prefetch *struct {
		Product *map[string]Product  `json:"product,omitempty"`
		Role    *map[string]Role     `json:"role,omitempty"`
		User    *map[string]UserStub `json:"user,omitempty"`
	} `json:"prefetch,omitempty"`
	Previous *string          `json:"previous"`
	Results  *[]ProductMember `json:"results,omitempty"`
}

// PaginatedProductTypeGroupList defines model for PaginatedProductTypeGroupList.
type PaginatedProductTypeGroupList struct {
	Count    *int    `json:"count,omitempty"`
	Next     *string `json:"next"`
	Prefetch *struct {
		Group       *map[string]DojoGroup   `json:"group,omitempty"`
		ProductType *map[string]ProductType `json:"product_type,omitempty"`
		Role        *map[string]Role        `json:"role,omitempty"`
	} `json:"prefetch,omitempty"`
	Previous *string             `json:"previous"`
	Results  *[]ProductTypeGroup `json:"results,omitempty"`
}

// PaginatedProductTypeList defines model for PaginatedProductTypeList.
type PaginatedProductTypeList struct {
	Count    *int    `json:"count,omitempty"`
	Next     *string `json:"next"`
	Prefetch *struct {
		AuthorizationGroups *map[string]DojoGroup `json:"authorization_groups,omitempty"`
		Members             *map[string]UserStub  `json:"members,omitempty"`
	} `json:"prefetch,omitempty"`
	Previous *string        `json:"previous"`
	Results  *[]ProductType `json:"results,omitempty"`
}

// PaginatedProductTypeMemberList defines model for PaginatedProductTypeMemberList.
type PaginatedProductTypeMemberList struct {
	Count    *int    `json:"count,omitempty"`
	Next     *string `json:"next"`
	Prefetch *struct {
		ProductType *map[string]ProductType `json:"product_type,omitempty"`
		Role        *map[string]Role        `json:"role,omitempty"`
		User        *map[string]UserStub    `json:"user,omitempty"`
	} `json:"prefetch,omitempty"`
	Previous *string              `json:"previous"`
	Results  *[]ProductTypeMember `json:"results,omitempty"`
}

// PaginatedRegulationList defines model for PaginatedRegulationList.
type PaginatedRegulationList struct {
	Count    *int          `json:"count,omitempty"`
	Next     *string       `json:"next"`
	Previous *string       `json:"previous"`
	Results  *[]Regulation `json:"results,omitempty"`
}

// PaginatedRiskAcceptanceList defines model for PaginatedRiskAcceptanceList.
type PaginatedRiskAcceptanceList struct {
	Count    *int              `json:"count,omitempty"`
	Next     *string           `json:"next"`
	Previous *string           `json:"previous"`
	Results  *[]RiskAcceptance `json:"results,omitempty"`
}

// PaginatedRoleList defines model for PaginatedRoleList.
type PaginatedRoleList struct {
	Count    *int    `json:"count,omitempty"`
	Next     *string `json:"next"`
	Previous *string `json:"previous"`
	Results  *[]Role `json:"results,omitempty"`
}

// PaginatedSonarqubeIssueList defines model for PaginatedSonarqubeIssueList.
type PaginatedSonarqubeIssueList struct {
	Count    *int              `json:"count,omitempty"`
	Next     *string           `json:"next"`
	Previous *string           `json:"previous"`
	Results  *[]SonarqubeIssue `json:"results,omitempty"`
}

// PaginatedSonarqubeIssueTransitionList defines model for PaginatedSonarqubeIssueTransitionList.
type PaginatedSonarqubeIssueTransitionList struct {
	Count    *int                        `json:"count,omitempty"`
	Next     *string                     `json:"next"`
	Previous *string                     `json:"previous"`
	Results  *[]SonarqubeIssueTransition `json:"results,omitempty"`
}

// PaginatedStubFindingList defines model for PaginatedStubFindingList.
type PaginatedStubFindingList struct {
	Count    *int           `json:"count,omitempty"`
	Next     *string        `json:"next"`
	Previous *string        `json:"previous"`
	Results  *[]StubFinding `json:"results,omitempty"`
}

// PaginatedSystemSettingsList defines model for PaginatedSystemSettingsList.
type PaginatedSystemSettingsList struct {
	Count    *int              `json:"count,omitempty"`
	Next     *string           `json:"next"`
	Previous *string           `json:"previous"`
	Results  *[]SystemSettings `json:"results,omitempty"`
}

// PaginatedTestImportList defines model for PaginatedTestImportList.
type PaginatedTestImportList struct {
	Count    *int    `json:"count,omitempty"`
	Next     *string `json:"next"`
	Prefetch *struct {
		FindingsAffected *map[string]Finding `json:"findings_affected,omitempty"`
		Test             *map[string]Test    `json:"test,omitempty"`
	} `json:"prefetch,omitempty"`
	Previous *string       `json:"previous"`
	Results  *[]TestImport `json:"results,omitempty"`
}

// PaginatedTestList defines model for PaginatedTestList.
type PaginatedTestList struct {
	Count    *int    `json:"count,omitempty"`
	Next     *string `json:"next"`
	Previous *string `json:"previous"`
	Results  *[]Test `json:"results,omitempty"`
}

// PaginatedTestTypeList defines model for PaginatedTestTypeList.
type PaginatedTestTypeList struct {
	Count    *int        `json:"count,omitempty"`
	Next     *string     `json:"next"`
	Previous *string     `json:"previous"`
	Results  *[]TestType `json:"results,omitempty"`
}

// PaginatedToolConfigurationList defines model for PaginatedToolConfigurationList.
type PaginatedToolConfigurationList struct {
	Count    *int                 `json:"count,omitempty"`
	Next     *string              `json:"next"`
	Previous *string              `json:"previous"`
	Results  *[]ToolConfiguration `json:"results,omitempty"`
}

// PaginatedToolProductSettingsList defines model for PaginatedToolProductSettingsList.
type PaginatedToolProductSettingsList struct {
	Count    *int                   `json:"count,omitempty"`
	Next     *string                `json:"next"`
	Previous *string                `json:"previous"`
	Results  *[]ToolProductSettings `json:"results,omitempty"`
}

// PaginatedToolTypeList defines model for PaginatedToolTypeList.
type PaginatedToolTypeList struct {
	Count    *int        `json:"count,omitempty"`
	Next     *string     `json:"next"`
	Previous *string     `json:"previous"`
	Results  *[]ToolType `json:"results,omitempty"`
}

// PaginatedUserContactInfoList defines model for PaginatedUserContactInfoList.
type PaginatedUserContactInfoList struct {
	Count    *int    `json:"count,omitempty"`
	Next     *string `json:"next"`
	Prefetch *struct {
		User *map[string]UserStub `json:"user,omitempty"`
	} `json:"prefetch,omitempty"`
	Previous *string            `json:"previous"`
	Results  *[]UserContactInfo `json:"results,omitempty"`
}

// PaginatedUserList defines model for PaginatedUserList.
type PaginatedUserList struct {
	Count    *int    `json:"count,omitempty"`
	Next     *string `json:"next"`
	Previous *string `json:"previous"`
	Results  *[]User `json:"results,omitempty"`
}

// PatchedAppAnalysis defines model for PatchedAppAnalysis.
type PatchedAppAnalysis struct {
	Confidence   *int       `json:"confidence"`
	Created      *time.Time `json:"created,omitempty"`
	Icon         *string    `json:"icon"`
	Id           *int       `json:"id,omitempty"`
	Name         *string    `json:"name,omitempty"`
	Product      *int       `json:"product,omitempty"`
	Tags         *[]string  `json:"tags,omitempty"`
	User         *int       `json:"user,omitempty"`
	Version      *string    `json:"version"`
	Website      *string    `json:"website"`
	WebsiteFound *string    `json:"website_found"`
}

// PatchedDevelopmentEnvironment defines model for PatchedDevelopmentEnvironment.
type PatchedDevelopmentEnvironment struct {
	Id   *int    `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// PatchedDojoGroup defines model for PatchedDojoGroup.
type PatchedDojoGroup struct {
	Description *string `json:"description"`
	Id          *int    `json:"id,omitempty"`
	Name        *string `json:"name,omitempty"`
	Users       *[]int  `json:"users,omitempty"`
}

// PatchedDojoGroupMember defines model for PatchedDojoGroupMember.
type PatchedDojoGroupMember struct {
	Group *int `json:"group,omitempty"`
	Id    *int `json:"id,omitempty"`

	// Role This role determines the permissions of the user to manage the group.
	Role *int `json:"role,omitempty"`
	User *int `json:"user,omitempty"`
}

// PatchedEndpoint defines model for PatchedEndpoint.
type PatchedEndpoint struct {
	EndpointParams *[]int `json:"endpoint_params,omitempty"`
	EndpointStatus *[]int `json:"endpoint_status,omitempty"`

	// Fragment The fragment identifier which follows the hash mark. The hash mark should be omitted. For example 'section-13', 'paragraph-2'.
	Fragment *string `json:"fragment"`

	// Host The host name or IP address. It must not include the port number. For example '127.0.0.1', 'localhost', 'yourdomain.com'.
	Host      *string `json:"host"`
	Id        *int    `json:"id,omitempty"`
	Mitigated *bool   `json:"mitigated,omitempty"`

	// Path The location of the resource, it must not start with a '/'. For example endpoint/420/edit
	Path *string `json:"path"`

	// Port The network port associated with the endpoint.
	Port    *int `json:"port"`
	Product *int `json:"product"`

	// Protocol The communication protocol/scheme such as 'http', 'ftp', 'dns', etc.
	Protocol *string `json:"protocol"`

	// Query The query string, the question mark should be omitted.For example 'group=4&team=8'
	Query *string   `json:"query"`
	Tags  *[]string `json:"tags,omitempty"`

	// Userinfo User info as 'alice', 'bob', etc.
	Userinfo *string `json:"userinfo"`
}

// PatchedEndpointStatus defines model for PatchedEndpointStatus.
type PatchedEndpointStatus struct {
	Date          *time.Time `json:"date,omitempty"`
	Endpoint      *int       `json:"endpoint"`
	FalsePositive *bool      `json:"false_positive,omitempty"`
	Finding       *int       `json:"finding"`
	Id            *int       `json:"id,omitempty"`
	LastModified  *time.Time `json:"last_modified,omitempty"`
	Mitigated     *bool      `json:"mitigated,omitempty"`
	MitigatedBy   *int       `json:"mitigated_by"`
	MitigatedTime *time.Time `json:"mitigated_time,omitempty"`
	OutOfScope    *bool      `json:"out_of_scope,omitempty"`
	RiskAccepted  *bool      `json:"risk_accepted,omitempty"`
}

// PatchedEngagement defines model for PatchedEngagement.
type PatchedEngagement struct {
	Active  *bool `json:"active,omitempty"`
	ApiTest *bool `json:"api_test,omitempty"`

	// BranchTag Tag or branch of the product the engagement tested.
	BranchTag *string `json:"branch_tag"`

	// BuildId Build ID of the product the engagement tested.
	BuildId *string `json:"build_id"`

	// BuildServer Build server responsible for CI/CD test
	BuildServer *int  `json:"build_server"`
	CheckList   *bool `json:"check_list,omitempty"`

	// CommitHash Commit hash from repo
	CommitHash *string    `json:"commit_hash"`
	Created    *time.Time `json:"created,omitempty"`

	// DeduplicationOnEngagement If enabled deduplication will only mark a finding in this engagement as duplicate of another finding if both findings are in this engagement. If disabled, deduplication is on the product level.
	DeduplicationOnEngagement *bool                            `json:"deduplication_on_engagement,omitempty"`
	Description               *string                          `json:"description"`
	DoneTesting               *bool                            `json:"done_testing,omitempty"`
	EngagementType            *PatchedEngagementEngagementType `json:"engagement_type"`
	Files                     *[]File                          `json:"files,omitempty"`
	FirstContacted            *openapi_types.Date              `json:"first_contacted"`
	Id                        *int                             `json:"id,omitempty"`
	Lead                      *int                             `json:"lead"`
	Name                      *string                          `json:"name"`
	Notes                     *[]Note                          `json:"notes,omitempty"`

	// OrchestrationEngine Orchestration service responsible for CI/CD test
	OrchestrationEngine *int  `json:"orchestration_engine"`
	PenTest             *bool `json:"pen_test,omitempty"`

	// Preset Settings and notes for performing this engagement.
	Preset         *int    `json:"preset"`
	Product        *int    `json:"product,omitempty"`
	Progress       *string `json:"progress,omitempty"`
	Reason         *string `json:"reason"`
	ReportType     *int    `json:"report_type"`
	Requester      *int    `json:"requester"`
	RiskAcceptance *[]int  `json:"risk_acceptance,omitempty"`

	// SourceCodeManagementServer Source code server for CI/CD test
	SourceCodeManagementServer *int `json:"source_code_management_server"`

	// SourceCodeManagementUri Resource link to source code
	SourceCodeManagementUri *string                  `json:"source_code_management_uri"`
	Status                  *PatchedEngagementStatus `json:"status"`
	Tags                    *[]string                `json:"tags,omitempty"`
	TargetEnd               *openapi_types.Date      `json:"target_end,omitempty"`
	TargetStart             *openapi_types.Date      `json:"target_start,omitempty"`
	TestStrategy            *string                  `json:"test_strategy"`
	ThreatModel             *bool                    `json:"threat_model,omitempty"`
	TmodelPath              *string                  `json:"tmodel_path,omitempty"`

	// Tracker Link to epic or ticket system with changes to version.
	Tracker *string    `json:"tracker"`
	Updated *time.Time `json:"updated,omitempty"`

	// Version Version of the product the engagement tested.
	Version *string `json:"version"`
}

// PatchedEngagementEngagementType defines model for PatchedEngagement.EngagementType.
type PatchedEngagementEngagementType string

// PatchedEngagementStatus defines model for PatchedEngagement.Status.
type PatchedEngagementStatus string

// PatchedEngagementPresets defines model for PatchedEngagementPresets.
type PatchedEngagementPresets struct {
	Created          *time.Time `json:"created,omitempty"`
	Id               *int       `json:"id,omitempty"`
	NetworkLocations *[]int     `json:"network_locations,omitempty"`

	// Notes Description of what needs to be tested or setting up environment for testing
	Notes   *string `json:"notes"`
	Product *int    `json:"product,omitempty"`

	// Scope Scope of Engagement testing, IP's/Resources/URL's)
	Scope    *string `json:"scope,omitempty"`
	TestType *[]int  `json:"test_type,omitempty"`

	// Title Brief description of preset.
	Title *string `json:"title,omitempty"`
}

// PatchedFinding defines model for PatchedFinding.
type PatchedFinding struct {
	AcceptedRisks *[]RiskAcceptance `json:"accepted_risks,omitempty"`

	// Active Denotes if this flaw is active or not.
	Active *bool `json:"active,omitempty"`
	Age    *int  `json:"age,omitempty"`

	// ComponentName Name of the affected component (library name, part of a system, ...).
	ComponentName *string `json:"component_name"`

	// ComponentVersion Version of the affected component.
	ComponentVersion *string `json:"component_version"`

	// Created The date the finding was created inside DefectDojo.
	Created *time.Time `json:"created,omitempty"`

	// Cve The Common Vulnerabilities and Exposures (CVE) associated with this flaw.
	Cve *string `json:"cve"`

	// Cvssv3 Common Vulnerability Scoring System version 3 (CVSSv3) score associated with this flaw.
	Cvssv3 *string `json:"cvssv3"`

	// Cvssv3Score Numerical CVSSv3 score for the vulnerability. If the vector is given, the score is updated while saving the finding
	Cvssv3Score *float32 `json:"cvssv3_score"`

	// Cwe The CWE number associated with this flaw.
	Cwe *int `json:"cwe"`

	// Date The date the flaw was discovered.
	Date *openapi_types.Date `json:"date,omitempty"`

	// DefectReviewRequestedBy Documents who requested a defect review for this flaw.
	DefectReviewRequestedBy *int `json:"defect_review_requested_by"`

	// Description Longer more descriptive information about the flaw.
	Description   *string `json:"description,omitempty"`
	DisplayStatus *string `json:"display_status,omitempty"`

	// Duplicate Denotes if this flaw is a duplicate of other flaws reported.
	Duplicate *bool `json:"duplicate,omitempty"`

	// DuplicateFinding Link to the original finding if this finding is a duplicate.
	DuplicateFinding *int `json:"duplicate_finding,omitempty"`

	// DynamicFinding Flaw has been detected from a Dynamic Application Security Testing tool (DAST).
	DynamicFinding *bool `json:"dynamic_finding,omitempty"`

	// EndpointStatus The status of the endpoint associated with this flaw (Vulnerable, Mitigated, ...).
	EndpointStatus *[]int `json:"endpoint_status,omitempty"`

	// Endpoints The hosts within the product that are susceptible to this flaw.
	Endpoints *[]int `json:"endpoints,omitempty"`

	// FalseP Denotes if this flaw has been deemed a false positive by the tester.
	FalseP *bool `json:"false_p,omitempty"`

	// FilePath Identified file(s) containing the flaw.
	FilePath *string `json:"file_path"`

	// Files Files(s) related to the flaw.
	Files         *[]int          `json:"files,omitempty"`
	FindingGroups *[]FindingGroup `json:"finding_groups,omitempty"`
	FindingMeta   *[]FindingMeta  `json:"finding_meta,omitempty"`

	// FoundBy The name of the scanner that identified the flaw.
	FoundBy *[]int `json:"found_by,omitempty"`

	// HashCode A hash over a configurable set of fields that is used for findings deduplication.
	HashCode *string `json:"hash_code,omitempty"`
	Id       *int    `json:"id,omitempty"`

	// Impact Text describing the impact this flaw has on systems, products, enterprise, etc.
	Impact *string `json:"impact"`

	// IsMitigated Denotes if this flaw has been fixed.
	IsMitigated  *bool      `json:"is_mitigated,omitempty"`
	JiraChange   *time.Time `json:"jira_change,omitempty"`
	JiraCreation *time.Time `json:"jira_creation,omitempty"`

	// LastReviewed Provides the date the flaw was last 'touched' by a tester.
	LastReviewed *time.Time `json:"last_reviewed,omitempty"`

	// LastReviewedBy Provides the person who last reviewed the flaw.
	LastReviewedBy *int `json:"last_reviewed_by,omitempty"`

	// LastStatusUpdate Timestamp of latest status update (change in status related fields).
	LastStatusUpdate *time.Time `json:"last_status_update,omitempty"`

	// Line Source line number of the attack vector.
	Line *int `json:"line"`

	// Mitigated Denotes if this flaw has been fixed by storing the date it was fixed.
	Mitigated *time.Time `json:"mitigated,omitempty"`

	// MitigatedBy Documents who has marked this flaw as fixed.
	MitigatedBy *int `json:"mitigated_by,omitempty"`

	// Mitigation Text describing how to best fix the flaw.
	Mitigation *string `json:"mitigation"`

	// NbOccurences Number of occurences in the source tool when several vulnerabilites were found and aggregated by the scanner.
	NbOccurences *int    `json:"nb_occurences"`
	Notes        *[]Note `json:"notes,omitempty"`

	// NumericalSeverity The numerical representation of the severity (S0, S1, S2, S3, S4).
	NumericalSeverity *string `json:"numerical_severity,omitempty"`

	// OutOfScope Denotes if this flaw falls outside the scope of the test and/or engagement.
	OutOfScope *bool `json:"out_of_scope,omitempty"`

	// Param Parameter used to trigger the issue (DAST).
	Param *string `json:"param,omitempty"`

	// Payload Payload used to attack the service / application and trigger the bug / problem.
	Payload *string `json:"payload,omitempty"`

	// PublishDate Date when this vulnerability was made publicly available.
	PublishDate *openapi_types.Date `json:"publish_date"`
	PushToJira  *bool               `json:"push_to_jira,omitempty"`

	// References The external documentation available for this flaw.
	References    *string               `json:"references"`
	RelatedFields *FindingRelatedFields `json:"related_fields,omitempty"`

	// Reporter Documents who reported the flaw.
	Reporter        *int                    `json:"reporter,omitempty"`
	RequestResponse *BurpRawRequestResponse `json:"request_response,omitempty"`

	// ReviewRequestedBy Documents who requested a review for this finding.
	ReviewRequestedBy *int `json:"review_requested_by"`

	// Reviewers Documents who reviewed the flaw.
	Reviewers *[]int `json:"reviewers,omitempty"`

	// RiskAccepted Denotes if this finding has been marked as an accepted risk.
	RiskAccepted *bool `json:"risk_accepted,omitempty"`

	// SastSinkObject Sink object (variable, function...) of the attack vector.
	SastSinkObject *string `json:"sast_sink_object"`

	// SastSourceFilePath Source file path of the attack vector.
	SastSourceFilePath *string `json:"sast_source_file_path"`

	// SastSourceLine Source line number of the attack vector.
	SastSourceLine *int `json:"sast_source_line"`

	// SastSourceObject Source object (variable, function...) of the attack vector.
	SastSourceObject *string `json:"sast_source_object"`

	// ScannerConfidence Confidence level of vulnerability which is supplied by the scanner.
	ScannerConfidence *int `json:"scanner_confidence,omitempty"`

	// Service A service is a self-contained piece of functionality within a Product. This is an optional field which is used in deduplication of findings when set.
	Service *string `json:"service"`

	// Severity The severity level of this flaw (Critical, High, Medium, Low, Informational).
	Severity *string `json:"severity,omitempty"`

	// SeverityJustification Text describing why a certain severity was associated with this flaw.
	SeverityJustification *string `json:"severity_justification"`
	SlaDaysRemaining      *int    `json:"sla_days_remaining,omitempty"`

	// SlaStartDate (readonly)The date used as start date for SLA calculation. Set by expiring risk acceptances. Empty by default, causing a fallback to 'date'.
	SlaStartDate *openapi_types.Date `json:"sla_start_date"`

	// SonarqubeIssue The SonarQube issue associated with this finding.
	SonarqubeIssue *int `json:"sonarqube_issue"`

	// StaticFinding Flaw has been detected from a Static Application Security Testing tool (SAST).
	StaticFinding *bool `json:"static_finding,omitempty"`

	// StepsToReproduce Text describing the steps that must be followed in order to reproduce the flaw / bug.
	StepsToReproduce *string   `json:"steps_to_reproduce"`
	Tags             *[]string `json:"tags,omitempty"`

	// Test The test that is associated with this flaw.
	Test     *int `json:"test,omitempty"`
	ThreadId *int `json:"thread_id,omitempty"`

	// Title A short description of the flaw.
	Title *string `json:"title,omitempty"`

	// UnderDefectReview Denotes if this finding is under defect review.
	UnderDefectReview *bool `json:"under_defect_review,omitempty"`

	// UnderReview Denotes is this flaw is currently being reviewed.
	UnderReview *bool `json:"under_review,omitempty"`

	// UniqueIdFromTool Vulnerability technical id from the source tool. Allows to track unique vulnerabilities.
	UniqueIdFromTool *string `json:"unique_id_from_tool"`

	// Url External reference that provides more information about this flaw.
	Url *string `json:"url,omitempty"`

	// Verified Denotes if this flaw has been manually verified by the tester.
	Verified *bool `json:"verified,omitempty"`

	// VulnIdFromTool Non-unique technical id from the source tool associated with the vulnerability type.
	VulnIdFromTool *string `json:"vuln_id_from_tool"`
}

// PatchedFindingNote defines model for PatchedFindingNote.
type PatchedFindingNote struct {
	NoteId *int `json:"note_id,omitempty"`
}

// PatchedFindingTemplate defines model for PatchedFindingTemplate.
type PatchedFindingTemplate struct {
	Cve               *string    `json:"cve"`
	Cvssv3            *string    `json:"cvssv3"`
	Cwe               *int       `json:"cwe"`
	Description       *string    `json:"description"`
	Id                *int       `json:"id,omitempty"`
	Impact            *string    `json:"impact"`
	LastUsed          *time.Time `json:"last_used,omitempty"`
	Mitigation        *string    `json:"mitigation"`
	NumericalSeverity *string    `json:"numerical_severity,omitempty"`
	References        *string    `json:"references"`
	Severity          *string    `json:"severity"`
	Tags              *[]string  `json:"tags,omitempty"`

	// TemplateMatch Enables this template for matching remediation advice. Match will be applied to all active, verified findings by CWE.
	TemplateMatch *bool `json:"template_match,omitempty"`

	// TemplateMatchTitle Matches by title text (contains search) and CWE.
	TemplateMatchTitle *bool   `json:"template_match_title,omitempty"`
	Title              *string `json:"title,omitempty"`
}

// PatchedGlobalRole defines model for PatchedGlobalRole.
type PatchedGlobalRole struct {
	Group *int `json:"group"`
	Id    *int `json:"id,omitempty"`

	// Role The global role will be applied to all product types and products.
	Role *int `json:"role"`
	User *int `json:"user"`
}

// PatchedJIRAInstance defines model for PatchedJIRAInstance.
type PatchedJIRAInstance struct {
	// AcceptedMappingResolution JIRA resolution names (comma-separated values) that maps to an Accepted Finding
	AcceptedMappingResolution *string `json:"accepted_mapping_resolution"`

	// CloseStatusKey Transition ID to Close JIRA issues, visit https://<YOUR JIRA URL>/rest/api/latest/issue/<ANY VALID ISSUE KEY>/transitions?expand=transitions.fields to find the ID for your JIRA instance
	CloseStatusKey *int `json:"close_status_key,omitempty"`

	// ConfigurationName Enter a name to give to this configuration
	ConfigurationName *string `json:"configuration_name,omitempty"`

	// CriticalMappingSeverity Maps to the 'Priority' field in Jira. For example: Critical
	CriticalMappingSeverity *string `json:"critical_mapping_severity,omitempty"`

	// DefaultIssueType You can define extra issue types in settings.py
	DefaultIssueType *PatchedJIRAInstanceDefaultIssueType `json:"default_issue_type,omitempty"`

	// EpicNameId To obtain the 'Epic name id' visit https://<YOUR JIRA URL>/rest/api/2/field and search for Epic Name. Copy the number out of cf[number] and paste it here.
	EpicNameId *int `json:"epic_name_id,omitempty"`

	// FalsePositiveMappingResolution JIRA resolution names (comma-separated values) that maps to a False Positive Finding
	FalsePositiveMappingResolution *string `json:"false_positive_mapping_resolution"`

	// FindingText Additional text that will be added to the finding in Jira. For example including how the finding was created or who to contact for more information.
	FindingText *string `json:"finding_text"`

	// GlobalJiraSlaNotification This setting can be overidden at the Product level
	GlobalJiraSlaNotification *bool `json:"global_jira_sla_notification,omitempty"`

	// HighMappingSeverity Maps to the 'Priority' field in Jira. For example: High
	HighMappingSeverity *string `json:"high_mapping_severity,omitempty"`
	Id                  *int    `json:"id,omitempty"`

	// InfoMappingSeverity Maps to the 'Priority' field in Jira. For example: Info
	InfoMappingSeverity *string `json:"info_mapping_severity,omitempty"`

	// IssueTemplateDir Choose the folder containing the Django templates used to render the JIRA issue description. These are stored in dojo/templates/issue-trackers. Leave empty to use the default jira_full templates.
	IssueTemplateDir *string `json:"issue_template_dir"`

	// LowMappingSeverity Maps to the 'Priority' field in Jira. For example: Low
	LowMappingSeverity *string `json:"low_mapping_severity,omitempty"`

	// MediumMappingSeverity Maps to the 'Priority' field in Jira. For example: Medium
	MediumMappingSeverity *string `json:"medium_mapping_severity,omitempty"`

	// OpenStatusKey Transition ID to Re-Open JIRA issues, visit https://<YOUR JIRA URL>/rest/api/latest/issue/<ANY VALID ISSUE KEY>/transitions?expand=transitions.fields to find the ID for your JIRA instance
	OpenStatusKey *int    `json:"open_status_key,omitempty"`
	Password      *string `json:"password,omitempty"`

	// Url For more information how to configure Jira, read the DefectDojo documentation.
	Url      *string `json:"url,omitempty"`
	Username *string `json:"username,omitempty"`
}

// PatchedJIRAInstanceDefaultIssueType You can define extra issue types in settings.py
type PatchedJIRAInstanceDefaultIssueType string

// PatchedJIRAIssue defines model for PatchedJIRAIssue.
type PatchedJIRAIssue struct {
	Engagement   *int `json:"engagement"`
	Finding      *int `json:"finding"`
	FindingGroup *int `json:"finding_group"`
	Id           *int `json:"id,omitempty"`

	// JiraChange The date the linked Jira issue was last modified.
	JiraChange *time.Time `json:"jira_change"`

	// JiraCreation The date a Jira issue was created from this finding.
	JiraCreation *time.Time `json:"jira_creation"`
	JiraId       *string    `json:"jira_id,omitempty"`
	JiraKey      *string    `json:"jira_key,omitempty"`
	JiraProject  *int       `json:"jira_project"`
	Url          *string    `json:"url,omitempty"`
}

// PatchedJIRAProject defines model for PatchedJIRAProject.
type PatchedJIRAProject struct {
	Component                   *string `json:"component,omitempty"`
	EnableEngagementEpicMapping *bool   `json:"enable_engagement_epic_mapping,omitempty"`
	Engagement                  *int    `json:"engagement"`
	Id                          *int    `json:"id,omitempty"`

	// IssueTemplateDir Choose the folder containing the Django templates used to render the JIRA issue description. These are stored in dojo/templates/issue-trackers. Leave empty to use the default jira_full templates.
	IssueTemplateDir           *string `json:"issue_template_dir"`
	JiraInstance               *int    `json:"jira_instance"`
	Product                    *int    `json:"product"`
	ProductJiraSlaNotification *bool   `json:"product_jira_sla_notification,omitempty"`
	ProjectKey                 *string `json:"project_key,omitempty"`

	// PushAllIssues Automatically maintain parity with JIRA. Always create and update JIRA tickets for findings in this Product.
	PushAllIssues                        *bool `json:"push_all_issues,omitempty"`
	PushNotes                            *bool `json:"push_notes,omitempty"`
	RiskAcceptanceExpirationNotification *bool `json:"risk_acceptance_expiration_notification,omitempty"`
}

// PatchedLanguage defines model for PatchedLanguage.
type PatchedLanguage struct {
	Blank    *int       `json:"blank"`
	Code     *int       `json:"code"`
	Comment  *int       `json:"comment"`
	Created  *time.Time `json:"created,omitempty"`
	Files    *int       `json:"files"`
	Id       *int       `json:"id,omitempty"`
	Language *int       `json:"language,omitempty"`
	Product  *int       `json:"product,omitempty"`
	User     *int       `json:"user"`
}

// PatchedLanguageType defines model for PatchedLanguageType.
type PatchedLanguageType struct {
	Color    *string `json:"color"`
	Id       *int    `json:"id,omitempty"`
	Language *string `json:"language,omitempty"`
}

// PatchedMeta defines model for PatchedMeta.
type PatchedMeta struct {
	Endpoint *int    `json:"endpoint"`
	Finding  *int    `json:"finding"`
	Id       *int    `json:"id,omitempty"`
	Name     *string `json:"name,omitempty"`
	Product  *int    `json:"product"`
	Value    *string `json:"value,omitempty"`
}

// PatchedNetworkLocations defines model for PatchedNetworkLocations.
type PatchedNetworkLocations struct {
	Id *int `json:"id,omitempty"`

	// Location Location of network testing: Examples: VPN, Internet or Internal.
	Location *string `json:"location,omitempty"`
}

// PatchedNote defines model for PatchedNote.
type PatchedNote struct {
	Author   *UserStub      `json:"author,omitempty"`
	Date     *time.Time     `json:"date,omitempty"`
	EditTime *time.Time     `json:"edit_time,omitempty"`
	Edited   *bool          `json:"edited,omitempty"`
	Editor   *UserStub      `json:"editor"`
	Entry    *string        `json:"entry,omitempty"`
	History  *[]NoteHistory `json:"history,omitempty"`
	Id       *int           `json:"id,omitempty"`
	NoteType *int           `json:"note_type"`
	Private  *bool          `json:"private,omitempty"`
}

// PatchedNoteType defines model for PatchedNoteType.
type PatchedNoteType struct {
	Description *string `json:"description,omitempty"`
	Id          *int    `json:"id,omitempty"`
	IsActive    *bool   `json:"is_active,omitempty"`
	IsMandatory *bool   `json:"is_mandatory,omitempty"`
	IsSingle    *bool   `json:"is_single,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// PatchedNotifications defines model for PatchedNotifications.
type PatchedNotifications struct {
	AutoCloseEngagement      *[]PatchedNotificationsAutoCloseEngagement      `json:"auto_close_engagement,omitempty"`
	CloseEngagement          *[]PatchedNotificationsCloseEngagement          `json:"close_engagement,omitempty"`
	CodeReview               *[]PatchedNotificationsCodeReview               `json:"code_review,omitempty"`
	EngagementAdded          *[]PatchedNotificationsEngagementAdded          `json:"engagement_added,omitempty"`
	Id                       *int                                            `json:"id,omitempty"`
	JiraUpdate               *[]PatchedNotificationsJiraUpdate               `json:"jira_update,omitempty"`
	Other                    *[]PatchedNotificationsOther                    `json:"other,omitempty"`
	Product                  *int                                            `json:"product"`
	ProductAdded             *[]PatchedNotificationsProductAdded             `json:"product_added,omitempty"`
	ProductTypeAdded         *[]PatchedNotificationsProductTypeAdded         `json:"product_type_added,omitempty"`
	ReviewRequested          *[]PatchedNotificationsReviewRequested          `json:"review_requested,omitempty"`
	RiskAcceptanceExpiration *[]PatchedNotificationsRiskAcceptanceExpiration `json:"risk_acceptance_expiration,omitempty"`
	ScanAdded                *[]PatchedNotificationsScanAdded                `json:"scan_added,omitempty"`
	SlaBreach                *[]PatchedNotificationsSlaBreach                `json:"sla_breach,omitempty"`
	StaleEngagement          *[]PatchedNotificationsStaleEngagement          `json:"stale_engagement,omitempty"`
	TestAdded                *[]PatchedNotificationsTestAdded                `json:"test_added,omitempty"`
	UpcomingEngagement       *[]PatchedNotificationsUpcomingEngagement       `json:"upcoming_engagement,omitempty"`
	User                     *int                                            `json:"user"`
	UserMentioned            *[]PatchedNotificationsUserMentioned            `json:"user_mentioned,omitempty"`
}

// PatchedNotificationsAutoCloseEngagement defines model for PatchedNotifications.AutoCloseEngagement.
type PatchedNotificationsAutoCloseEngagement string

// PatchedNotificationsCloseEngagement defines model for PatchedNotifications.CloseEngagement.
type PatchedNotificationsCloseEngagement string

// PatchedNotificationsCodeReview defines model for PatchedNotifications.CodeReview.
type PatchedNotificationsCodeReview string

// PatchedNotificationsEngagementAdded defines model for PatchedNotifications.EngagementAdded.
type PatchedNotificationsEngagementAdded string

// PatchedNotificationsJiraUpdate defines model for PatchedNotifications.JiraUpdate.
type PatchedNotificationsJiraUpdate string

// PatchedNotificationsOther defines model for PatchedNotifications.Other.
type PatchedNotificationsOther string

// PatchedNotificationsProductAdded defines model for PatchedNotifications.ProductAdded.
type PatchedNotificationsProductAdded string

// PatchedNotificationsProductTypeAdded defines model for PatchedNotifications.ProductTypeAdded.
type PatchedNotificationsProductTypeAdded string

// PatchedNotificationsReviewRequested defines model for PatchedNotifications.ReviewRequested.
type PatchedNotificationsReviewRequested string

// PatchedNotificationsRiskAcceptanceExpiration defines model for PatchedNotifications.RiskAcceptanceExpiration.
type PatchedNotificationsRiskAcceptanceExpiration string

// PatchedNotificationsScanAdded defines model for PatchedNotifications.ScanAdded.
type PatchedNotificationsScanAdded string

// PatchedNotificationsSlaBreach defines model for PatchedNotifications.SlaBreach.
type PatchedNotificationsSlaBreach string

// PatchedNotificationsStaleEngagement defines model for PatchedNotifications.StaleEngagement.
type PatchedNotificationsStaleEngagement string

// PatchedNotificationsTestAdded defines model for PatchedNotifications.TestAdded.
type PatchedNotificationsTestAdded string

// PatchedNotificationsUpcomingEngagement defines model for PatchedNotifications.UpcomingEngagement.
type PatchedNotificationsUpcomingEngagement string

// PatchedNotificationsUserMentioned defines model for PatchedNotifications.UserMentioned.
type PatchedNotificationsUserMentioned string

// PatchedProduct defines model for PatchedProduct.
type PatchedProduct struct {
	AuthorizationGroups *[]int                             `json:"authorization_groups,omitempty"`
	BusinessCriticality *PatchedProductBusinessCriticality `json:"business_criticality"`
	Created             *time.Time                         `json:"created,omitempty"`
	Description         *string                            `json:"description,omitempty"`

	// EnableFullRiskAcceptance Allows full risk acceptance using a risk acceptance form, expiration date, uploaded proof, etc.
	EnableFullRiskAcceptance *bool `json:"enable_full_risk_acceptance,omitempty"`

	// EnableSimpleRiskAcceptance Allows simple risk acceptance by checking/unchecking a checkbox.
	EnableSimpleRiskAcceptance *bool `json:"enable_simple_risk_acceptance,omitempty"`

	// ExternalAudience Specify if the application is used by people outside the organization.
	ExternalAudience *bool  `json:"external_audience,omitempty"`
	FindingsCount    *int   `json:"findings_count,omitempty"`
	FindingsList     *[]int `json:"findings_list,omitempty"`
	Id               *int   `json:"id,omitempty"`

	// InternetAccessible Specify if the application is accessible from the public internet.
	InternetAccessible *bool                    `json:"internet_accessible,omitempty"`
	Lifecycle          *PatchedProductLifecycle `json:"lifecycle"`
	Members            *[]int                   `json:"members,omitempty"`
	Name               *string                  `json:"name,omitempty"`
	Origin             *PatchedProductOrigin    `json:"origin"`
	Platform           *PatchedProductPlatform  `json:"platform"`
	ProdNumericGrade   *int                     `json:"prod_numeric_grade"`
	ProdType           *int                     `json:"prod_type,omitempty"`
	ProductManager     *int                     `json:"product_manager"`
	ProductMeta        *[]ProductMeta           `json:"product_meta,omitempty"`
	Regulations        *[]int                   `json:"regulations,omitempty"`

	// Revenue Estimate the application's revenue.
	Revenue          *string   `json:"revenue"`
	Tags             *[]string `json:"tags,omitempty"`
	TeamManager      *int      `json:"team_manager"`
	TechnicalContact *int      `json:"technical_contact"`

	// UserRecords Estimate the number of user records within the application.
	UserRecords *int `json:"user_records"`
}

// PatchedProductBusinessCriticality defines model for PatchedProduct.BusinessCriticality.
type PatchedProductBusinessCriticality string

// PatchedProductLifecycle defines model for PatchedProduct.Lifecycle.
type PatchedProductLifecycle string

// PatchedProductOrigin defines model for PatchedProduct.Origin.
type PatchedProductOrigin string

// PatchedProductPlatform defines model for PatchedProduct.Platform.
type PatchedProductPlatform string

// PatchedProductAPIScanConfiguration defines model for PatchedProductAPIScanConfiguration.
type PatchedProductAPIScanConfiguration struct {
	Id                *int    `json:"id,omitempty"`
	Product           *int    `json:"product,omitempty"`
	ServiceKey1       *string `json:"service_key_1"`
	ServiceKey2       *string `json:"service_key_2"`
	ServiceKey3       *string `json:"service_key_3"`
	ToolConfiguration *int    `json:"tool_configuration,omitempty"`
}

// PatchedProductType defines model for PatchedProductType.
type PatchedProductType struct {
	AuthorizationGroups *[]int     `json:"authorization_groups,omitempty"`
	Created             *time.Time `json:"created,omitempty"`
	CriticalProduct     *bool      `json:"critical_product,omitempty"`
	Description         *string    `json:"description"`
	Id                  *int       `json:"id,omitempty"`
	KeyProduct          *bool      `json:"key_product,omitempty"`
	Members             *[]int     `json:"members,omitempty"`
	Name                *string    `json:"name,omitempty"`
	Updated             *time.Time `json:"updated,omitempty"`
}

// PatchedRegulation defines model for PatchedRegulation.
type PatchedRegulation struct {
	// Acronym A shortened representation of the name.
	Acronym *string `json:"acronym,omitempty"`

	// Category The subject of the regulation.
	Category *PatchedRegulationCategory `json:"category,omitempty"`

	// Description Information about the regulation's purpose.
	Description *string `json:"description,omitempty"`
	Id          *int    `json:"id,omitempty"`

	// Jurisdiction The territory over which the regulation applies.
	Jurisdiction *string `json:"jurisdiction,omitempty"`

	// Name The name of the regulation.
	Name *string `json:"name,omitempty"`

	// Reference An external URL for more information.
	Reference *string `json:"reference,omitempty"`
}

// PatchedRegulationCategory The subject of the regulation.
type PatchedRegulationCategory string

// PatchedSonarqubeIssue defines model for PatchedSonarqubeIssue.
type PatchedSonarqubeIssue struct {
	Id *int `json:"id,omitempty"`

	// Key SonarQube issue key
	Key *string `json:"key,omitempty"`

	// Status SonarQube issue status
	Status *string `json:"status,omitempty"`

	// Type SonarQube issue type
	Type *string `json:"type,omitempty"`
}

// PatchedSonarqubeIssueTransition defines model for PatchedSonarqubeIssueTransition.
type PatchedSonarqubeIssueTransition struct {
	Created         *time.Time `json:"created,omitempty"`
	FindingStatus   *string    `json:"finding_status,omitempty"`
	Id              *int       `json:"id,omitempty"`
	SonarqubeIssue  *int       `json:"sonarqube_issue,omitempty"`
	SonarqubeStatus *string    `json:"sonarqube_status,omitempty"`
	Transitions     *string    `json:"transitions,omitempty"`
}

// PatchedStubFinding defines model for PatchedStubFinding.
type PatchedStubFinding struct {
	Date        *openapi_types.Date `json:"date,omitempty"`
	Description *string             `json:"description"`
	Id          *int                `json:"id,omitempty"`
	Reporter    *int                `json:"reporter,omitempty"`
	Severity    *string             `json:"severity"`
	Test        *int                `json:"test,omitempty"`
	Title       *string             `json:"title,omitempty"`
}

// PatchedSystemSettings defines model for PatchedSystemSettings.
type PatchedSystemSettings struct {
	// AllowAnonymousSurveyRepsonse Enable anyone with a link to the survey to answer a survey
	AllowAnonymousSurveyRepsonse *bool   `json:"allow_anonymous_survey_repsonse,omitempty"`
	ColumnWidths                 *string `json:"column_widths,omitempty"`
	Credentials                  *string `json:"credentials,omitempty"`

	// DefaultGroup New users will be assigned to this group.
	DefaultGroup *int `json:"default_group"`

	// DefaultGroupEmailPattern New users will only be assigned to the default group, when their email address matches this regex pattern. This is optional condition.
	DefaultGroupEmailPattern *string `json:"default_group_email_pattern,omitempty"`

	// DefaultGroupRole New users will be assigned to their default group with this role.
	DefaultGroupRole *int `json:"default_group_role"`

	// DeleteDuplicates Requires next setting: maximum number of duplicates to retain.
	DeleteDuplicates *bool `json:"delete_duplicates,omitempty"`

	// DisableJiraWebhookSecret Allows incoming requests without a secret (discouraged legacy behaviour)
	DisableJiraWebhookSecret *bool `json:"disable_jira_webhook_secret,omitempty"`

	// Disclaimer Include this custom disclaimer on all notifications and generated reports
	Disclaimer    *string              `json:"disclaimer,omitempty"`
	DriveFolderID *string              `json:"drive_folder_ID,omitempty"`
	EmailAddress  *openapi_types.Email `json:"email_address,omitempty"`
	EmailFrom     *string              `json:"email_from,omitempty"`

	// EnableAuditlog With this setting turned on, Dojo maintains an audit log of changes made to entities (Findings, Tests, Engagements, Procuts, ...)If you run big import you may want to disable this because the way django-auditlog currently works, there's a big performance hit. Especially during (re-)imports.
	EnableAuditlog *bool `json:"enable_auditlog,omitempty"`

	// EnableBenchmark Enables Benchmarks such as the OWASP ASVS (Application Security Verification Standard)
	EnableBenchmark *bool `json:"enable_benchmark,omitempty"`

	// EnableChecklists With this setting turned off, checklists will be disabled in the user interface.
	EnableChecklists *bool `json:"enable_checklists,omitempty"`

	// EnableCredentials With this setting turned off, credentials will be disabled in the user interface.
	EnableCredentials *bool `json:"enable_credentials,omitempty"`

	// EnableDeduplication With this setting turned on, Dojo deduplicates findings by comparing endpoints, cwe fields, and titles. If two findings share a URL and have the same CWE or title, Dojo marks the less recent finding as a duplicate. When deduplication is enabled, a list of deduplicated findings is added to the engagement view.
	EnableDeduplication *bool `json:"enable_deduplication,omitempty"`

	// EnableEndpointMetadataImport With this setting turned off, endpoint metadata import will be disabled in the user interface.
	EnableEndpointMetadataImport *bool `json:"enable_endpoint_metadata_import,omitempty"`

	// EnableFindingSla Enables Finding SLA's for time to remediate.
	EnableFindingSla *bool `json:"enable_finding_sla,omitempty"`
	EnableGithub     *bool `json:"enable_github,omitempty"`

	// EnableGoogleSheets With this setting turned off, the Google sheets integration will be disabled in the user interface.
	EnableGoogleSheets *bool `json:"enable_google_sheets,omitempty"`
	EnableJira         *bool `json:"enable_jira,omitempty"`

	// EnableJiraWebHook Please note: It is strongly recommended to use a secret below and / or IP whitelist the JIRA server using a proxy such as Nginx.
	EnableJiraWebHook          *bool `json:"enable_jira_web_hook,omitempty"`
	EnableMailNotifications    *bool `json:"enable_mail_notifications,omitempty"`
	EnableMsteamsNotifications *bool `json:"enable_msteams_notifications,omitempty"`

	// EnableProductGrade Displays a grade letter next to a product to show the overall health.
	EnableProductGrade *bool `json:"enable_product_grade,omitempty"`

	// EnableProductTrackingFiles With this setting turned off, the product tracking files will be disabled in the user interface.
	EnableProductTrackingFiles *bool `json:"enable_product_tracking_files,omitempty"`

	// EnableQuestionnaires With this setting turned off, questionnaires will be disabled in the user interface.
	EnableQuestionnaires *bool `json:"enable_questionnaires,omitempty"`

	// EnableRulesFramework With this setting turned off, the rules framwork will be disabled in the user interface.
	EnableRulesFramework     *bool `json:"enable_rules_framework,omitempty"`
	EnableSlackNotifications *bool `json:"enable_slack_notifications,omitempty"`

	// EnableTemplateMatch Enables global remediation advice and matching on CWE and Title. The text will be replaced for mitigation, impact and references on a finding. Useful for providing consistent impact and remediation advice regardless of the scanner.
	EnableTemplateMatch *bool `json:"enable_template_match,omitempty"`

	// EnableUserProfileEditable When turned on users can edit their profiles
	EnableUserProfileEditable *bool `json:"enable_user_profile_editable,omitempty"`

	// EngagementAutoClose Closes an engagement after 3 days (default) past due date including last update.
	EngagementAutoClose *bool `json:"engagement_auto_close,omitempty"`

	// EngagementAutoCloseDays Closes an engagement after the specified number of days past due date including last update.
	EngagementAutoCloseDays *int `json:"engagement_auto_close_days,omitempty"`

	// FalsePositiveHistory DefectDojo will automatically mark the finding as a false positive if the finding has been previously marked as a false positive. Not needed when using deduplication, advised to not combine these two.
	FalsePositiveHistory *bool `json:"false_positive_history,omitempty"`
	Id                   *int  `json:"id,omitempty"`

	// JiraLabels JIRA issue labels space seperated
	JiraLabels          *string                                   `json:"jira_labels"`
	JiraMinimumSeverity *PatchedSystemSettingsJiraMinimumSeverity `json:"jira_minimum_severity"`

	// JiraWebhookSecret Secret needed in URL for incoming JIRA Webhook
	JiraWebhookSecret   *string `json:"jira_webhook_secret"`
	MailNotificationsTo *string `json:"mail_notifications_to,omitempty"`

	// MaxDupes When enabled, if a single issue reaches the maximum number of duplicates, the oldest will be deleted. Duplicate will not be deleted when left empty. A value of 0 will remove all duplicates.
	MaxDupes *int `json:"max_dupes"`

	// MsteamsUrl The full URL of the incoming webhook
	MsteamsUrl   *string `json:"msteams_url,omitempty"`
	ProductGrade *string `json:"product_grade,omitempty"`

	// ProductGradeA Percentage score for an 'A' >=
	ProductGradeA *int `json:"product_grade_a,omitempty"`

	// ProductGradeB Percentage score for a 'B' >=
	ProductGradeB *int `json:"product_grade_b,omitempty"`

	// ProductGradeC Percentage score for a 'C' >=
	ProductGradeC *int `json:"product_grade_c,omitempty"`

	// ProductGradeD Percentage score for a 'D' >=
	ProductGradeD *int `json:"product_grade_d,omitempty"`

	// ProductGradeF Percentage score for an 'F' <=
	ProductGradeF *int `json:"product_grade_f,omitempty"`

	// RiskAcceptanceFormDefaultDays Default expiry period for risk acceptance form.
	RiskAcceptanceFormDefaultDays *int `json:"risk_acceptance_form_default_days"`

	// RiskAcceptanceNotifyBeforeExpiration Notify X days before risk acceptance expires. Leave empty to disable.
	RiskAcceptanceNotifyBeforeExpiration *int `json:"risk_acceptance_notify_before_expiration"`

	// SlaCritical # of days to remediate a critical finding.
	SlaCritical *int `json:"sla_critical,omitempty"`

	// SlaHigh # of days to remediate a high finding.
	SlaHigh *int `json:"sla_high,omitempty"`

	// SlaLow # of days to remediate a low finding.
	SlaLow *int `json:"sla_low,omitempty"`

	// SlaMedium # of days to remediate a medium finding.
	SlaMedium *int `json:"sla_medium,omitempty"`

	// SlackChannel Optional. Needed if you want to send global notifications.
	SlackChannel *string `json:"slack_channel,omitempty"`

	// SlackToken Token required for interacting with Slack. Get one at https://api.slack.com/tokens
	SlackToken *string `json:"slack_token,omitempty"`

	// SlackUsername Optional. Will take your bot name otherwise.
	SlackUsername *string `json:"slack_username,omitempty"`

	// StaffUserEmailPattern When the email address of a new user created by OAuth2 matches this regex pattern, their is_staff flag will be set to True.
	StaffUserEmailPattern *string                        `json:"staff_user_email_pattern,omitempty"`
	TeamName              *string                        `json:"team_name,omitempty"`
	TimeZone              *PatchedSystemSettingsTimeZone `json:"time_zone,omitempty"`

	// UrlPrefix URL prefix if DefectDojo is installed in it's own virtual subdirectory.
	UrlPrefix *string `json:"url_prefix,omitempty"`
}

// PatchedSystemSettingsJiraMinimumSeverity defines model for PatchedSystemSettings.JiraMinimumSeverity.
type PatchedSystemSettingsJiraMinimumSeverity string

// PatchedSystemSettingsTimeZone defines model for PatchedSystemSettings.TimeZone.
type PatchedSystemSettingsTimeZone string

// PatchedTag defines model for PatchedTag.
type PatchedTag struct {
	Tags *[]string `json:"tags,omitempty"`
}

// PatchedTest defines model for PatchedTest.
type PatchedTest struct {
	ActualTime           *string `json:"actual_time,omitempty"`
	ApiScanConfiguration *int    `json:"api_scan_configuration"`

	// BranchTag Tag or branch that was tested, a reimport may update this field.
	BranchTag *string `json:"branch_tag"`

	// BuildId Build ID that was tested, a reimport may update this field.
	BuildId *string `json:"build_id"`

	// CommitHash Commit hash tested, a reimport may update this field.
	CommitHash      *string         `json:"commit_hash"`
	Created         *time.Time      `json:"created,omitempty"`
	Description     *string         `json:"description"`
	Engagement      *int            `json:"engagement,omitempty"`
	Environment     *int            `json:"environment"`
	EstimatedTime   *string         `json:"estimated_time,omitempty"`
	Files           *[]File         `json:"files,omitempty"`
	FindingGroups   *[]FindingGroup `json:"finding_groups,omitempty"`
	Id              *int            `json:"id,omitempty"`
	Lead            *int            `json:"lead"`
	Notes           *[]Note         `json:"notes,omitempty"`
	PercentComplete *int            `json:"percent_complete"`
	ScanType        *string         `json:"scan_type"`
	Tags            *[]string       `json:"tags,omitempty"`
	TargetEnd       *time.Time      `json:"target_end,omitempty"`
	TargetStart     *time.Time      `json:"target_start,omitempty"`
	TestType        *int            `json:"test_type,omitempty"`
	TestTypeName    *string         `json:"test_type_name,omitempty"`
	Title           *string         `json:"title"`
	Updated         *time.Time      `json:"updated,omitempty"`
	Version         *string         `json:"version"`
}

// PatchedTestImport defines model for PatchedTestImport.
type PatchedTestImport struct {
	// BranchTag Tag or branch that was tested, a reimport may update this field.
	BranchTag *string `json:"branch_tag"`

	// BuildId Build ID that was tested, a reimport may update this field.
	BuildId *string `json:"build_id"`

	// CommitHash Commit hash tested, a reimport may update this field.
	CommitHash                 *string                    `json:"commit_hash"`
	Created                    *time.Time                 `json:"created,omitempty"`
	FindingsAffected           *[]int                     `json:"findings_affected,omitempty"`
	Id                         *int                       `json:"id,omitempty"`
	ImportSettings             *map[string]interface{}    `json:"import_settings"`
	Modified                   *time.Time                 `json:"modified,omitempty"`
	Test                       *int                       `json:"test,omitempty"`
	TestImportFindingActionSet *[]TestImportFindingAction `json:"test_import_finding_action_set,omitempty"`
	Type                       *string                    `json:"type,omitempty"`
	Version                    *string                    `json:"version"`
}

// PatchedTestType defines model for PatchedTestType.
type PatchedTestType struct {
	Active      *bool     `json:"active,omitempty"`
	DynamicTool *bool     `json:"dynamic_tool,omitempty"`
	Id          *int      `json:"id,omitempty"`
	Name        *string   `json:"name,omitempty"`
	StaticTool  *bool     `json:"static_tool,omitempty"`
	Tags        *[]string `json:"tags,omitempty"`
}

// PatchedToolConfiguration defines model for PatchedToolConfiguration.
type PatchedToolConfiguration struct {
	ApiKey             *string                                     `json:"api_key"`
	AuthTitle          *string                                     `json:"auth_title"`
	AuthenticationType *PatchedToolConfigurationAuthenticationType `json:"authentication_type"`
	ConfigurationUrl   *string                                     `json:"configuration_url,omitempty"`
	Description        *string                                     `json:"description"`

	// Extras Additional definitions that will be consumed by scanner
	Extras   *string `json:"extras"`
	Id       *int    `json:"id,omitempty"`
	Name     *string `json:"name,omitempty"`
	Password *string `json:"password"`
	Ssh      *string `json:"ssh"`
	ToolType *int    `json:"tool_type,omitempty"`
	Url      *string `json:"url"`
	Username *string `json:"username"`
}

// PatchedToolConfigurationAuthenticationType defines model for PatchedToolConfiguration.AuthenticationType.
type PatchedToolConfigurationAuthenticationType string

// PatchedToolProductSettings defines model for PatchedToolProductSettings.
type PatchedToolProductSettings struct {
	Description       *string `json:"description"`
	Id                *int    `json:"id,omitempty"`
	Name              *string `json:"name,omitempty"`
	Notes             *[]int  `json:"notes,omitempty"`
	Product           *int    `json:"product,omitempty"`
	SettingUrl        *string `json:"setting_url,omitempty"`
	ToolConfiguration *int    `json:"tool_configuration,omitempty"`
	ToolProjectId     *string `json:"tool_project_id"`
	Url               *string `json:"url"`
}

// PatchedToolType defines model for PatchedToolType.
type PatchedToolType struct {
	Description *string `json:"description"`
	Id          *int    `json:"id,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// PatchedUser defines model for PatchedUser.
type PatchedUser struct {
	Email     *openapi_types.Email `json:"email,omitempty"`
	FirstName *string              `json:"first_name,omitempty"`
	Id        *int                 `json:"id,omitempty"`

	// IsActive Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
	IsActive *bool `json:"is_active,omitempty"`

	// IsSuperuser Designates that this user has all permissions without explicitly assigning them.
	IsSuperuser *bool      `json:"is_superuser,omitempty"`
	LastLogin   *time.Time `json:"last_login,omitempty"`
	LastName    *string    `json:"last_name,omitempty"`
	Password    *string    `json:"password,omitempty"`

	// Username Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
	Username *string `json:"username,omitempty"`
}

// PatchedUserContactInfo defines model for PatchedUserContactInfo.
type PatchedUserContactInfo struct {
	// BlockExecution Instead of async deduping a finding the findings will be deduped synchronously and will 'block' the user until completion.
	BlockExecution *bool `json:"block_execution,omitempty"`

	// CellNumber Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.
	CellNumber *string `json:"cell_number,omitempty"`

	// ForcePasswordReset Forces this user to reset their password on next login.
	ForcePasswordReset *bool   `json:"force_password_reset,omitempty"`
	GithubUsername     *string `json:"github_username"`
	Id                 *int    `json:"id,omitempty"`

	// PhoneNumber Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.
	PhoneNumber *string `json:"phone_number,omitempty"`
	SlackUserId *string `json:"slack_user_id"`

	// SlackUsername Email address associated with your slack account
	SlackUsername   *string `json:"slack_username"`
	Title           *string `json:"title"`
	TwitterUsername *string `json:"twitter_username"`
	User            *int    `json:"user,omitempty"`
}

// Product defines model for Product.
type Product struct {
	AuthorizationGroups *[]int                      `json:"authorization_groups,omitempty"`
	BusinessCriticality *ProductBusinessCriticality `json:"business_criticality"`
	Created             *time.Time                  `json:"created,omitempty"`
	Description         string                      `json:"description"`

	// EnableFullRiskAcceptance Allows full risk acceptance using a risk acceptance form, expiration date, uploaded proof, etc.
	EnableFullRiskAcceptance *bool `json:"enable_full_risk_acceptance,omitempty"`

	// EnableSimpleRiskAcceptance Allows simple risk acceptance by checking/unchecking a checkbox.
	EnableSimpleRiskAcceptance *bool `json:"enable_simple_risk_acceptance,omitempty"`

	// ExternalAudience Specify if the application is used by people outside the organization.
	ExternalAudience *bool  `json:"external_audience,omitempty"`
	FindingsCount    *int   `json:"findings_count,omitempty"`
	FindingsList     *[]int `json:"findings_list,omitempty"`
	Id               *int   `json:"id,omitempty"`

	// InternetAccessible Specify if the application is accessible from the public internet.
	InternetAccessible *bool             `json:"internet_accessible,omitempty"`
	Lifecycle          *ProductLifecycle `json:"lifecycle"`
	Members            *[]int            `json:"members,omitempty"`
	Name               string            `json:"name"`
	Origin             *ProductOrigin    `json:"origin"`
	Platform           *ProductPlatform  `json:"platform"`
	Prefetch           *struct {
		AuthorizationGroups *map[string]DojoGroup   `json:"authorization_groups,omitempty"`
		Members             *map[string]UserStub    `json:"members,omitempty"`
		ProdType            *map[string]ProductType `json:"prod_type,omitempty"`
		ProductManager      *map[string]UserStub    `json:"product_manager,omitempty"`
		Regulations         *map[string]Regulation  `json:"regulations,omitempty"`
		TeamManager         *map[string]UserStub    `json:"team_manager,omitempty"`
		TechnicalContact    *map[string]UserStub    `json:"technical_contact,omitempty"`
	} `json:"prefetch,omitempty"`
	ProdNumericGrade *int           `json:"prod_numeric_grade"`
	ProdType         int            `json:"prod_type"`
	ProductManager   *int           `json:"product_manager"`
	ProductMeta      *[]ProductMeta `json:"product_meta,omitempty"`
	Regulations      *[]int         `json:"regulations,omitempty"`

	// Revenue Estimate the application's revenue.
	Revenue          *string   `json:"revenue"`
	Tags             *[]string `json:"tags,omitempty"`
	TeamManager      *int      `json:"team_manager"`
	TechnicalContact *int      `json:"technical_contact"`

	// UserRecords Estimate the number of user records within the application.
	UserRecords *int `json:"user_records"`
}

// ProductBusinessCriticality defines model for Product.BusinessCriticality.
type ProductBusinessCriticality string

// ProductLifecycle defines model for Product.Lifecycle.
type ProductLifecycle string

// ProductOrigin defines model for Product.Origin.
type ProductOrigin string

// ProductPlatform defines model for Product.Platform.
type ProductPlatform string

// ProductAPIScanConfiguration defines model for ProductAPIScanConfiguration.
type ProductAPIScanConfiguration struct {
	Id                *int    `json:"id,omitempty"`
	Product           int     `json:"product"`
	ServiceKey1       *string `json:"service_key_1"`
	ServiceKey2       *string `json:"service_key_2"`
	ServiceKey3       *string `json:"service_key_3"`
	ToolConfiguration int     `json:"tool_configuration"`
}

// ProductGroup defines model for ProductGroup.
type ProductGroup struct {
	Group    int  `json:"group"`
	Id       *int `json:"id,omitempty"`
	Prefetch *struct {
		Group   *map[string]DojoGroup `json:"group,omitempty"`
		Product *map[string]Product   `json:"product,omitempty"`
		Role    *map[string]Role      `json:"role,omitempty"`
	} `json:"prefetch,omitempty"`
	Product int `json:"product"`
	Role    int `json:"role"`
}

// ProductMember defines model for ProductMember.
type ProductMember struct {
	Id       *int `json:"id,omitempty"`
	Prefetch *struct {
		Product *map[string]Product  `json:"product,omitempty"`
		Role    *map[string]Role     `json:"role,omitempty"`
		User    *map[string]UserStub `json:"user,omitempty"`
	} `json:"prefetch,omitempty"`
	Product int `json:"product"`
	Role    int `json:"role"`
	User    int `json:"user"`
}

// ProductMeta defines model for ProductMeta.
type ProductMeta struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

// ProductType defines model for ProductType.
type ProductType struct {
	AuthorizationGroups *[]int     `json:"authorization_groups,omitempty"`
	Created             *time.Time `json:"created,omitempty"`
	CriticalProduct     *bool      `json:"critical_product,omitempty"`
	Description         *string    `json:"description"`
	Id                  *int       `json:"id,omitempty"`
	KeyProduct          *bool      `json:"key_product,omitempty"`
	Members             *[]int     `json:"members,omitempty"`
	Name                string     `json:"name"`
	Prefetch            *struct {
		AuthorizationGroups *map[string]DojoGroup `json:"authorization_groups,omitempty"`
		Members             *map[string]UserStub  `json:"members,omitempty"`
	} `json:"prefetch,omitempty"`
	Updated *time.Time `json:"updated,omitempty"`
}

// ProductTypeGroup defines model for ProductTypeGroup.
type ProductTypeGroup struct {
	Group    int  `json:"group"`
	Id       *int `json:"id,omitempty"`
	Prefetch *struct {
		Group       *map[string]DojoGroup   `json:"group,omitempty"`
		ProductType *map[string]ProductType `json:"product_type,omitempty"`
		Role        *map[string]Role        `json:"role,omitempty"`
	} `json:"prefetch,omitempty"`
	ProductType int `json:"product_type"`
	Role        int `json:"role"`
}

// ProductTypeMember defines model for ProductTypeMember.
type ProductTypeMember struct {
	Id       *int `json:"id,omitempty"`
	Prefetch *struct {
		ProductType *map[string]ProductType `json:"product_type,omitempty"`
		Role        *map[string]Role        `json:"role,omitempty"`
		User        *map[string]UserStub    `json:"user,omitempty"`
	} `json:"prefetch,omitempty"`
	ProductType int `json:"product_type"`
	Role        int `json:"role"`
	User        int `json:"user"`
}

// ReImportScan defines model for ReImportScan.
type ReImportScan struct {
	Active               *bool   `json:"active,omitempty"`
	ApiScanConfiguration *int    `json:"api_scan_configuration"`
	AutoCreateContext    *bool   `json:"auto_create_context,omitempty"`
	BranchTag            *string `json:"branch_tag,omitempty"`
	BuildId              *string `json:"build_id,omitempty"`
	CloseOldFindings     *bool   `json:"close_old_findings,omitempty"`
	CommitHash           *string `json:"commit_hash,omitempty"`
	EndpointToAdd        *int    `json:"endpoint_to_add,omitempty"`
	EngagementId         *int    `json:"engagement_id,omitempty"`
	EngagementName       *string `json:"engagement_name,omitempty"`
	Environment          *string `json:"environment,omitempty"`
	File                 *string `json:"file,omitempty"`

	// GroupBy Choose an option to automatically group new findings by the chosen option.
	GroupBy         *ReImportScanGroupBy         `json:"group_by,omitempty"`
	Lead            *int                         `json:"lead"`
	MinimumSeverity *ReImportScanMinimumSeverity `json:"minimum_severity,omitempty"`
	ProductId       *int                         `json:"product_id,omitempty"`
	ProductName     *string                      `json:"product_name,omitempty"`
	ProductTypeId   *int                         `json:"product_type_id,omitempty"`
	ProductTypeName *string                      `json:"product_type_name,omitempty"`
	PushToJira      *bool                        `json:"push_to_jira,omitempty"`
	ScanDate        *openapi_types.Date          `json:"scan_date,omitempty"`
	ScanType        ReImportScanScanType         `json:"scan_type"`

	// Service A service is a self-contained piece of functionality within a Product. This is an optional field which is used in deduplication and closing of old findings when set. This affects the whole engagement/product depending on your deduplication scope.
	Service    *string           `json:"service,omitempty"`
	Statistics *ImportStatistics `json:"statistics,omitempty"`
	Tags       *[]string         `json:"tags,omitempty"`
	Test       *int              `json:"test,omitempty"`
	TestId     *int              `json:"test_id,omitempty"`
	TestTitle  *string           `json:"test_title,omitempty"`
	Verified   *bool             `json:"verified,omitempty"`
	Version    *string           `json:"version,omitempty"`
}

// ReImportScanGroupBy Choose an option to automatically group new findings by the chosen option.
type ReImportScanGroupBy string

// ReImportScanMinimumSeverity defines model for ReImportScan.MinimumSeverity.
type ReImportScanMinimumSeverity string

// ReImportScanScanType defines model for ReImportScan.ScanType.
type ReImportScanScanType string

// Regulation defines model for Regulation.
type Regulation struct {
	// Acronym A shortened representation of the name.
	Acronym string `json:"acronym"`

	// Category The subject of the regulation.
	Category RegulationCategory `json:"category"`

	// Description Information about the regulation's purpose.
	Description *string `json:"description,omitempty"`
	Id          *int    `json:"id,omitempty"`

	// Jurisdiction The territory over which the regulation applies.
	Jurisdiction string `json:"jurisdiction"`

	// Name The name of the regulation.
	Name string `json:"name"`

	// Reference An external URL for more information.
	Reference *string `json:"reference,omitempty"`
}

// RegulationCategory The subject of the regulation.
type RegulationCategory string

// ReportGenerate defines model for ReportGenerate.
type ReportGenerate struct {
	Endpoint         *Endpoint         `json:"endpoint,omitempty"`
	Endpoints        *[]Endpoint       `json:"endpoints,omitempty"`
	Engagement       *Engagement       `json:"engagement,omitempty"`
	ExecutiveSummary *ExecutiveSummary `json:"executive_summary"`
	FindingNotes     *[]FindingToNotes `json:"finding_notes"`
	Findings         *[]Finding        `json:"findings,omitempty"`
	Host             string            `json:"host"`
	Product          *Product          `json:"product,omitempty"`
	ProductType      *ProductType      `json:"product_type,omitempty"`
	ReportInfo       string            `json:"report_info"`
	ReportName       string            `json:"report_name"`
	TeamName         string            `json:"team_name"`
	Test             *Test             `json:"test,omitempty"`
	Title            string            `json:"title"`
	User             *UserStub         `json:"user,omitempty"`
	UserId           int               `json:"user_id"`
}

// ReportGenerateOption defines model for ReportGenerateOption.
type ReportGenerateOption struct {
	IncludeExecutiveSummary *bool `json:"include_executive_summary,omitempty"`
	IncludeFindingImages    *bool `json:"include_finding_images,omitempty"`
	IncludeFindingNotes     *bool `json:"include_finding_notes,omitempty"`
	IncludeTableOfContents  *bool `json:"include_table_of_contents,omitempty"`
}

// RiskAcceptance defines model for RiskAcceptance.
type RiskAcceptance struct {
	// AcceptedBy The person that accepts the risk, can be outside of DefectDojo.
	AcceptedBy       *string    `json:"accepted_by"`
	AcceptedFindings []int      `json:"accepted_findings"`
	Created          *time.Time `json:"created,omitempty"`

	// Decision Risk treatment decision by risk owner
	Decision *RiskAcceptanceDecision `json:"decision,omitempty"`

	// DecisionDetails If a compensating control exists to mitigate the finding or reduce risk, then list the compensating control(s).
	DecisionDetails *string `json:"decision_details"`

	// ExpirationDate When the risk acceptance expires, the findings will be reactivated (unless disabled below).
	ExpirationDate *time.Time `json:"expiration_date"`

	// ExpirationDateHandled (readonly) When the risk acceptance expiration was handled (manually or by the daily job).
	ExpirationDateHandled *time.Time `json:"expiration_date_handled"`

	// ExpirationDateWarned (readonly) Date at which notice about the risk acceptance expiration was sent.
	ExpirationDateWarned *time.Time `json:"expiration_date_warned"`
	Id                   *int       `json:"id,omitempty"`

	// Name Descriptive name which in the future may also be used to group risk acceptances together across engagements and products
	Name  string `json:"name"`
	Notes *[]int `json:"notes,omitempty"`

	// Owner User in DefectDojo owning this acceptance. Only the owner and staff users can edit the risk acceptance.
	Owner int     `json:"owner"`
	Path  *string `json:"path"`

	// ReactivateExpired Reactivate findings when risk acceptance expires?
	ReactivateExpired *bool `json:"reactivate_expired,omitempty"`

	// Recommendation Recommendation from the security team.
	Recommendation *RiskAcceptanceRecommendation `json:"recommendation,omitempty"`

	// RecommendationDetails Explanation of security recommendation
	RecommendationDetails *string `json:"recommendation_details"`

	// RestartSlaExpired When enabled, the SLA for findings is restarted when the risk acceptance expires.
	RestartSlaExpired *bool      `json:"restart_sla_expired,omitempty"`
	Updated           *time.Time `json:"updated,omitempty"`
}

// RiskAcceptanceDecision Risk treatment decision by risk owner
type RiskAcceptanceDecision string

// RiskAcceptanceRecommendation Recommendation from the security team.
type RiskAcceptanceRecommendation string

// Role defines model for Role.
type Role struct {
	Id      *int   `json:"id,omitempty"`
	IsOwner *bool  `json:"is_owner,omitempty"`
	Name    string `json:"name"`
}

// SeverityStatusStatistics defines model for SeverityStatusStatistics.
type SeverityStatusStatistics struct {
	Critical StatusStatistics `json:"critical"`
	High     StatusStatistics `json:"high"`
	Info     StatusStatistics `json:"info"`
	Low      StatusStatistics `json:"low"`
	Medium   StatusStatistics `json:"medium"`
	Total    StatusStatistics `json:"total"`
}

// SonarqubeIssue defines model for SonarqubeIssue.
type SonarqubeIssue struct {
	Id *int `json:"id,omitempty"`

	// Key SonarQube issue key
	Key string `json:"key"`

	// Status SonarQube issue status
	Status string `json:"status"`

	// Type SonarQube issue type
	Type string `json:"type"`
}

// SonarqubeIssueTransition defines model for SonarqubeIssueTransition.
type SonarqubeIssueTransition struct {
	Created         *time.Time `json:"created,omitempty"`
	FindingStatus   string     `json:"finding_status"`
	Id              *int       `json:"id,omitempty"`
	SonarqubeIssue  int        `json:"sonarqube_issue"`
	SonarqubeStatus string     `json:"sonarqube_status"`
	Transitions     string     `json:"transitions"`
}

// StatusStatistics defines model for StatusStatistics.
type StatusStatistics struct {
	Active       int `json:"active"`
	Duplicate    int `json:"duplicate"`
	FalseP       int `json:"false_p"`
	IsMitigated  int `json:"is_mitigated"`
	OutOfScope   int `json:"out_of_scope"`
	RiskAccepted int `json:"risk_accepted"`
	Total        int `json:"total"`
	Verified     int `json:"verified"`
}

// StubFinding defines model for StubFinding.
type StubFinding struct {
	Date        *openapi_types.Date `json:"date,omitempty"`
	Description *string             `json:"description"`
	Id          *int                `json:"id,omitempty"`
	Reporter    *int                `json:"reporter,omitempty"`
	Severity    *string             `json:"severity"`
	Test        *int                `json:"test,omitempty"`
	Title       string              `json:"title"`
}

// StubFindingCreate defines model for StubFindingCreate.
type StubFindingCreate struct {
	Date        *openapi_types.Date `json:"date,omitempty"`
	Description *string             `json:"description"`
	Id          *int                `json:"id,omitempty"`
	Reporter    *int                `json:"reporter,omitempty"`
	Severity    *string             `json:"severity"`
	Test        int                 `json:"test"`
	Title       string              `json:"title"`
}

// SystemSettings defines model for SystemSettings.
type SystemSettings struct {
	// AllowAnonymousSurveyRepsonse Enable anyone with a link to the survey to answer a survey
	AllowAnonymousSurveyRepsonse *bool   `json:"allow_anonymous_survey_repsonse,omitempty"`
	ColumnWidths                 *string `json:"column_widths,omitempty"`
	Credentials                  *string `json:"credentials,omitempty"`

	// DefaultGroup New users will be assigned to this group.
	DefaultGroup *int `json:"default_group"`

	// DefaultGroupEmailPattern New users will only be assigned to the default group, when their email address matches this regex pattern. This is optional condition.
	DefaultGroupEmailPattern *string `json:"default_group_email_pattern,omitempty"`

	// DefaultGroupRole New users will be assigned to their default group with this role.
	DefaultGroupRole *int `json:"default_group_role"`

	// DeleteDuplicates Requires next setting: maximum number of duplicates to retain.
	DeleteDuplicates *bool `json:"delete_duplicates,omitempty"`

	// DisableJiraWebhookSecret Allows incoming requests without a secret (discouraged legacy behaviour)
	DisableJiraWebhookSecret *bool `json:"disable_jira_webhook_secret,omitempty"`

	// Disclaimer Include this custom disclaimer on all notifications and generated reports
	Disclaimer    *string              `json:"disclaimer,omitempty"`
	DriveFolderID *string              `json:"drive_folder_ID,omitempty"`
	EmailAddress  *openapi_types.Email `json:"email_address,omitempty"`
	EmailFrom     *string              `json:"email_from,omitempty"`

	// EnableAuditlog With this setting turned on, Dojo maintains an audit log of changes made to entities (Findings, Tests, Engagements, Procuts, ...)If you run big import you may want to disable this because the way django-auditlog currently works, there's a big performance hit. Especially during (re-)imports.
	EnableAuditlog *bool `json:"enable_auditlog,omitempty"`

	// EnableBenchmark Enables Benchmarks such as the OWASP ASVS (Application Security Verification Standard)
	EnableBenchmark *bool `json:"enable_benchmark,omitempty"`

	// EnableChecklists With this setting turned off, checklists will be disabled in the user interface.
	EnableChecklists *bool `json:"enable_checklists,omitempty"`

	// EnableCredentials With this setting turned off, credentials will be disabled in the user interface.
	EnableCredentials *bool `json:"enable_credentials,omitempty"`

	// EnableDeduplication With this setting turned on, Dojo deduplicates findings by comparing endpoints, cwe fields, and titles. If two findings share a URL and have the same CWE or title, Dojo marks the less recent finding as a duplicate. When deduplication is enabled, a list of deduplicated findings is added to the engagement view.
	EnableDeduplication *bool `json:"enable_deduplication,omitempty"`

	// EnableEndpointMetadataImport With this setting turned off, endpoint metadata import will be disabled in the user interface.
	EnableEndpointMetadataImport *bool `json:"enable_endpoint_metadata_import,omitempty"`

	// EnableFindingSla Enables Finding SLA's for time to remediate.
	EnableFindingSla *bool `json:"enable_finding_sla,omitempty"`
	EnableGithub     *bool `json:"enable_github,omitempty"`

	// EnableGoogleSheets With this setting turned off, the Google sheets integration will be disabled in the user interface.
	EnableGoogleSheets *bool `json:"enable_google_sheets,omitempty"`
	EnableJira         *bool `json:"enable_jira,omitempty"`

	// EnableJiraWebHook Please note: It is strongly recommended to use a secret below and / or IP whitelist the JIRA server using a proxy such as Nginx.
	EnableJiraWebHook          *bool `json:"enable_jira_web_hook,omitempty"`
	EnableMailNotifications    *bool `json:"enable_mail_notifications,omitempty"`
	EnableMsteamsNotifications *bool `json:"enable_msteams_notifications,omitempty"`

	// EnableProductGrade Displays a grade letter next to a product to show the overall health.
	EnableProductGrade *bool `json:"enable_product_grade,omitempty"`

	// EnableProductTrackingFiles With this setting turned off, the product tracking files will be disabled in the user interface.
	EnableProductTrackingFiles *bool `json:"enable_product_tracking_files,omitempty"`

	// EnableQuestionnaires With this setting turned off, questionnaires will be disabled in the user interface.
	EnableQuestionnaires *bool `json:"enable_questionnaires,omitempty"`

	// EnableRulesFramework With this setting turned off, the rules framwork will be disabled in the user interface.
	EnableRulesFramework     *bool `json:"enable_rules_framework,omitempty"`
	EnableSlackNotifications *bool `json:"enable_slack_notifications,omitempty"`

	// EnableTemplateMatch Enables global remediation advice and matching on CWE and Title. The text will be replaced for mitigation, impact and references on a finding. Useful for providing consistent impact and remediation advice regardless of the scanner.
	EnableTemplateMatch *bool `json:"enable_template_match,omitempty"`

	// EnableUserProfileEditable When turned on users can edit their profiles
	EnableUserProfileEditable *bool `json:"enable_user_profile_editable,omitempty"`

	// EngagementAutoClose Closes an engagement after 3 days (default) past due date including last update.
	EngagementAutoClose *bool `json:"engagement_auto_close,omitempty"`

	// EngagementAutoCloseDays Closes an engagement after the specified number of days past due date including last update.
	EngagementAutoCloseDays *int `json:"engagement_auto_close_days,omitempty"`

	// FalsePositiveHistory DefectDojo will automatically mark the finding as a false positive if the finding has been previously marked as a false positive. Not needed when using deduplication, advised to not combine these two.
	FalsePositiveHistory *bool `json:"false_positive_history,omitempty"`
	Id                   *int  `json:"id,omitempty"`

	// JiraLabels JIRA issue labels space seperated
	JiraLabels          *string                            `json:"jira_labels"`
	JiraMinimumSeverity *SystemSettingsJiraMinimumSeverity `json:"jira_minimum_severity"`

	// JiraWebhookSecret Secret needed in URL for incoming JIRA Webhook
	JiraWebhookSecret   *string `json:"jira_webhook_secret"`
	MailNotificationsTo *string `json:"mail_notifications_to,omitempty"`

	// MaxDupes When enabled, if a single issue reaches the maximum number of duplicates, the oldest will be deleted. Duplicate will not be deleted when left empty. A value of 0 will remove all duplicates.
	MaxDupes *int `json:"max_dupes"`

	// MsteamsUrl The full URL of the incoming webhook
	MsteamsUrl   *string `json:"msteams_url,omitempty"`
	ProductGrade *string `json:"product_grade,omitempty"`

	// ProductGradeA Percentage score for an 'A' >=
	ProductGradeA *int `json:"product_grade_a,omitempty"`

	// ProductGradeB Percentage score for a 'B' >=
	ProductGradeB *int `json:"product_grade_b,omitempty"`

	// ProductGradeC Percentage score for a 'C' >=
	ProductGradeC *int `json:"product_grade_c,omitempty"`

	// ProductGradeD Percentage score for a 'D' >=
	ProductGradeD *int `json:"product_grade_d,omitempty"`

	// ProductGradeF Percentage score for an 'F' <=
	ProductGradeF *int `json:"product_grade_f,omitempty"`

	// RiskAcceptanceFormDefaultDays Default expiry period for risk acceptance form.
	RiskAcceptanceFormDefaultDays *int `json:"risk_acceptance_form_default_days"`

	// RiskAcceptanceNotifyBeforeExpiration Notify X days before risk acceptance expires. Leave empty to disable.
	RiskAcceptanceNotifyBeforeExpiration *int `json:"risk_acceptance_notify_before_expiration"`

	// SlaCritical # of days to remediate a critical finding.
	SlaCritical *int `json:"sla_critical,omitempty"`

	// SlaHigh # of days to remediate a high finding.
	SlaHigh *int `json:"sla_high,omitempty"`

	// SlaLow # of days to remediate a low finding.
	SlaLow *int `json:"sla_low,omitempty"`

	// SlaMedium # of days to remediate a medium finding.
	SlaMedium *int `json:"sla_medium,omitempty"`

	// SlackChannel Optional. Needed if you want to send global notifications.
	SlackChannel *string `json:"slack_channel,omitempty"`

	// SlackToken Token required for interacting with Slack. Get one at https://api.slack.com/tokens
	SlackToken *string `json:"slack_token,omitempty"`

	// SlackUsername Optional. Will take your bot name otherwise.
	SlackUsername *string `json:"slack_username,omitempty"`

	// StaffUserEmailPattern When the email address of a new user created by OAuth2 matches this regex pattern, their is_staff flag will be set to True.
	StaffUserEmailPattern *string                 `json:"staff_user_email_pattern,omitempty"`
	TeamName              *string                 `json:"team_name,omitempty"`
	TimeZone              *SystemSettingsTimeZone `json:"time_zone,omitempty"`

	// UrlPrefix URL prefix if DefectDojo is installed in it's own virtual subdirectory.
	UrlPrefix *string `json:"url_prefix,omitempty"`
}

// SystemSettingsJiraMinimumSeverity defines model for SystemSettings.JiraMinimumSeverity.
type SystemSettingsJiraMinimumSeverity string

// SystemSettingsTimeZone defines model for SystemSettings.TimeZone.
type SystemSettingsTimeZone string

// Tag defines model for Tag.
type Tag struct {
	Tags []string `json:"tags"`
}

// Test defines model for Test.
type Test struct {
	ActualTime           *string `json:"actual_time,omitempty"`
	ApiScanConfiguration *int    `json:"api_scan_configuration"`

	// BranchTag Tag or branch that was tested, a reimport may update this field.
	BranchTag *string `json:"branch_tag"`

	// BuildId Build ID that was tested, a reimport may update this field.
	BuildId *string `json:"build_id"`

	// CommitHash Commit hash tested, a reimport may update this field.
	CommitHash      *string         `json:"commit_hash"`
	Created         *time.Time      `json:"created,omitempty"`
	Description     *string         `json:"description"`
	Engagement      *int            `json:"engagement,omitempty"`
	Environment     *int            `json:"environment"`
	EstimatedTime   *string         `json:"estimated_time,omitempty"`
	Files           *[]File         `json:"files,omitempty"`
	FindingGroups   *[]FindingGroup `json:"finding_groups,omitempty"`
	Id              *int            `json:"id,omitempty"`
	Lead            *int            `json:"lead"`
	Notes           *[]Note         `json:"notes,omitempty"`
	PercentComplete *int            `json:"percent_complete"`
	ScanType        *string         `json:"scan_type"`
	Tags            *[]string       `json:"tags,omitempty"`
	TargetEnd       time.Time       `json:"target_end"`
	TargetStart     time.Time       `json:"target_start"`
	TestType        int             `json:"test_type"`
	TestTypeName    *string         `json:"test_type_name,omitempty"`
	Title           *string         `json:"title"`
	Updated         *time.Time      `json:"updated,omitempty"`
	Version         *string         `json:"version"`
}

// TestCreate defines model for TestCreate.
type TestCreate struct {
	ActualTime           *string `json:"actual_time,omitempty"`
	ApiScanConfiguration *int    `json:"api_scan_configuration"`

	// BranchTag Tag or branch that was tested, a reimport may update this field.
	BranchTag *string `json:"branch_tag"`

	// BuildId Build ID that was tested, a reimport may update this field.
	BuildId *string `json:"build_id"`

	// CommitHash Commit hash tested, a reimport may update this field.
	CommitHash      *string    `json:"commit_hash"`
	Created         *time.Time `json:"created,omitempty"`
	Description     *string    `json:"description"`
	Engagement      int        `json:"engagement"`
	Environment     *int       `json:"environment"`
	EstimatedTime   *string    `json:"estimated_time,omitempty"`
	Files           *[]int     `json:"files,omitempty"`
	Id              *int       `json:"id,omitempty"`
	Lead            *int       `json:"lead"`
	Notes           *[]int     `json:"notes,omitempty"`
	PercentComplete *int       `json:"percent_complete"`
	ScanType        *string    `json:"scan_type"`
	Tags            *[]string  `json:"tags,omitempty"`
	TargetEnd       time.Time  `json:"target_end"`
	TargetStart     time.Time  `json:"target_start"`
	TestType        int        `json:"test_type"`
	Title           *string    `json:"title"`
	Updated         *time.Time `json:"updated,omitempty"`
	Version         *string    `json:"version"`
}

// TestImport defines model for TestImport.
type TestImport struct {
	// BranchTag Tag or branch that was tested, a reimport may update this field.
	BranchTag *string `json:"branch_tag"`

	// BuildId Build ID that was tested, a reimport may update this field.
	BuildId *string `json:"build_id"`

	// CommitHash Commit hash tested, a reimport may update this field.
	CommitHash       *string                 `json:"commit_hash"`
	Created          *time.Time              `json:"created,omitempty"`
	FindingsAffected *[]int                  `json:"findings_affected,omitempty"`
	Id               *int                    `json:"id,omitempty"`
	ImportSettings   *map[string]interface{} `json:"import_settings"`
	Modified         *time.Time              `json:"modified,omitempty"`
	Prefetch         *struct {
		FindingsAffected *map[string]Finding `json:"findings_affected,omitempty"`
		Test             *map[string]Test    `json:"test,omitempty"`
	} `json:"prefetch,omitempty"`
	Test                       *int                       `json:"test,omitempty"`
	TestImportFindingActionSet *[]TestImportFindingAction `json:"test_import_finding_action_set,omitempty"`
	Type                       *string                    `json:"type,omitempty"`
	Version                    *string                    `json:"version"`
}

// TestImportFindingAction defines model for TestImportFindingAction.
type TestImportFindingAction struct {
	Action     *TestImportFindingActionAction `json:"action"`
	Created    *time.Time                     `json:"created,omitempty"`
	Finding    *int                           `json:"finding,omitempty"`
	Id         *int                           `json:"id,omitempty"`
	Modified   *time.Time                     `json:"modified,omitempty"`
	TestImport *int                           `json:"test_import,omitempty"`
}

// TestImportFindingActionAction defines model for TestImportFindingAction.Action.
type TestImportFindingActionAction string

// TestToFiles defines model for TestToFiles.
type TestToFiles struct {
	Files  []File `json:"files"`
	TestId *int   `json:"test_id"`
}

// TestToNotes defines model for TestToNotes.
type TestToNotes struct {
	Notes  []Note `json:"notes"`
	TestId *int   `json:"test_id"`
}

// TestType defines model for TestType.
type TestType struct {
	Active      *bool     `json:"active,omitempty"`
	DynamicTool *bool     `json:"dynamic_tool,omitempty"`
	Id          *int      `json:"id,omitempty"`
	Name        string    `json:"name"`
	StaticTool  *bool     `json:"static_tool,omitempty"`
	Tags        *[]string `json:"tags,omitempty"`
}

// ToolConfiguration defines model for ToolConfiguration.
type ToolConfiguration struct {
	ApiKey             *string                              `json:"api_key"`
	AuthTitle          *string                              `json:"auth_title"`
	AuthenticationType *ToolConfigurationAuthenticationType `json:"authentication_type"`
	ConfigurationUrl   string                               `json:"configuration_url"`
	Description        *string                              `json:"description"`

	// Extras Additional definitions that will be consumed by scanner
	Extras   *string `json:"extras"`
	Id       *int    `json:"id,omitempty"`
	Name     string  `json:"name"`
	Password *string `json:"password"`
	Ssh      *string `json:"ssh"`
	ToolType int     `json:"tool_type"`
	Url      *string `json:"url"`
	Username *string `json:"username"`
}

// ToolConfigurationAuthenticationType defines model for ToolConfiguration.AuthenticationType.
type ToolConfigurationAuthenticationType string

// ToolProductSettings defines model for ToolProductSettings.
type ToolProductSettings struct {
	Description       *string `json:"description"`
	Id                *int    `json:"id,omitempty"`
	Name              string  `json:"name"`
	Notes             *[]int  `json:"notes,omitempty"`
	Product           *int    `json:"product,omitempty"`
	SettingUrl        string  `json:"setting_url"`
	ToolConfiguration int     `json:"tool_configuration"`
	ToolProjectId     *string `json:"tool_project_id"`
	Url               *string `json:"url"`
}

// ToolType defines model for ToolType.
type ToolType struct {
	Description *string `json:"description"`
	Id          *int    `json:"id,omitempty"`
	Name        string  `json:"name"`
}

// User defines model for User.
type User struct {
	Email     *openapi_types.Email `json:"email,omitempty"`
	FirstName *string              `json:"first_name,omitempty"`
	Id        *int                 `json:"id,omitempty"`

	// IsActive Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
	IsActive *bool `json:"is_active,omitempty"`

	// IsSuperuser Designates that this user has all permissions without explicitly assigning them.
	IsSuperuser *bool      `json:"is_superuser,omitempty"`
	LastLogin   *time.Time `json:"last_login,omitempty"`
	LastName    *string    `json:"last_name,omitempty"`
	Password    *string    `json:"password,omitempty"`

	// Username Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
	Username string `json:"username"`
}

// UserContactInfo defines model for UserContactInfo.
type UserContactInfo struct {
	// BlockExecution Instead of async deduping a finding the findings will be deduped synchronously and will 'block' the user until completion.
	BlockExecution *bool `json:"block_execution,omitempty"`

	// CellNumber Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.
	CellNumber *string `json:"cell_number,omitempty"`

	// ForcePasswordReset Forces this user to reset their password on next login.
	ForcePasswordReset *bool   `json:"force_password_reset,omitempty"`
	GithubUsername     *string `json:"github_username"`
	Id                 *int    `json:"id,omitempty"`

	// PhoneNumber Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.
	PhoneNumber *string `json:"phone_number,omitempty"`
	Prefetch    *struct {
		User *map[string]UserStub `json:"user,omitempty"`
	} `json:"prefetch,omitempty"`
	SlackUserId *string `json:"slack_user_id"`

	// SlackUsername Email address associated with your slack account
	SlackUsername   *string `json:"slack_username"`
	Title           *string `json:"title"`
	TwitterUsername *string `json:"twitter_username"`
	User            int     `json:"user"`
}

// UserProfile defines model for UserProfile.
type UserProfile struct {
	DojoGroupMember   []DojoGroupMember   `json:"dojo_group_member"`
	GlobalRole        GlobalRole          `json:"global_role"`
	ProductMember     []ProductMember     `json:"product_member"`
	ProductTypeMember []ProductTypeMember `json:"product_type_member"`
	User              User                `json:"user"`
	UserContactInfo   UserContactInfo     `json:"user_contact_info"`
}

// UserStub defines model for UserStub.
type UserStub struct {
	FirstName *string `json:"first_name,omitempty"`
	Id        *int    `json:"id,omitempty"`
	LastName  *string `json:"last_name,omitempty"`

	// Username Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
	Username string `json:"username"`
}

// DevelopmentEnvironmentsListParams defines parameters for DevelopmentEnvironmentsList.
type DevelopmentEnvironmentsListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// DojoGroupMembersListParams defines parameters for DojoGroupMembersList.
type DojoGroupMembersListParams struct {
	GroupId *int `form:"group_id,omitempty" json:"group_id,omitempty"`
	Id      *int `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch *[]DojoGroupMembersListParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
	UserId   *int                                  `form:"user_id,omitempty" json:"user_id,omitempty"`
}

// DojoGroupMembersListParamsPrefetch defines parameters for DojoGroupMembersList.
type DojoGroupMembersListParamsPrefetch string

// DojoGroupMembersRetrieveParams defines parameters for DojoGroupMembersRetrieve.
type DojoGroupMembersRetrieveParams struct {
	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch *[]DojoGroupMembersRetrieveParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
}

// DojoGroupMembersRetrieveParamsPrefetch defines parameters for DojoGroupMembersRetrieve.
type DojoGroupMembersRetrieveParamsPrefetch string

// DojoGroupsListParams defines parameters for DojoGroupsList.
type DojoGroupsListParams struct {
	Id *int `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Name  *string `form:"name,omitempty" json:"name,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch *[]DojoGroupsListParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
}

// DojoGroupsListParamsPrefetch defines parameters for DojoGroupsList.
type DojoGroupsListParamsPrefetch string

// DojoGroupsRetrieveParams defines parameters for DojoGroupsRetrieve.
type DojoGroupsRetrieveParams struct {
	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch *[]DojoGroupsRetrieveParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
}

// DojoGroupsRetrieveParamsPrefetch defines parameters for DojoGroupsRetrieve.
type DojoGroupsRetrieveParamsPrefetch string

// EndpointStatusListParams defines parameters for EndpointStatusList.
type EndpointStatusListParams struct {
	Endpoint      *int  `form:"endpoint,omitempty" json:"endpoint,omitempty"`
	FalsePositive *bool `form:"false_positive,omitempty" json:"false_positive,omitempty"`
	Finding       *int  `form:"finding,omitempty" json:"finding,omitempty"`

	// Limit Number of results to return per page.
	Limit       *int  `form:"limit,omitempty" json:"limit,omitempty"`
	Mitigated   *bool `form:"mitigated,omitempty" json:"mitigated,omitempty"`
	MitigatedBy *int  `form:"mitigated_by,omitempty" json:"mitigated_by,omitempty"`

	// Offset The initial index from which to return the results.
	Offset       *int  `form:"offset,omitempty" json:"offset,omitempty"`
	OutOfScope   *bool `form:"out_of_scope,omitempty" json:"out_of_scope,omitempty"`
	RiskAccepted *bool `form:"risk_accepted,omitempty" json:"risk_accepted,omitempty"`
}

// EndpointsListParams defines parameters for EndpointsList.
type EndpointsListParams struct {
	Host *string `form:"host,omitempty" json:"host,omitempty"`
	Id   *int    `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// NotTag Not Tag name contains
	NotTag *string `form:"not_tag,omitempty" json:"not_tag,omitempty"`

	// NotTags Comma seperated list of exact tags not present on model
	NotTags *[]string `form:"not_tags,omitempty" json:"not_tags,omitempty"`

	// O Ordering
	O *[]EndpointsListParamsO `form:"o,omitempty" json:"o,omitempty"`

	// Offset The initial index from which to return the results.
	Offset  *int `form:"offset,omitempty" json:"offset,omitempty"`
	Product *int `form:"product,omitempty" json:"product,omitempty"`

	// Tag Tag name contains
	Tag *string `form:"tag,omitempty" json:"tag,omitempty"`

	// Tags Comma seperated list of exact tags
	Tags *[]string `form:"tags,omitempty" json:"tags,omitempty"`
}

// EndpointsListParamsO defines parameters for EndpointsList.
type EndpointsListParamsO string

// EngagementPresetsListParams defines parameters for EngagementPresetsList.
type EngagementPresetsListParams struct {
	Id *int `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset  *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Product *int    `form:"product,omitempty" json:"product,omitempty"`
	Title   *string `form:"title,omitempty" json:"title,omitempty"`
}

// EngagementsListParams defines parameters for EngagementsList.
type EngagementsListParams struct {
	Active  *bool `form:"active,omitempty" json:"active,omitempty"`
	ApiTest *bool `form:"api_test,omitempty" json:"api_test,omitempty"`
	Id      *int  `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Name  *string `form:"name,omitempty" json:"name,omitempty"`

	// NotProductTagsName Comma seperated list of exact tags not present on product
	NotProductTagsName *[]string `form:"not_product__tags__name,omitempty" json:"not_product__tags__name,omitempty"`

	// NotTag Not Tag name contains
	NotTag *string `form:"not_tag,omitempty" json:"not_tag,omitempty"`

	// NotTags Comma seperated list of exact tags not present on model
	NotTags *[]string `form:"not_tags,omitempty" json:"not_tags,omitempty"`

	// O Ordering
	O *[]EngagementsListParamsO `form:"o,omitempty" json:"o,omitempty"`

	// Offset The initial index from which to return the results.
	Offset  *int  `form:"offset,omitempty" json:"offset,omitempty"`
	PenTest *bool `form:"pen_test,omitempty" json:"pen_test,omitempty"`
	Product *int  `form:"product,omitempty" json:"product,omitempty"`

	// ProductProdType Multiple values may be separated by commas.
	ProductProdType *[]int `form:"product__prod_type,omitempty" json:"product__prod_type,omitempty"`

	// ProductTagsName Comma seperated list of exact tags present on product
	ProductTagsName *[]string                    `form:"product__tags__name,omitempty" json:"product__tags__name,omitempty"`
	ReportType      *int                         `form:"report_type,omitempty" json:"report_type,omitempty"`
	Requester       *int                         `form:"requester,omitempty" json:"requester,omitempty"`
	Status          *EngagementsListParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// Tag Tag name contains
	Tag *string `form:"tag,omitempty" json:"tag,omitempty"`

	// Tags Comma seperated list of exact tags
	Tags        *[]string           `form:"tags,omitempty" json:"tags,omitempty"`
	TargetEnd   *openapi_types.Date `form:"target_end,omitempty" json:"target_end,omitempty"`
	TargetStart *openapi_types.Date `form:"target_start,omitempty" json:"target_start,omitempty"`
	ThreatModel *bool               `form:"threat_model,omitempty" json:"threat_model,omitempty"`
	Updated     *time.Time          `form:"updated,omitempty" json:"updated,omitempty"`
	Version     *string             `form:"version,omitempty" json:"version,omitempty"`
}

// EngagementsListParamsO defines parameters for EngagementsList.
type EngagementsListParamsO string

// EngagementsListParamsStatus defines parameters for EngagementsList.
type EngagementsListParamsStatus string

// EngagementsAcceptRisksCreateJSONBody defines parameters for EngagementsAcceptRisksCreate.
type EngagementsAcceptRisksCreateJSONBody = []AcceptedRisk

// EngagementsAcceptRisksCreateFormdataBody defines parameters for EngagementsAcceptRisksCreate.
type EngagementsAcceptRisksCreateFormdataBody = struct {
}

// EngagementsAcceptRisksCreateMultipartBody defines parameters for EngagementsAcceptRisksCreate.
type EngagementsAcceptRisksCreateMultipartBody = []AcceptedRisk

// FindingTemplatesListParams defines parameters for FindingTemplatesList.
type FindingTemplatesListParams struct {
	Cwe         *int    `form:"cwe,omitempty" json:"cwe,omitempty"`
	Description *string `form:"description,omitempty" json:"description,omitempty"`
	Id          *int    `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit      *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Mitigation *string `form:"mitigation,omitempty" json:"mitigation,omitempty"`

	// NotTag Not Tag name contains
	NotTag *string `form:"not_tag,omitempty" json:"not_tag,omitempty"`

	// NotTags Comma seperated list of exact tags not present on model
	NotTags *[]string `form:"not_tags,omitempty" json:"not_tags,omitempty"`

	// O Ordering
	O *[]FindingTemplatesListParamsO `form:"o,omitempty" json:"o,omitempty"`

	// Offset The initial index from which to return the results.
	Offset   *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Severity *string `form:"severity,omitempty" json:"severity,omitempty"`

	// Tag Tag name contains
	Tag *string `form:"tag,omitempty" json:"tag,omitempty"`

	// Tags Comma seperated list of exact tags
	Tags  *[]string `form:"tags,omitempty" json:"tags,omitempty"`
	Title *string   `form:"title,omitempty" json:"title,omitempty"`
}

// FindingTemplatesListParamsO defines parameters for FindingTemplatesList.
type FindingTemplatesListParamsO string

// FindingsListParams defines parameters for FindingsList.
type FindingsListParams struct {
	Active           *bool   `form:"active,omitempty" json:"active,omitempty"`
	ComponentName    *string `form:"component_name,omitempty" json:"component_name,omitempty"`
	ComponentVersion *string `form:"component_version,omitempty" json:"component_version,omitempty"`

	// Created The date the finding was created inside DefectDojo.
	Created     *FindingsListParamsCreated `form:"created,omitempty" json:"created,omitempty"`
	Cve         *string                    `form:"cve,omitempty" json:"cve,omitempty"`
	Cvssv3      *string                    `form:"cvssv3,omitempty" json:"cvssv3,omitempty"`
	Cvssv3Score *float32                   `form:"cvssv3_score,omitempty" json:"cvssv3_score,omitempty"`

	// Cwe Multiple values may be separated by commas.
	Cwe *[]int `form:"cwe,omitempty" json:"cwe,omitempty"`

	// Date The date the flaw was discovered.
	Date *FindingsListParamsDate `form:"date,omitempty" json:"date,omitempty"`

	// DefectReviewRequestedBy Multiple values may be separated by commas.
	DefectReviewRequestedBy *[]int  `form:"defect_review_requested_by,omitempty" json:"defect_review_requested_by,omitempty"`
	Description             *string `form:"description,omitempty" json:"description,omitempty"`
	Duplicate               *bool   `form:"duplicate,omitempty" json:"duplicate,omitempty"`
	DuplicateFinding        *int    `form:"duplicate_finding,omitempty" json:"duplicate_finding,omitempty"`
	DynamicFinding          *bool   `form:"dynamic_finding,omitempty" json:"dynamic_finding,omitempty"`

	// Endpoints Multiple values may be separated by commas.
	Endpoints *[]int  `form:"endpoints,omitempty" json:"endpoints,omitempty"`
	FalseP    *bool   `form:"false_p,omitempty" json:"false_p,omitempty"`
	FilePath  *string `form:"file_path,omitempty" json:"file_path,omitempty"`

	// FindingGroup Multiple values may be separated by commas.
	FindingGroup *[]float32 `form:"finding_group,omitempty" json:"finding_group,omitempty"`

	// FoundBy Multiple values may be separated by commas.
	FoundBy  *[]int  `form:"found_by,omitempty" json:"found_by,omitempty"`
	HashCode *string `form:"hash_code,omitempty" json:"hash_code,omitempty"`

	// Id Multiple values may be separated by commas.
	Id          *[]int  `form:"id,omitempty" json:"id,omitempty"`
	Impact      *string `form:"impact,omitempty" json:"impact,omitempty"`
	IsMitigated *bool   `form:"is_mitigated,omitempty" json:"is_mitigated,omitempty"`

	// JiraChange The date the linked Jira issue was last modified.
	JiraChange *FindingsListParamsJiraChange `form:"jira_change,omitempty" json:"jira_change,omitempty"`

	// JiraCreation The date a Jira issue was created from this finding.
	JiraCreation *FindingsListParamsJiraCreation `form:"jira_creation,omitempty" json:"jira_creation,omitempty"`

	// LastReviewed Provides the date the flaw was last 'touched' by a tester.
	LastReviewed *FindingsListParamsLastReviewed `form:"last_reviewed,omitempty" json:"last_reviewed,omitempty"`

	// LastReviewedBy Multiple values may be separated by commas.
	LastReviewedBy   *[]int     `form:"last_reviewed_by,omitempty" json:"last_reviewed_by,omitempty"`
	LastStatusUpdate *time.Time `form:"last_status_update,omitempty" json:"last_status_update,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Mitigated Denotes if this flaw has been fixed by storing the date it was fixed.
	Mitigated *FindingsListParamsMitigated `form:"mitigated,omitempty" json:"mitigated,omitempty"`

	// MitigatedBy Multiple values may be separated by commas.
	MitigatedBy *[]int  `form:"mitigated_by,omitempty" json:"mitigated_by,omitempty"`
	Mitigation  *string `form:"mitigation,omitempty" json:"mitigation,omitempty"`

	// NbOccurences Multiple values may be separated by commas.
	NbOccurences *[]int `form:"nb_occurences,omitempty" json:"nb_occurences,omitempty"`

	// NotTag Not Tag name contains
	NotTag *string `form:"not_tag,omitempty" json:"not_tag,omitempty"`

	// NotTags Comma seperated list of exact tags not present on model
	NotTags *[]string `form:"not_tags,omitempty" json:"not_tags,omitempty"`

	// NotTestEngagementProductTagsName Comma seperated list of exact tags not present on product
	NotTestEngagementProductTagsName *[]string `form:"not_test__engagement__product__tags__name,omitempty" json:"not_test__engagement__product__tags__name,omitempty"`

	// NotTestEngagementTags Comma seperated list of exact tags not present on engagement
	NotTestEngagementTags *[]string `form:"not_test__engagement__tags,omitempty" json:"not_test__engagement__tags,omitempty"`

	// NotTestTags Comma seperated list of exact tags not present on test
	NotTestTags       *[]string `form:"not_test__tags,omitempty" json:"not_test__tags,omitempty"`
	NumericalSeverity *string   `form:"numerical_severity,omitempty" json:"numerical_severity,omitempty"`

	// O Ordering
	O *[]FindingsListParamsO `form:"o,omitempty" json:"o,omitempty"`

	// Offset The initial index from which to return the results.
	Offset     *int    `form:"offset,omitempty" json:"offset,omitempty"`
	OutOfScope *bool   `form:"out_of_scope,omitempty" json:"out_of_scope,omitempty"`
	Param      *string `form:"param,omitempty" json:"param,omitempty"`
	Payload    *string `form:"payload,omitempty" json:"payload,omitempty"`

	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch    *[]FindingsListParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
	PublishDate *openapi_types.Date           `form:"publish_date,omitempty" json:"publish_date,omitempty"`
	References  *string                       `form:"references,omitempty" json:"references,omitempty"`

	// RelatedFields Expand finding external relations (engagement, environment, product,                                             product_type, test, test_type)
	RelatedFields *bool `form:"related_fields,omitempty" json:"related_fields,omitempty"`

	// Reporter Multiple values may be separated by commas.
	Reporter *[]int `form:"reporter,omitempty" json:"reporter,omitempty"`

	// ReviewRequestedBy Multiple values may be separated by commas.
	ReviewRequestedBy *[]int `form:"review_requested_by,omitempty" json:"review_requested_by,omitempty"`

	// Reviewers Multiple values may be separated by commas.
	Reviewers          *[]int                            `form:"reviewers,omitempty" json:"reviewers,omitempty"`
	RiskAcceptance     *FindingsListParamsRiskAcceptance `form:"risk_acceptance,omitempty" json:"risk_acceptance,omitempty"`
	RiskAccepted       *bool                             `form:"risk_accepted,omitempty" json:"risk_accepted,omitempty"`
	SastSinkObject     *string                           `form:"sast_sink_object,omitempty" json:"sast_sink_object,omitempty"`
	SastSourceFilePath *string                           `form:"sast_source_file_path,omitempty" json:"sast_source_file_path,omitempty"`

	// SastSourceLine Multiple values may be separated by commas.
	SastSourceLine   *[]int  `form:"sast_source_line,omitempty" json:"sast_source_line,omitempty"`
	SastSourceObject *string `form:"sast_source_object,omitempty" json:"sast_source_object,omitempty"`

	// ScannerConfidence Multiple values may be separated by commas.
	ScannerConfidence     *[]int              `form:"scanner_confidence,omitempty" json:"scanner_confidence,omitempty"`
	Service               *string             `form:"service,omitempty" json:"service,omitempty"`
	Severity              *string             `form:"severity,omitempty" json:"severity,omitempty"`
	SeverityJustification *string             `form:"severity_justification,omitempty" json:"severity_justification,omitempty"`
	SlaStartDate          *openapi_types.Date `form:"sla_start_date,omitempty" json:"sla_start_date,omitempty"`

	// SonarqubeIssue Multiple values may be separated by commas.
	SonarqubeIssue   *[]int  `form:"sonarqube_issue,omitempty" json:"sonarqube_issue,omitempty"`
	StaticFinding    *bool   `form:"static_finding,omitempty" json:"static_finding,omitempty"`
	StepToReproduce  *string `form:"step_to_reproduce,omitempty" json:"step_to_reproduce,omitempty"`
	StepsToReproduce *string `form:"steps_to_reproduce,omitempty" json:"steps_to_reproduce,omitempty"`

	// Tag Tag name contains
	Tag *string `form:"tag,omitempty" json:"tag,omitempty"`

	// Tags Comma seperated list of exact tags
	Tags *[]string `form:"tags,omitempty" json:"tags,omitempty"`
	Test *int      `form:"test,omitempty" json:"test,omitempty"`

	// TestEngagement Multiple values may be separated by commas.
	TestEngagement *[]int `form:"test__engagement,omitempty" json:"test__engagement,omitempty"`

	// TestEngagementProduct Multiple values may be separated by commas.
	TestEngagementProduct *[]int `form:"test__engagement__product,omitempty" json:"test__engagement__product,omitempty"`

	// TestEngagementProductTagsName Comma seperated list of exact tags present on product
	TestEngagementProductTagsName *[]string `form:"test__engagement__product__tags__name,omitempty" json:"test__engagement__product__tags__name,omitempty"`

	// TestEngagementTags Comma seperated list of exact tags present on engagement
	TestEngagementTags *[]string `form:"test__engagement__tags,omitempty" json:"test__engagement__tags,omitempty"`

	// TestTags Comma seperated list of exact tags present on test
	TestTags *[]string `form:"test__tags,omitempty" json:"test__tags,omitempty"`

	// TestTestType Multiple values may be separated by commas.
	TestTestType      *[]int  `form:"test__test_type,omitempty" json:"test__test_type,omitempty"`
	Title             *string `form:"title,omitempty" json:"title,omitempty"`
	UnderDefectReview *bool   `form:"under_defect_review,omitempty" json:"under_defect_review,omitempty"`
	UnderReview       *bool   `form:"under_review,omitempty" json:"under_review,omitempty"`
	UniqueIdFromTool  *string `form:"unique_id_from_tool,omitempty" json:"unique_id_from_tool,omitempty"`
	Verified          *bool   `form:"verified,omitempty" json:"verified,omitempty"`
	VulnIdFromTool    *string `form:"vuln_id_from_tool,omitempty" json:"vuln_id_from_tool,omitempty"`
}

// FindingsListParamsCreated defines parameters for FindingsList.
type FindingsListParamsCreated float32

// FindingsListParamsDate defines parameters for FindingsList.
type FindingsListParamsDate float32

// FindingsListParamsJiraChange defines parameters for FindingsList.
type FindingsListParamsJiraChange float32

// FindingsListParamsJiraCreation defines parameters for FindingsList.
type FindingsListParamsJiraCreation float32

// FindingsListParamsLastReviewed defines parameters for FindingsList.
type FindingsListParamsLastReviewed int

// FindingsListParamsMitigated defines parameters for FindingsList.
type FindingsListParamsMitigated int

// FindingsListParamsO defines parameters for FindingsList.
type FindingsListParamsO string

// FindingsListParamsPrefetch defines parameters for FindingsList.
type FindingsListParamsPrefetch string

// FindingsListParamsRiskAcceptance defines parameters for FindingsList.
type FindingsListParamsRiskAcceptance float32

// FindingsAcceptRisksCreateJSONBody defines parameters for FindingsAcceptRisksCreate.
type FindingsAcceptRisksCreateJSONBody = []AcceptedRisk

// FindingsAcceptRisksCreateFormdataBody defines parameters for FindingsAcceptRisksCreate.
type FindingsAcceptRisksCreateFormdataBody = struct {
}

// FindingsAcceptRisksCreateMultipartBody defines parameters for FindingsAcceptRisksCreate.
type FindingsAcceptRisksCreateMultipartBody = []AcceptedRisk

// FindingsAcceptRisksCreateParams defines parameters for FindingsAcceptRisksCreate.
type FindingsAcceptRisksCreateParams struct {
	Active           *bool   `form:"active,omitempty" json:"active,omitempty"`
	ComponentName    *string `form:"component_name,omitempty" json:"component_name,omitempty"`
	ComponentVersion *string `form:"component_version,omitempty" json:"component_version,omitempty"`

	// Created The date the finding was created inside DefectDojo.
	Created     *FindingsAcceptRisksCreateParamsCreated `form:"created,omitempty" json:"created,omitempty"`
	Cve         *string                                 `form:"cve,omitempty" json:"cve,omitempty"`
	Cvssv3      *string                                 `form:"cvssv3,omitempty" json:"cvssv3,omitempty"`
	Cvssv3Score *float32                                `form:"cvssv3_score,omitempty" json:"cvssv3_score,omitempty"`

	// Cwe Multiple values may be separated by commas.
	Cwe *[]int `form:"cwe,omitempty" json:"cwe,omitempty"`

	// Date The date the flaw was discovered.
	Date *FindingsAcceptRisksCreateParamsDate `form:"date,omitempty" json:"date,omitempty"`

	// DefectReviewRequestedBy Multiple values may be separated by commas.
	DefectReviewRequestedBy *[]int  `form:"defect_review_requested_by,omitempty" json:"defect_review_requested_by,omitempty"`
	Description             *string `form:"description,omitempty" json:"description,omitempty"`
	Duplicate               *bool   `form:"duplicate,omitempty" json:"duplicate,omitempty"`
	DuplicateFinding        *int    `form:"duplicate_finding,omitempty" json:"duplicate_finding,omitempty"`
	DynamicFinding          *bool   `form:"dynamic_finding,omitempty" json:"dynamic_finding,omitempty"`

	// Endpoints Multiple values may be separated by commas.
	Endpoints *[]int  `form:"endpoints,omitempty" json:"endpoints,omitempty"`
	FalseP    *bool   `form:"false_p,omitempty" json:"false_p,omitempty"`
	FilePath  *string `form:"file_path,omitempty" json:"file_path,omitempty"`

	// FindingGroup Multiple values may be separated by commas.
	FindingGroup *[]float32 `form:"finding_group,omitempty" json:"finding_group,omitempty"`

	// FoundBy Multiple values may be separated by commas.
	FoundBy  *[]int  `form:"found_by,omitempty" json:"found_by,omitempty"`
	HashCode *string `form:"hash_code,omitempty" json:"hash_code,omitempty"`

	// Id Multiple values may be separated by commas.
	Id          *[]int  `form:"id,omitempty" json:"id,omitempty"`
	Impact      *string `form:"impact,omitempty" json:"impact,omitempty"`
	IsMitigated *bool   `form:"is_mitigated,omitempty" json:"is_mitigated,omitempty"`

	// JiraChange The date the linked Jira issue was last modified.
	JiraChange *FindingsAcceptRisksCreateParamsJiraChange `form:"jira_change,omitempty" json:"jira_change,omitempty"`

	// JiraCreation The date a Jira issue was created from this finding.
	JiraCreation *FindingsAcceptRisksCreateParamsJiraCreation `form:"jira_creation,omitempty" json:"jira_creation,omitempty"`

	// LastReviewed Provides the date the flaw was last 'touched' by a tester.
	LastReviewed *FindingsAcceptRisksCreateParamsLastReviewed `form:"last_reviewed,omitempty" json:"last_reviewed,omitempty"`

	// LastReviewedBy Multiple values may be separated by commas.
	LastReviewedBy   *[]int     `form:"last_reviewed_by,omitempty" json:"last_reviewed_by,omitempty"`
	LastStatusUpdate *time.Time `form:"last_status_update,omitempty" json:"last_status_update,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Mitigated Denotes if this flaw has been fixed by storing the date it was fixed.
	Mitigated *FindingsAcceptRisksCreateParamsMitigated `form:"mitigated,omitempty" json:"mitigated,omitempty"`

	// MitigatedBy Multiple values may be separated by commas.
	MitigatedBy *[]int  `form:"mitigated_by,omitempty" json:"mitigated_by,omitempty"`
	Mitigation  *string `form:"mitigation,omitempty" json:"mitigation,omitempty"`

	// NbOccurences Multiple values may be separated by commas.
	NbOccurences *[]int `form:"nb_occurences,omitempty" json:"nb_occurences,omitempty"`

	// NotTag Not Tag name contains
	NotTag *string `form:"not_tag,omitempty" json:"not_tag,omitempty"`

	// NotTags Comma seperated list of exact tags not present on model
	NotTags *[]string `form:"not_tags,omitempty" json:"not_tags,omitempty"`

	// NotTestEngagementProductTagsName Comma seperated list of exact tags not present on product
	NotTestEngagementProductTagsName *[]string `form:"not_test__engagement__product__tags__name,omitempty" json:"not_test__engagement__product__tags__name,omitempty"`

	// NotTestEngagementTags Comma seperated list of exact tags not present on engagement
	NotTestEngagementTags *[]string `form:"not_test__engagement__tags,omitempty" json:"not_test__engagement__tags,omitempty"`

	// NotTestTags Comma seperated list of exact tags not present on test
	NotTestTags       *[]string `form:"not_test__tags,omitempty" json:"not_test__tags,omitempty"`
	NumericalSeverity *string   `form:"numerical_severity,omitempty" json:"numerical_severity,omitempty"`

	// O Ordering
	O *[]FindingsAcceptRisksCreateParamsO `form:"o,omitempty" json:"o,omitempty"`

	// Offset The initial index from which to return the results.
	Offset      *int                `form:"offset,omitempty" json:"offset,omitempty"`
	OutOfScope  *bool               `form:"out_of_scope,omitempty" json:"out_of_scope,omitempty"`
	Param       *string             `form:"param,omitempty" json:"param,omitempty"`
	Payload     *string             `form:"payload,omitempty" json:"payload,omitempty"`
	PublishDate *openapi_types.Date `form:"publish_date,omitempty" json:"publish_date,omitempty"`
	References  *string             `form:"references,omitempty" json:"references,omitempty"`

	// Reporter Multiple values may be separated by commas.
	Reporter *[]int `form:"reporter,omitempty" json:"reporter,omitempty"`

	// ReviewRequestedBy Multiple values may be separated by commas.
	ReviewRequestedBy *[]int `form:"review_requested_by,omitempty" json:"review_requested_by,omitempty"`

	// Reviewers Multiple values may be separated by commas.
	Reviewers          *[]int                                         `form:"reviewers,omitempty" json:"reviewers,omitempty"`
	RiskAcceptance     *FindingsAcceptRisksCreateParamsRiskAcceptance `form:"risk_acceptance,omitempty" json:"risk_acceptance,omitempty"`
	RiskAccepted       *bool                                          `form:"risk_accepted,omitempty" json:"risk_accepted,omitempty"`
	SastSinkObject     *string                                        `form:"sast_sink_object,omitempty" json:"sast_sink_object,omitempty"`
	SastSourceFilePath *string                                        `form:"sast_source_file_path,omitempty" json:"sast_source_file_path,omitempty"`

	// SastSourceLine Multiple values may be separated by commas.
	SastSourceLine   *[]int  `form:"sast_source_line,omitempty" json:"sast_source_line,omitempty"`
	SastSourceObject *string `form:"sast_source_object,omitempty" json:"sast_source_object,omitempty"`

	// ScannerConfidence Multiple values may be separated by commas.
	ScannerConfidence     *[]int              `form:"scanner_confidence,omitempty" json:"scanner_confidence,omitempty"`
	Service               *string             `form:"service,omitempty" json:"service,omitempty"`
	Severity              *string             `form:"severity,omitempty" json:"severity,omitempty"`
	SeverityJustification *string             `form:"severity_justification,omitempty" json:"severity_justification,omitempty"`
	SlaStartDate          *openapi_types.Date `form:"sla_start_date,omitempty" json:"sla_start_date,omitempty"`

	// SonarqubeIssue Multiple values may be separated by commas.
	SonarqubeIssue   *[]int  `form:"sonarqube_issue,omitempty" json:"sonarqube_issue,omitempty"`
	StaticFinding    *bool   `form:"static_finding,omitempty" json:"static_finding,omitempty"`
	StepToReproduce  *string `form:"step_to_reproduce,omitempty" json:"step_to_reproduce,omitempty"`
	StepsToReproduce *string `form:"steps_to_reproduce,omitempty" json:"steps_to_reproduce,omitempty"`

	// Tag Tag name contains
	Tag *string `form:"tag,omitempty" json:"tag,omitempty"`

	// Tags Comma seperated list of exact tags
	Tags *[]string `form:"tags,omitempty" json:"tags,omitempty"`
	Test *int      `form:"test,omitempty" json:"test,omitempty"`

	// TestEngagement Multiple values may be separated by commas.
	TestEngagement *[]int `form:"test__engagement,omitempty" json:"test__engagement,omitempty"`

	// TestEngagementProduct Multiple values may be separated by commas.
	TestEngagementProduct *[]int `form:"test__engagement__product,omitempty" json:"test__engagement__product,omitempty"`

	// TestEngagementProductTagsName Comma seperated list of exact tags present on product
	TestEngagementProductTagsName *[]string `form:"test__engagement__product__tags__name,omitempty" json:"test__engagement__product__tags__name,omitempty"`

	// TestEngagementTags Comma seperated list of exact tags present on engagement
	TestEngagementTags *[]string `form:"test__engagement__tags,omitempty" json:"test__engagement__tags,omitempty"`

	// TestTags Comma seperated list of exact tags present on test
	TestTags *[]string `form:"test__tags,omitempty" json:"test__tags,omitempty"`

	// TestTestType Multiple values may be separated by commas.
	TestTestType      *[]int  `form:"test__test_type,omitempty" json:"test__test_type,omitempty"`
	Title             *string `form:"title,omitempty" json:"title,omitempty"`
	UnderDefectReview *bool   `form:"under_defect_review,omitempty" json:"under_defect_review,omitempty"`
	UnderReview       *bool   `form:"under_review,omitempty" json:"under_review,omitempty"`
	UniqueIdFromTool  *string `form:"unique_id_from_tool,omitempty" json:"unique_id_from_tool,omitempty"`
	Verified          *bool   `form:"verified,omitempty" json:"verified,omitempty"`
	VulnIdFromTool    *string `form:"vuln_id_from_tool,omitempty" json:"vuln_id_from_tool,omitempty"`
}

// FindingsAcceptRisksCreateParamsCreated defines parameters for FindingsAcceptRisksCreate.
type FindingsAcceptRisksCreateParamsCreated float32

// FindingsAcceptRisksCreateParamsDate defines parameters for FindingsAcceptRisksCreate.
type FindingsAcceptRisksCreateParamsDate float32

// FindingsAcceptRisksCreateParamsJiraChange defines parameters for FindingsAcceptRisksCreate.
type FindingsAcceptRisksCreateParamsJiraChange float32

// FindingsAcceptRisksCreateParamsJiraCreation defines parameters for FindingsAcceptRisksCreate.
type FindingsAcceptRisksCreateParamsJiraCreation float32

// FindingsAcceptRisksCreateParamsLastReviewed defines parameters for FindingsAcceptRisksCreate.
type FindingsAcceptRisksCreateParamsLastReviewed float32

// FindingsAcceptRisksCreateParamsMitigated defines parameters for FindingsAcceptRisksCreate.
type FindingsAcceptRisksCreateParamsMitigated float32

// FindingsAcceptRisksCreateParamsO defines parameters for FindingsAcceptRisksCreate.
type FindingsAcceptRisksCreateParamsO string

// FindingsAcceptRisksCreateParamsRiskAcceptance defines parameters for FindingsAcceptRisksCreate.
type FindingsAcceptRisksCreateParamsRiskAcceptance float32

// FindingsRetrieveParams defines parameters for FindingsRetrieve.
type FindingsRetrieveParams struct {
	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch *[]FindingsRetrieveParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`

	// RelatedFields Expand finding external relations (engagement, environment, product,                                             product_type, test, test_type)
	RelatedFields *bool `form:"related_fields,omitempty" json:"related_fields,omitempty"`
}

// FindingsRetrieveParamsPrefetch defines parameters for FindingsRetrieve.
type FindingsRetrieveParamsPrefetch string

// FindingsMetadataDestroyParams defines parameters for FindingsMetadataDestroy.
type FindingsMetadataDestroyParams struct {
	// Name name of the metadata to retrieve. If name is empty, return all the                                     metadata associated with the finding
	Name int `form:"name" json:"name"`
}

// GlobalRolesListParams defines parameters for GlobalRolesList.
type GlobalRolesListParams struct {
	Group *int `form:"group,omitempty" json:"group,omitempty"`
	Id    *int `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
	Role   *int `form:"role,omitempty" json:"role,omitempty"`
	User   *int `form:"user,omitempty" json:"user,omitempty"`
}

// JiraConfigurationsListParams defines parameters for JiraConfigurationsList.
type JiraConfigurationsListParams struct {
	Id *int `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Url    *string `form:"url,omitempty" json:"url,omitempty"`
}

// JiraFindingMappingsListParams defines parameters for JiraFindingMappingsList.
type JiraFindingMappingsListParams struct {
	Engagement   *int    `form:"engagement,omitempty" json:"engagement,omitempty"`
	Finding      *int    `form:"finding,omitempty" json:"finding,omitempty"`
	FindingGroup *int    `form:"finding_group,omitempty" json:"finding_group,omitempty"`
	Id           *int    `form:"id,omitempty" json:"id,omitempty"`
	JiraId       *string `form:"jira_id,omitempty" json:"jira_id,omitempty"`
	JiraKey      *string `form:"jira_key,omitempty" json:"jira_key,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// JiraInstancesListParams defines parameters for JiraInstancesList.
type JiraInstancesListParams struct {
	Id *int `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Url    *string `form:"url,omitempty" json:"url,omitempty"`
}

// JiraProductConfigurationsListParams defines parameters for JiraProductConfigurationsList.
type JiraProductConfigurationsListParams struct {
	Component                   *string `form:"component,omitempty" json:"component,omitempty"`
	EnableEngagementEpicMapping *bool   `form:"enable_engagement_epic_mapping,omitempty" json:"enable_engagement_epic_mapping,omitempty"`
	Engagement                  *int    `form:"engagement,omitempty" json:"engagement,omitempty"`
	Id                          *int    `form:"id,omitempty" json:"id,omitempty"`
	JiraInstance                *int    `form:"jira_instance,omitempty" json:"jira_instance,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset        *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Product       *int    `form:"product,omitempty" json:"product,omitempty"`
	ProjectKey    *string `form:"project_key,omitempty" json:"project_key,omitempty"`
	PushAllIssues *bool   `form:"push_all_issues,omitempty" json:"push_all_issues,omitempty"`
	PushNotes     *bool   `form:"push_notes,omitempty" json:"push_notes,omitempty"`
}

// JiraProjectsListParams defines parameters for JiraProjectsList.
type JiraProjectsListParams struct {
	Component                   *string `form:"component,omitempty" json:"component,omitempty"`
	EnableEngagementEpicMapping *bool   `form:"enable_engagement_epic_mapping,omitempty" json:"enable_engagement_epic_mapping,omitempty"`
	Engagement                  *int    `form:"engagement,omitempty" json:"engagement,omitempty"`
	Id                          *int    `form:"id,omitempty" json:"id,omitempty"`
	JiraInstance                *int    `form:"jira_instance,omitempty" json:"jira_instance,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset        *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Product       *int    `form:"product,omitempty" json:"product,omitempty"`
	ProjectKey    *string `form:"project_key,omitempty" json:"project_key,omitempty"`
	PushAllIssues *bool   `form:"push_all_issues,omitempty" json:"push_all_issues,omitempty"`
	PushNotes     *bool   `form:"push_notes,omitempty" json:"push_notes,omitempty"`
}

// LanguageTypesListParams defines parameters for LanguageTypesList.
type LanguageTypesListParams struct {
	Color    *string `form:"color,omitempty" json:"color,omitempty"`
	Id       *int    `form:"id,omitempty" json:"id,omitempty"`
	Language *string `form:"language,omitempty" json:"language,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// LanguagesListParams defines parameters for LanguagesList.
type LanguagesListParams struct {
	Id       *int `form:"id,omitempty" json:"id,omitempty"`
	Language *int `form:"language,omitempty" json:"language,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch *[]LanguagesListParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
	Product  *int                           `form:"product,omitempty" json:"product,omitempty"`
}

// LanguagesListParamsPrefetch defines parameters for LanguagesList.
type LanguagesListParamsPrefetch string

// LanguagesRetrieveParams defines parameters for LanguagesRetrieve.
type LanguagesRetrieveParams struct {
	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch *[]LanguagesRetrieveParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
}

// LanguagesRetrieveParamsPrefetch defines parameters for LanguagesRetrieve.
type LanguagesRetrieveParamsPrefetch string

// MetadataListParams defines parameters for MetadataList.
type MetadataListParams struct {
	Endpoint *int `form:"endpoint,omitempty" json:"endpoint,omitempty"`
	Finding  *int `form:"finding,omitempty" json:"finding,omitempty"`
	Id       *int `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Name  *string `form:"name,omitempty" json:"name,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch *[]MetadataListParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
	Product  *int                          `form:"product,omitempty" json:"product,omitempty"`
	Value    *string                       `form:"value,omitempty" json:"value,omitempty"`
}

// MetadataListParamsPrefetch defines parameters for MetadataList.
type MetadataListParamsPrefetch string

// MetadataRetrieveParams defines parameters for MetadataRetrieve.
type MetadataRetrieveParams struct {
	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch *[]MetadataRetrieveParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
}

// MetadataRetrieveParamsPrefetch defines parameters for MetadataRetrieve.
type MetadataRetrieveParamsPrefetch string

// NetworkLocationsListParams defines parameters for NetworkLocationsList.
type NetworkLocationsListParams struct {
	Id *int `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit    *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Location *string `form:"location,omitempty" json:"location,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// NoteTypeListParams defines parameters for NoteTypeList.
type NoteTypeListParams struct {
	Description *string `form:"description,omitempty" json:"description,omitempty"`
	Id          *int    `form:"id,omitempty" json:"id,omitempty"`
	IsActive    *bool   `form:"is_active,omitempty" json:"is_active,omitempty"`
	IsMandatory *bool   `form:"is_mandatory,omitempty" json:"is_mandatory,omitempty"`
	IsSingle    *bool   `form:"is_single,omitempty" json:"is_single,omitempty"`

	// Limit Number of results to return per page.
	Limit *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Name  *string `form:"name,omitempty" json:"name,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// NotesListParams defines parameters for NotesList.
type NotesListParams struct {
	Author   *int       `form:"author,omitempty" json:"author,omitempty"`
	Date     *time.Time `form:"date,omitempty" json:"date,omitempty"`
	EditTime *time.Time `form:"edit_time,omitempty" json:"edit_time,omitempty"`
	Edited   *bool      `form:"edited,omitempty" json:"edited,omitempty"`
	Editor   *int       `form:"editor,omitempty" json:"editor,omitempty"`
	Entry    *string    `form:"entry,omitempty" json:"entry,omitempty"`
	Id       *int       `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset  *int  `form:"offset,omitempty" json:"offset,omitempty"`
	Private *bool `form:"private,omitempty" json:"private,omitempty"`
}

// NotificationsListParams defines parameters for NotificationsList.
type NotificationsListParams struct {
	Id *int `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch *[]NotificationsListParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
	Product  *int                               `form:"product,omitempty" json:"product,omitempty"`
	User     *int                               `form:"user,omitempty" json:"user,omitempty"`
}

// NotificationsListParamsPrefetch defines parameters for NotificationsList.
type NotificationsListParamsPrefetch string

// NotificationsRetrieveParams defines parameters for NotificationsRetrieve.
type NotificationsRetrieveParams struct {
	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch *[]NotificationsRetrieveParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
}

// NotificationsRetrieveParamsPrefetch defines parameters for NotificationsRetrieve.
type NotificationsRetrieveParamsPrefetch string

// Oa3SchemaRetrieveParams defines parameters for Oa3SchemaRetrieve.
type Oa3SchemaRetrieveParams struct {
	Format *Oa3SchemaRetrieveParamsFormat `form:"format,omitempty" json:"format,omitempty"`
	Lang   *Oa3SchemaRetrieveParamsLang   `form:"lang,omitempty" json:"lang,omitempty"`
}

// Oa3SchemaRetrieveParamsFormat defines parameters for Oa3SchemaRetrieve.
type Oa3SchemaRetrieveParamsFormat string

// Oa3SchemaRetrieveParamsLang defines parameters for Oa3SchemaRetrieve.
type Oa3SchemaRetrieveParamsLang string

// ProductApiScanConfigurationsListParams defines parameters for ProductApiScanConfigurationsList.
type ProductApiScanConfigurationsListParams struct {
	Id *int `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset            *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Product           *int    `form:"product,omitempty" json:"product,omitempty"`
	ServiceKey1       *string `form:"service_key_1,omitempty" json:"service_key_1,omitempty"`
	ServiceKey2       *string `form:"service_key_2,omitempty" json:"service_key_2,omitempty"`
	ServiceKey3       *string `form:"service_key_3,omitempty" json:"service_key_3,omitempty"`
	ToolConfiguration *int    `form:"tool_configuration,omitempty" json:"tool_configuration,omitempty"`
}

// ProductGroupsListParams defines parameters for ProductGroupsList.
type ProductGroupsListParams struct {
	GroupId *int `form:"group_id,omitempty" json:"group_id,omitempty"`
	Id      *int `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch  *[]ProductGroupsListParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
	ProductId *int                               `form:"product_id,omitempty" json:"product_id,omitempty"`
}

// ProductGroupsListParamsPrefetch defines parameters for ProductGroupsList.
type ProductGroupsListParamsPrefetch string

// ProductGroupsRetrieveParams defines parameters for ProductGroupsRetrieve.
type ProductGroupsRetrieveParams struct {
	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch *[]ProductGroupsRetrieveParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
}

// ProductGroupsRetrieveParamsPrefetch defines parameters for ProductGroupsRetrieve.
type ProductGroupsRetrieveParamsPrefetch string

// ProductMembersListParams defines parameters for ProductMembersList.
type ProductMembersListParams struct {
	Id *int `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch  *[]ProductMembersListParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
	ProductId *int                                `form:"product_id,omitempty" json:"product_id,omitempty"`
	UserId    *int                                `form:"user_id,omitempty" json:"user_id,omitempty"`
}

// ProductMembersListParamsPrefetch defines parameters for ProductMembersList.
type ProductMembersListParamsPrefetch string

// ProductMembersRetrieveParams defines parameters for ProductMembersRetrieve.
type ProductMembersRetrieveParams struct {
	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch *[]ProductMembersRetrieveParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
}

// ProductMembersRetrieveParamsPrefetch defines parameters for ProductMembersRetrieve.
type ProductMembersRetrieveParamsPrefetch string

// ProductTypeGroupsListParams defines parameters for ProductTypeGroupsList.
type ProductTypeGroupsListParams struct {
	GroupId *int `form:"group_id,omitempty" json:"group_id,omitempty"`
	Id      *int `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch      *[]ProductTypeGroupsListParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
	ProductTypeId *int                                   `form:"product_type_id,omitempty" json:"product_type_id,omitempty"`
}

// ProductTypeGroupsListParamsPrefetch defines parameters for ProductTypeGroupsList.
type ProductTypeGroupsListParamsPrefetch string

// ProductTypeGroupsRetrieveParams defines parameters for ProductTypeGroupsRetrieve.
type ProductTypeGroupsRetrieveParams struct {
	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch *[]ProductTypeGroupsRetrieveParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
}

// ProductTypeGroupsRetrieveParamsPrefetch defines parameters for ProductTypeGroupsRetrieve.
type ProductTypeGroupsRetrieveParamsPrefetch string

// ProductTypeMembersListParams defines parameters for ProductTypeMembersList.
type ProductTypeMembersListParams struct {
	Id *int `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch      *[]ProductTypeMembersListParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
	ProductTypeId *int                                    `form:"product_type_id,omitempty" json:"product_type_id,omitempty"`
	UserId        *int                                    `form:"user_id,omitempty" json:"user_id,omitempty"`
}

// ProductTypeMembersListParamsPrefetch defines parameters for ProductTypeMembersList.
type ProductTypeMembersListParamsPrefetch string

// ProductTypeMembersRetrieveParams defines parameters for ProductTypeMembersRetrieve.
type ProductTypeMembersRetrieveParams struct {
	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch *[]ProductTypeMembersRetrieveParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
}

// ProductTypeMembersRetrieveParamsPrefetch defines parameters for ProductTypeMembersRetrieve.
type ProductTypeMembersRetrieveParamsPrefetch string

// ProductTypesListParams defines parameters for ProductTypesList.
type ProductTypesListParams struct {
	Created         *time.Time `form:"created,omitempty" json:"created,omitempty"`
	CriticalProduct *bool      `form:"critical_product,omitempty" json:"critical_product,omitempty"`
	Id              *int       `form:"id,omitempty" json:"id,omitempty"`
	KeyProduct      *bool      `form:"key_product,omitempty" json:"key_product,omitempty"`

	// Limit Number of results to return per page.
	Limit *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Name  *string `form:"name,omitempty" json:"name,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch *[]ProductTypesListParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
	Updated  *time.Time                        `form:"updated,omitempty" json:"updated,omitempty"`
}

// ProductTypesListParamsPrefetch defines parameters for ProductTypesList.
type ProductTypesListParamsPrefetch string

// ProductTypesRetrieveParams defines parameters for ProductTypesRetrieve.
type ProductTypesRetrieveParams struct {
	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch *[]ProductTypesRetrieveParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
}

// ProductTypesRetrieveParamsPrefetch defines parameters for ProductTypesRetrieve.
type ProductTypesRetrieveParamsPrefetch string

// ProductsListParams defines parameters for ProductsList.
type ProductsListParams struct {
	BusinessCriticality *string                    `form:"business_criticality,omitempty" json:"business_criticality,omitempty"`
	Created             *ProductsListParamsCreated `form:"created,omitempty" json:"created,omitempty"`
	Description         *string                    `form:"description,omitempty" json:"description,omitempty"`
	ExternalAudience    *bool                      `form:"external_audience,omitempty" json:"external_audience,omitempty"`

	// Id Multiple values may be separated by commas.
	Id                 *[]int  `form:"id,omitempty" json:"id,omitempty"`
	InternetAccessible *bool   `form:"internet_accessible,omitempty" json:"internet_accessible,omitempty"`
	Lifecycle          *string `form:"lifecycle,omitempty" json:"lifecycle,omitempty"`

	// Limit Number of results to return per page.
	Limit *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Name  *string `form:"name,omitempty" json:"name,omitempty"`

	// NotTag Not Tag name contains
	NotTag *string `form:"not_tag,omitempty" json:"not_tag,omitempty"`

	// NotTags Comma seperated list of exact tags not present on product
	NotTags *[]string `form:"not_tags,omitempty" json:"not_tags,omitempty"`

	// O Ordering
	O *[]ProductsListParamsO `form:"o,omitempty" json:"o,omitempty"`

	// Offset The initial index from which to return the results.
	Offset   *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Origin   *string `form:"origin,omitempty" json:"origin,omitempty"`
	Platform *string `form:"platform,omitempty" json:"platform,omitempty"`

	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch *[]ProductsListParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`

	// ProdNumericGrade Multiple values may be separated by commas.
	ProdNumericGrade *[]int `form:"prod_numeric_grade,omitempty" json:"prod_numeric_grade,omitempty"`

	// ProdType Multiple values may be separated by commas.
	ProdType *[]int `form:"prod_type,omitempty" json:"prod_type,omitempty"`

	// ProductManager Multiple values may be separated by commas.
	ProductManager *[]int `form:"product_manager,omitempty" json:"product_manager,omitempty"`

	// Regulations Multiple values may be separated by commas.
	Regulations *[]int   `form:"regulations,omitempty" json:"regulations,omitempty"`
	Revenue     *float32 `form:"revenue,omitempty" json:"revenue,omitempty"`

	// Tag Tag name contains
	Tag *string `form:"tag,omitempty" json:"tag,omitempty"`

	// Tags Comma seperated list of exact tags
	Tags *[]string `form:"tags,omitempty" json:"tags,omitempty"`

	// TeamManager Multiple values may be separated by commas.
	TeamManager *[]int `form:"team_manager,omitempty" json:"team_manager,omitempty"`

	// TechnicalContact Multiple values may be separated by commas.
	TechnicalContact *[]int `form:"technical_contact,omitempty" json:"technical_contact,omitempty"`

	// Tid Multiple values may be separated by commas.
	Tid     *[]int                     `form:"tid,omitempty" json:"tid,omitempty"`
	Updated *ProductsListParamsUpdated `form:"updated,omitempty" json:"updated,omitempty"`

	// UserRecords Multiple values may be separated by commas.
	UserRecords *[]int `form:"user_records,omitempty" json:"user_records,omitempty"`
}

// ProductsListParamsCreated defines parameters for ProductsList.
type ProductsListParamsCreated float32

// ProductsListParamsO defines parameters for ProductsList.
type ProductsListParamsO string

// ProductsListParamsPrefetch defines parameters for ProductsList.
type ProductsListParamsPrefetch string

// ProductsListParamsUpdated defines parameters for ProductsList.
type ProductsListParamsUpdated float32

// ProductsRetrieveParams defines parameters for ProductsRetrieve.
type ProductsRetrieveParams struct {
	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch *[]ProductsRetrieveParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
}

// ProductsRetrieveParamsPrefetch defines parameters for ProductsRetrieve.
type ProductsRetrieveParamsPrefetch string

// RegulationsListParams defines parameters for RegulationsList.
type RegulationsListParams struct {
	Description *string `form:"description,omitempty" json:"description,omitempty"`
	Id          *int    `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Name  *string `form:"name,omitempty" json:"name,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// RolesListParams defines parameters for RolesList.
type RolesListParams struct {
	Id *int `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Name  *string `form:"name,omitempty" json:"name,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// SonarqubeIssuesListParams defines parameters for SonarqubeIssuesList.
type SonarqubeIssuesListParams struct {
	Id  *int    `form:"id,omitempty" json:"id,omitempty"`
	Key *string `form:"key,omitempty" json:"key,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Status *string `form:"status,omitempty" json:"status,omitempty"`
	Type   *string `form:"type,omitempty" json:"type,omitempty"`
}

// SonarqubeTransitionsListParams defines parameters for SonarqubeTransitionsList.
type SonarqubeTransitionsListParams struct {
	FindingStatus *string `form:"finding_status,omitempty" json:"finding_status,omitempty"`
	Id            *int    `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset          *int    `form:"offset,omitempty" json:"offset,omitempty"`
	SonarqubeIssue  *int    `form:"sonarqube_issue,omitempty" json:"sonarqube_issue,omitempty"`
	SonarqubeStatus *string `form:"sonarqube_status,omitempty" json:"sonarqube_status,omitempty"`
	Transitions     *string `form:"transitions,omitempty" json:"transitions,omitempty"`
}

// StubFindingsListParams defines parameters for StubFindingsList.
type StubFindingsListParams struct {
	Date        *openapi_types.Date `form:"date,omitempty" json:"date,omitempty"`
	Description *string             `form:"description,omitempty" json:"description,omitempty"`
	Id          *int                `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset   *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Severity *string `form:"severity,omitempty" json:"severity,omitempty"`
	Title    *string `form:"title,omitempty" json:"title,omitempty"`
}

// SystemSettingsListParams defines parameters for SystemSettingsList.
type SystemSettingsListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// TechnologiesListParams defines parameters for TechnologiesList.
type TechnologiesListParams struct {
	// Limit Number of results to return per page.
	Limit *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Name  *string `form:"name,omitempty" json:"name,omitempty"`

	// NotTag Not Tag name contains
	NotTag *string `form:"not_tag,omitempty" json:"not_tag,omitempty"`

	// NotTags Comma seperated list of exact tags not present on model
	NotTags *[]string `form:"not_tags,omitempty" json:"not_tags,omitempty"`

	// Offset The initial index from which to return the results.
	Offset  *int `form:"offset,omitempty" json:"offset,omitempty"`
	Product *int `form:"product,omitempty" json:"product,omitempty"`

	// Tag Tag name contains
	Tag *string `form:"tag,omitempty" json:"tag,omitempty"`

	// Tags Comma seperated list of exact tags
	Tags    *[]string `form:"tags,omitempty" json:"tags,omitempty"`
	User    *int      `form:"user,omitempty" json:"user,omitempty"`
	Version *string   `form:"version,omitempty" json:"version,omitempty"`
}

// TestImportsListParams defines parameters for TestImportsList.
type TestImportsListParams struct {
	BranchTag        *string `form:"branch_tag,omitempty" json:"branch_tag,omitempty"`
	BuildId          *string `form:"build_id,omitempty" json:"build_id,omitempty"`
	CommitHash       *string `form:"commit_hash,omitempty" json:"commit_hash,omitempty"`
	FindingsAffected *[]int  `form:"findings_affected,omitempty" json:"findings_affected,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch                       *[]TestImportsListParamsPrefetch                    `form:"prefetch,omitempty" json:"prefetch,omitempty"`
	Test                           *int                                                `form:"test,omitempty" json:"test,omitempty"`
	TestImportFindingActionAction  *TestImportsListParamsTestImportFindingActionAction `form:"test_import_finding_action__action,omitempty" json:"test_import_finding_action__action,omitempty"`
	TestImportFindingActionCreated *time.Time                                          `form:"test_import_finding_action__created,omitempty" json:"test_import_finding_action__created,omitempty"`
	TestImportFindingActionFinding *int                                                `form:"test_import_finding_action__finding,omitempty" json:"test_import_finding_action__finding,omitempty"`
	Version                        *string                                             `form:"version,omitempty" json:"version,omitempty"`
}

// TestImportsListParamsPrefetch defines parameters for TestImportsList.
type TestImportsListParamsPrefetch string

// TestImportsListParamsTestImportFindingActionAction defines parameters for TestImportsList.
type TestImportsListParamsTestImportFindingActionAction string

// TestImportsRetrieveParams defines parameters for TestImportsRetrieve.
type TestImportsRetrieveParams struct {
	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch *[]TestImportsRetrieveParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
}

// TestImportsRetrieveParamsPrefetch defines parameters for TestImportsRetrieve.
type TestImportsRetrieveParamsPrefetch string

// TestTypesListParams defines parameters for TestTypesList.
type TestTypesListParams struct {
	// Limit Number of results to return per page.
	Limit *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Name  *string `form:"name,omitempty" json:"name,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// TestsListParams defines parameters for TestsList.
type TestsListParams struct {
	ActualTime           *string `form:"actual_time,omitempty" json:"actual_time,omitempty"`
	ApiScanConfiguration *int    `form:"api_scan_configuration,omitempty" json:"api_scan_configuration,omitempty"`
	BranchTag            *string `form:"branch_tag,omitempty" json:"branch_tag,omitempty"`
	BuildId              *string `form:"build_id,omitempty" json:"build_id,omitempty"`
	CommitHash           *string `form:"commit_hash,omitempty" json:"commit_hash,omitempty"`
	Engagement           *int    `form:"engagement,omitempty" json:"engagement,omitempty"`

	// EngagementProductTagsName Comma seperated list of exact tags present on product
	EngagementProductTagsName *[]string `form:"engagement__product__tags__name,omitempty" json:"engagement__product__tags__name,omitempty"`

	// EngagementTags Comma seperated list of exact tags present on engagement
	EngagementTags *[]string `form:"engagement__tags,omitempty" json:"engagement__tags,omitempty"`
	Id             *int      `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// NotEngagementProductTagsName Comma seperated list of exact tags not present on product
	NotEngagementProductTagsName *[]string `form:"not_engagement__product__tags__name,omitempty" json:"not_engagement__product__tags__name,omitempty"`

	// NotEngagementTags Comma seperated list of exact tags not present on engagement
	NotEngagementTags *[]string `form:"not_engagement__tags,omitempty" json:"not_engagement__tags,omitempty"`

	// NotTag Not Tag name contains
	NotTag *string `form:"not_tag,omitempty" json:"not_tag,omitempty"`

	// NotTags Comma seperated list of exact tags not present on model
	NotTags *[]string `form:"not_tags,omitempty" json:"not_tags,omitempty"`
	Notes   *[]int    `form:"notes,omitempty" json:"notes,omitempty"`

	// O Ordering
	O *[]TestsListParamsO `form:"o,omitempty" json:"o,omitempty"`

	// Offset The initial index from which to return the results.
	Offset          *int `form:"offset,omitempty" json:"offset,omitempty"`
	PercentComplete *int `form:"percent_complete,omitempty" json:"percent_complete,omitempty"`

	// Tag Tag name contains
	Tag *string `form:"tag,omitempty" json:"tag,omitempty"`

	// Tags Comma seperated list of exact tags
	Tags        *[]string  `form:"tags,omitempty" json:"tags,omitempty"`
	TargetEnd   *time.Time `form:"target_end,omitempty" json:"target_end,omitempty"`
	TargetStart *time.Time `form:"target_start,omitempty" json:"target_start,omitempty"`
	TestType    *int       `form:"test_type,omitempty" json:"test_type,omitempty"`
	Title       *string    `form:"title,omitempty" json:"title,omitempty"`
	Version     *string    `form:"version,omitempty" json:"version,omitempty"`
}

// TestsListParamsO defines parameters for TestsList.
type TestsListParamsO string

// TestsAcceptRisksCreateJSONBody defines parameters for TestsAcceptRisksCreate.
type TestsAcceptRisksCreateJSONBody = []AcceptedRisk

// TestsAcceptRisksCreateFormdataBody defines parameters for TestsAcceptRisksCreate.
type TestsAcceptRisksCreateFormdataBody = struct {
}

// TestsAcceptRisksCreateMultipartBody defines parameters for TestsAcceptRisksCreate.
type TestsAcceptRisksCreateMultipartBody = []AcceptedRisk

// ToolConfigurationsListParams defines parameters for ToolConfigurationsList.
type ToolConfigurationsListParams struct {
	AuthenticationType *ToolConfigurationsListParamsAuthenticationType `form:"authentication_type,omitempty" json:"authentication_type,omitempty"`
	Id                 *int                                            `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Name  *string `form:"name,omitempty" json:"name,omitempty"`

	// Offset The initial index from which to return the results.
	Offset   *int    `form:"offset,omitempty" json:"offset,omitempty"`
	ToolType *int    `form:"tool_type,omitempty" json:"tool_type,omitempty"`
	Url      *string `form:"url,omitempty" json:"url,omitempty"`
}

// ToolConfigurationsListParamsAuthenticationType defines parameters for ToolConfigurationsList.
type ToolConfigurationsListParamsAuthenticationType string

// ToolProductSettingsListParams defines parameters for ToolProductSettingsList.
type ToolProductSettingsListParams struct {
	Id *int `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Name  *string `form:"name,omitempty" json:"name,omitempty"`

	// Offset The initial index from which to return the results.
	Offset            *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Product           *int    `form:"product,omitempty" json:"product,omitempty"`
	ToolConfiguration *int    `form:"tool_configuration,omitempty" json:"tool_configuration,omitempty"`
	ToolProjectId     *string `form:"tool_project_id,omitempty" json:"tool_project_id,omitempty"`
	Url               *string `form:"url,omitempty" json:"url,omitempty"`
}

// ToolTypesListParams defines parameters for ToolTypesList.
type ToolTypesListParams struct {
	Description *string `form:"description,omitempty" json:"description,omitempty"`
	Id          *int    `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Name  *string `form:"name,omitempty" json:"name,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// UserContactInfosListParams defines parameters for UserContactInfosList.
type UserContactInfosListParams struct {
	BlockExecution     *bool   `form:"block_execution,omitempty" json:"block_execution,omitempty"`
	CellNumber         *string `form:"cell_number,omitempty" json:"cell_number,omitempty"`
	ForcePasswordReset *bool   `form:"force_password_reset,omitempty" json:"force_password_reset,omitempty"`
	GithubUsername     *string `form:"github_username,omitempty" json:"github_username,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset      *int    `form:"offset,omitempty" json:"offset,omitempty"`
	PhoneNumber *string `form:"phone_number,omitempty" json:"phone_number,omitempty"`

	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch        *[]UserContactInfosListParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
	SlackUserId     *string                               `form:"slack_user_id,omitempty" json:"slack_user_id,omitempty"`
	SlackUsername   *string                               `form:"slack_username,omitempty" json:"slack_username,omitempty"`
	Title           *string                               `form:"title,omitempty" json:"title,omitempty"`
	TwitterUsername *string                               `form:"twitter_username,omitempty" json:"twitter_username,omitempty"`
	User            *int                                  `form:"user,omitempty" json:"user,omitempty"`
}

// UserContactInfosListParamsPrefetch defines parameters for UserContactInfosList.
type UserContactInfosListParamsPrefetch string

// UserContactInfosRetrieveParams defines parameters for UserContactInfosRetrieve.
type UserContactInfosRetrieveParams struct {
	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch *[]UserContactInfosRetrieveParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
}

// UserContactInfosRetrieveParamsPrefetch defines parameters for UserContactInfosRetrieve.
type UserContactInfosRetrieveParamsPrefetch string

// UsersListParams defines parameters for UsersList.
type UsersListParams struct {
	Email       *string `form:"email,omitempty" json:"email,omitempty"`
	FirstName   *string `form:"first_name,omitempty" json:"first_name,omitempty"`
	Id          *int    `form:"id,omitempty" json:"id,omitempty"`
	IsActive    *bool   `form:"is_active,omitempty" json:"is_active,omitempty"`
	IsSuperuser *bool   `form:"is_superuser,omitempty" json:"is_superuser,omitempty"`
	LastName    *string `form:"last_name,omitempty" json:"last_name,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset   *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Username *string `form:"username,omitempty" json:"username,omitempty"`
}

// ApiTokenAuthCreateJSONRequestBody defines body for ApiTokenAuthCreate for application/json ContentType.
type ApiTokenAuthCreateJSONRequestBody = AuthToken

// ApiTokenAuthCreateFormdataRequestBody defines body for ApiTokenAuthCreate for application/x-www-form-urlencoded ContentType.
type ApiTokenAuthCreateFormdataRequestBody = AuthToken

// ApiTokenAuthCreateMultipartRequestBody defines body for ApiTokenAuthCreate for multipart/form-data ContentType.
type ApiTokenAuthCreateMultipartRequestBody = AuthToken

// DevelopmentEnvironmentsCreateJSONRequestBody defines body for DevelopmentEnvironmentsCreate for application/json ContentType.
type DevelopmentEnvironmentsCreateJSONRequestBody = DevelopmentEnvironment

// DevelopmentEnvironmentsCreateFormdataRequestBody defines body for DevelopmentEnvironmentsCreate for application/x-www-form-urlencoded ContentType.
type DevelopmentEnvironmentsCreateFormdataRequestBody = DevelopmentEnvironment

// DevelopmentEnvironmentsCreateMultipartRequestBody defines body for DevelopmentEnvironmentsCreate for multipart/form-data ContentType.
type DevelopmentEnvironmentsCreateMultipartRequestBody = DevelopmentEnvironment

// DevelopmentEnvironmentsPartialUpdateJSONRequestBody defines body for DevelopmentEnvironmentsPartialUpdate for application/json ContentType.
type DevelopmentEnvironmentsPartialUpdateJSONRequestBody = PatchedDevelopmentEnvironment

// DevelopmentEnvironmentsPartialUpdateFormdataRequestBody defines body for DevelopmentEnvironmentsPartialUpdate for application/x-www-form-urlencoded ContentType.
type DevelopmentEnvironmentsPartialUpdateFormdataRequestBody = PatchedDevelopmentEnvironment

// DevelopmentEnvironmentsPartialUpdateMultipartRequestBody defines body for DevelopmentEnvironmentsPartialUpdate for multipart/form-data ContentType.
type DevelopmentEnvironmentsPartialUpdateMultipartRequestBody = PatchedDevelopmentEnvironment

// DevelopmentEnvironmentsUpdateJSONRequestBody defines body for DevelopmentEnvironmentsUpdate for application/json ContentType.
type DevelopmentEnvironmentsUpdateJSONRequestBody = DevelopmentEnvironment

// DevelopmentEnvironmentsUpdateFormdataRequestBody defines body for DevelopmentEnvironmentsUpdate for application/x-www-form-urlencoded ContentType.
type DevelopmentEnvironmentsUpdateFormdataRequestBody = DevelopmentEnvironment

// DevelopmentEnvironmentsUpdateMultipartRequestBody defines body for DevelopmentEnvironmentsUpdate for multipart/form-data ContentType.
type DevelopmentEnvironmentsUpdateMultipartRequestBody = DevelopmentEnvironment

// DojoGroupMembersCreateJSONRequestBody defines body for DojoGroupMembersCreate for application/json ContentType.
type DojoGroupMembersCreateJSONRequestBody = DojoGroupMember

// DojoGroupMembersCreateFormdataRequestBody defines body for DojoGroupMembersCreate for application/x-www-form-urlencoded ContentType.
type DojoGroupMembersCreateFormdataRequestBody = DojoGroupMember

// DojoGroupMembersCreateMultipartRequestBody defines body for DojoGroupMembersCreate for multipart/form-data ContentType.
type DojoGroupMembersCreateMultipartRequestBody = DojoGroupMember

// DojoGroupMembersPartialUpdateJSONRequestBody defines body for DojoGroupMembersPartialUpdate for application/json ContentType.
type DojoGroupMembersPartialUpdateJSONRequestBody = PatchedDojoGroupMember

// DojoGroupMembersPartialUpdateFormdataRequestBody defines body for DojoGroupMembersPartialUpdate for application/x-www-form-urlencoded ContentType.
type DojoGroupMembersPartialUpdateFormdataRequestBody = PatchedDojoGroupMember

// DojoGroupMembersPartialUpdateMultipartRequestBody defines body for DojoGroupMembersPartialUpdate for multipart/form-data ContentType.
type DojoGroupMembersPartialUpdateMultipartRequestBody = PatchedDojoGroupMember

// DojoGroupMembersUpdateJSONRequestBody defines body for DojoGroupMembersUpdate for application/json ContentType.
type DojoGroupMembersUpdateJSONRequestBody = DojoGroupMember

// DojoGroupMembersUpdateFormdataRequestBody defines body for DojoGroupMembersUpdate for application/x-www-form-urlencoded ContentType.
type DojoGroupMembersUpdateFormdataRequestBody = DojoGroupMember

// DojoGroupMembersUpdateMultipartRequestBody defines body for DojoGroupMembersUpdate for multipart/form-data ContentType.
type DojoGroupMembersUpdateMultipartRequestBody = DojoGroupMember

// DojoGroupsCreateJSONRequestBody defines body for DojoGroupsCreate for application/json ContentType.
type DojoGroupsCreateJSONRequestBody = DojoGroup

// DojoGroupsCreateFormdataRequestBody defines body for DojoGroupsCreate for application/x-www-form-urlencoded ContentType.
type DojoGroupsCreateFormdataRequestBody = DojoGroup

// DojoGroupsCreateMultipartRequestBody defines body for DojoGroupsCreate for multipart/form-data ContentType.
type DojoGroupsCreateMultipartRequestBody = DojoGroup

// DojoGroupsPartialUpdateJSONRequestBody defines body for DojoGroupsPartialUpdate for application/json ContentType.
type DojoGroupsPartialUpdateJSONRequestBody = PatchedDojoGroup

// DojoGroupsPartialUpdateFormdataRequestBody defines body for DojoGroupsPartialUpdate for application/x-www-form-urlencoded ContentType.
type DojoGroupsPartialUpdateFormdataRequestBody = PatchedDojoGroup

// DojoGroupsPartialUpdateMultipartRequestBody defines body for DojoGroupsPartialUpdate for multipart/form-data ContentType.
type DojoGroupsPartialUpdateMultipartRequestBody = PatchedDojoGroup

// DojoGroupsUpdateJSONRequestBody defines body for DojoGroupsUpdate for application/json ContentType.
type DojoGroupsUpdateJSONRequestBody = DojoGroup

// DojoGroupsUpdateFormdataRequestBody defines body for DojoGroupsUpdate for application/x-www-form-urlencoded ContentType.
type DojoGroupsUpdateFormdataRequestBody = DojoGroup

// DojoGroupsUpdateMultipartRequestBody defines body for DojoGroupsUpdate for multipart/form-data ContentType.
type DojoGroupsUpdateMultipartRequestBody = DojoGroup

// EndpointMetaImportCreateMultipartRequestBody defines body for EndpointMetaImportCreate for multipart/form-data ContentType.
type EndpointMetaImportCreateMultipartRequestBody = EndpointMetaImporter

// EndpointStatusCreateJSONRequestBody defines body for EndpointStatusCreate for application/json ContentType.
type EndpointStatusCreateJSONRequestBody = EndpointStatus

// EndpointStatusCreateFormdataRequestBody defines body for EndpointStatusCreate for application/x-www-form-urlencoded ContentType.
type EndpointStatusCreateFormdataRequestBody = EndpointStatus

// EndpointStatusCreateMultipartRequestBody defines body for EndpointStatusCreate for multipart/form-data ContentType.
type EndpointStatusCreateMultipartRequestBody = EndpointStatus

// EndpointStatusPartialUpdateJSONRequestBody defines body for EndpointStatusPartialUpdate for application/json ContentType.
type EndpointStatusPartialUpdateJSONRequestBody = PatchedEndpointStatus

// EndpointStatusPartialUpdateFormdataRequestBody defines body for EndpointStatusPartialUpdate for application/x-www-form-urlencoded ContentType.
type EndpointStatusPartialUpdateFormdataRequestBody = PatchedEndpointStatus

// EndpointStatusPartialUpdateMultipartRequestBody defines body for EndpointStatusPartialUpdate for multipart/form-data ContentType.
type EndpointStatusPartialUpdateMultipartRequestBody = PatchedEndpointStatus

// EndpointStatusUpdateJSONRequestBody defines body for EndpointStatusUpdate for application/json ContentType.
type EndpointStatusUpdateJSONRequestBody = EndpointStatus

// EndpointStatusUpdateFormdataRequestBody defines body for EndpointStatusUpdate for application/x-www-form-urlencoded ContentType.
type EndpointStatusUpdateFormdataRequestBody = EndpointStatus

// EndpointStatusUpdateMultipartRequestBody defines body for EndpointStatusUpdate for multipart/form-data ContentType.
type EndpointStatusUpdateMultipartRequestBody = EndpointStatus

// EndpointsCreateJSONRequestBody defines body for EndpointsCreate for application/json ContentType.
type EndpointsCreateJSONRequestBody = Endpoint

// EndpointsCreateFormdataRequestBody defines body for EndpointsCreate for application/x-www-form-urlencoded ContentType.
type EndpointsCreateFormdataRequestBody = Endpoint

// EndpointsCreateMultipartRequestBody defines body for EndpointsCreate for multipart/form-data ContentType.
type EndpointsCreateMultipartRequestBody = Endpoint

// EndpointsPartialUpdateJSONRequestBody defines body for EndpointsPartialUpdate for application/json ContentType.
type EndpointsPartialUpdateJSONRequestBody = PatchedEndpoint

// EndpointsPartialUpdateFormdataRequestBody defines body for EndpointsPartialUpdate for application/x-www-form-urlencoded ContentType.
type EndpointsPartialUpdateFormdataRequestBody = PatchedEndpoint

// EndpointsPartialUpdateMultipartRequestBody defines body for EndpointsPartialUpdate for multipart/form-data ContentType.
type EndpointsPartialUpdateMultipartRequestBody = PatchedEndpoint

// EndpointsUpdateJSONRequestBody defines body for EndpointsUpdate for application/json ContentType.
type EndpointsUpdateJSONRequestBody = Endpoint

// EndpointsUpdateFormdataRequestBody defines body for EndpointsUpdate for application/x-www-form-urlencoded ContentType.
type EndpointsUpdateFormdataRequestBody = Endpoint

// EndpointsUpdateMultipartRequestBody defines body for EndpointsUpdate for multipart/form-data ContentType.
type EndpointsUpdateMultipartRequestBody = Endpoint

// EndpointsGenerateReportCreateJSONRequestBody defines body for EndpointsGenerateReportCreate for application/json ContentType.
type EndpointsGenerateReportCreateJSONRequestBody = ReportGenerateOption

// EndpointsGenerateReportCreateFormdataRequestBody defines body for EndpointsGenerateReportCreate for application/x-www-form-urlencoded ContentType.
type EndpointsGenerateReportCreateFormdataRequestBody = ReportGenerateOption

// EndpointsGenerateReportCreateMultipartRequestBody defines body for EndpointsGenerateReportCreate for multipart/form-data ContentType.
type EndpointsGenerateReportCreateMultipartRequestBody = ReportGenerateOption

// EngagementPresetsCreateJSONRequestBody defines body for EngagementPresetsCreate for application/json ContentType.
type EngagementPresetsCreateJSONRequestBody = EngagementPresets

// EngagementPresetsCreateFormdataRequestBody defines body for EngagementPresetsCreate for application/x-www-form-urlencoded ContentType.
type EngagementPresetsCreateFormdataRequestBody = EngagementPresets

// EngagementPresetsCreateMultipartRequestBody defines body for EngagementPresetsCreate for multipart/form-data ContentType.
type EngagementPresetsCreateMultipartRequestBody = EngagementPresets

// EngagementPresetsPartialUpdateJSONRequestBody defines body for EngagementPresetsPartialUpdate for application/json ContentType.
type EngagementPresetsPartialUpdateJSONRequestBody = PatchedEngagementPresets

// EngagementPresetsPartialUpdateFormdataRequestBody defines body for EngagementPresetsPartialUpdate for application/x-www-form-urlencoded ContentType.
type EngagementPresetsPartialUpdateFormdataRequestBody = PatchedEngagementPresets

// EngagementPresetsPartialUpdateMultipartRequestBody defines body for EngagementPresetsPartialUpdate for multipart/form-data ContentType.
type EngagementPresetsPartialUpdateMultipartRequestBody = PatchedEngagementPresets

// EngagementPresetsUpdateJSONRequestBody defines body for EngagementPresetsUpdate for application/json ContentType.
type EngagementPresetsUpdateJSONRequestBody = EngagementPresets

// EngagementPresetsUpdateFormdataRequestBody defines body for EngagementPresetsUpdate for application/x-www-form-urlencoded ContentType.
type EngagementPresetsUpdateFormdataRequestBody = EngagementPresets

// EngagementPresetsUpdateMultipartRequestBody defines body for EngagementPresetsUpdate for multipart/form-data ContentType.
type EngagementPresetsUpdateMultipartRequestBody = EngagementPresets

// EngagementsCreateJSONRequestBody defines body for EngagementsCreate for application/json ContentType.
type EngagementsCreateJSONRequestBody = Engagement

// EngagementsCreateFormdataRequestBody defines body for EngagementsCreate for application/x-www-form-urlencoded ContentType.
type EngagementsCreateFormdataRequestBody = Engagement

// EngagementsCreateMultipartRequestBody defines body for EngagementsCreate for multipart/form-data ContentType.
type EngagementsCreateMultipartRequestBody = Engagement

// EngagementsPartialUpdateJSONRequestBody defines body for EngagementsPartialUpdate for application/json ContentType.
type EngagementsPartialUpdateJSONRequestBody = PatchedEngagement

// EngagementsPartialUpdateFormdataRequestBody defines body for EngagementsPartialUpdate for application/x-www-form-urlencoded ContentType.
type EngagementsPartialUpdateFormdataRequestBody = PatchedEngagement

// EngagementsPartialUpdateMultipartRequestBody defines body for EngagementsPartialUpdate for multipart/form-data ContentType.
type EngagementsPartialUpdateMultipartRequestBody = PatchedEngagement

// EngagementsUpdateJSONRequestBody defines body for EngagementsUpdate for application/json ContentType.
type EngagementsUpdateJSONRequestBody = Engagement

// EngagementsUpdateFormdataRequestBody defines body for EngagementsUpdate for application/x-www-form-urlencoded ContentType.
type EngagementsUpdateFormdataRequestBody = Engagement

// EngagementsUpdateMultipartRequestBody defines body for EngagementsUpdate for multipart/form-data ContentType.
type EngagementsUpdateMultipartRequestBody = Engagement

// EngagementsAcceptRisksCreateJSONRequestBody defines body for EngagementsAcceptRisksCreate for application/json ContentType.
type EngagementsAcceptRisksCreateJSONRequestBody = EngagementsAcceptRisksCreateJSONBody

// EngagementsAcceptRisksCreateFormdataRequestBody defines body for EngagementsAcceptRisksCreate for application/x-www-form-urlencoded ContentType.
type EngagementsAcceptRisksCreateFormdataRequestBody = EngagementsAcceptRisksCreateFormdataBody

// EngagementsAcceptRisksCreateMultipartRequestBody defines body for EngagementsAcceptRisksCreate for multipart/form-data ContentType.
type EngagementsAcceptRisksCreateMultipartRequestBody = EngagementsAcceptRisksCreateMultipartBody

// EngagementsFilesCreateMultipartRequestBody defines body for EngagementsFilesCreate for multipart/form-data ContentType.
type EngagementsFilesCreateMultipartRequestBody = AddNewFileOption

// EngagementsGenerateReportCreateJSONRequestBody defines body for EngagementsGenerateReportCreate for application/json ContentType.
type EngagementsGenerateReportCreateJSONRequestBody = ReportGenerateOption

// EngagementsGenerateReportCreateFormdataRequestBody defines body for EngagementsGenerateReportCreate for application/x-www-form-urlencoded ContentType.
type EngagementsGenerateReportCreateFormdataRequestBody = ReportGenerateOption

// EngagementsGenerateReportCreateMultipartRequestBody defines body for EngagementsGenerateReportCreate for multipart/form-data ContentType.
type EngagementsGenerateReportCreateMultipartRequestBody = ReportGenerateOption

// EngagementsNotesCreateJSONRequestBody defines body for EngagementsNotesCreate for application/json ContentType.
type EngagementsNotesCreateJSONRequestBody = AddNewNoteOption

// EngagementsNotesCreateFormdataRequestBody defines body for EngagementsNotesCreate for application/x-www-form-urlencoded ContentType.
type EngagementsNotesCreateFormdataRequestBody = AddNewNoteOption

// EngagementsNotesCreateMultipartRequestBody defines body for EngagementsNotesCreate for multipart/form-data ContentType.
type EngagementsNotesCreateMultipartRequestBody = AddNewNoteOption

// FindingTemplatesCreateJSONRequestBody defines body for FindingTemplatesCreate for application/json ContentType.
type FindingTemplatesCreateJSONRequestBody = FindingTemplate

// FindingTemplatesCreateFormdataRequestBody defines body for FindingTemplatesCreate for application/x-www-form-urlencoded ContentType.
type FindingTemplatesCreateFormdataRequestBody = FindingTemplate

// FindingTemplatesCreateMultipartRequestBody defines body for FindingTemplatesCreate for multipart/form-data ContentType.
type FindingTemplatesCreateMultipartRequestBody = FindingTemplate

// FindingTemplatesPartialUpdateJSONRequestBody defines body for FindingTemplatesPartialUpdate for application/json ContentType.
type FindingTemplatesPartialUpdateJSONRequestBody = PatchedFindingTemplate

// FindingTemplatesPartialUpdateFormdataRequestBody defines body for FindingTemplatesPartialUpdate for application/x-www-form-urlencoded ContentType.
type FindingTemplatesPartialUpdateFormdataRequestBody = PatchedFindingTemplate

// FindingTemplatesPartialUpdateMultipartRequestBody defines body for FindingTemplatesPartialUpdate for multipart/form-data ContentType.
type FindingTemplatesPartialUpdateMultipartRequestBody = PatchedFindingTemplate

// FindingTemplatesUpdateJSONRequestBody defines body for FindingTemplatesUpdate for application/json ContentType.
type FindingTemplatesUpdateJSONRequestBody = FindingTemplate

// FindingTemplatesUpdateFormdataRequestBody defines body for FindingTemplatesUpdate for application/x-www-form-urlencoded ContentType.
type FindingTemplatesUpdateFormdataRequestBody = FindingTemplate

// FindingTemplatesUpdateMultipartRequestBody defines body for FindingTemplatesUpdate for multipart/form-data ContentType.
type FindingTemplatesUpdateMultipartRequestBody = FindingTemplate

// FindingsCreateJSONRequestBody defines body for FindingsCreate for application/json ContentType.
type FindingsCreateJSONRequestBody = FindingCreate

// FindingsCreateFormdataRequestBody defines body for FindingsCreate for application/x-www-form-urlencoded ContentType.
type FindingsCreateFormdataRequestBody = FindingCreate

// FindingsCreateMultipartRequestBody defines body for FindingsCreate for multipart/form-data ContentType.
type FindingsCreateMultipartRequestBody = FindingCreate

// FindingsAcceptRisksCreateJSONRequestBody defines body for FindingsAcceptRisksCreate for application/json ContentType.
type FindingsAcceptRisksCreateJSONRequestBody = FindingsAcceptRisksCreateJSONBody

// FindingsAcceptRisksCreateFormdataRequestBody defines body for FindingsAcceptRisksCreate for application/x-www-form-urlencoded ContentType.
type FindingsAcceptRisksCreateFormdataRequestBody = FindingsAcceptRisksCreateFormdataBody

// FindingsAcceptRisksCreateMultipartRequestBody defines body for FindingsAcceptRisksCreate for multipart/form-data ContentType.
type FindingsAcceptRisksCreateMultipartRequestBody = FindingsAcceptRisksCreateMultipartBody

// FindingsGenerateReportCreateJSONRequestBody defines body for FindingsGenerateReportCreate for application/json ContentType.
type FindingsGenerateReportCreateJSONRequestBody = ReportGenerateOption

// FindingsGenerateReportCreateFormdataRequestBody defines body for FindingsGenerateReportCreate for application/x-www-form-urlencoded ContentType.
type FindingsGenerateReportCreateFormdataRequestBody = ReportGenerateOption

// FindingsGenerateReportCreateMultipartRequestBody defines body for FindingsGenerateReportCreate for multipart/form-data ContentType.
type FindingsGenerateReportCreateMultipartRequestBody = ReportGenerateOption

// FindingsPartialUpdateJSONRequestBody defines body for FindingsPartialUpdate for application/json ContentType.
type FindingsPartialUpdateJSONRequestBody = PatchedFinding

// FindingsPartialUpdateFormdataRequestBody defines body for FindingsPartialUpdate for application/x-www-form-urlencoded ContentType.
type FindingsPartialUpdateFormdataRequestBody = PatchedFinding

// FindingsPartialUpdateMultipartRequestBody defines body for FindingsPartialUpdate for multipart/form-data ContentType.
type FindingsPartialUpdateMultipartRequestBody = PatchedFinding

// FindingsUpdateJSONRequestBody defines body for FindingsUpdate for application/json ContentType.
type FindingsUpdateJSONRequestBody = Finding

// FindingsUpdateFormdataRequestBody defines body for FindingsUpdate for application/x-www-form-urlencoded ContentType.
type FindingsUpdateFormdataRequestBody = Finding

// FindingsUpdateMultipartRequestBody defines body for FindingsUpdate for multipart/form-data ContentType.
type FindingsUpdateMultipartRequestBody = Finding

// FindingsFilesCreateMultipartRequestBody defines body for FindingsFilesCreate for multipart/form-data ContentType.
type FindingsFilesCreateMultipartRequestBody = AddNewFileOption

// FindingsMetadataCreateJSONRequestBody defines body for FindingsMetadataCreate for application/json ContentType.
type FindingsMetadataCreateJSONRequestBody = FindingMeta

// FindingsMetadataCreateFormdataRequestBody defines body for FindingsMetadataCreate for application/x-www-form-urlencoded ContentType.
type FindingsMetadataCreateFormdataRequestBody = FindingMeta

// FindingsMetadataCreateMultipartRequestBody defines body for FindingsMetadataCreate for multipart/form-data ContentType.
type FindingsMetadataCreateMultipartRequestBody = FindingMeta

// FindingsMetadataUpdateJSONRequestBody defines body for FindingsMetadataUpdate for application/json ContentType.
type FindingsMetadataUpdateJSONRequestBody = FindingMeta

// FindingsMetadataUpdateFormdataRequestBody defines body for FindingsMetadataUpdate for application/x-www-form-urlencoded ContentType.
type FindingsMetadataUpdateFormdataRequestBody = FindingMeta

// FindingsMetadataUpdateMultipartRequestBody defines body for FindingsMetadataUpdate for multipart/form-data ContentType.
type FindingsMetadataUpdateMultipartRequestBody = FindingMeta

// FindingsNotesCreateJSONRequestBody defines body for FindingsNotesCreate for application/json ContentType.
type FindingsNotesCreateJSONRequestBody = AddNewNoteOption

// FindingsNotesCreateFormdataRequestBody defines body for FindingsNotesCreate for application/x-www-form-urlencoded ContentType.
type FindingsNotesCreateFormdataRequestBody = AddNewNoteOption

// FindingsNotesCreateMultipartRequestBody defines body for FindingsNotesCreate for multipart/form-data ContentType.
type FindingsNotesCreateMultipartRequestBody = AddNewNoteOption

// FindingsRemoveNotePartialUpdateJSONRequestBody defines body for FindingsRemoveNotePartialUpdate for application/json ContentType.
type FindingsRemoveNotePartialUpdateJSONRequestBody = PatchedFindingNote

// FindingsRemoveNotePartialUpdateFormdataRequestBody defines body for FindingsRemoveNotePartialUpdate for application/x-www-form-urlencoded ContentType.
type FindingsRemoveNotePartialUpdateFormdataRequestBody = PatchedFindingNote

// FindingsRemoveNotePartialUpdateMultipartRequestBody defines body for FindingsRemoveNotePartialUpdate for multipart/form-data ContentType.
type FindingsRemoveNotePartialUpdateMultipartRequestBody = PatchedFindingNote

// FindingsRemoveTagsPartialUpdateJSONRequestBody defines body for FindingsRemoveTagsPartialUpdate for application/json ContentType.
type FindingsRemoveTagsPartialUpdateJSONRequestBody = PatchedTag

// FindingsRemoveTagsPartialUpdateFormdataRequestBody defines body for FindingsRemoveTagsPartialUpdate for application/x-www-form-urlencoded ContentType.
type FindingsRemoveTagsPartialUpdateFormdataRequestBody = PatchedTag

// FindingsRemoveTagsPartialUpdateMultipartRequestBody defines body for FindingsRemoveTagsPartialUpdate for multipart/form-data ContentType.
type FindingsRemoveTagsPartialUpdateMultipartRequestBody = PatchedTag

// FindingsRemoveTagsUpdateJSONRequestBody defines body for FindingsRemoveTagsUpdate for application/json ContentType.
type FindingsRemoveTagsUpdateJSONRequestBody = Tag

// FindingsRemoveTagsUpdateFormdataRequestBody defines body for FindingsRemoveTagsUpdate for application/x-www-form-urlencoded ContentType.
type FindingsRemoveTagsUpdateFormdataRequestBody = Tag

// FindingsRemoveTagsUpdateMultipartRequestBody defines body for FindingsRemoveTagsUpdate for multipart/form-data ContentType.
type FindingsRemoveTagsUpdateMultipartRequestBody = Tag

// FindingsRequestResponseCreateJSONRequestBody defines body for FindingsRequestResponseCreate for application/json ContentType.
type FindingsRequestResponseCreateJSONRequestBody = BurpRawRequestResponse

// FindingsRequestResponseCreateFormdataRequestBody defines body for FindingsRequestResponseCreate for application/x-www-form-urlencoded ContentType.
type FindingsRequestResponseCreateFormdataRequestBody = BurpRawRequestResponse

// FindingsRequestResponseCreateMultipartRequestBody defines body for FindingsRequestResponseCreate for multipart/form-data ContentType.
type FindingsRequestResponseCreateMultipartRequestBody = BurpRawRequestResponse

// FindingsTagsCreateJSONRequestBody defines body for FindingsTagsCreate for application/json ContentType.
type FindingsTagsCreateJSONRequestBody = Tag

// FindingsTagsCreateFormdataRequestBody defines body for FindingsTagsCreate for application/x-www-form-urlencoded ContentType.
type FindingsTagsCreateFormdataRequestBody = Tag

// FindingsTagsCreateMultipartRequestBody defines body for FindingsTagsCreate for multipart/form-data ContentType.
type FindingsTagsCreateMultipartRequestBody = Tag

// GlobalRolesCreateJSONRequestBody defines body for GlobalRolesCreate for application/json ContentType.
type GlobalRolesCreateJSONRequestBody = GlobalRole

// GlobalRolesCreateFormdataRequestBody defines body for GlobalRolesCreate for application/x-www-form-urlencoded ContentType.
type GlobalRolesCreateFormdataRequestBody = GlobalRole

// GlobalRolesCreateMultipartRequestBody defines body for GlobalRolesCreate for multipart/form-data ContentType.
type GlobalRolesCreateMultipartRequestBody = GlobalRole

// GlobalRolesPartialUpdateJSONRequestBody defines body for GlobalRolesPartialUpdate for application/json ContentType.
type GlobalRolesPartialUpdateJSONRequestBody = PatchedGlobalRole

// GlobalRolesPartialUpdateFormdataRequestBody defines body for GlobalRolesPartialUpdate for application/x-www-form-urlencoded ContentType.
type GlobalRolesPartialUpdateFormdataRequestBody = PatchedGlobalRole

// GlobalRolesPartialUpdateMultipartRequestBody defines body for GlobalRolesPartialUpdate for multipart/form-data ContentType.
type GlobalRolesPartialUpdateMultipartRequestBody = PatchedGlobalRole

// GlobalRolesUpdateJSONRequestBody defines body for GlobalRolesUpdate for application/json ContentType.
type GlobalRolesUpdateJSONRequestBody = GlobalRole

// GlobalRolesUpdateFormdataRequestBody defines body for GlobalRolesUpdate for application/x-www-form-urlencoded ContentType.
type GlobalRolesUpdateFormdataRequestBody = GlobalRole

// GlobalRolesUpdateMultipartRequestBody defines body for GlobalRolesUpdate for multipart/form-data ContentType.
type GlobalRolesUpdateMultipartRequestBody = GlobalRole

// ImportLanguagesCreateMultipartRequestBody defines body for ImportLanguagesCreate for multipart/form-data ContentType.
type ImportLanguagesCreateMultipartRequestBody = ImportLanguages

// ImportScanCreateMultipartRequestBody defines body for ImportScanCreate for multipart/form-data ContentType.
type ImportScanCreateMultipartRequestBody = ImportScan

// JiraConfigurationsCreateJSONRequestBody defines body for JiraConfigurationsCreate for application/json ContentType.
type JiraConfigurationsCreateJSONRequestBody = JIRAInstance

// JiraConfigurationsCreateFormdataRequestBody defines body for JiraConfigurationsCreate for application/x-www-form-urlencoded ContentType.
type JiraConfigurationsCreateFormdataRequestBody = JIRAInstance

// JiraConfigurationsCreateMultipartRequestBody defines body for JiraConfigurationsCreate for multipart/form-data ContentType.
type JiraConfigurationsCreateMultipartRequestBody = JIRAInstance

// JiraConfigurationsPartialUpdateJSONRequestBody defines body for JiraConfigurationsPartialUpdate for application/json ContentType.
type JiraConfigurationsPartialUpdateJSONRequestBody = PatchedJIRAInstance

// JiraConfigurationsPartialUpdateFormdataRequestBody defines body for JiraConfigurationsPartialUpdate for application/x-www-form-urlencoded ContentType.
type JiraConfigurationsPartialUpdateFormdataRequestBody = PatchedJIRAInstance

// JiraConfigurationsPartialUpdateMultipartRequestBody defines body for JiraConfigurationsPartialUpdate for multipart/form-data ContentType.
type JiraConfigurationsPartialUpdateMultipartRequestBody = PatchedJIRAInstance

// JiraConfigurationsUpdateJSONRequestBody defines body for JiraConfigurationsUpdate for application/json ContentType.
type JiraConfigurationsUpdateJSONRequestBody = JIRAInstance

// JiraConfigurationsUpdateFormdataRequestBody defines body for JiraConfigurationsUpdate for application/x-www-form-urlencoded ContentType.
type JiraConfigurationsUpdateFormdataRequestBody = JIRAInstance

// JiraConfigurationsUpdateMultipartRequestBody defines body for JiraConfigurationsUpdate for multipart/form-data ContentType.
type JiraConfigurationsUpdateMultipartRequestBody = JIRAInstance

// JiraFindingMappingsCreateJSONRequestBody defines body for JiraFindingMappingsCreate for application/json ContentType.
type JiraFindingMappingsCreateJSONRequestBody = JIRAIssue

// JiraFindingMappingsCreateFormdataRequestBody defines body for JiraFindingMappingsCreate for application/x-www-form-urlencoded ContentType.
type JiraFindingMappingsCreateFormdataRequestBody = JIRAIssue

// JiraFindingMappingsCreateMultipartRequestBody defines body for JiraFindingMappingsCreate for multipart/form-data ContentType.
type JiraFindingMappingsCreateMultipartRequestBody = JIRAIssue

// JiraFindingMappingsPartialUpdateJSONRequestBody defines body for JiraFindingMappingsPartialUpdate for application/json ContentType.
type JiraFindingMappingsPartialUpdateJSONRequestBody = PatchedJIRAIssue

// JiraFindingMappingsPartialUpdateFormdataRequestBody defines body for JiraFindingMappingsPartialUpdate for application/x-www-form-urlencoded ContentType.
type JiraFindingMappingsPartialUpdateFormdataRequestBody = PatchedJIRAIssue

// JiraFindingMappingsPartialUpdateMultipartRequestBody defines body for JiraFindingMappingsPartialUpdate for multipart/form-data ContentType.
type JiraFindingMappingsPartialUpdateMultipartRequestBody = PatchedJIRAIssue

// JiraFindingMappingsUpdateJSONRequestBody defines body for JiraFindingMappingsUpdate for application/json ContentType.
type JiraFindingMappingsUpdateJSONRequestBody = JIRAIssue

// JiraFindingMappingsUpdateFormdataRequestBody defines body for JiraFindingMappingsUpdate for application/x-www-form-urlencoded ContentType.
type JiraFindingMappingsUpdateFormdataRequestBody = JIRAIssue

// JiraFindingMappingsUpdateMultipartRequestBody defines body for JiraFindingMappingsUpdate for multipart/form-data ContentType.
type JiraFindingMappingsUpdateMultipartRequestBody = JIRAIssue

// JiraInstancesCreateJSONRequestBody defines body for JiraInstancesCreate for application/json ContentType.
type JiraInstancesCreateJSONRequestBody = JIRAInstance

// JiraInstancesCreateFormdataRequestBody defines body for JiraInstancesCreate for application/x-www-form-urlencoded ContentType.
type JiraInstancesCreateFormdataRequestBody = JIRAInstance

// JiraInstancesCreateMultipartRequestBody defines body for JiraInstancesCreate for multipart/form-data ContentType.
type JiraInstancesCreateMultipartRequestBody = JIRAInstance

// JiraInstancesPartialUpdateJSONRequestBody defines body for JiraInstancesPartialUpdate for application/json ContentType.
type JiraInstancesPartialUpdateJSONRequestBody = PatchedJIRAInstance

// JiraInstancesPartialUpdateFormdataRequestBody defines body for JiraInstancesPartialUpdate for application/x-www-form-urlencoded ContentType.
type JiraInstancesPartialUpdateFormdataRequestBody = PatchedJIRAInstance

// JiraInstancesPartialUpdateMultipartRequestBody defines body for JiraInstancesPartialUpdate for multipart/form-data ContentType.
type JiraInstancesPartialUpdateMultipartRequestBody = PatchedJIRAInstance

// JiraInstancesUpdateJSONRequestBody defines body for JiraInstancesUpdate for application/json ContentType.
type JiraInstancesUpdateJSONRequestBody = JIRAInstance

// JiraInstancesUpdateFormdataRequestBody defines body for JiraInstancesUpdate for application/x-www-form-urlencoded ContentType.
type JiraInstancesUpdateFormdataRequestBody = JIRAInstance

// JiraInstancesUpdateMultipartRequestBody defines body for JiraInstancesUpdate for multipart/form-data ContentType.
type JiraInstancesUpdateMultipartRequestBody = JIRAInstance

// JiraProductConfigurationsCreateJSONRequestBody defines body for JiraProductConfigurationsCreate for application/json ContentType.
type JiraProductConfigurationsCreateJSONRequestBody = JIRAProject

// JiraProductConfigurationsCreateFormdataRequestBody defines body for JiraProductConfigurationsCreate for application/x-www-form-urlencoded ContentType.
type JiraProductConfigurationsCreateFormdataRequestBody = JIRAProject

// JiraProductConfigurationsCreateMultipartRequestBody defines body for JiraProductConfigurationsCreate for multipart/form-data ContentType.
type JiraProductConfigurationsCreateMultipartRequestBody = JIRAProject

// JiraProductConfigurationsPartialUpdateJSONRequestBody defines body for JiraProductConfigurationsPartialUpdate for application/json ContentType.
type JiraProductConfigurationsPartialUpdateJSONRequestBody = PatchedJIRAProject

// JiraProductConfigurationsPartialUpdateFormdataRequestBody defines body for JiraProductConfigurationsPartialUpdate for application/x-www-form-urlencoded ContentType.
type JiraProductConfigurationsPartialUpdateFormdataRequestBody = PatchedJIRAProject

// JiraProductConfigurationsPartialUpdateMultipartRequestBody defines body for JiraProductConfigurationsPartialUpdate for multipart/form-data ContentType.
type JiraProductConfigurationsPartialUpdateMultipartRequestBody = PatchedJIRAProject

// JiraProductConfigurationsUpdateJSONRequestBody defines body for JiraProductConfigurationsUpdate for application/json ContentType.
type JiraProductConfigurationsUpdateJSONRequestBody = JIRAProject

// JiraProductConfigurationsUpdateFormdataRequestBody defines body for JiraProductConfigurationsUpdate for application/x-www-form-urlencoded ContentType.
type JiraProductConfigurationsUpdateFormdataRequestBody = JIRAProject

// JiraProductConfigurationsUpdateMultipartRequestBody defines body for JiraProductConfigurationsUpdate for multipart/form-data ContentType.
type JiraProductConfigurationsUpdateMultipartRequestBody = JIRAProject

// JiraProjectsCreateJSONRequestBody defines body for JiraProjectsCreate for application/json ContentType.
type JiraProjectsCreateJSONRequestBody = JIRAProject

// JiraProjectsCreateFormdataRequestBody defines body for JiraProjectsCreate for application/x-www-form-urlencoded ContentType.
type JiraProjectsCreateFormdataRequestBody = JIRAProject

// JiraProjectsCreateMultipartRequestBody defines body for JiraProjectsCreate for multipart/form-data ContentType.
type JiraProjectsCreateMultipartRequestBody = JIRAProject

// JiraProjectsPartialUpdateJSONRequestBody defines body for JiraProjectsPartialUpdate for application/json ContentType.
type JiraProjectsPartialUpdateJSONRequestBody = PatchedJIRAProject

// JiraProjectsPartialUpdateFormdataRequestBody defines body for JiraProjectsPartialUpdate for application/x-www-form-urlencoded ContentType.
type JiraProjectsPartialUpdateFormdataRequestBody = PatchedJIRAProject

// JiraProjectsPartialUpdateMultipartRequestBody defines body for JiraProjectsPartialUpdate for multipart/form-data ContentType.
type JiraProjectsPartialUpdateMultipartRequestBody = PatchedJIRAProject

// JiraProjectsUpdateJSONRequestBody defines body for JiraProjectsUpdate for application/json ContentType.
type JiraProjectsUpdateJSONRequestBody = JIRAProject

// JiraProjectsUpdateFormdataRequestBody defines body for JiraProjectsUpdate for application/x-www-form-urlencoded ContentType.
type JiraProjectsUpdateFormdataRequestBody = JIRAProject

// JiraProjectsUpdateMultipartRequestBody defines body for JiraProjectsUpdate for multipart/form-data ContentType.
type JiraProjectsUpdateMultipartRequestBody = JIRAProject

// LanguageTypesCreateJSONRequestBody defines body for LanguageTypesCreate for application/json ContentType.
type LanguageTypesCreateJSONRequestBody = LanguageType

// LanguageTypesCreateFormdataRequestBody defines body for LanguageTypesCreate for application/x-www-form-urlencoded ContentType.
type LanguageTypesCreateFormdataRequestBody = LanguageType

// LanguageTypesCreateMultipartRequestBody defines body for LanguageTypesCreate for multipart/form-data ContentType.
type LanguageTypesCreateMultipartRequestBody = LanguageType

// LanguageTypesPartialUpdateJSONRequestBody defines body for LanguageTypesPartialUpdate for application/json ContentType.
type LanguageTypesPartialUpdateJSONRequestBody = PatchedLanguageType

// LanguageTypesPartialUpdateFormdataRequestBody defines body for LanguageTypesPartialUpdate for application/x-www-form-urlencoded ContentType.
type LanguageTypesPartialUpdateFormdataRequestBody = PatchedLanguageType

// LanguageTypesPartialUpdateMultipartRequestBody defines body for LanguageTypesPartialUpdate for multipart/form-data ContentType.
type LanguageTypesPartialUpdateMultipartRequestBody = PatchedLanguageType

// LanguageTypesUpdateJSONRequestBody defines body for LanguageTypesUpdate for application/json ContentType.
type LanguageTypesUpdateJSONRequestBody = LanguageType

// LanguageTypesUpdateFormdataRequestBody defines body for LanguageTypesUpdate for application/x-www-form-urlencoded ContentType.
type LanguageTypesUpdateFormdataRequestBody = LanguageType

// LanguageTypesUpdateMultipartRequestBody defines body for LanguageTypesUpdate for multipart/form-data ContentType.
type LanguageTypesUpdateMultipartRequestBody = LanguageType

// LanguagesCreateJSONRequestBody defines body for LanguagesCreate for application/json ContentType.
type LanguagesCreateJSONRequestBody = Language

// LanguagesCreateFormdataRequestBody defines body for LanguagesCreate for application/x-www-form-urlencoded ContentType.
type LanguagesCreateFormdataRequestBody = Language

// LanguagesCreateMultipartRequestBody defines body for LanguagesCreate for multipart/form-data ContentType.
type LanguagesCreateMultipartRequestBody = Language

// LanguagesPartialUpdateJSONRequestBody defines body for LanguagesPartialUpdate for application/json ContentType.
type LanguagesPartialUpdateJSONRequestBody = PatchedLanguage

// LanguagesPartialUpdateFormdataRequestBody defines body for LanguagesPartialUpdate for application/x-www-form-urlencoded ContentType.
type LanguagesPartialUpdateFormdataRequestBody = PatchedLanguage

// LanguagesPartialUpdateMultipartRequestBody defines body for LanguagesPartialUpdate for multipart/form-data ContentType.
type LanguagesPartialUpdateMultipartRequestBody = PatchedLanguage

// LanguagesUpdateJSONRequestBody defines body for LanguagesUpdate for application/json ContentType.
type LanguagesUpdateJSONRequestBody = Language

// LanguagesUpdateFormdataRequestBody defines body for LanguagesUpdate for application/x-www-form-urlencoded ContentType.
type LanguagesUpdateFormdataRequestBody = Language

// LanguagesUpdateMultipartRequestBody defines body for LanguagesUpdate for multipart/form-data ContentType.
type LanguagesUpdateMultipartRequestBody = Language

// MetadataCreateJSONRequestBody defines body for MetadataCreate for application/json ContentType.
type MetadataCreateJSONRequestBody = Meta

// MetadataCreateFormdataRequestBody defines body for MetadataCreate for application/x-www-form-urlencoded ContentType.
type MetadataCreateFormdataRequestBody = Meta

// MetadataCreateMultipartRequestBody defines body for MetadataCreate for multipart/form-data ContentType.
type MetadataCreateMultipartRequestBody = Meta

// MetadataPartialUpdateJSONRequestBody defines body for MetadataPartialUpdate for application/json ContentType.
type MetadataPartialUpdateJSONRequestBody = PatchedMeta

// MetadataPartialUpdateFormdataRequestBody defines body for MetadataPartialUpdate for application/x-www-form-urlencoded ContentType.
type MetadataPartialUpdateFormdataRequestBody = PatchedMeta

// MetadataPartialUpdateMultipartRequestBody defines body for MetadataPartialUpdate for multipart/form-data ContentType.
type MetadataPartialUpdateMultipartRequestBody = PatchedMeta

// MetadataUpdateJSONRequestBody defines body for MetadataUpdate for application/json ContentType.
type MetadataUpdateJSONRequestBody = Meta

// MetadataUpdateFormdataRequestBody defines body for MetadataUpdate for application/x-www-form-urlencoded ContentType.
type MetadataUpdateFormdataRequestBody = Meta

// MetadataUpdateMultipartRequestBody defines body for MetadataUpdate for multipart/form-data ContentType.
type MetadataUpdateMultipartRequestBody = Meta

// NetworkLocationsCreateJSONRequestBody defines body for NetworkLocationsCreate for application/json ContentType.
type NetworkLocationsCreateJSONRequestBody = NetworkLocations

// NetworkLocationsCreateFormdataRequestBody defines body for NetworkLocationsCreate for application/x-www-form-urlencoded ContentType.
type NetworkLocationsCreateFormdataRequestBody = NetworkLocations

// NetworkLocationsCreateMultipartRequestBody defines body for NetworkLocationsCreate for multipart/form-data ContentType.
type NetworkLocationsCreateMultipartRequestBody = NetworkLocations

// NetworkLocationsPartialUpdateJSONRequestBody defines body for NetworkLocationsPartialUpdate for application/json ContentType.
type NetworkLocationsPartialUpdateJSONRequestBody = PatchedNetworkLocations

// NetworkLocationsPartialUpdateFormdataRequestBody defines body for NetworkLocationsPartialUpdate for application/x-www-form-urlencoded ContentType.
type NetworkLocationsPartialUpdateFormdataRequestBody = PatchedNetworkLocations

// NetworkLocationsPartialUpdateMultipartRequestBody defines body for NetworkLocationsPartialUpdate for multipart/form-data ContentType.
type NetworkLocationsPartialUpdateMultipartRequestBody = PatchedNetworkLocations

// NetworkLocationsUpdateJSONRequestBody defines body for NetworkLocationsUpdate for application/json ContentType.
type NetworkLocationsUpdateJSONRequestBody = NetworkLocations

// NetworkLocationsUpdateFormdataRequestBody defines body for NetworkLocationsUpdate for application/x-www-form-urlencoded ContentType.
type NetworkLocationsUpdateFormdataRequestBody = NetworkLocations

// NetworkLocationsUpdateMultipartRequestBody defines body for NetworkLocationsUpdate for multipart/form-data ContentType.
type NetworkLocationsUpdateMultipartRequestBody = NetworkLocations

// NoteTypeCreateJSONRequestBody defines body for NoteTypeCreate for application/json ContentType.
type NoteTypeCreateJSONRequestBody = NoteType

// NoteTypeCreateFormdataRequestBody defines body for NoteTypeCreate for application/x-www-form-urlencoded ContentType.
type NoteTypeCreateFormdataRequestBody = NoteType

// NoteTypeCreateMultipartRequestBody defines body for NoteTypeCreate for multipart/form-data ContentType.
type NoteTypeCreateMultipartRequestBody = NoteType

// NoteTypePartialUpdateJSONRequestBody defines body for NoteTypePartialUpdate for application/json ContentType.
type NoteTypePartialUpdateJSONRequestBody = PatchedNoteType

// NoteTypePartialUpdateFormdataRequestBody defines body for NoteTypePartialUpdate for application/x-www-form-urlencoded ContentType.
type NoteTypePartialUpdateFormdataRequestBody = PatchedNoteType

// NoteTypePartialUpdateMultipartRequestBody defines body for NoteTypePartialUpdate for multipart/form-data ContentType.
type NoteTypePartialUpdateMultipartRequestBody = PatchedNoteType

// NoteTypeUpdateJSONRequestBody defines body for NoteTypeUpdate for application/json ContentType.
type NoteTypeUpdateJSONRequestBody = NoteType

// NoteTypeUpdateFormdataRequestBody defines body for NoteTypeUpdate for application/x-www-form-urlencoded ContentType.
type NoteTypeUpdateFormdataRequestBody = NoteType

// NoteTypeUpdateMultipartRequestBody defines body for NoteTypeUpdate for multipart/form-data ContentType.
type NoteTypeUpdateMultipartRequestBody = NoteType

// NotesPartialUpdateJSONRequestBody defines body for NotesPartialUpdate for application/json ContentType.
type NotesPartialUpdateJSONRequestBody = PatchedNote

// NotesPartialUpdateFormdataRequestBody defines body for NotesPartialUpdate for application/x-www-form-urlencoded ContentType.
type NotesPartialUpdateFormdataRequestBody = PatchedNote

// NotesPartialUpdateMultipartRequestBody defines body for NotesPartialUpdate for multipart/form-data ContentType.
type NotesPartialUpdateMultipartRequestBody = PatchedNote

// NotesUpdateJSONRequestBody defines body for NotesUpdate for application/json ContentType.
type NotesUpdateJSONRequestBody = Note

// NotesUpdateFormdataRequestBody defines body for NotesUpdate for application/x-www-form-urlencoded ContentType.
type NotesUpdateFormdataRequestBody = Note

// NotesUpdateMultipartRequestBody defines body for NotesUpdate for multipart/form-data ContentType.
type NotesUpdateMultipartRequestBody = Note

// NotificationsCreateJSONRequestBody defines body for NotificationsCreate for application/json ContentType.
type NotificationsCreateJSONRequestBody = Notifications

// NotificationsCreateFormdataRequestBody defines body for NotificationsCreate for application/x-www-form-urlencoded ContentType.
type NotificationsCreateFormdataRequestBody = Notifications

// NotificationsCreateMultipartRequestBody defines body for NotificationsCreate for multipart/form-data ContentType.
type NotificationsCreateMultipartRequestBody = Notifications

// NotificationsPartialUpdateJSONRequestBody defines body for NotificationsPartialUpdate for application/json ContentType.
type NotificationsPartialUpdateJSONRequestBody = PatchedNotifications

// NotificationsPartialUpdateFormdataRequestBody defines body for NotificationsPartialUpdate for application/x-www-form-urlencoded ContentType.
type NotificationsPartialUpdateFormdataRequestBody = PatchedNotifications

// NotificationsPartialUpdateMultipartRequestBody defines body for NotificationsPartialUpdate for multipart/form-data ContentType.
type NotificationsPartialUpdateMultipartRequestBody = PatchedNotifications

// NotificationsUpdateJSONRequestBody defines body for NotificationsUpdate for application/json ContentType.
type NotificationsUpdateJSONRequestBody = Notifications

// NotificationsUpdateFormdataRequestBody defines body for NotificationsUpdate for application/x-www-form-urlencoded ContentType.
type NotificationsUpdateFormdataRequestBody = Notifications

// NotificationsUpdateMultipartRequestBody defines body for NotificationsUpdate for multipart/form-data ContentType.
type NotificationsUpdateMultipartRequestBody = Notifications

// ProductApiScanConfigurationsCreateJSONRequestBody defines body for ProductApiScanConfigurationsCreate for application/json ContentType.
type ProductApiScanConfigurationsCreateJSONRequestBody = ProductAPIScanConfiguration

// ProductApiScanConfigurationsCreateFormdataRequestBody defines body for ProductApiScanConfigurationsCreate for application/x-www-form-urlencoded ContentType.
type ProductApiScanConfigurationsCreateFormdataRequestBody = ProductAPIScanConfiguration

// ProductApiScanConfigurationsCreateMultipartRequestBody defines body for ProductApiScanConfigurationsCreate for multipart/form-data ContentType.
type ProductApiScanConfigurationsCreateMultipartRequestBody = ProductAPIScanConfiguration

// ProductApiScanConfigurationsPartialUpdateJSONRequestBody defines body for ProductApiScanConfigurationsPartialUpdate for application/json ContentType.
type ProductApiScanConfigurationsPartialUpdateJSONRequestBody = PatchedProductAPIScanConfiguration

// ProductApiScanConfigurationsPartialUpdateFormdataRequestBody defines body for ProductApiScanConfigurationsPartialUpdate for application/x-www-form-urlencoded ContentType.
type ProductApiScanConfigurationsPartialUpdateFormdataRequestBody = PatchedProductAPIScanConfiguration

// ProductApiScanConfigurationsPartialUpdateMultipartRequestBody defines body for ProductApiScanConfigurationsPartialUpdate for multipart/form-data ContentType.
type ProductApiScanConfigurationsPartialUpdateMultipartRequestBody = PatchedProductAPIScanConfiguration

// ProductApiScanConfigurationsUpdateJSONRequestBody defines body for ProductApiScanConfigurationsUpdate for application/json ContentType.
type ProductApiScanConfigurationsUpdateJSONRequestBody = ProductAPIScanConfiguration

// ProductApiScanConfigurationsUpdateFormdataRequestBody defines body for ProductApiScanConfigurationsUpdate for application/x-www-form-urlencoded ContentType.
type ProductApiScanConfigurationsUpdateFormdataRequestBody = ProductAPIScanConfiguration

// ProductApiScanConfigurationsUpdateMultipartRequestBody defines body for ProductApiScanConfigurationsUpdate for multipart/form-data ContentType.
type ProductApiScanConfigurationsUpdateMultipartRequestBody = ProductAPIScanConfiguration

// ProductGroupsCreateJSONRequestBody defines body for ProductGroupsCreate for application/json ContentType.
type ProductGroupsCreateJSONRequestBody = ProductGroup

// ProductGroupsCreateFormdataRequestBody defines body for ProductGroupsCreate for application/x-www-form-urlencoded ContentType.
type ProductGroupsCreateFormdataRequestBody = ProductGroup

// ProductGroupsCreateMultipartRequestBody defines body for ProductGroupsCreate for multipart/form-data ContentType.
type ProductGroupsCreateMultipartRequestBody = ProductGroup

// ProductGroupsUpdateJSONRequestBody defines body for ProductGroupsUpdate for application/json ContentType.
type ProductGroupsUpdateJSONRequestBody = ProductGroup

// ProductGroupsUpdateFormdataRequestBody defines body for ProductGroupsUpdate for application/x-www-form-urlencoded ContentType.
type ProductGroupsUpdateFormdataRequestBody = ProductGroup

// ProductGroupsUpdateMultipartRequestBody defines body for ProductGroupsUpdate for multipart/form-data ContentType.
type ProductGroupsUpdateMultipartRequestBody = ProductGroup

// ProductMembersCreateJSONRequestBody defines body for ProductMembersCreate for application/json ContentType.
type ProductMembersCreateJSONRequestBody = ProductMember

// ProductMembersCreateFormdataRequestBody defines body for ProductMembersCreate for application/x-www-form-urlencoded ContentType.
type ProductMembersCreateFormdataRequestBody = ProductMember

// ProductMembersCreateMultipartRequestBody defines body for ProductMembersCreate for multipart/form-data ContentType.
type ProductMembersCreateMultipartRequestBody = ProductMember

// ProductMembersUpdateJSONRequestBody defines body for ProductMembersUpdate for application/json ContentType.
type ProductMembersUpdateJSONRequestBody = ProductMember

// ProductMembersUpdateFormdataRequestBody defines body for ProductMembersUpdate for application/x-www-form-urlencoded ContentType.
type ProductMembersUpdateFormdataRequestBody = ProductMember

// ProductMembersUpdateMultipartRequestBody defines body for ProductMembersUpdate for multipart/form-data ContentType.
type ProductMembersUpdateMultipartRequestBody = ProductMember

// ProductTypeGroupsCreateJSONRequestBody defines body for ProductTypeGroupsCreate for application/json ContentType.
type ProductTypeGroupsCreateJSONRequestBody = ProductTypeGroup

// ProductTypeGroupsCreateFormdataRequestBody defines body for ProductTypeGroupsCreate for application/x-www-form-urlencoded ContentType.
type ProductTypeGroupsCreateFormdataRequestBody = ProductTypeGroup

// ProductTypeGroupsCreateMultipartRequestBody defines body for ProductTypeGroupsCreate for multipart/form-data ContentType.
type ProductTypeGroupsCreateMultipartRequestBody = ProductTypeGroup

// ProductTypeGroupsUpdateJSONRequestBody defines body for ProductTypeGroupsUpdate for application/json ContentType.
type ProductTypeGroupsUpdateJSONRequestBody = ProductTypeGroup

// ProductTypeGroupsUpdateFormdataRequestBody defines body for ProductTypeGroupsUpdate for application/x-www-form-urlencoded ContentType.
type ProductTypeGroupsUpdateFormdataRequestBody = ProductTypeGroup

// ProductTypeGroupsUpdateMultipartRequestBody defines body for ProductTypeGroupsUpdate for multipart/form-data ContentType.
type ProductTypeGroupsUpdateMultipartRequestBody = ProductTypeGroup

// ProductTypeMembersCreateJSONRequestBody defines body for ProductTypeMembersCreate for application/json ContentType.
type ProductTypeMembersCreateJSONRequestBody = ProductTypeMember

// ProductTypeMembersCreateFormdataRequestBody defines body for ProductTypeMembersCreate for application/x-www-form-urlencoded ContentType.
type ProductTypeMembersCreateFormdataRequestBody = ProductTypeMember

// ProductTypeMembersCreateMultipartRequestBody defines body for ProductTypeMembersCreate for multipart/form-data ContentType.
type ProductTypeMembersCreateMultipartRequestBody = ProductTypeMember

// ProductTypeMembersUpdateJSONRequestBody defines body for ProductTypeMembersUpdate for application/json ContentType.
type ProductTypeMembersUpdateJSONRequestBody = ProductTypeMember

// ProductTypeMembersUpdateFormdataRequestBody defines body for ProductTypeMembersUpdate for application/x-www-form-urlencoded ContentType.
type ProductTypeMembersUpdateFormdataRequestBody = ProductTypeMember

// ProductTypeMembersUpdateMultipartRequestBody defines body for ProductTypeMembersUpdate for multipart/form-data ContentType.
type ProductTypeMembersUpdateMultipartRequestBody = ProductTypeMember

// ProductTypesCreateJSONRequestBody defines body for ProductTypesCreate for application/json ContentType.
type ProductTypesCreateJSONRequestBody = ProductType

// ProductTypesCreateFormdataRequestBody defines body for ProductTypesCreate for application/x-www-form-urlencoded ContentType.
type ProductTypesCreateFormdataRequestBody = ProductType

// ProductTypesCreateMultipartRequestBody defines body for ProductTypesCreate for multipart/form-data ContentType.
type ProductTypesCreateMultipartRequestBody = ProductType

// ProductTypesPartialUpdateJSONRequestBody defines body for ProductTypesPartialUpdate for application/json ContentType.
type ProductTypesPartialUpdateJSONRequestBody = PatchedProductType

// ProductTypesPartialUpdateFormdataRequestBody defines body for ProductTypesPartialUpdate for application/x-www-form-urlencoded ContentType.
type ProductTypesPartialUpdateFormdataRequestBody = PatchedProductType

// ProductTypesPartialUpdateMultipartRequestBody defines body for ProductTypesPartialUpdate for multipart/form-data ContentType.
type ProductTypesPartialUpdateMultipartRequestBody = PatchedProductType

// ProductTypesUpdateJSONRequestBody defines body for ProductTypesUpdate for application/json ContentType.
type ProductTypesUpdateJSONRequestBody = ProductType

// ProductTypesUpdateFormdataRequestBody defines body for ProductTypesUpdate for application/x-www-form-urlencoded ContentType.
type ProductTypesUpdateFormdataRequestBody = ProductType

// ProductTypesUpdateMultipartRequestBody defines body for ProductTypesUpdate for multipart/form-data ContentType.
type ProductTypesUpdateMultipartRequestBody = ProductType

// ProductTypesGenerateReportCreateJSONRequestBody defines body for ProductTypesGenerateReportCreate for application/json ContentType.
type ProductTypesGenerateReportCreateJSONRequestBody = ReportGenerateOption

// ProductTypesGenerateReportCreateFormdataRequestBody defines body for ProductTypesGenerateReportCreate for application/x-www-form-urlencoded ContentType.
type ProductTypesGenerateReportCreateFormdataRequestBody = ReportGenerateOption

// ProductTypesGenerateReportCreateMultipartRequestBody defines body for ProductTypesGenerateReportCreate for multipart/form-data ContentType.
type ProductTypesGenerateReportCreateMultipartRequestBody = ReportGenerateOption

// ProductsCreateJSONRequestBody defines body for ProductsCreate for application/json ContentType.
type ProductsCreateJSONRequestBody = Product

// ProductsCreateFormdataRequestBody defines body for ProductsCreate for application/x-www-form-urlencoded ContentType.
type ProductsCreateFormdataRequestBody = Product

// ProductsCreateMultipartRequestBody defines body for ProductsCreate for multipart/form-data ContentType.
type ProductsCreateMultipartRequestBody = Product

// ProductsPartialUpdateJSONRequestBody defines body for ProductsPartialUpdate for application/json ContentType.
type ProductsPartialUpdateJSONRequestBody = PatchedProduct

// ProductsPartialUpdateFormdataRequestBody defines body for ProductsPartialUpdate for application/x-www-form-urlencoded ContentType.
type ProductsPartialUpdateFormdataRequestBody = PatchedProduct

// ProductsPartialUpdateMultipartRequestBody defines body for ProductsPartialUpdate for multipart/form-data ContentType.
type ProductsPartialUpdateMultipartRequestBody = PatchedProduct

// ProductsUpdateJSONRequestBody defines body for ProductsUpdate for application/json ContentType.
type ProductsUpdateJSONRequestBody = Product

// ProductsUpdateFormdataRequestBody defines body for ProductsUpdate for application/x-www-form-urlencoded ContentType.
type ProductsUpdateFormdataRequestBody = Product

// ProductsUpdateMultipartRequestBody defines body for ProductsUpdate for multipart/form-data ContentType.
type ProductsUpdateMultipartRequestBody = Product

// ProductsGenerateReportCreateJSONRequestBody defines body for ProductsGenerateReportCreate for application/json ContentType.
type ProductsGenerateReportCreateJSONRequestBody = ReportGenerateOption

// ProductsGenerateReportCreateFormdataRequestBody defines body for ProductsGenerateReportCreate for application/x-www-form-urlencoded ContentType.
type ProductsGenerateReportCreateFormdataRequestBody = ReportGenerateOption

// ProductsGenerateReportCreateMultipartRequestBody defines body for ProductsGenerateReportCreate for multipart/form-data ContentType.
type ProductsGenerateReportCreateMultipartRequestBody = ReportGenerateOption

// RegulationsCreateJSONRequestBody defines body for RegulationsCreate for application/json ContentType.
type RegulationsCreateJSONRequestBody = Regulation

// RegulationsCreateFormdataRequestBody defines body for RegulationsCreate for application/x-www-form-urlencoded ContentType.
type RegulationsCreateFormdataRequestBody = Regulation

// RegulationsCreateMultipartRequestBody defines body for RegulationsCreate for multipart/form-data ContentType.
type RegulationsCreateMultipartRequestBody = Regulation

// RegulationsPartialUpdateJSONRequestBody defines body for RegulationsPartialUpdate for application/json ContentType.
type RegulationsPartialUpdateJSONRequestBody = PatchedRegulation

// RegulationsPartialUpdateFormdataRequestBody defines body for RegulationsPartialUpdate for application/x-www-form-urlencoded ContentType.
type RegulationsPartialUpdateFormdataRequestBody = PatchedRegulation

// RegulationsPartialUpdateMultipartRequestBody defines body for RegulationsPartialUpdate for multipart/form-data ContentType.
type RegulationsPartialUpdateMultipartRequestBody = PatchedRegulation

// RegulationsUpdateJSONRequestBody defines body for RegulationsUpdate for application/json ContentType.
type RegulationsUpdateJSONRequestBody = Regulation

// RegulationsUpdateFormdataRequestBody defines body for RegulationsUpdate for application/x-www-form-urlencoded ContentType.
type RegulationsUpdateFormdataRequestBody = Regulation

// RegulationsUpdateMultipartRequestBody defines body for RegulationsUpdate for multipart/form-data ContentType.
type RegulationsUpdateMultipartRequestBody = Regulation

// ReimportScanCreateMultipartRequestBody defines body for ReimportScanCreate for multipart/form-data ContentType.
type ReimportScanCreateMultipartRequestBody = ReImportScan

// SonarqubeIssuesCreateJSONRequestBody defines body for SonarqubeIssuesCreate for application/json ContentType.
type SonarqubeIssuesCreateJSONRequestBody = SonarqubeIssue

// SonarqubeIssuesCreateFormdataRequestBody defines body for SonarqubeIssuesCreate for application/x-www-form-urlencoded ContentType.
type SonarqubeIssuesCreateFormdataRequestBody = SonarqubeIssue

// SonarqubeIssuesCreateMultipartRequestBody defines body for SonarqubeIssuesCreate for multipart/form-data ContentType.
type SonarqubeIssuesCreateMultipartRequestBody = SonarqubeIssue

// SonarqubeIssuesPartialUpdateJSONRequestBody defines body for SonarqubeIssuesPartialUpdate for application/json ContentType.
type SonarqubeIssuesPartialUpdateJSONRequestBody = PatchedSonarqubeIssue

// SonarqubeIssuesPartialUpdateFormdataRequestBody defines body for SonarqubeIssuesPartialUpdate for application/x-www-form-urlencoded ContentType.
type SonarqubeIssuesPartialUpdateFormdataRequestBody = PatchedSonarqubeIssue

// SonarqubeIssuesPartialUpdateMultipartRequestBody defines body for SonarqubeIssuesPartialUpdate for multipart/form-data ContentType.
type SonarqubeIssuesPartialUpdateMultipartRequestBody = PatchedSonarqubeIssue

// SonarqubeIssuesUpdateJSONRequestBody defines body for SonarqubeIssuesUpdate for application/json ContentType.
type SonarqubeIssuesUpdateJSONRequestBody = SonarqubeIssue

// SonarqubeIssuesUpdateFormdataRequestBody defines body for SonarqubeIssuesUpdate for application/x-www-form-urlencoded ContentType.
type SonarqubeIssuesUpdateFormdataRequestBody = SonarqubeIssue

// SonarqubeIssuesUpdateMultipartRequestBody defines body for SonarqubeIssuesUpdate for multipart/form-data ContentType.
type SonarqubeIssuesUpdateMultipartRequestBody = SonarqubeIssue

// SonarqubeTransitionsCreateJSONRequestBody defines body for SonarqubeTransitionsCreate for application/json ContentType.
type SonarqubeTransitionsCreateJSONRequestBody = SonarqubeIssueTransition

// SonarqubeTransitionsCreateFormdataRequestBody defines body for SonarqubeTransitionsCreate for application/x-www-form-urlencoded ContentType.
type SonarqubeTransitionsCreateFormdataRequestBody = SonarqubeIssueTransition

// SonarqubeTransitionsCreateMultipartRequestBody defines body for SonarqubeTransitionsCreate for multipart/form-data ContentType.
type SonarqubeTransitionsCreateMultipartRequestBody = SonarqubeIssueTransition

// SonarqubeTransitionsPartialUpdateJSONRequestBody defines body for SonarqubeTransitionsPartialUpdate for application/json ContentType.
type SonarqubeTransitionsPartialUpdateJSONRequestBody = PatchedSonarqubeIssueTransition

// SonarqubeTransitionsPartialUpdateFormdataRequestBody defines body for SonarqubeTransitionsPartialUpdate for application/x-www-form-urlencoded ContentType.
type SonarqubeTransitionsPartialUpdateFormdataRequestBody = PatchedSonarqubeIssueTransition

// SonarqubeTransitionsPartialUpdateMultipartRequestBody defines body for SonarqubeTransitionsPartialUpdate for multipart/form-data ContentType.
type SonarqubeTransitionsPartialUpdateMultipartRequestBody = PatchedSonarqubeIssueTransition

// SonarqubeTransitionsUpdateJSONRequestBody defines body for SonarqubeTransitionsUpdate for application/json ContentType.
type SonarqubeTransitionsUpdateJSONRequestBody = SonarqubeIssueTransition

// SonarqubeTransitionsUpdateFormdataRequestBody defines body for SonarqubeTransitionsUpdate for application/x-www-form-urlencoded ContentType.
type SonarqubeTransitionsUpdateFormdataRequestBody = SonarqubeIssueTransition

// SonarqubeTransitionsUpdateMultipartRequestBody defines body for SonarqubeTransitionsUpdate for multipart/form-data ContentType.
type SonarqubeTransitionsUpdateMultipartRequestBody = SonarqubeIssueTransition

// StubFindingsCreateJSONRequestBody defines body for StubFindingsCreate for application/json ContentType.
type StubFindingsCreateJSONRequestBody = StubFindingCreate

// StubFindingsCreateFormdataRequestBody defines body for StubFindingsCreate for application/x-www-form-urlencoded ContentType.
type StubFindingsCreateFormdataRequestBody = StubFindingCreate

// StubFindingsCreateMultipartRequestBody defines body for StubFindingsCreate for multipart/form-data ContentType.
type StubFindingsCreateMultipartRequestBody = StubFindingCreate

// StubFindingsPartialUpdateJSONRequestBody defines body for StubFindingsPartialUpdate for application/json ContentType.
type StubFindingsPartialUpdateJSONRequestBody = PatchedStubFinding

// StubFindingsPartialUpdateFormdataRequestBody defines body for StubFindingsPartialUpdate for application/x-www-form-urlencoded ContentType.
type StubFindingsPartialUpdateFormdataRequestBody = PatchedStubFinding

// StubFindingsPartialUpdateMultipartRequestBody defines body for StubFindingsPartialUpdate for multipart/form-data ContentType.
type StubFindingsPartialUpdateMultipartRequestBody = PatchedStubFinding

// StubFindingsUpdateJSONRequestBody defines body for StubFindingsUpdate for application/json ContentType.
type StubFindingsUpdateJSONRequestBody = StubFinding

// StubFindingsUpdateFormdataRequestBody defines body for StubFindingsUpdate for application/x-www-form-urlencoded ContentType.
type StubFindingsUpdateFormdataRequestBody = StubFinding

// StubFindingsUpdateMultipartRequestBody defines body for StubFindingsUpdate for multipart/form-data ContentType.
type StubFindingsUpdateMultipartRequestBody = StubFinding

// SystemSettingsPartialUpdateJSONRequestBody defines body for SystemSettingsPartialUpdate for application/json ContentType.
type SystemSettingsPartialUpdateJSONRequestBody = PatchedSystemSettings

// SystemSettingsPartialUpdateFormdataRequestBody defines body for SystemSettingsPartialUpdate for application/x-www-form-urlencoded ContentType.
type SystemSettingsPartialUpdateFormdataRequestBody = PatchedSystemSettings

// SystemSettingsPartialUpdateMultipartRequestBody defines body for SystemSettingsPartialUpdate for multipart/form-data ContentType.
type SystemSettingsPartialUpdateMultipartRequestBody = PatchedSystemSettings

// SystemSettingsUpdateJSONRequestBody defines body for SystemSettingsUpdate for application/json ContentType.
type SystemSettingsUpdateJSONRequestBody = SystemSettings

// SystemSettingsUpdateFormdataRequestBody defines body for SystemSettingsUpdate for application/x-www-form-urlencoded ContentType.
type SystemSettingsUpdateFormdataRequestBody = SystemSettings

// SystemSettingsUpdateMultipartRequestBody defines body for SystemSettingsUpdate for multipart/form-data ContentType.
type SystemSettingsUpdateMultipartRequestBody = SystemSettings

// TechnologiesCreateJSONRequestBody defines body for TechnologiesCreate for application/json ContentType.
type TechnologiesCreateJSONRequestBody = AppAnalysis

// TechnologiesCreateFormdataRequestBody defines body for TechnologiesCreate for application/x-www-form-urlencoded ContentType.
type TechnologiesCreateFormdataRequestBody = AppAnalysis

// TechnologiesCreateMultipartRequestBody defines body for TechnologiesCreate for multipart/form-data ContentType.
type TechnologiesCreateMultipartRequestBody = AppAnalysis

// TechnologiesPartialUpdateJSONRequestBody defines body for TechnologiesPartialUpdate for application/json ContentType.
type TechnologiesPartialUpdateJSONRequestBody = PatchedAppAnalysis

// TechnologiesPartialUpdateFormdataRequestBody defines body for TechnologiesPartialUpdate for application/x-www-form-urlencoded ContentType.
type TechnologiesPartialUpdateFormdataRequestBody = PatchedAppAnalysis

// TechnologiesPartialUpdateMultipartRequestBody defines body for TechnologiesPartialUpdate for multipart/form-data ContentType.
type TechnologiesPartialUpdateMultipartRequestBody = PatchedAppAnalysis

// TechnologiesUpdateJSONRequestBody defines body for TechnologiesUpdate for application/json ContentType.
type TechnologiesUpdateJSONRequestBody = AppAnalysis

// TechnologiesUpdateFormdataRequestBody defines body for TechnologiesUpdate for application/x-www-form-urlencoded ContentType.
type TechnologiesUpdateFormdataRequestBody = AppAnalysis

// TechnologiesUpdateMultipartRequestBody defines body for TechnologiesUpdate for multipart/form-data ContentType.
type TechnologiesUpdateMultipartRequestBody = AppAnalysis

// TestImportsCreateJSONRequestBody defines body for TestImportsCreate for application/json ContentType.
type TestImportsCreateJSONRequestBody = TestImport

// TestImportsCreateFormdataRequestBody defines body for TestImportsCreate for application/x-www-form-urlencoded ContentType.
type TestImportsCreateFormdataRequestBody = TestImport

// TestImportsCreateMultipartRequestBody defines body for TestImportsCreate for multipart/form-data ContentType.
type TestImportsCreateMultipartRequestBody = TestImport

// TestImportsPartialUpdateJSONRequestBody defines body for TestImportsPartialUpdate for application/json ContentType.
type TestImportsPartialUpdateJSONRequestBody = PatchedTestImport

// TestImportsPartialUpdateFormdataRequestBody defines body for TestImportsPartialUpdate for application/x-www-form-urlencoded ContentType.
type TestImportsPartialUpdateFormdataRequestBody = PatchedTestImport

// TestImportsPartialUpdateMultipartRequestBody defines body for TestImportsPartialUpdate for multipart/form-data ContentType.
type TestImportsPartialUpdateMultipartRequestBody = PatchedTestImport

// TestImportsUpdateJSONRequestBody defines body for TestImportsUpdate for application/json ContentType.
type TestImportsUpdateJSONRequestBody = TestImport

// TestImportsUpdateFormdataRequestBody defines body for TestImportsUpdate for application/x-www-form-urlencoded ContentType.
type TestImportsUpdateFormdataRequestBody = TestImport

// TestImportsUpdateMultipartRequestBody defines body for TestImportsUpdate for multipart/form-data ContentType.
type TestImportsUpdateMultipartRequestBody = TestImport

// TestTypesCreateJSONRequestBody defines body for TestTypesCreate for application/json ContentType.
type TestTypesCreateJSONRequestBody = TestType

// TestTypesCreateFormdataRequestBody defines body for TestTypesCreate for application/x-www-form-urlencoded ContentType.
type TestTypesCreateFormdataRequestBody = TestType

// TestTypesCreateMultipartRequestBody defines body for TestTypesCreate for multipart/form-data ContentType.
type TestTypesCreateMultipartRequestBody = TestType

// TestTypesPartialUpdateJSONRequestBody defines body for TestTypesPartialUpdate for application/json ContentType.
type TestTypesPartialUpdateJSONRequestBody = PatchedTestType

// TestTypesPartialUpdateFormdataRequestBody defines body for TestTypesPartialUpdate for application/x-www-form-urlencoded ContentType.
type TestTypesPartialUpdateFormdataRequestBody = PatchedTestType

// TestTypesPartialUpdateMultipartRequestBody defines body for TestTypesPartialUpdate for multipart/form-data ContentType.
type TestTypesPartialUpdateMultipartRequestBody = PatchedTestType

// TestTypesUpdateJSONRequestBody defines body for TestTypesUpdate for application/json ContentType.
type TestTypesUpdateJSONRequestBody = TestType

// TestTypesUpdateFormdataRequestBody defines body for TestTypesUpdate for application/x-www-form-urlencoded ContentType.
type TestTypesUpdateFormdataRequestBody = TestType

// TestTypesUpdateMultipartRequestBody defines body for TestTypesUpdate for multipart/form-data ContentType.
type TestTypesUpdateMultipartRequestBody = TestType

// TestsCreateJSONRequestBody defines body for TestsCreate for application/json ContentType.
type TestsCreateJSONRequestBody = TestCreate

// TestsCreateFormdataRequestBody defines body for TestsCreate for application/x-www-form-urlencoded ContentType.
type TestsCreateFormdataRequestBody = TestCreate

// TestsCreateMultipartRequestBody defines body for TestsCreate for multipart/form-data ContentType.
type TestsCreateMultipartRequestBody = TestCreate

// TestsPartialUpdateJSONRequestBody defines body for TestsPartialUpdate for application/json ContentType.
type TestsPartialUpdateJSONRequestBody = PatchedTest

// TestsPartialUpdateFormdataRequestBody defines body for TestsPartialUpdate for application/x-www-form-urlencoded ContentType.
type TestsPartialUpdateFormdataRequestBody = PatchedTest

// TestsPartialUpdateMultipartRequestBody defines body for TestsPartialUpdate for multipart/form-data ContentType.
type TestsPartialUpdateMultipartRequestBody = PatchedTest

// TestsUpdateJSONRequestBody defines body for TestsUpdate for application/json ContentType.
type TestsUpdateJSONRequestBody = Test

// TestsUpdateFormdataRequestBody defines body for TestsUpdate for application/x-www-form-urlencoded ContentType.
type TestsUpdateFormdataRequestBody = Test

// TestsUpdateMultipartRequestBody defines body for TestsUpdate for multipart/form-data ContentType.
type TestsUpdateMultipartRequestBody = Test

// TestsAcceptRisksCreateJSONRequestBody defines body for TestsAcceptRisksCreate for application/json ContentType.
type TestsAcceptRisksCreateJSONRequestBody = TestsAcceptRisksCreateJSONBody

// TestsAcceptRisksCreateFormdataRequestBody defines body for TestsAcceptRisksCreate for application/x-www-form-urlencoded ContentType.
type TestsAcceptRisksCreateFormdataRequestBody = TestsAcceptRisksCreateFormdataBody

// TestsAcceptRisksCreateMultipartRequestBody defines body for TestsAcceptRisksCreate for multipart/form-data ContentType.
type TestsAcceptRisksCreateMultipartRequestBody = TestsAcceptRisksCreateMultipartBody

// TestsFilesCreateMultipartRequestBody defines body for TestsFilesCreate for multipart/form-data ContentType.
type TestsFilesCreateMultipartRequestBody = AddNewFileOption

// TestsGenerateReportCreateJSONRequestBody defines body for TestsGenerateReportCreate for application/json ContentType.
type TestsGenerateReportCreateJSONRequestBody = ReportGenerateOption

// TestsGenerateReportCreateFormdataRequestBody defines body for TestsGenerateReportCreate for application/x-www-form-urlencoded ContentType.
type TestsGenerateReportCreateFormdataRequestBody = ReportGenerateOption

// TestsGenerateReportCreateMultipartRequestBody defines body for TestsGenerateReportCreate for multipart/form-data ContentType.
type TestsGenerateReportCreateMultipartRequestBody = ReportGenerateOption

// TestsNotesCreateJSONRequestBody defines body for TestsNotesCreate for application/json ContentType.
type TestsNotesCreateJSONRequestBody = AddNewNoteOption

// TestsNotesCreateFormdataRequestBody defines body for TestsNotesCreate for application/x-www-form-urlencoded ContentType.
type TestsNotesCreateFormdataRequestBody = AddNewNoteOption

// TestsNotesCreateMultipartRequestBody defines body for TestsNotesCreate for multipart/form-data ContentType.
type TestsNotesCreateMultipartRequestBody = AddNewNoteOption

// ToolConfigurationsCreateJSONRequestBody defines body for ToolConfigurationsCreate for application/json ContentType.
type ToolConfigurationsCreateJSONRequestBody = ToolConfiguration

// ToolConfigurationsCreateFormdataRequestBody defines body for ToolConfigurationsCreate for application/x-www-form-urlencoded ContentType.
type ToolConfigurationsCreateFormdataRequestBody = ToolConfiguration

// ToolConfigurationsCreateMultipartRequestBody defines body for ToolConfigurationsCreate for multipart/form-data ContentType.
type ToolConfigurationsCreateMultipartRequestBody = ToolConfiguration

// ToolConfigurationsPartialUpdateJSONRequestBody defines body for ToolConfigurationsPartialUpdate for application/json ContentType.
type ToolConfigurationsPartialUpdateJSONRequestBody = PatchedToolConfiguration

// ToolConfigurationsPartialUpdateFormdataRequestBody defines body for ToolConfigurationsPartialUpdate for application/x-www-form-urlencoded ContentType.
type ToolConfigurationsPartialUpdateFormdataRequestBody = PatchedToolConfiguration

// ToolConfigurationsPartialUpdateMultipartRequestBody defines body for ToolConfigurationsPartialUpdate for multipart/form-data ContentType.
type ToolConfigurationsPartialUpdateMultipartRequestBody = PatchedToolConfiguration

// ToolConfigurationsUpdateJSONRequestBody defines body for ToolConfigurationsUpdate for application/json ContentType.
type ToolConfigurationsUpdateJSONRequestBody = ToolConfiguration

// ToolConfigurationsUpdateFormdataRequestBody defines body for ToolConfigurationsUpdate for application/x-www-form-urlencoded ContentType.
type ToolConfigurationsUpdateFormdataRequestBody = ToolConfiguration

// ToolConfigurationsUpdateMultipartRequestBody defines body for ToolConfigurationsUpdate for multipart/form-data ContentType.
type ToolConfigurationsUpdateMultipartRequestBody = ToolConfiguration

// ToolProductSettingsCreateJSONRequestBody defines body for ToolProductSettingsCreate for application/json ContentType.
type ToolProductSettingsCreateJSONRequestBody = ToolProductSettings

// ToolProductSettingsCreateFormdataRequestBody defines body for ToolProductSettingsCreate for application/x-www-form-urlencoded ContentType.
type ToolProductSettingsCreateFormdataRequestBody = ToolProductSettings

// ToolProductSettingsCreateMultipartRequestBody defines body for ToolProductSettingsCreate for multipart/form-data ContentType.
type ToolProductSettingsCreateMultipartRequestBody = ToolProductSettings

// ToolProductSettingsPartialUpdateJSONRequestBody defines body for ToolProductSettingsPartialUpdate for application/json ContentType.
type ToolProductSettingsPartialUpdateJSONRequestBody = PatchedToolProductSettings

// ToolProductSettingsPartialUpdateFormdataRequestBody defines body for ToolProductSettingsPartialUpdate for application/x-www-form-urlencoded ContentType.
type ToolProductSettingsPartialUpdateFormdataRequestBody = PatchedToolProductSettings

// ToolProductSettingsPartialUpdateMultipartRequestBody defines body for ToolProductSettingsPartialUpdate for multipart/form-data ContentType.
type ToolProductSettingsPartialUpdateMultipartRequestBody = PatchedToolProductSettings

// ToolProductSettingsUpdateJSONRequestBody defines body for ToolProductSettingsUpdate for application/json ContentType.
type ToolProductSettingsUpdateJSONRequestBody = ToolProductSettings

// ToolProductSettingsUpdateFormdataRequestBody defines body for ToolProductSettingsUpdate for application/x-www-form-urlencoded ContentType.
type ToolProductSettingsUpdateFormdataRequestBody = ToolProductSettings

// ToolProductSettingsUpdateMultipartRequestBody defines body for ToolProductSettingsUpdate for multipart/form-data ContentType.
type ToolProductSettingsUpdateMultipartRequestBody = ToolProductSettings

// ToolTypesCreateJSONRequestBody defines body for ToolTypesCreate for application/json ContentType.
type ToolTypesCreateJSONRequestBody = ToolType

// ToolTypesCreateFormdataRequestBody defines body for ToolTypesCreate for application/x-www-form-urlencoded ContentType.
type ToolTypesCreateFormdataRequestBody = ToolType

// ToolTypesCreateMultipartRequestBody defines body for ToolTypesCreate for multipart/form-data ContentType.
type ToolTypesCreateMultipartRequestBody = ToolType

// ToolTypesPartialUpdateJSONRequestBody defines body for ToolTypesPartialUpdate for application/json ContentType.
type ToolTypesPartialUpdateJSONRequestBody = PatchedToolType

// ToolTypesPartialUpdateFormdataRequestBody defines body for ToolTypesPartialUpdate for application/x-www-form-urlencoded ContentType.
type ToolTypesPartialUpdateFormdataRequestBody = PatchedToolType

// ToolTypesPartialUpdateMultipartRequestBody defines body for ToolTypesPartialUpdate for multipart/form-data ContentType.
type ToolTypesPartialUpdateMultipartRequestBody = PatchedToolType

// ToolTypesUpdateJSONRequestBody defines body for ToolTypesUpdate for application/json ContentType.
type ToolTypesUpdateJSONRequestBody = ToolType

// ToolTypesUpdateFormdataRequestBody defines body for ToolTypesUpdate for application/x-www-form-urlencoded ContentType.
type ToolTypesUpdateFormdataRequestBody = ToolType

// ToolTypesUpdateMultipartRequestBody defines body for ToolTypesUpdate for multipart/form-data ContentType.
type ToolTypesUpdateMultipartRequestBody = ToolType

// UserContactInfosCreateJSONRequestBody defines body for UserContactInfosCreate for application/json ContentType.
type UserContactInfosCreateJSONRequestBody = UserContactInfo

// UserContactInfosCreateFormdataRequestBody defines body for UserContactInfosCreate for application/x-www-form-urlencoded ContentType.
type UserContactInfosCreateFormdataRequestBody = UserContactInfo

// UserContactInfosCreateMultipartRequestBody defines body for UserContactInfosCreate for multipart/form-data ContentType.
type UserContactInfosCreateMultipartRequestBody = UserContactInfo

// UserContactInfosPartialUpdateJSONRequestBody defines body for UserContactInfosPartialUpdate for application/json ContentType.
type UserContactInfosPartialUpdateJSONRequestBody = PatchedUserContactInfo

// UserContactInfosPartialUpdateFormdataRequestBody defines body for UserContactInfosPartialUpdate for application/x-www-form-urlencoded ContentType.
type UserContactInfosPartialUpdateFormdataRequestBody = PatchedUserContactInfo

// UserContactInfosPartialUpdateMultipartRequestBody defines body for UserContactInfosPartialUpdate for multipart/form-data ContentType.
type UserContactInfosPartialUpdateMultipartRequestBody = PatchedUserContactInfo

// UserContactInfosUpdateJSONRequestBody defines body for UserContactInfosUpdate for application/json ContentType.
type UserContactInfosUpdateJSONRequestBody = UserContactInfo

// UserContactInfosUpdateFormdataRequestBody defines body for UserContactInfosUpdate for application/x-www-form-urlencoded ContentType.
type UserContactInfosUpdateFormdataRequestBody = UserContactInfo

// UserContactInfosUpdateMultipartRequestBody defines body for UserContactInfosUpdate for multipart/form-data ContentType.
type UserContactInfosUpdateMultipartRequestBody = UserContactInfo

// UsersCreateJSONRequestBody defines body for UsersCreate for application/json ContentType.
type UsersCreateJSONRequestBody = User

// UsersCreateFormdataRequestBody defines body for UsersCreate for application/x-www-form-urlencoded ContentType.
type UsersCreateFormdataRequestBody = User

// UsersCreateMultipartRequestBody defines body for UsersCreate for multipart/form-data ContentType.
type UsersCreateMultipartRequestBody = User

// UsersPartialUpdateJSONRequestBody defines body for UsersPartialUpdate for application/json ContentType.
type UsersPartialUpdateJSONRequestBody = PatchedUser

// UsersPartialUpdateFormdataRequestBody defines body for UsersPartialUpdate for application/x-www-form-urlencoded ContentType.
type UsersPartialUpdateFormdataRequestBody = PatchedUser

// UsersPartialUpdateMultipartRequestBody defines body for UsersPartialUpdate for multipart/form-data ContentType.
type UsersPartialUpdateMultipartRequestBody = PatchedUser

// UsersUpdateJSONRequestBody defines body for UsersUpdate for application/json ContentType.
type UsersUpdateJSONRequestBody = User

// UsersUpdateFormdataRequestBody defines body for UsersUpdate for application/x-www-form-urlencoded ContentType.
type UsersUpdateFormdataRequestBody = User

// UsersUpdateMultipartRequestBody defines body for UsersUpdate for multipart/form-data ContentType.
type UsersUpdateMultipartRequestBody = User

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ApiTokenAuthCreate request with any body
	ApiTokenAuthCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApiTokenAuthCreate(ctx context.Context, body ApiTokenAuthCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApiTokenAuthCreateWithFormdataBody(ctx context.Context, body ApiTokenAuthCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevelopmentEnvironmentsList request
	DevelopmentEnvironmentsList(ctx context.Context, params *DevelopmentEnvironmentsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevelopmentEnvironmentsCreate request with any body
	DevelopmentEnvironmentsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DevelopmentEnvironmentsCreate(ctx context.Context, body DevelopmentEnvironmentsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DevelopmentEnvironmentsCreateWithFormdataBody(ctx context.Context, body DevelopmentEnvironmentsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevelopmentEnvironmentsDestroy request
	DevelopmentEnvironmentsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevelopmentEnvironmentsRetrieve request
	DevelopmentEnvironmentsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevelopmentEnvironmentsPartialUpdate request with any body
	DevelopmentEnvironmentsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DevelopmentEnvironmentsPartialUpdate(ctx context.Context, id int, body DevelopmentEnvironmentsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DevelopmentEnvironmentsPartialUpdateWithFormdataBody(ctx context.Context, id int, body DevelopmentEnvironmentsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevelopmentEnvironmentsUpdate request with any body
	DevelopmentEnvironmentsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DevelopmentEnvironmentsUpdate(ctx context.Context, id int, body DevelopmentEnvironmentsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DevelopmentEnvironmentsUpdateWithFormdataBody(ctx context.Context, id int, body DevelopmentEnvironmentsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DojoGroupMembersList request
	DojoGroupMembersList(ctx context.Context, params *DojoGroupMembersListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DojoGroupMembersCreate request with any body
	DojoGroupMembersCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DojoGroupMembersCreate(ctx context.Context, body DojoGroupMembersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DojoGroupMembersCreateWithFormdataBody(ctx context.Context, body DojoGroupMembersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DojoGroupMembersDestroy request
	DojoGroupMembersDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DojoGroupMembersRetrieve request
	DojoGroupMembersRetrieve(ctx context.Context, id int, params *DojoGroupMembersRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DojoGroupMembersPartialUpdate request with any body
	DojoGroupMembersPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DojoGroupMembersPartialUpdate(ctx context.Context, id int, body DojoGroupMembersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DojoGroupMembersPartialUpdateWithFormdataBody(ctx context.Context, id int, body DojoGroupMembersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DojoGroupMembersUpdate request with any body
	DojoGroupMembersUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DojoGroupMembersUpdate(ctx context.Context, id int, body DojoGroupMembersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DojoGroupMembersUpdateWithFormdataBody(ctx context.Context, id int, body DojoGroupMembersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DojoGroupsList request
	DojoGroupsList(ctx context.Context, params *DojoGroupsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DojoGroupsCreate request with any body
	DojoGroupsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DojoGroupsCreate(ctx context.Context, body DojoGroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DojoGroupsCreateWithFormdataBody(ctx context.Context, body DojoGroupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DojoGroupsDestroy request
	DojoGroupsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DojoGroupsRetrieve request
	DojoGroupsRetrieve(ctx context.Context, id int, params *DojoGroupsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DojoGroupsPartialUpdate request with any body
	DojoGroupsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DojoGroupsPartialUpdate(ctx context.Context, id int, body DojoGroupsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DojoGroupsPartialUpdateWithFormdataBody(ctx context.Context, id int, body DojoGroupsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DojoGroupsUpdate request with any body
	DojoGroupsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DojoGroupsUpdate(ctx context.Context, id int, body DojoGroupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DojoGroupsUpdateWithFormdataBody(ctx context.Context, id int, body DojoGroupsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EndpointMetaImportCreate request with any body
	EndpointMetaImportCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EndpointStatusList request
	EndpointStatusList(ctx context.Context, params *EndpointStatusListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EndpointStatusCreate request with any body
	EndpointStatusCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EndpointStatusCreate(ctx context.Context, body EndpointStatusCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	EndpointStatusCreateWithFormdataBody(ctx context.Context, body EndpointStatusCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EndpointStatusDestroy request
	EndpointStatusDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EndpointStatusRetrieve request
	EndpointStatusRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EndpointStatusPartialUpdate request with any body
	EndpointStatusPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EndpointStatusPartialUpdate(ctx context.Context, id int, body EndpointStatusPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	EndpointStatusPartialUpdateWithFormdataBody(ctx context.Context, id int, body EndpointStatusPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EndpointStatusUpdate request with any body
	EndpointStatusUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EndpointStatusUpdate(ctx context.Context, id int, body EndpointStatusUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	EndpointStatusUpdateWithFormdataBody(ctx context.Context, id int, body EndpointStatusUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EndpointsList request
	EndpointsList(ctx context.Context, params *EndpointsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EndpointsCreate request with any body
	EndpointsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EndpointsCreate(ctx context.Context, body EndpointsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	EndpointsCreateWithFormdataBody(ctx context.Context, body EndpointsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EndpointsDestroy request
	EndpointsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EndpointsRetrieve request
	EndpointsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EndpointsPartialUpdate request with any body
	EndpointsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EndpointsPartialUpdate(ctx context.Context, id int, body EndpointsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	EndpointsPartialUpdateWithFormdataBody(ctx context.Context, id int, body EndpointsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EndpointsUpdate request with any body
	EndpointsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EndpointsUpdate(ctx context.Context, id int, body EndpointsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	EndpointsUpdateWithFormdataBody(ctx context.Context, id int, body EndpointsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EndpointsGenerateReportCreate request with any body
	EndpointsGenerateReportCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EndpointsGenerateReportCreate(ctx context.Context, id int, body EndpointsGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	EndpointsGenerateReportCreateWithFormdataBody(ctx context.Context, id int, body EndpointsGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EngagementPresetsList request
	EngagementPresetsList(ctx context.Context, params *EngagementPresetsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EngagementPresetsCreate request with any body
	EngagementPresetsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EngagementPresetsCreate(ctx context.Context, body EngagementPresetsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	EngagementPresetsCreateWithFormdataBody(ctx context.Context, body EngagementPresetsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EngagementPresetsDestroy request
	EngagementPresetsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EngagementPresetsRetrieve request
	EngagementPresetsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EngagementPresetsPartialUpdate request with any body
	EngagementPresetsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EngagementPresetsPartialUpdate(ctx context.Context, id int, body EngagementPresetsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	EngagementPresetsPartialUpdateWithFormdataBody(ctx context.Context, id int, body EngagementPresetsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EngagementPresetsUpdate request with any body
	EngagementPresetsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EngagementPresetsUpdate(ctx context.Context, id int, body EngagementPresetsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	EngagementPresetsUpdateWithFormdataBody(ctx context.Context, id int, body EngagementPresetsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EngagementsList request
	EngagementsList(ctx context.Context, params *EngagementsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EngagementsCreate request with any body
	EngagementsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EngagementsCreate(ctx context.Context, body EngagementsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	EngagementsCreateWithFormdataBody(ctx context.Context, body EngagementsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EngagementsDestroy request
	EngagementsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EngagementsRetrieve request
	EngagementsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EngagementsPartialUpdate request with any body
	EngagementsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EngagementsPartialUpdate(ctx context.Context, id int, body EngagementsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	EngagementsPartialUpdateWithFormdataBody(ctx context.Context, id int, body EngagementsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EngagementsUpdate request with any body
	EngagementsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EngagementsUpdate(ctx context.Context, id int, body EngagementsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	EngagementsUpdateWithFormdataBody(ctx context.Context, id int, body EngagementsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EngagementsAcceptRisksCreate request with any body
	EngagementsAcceptRisksCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EngagementsAcceptRisksCreate(ctx context.Context, id int, body EngagementsAcceptRisksCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	EngagementsAcceptRisksCreateWithFormdataBody(ctx context.Context, id int, body EngagementsAcceptRisksCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EngagementsCloseCreate request
	EngagementsCloseCreate(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EngagementsFilesRetrieve request
	EngagementsFilesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EngagementsFilesCreate request with any body
	EngagementsFilesCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EngagementsGenerateReportCreate request with any body
	EngagementsGenerateReportCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EngagementsGenerateReportCreate(ctx context.Context, id int, body EngagementsGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	EngagementsGenerateReportCreateWithFormdataBody(ctx context.Context, id int, body EngagementsGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EngagementsNotesRetrieve request
	EngagementsNotesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EngagementsNotesCreate request with any body
	EngagementsNotesCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EngagementsNotesCreate(ctx context.Context, id int, body EngagementsNotesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	EngagementsNotesCreateWithFormdataBody(ctx context.Context, id int, body EngagementsNotesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EngagementsReopenCreate request
	EngagementsReopenCreate(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingTemplatesList request
	FindingTemplatesList(ctx context.Context, params *FindingTemplatesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingTemplatesCreate request with any body
	FindingTemplatesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingTemplatesCreate(ctx context.Context, body FindingTemplatesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingTemplatesCreateWithFormdataBody(ctx context.Context, body FindingTemplatesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingTemplatesDestroy request
	FindingTemplatesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingTemplatesRetrieve request
	FindingTemplatesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingTemplatesPartialUpdate request with any body
	FindingTemplatesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingTemplatesPartialUpdate(ctx context.Context, id int, body FindingTemplatesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingTemplatesPartialUpdateWithFormdataBody(ctx context.Context, id int, body FindingTemplatesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingTemplatesUpdate request with any body
	FindingTemplatesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingTemplatesUpdate(ctx context.Context, id int, body FindingTemplatesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingTemplatesUpdateWithFormdataBody(ctx context.Context, id int, body FindingTemplatesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsList request
	FindingsList(ctx context.Context, params *FindingsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsCreate request with any body
	FindingsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsCreate(ctx context.Context, body FindingsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsCreateWithFormdataBody(ctx context.Context, body FindingsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsAcceptRisksCreate request with any body
	FindingsAcceptRisksCreateWithBody(ctx context.Context, params *FindingsAcceptRisksCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsAcceptRisksCreate(ctx context.Context, params *FindingsAcceptRisksCreateParams, body FindingsAcceptRisksCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsAcceptRisksCreateWithFormdataBody(ctx context.Context, params *FindingsAcceptRisksCreateParams, body FindingsAcceptRisksCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsGenerateReportCreate request with any body
	FindingsGenerateReportCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsGenerateReportCreate(ctx context.Context, body FindingsGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsGenerateReportCreateWithFormdataBody(ctx context.Context, body FindingsGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsDestroy request
	FindingsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsRetrieve request
	FindingsRetrieve(ctx context.Context, id int, params *FindingsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsPartialUpdate request with any body
	FindingsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsPartialUpdate(ctx context.Context, id int, body FindingsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsPartialUpdateWithFormdataBody(ctx context.Context, id int, body FindingsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsUpdate request with any body
	FindingsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsUpdate(ctx context.Context, id int, body FindingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsUpdateWithFormdataBody(ctx context.Context, id int, body FindingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsDuplicateList request
	FindingsDuplicateList(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsDuplicateResetCreate request
	FindingsDuplicateResetCreate(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsFilesRetrieve request
	FindingsFilesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsFilesCreate request with any body
	FindingsFilesCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsMetadataDestroy request
	FindingsMetadataDestroy(ctx context.Context, id int, params *FindingsMetadataDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsMetadataList request
	FindingsMetadataList(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsMetadataCreate request with any body
	FindingsMetadataCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsMetadataCreate(ctx context.Context, id int, body FindingsMetadataCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsMetadataCreateWithFormdataBody(ctx context.Context, id int, body FindingsMetadataCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsMetadataUpdate request with any body
	FindingsMetadataUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsMetadataUpdate(ctx context.Context, id int, body FindingsMetadataUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsMetadataUpdateWithFormdataBody(ctx context.Context, id int, body FindingsMetadataUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsNotesRetrieve request
	FindingsNotesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsNotesCreate request with any body
	FindingsNotesCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsNotesCreate(ctx context.Context, id int, body FindingsNotesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsNotesCreateWithFormdataBody(ctx context.Context, id int, body FindingsNotesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsOriginalCreate request
	FindingsOriginalCreate(ctx context.Context, id int, newFid int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsRemoveNotePartialUpdate request with any body
	FindingsRemoveNotePartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsRemoveNotePartialUpdate(ctx context.Context, id int, body FindingsRemoveNotePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsRemoveNotePartialUpdateWithFormdataBody(ctx context.Context, id int, body FindingsRemoveNotePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsRemoveTagsPartialUpdate request with any body
	FindingsRemoveTagsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsRemoveTagsPartialUpdate(ctx context.Context, id int, body FindingsRemoveTagsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsRemoveTagsPartialUpdateWithFormdataBody(ctx context.Context, id int, body FindingsRemoveTagsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsRemoveTagsUpdate request with any body
	FindingsRemoveTagsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsRemoveTagsUpdate(ctx context.Context, id int, body FindingsRemoveTagsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsRemoveTagsUpdateWithFormdataBody(ctx context.Context, id int, body FindingsRemoveTagsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsRequestResponseRetrieve request
	FindingsRequestResponseRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsRequestResponseCreate request with any body
	FindingsRequestResponseCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsRequestResponseCreate(ctx context.Context, id int, body FindingsRequestResponseCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsRequestResponseCreateWithFormdataBody(ctx context.Context, id int, body FindingsRequestResponseCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsTagsRetrieve request
	FindingsTagsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsTagsCreate request with any body
	FindingsTagsCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsTagsCreate(ctx context.Context, id int, body FindingsTagsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsTagsCreateWithFormdataBody(ctx context.Context, id int, body FindingsTagsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GlobalRolesList request
	GlobalRolesList(ctx context.Context, params *GlobalRolesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GlobalRolesCreate request with any body
	GlobalRolesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GlobalRolesCreate(ctx context.Context, body GlobalRolesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	GlobalRolesCreateWithFormdataBody(ctx context.Context, body GlobalRolesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GlobalRolesDestroy request
	GlobalRolesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GlobalRolesRetrieve request
	GlobalRolesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GlobalRolesPartialUpdate request with any body
	GlobalRolesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GlobalRolesPartialUpdate(ctx context.Context, id int, body GlobalRolesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	GlobalRolesPartialUpdateWithFormdataBody(ctx context.Context, id int, body GlobalRolesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GlobalRolesUpdate request with any body
	GlobalRolesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GlobalRolesUpdate(ctx context.Context, id int, body GlobalRolesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	GlobalRolesUpdateWithFormdataBody(ctx context.Context, id int, body GlobalRolesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ImportLanguagesCreate request with any body
	ImportLanguagesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ImportScanCreate request with any body
	ImportScanCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraConfigurationsList request
	JiraConfigurationsList(ctx context.Context, params *JiraConfigurationsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraConfigurationsCreate request with any body
	JiraConfigurationsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraConfigurationsCreate(ctx context.Context, body JiraConfigurationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraConfigurationsCreateWithFormdataBody(ctx context.Context, body JiraConfigurationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraConfigurationsDestroy request
	JiraConfigurationsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraConfigurationsRetrieve request
	JiraConfigurationsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraConfigurationsPartialUpdate request with any body
	JiraConfigurationsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraConfigurationsPartialUpdate(ctx context.Context, id int, body JiraConfigurationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraConfigurationsPartialUpdateWithFormdataBody(ctx context.Context, id int, body JiraConfigurationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraConfigurationsUpdate request with any body
	JiraConfigurationsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraConfigurationsUpdate(ctx context.Context, id int, body JiraConfigurationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraConfigurationsUpdateWithFormdataBody(ctx context.Context, id int, body JiraConfigurationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraFindingMappingsList request
	JiraFindingMappingsList(ctx context.Context, params *JiraFindingMappingsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraFindingMappingsCreate request with any body
	JiraFindingMappingsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraFindingMappingsCreate(ctx context.Context, body JiraFindingMappingsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraFindingMappingsCreateWithFormdataBody(ctx context.Context, body JiraFindingMappingsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraFindingMappingsDestroy request
	JiraFindingMappingsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraFindingMappingsRetrieve request
	JiraFindingMappingsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraFindingMappingsPartialUpdate request with any body
	JiraFindingMappingsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraFindingMappingsPartialUpdate(ctx context.Context, id int, body JiraFindingMappingsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraFindingMappingsPartialUpdateWithFormdataBody(ctx context.Context, id int, body JiraFindingMappingsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraFindingMappingsUpdate request with any body
	JiraFindingMappingsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraFindingMappingsUpdate(ctx context.Context, id int, body JiraFindingMappingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraFindingMappingsUpdateWithFormdataBody(ctx context.Context, id int, body JiraFindingMappingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraInstancesList request
	JiraInstancesList(ctx context.Context, params *JiraInstancesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraInstancesCreate request with any body
	JiraInstancesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraInstancesCreate(ctx context.Context, body JiraInstancesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraInstancesCreateWithFormdataBody(ctx context.Context, body JiraInstancesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraInstancesDestroy request
	JiraInstancesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraInstancesRetrieve request
	JiraInstancesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraInstancesPartialUpdate request with any body
	JiraInstancesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraInstancesPartialUpdate(ctx context.Context, id int, body JiraInstancesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraInstancesPartialUpdateWithFormdataBody(ctx context.Context, id int, body JiraInstancesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraInstancesUpdate request with any body
	JiraInstancesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraInstancesUpdate(ctx context.Context, id int, body JiraInstancesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraInstancesUpdateWithFormdataBody(ctx context.Context, id int, body JiraInstancesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraProductConfigurationsList request
	JiraProductConfigurationsList(ctx context.Context, params *JiraProductConfigurationsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraProductConfigurationsCreate request with any body
	JiraProductConfigurationsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraProductConfigurationsCreate(ctx context.Context, body JiraProductConfigurationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraProductConfigurationsCreateWithFormdataBody(ctx context.Context, body JiraProductConfigurationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraProductConfigurationsDestroy request
	JiraProductConfigurationsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraProductConfigurationsRetrieve request
	JiraProductConfigurationsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraProductConfigurationsPartialUpdate request with any body
	JiraProductConfigurationsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraProductConfigurationsPartialUpdate(ctx context.Context, id int, body JiraProductConfigurationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraProductConfigurationsPartialUpdateWithFormdataBody(ctx context.Context, id int, body JiraProductConfigurationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraProductConfigurationsUpdate request with any body
	JiraProductConfigurationsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraProductConfigurationsUpdate(ctx context.Context, id int, body JiraProductConfigurationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraProductConfigurationsUpdateWithFormdataBody(ctx context.Context, id int, body JiraProductConfigurationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraProjectsList request
	JiraProjectsList(ctx context.Context, params *JiraProjectsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraProjectsCreate request with any body
	JiraProjectsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraProjectsCreate(ctx context.Context, body JiraProjectsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraProjectsCreateWithFormdataBody(ctx context.Context, body JiraProjectsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraProjectsDestroy request
	JiraProjectsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraProjectsRetrieve request
	JiraProjectsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraProjectsPartialUpdate request with any body
	JiraProjectsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraProjectsPartialUpdate(ctx context.Context, id int, body JiraProjectsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraProjectsPartialUpdateWithFormdataBody(ctx context.Context, id int, body JiraProjectsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraProjectsUpdate request with any body
	JiraProjectsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraProjectsUpdate(ctx context.Context, id int, body JiraProjectsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraProjectsUpdateWithFormdataBody(ctx context.Context, id int, body JiraProjectsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LanguageTypesList request
	LanguageTypesList(ctx context.Context, params *LanguageTypesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LanguageTypesCreate request with any body
	LanguageTypesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LanguageTypesCreate(ctx context.Context, body LanguageTypesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	LanguageTypesCreateWithFormdataBody(ctx context.Context, body LanguageTypesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LanguageTypesDestroy request
	LanguageTypesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LanguageTypesRetrieve request
	LanguageTypesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LanguageTypesPartialUpdate request with any body
	LanguageTypesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LanguageTypesPartialUpdate(ctx context.Context, id int, body LanguageTypesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	LanguageTypesPartialUpdateWithFormdataBody(ctx context.Context, id int, body LanguageTypesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LanguageTypesUpdate request with any body
	LanguageTypesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LanguageTypesUpdate(ctx context.Context, id int, body LanguageTypesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	LanguageTypesUpdateWithFormdataBody(ctx context.Context, id int, body LanguageTypesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LanguagesList request
	LanguagesList(ctx context.Context, params *LanguagesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LanguagesCreate request with any body
	LanguagesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LanguagesCreate(ctx context.Context, body LanguagesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	LanguagesCreateWithFormdataBody(ctx context.Context, body LanguagesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LanguagesDestroy request
	LanguagesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LanguagesRetrieve request
	LanguagesRetrieve(ctx context.Context, id int, params *LanguagesRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LanguagesPartialUpdate request with any body
	LanguagesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LanguagesPartialUpdate(ctx context.Context, id int, body LanguagesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	LanguagesPartialUpdateWithFormdataBody(ctx context.Context, id int, body LanguagesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LanguagesUpdate request with any body
	LanguagesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LanguagesUpdate(ctx context.Context, id int, body LanguagesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	LanguagesUpdateWithFormdataBody(ctx context.Context, id int, body LanguagesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MetadataList request
	MetadataList(ctx context.Context, params *MetadataListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MetadataCreate request with any body
	MetadataCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MetadataCreate(ctx context.Context, body MetadataCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	MetadataCreateWithFormdataBody(ctx context.Context, body MetadataCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MetadataDestroy request
	MetadataDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MetadataRetrieve request
	MetadataRetrieve(ctx context.Context, id int, params *MetadataRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MetadataPartialUpdate request with any body
	MetadataPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MetadataPartialUpdate(ctx context.Context, id int, body MetadataPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	MetadataPartialUpdateWithFormdataBody(ctx context.Context, id int, body MetadataPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MetadataUpdate request with any body
	MetadataUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MetadataUpdate(ctx context.Context, id int, body MetadataUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	MetadataUpdateWithFormdataBody(ctx context.Context, id int, body MetadataUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkLocationsList request
	NetworkLocationsList(ctx context.Context, params *NetworkLocationsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkLocationsCreate request with any body
	NetworkLocationsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NetworkLocationsCreate(ctx context.Context, body NetworkLocationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	NetworkLocationsCreateWithFormdataBody(ctx context.Context, body NetworkLocationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkLocationsDestroy request
	NetworkLocationsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkLocationsRetrieve request
	NetworkLocationsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkLocationsPartialUpdate request with any body
	NetworkLocationsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NetworkLocationsPartialUpdate(ctx context.Context, id int, body NetworkLocationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	NetworkLocationsPartialUpdateWithFormdataBody(ctx context.Context, id int, body NetworkLocationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkLocationsUpdate request with any body
	NetworkLocationsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NetworkLocationsUpdate(ctx context.Context, id int, body NetworkLocationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	NetworkLocationsUpdateWithFormdataBody(ctx context.Context, id int, body NetworkLocationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NoteTypeList request
	NoteTypeList(ctx context.Context, params *NoteTypeListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NoteTypeCreate request with any body
	NoteTypeCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NoteTypeCreate(ctx context.Context, body NoteTypeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	NoteTypeCreateWithFormdataBody(ctx context.Context, body NoteTypeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NoteTypeDestroy request
	NoteTypeDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NoteTypeRetrieve request
	NoteTypeRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NoteTypePartialUpdate request with any body
	NoteTypePartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NoteTypePartialUpdate(ctx context.Context, id int, body NoteTypePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	NoteTypePartialUpdateWithFormdataBody(ctx context.Context, id int, body NoteTypePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NoteTypeUpdate request with any body
	NoteTypeUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NoteTypeUpdate(ctx context.Context, id int, body NoteTypeUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	NoteTypeUpdateWithFormdataBody(ctx context.Context, id int, body NoteTypeUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotesList request
	NotesList(ctx context.Context, params *NotesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotesRetrieve request
	NotesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotesPartialUpdate request with any body
	NotesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NotesPartialUpdate(ctx context.Context, id int, body NotesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	NotesPartialUpdateWithFormdataBody(ctx context.Context, id int, body NotesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotesUpdate request with any body
	NotesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NotesUpdate(ctx context.Context, id int, body NotesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	NotesUpdateWithFormdataBody(ctx context.Context, id int, body NotesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotificationsList request
	NotificationsList(ctx context.Context, params *NotificationsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotificationsCreate request with any body
	NotificationsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NotificationsCreate(ctx context.Context, body NotificationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	NotificationsCreateWithFormdataBody(ctx context.Context, body NotificationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotificationsDestroy request
	NotificationsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotificationsRetrieve request
	NotificationsRetrieve(ctx context.Context, id int, params *NotificationsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotificationsPartialUpdate request with any body
	NotificationsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NotificationsPartialUpdate(ctx context.Context, id int, body NotificationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	NotificationsPartialUpdateWithFormdataBody(ctx context.Context, id int, body NotificationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotificationsUpdate request with any body
	NotificationsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NotificationsUpdate(ctx context.Context, id int, body NotificationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	NotificationsUpdateWithFormdataBody(ctx context.Context, id int, body NotificationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Oa3SchemaRetrieve request
	Oa3SchemaRetrieve(ctx context.Context, params *Oa3SchemaRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductApiScanConfigurationsList request
	ProductApiScanConfigurationsList(ctx context.Context, params *ProductApiScanConfigurationsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductApiScanConfigurationsCreate request with any body
	ProductApiScanConfigurationsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductApiScanConfigurationsCreate(ctx context.Context, body ProductApiScanConfigurationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductApiScanConfigurationsCreateWithFormdataBody(ctx context.Context, body ProductApiScanConfigurationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductApiScanConfigurationsDestroy request
	ProductApiScanConfigurationsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductApiScanConfigurationsRetrieve request
	ProductApiScanConfigurationsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductApiScanConfigurationsPartialUpdate request with any body
	ProductApiScanConfigurationsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductApiScanConfigurationsPartialUpdate(ctx context.Context, id int, body ProductApiScanConfigurationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductApiScanConfigurationsPartialUpdateWithFormdataBody(ctx context.Context, id int, body ProductApiScanConfigurationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductApiScanConfigurationsUpdate request with any body
	ProductApiScanConfigurationsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductApiScanConfigurationsUpdate(ctx context.Context, id int, body ProductApiScanConfigurationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductApiScanConfigurationsUpdateWithFormdataBody(ctx context.Context, id int, body ProductApiScanConfigurationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductGroupsList request
	ProductGroupsList(ctx context.Context, params *ProductGroupsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductGroupsCreate request with any body
	ProductGroupsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductGroupsCreate(ctx context.Context, body ProductGroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductGroupsCreateWithFormdataBody(ctx context.Context, body ProductGroupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductGroupsDestroy request
	ProductGroupsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductGroupsRetrieve request
	ProductGroupsRetrieve(ctx context.Context, id int, params *ProductGroupsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductGroupsPartialUpdate request
	ProductGroupsPartialUpdate(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductGroupsUpdate request with any body
	ProductGroupsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductGroupsUpdate(ctx context.Context, id int, body ProductGroupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductGroupsUpdateWithFormdataBody(ctx context.Context, id int, body ProductGroupsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductMembersList request
	ProductMembersList(ctx context.Context, params *ProductMembersListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductMembersCreate request with any body
	ProductMembersCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductMembersCreate(ctx context.Context, body ProductMembersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductMembersCreateWithFormdataBody(ctx context.Context, body ProductMembersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductMembersDestroy request
	ProductMembersDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductMembersRetrieve request
	ProductMembersRetrieve(ctx context.Context, id int, params *ProductMembersRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductMembersPartialUpdate request
	ProductMembersPartialUpdate(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductMembersUpdate request with any body
	ProductMembersUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductMembersUpdate(ctx context.Context, id int, body ProductMembersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductMembersUpdateWithFormdataBody(ctx context.Context, id int, body ProductMembersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductTypeGroupsList request
	ProductTypeGroupsList(ctx context.Context, params *ProductTypeGroupsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductTypeGroupsCreate request with any body
	ProductTypeGroupsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductTypeGroupsCreate(ctx context.Context, body ProductTypeGroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductTypeGroupsCreateWithFormdataBody(ctx context.Context, body ProductTypeGroupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductTypeGroupsDestroy request
	ProductTypeGroupsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductTypeGroupsRetrieve request
	ProductTypeGroupsRetrieve(ctx context.Context, id int, params *ProductTypeGroupsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductTypeGroupsPartialUpdate request
	ProductTypeGroupsPartialUpdate(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductTypeGroupsUpdate request with any body
	ProductTypeGroupsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductTypeGroupsUpdate(ctx context.Context, id int, body ProductTypeGroupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductTypeGroupsUpdateWithFormdataBody(ctx context.Context, id int, body ProductTypeGroupsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductTypeMembersList request
	ProductTypeMembersList(ctx context.Context, params *ProductTypeMembersListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductTypeMembersCreate request with any body
	ProductTypeMembersCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductTypeMembersCreate(ctx context.Context, body ProductTypeMembersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductTypeMembersCreateWithFormdataBody(ctx context.Context, body ProductTypeMembersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductTypeMembersDestroy request
	ProductTypeMembersDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductTypeMembersRetrieve request
	ProductTypeMembersRetrieve(ctx context.Context, id int, params *ProductTypeMembersRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductTypeMembersPartialUpdate request
	ProductTypeMembersPartialUpdate(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductTypeMembersUpdate request with any body
	ProductTypeMembersUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductTypeMembersUpdate(ctx context.Context, id int, body ProductTypeMembersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductTypeMembersUpdateWithFormdataBody(ctx context.Context, id int, body ProductTypeMembersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductTypesList request
	ProductTypesList(ctx context.Context, params *ProductTypesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductTypesCreate request with any body
	ProductTypesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductTypesCreate(ctx context.Context, body ProductTypesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductTypesCreateWithFormdataBody(ctx context.Context, body ProductTypesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductTypesDestroy request
	ProductTypesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductTypesRetrieve request
	ProductTypesRetrieve(ctx context.Context, id int, params *ProductTypesRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductTypesPartialUpdate request with any body
	ProductTypesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductTypesPartialUpdate(ctx context.Context, id int, body ProductTypesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductTypesPartialUpdateWithFormdataBody(ctx context.Context, id int, body ProductTypesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductTypesUpdate request with any body
	ProductTypesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductTypesUpdate(ctx context.Context, id int, body ProductTypesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductTypesUpdateWithFormdataBody(ctx context.Context, id int, body ProductTypesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductTypesGenerateReportCreate request with any body
	ProductTypesGenerateReportCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductTypesGenerateReportCreate(ctx context.Context, id int, body ProductTypesGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductTypesGenerateReportCreateWithFormdataBody(ctx context.Context, id int, body ProductTypesGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductsList request
	ProductsList(ctx context.Context, params *ProductsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductsCreate request with any body
	ProductsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductsCreate(ctx context.Context, body ProductsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductsCreateWithFormdataBody(ctx context.Context, body ProductsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductsDestroy request
	ProductsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductsRetrieve request
	ProductsRetrieve(ctx context.Context, id int, params *ProductsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductsPartialUpdate request with any body
	ProductsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductsPartialUpdate(ctx context.Context, id int, body ProductsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductsPartialUpdateWithFormdataBody(ctx context.Context, id int, body ProductsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductsUpdate request with any body
	ProductsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductsUpdate(ctx context.Context, id int, body ProductsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductsUpdateWithFormdataBody(ctx context.Context, id int, body ProductsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductsGenerateReportCreate request with any body
	ProductsGenerateReportCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductsGenerateReportCreate(ctx context.Context, id int, body ProductsGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductsGenerateReportCreateWithFormdataBody(ctx context.Context, id int, body ProductsGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegulationsList request
	RegulationsList(ctx context.Context, params *RegulationsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegulationsCreate request with any body
	RegulationsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RegulationsCreate(ctx context.Context, body RegulationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	RegulationsCreateWithFormdataBody(ctx context.Context, body RegulationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegulationsDestroy request
	RegulationsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegulationsRetrieve request
	RegulationsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegulationsPartialUpdate request with any body
	RegulationsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RegulationsPartialUpdate(ctx context.Context, id int, body RegulationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	RegulationsPartialUpdateWithFormdataBody(ctx context.Context, id int, body RegulationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegulationsUpdate request with any body
	RegulationsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RegulationsUpdate(ctx context.Context, id int, body RegulationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	RegulationsUpdateWithFormdataBody(ctx context.Context, id int, body RegulationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReimportScanCreate request with any body
	ReimportScanCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RolesList request
	RolesList(ctx context.Context, params *RolesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RolesRetrieve request
	RolesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SonarqubeIssuesList request
	SonarqubeIssuesList(ctx context.Context, params *SonarqubeIssuesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SonarqubeIssuesCreate request with any body
	SonarqubeIssuesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SonarqubeIssuesCreate(ctx context.Context, body SonarqubeIssuesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	SonarqubeIssuesCreateWithFormdataBody(ctx context.Context, body SonarqubeIssuesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SonarqubeIssuesDestroy request
	SonarqubeIssuesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SonarqubeIssuesRetrieve request
	SonarqubeIssuesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SonarqubeIssuesPartialUpdate request with any body
	SonarqubeIssuesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SonarqubeIssuesPartialUpdate(ctx context.Context, id int, body SonarqubeIssuesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	SonarqubeIssuesPartialUpdateWithFormdataBody(ctx context.Context, id int, body SonarqubeIssuesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SonarqubeIssuesUpdate request with any body
	SonarqubeIssuesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SonarqubeIssuesUpdate(ctx context.Context, id int, body SonarqubeIssuesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	SonarqubeIssuesUpdateWithFormdataBody(ctx context.Context, id int, body SonarqubeIssuesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SonarqubeTransitionsList request
	SonarqubeTransitionsList(ctx context.Context, params *SonarqubeTransitionsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SonarqubeTransitionsCreate request with any body
	SonarqubeTransitionsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SonarqubeTransitionsCreate(ctx context.Context, body SonarqubeTransitionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	SonarqubeTransitionsCreateWithFormdataBody(ctx context.Context, body SonarqubeTransitionsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SonarqubeTransitionsDestroy request
	SonarqubeTransitionsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SonarqubeTransitionsRetrieve request
	SonarqubeTransitionsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SonarqubeTransitionsPartialUpdate request with any body
	SonarqubeTransitionsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SonarqubeTransitionsPartialUpdate(ctx context.Context, id int, body SonarqubeTransitionsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	SonarqubeTransitionsPartialUpdateWithFormdataBody(ctx context.Context, id int, body SonarqubeTransitionsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SonarqubeTransitionsUpdate request with any body
	SonarqubeTransitionsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SonarqubeTransitionsUpdate(ctx context.Context, id int, body SonarqubeTransitionsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	SonarqubeTransitionsUpdateWithFormdataBody(ctx context.Context, id int, body SonarqubeTransitionsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StubFindingsList request
	StubFindingsList(ctx context.Context, params *StubFindingsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StubFindingsCreate request with any body
	StubFindingsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StubFindingsCreate(ctx context.Context, body StubFindingsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	StubFindingsCreateWithFormdataBody(ctx context.Context, body StubFindingsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StubFindingsDestroy request
	StubFindingsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StubFindingsRetrieve request
	StubFindingsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StubFindingsPartialUpdate request with any body
	StubFindingsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StubFindingsPartialUpdate(ctx context.Context, id int, body StubFindingsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	StubFindingsPartialUpdateWithFormdataBody(ctx context.Context, id int, body StubFindingsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StubFindingsUpdate request with any body
	StubFindingsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StubFindingsUpdate(ctx context.Context, id int, body StubFindingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	StubFindingsUpdateWithFormdataBody(ctx context.Context, id int, body StubFindingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SystemSettingsList request
	SystemSettingsList(ctx context.Context, params *SystemSettingsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SystemSettingsPartialUpdate request with any body
	SystemSettingsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SystemSettingsPartialUpdate(ctx context.Context, id int, body SystemSettingsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	SystemSettingsPartialUpdateWithFormdataBody(ctx context.Context, id int, body SystemSettingsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SystemSettingsUpdate request with any body
	SystemSettingsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SystemSettingsUpdate(ctx context.Context, id int, body SystemSettingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	SystemSettingsUpdateWithFormdataBody(ctx context.Context, id int, body SystemSettingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TechnologiesList request
	TechnologiesList(ctx context.Context, params *TechnologiesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TechnologiesCreate request with any body
	TechnologiesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TechnologiesCreate(ctx context.Context, body TechnologiesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TechnologiesCreateWithFormdataBody(ctx context.Context, body TechnologiesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TechnologiesDestroy request
	TechnologiesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TechnologiesRetrieve request
	TechnologiesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TechnologiesPartialUpdate request with any body
	TechnologiesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TechnologiesPartialUpdate(ctx context.Context, id int, body TechnologiesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TechnologiesPartialUpdateWithFormdataBody(ctx context.Context, id int, body TechnologiesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TechnologiesUpdate request with any body
	TechnologiesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TechnologiesUpdate(ctx context.Context, id int, body TechnologiesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TechnologiesUpdateWithFormdataBody(ctx context.Context, id int, body TechnologiesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestImportsList request
	TestImportsList(ctx context.Context, params *TestImportsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestImportsCreate request with any body
	TestImportsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestImportsCreate(ctx context.Context, body TestImportsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestImportsCreateWithFormdataBody(ctx context.Context, body TestImportsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestImportsDestroy request
	TestImportsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestImportsRetrieve request
	TestImportsRetrieve(ctx context.Context, id int, params *TestImportsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestImportsPartialUpdate request with any body
	TestImportsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestImportsPartialUpdate(ctx context.Context, id int, body TestImportsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestImportsPartialUpdateWithFormdataBody(ctx context.Context, id int, body TestImportsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestImportsUpdate request with any body
	TestImportsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestImportsUpdate(ctx context.Context, id int, body TestImportsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestImportsUpdateWithFormdataBody(ctx context.Context, id int, body TestImportsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestTypesList request
	TestTypesList(ctx context.Context, params *TestTypesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestTypesCreate request with any body
	TestTypesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestTypesCreate(ctx context.Context, body TestTypesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestTypesCreateWithFormdataBody(ctx context.Context, body TestTypesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestTypesRetrieve request
	TestTypesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestTypesPartialUpdate request with any body
	TestTypesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestTypesPartialUpdate(ctx context.Context, id int, body TestTypesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestTypesPartialUpdateWithFormdataBody(ctx context.Context, id int, body TestTypesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestTypesUpdate request with any body
	TestTypesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestTypesUpdate(ctx context.Context, id int, body TestTypesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestTypesUpdateWithFormdataBody(ctx context.Context, id int, body TestTypesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestsList request
	TestsList(ctx context.Context, params *TestsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestsCreate request with any body
	TestsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestsCreate(ctx context.Context, body TestsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestsCreateWithFormdataBody(ctx context.Context, body TestsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestsDestroy request
	TestsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestsRetrieve request
	TestsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestsPartialUpdate request with any body
	TestsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestsPartialUpdate(ctx context.Context, id int, body TestsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestsPartialUpdateWithFormdataBody(ctx context.Context, id int, body TestsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestsUpdate request with any body
	TestsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestsUpdate(ctx context.Context, id int, body TestsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestsUpdateWithFormdataBody(ctx context.Context, id int, body TestsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestsAcceptRisksCreate request with any body
	TestsAcceptRisksCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestsAcceptRisksCreate(ctx context.Context, id int, body TestsAcceptRisksCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestsAcceptRisksCreateWithFormdataBody(ctx context.Context, id int, body TestsAcceptRisksCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestsFilesRetrieve request
	TestsFilesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestsFilesCreate request with any body
	TestsFilesCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestsGenerateReportCreate request with any body
	TestsGenerateReportCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestsGenerateReportCreate(ctx context.Context, id int, body TestsGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestsGenerateReportCreateWithFormdataBody(ctx context.Context, id int, body TestsGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestsNotesRetrieve request
	TestsNotesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestsNotesCreate request with any body
	TestsNotesCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestsNotesCreate(ctx context.Context, id int, body TestsNotesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestsNotesCreateWithFormdataBody(ctx context.Context, id int, body TestsNotesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToolConfigurationsList request
	ToolConfigurationsList(ctx context.Context, params *ToolConfigurationsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToolConfigurationsCreate request with any body
	ToolConfigurationsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ToolConfigurationsCreate(ctx context.Context, body ToolConfigurationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ToolConfigurationsCreateWithFormdataBody(ctx context.Context, body ToolConfigurationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToolConfigurationsDestroy request
	ToolConfigurationsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToolConfigurationsRetrieve request
	ToolConfigurationsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToolConfigurationsPartialUpdate request with any body
	ToolConfigurationsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ToolConfigurationsPartialUpdate(ctx context.Context, id int, body ToolConfigurationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ToolConfigurationsPartialUpdateWithFormdataBody(ctx context.Context, id int, body ToolConfigurationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToolConfigurationsUpdate request with any body
	ToolConfigurationsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ToolConfigurationsUpdate(ctx context.Context, id int, body ToolConfigurationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ToolConfigurationsUpdateWithFormdataBody(ctx context.Context, id int, body ToolConfigurationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToolProductSettingsList request
	ToolProductSettingsList(ctx context.Context, params *ToolProductSettingsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToolProductSettingsCreate request with any body
	ToolProductSettingsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ToolProductSettingsCreate(ctx context.Context, body ToolProductSettingsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ToolProductSettingsCreateWithFormdataBody(ctx context.Context, body ToolProductSettingsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToolProductSettingsDestroy request
	ToolProductSettingsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToolProductSettingsRetrieve request
	ToolProductSettingsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToolProductSettingsPartialUpdate request with any body
	ToolProductSettingsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ToolProductSettingsPartialUpdate(ctx context.Context, id int, body ToolProductSettingsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ToolProductSettingsPartialUpdateWithFormdataBody(ctx context.Context, id int, body ToolProductSettingsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToolProductSettingsUpdate request with any body
	ToolProductSettingsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ToolProductSettingsUpdate(ctx context.Context, id int, body ToolProductSettingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ToolProductSettingsUpdateWithFormdataBody(ctx context.Context, id int, body ToolProductSettingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToolTypesList request
	ToolTypesList(ctx context.Context, params *ToolTypesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToolTypesCreate request with any body
	ToolTypesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ToolTypesCreate(ctx context.Context, body ToolTypesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ToolTypesCreateWithFormdataBody(ctx context.Context, body ToolTypesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToolTypesDestroy request
	ToolTypesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToolTypesRetrieve request
	ToolTypesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToolTypesPartialUpdate request with any body
	ToolTypesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ToolTypesPartialUpdate(ctx context.Context, id int, body ToolTypesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ToolTypesPartialUpdateWithFormdataBody(ctx context.Context, id int, body ToolTypesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToolTypesUpdate request with any body
	ToolTypesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ToolTypesUpdate(ctx context.Context, id int, body ToolTypesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ToolTypesUpdateWithFormdataBody(ctx context.Context, id int, body ToolTypesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserContactInfosList request
	UserContactInfosList(ctx context.Context, params *UserContactInfosListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserContactInfosCreate request with any body
	UserContactInfosCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UserContactInfosCreate(ctx context.Context, body UserContactInfosCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	UserContactInfosCreateWithFormdataBody(ctx context.Context, body UserContactInfosCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserContactInfosDestroy request
	UserContactInfosDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserContactInfosRetrieve request
	UserContactInfosRetrieve(ctx context.Context, id int, params *UserContactInfosRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserContactInfosPartialUpdate request with any body
	UserContactInfosPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UserContactInfosPartialUpdate(ctx context.Context, id int, body UserContactInfosPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	UserContactInfosPartialUpdateWithFormdataBody(ctx context.Context, id int, body UserContactInfosPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserContactInfosUpdate request with any body
	UserContactInfosUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UserContactInfosUpdate(ctx context.Context, id int, body UserContactInfosUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	UserContactInfosUpdateWithFormdataBody(ctx context.Context, id int, body UserContactInfosUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserProfileRetrieve request
	UserProfileRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersList request
	UsersList(ctx context.Context, params *UsersListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersCreate request with any body
	UsersCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersCreate(ctx context.Context, body UsersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersCreateWithFormdataBody(ctx context.Context, body UsersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersDestroy request
	UsersDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersRetrieve request
	UsersRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersPartialUpdate request with any body
	UsersPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersPartialUpdate(ctx context.Context, id int, body UsersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersPartialUpdateWithFormdataBody(ctx context.Context, id int, body UsersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersUpdate request with any body
	UsersUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersUpdate(ctx context.Context, id int, body UsersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersUpdateWithFormdataBody(ctx context.Context, id int, body UsersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ApiTokenAuthCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiTokenAuthCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiTokenAuthCreate(ctx context.Context, body ApiTokenAuthCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiTokenAuthCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiTokenAuthCreateWithFormdataBody(ctx context.Context, body ApiTokenAuthCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiTokenAuthCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevelopmentEnvironmentsList(ctx context.Context, params *DevelopmentEnvironmentsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevelopmentEnvironmentsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevelopmentEnvironmentsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevelopmentEnvironmentsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevelopmentEnvironmentsCreate(ctx context.Context, body DevelopmentEnvironmentsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevelopmentEnvironmentsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevelopmentEnvironmentsCreateWithFormdataBody(ctx context.Context, body DevelopmentEnvironmentsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevelopmentEnvironmentsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevelopmentEnvironmentsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevelopmentEnvironmentsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevelopmentEnvironmentsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevelopmentEnvironmentsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevelopmentEnvironmentsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevelopmentEnvironmentsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevelopmentEnvironmentsPartialUpdate(ctx context.Context, id int, body DevelopmentEnvironmentsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevelopmentEnvironmentsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevelopmentEnvironmentsPartialUpdateWithFormdataBody(ctx context.Context, id int, body DevelopmentEnvironmentsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevelopmentEnvironmentsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevelopmentEnvironmentsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevelopmentEnvironmentsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevelopmentEnvironmentsUpdate(ctx context.Context, id int, body DevelopmentEnvironmentsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevelopmentEnvironmentsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevelopmentEnvironmentsUpdateWithFormdataBody(ctx context.Context, id int, body DevelopmentEnvironmentsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevelopmentEnvironmentsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupMembersList(ctx context.Context, params *DojoGroupMembersListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupMembersListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupMembersCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupMembersCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupMembersCreate(ctx context.Context, body DojoGroupMembersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupMembersCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupMembersCreateWithFormdataBody(ctx context.Context, body DojoGroupMembersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupMembersCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupMembersDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupMembersDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupMembersRetrieve(ctx context.Context, id int, params *DojoGroupMembersRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupMembersRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupMembersPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupMembersPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupMembersPartialUpdate(ctx context.Context, id int, body DojoGroupMembersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupMembersPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupMembersPartialUpdateWithFormdataBody(ctx context.Context, id int, body DojoGroupMembersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupMembersPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupMembersUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupMembersUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupMembersUpdate(ctx context.Context, id int, body DojoGroupMembersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupMembersUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupMembersUpdateWithFormdataBody(ctx context.Context, id int, body DojoGroupMembersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupMembersUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupsList(ctx context.Context, params *DojoGroupsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupsCreate(ctx context.Context, body DojoGroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupsCreateWithFormdataBody(ctx context.Context, body DojoGroupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupsRetrieve(ctx context.Context, id int, params *DojoGroupsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupsRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupsPartialUpdate(ctx context.Context, id int, body DojoGroupsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupsPartialUpdateWithFormdataBody(ctx context.Context, id int, body DojoGroupsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupsUpdate(ctx context.Context, id int, body DojoGroupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupsUpdateWithFormdataBody(ctx context.Context, id int, body DojoGroupsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointMetaImportCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointMetaImportCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointStatusList(ctx context.Context, params *EndpointStatusListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointStatusListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointStatusCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointStatusCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointStatusCreate(ctx context.Context, body EndpointStatusCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointStatusCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointStatusCreateWithFormdataBody(ctx context.Context, body EndpointStatusCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointStatusCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointStatusDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointStatusDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointStatusRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointStatusRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointStatusPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointStatusPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointStatusPartialUpdate(ctx context.Context, id int, body EndpointStatusPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointStatusPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointStatusPartialUpdateWithFormdataBody(ctx context.Context, id int, body EndpointStatusPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointStatusPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointStatusUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointStatusUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointStatusUpdate(ctx context.Context, id int, body EndpointStatusUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointStatusUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointStatusUpdateWithFormdataBody(ctx context.Context, id int, body EndpointStatusUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointStatusUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointsList(ctx context.Context, params *EndpointsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointsCreate(ctx context.Context, body EndpointsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointsCreateWithFormdataBody(ctx context.Context, body EndpointsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointsPartialUpdate(ctx context.Context, id int, body EndpointsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointsPartialUpdateWithFormdataBody(ctx context.Context, id int, body EndpointsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointsUpdate(ctx context.Context, id int, body EndpointsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointsUpdateWithFormdataBody(ctx context.Context, id int, body EndpointsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointsGenerateReportCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointsGenerateReportCreateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointsGenerateReportCreate(ctx context.Context, id int, body EndpointsGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointsGenerateReportCreateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointsGenerateReportCreateWithFormdataBody(ctx context.Context, id int, body EndpointsGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointsGenerateReportCreateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementPresetsList(ctx context.Context, params *EngagementPresetsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementPresetsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementPresetsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementPresetsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementPresetsCreate(ctx context.Context, body EngagementPresetsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementPresetsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementPresetsCreateWithFormdataBody(ctx context.Context, body EngagementPresetsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementPresetsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementPresetsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementPresetsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementPresetsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementPresetsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementPresetsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementPresetsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementPresetsPartialUpdate(ctx context.Context, id int, body EngagementPresetsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementPresetsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementPresetsPartialUpdateWithFormdataBody(ctx context.Context, id int, body EngagementPresetsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementPresetsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementPresetsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementPresetsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementPresetsUpdate(ctx context.Context, id int, body EngagementPresetsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementPresetsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementPresetsUpdateWithFormdataBody(ctx context.Context, id int, body EngagementPresetsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementPresetsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsList(ctx context.Context, params *EngagementsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsCreate(ctx context.Context, body EngagementsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsCreateWithFormdataBody(ctx context.Context, body EngagementsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsPartialUpdate(ctx context.Context, id int, body EngagementsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsPartialUpdateWithFormdataBody(ctx context.Context, id int, body EngagementsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsUpdate(ctx context.Context, id int, body EngagementsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsUpdateWithFormdataBody(ctx context.Context, id int, body EngagementsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsAcceptRisksCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsAcceptRisksCreateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsAcceptRisksCreate(ctx context.Context, id int, body EngagementsAcceptRisksCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsAcceptRisksCreateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsAcceptRisksCreateWithFormdataBody(ctx context.Context, id int, body EngagementsAcceptRisksCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsAcceptRisksCreateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsCloseCreate(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsCloseCreateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsFilesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsFilesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsFilesCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsFilesCreateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsGenerateReportCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsGenerateReportCreateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsGenerateReportCreate(ctx context.Context, id int, body EngagementsGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsGenerateReportCreateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsGenerateReportCreateWithFormdataBody(ctx context.Context, id int, body EngagementsGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsGenerateReportCreateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsNotesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsNotesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsNotesCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsNotesCreateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsNotesCreate(ctx context.Context, id int, body EngagementsNotesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsNotesCreateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsNotesCreateWithFormdataBody(ctx context.Context, id int, body EngagementsNotesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsNotesCreateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsReopenCreate(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsReopenCreateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingTemplatesList(ctx context.Context, params *FindingTemplatesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingTemplatesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingTemplatesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingTemplatesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingTemplatesCreate(ctx context.Context, body FindingTemplatesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingTemplatesCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingTemplatesCreateWithFormdataBody(ctx context.Context, body FindingTemplatesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingTemplatesCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingTemplatesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingTemplatesDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingTemplatesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingTemplatesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingTemplatesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingTemplatesPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingTemplatesPartialUpdate(ctx context.Context, id int, body FindingTemplatesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingTemplatesPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingTemplatesPartialUpdateWithFormdataBody(ctx context.Context, id int, body FindingTemplatesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingTemplatesPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingTemplatesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingTemplatesUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingTemplatesUpdate(ctx context.Context, id int, body FindingTemplatesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingTemplatesUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingTemplatesUpdateWithFormdataBody(ctx context.Context, id int, body FindingTemplatesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingTemplatesUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsList(ctx context.Context, params *FindingsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsCreate(ctx context.Context, body FindingsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsCreateWithFormdataBody(ctx context.Context, body FindingsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsAcceptRisksCreateWithBody(ctx context.Context, params *FindingsAcceptRisksCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsAcceptRisksCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsAcceptRisksCreate(ctx context.Context, params *FindingsAcceptRisksCreateParams, body FindingsAcceptRisksCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsAcceptRisksCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsAcceptRisksCreateWithFormdataBody(ctx context.Context, params *FindingsAcceptRisksCreateParams, body FindingsAcceptRisksCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsAcceptRisksCreateRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsGenerateReportCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsGenerateReportCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsGenerateReportCreate(ctx context.Context, body FindingsGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsGenerateReportCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsGenerateReportCreateWithFormdataBody(ctx context.Context, body FindingsGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsGenerateReportCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsRetrieve(ctx context.Context, id int, params *FindingsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsPartialUpdate(ctx context.Context, id int, body FindingsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsPartialUpdateWithFormdataBody(ctx context.Context, id int, body FindingsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsUpdate(ctx context.Context, id int, body FindingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsUpdateWithFormdataBody(ctx context.Context, id int, body FindingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsDuplicateList(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsDuplicateListRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsDuplicateResetCreate(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsDuplicateResetCreateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsFilesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsFilesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsFilesCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsFilesCreateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsMetadataDestroy(ctx context.Context, id int, params *FindingsMetadataDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsMetadataDestroyRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsMetadataList(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsMetadataListRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsMetadataCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsMetadataCreateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsMetadataCreate(ctx context.Context, id int, body FindingsMetadataCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsMetadataCreateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsMetadataCreateWithFormdataBody(ctx context.Context, id int, body FindingsMetadataCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsMetadataCreateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsMetadataUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsMetadataUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsMetadataUpdate(ctx context.Context, id int, body FindingsMetadataUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsMetadataUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsMetadataUpdateWithFormdataBody(ctx context.Context, id int, body FindingsMetadataUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsMetadataUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsNotesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsNotesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsNotesCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsNotesCreateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsNotesCreate(ctx context.Context, id int, body FindingsNotesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsNotesCreateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsNotesCreateWithFormdataBody(ctx context.Context, id int, body FindingsNotesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsNotesCreateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsOriginalCreate(ctx context.Context, id int, newFid int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsOriginalCreateRequest(c.Server, id, newFid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsRemoveNotePartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsRemoveNotePartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsRemoveNotePartialUpdate(ctx context.Context, id int, body FindingsRemoveNotePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsRemoveNotePartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsRemoveNotePartialUpdateWithFormdataBody(ctx context.Context, id int, body FindingsRemoveNotePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsRemoveNotePartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsRemoveTagsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsRemoveTagsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsRemoveTagsPartialUpdate(ctx context.Context, id int, body FindingsRemoveTagsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsRemoveTagsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsRemoveTagsPartialUpdateWithFormdataBody(ctx context.Context, id int, body FindingsRemoveTagsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsRemoveTagsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsRemoveTagsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsRemoveTagsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsRemoveTagsUpdate(ctx context.Context, id int, body FindingsRemoveTagsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsRemoveTagsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsRemoveTagsUpdateWithFormdataBody(ctx context.Context, id int, body FindingsRemoveTagsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsRemoveTagsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsRequestResponseRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsRequestResponseRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsRequestResponseCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsRequestResponseCreateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsRequestResponseCreate(ctx context.Context, id int, body FindingsRequestResponseCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsRequestResponseCreateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsRequestResponseCreateWithFormdataBody(ctx context.Context, id int, body FindingsRequestResponseCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsRequestResponseCreateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsTagsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsTagsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsTagsCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsTagsCreateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsTagsCreate(ctx context.Context, id int, body FindingsTagsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsTagsCreateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsTagsCreateWithFormdataBody(ctx context.Context, id int, body FindingsTagsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsTagsCreateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GlobalRolesList(ctx context.Context, params *GlobalRolesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGlobalRolesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GlobalRolesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGlobalRolesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GlobalRolesCreate(ctx context.Context, body GlobalRolesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGlobalRolesCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GlobalRolesCreateWithFormdataBody(ctx context.Context, body GlobalRolesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGlobalRolesCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GlobalRolesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGlobalRolesDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GlobalRolesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGlobalRolesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GlobalRolesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGlobalRolesPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GlobalRolesPartialUpdate(ctx context.Context, id int, body GlobalRolesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGlobalRolesPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GlobalRolesPartialUpdateWithFormdataBody(ctx context.Context, id int, body GlobalRolesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGlobalRolesPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GlobalRolesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGlobalRolesUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GlobalRolesUpdate(ctx context.Context, id int, body GlobalRolesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGlobalRolesUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GlobalRolesUpdateWithFormdataBody(ctx context.Context, id int, body GlobalRolesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGlobalRolesUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImportLanguagesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImportLanguagesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImportScanCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImportScanCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraConfigurationsList(ctx context.Context, params *JiraConfigurationsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraConfigurationsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraConfigurationsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraConfigurationsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraConfigurationsCreate(ctx context.Context, body JiraConfigurationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraConfigurationsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraConfigurationsCreateWithFormdataBody(ctx context.Context, body JiraConfigurationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraConfigurationsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraConfigurationsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraConfigurationsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraConfigurationsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraConfigurationsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraConfigurationsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraConfigurationsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraConfigurationsPartialUpdate(ctx context.Context, id int, body JiraConfigurationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraConfigurationsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraConfigurationsPartialUpdateWithFormdataBody(ctx context.Context, id int, body JiraConfigurationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraConfigurationsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraConfigurationsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraConfigurationsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraConfigurationsUpdate(ctx context.Context, id int, body JiraConfigurationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraConfigurationsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraConfigurationsUpdateWithFormdataBody(ctx context.Context, id int, body JiraConfigurationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraConfigurationsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraFindingMappingsList(ctx context.Context, params *JiraFindingMappingsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraFindingMappingsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraFindingMappingsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraFindingMappingsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraFindingMappingsCreate(ctx context.Context, body JiraFindingMappingsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraFindingMappingsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraFindingMappingsCreateWithFormdataBody(ctx context.Context, body JiraFindingMappingsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraFindingMappingsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraFindingMappingsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraFindingMappingsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraFindingMappingsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraFindingMappingsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraFindingMappingsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraFindingMappingsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraFindingMappingsPartialUpdate(ctx context.Context, id int, body JiraFindingMappingsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraFindingMappingsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraFindingMappingsPartialUpdateWithFormdataBody(ctx context.Context, id int, body JiraFindingMappingsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraFindingMappingsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraFindingMappingsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraFindingMappingsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraFindingMappingsUpdate(ctx context.Context, id int, body JiraFindingMappingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraFindingMappingsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraFindingMappingsUpdateWithFormdataBody(ctx context.Context, id int, body JiraFindingMappingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraFindingMappingsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraInstancesList(ctx context.Context, params *JiraInstancesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraInstancesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraInstancesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraInstancesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraInstancesCreate(ctx context.Context, body JiraInstancesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraInstancesCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraInstancesCreateWithFormdataBody(ctx context.Context, body JiraInstancesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraInstancesCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraInstancesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraInstancesDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraInstancesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraInstancesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraInstancesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraInstancesPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraInstancesPartialUpdate(ctx context.Context, id int, body JiraInstancesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraInstancesPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraInstancesPartialUpdateWithFormdataBody(ctx context.Context, id int, body JiraInstancesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraInstancesPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraInstancesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraInstancesUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraInstancesUpdate(ctx context.Context, id int, body JiraInstancesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraInstancesUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraInstancesUpdateWithFormdataBody(ctx context.Context, id int, body JiraInstancesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraInstancesUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProductConfigurationsList(ctx context.Context, params *JiraProductConfigurationsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProductConfigurationsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProductConfigurationsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProductConfigurationsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProductConfigurationsCreate(ctx context.Context, body JiraProductConfigurationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProductConfigurationsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProductConfigurationsCreateWithFormdataBody(ctx context.Context, body JiraProductConfigurationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProductConfigurationsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProductConfigurationsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProductConfigurationsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProductConfigurationsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProductConfigurationsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProductConfigurationsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProductConfigurationsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProductConfigurationsPartialUpdate(ctx context.Context, id int, body JiraProductConfigurationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProductConfigurationsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProductConfigurationsPartialUpdateWithFormdataBody(ctx context.Context, id int, body JiraProductConfigurationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProductConfigurationsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProductConfigurationsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProductConfigurationsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProductConfigurationsUpdate(ctx context.Context, id int, body JiraProductConfigurationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProductConfigurationsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProductConfigurationsUpdateWithFormdataBody(ctx context.Context, id int, body JiraProductConfigurationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProductConfigurationsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProjectsList(ctx context.Context, params *JiraProjectsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProjectsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProjectsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProjectsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProjectsCreate(ctx context.Context, body JiraProjectsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProjectsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProjectsCreateWithFormdataBody(ctx context.Context, body JiraProjectsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProjectsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProjectsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProjectsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProjectsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProjectsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProjectsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProjectsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProjectsPartialUpdate(ctx context.Context, id int, body JiraProjectsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProjectsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProjectsPartialUpdateWithFormdataBody(ctx context.Context, id int, body JiraProjectsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProjectsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProjectsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProjectsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProjectsUpdate(ctx context.Context, id int, body JiraProjectsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProjectsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProjectsUpdateWithFormdataBody(ctx context.Context, id int, body JiraProjectsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProjectsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguageTypesList(ctx context.Context, params *LanguageTypesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguageTypesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguageTypesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguageTypesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguageTypesCreate(ctx context.Context, body LanguageTypesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguageTypesCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguageTypesCreateWithFormdataBody(ctx context.Context, body LanguageTypesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguageTypesCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguageTypesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguageTypesDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguageTypesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguageTypesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguageTypesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguageTypesPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguageTypesPartialUpdate(ctx context.Context, id int, body LanguageTypesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguageTypesPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguageTypesPartialUpdateWithFormdataBody(ctx context.Context, id int, body LanguageTypesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguageTypesPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguageTypesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguageTypesUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguageTypesUpdate(ctx context.Context, id int, body LanguageTypesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguageTypesUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguageTypesUpdateWithFormdataBody(ctx context.Context, id int, body LanguageTypesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguageTypesUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguagesList(ctx context.Context, params *LanguagesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguagesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguagesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguagesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguagesCreate(ctx context.Context, body LanguagesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguagesCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguagesCreateWithFormdataBody(ctx context.Context, body LanguagesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguagesCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguagesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguagesDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguagesRetrieve(ctx context.Context, id int, params *LanguagesRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguagesRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguagesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguagesPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguagesPartialUpdate(ctx context.Context, id int, body LanguagesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguagesPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguagesPartialUpdateWithFormdataBody(ctx context.Context, id int, body LanguagesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguagesPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguagesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguagesUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguagesUpdate(ctx context.Context, id int, body LanguagesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguagesUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguagesUpdateWithFormdataBody(ctx context.Context, id int, body LanguagesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguagesUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MetadataList(ctx context.Context, params *MetadataListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetadataListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MetadataCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetadataCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MetadataCreate(ctx context.Context, body MetadataCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetadataCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MetadataCreateWithFormdataBody(ctx context.Context, body MetadataCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetadataCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MetadataDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetadataDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MetadataRetrieve(ctx context.Context, id int, params *MetadataRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetadataRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MetadataPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetadataPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MetadataPartialUpdate(ctx context.Context, id int, body MetadataPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetadataPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MetadataPartialUpdateWithFormdataBody(ctx context.Context, id int, body MetadataPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetadataPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MetadataUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetadataUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MetadataUpdate(ctx context.Context, id int, body MetadataUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetadataUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MetadataUpdateWithFormdataBody(ctx context.Context, id int, body MetadataUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetadataUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkLocationsList(ctx context.Context, params *NetworkLocationsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkLocationsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkLocationsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkLocationsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkLocationsCreate(ctx context.Context, body NetworkLocationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkLocationsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkLocationsCreateWithFormdataBody(ctx context.Context, body NetworkLocationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkLocationsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkLocationsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkLocationsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkLocationsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkLocationsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkLocationsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkLocationsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkLocationsPartialUpdate(ctx context.Context, id int, body NetworkLocationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkLocationsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkLocationsPartialUpdateWithFormdataBody(ctx context.Context, id int, body NetworkLocationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkLocationsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkLocationsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkLocationsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkLocationsUpdate(ctx context.Context, id int, body NetworkLocationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkLocationsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkLocationsUpdateWithFormdataBody(ctx context.Context, id int, body NetworkLocationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkLocationsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NoteTypeList(ctx context.Context, params *NoteTypeListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNoteTypeListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NoteTypeCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNoteTypeCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NoteTypeCreate(ctx context.Context, body NoteTypeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNoteTypeCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NoteTypeCreateWithFormdataBody(ctx context.Context, body NoteTypeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNoteTypeCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NoteTypeDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNoteTypeDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NoteTypeRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNoteTypeRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NoteTypePartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNoteTypePartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NoteTypePartialUpdate(ctx context.Context, id int, body NoteTypePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNoteTypePartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NoteTypePartialUpdateWithFormdataBody(ctx context.Context, id int, body NoteTypePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNoteTypePartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NoteTypeUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNoteTypeUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NoteTypeUpdate(ctx context.Context, id int, body NoteTypeUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNoteTypeUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NoteTypeUpdateWithFormdataBody(ctx context.Context, id int, body NoteTypeUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNoteTypeUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotesList(ctx context.Context, params *NotesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotesPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotesPartialUpdate(ctx context.Context, id int, body NotesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotesPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotesPartialUpdateWithFormdataBody(ctx context.Context, id int, body NotesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotesPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotesUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotesUpdate(ctx context.Context, id int, body NotesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotesUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotesUpdateWithFormdataBody(ctx context.Context, id int, body NotesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotesUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationsList(ctx context.Context, params *NotificationsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationsCreate(ctx context.Context, body NotificationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationsCreateWithFormdataBody(ctx context.Context, body NotificationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationsRetrieve(ctx context.Context, id int, params *NotificationsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationsRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationsPartialUpdate(ctx context.Context, id int, body NotificationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationsPartialUpdateWithFormdataBody(ctx context.Context, id int, body NotificationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationsUpdate(ctx context.Context, id int, body NotificationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationsUpdateWithFormdataBody(ctx context.Context, id int, body NotificationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Oa3SchemaRetrieve(ctx context.Context, params *Oa3SchemaRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOa3SchemaRetrieveRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductApiScanConfigurationsList(ctx context.Context, params *ProductApiScanConfigurationsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductApiScanConfigurationsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductApiScanConfigurationsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductApiScanConfigurationsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductApiScanConfigurationsCreate(ctx context.Context, body ProductApiScanConfigurationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductApiScanConfigurationsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductApiScanConfigurationsCreateWithFormdataBody(ctx context.Context, body ProductApiScanConfigurationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductApiScanConfigurationsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductApiScanConfigurationsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductApiScanConfigurationsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductApiScanConfigurationsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductApiScanConfigurationsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductApiScanConfigurationsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductApiScanConfigurationsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductApiScanConfigurationsPartialUpdate(ctx context.Context, id int, body ProductApiScanConfigurationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductApiScanConfigurationsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductApiScanConfigurationsPartialUpdateWithFormdataBody(ctx context.Context, id int, body ProductApiScanConfigurationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductApiScanConfigurationsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductApiScanConfigurationsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductApiScanConfigurationsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductApiScanConfigurationsUpdate(ctx context.Context, id int, body ProductApiScanConfigurationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductApiScanConfigurationsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductApiScanConfigurationsUpdateWithFormdataBody(ctx context.Context, id int, body ProductApiScanConfigurationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductApiScanConfigurationsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductGroupsList(ctx context.Context, params *ProductGroupsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductGroupsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductGroupsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductGroupsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductGroupsCreate(ctx context.Context, body ProductGroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductGroupsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductGroupsCreateWithFormdataBody(ctx context.Context, body ProductGroupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductGroupsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductGroupsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductGroupsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductGroupsRetrieve(ctx context.Context, id int, params *ProductGroupsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductGroupsRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductGroupsPartialUpdate(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductGroupsPartialUpdateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductGroupsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductGroupsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductGroupsUpdate(ctx context.Context, id int, body ProductGroupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductGroupsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductGroupsUpdateWithFormdataBody(ctx context.Context, id int, body ProductGroupsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductGroupsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductMembersList(ctx context.Context, params *ProductMembersListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductMembersListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductMembersCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductMembersCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductMembersCreate(ctx context.Context, body ProductMembersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductMembersCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductMembersCreateWithFormdataBody(ctx context.Context, body ProductMembersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductMembersCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductMembersDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductMembersDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductMembersRetrieve(ctx context.Context, id int, params *ProductMembersRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductMembersRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductMembersPartialUpdate(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductMembersPartialUpdateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductMembersUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductMembersUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductMembersUpdate(ctx context.Context, id int, body ProductMembersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductMembersUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductMembersUpdateWithFormdataBody(ctx context.Context, id int, body ProductMembersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductMembersUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypeGroupsList(ctx context.Context, params *ProductTypeGroupsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypeGroupsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypeGroupsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypeGroupsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypeGroupsCreate(ctx context.Context, body ProductTypeGroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypeGroupsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypeGroupsCreateWithFormdataBody(ctx context.Context, body ProductTypeGroupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypeGroupsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypeGroupsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypeGroupsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypeGroupsRetrieve(ctx context.Context, id int, params *ProductTypeGroupsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypeGroupsRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypeGroupsPartialUpdate(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypeGroupsPartialUpdateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypeGroupsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypeGroupsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypeGroupsUpdate(ctx context.Context, id int, body ProductTypeGroupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypeGroupsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypeGroupsUpdateWithFormdataBody(ctx context.Context, id int, body ProductTypeGroupsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypeGroupsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypeMembersList(ctx context.Context, params *ProductTypeMembersListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypeMembersListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypeMembersCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypeMembersCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypeMembersCreate(ctx context.Context, body ProductTypeMembersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypeMembersCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypeMembersCreateWithFormdataBody(ctx context.Context, body ProductTypeMembersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypeMembersCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypeMembersDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypeMembersDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypeMembersRetrieve(ctx context.Context, id int, params *ProductTypeMembersRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypeMembersRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypeMembersPartialUpdate(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypeMembersPartialUpdateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypeMembersUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypeMembersUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypeMembersUpdate(ctx context.Context, id int, body ProductTypeMembersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypeMembersUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypeMembersUpdateWithFormdataBody(ctx context.Context, id int, body ProductTypeMembersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypeMembersUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypesList(ctx context.Context, params *ProductTypesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypesCreate(ctx context.Context, body ProductTypesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypesCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypesCreateWithFormdataBody(ctx context.Context, body ProductTypesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypesCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypesDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypesRetrieve(ctx context.Context, id int, params *ProductTypesRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypesRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypesPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypesPartialUpdate(ctx context.Context, id int, body ProductTypesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypesPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypesPartialUpdateWithFormdataBody(ctx context.Context, id int, body ProductTypesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypesPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypesUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypesUpdate(ctx context.Context, id int, body ProductTypesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypesUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypesUpdateWithFormdataBody(ctx context.Context, id int, body ProductTypesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypesUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypesGenerateReportCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypesGenerateReportCreateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypesGenerateReportCreate(ctx context.Context, id int, body ProductTypesGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypesGenerateReportCreateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypesGenerateReportCreateWithFormdataBody(ctx context.Context, id int, body ProductTypesGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypesGenerateReportCreateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductsList(ctx context.Context, params *ProductsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductsCreate(ctx context.Context, body ProductsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductsCreateWithFormdataBody(ctx context.Context, body ProductsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductsRetrieve(ctx context.Context, id int, params *ProductsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductsRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductsPartialUpdate(ctx context.Context, id int, body ProductsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductsPartialUpdateWithFormdataBody(ctx context.Context, id int, body ProductsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductsUpdate(ctx context.Context, id int, body ProductsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductsUpdateWithFormdataBody(ctx context.Context, id int, body ProductsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductsGenerateReportCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductsGenerateReportCreateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductsGenerateReportCreate(ctx context.Context, id int, body ProductsGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductsGenerateReportCreateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductsGenerateReportCreateWithFormdataBody(ctx context.Context, id int, body ProductsGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductsGenerateReportCreateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegulationsList(ctx context.Context, params *RegulationsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegulationsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegulationsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegulationsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegulationsCreate(ctx context.Context, body RegulationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegulationsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegulationsCreateWithFormdataBody(ctx context.Context, body RegulationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegulationsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegulationsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegulationsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegulationsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegulationsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegulationsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegulationsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegulationsPartialUpdate(ctx context.Context, id int, body RegulationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegulationsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegulationsPartialUpdateWithFormdataBody(ctx context.Context, id int, body RegulationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegulationsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegulationsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegulationsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegulationsUpdate(ctx context.Context, id int, body RegulationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegulationsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegulationsUpdateWithFormdataBody(ctx context.Context, id int, body RegulationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegulationsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReimportScanCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReimportScanCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RolesList(ctx context.Context, params *RolesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRolesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RolesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRolesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeIssuesList(ctx context.Context, params *SonarqubeIssuesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeIssuesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeIssuesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeIssuesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeIssuesCreate(ctx context.Context, body SonarqubeIssuesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeIssuesCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeIssuesCreateWithFormdataBody(ctx context.Context, body SonarqubeIssuesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeIssuesCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeIssuesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeIssuesDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeIssuesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeIssuesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeIssuesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeIssuesPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeIssuesPartialUpdate(ctx context.Context, id int, body SonarqubeIssuesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeIssuesPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeIssuesPartialUpdateWithFormdataBody(ctx context.Context, id int, body SonarqubeIssuesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeIssuesPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeIssuesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeIssuesUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeIssuesUpdate(ctx context.Context, id int, body SonarqubeIssuesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeIssuesUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeIssuesUpdateWithFormdataBody(ctx context.Context, id int, body SonarqubeIssuesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeIssuesUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeTransitionsList(ctx context.Context, params *SonarqubeTransitionsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeTransitionsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeTransitionsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeTransitionsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeTransitionsCreate(ctx context.Context, body SonarqubeTransitionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeTransitionsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeTransitionsCreateWithFormdataBody(ctx context.Context, body SonarqubeTransitionsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeTransitionsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeTransitionsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeTransitionsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeTransitionsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeTransitionsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeTransitionsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeTransitionsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeTransitionsPartialUpdate(ctx context.Context, id int, body SonarqubeTransitionsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeTransitionsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeTransitionsPartialUpdateWithFormdataBody(ctx context.Context, id int, body SonarqubeTransitionsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeTransitionsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeTransitionsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeTransitionsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeTransitionsUpdate(ctx context.Context, id int, body SonarqubeTransitionsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeTransitionsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeTransitionsUpdateWithFormdataBody(ctx context.Context, id int, body SonarqubeTransitionsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeTransitionsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StubFindingsList(ctx context.Context, params *StubFindingsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStubFindingsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StubFindingsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStubFindingsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StubFindingsCreate(ctx context.Context, body StubFindingsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStubFindingsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StubFindingsCreateWithFormdataBody(ctx context.Context, body StubFindingsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStubFindingsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StubFindingsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStubFindingsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StubFindingsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStubFindingsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StubFindingsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStubFindingsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StubFindingsPartialUpdate(ctx context.Context, id int, body StubFindingsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStubFindingsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StubFindingsPartialUpdateWithFormdataBody(ctx context.Context, id int, body StubFindingsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStubFindingsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StubFindingsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStubFindingsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StubFindingsUpdate(ctx context.Context, id int, body StubFindingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStubFindingsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StubFindingsUpdateWithFormdataBody(ctx context.Context, id int, body StubFindingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStubFindingsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SystemSettingsList(ctx context.Context, params *SystemSettingsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSystemSettingsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SystemSettingsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSystemSettingsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SystemSettingsPartialUpdate(ctx context.Context, id int, body SystemSettingsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSystemSettingsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SystemSettingsPartialUpdateWithFormdataBody(ctx context.Context, id int, body SystemSettingsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSystemSettingsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SystemSettingsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSystemSettingsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SystemSettingsUpdate(ctx context.Context, id int, body SystemSettingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSystemSettingsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SystemSettingsUpdateWithFormdataBody(ctx context.Context, id int, body SystemSettingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSystemSettingsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TechnologiesList(ctx context.Context, params *TechnologiesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTechnologiesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TechnologiesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTechnologiesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TechnologiesCreate(ctx context.Context, body TechnologiesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTechnologiesCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TechnologiesCreateWithFormdataBody(ctx context.Context, body TechnologiesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTechnologiesCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TechnologiesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTechnologiesDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TechnologiesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTechnologiesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TechnologiesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTechnologiesPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TechnologiesPartialUpdate(ctx context.Context, id int, body TechnologiesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTechnologiesPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TechnologiesPartialUpdateWithFormdataBody(ctx context.Context, id int, body TechnologiesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTechnologiesPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TechnologiesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTechnologiesUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TechnologiesUpdate(ctx context.Context, id int, body TechnologiesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTechnologiesUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TechnologiesUpdateWithFormdataBody(ctx context.Context, id int, body TechnologiesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTechnologiesUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestImportsList(ctx context.Context, params *TestImportsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestImportsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestImportsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestImportsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestImportsCreate(ctx context.Context, body TestImportsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestImportsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestImportsCreateWithFormdataBody(ctx context.Context, body TestImportsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestImportsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestImportsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestImportsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestImportsRetrieve(ctx context.Context, id int, params *TestImportsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestImportsRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestImportsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestImportsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestImportsPartialUpdate(ctx context.Context, id int, body TestImportsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestImportsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestImportsPartialUpdateWithFormdataBody(ctx context.Context, id int, body TestImportsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestImportsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestImportsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestImportsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestImportsUpdate(ctx context.Context, id int, body TestImportsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestImportsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestImportsUpdateWithFormdataBody(ctx context.Context, id int, body TestImportsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestImportsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestTypesList(ctx context.Context, params *TestTypesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestTypesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestTypesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestTypesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestTypesCreate(ctx context.Context, body TestTypesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestTypesCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestTypesCreateWithFormdataBody(ctx context.Context, body TestTypesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestTypesCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestTypesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestTypesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestTypesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestTypesPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestTypesPartialUpdate(ctx context.Context, id int, body TestTypesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestTypesPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestTypesPartialUpdateWithFormdataBody(ctx context.Context, id int, body TestTypesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestTypesPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestTypesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestTypesUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestTypesUpdate(ctx context.Context, id int, body TestTypesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestTypesUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestTypesUpdateWithFormdataBody(ctx context.Context, id int, body TestTypesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestTypesUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsList(ctx context.Context, params *TestsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsCreate(ctx context.Context, body TestsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsCreateWithFormdataBody(ctx context.Context, body TestsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsPartialUpdate(ctx context.Context, id int, body TestsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsPartialUpdateWithFormdataBody(ctx context.Context, id int, body TestsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsUpdate(ctx context.Context, id int, body TestsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsUpdateWithFormdataBody(ctx context.Context, id int, body TestsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsAcceptRisksCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsAcceptRisksCreateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsAcceptRisksCreate(ctx context.Context, id int, body TestsAcceptRisksCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsAcceptRisksCreateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsAcceptRisksCreateWithFormdataBody(ctx context.Context, id int, body TestsAcceptRisksCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsAcceptRisksCreateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsFilesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsFilesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsFilesCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsFilesCreateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsGenerateReportCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsGenerateReportCreateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsGenerateReportCreate(ctx context.Context, id int, body TestsGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsGenerateReportCreateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsGenerateReportCreateWithFormdataBody(ctx context.Context, id int, body TestsGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsGenerateReportCreateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsNotesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsNotesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsNotesCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsNotesCreateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsNotesCreate(ctx context.Context, id int, body TestsNotesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsNotesCreateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsNotesCreateWithFormdataBody(ctx context.Context, id int, body TestsNotesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsNotesCreateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolConfigurationsList(ctx context.Context, params *ToolConfigurationsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolConfigurationsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolConfigurationsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolConfigurationsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolConfigurationsCreate(ctx context.Context, body ToolConfigurationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolConfigurationsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolConfigurationsCreateWithFormdataBody(ctx context.Context, body ToolConfigurationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolConfigurationsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolConfigurationsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolConfigurationsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolConfigurationsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolConfigurationsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolConfigurationsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolConfigurationsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolConfigurationsPartialUpdate(ctx context.Context, id int, body ToolConfigurationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolConfigurationsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolConfigurationsPartialUpdateWithFormdataBody(ctx context.Context, id int, body ToolConfigurationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolConfigurationsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolConfigurationsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolConfigurationsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolConfigurationsUpdate(ctx context.Context, id int, body ToolConfigurationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolConfigurationsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolConfigurationsUpdateWithFormdataBody(ctx context.Context, id int, body ToolConfigurationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolConfigurationsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolProductSettingsList(ctx context.Context, params *ToolProductSettingsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolProductSettingsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolProductSettingsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolProductSettingsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolProductSettingsCreate(ctx context.Context, body ToolProductSettingsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolProductSettingsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolProductSettingsCreateWithFormdataBody(ctx context.Context, body ToolProductSettingsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolProductSettingsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolProductSettingsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolProductSettingsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolProductSettingsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolProductSettingsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolProductSettingsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolProductSettingsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolProductSettingsPartialUpdate(ctx context.Context, id int, body ToolProductSettingsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolProductSettingsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolProductSettingsPartialUpdateWithFormdataBody(ctx context.Context, id int, body ToolProductSettingsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolProductSettingsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolProductSettingsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolProductSettingsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolProductSettingsUpdate(ctx context.Context, id int, body ToolProductSettingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolProductSettingsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolProductSettingsUpdateWithFormdataBody(ctx context.Context, id int, body ToolProductSettingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolProductSettingsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolTypesList(ctx context.Context, params *ToolTypesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolTypesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolTypesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolTypesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolTypesCreate(ctx context.Context, body ToolTypesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolTypesCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolTypesCreateWithFormdataBody(ctx context.Context, body ToolTypesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolTypesCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolTypesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolTypesDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolTypesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolTypesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolTypesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolTypesPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolTypesPartialUpdate(ctx context.Context, id int, body ToolTypesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolTypesPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolTypesPartialUpdateWithFormdataBody(ctx context.Context, id int, body ToolTypesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolTypesPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolTypesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolTypesUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolTypesUpdate(ctx context.Context, id int, body ToolTypesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolTypesUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolTypesUpdateWithFormdataBody(ctx context.Context, id int, body ToolTypesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolTypesUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserContactInfosList(ctx context.Context, params *UserContactInfosListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserContactInfosListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserContactInfosCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserContactInfosCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserContactInfosCreate(ctx context.Context, body UserContactInfosCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserContactInfosCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserContactInfosCreateWithFormdataBody(ctx context.Context, body UserContactInfosCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserContactInfosCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserContactInfosDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserContactInfosDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserContactInfosRetrieve(ctx context.Context, id int, params *UserContactInfosRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserContactInfosRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserContactInfosPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserContactInfosPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserContactInfosPartialUpdate(ctx context.Context, id int, body UserContactInfosPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserContactInfosPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserContactInfosPartialUpdateWithFormdataBody(ctx context.Context, id int, body UserContactInfosPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserContactInfosPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserContactInfosUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserContactInfosUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserContactInfosUpdate(ctx context.Context, id int, body UserContactInfosUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserContactInfosUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserContactInfosUpdateWithFormdataBody(ctx context.Context, id int, body UserContactInfosUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserContactInfosUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserProfileRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserProfileRetrieveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersList(ctx context.Context, params *UsersListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersCreate(ctx context.Context, body UsersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersCreateWithFormdataBody(ctx context.Context, body UsersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersPartialUpdate(ctx context.Context, id int, body UsersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersPartialUpdateWithFormdataBody(ctx context.Context, id int, body UsersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUpdate(ctx context.Context, id int, body UsersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUpdateWithFormdataBody(ctx context.Context, id int, body UsersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewApiTokenAuthCreateRequest calls the generic ApiTokenAuthCreate builder with application/json body
func NewApiTokenAuthCreateRequest(server string, body ApiTokenAuthCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApiTokenAuthCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewApiTokenAuthCreateRequestWithFormdataBody calls the generic ApiTokenAuthCreate builder with application/x-www-form-urlencoded body
func NewApiTokenAuthCreateRequestWithFormdataBody(server string, body ApiTokenAuthCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewApiTokenAuthCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewApiTokenAuthCreateRequestWithBody generates requests for ApiTokenAuthCreate with any type of body
func NewApiTokenAuthCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/api-token-auth/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDevelopmentEnvironmentsListRequest generates requests for DevelopmentEnvironmentsList
func NewDevelopmentEnvironmentsListRequest(server string, params *DevelopmentEnvironmentsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/development_environments/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDevelopmentEnvironmentsCreateRequest calls the generic DevelopmentEnvironmentsCreate builder with application/json body
func NewDevelopmentEnvironmentsCreateRequest(server string, body DevelopmentEnvironmentsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDevelopmentEnvironmentsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewDevelopmentEnvironmentsCreateRequestWithFormdataBody calls the generic DevelopmentEnvironmentsCreate builder with application/x-www-form-urlencoded body
func NewDevelopmentEnvironmentsCreateRequestWithFormdataBody(server string, body DevelopmentEnvironmentsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDevelopmentEnvironmentsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewDevelopmentEnvironmentsCreateRequestWithBody generates requests for DevelopmentEnvironmentsCreate with any type of body
func NewDevelopmentEnvironmentsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/development_environments/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDevelopmentEnvironmentsDestroyRequest generates requests for DevelopmentEnvironmentsDestroy
func NewDevelopmentEnvironmentsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/development_environments/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDevelopmentEnvironmentsRetrieveRequest generates requests for DevelopmentEnvironmentsRetrieve
func NewDevelopmentEnvironmentsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/development_environments/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDevelopmentEnvironmentsPartialUpdateRequest calls the generic DevelopmentEnvironmentsPartialUpdate builder with application/json body
func NewDevelopmentEnvironmentsPartialUpdateRequest(server string, id int, body DevelopmentEnvironmentsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDevelopmentEnvironmentsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDevelopmentEnvironmentsPartialUpdateRequestWithFormdataBody calls the generic DevelopmentEnvironmentsPartialUpdate builder with application/x-www-form-urlencoded body
func NewDevelopmentEnvironmentsPartialUpdateRequestWithFormdataBody(server string, id int, body DevelopmentEnvironmentsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDevelopmentEnvironmentsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewDevelopmentEnvironmentsPartialUpdateRequestWithBody generates requests for DevelopmentEnvironmentsPartialUpdate with any type of body
func NewDevelopmentEnvironmentsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/development_environments/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDevelopmentEnvironmentsUpdateRequest calls the generic DevelopmentEnvironmentsUpdate builder with application/json body
func NewDevelopmentEnvironmentsUpdateRequest(server string, id int, body DevelopmentEnvironmentsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDevelopmentEnvironmentsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDevelopmentEnvironmentsUpdateRequestWithFormdataBody calls the generic DevelopmentEnvironmentsUpdate builder with application/x-www-form-urlencoded body
func NewDevelopmentEnvironmentsUpdateRequestWithFormdataBody(server string, id int, body DevelopmentEnvironmentsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDevelopmentEnvironmentsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewDevelopmentEnvironmentsUpdateRequestWithBody generates requests for DevelopmentEnvironmentsUpdate with any type of body
func NewDevelopmentEnvironmentsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/development_environments/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDojoGroupMembersListRequest generates requests for DojoGroupMembersList
func NewDojoGroupMembersListRequest(server string, params *DojoGroupMembersListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/dojo_group_members/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.GroupId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "group_id", runtime.ParamLocationQuery, *params.GroupId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_id", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDojoGroupMembersCreateRequest calls the generic DojoGroupMembersCreate builder with application/json body
func NewDojoGroupMembersCreateRequest(server string, body DojoGroupMembersCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDojoGroupMembersCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewDojoGroupMembersCreateRequestWithFormdataBody calls the generic DojoGroupMembersCreate builder with application/x-www-form-urlencoded body
func NewDojoGroupMembersCreateRequestWithFormdataBody(server string, body DojoGroupMembersCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDojoGroupMembersCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewDojoGroupMembersCreateRequestWithBody generates requests for DojoGroupMembersCreate with any type of body
func NewDojoGroupMembersCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/dojo_group_members/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDojoGroupMembersDestroyRequest generates requests for DojoGroupMembersDestroy
func NewDojoGroupMembersDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/dojo_group_members/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDojoGroupMembersRetrieveRequest generates requests for DojoGroupMembersRetrieve
func NewDojoGroupMembersRetrieveRequest(server string, id int, params *DojoGroupMembersRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/dojo_group_members/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDojoGroupMembersPartialUpdateRequest calls the generic DojoGroupMembersPartialUpdate builder with application/json body
func NewDojoGroupMembersPartialUpdateRequest(server string, id int, body DojoGroupMembersPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDojoGroupMembersPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDojoGroupMembersPartialUpdateRequestWithFormdataBody calls the generic DojoGroupMembersPartialUpdate builder with application/x-www-form-urlencoded body
func NewDojoGroupMembersPartialUpdateRequestWithFormdataBody(server string, id int, body DojoGroupMembersPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDojoGroupMembersPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewDojoGroupMembersPartialUpdateRequestWithBody generates requests for DojoGroupMembersPartialUpdate with any type of body
func NewDojoGroupMembersPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/dojo_group_members/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDojoGroupMembersUpdateRequest calls the generic DojoGroupMembersUpdate builder with application/json body
func NewDojoGroupMembersUpdateRequest(server string, id int, body DojoGroupMembersUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDojoGroupMembersUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDojoGroupMembersUpdateRequestWithFormdataBody calls the generic DojoGroupMembersUpdate builder with application/x-www-form-urlencoded body
func NewDojoGroupMembersUpdateRequestWithFormdataBody(server string, id int, body DojoGroupMembersUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDojoGroupMembersUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewDojoGroupMembersUpdateRequestWithBody generates requests for DojoGroupMembersUpdate with any type of body
func NewDojoGroupMembersUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/dojo_group_members/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDojoGroupsListRequest generates requests for DojoGroupsList
func NewDojoGroupsListRequest(server string, params *DojoGroupsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/dojo_groups/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDojoGroupsCreateRequest calls the generic DojoGroupsCreate builder with application/json body
func NewDojoGroupsCreateRequest(server string, body DojoGroupsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDojoGroupsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewDojoGroupsCreateRequestWithFormdataBody calls the generic DojoGroupsCreate builder with application/x-www-form-urlencoded body
func NewDojoGroupsCreateRequestWithFormdataBody(server string, body DojoGroupsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDojoGroupsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewDojoGroupsCreateRequestWithBody generates requests for DojoGroupsCreate with any type of body
func NewDojoGroupsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/dojo_groups/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDojoGroupsDestroyRequest generates requests for DojoGroupsDestroy
func NewDojoGroupsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/dojo_groups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDojoGroupsRetrieveRequest generates requests for DojoGroupsRetrieve
func NewDojoGroupsRetrieveRequest(server string, id int, params *DojoGroupsRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/dojo_groups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDojoGroupsPartialUpdateRequest calls the generic DojoGroupsPartialUpdate builder with application/json body
func NewDojoGroupsPartialUpdateRequest(server string, id int, body DojoGroupsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDojoGroupsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDojoGroupsPartialUpdateRequestWithFormdataBody calls the generic DojoGroupsPartialUpdate builder with application/x-www-form-urlencoded body
func NewDojoGroupsPartialUpdateRequestWithFormdataBody(server string, id int, body DojoGroupsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDojoGroupsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewDojoGroupsPartialUpdateRequestWithBody generates requests for DojoGroupsPartialUpdate with any type of body
func NewDojoGroupsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/dojo_groups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDojoGroupsUpdateRequest calls the generic DojoGroupsUpdate builder with application/json body
func NewDojoGroupsUpdateRequest(server string, id int, body DojoGroupsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDojoGroupsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDojoGroupsUpdateRequestWithFormdataBody calls the generic DojoGroupsUpdate builder with application/x-www-form-urlencoded body
func NewDojoGroupsUpdateRequestWithFormdataBody(server string, id int, body DojoGroupsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDojoGroupsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewDojoGroupsUpdateRequestWithBody generates requests for DojoGroupsUpdate with any type of body
func NewDojoGroupsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/dojo_groups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEndpointMetaImportCreateRequestWithBody generates requests for EndpointMetaImportCreate with any type of body
func NewEndpointMetaImportCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/endpoint_meta_import/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEndpointStatusListRequest generates requests for EndpointStatusList
func NewEndpointStatusListRequest(server string, params *EndpointStatusListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/endpoint_status/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Endpoint != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endpoint", runtime.ParamLocationQuery, *params.Endpoint); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FalsePositive != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "false_positive", runtime.ParamLocationQuery, *params.FalsePositive); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Finding != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "finding", runtime.ParamLocationQuery, *params.Finding); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Mitigated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mitigated", runtime.ParamLocationQuery, *params.Mitigated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MitigatedBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mitigated_by", runtime.ParamLocationQuery, *params.MitigatedBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OutOfScope != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "out_of_scope", runtime.ParamLocationQuery, *params.OutOfScope); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RiskAccepted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "risk_accepted", runtime.ParamLocationQuery, *params.RiskAccepted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEndpointStatusCreateRequest calls the generic EndpointStatusCreate builder with application/json body
func NewEndpointStatusCreateRequest(server string, body EndpointStatusCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEndpointStatusCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewEndpointStatusCreateRequestWithFormdataBody calls the generic EndpointStatusCreate builder with application/x-www-form-urlencoded body
func NewEndpointStatusCreateRequestWithFormdataBody(server string, body EndpointStatusCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewEndpointStatusCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewEndpointStatusCreateRequestWithBody generates requests for EndpointStatusCreate with any type of body
func NewEndpointStatusCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/endpoint_status/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEndpointStatusDestroyRequest generates requests for EndpointStatusDestroy
func NewEndpointStatusDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/endpoint_status/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEndpointStatusRetrieveRequest generates requests for EndpointStatusRetrieve
func NewEndpointStatusRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/endpoint_status/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEndpointStatusPartialUpdateRequest calls the generic EndpointStatusPartialUpdate builder with application/json body
func NewEndpointStatusPartialUpdateRequest(server string, id int, body EndpointStatusPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEndpointStatusPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewEndpointStatusPartialUpdateRequestWithFormdataBody calls the generic EndpointStatusPartialUpdate builder with application/x-www-form-urlencoded body
func NewEndpointStatusPartialUpdateRequestWithFormdataBody(server string, id int, body EndpointStatusPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewEndpointStatusPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewEndpointStatusPartialUpdateRequestWithBody generates requests for EndpointStatusPartialUpdate with any type of body
func NewEndpointStatusPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/endpoint_status/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEndpointStatusUpdateRequest calls the generic EndpointStatusUpdate builder with application/json body
func NewEndpointStatusUpdateRequest(server string, id int, body EndpointStatusUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEndpointStatusUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewEndpointStatusUpdateRequestWithFormdataBody calls the generic EndpointStatusUpdate builder with application/x-www-form-urlencoded body
func NewEndpointStatusUpdateRequestWithFormdataBody(server string, id int, body EndpointStatusUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewEndpointStatusUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewEndpointStatusUpdateRequestWithBody generates requests for EndpointStatusUpdate with any type of body
func NewEndpointStatusUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/endpoint_status/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEndpointsListRequest generates requests for EndpointsList
func NewEndpointsListRequest(server string, params *EndpointsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/endpoints/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Host != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "host", runtime.ParamLocationQuery, *params.Host); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotTag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_tag", runtime.ParamLocationQuery, *params.NotTag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_tags", runtime.ParamLocationQuery, *params.NotTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.O != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "o", runtime.ParamLocationQuery, *params.O); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Product != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product", runtime.ParamLocationQuery, *params.Product); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEndpointsCreateRequest calls the generic EndpointsCreate builder with application/json body
func NewEndpointsCreateRequest(server string, body EndpointsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEndpointsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewEndpointsCreateRequestWithFormdataBody calls the generic EndpointsCreate builder with application/x-www-form-urlencoded body
func NewEndpointsCreateRequestWithFormdataBody(server string, body EndpointsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewEndpointsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewEndpointsCreateRequestWithBody generates requests for EndpointsCreate with any type of body
func NewEndpointsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/endpoints/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEndpointsDestroyRequest generates requests for EndpointsDestroy
func NewEndpointsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/endpoints/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEndpointsRetrieveRequest generates requests for EndpointsRetrieve
func NewEndpointsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/endpoints/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEndpointsPartialUpdateRequest calls the generic EndpointsPartialUpdate builder with application/json body
func NewEndpointsPartialUpdateRequest(server string, id int, body EndpointsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEndpointsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewEndpointsPartialUpdateRequestWithFormdataBody calls the generic EndpointsPartialUpdate builder with application/x-www-form-urlencoded body
func NewEndpointsPartialUpdateRequestWithFormdataBody(server string, id int, body EndpointsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewEndpointsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewEndpointsPartialUpdateRequestWithBody generates requests for EndpointsPartialUpdate with any type of body
func NewEndpointsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/endpoints/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEndpointsUpdateRequest calls the generic EndpointsUpdate builder with application/json body
func NewEndpointsUpdateRequest(server string, id int, body EndpointsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEndpointsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewEndpointsUpdateRequestWithFormdataBody calls the generic EndpointsUpdate builder with application/x-www-form-urlencoded body
func NewEndpointsUpdateRequestWithFormdataBody(server string, id int, body EndpointsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewEndpointsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewEndpointsUpdateRequestWithBody generates requests for EndpointsUpdate with any type of body
func NewEndpointsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/endpoints/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEndpointsGenerateReportCreateRequest calls the generic EndpointsGenerateReportCreate builder with application/json body
func NewEndpointsGenerateReportCreateRequest(server string, id int, body EndpointsGenerateReportCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEndpointsGenerateReportCreateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewEndpointsGenerateReportCreateRequestWithFormdataBody calls the generic EndpointsGenerateReportCreate builder with application/x-www-form-urlencoded body
func NewEndpointsGenerateReportCreateRequestWithFormdataBody(server string, id int, body EndpointsGenerateReportCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewEndpointsGenerateReportCreateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewEndpointsGenerateReportCreateRequestWithBody generates requests for EndpointsGenerateReportCreate with any type of body
func NewEndpointsGenerateReportCreateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/endpoints/%s/generate_report/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEngagementPresetsListRequest generates requests for EngagementPresetsList
func NewEngagementPresetsListRequest(server string, params *EngagementPresetsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/engagement_presets/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Product != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product", runtime.ParamLocationQuery, *params.Product); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Title != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "title", runtime.ParamLocationQuery, *params.Title); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEngagementPresetsCreateRequest calls the generic EngagementPresetsCreate builder with application/json body
func NewEngagementPresetsCreateRequest(server string, body EngagementPresetsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEngagementPresetsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewEngagementPresetsCreateRequestWithFormdataBody calls the generic EngagementPresetsCreate builder with application/x-www-form-urlencoded body
func NewEngagementPresetsCreateRequestWithFormdataBody(server string, body EngagementPresetsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewEngagementPresetsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewEngagementPresetsCreateRequestWithBody generates requests for EngagementPresetsCreate with any type of body
func NewEngagementPresetsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/engagement_presets/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEngagementPresetsDestroyRequest generates requests for EngagementPresetsDestroy
func NewEngagementPresetsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/engagement_presets/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEngagementPresetsRetrieveRequest generates requests for EngagementPresetsRetrieve
func NewEngagementPresetsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/engagement_presets/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEngagementPresetsPartialUpdateRequest calls the generic EngagementPresetsPartialUpdate builder with application/json body
func NewEngagementPresetsPartialUpdateRequest(server string, id int, body EngagementPresetsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEngagementPresetsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewEngagementPresetsPartialUpdateRequestWithFormdataBody calls the generic EngagementPresetsPartialUpdate builder with application/x-www-form-urlencoded body
func NewEngagementPresetsPartialUpdateRequestWithFormdataBody(server string, id int, body EngagementPresetsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewEngagementPresetsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewEngagementPresetsPartialUpdateRequestWithBody generates requests for EngagementPresetsPartialUpdate with any type of body
func NewEngagementPresetsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/engagement_presets/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEngagementPresetsUpdateRequest calls the generic EngagementPresetsUpdate builder with application/json body
func NewEngagementPresetsUpdateRequest(server string, id int, body EngagementPresetsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEngagementPresetsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewEngagementPresetsUpdateRequestWithFormdataBody calls the generic EngagementPresetsUpdate builder with application/x-www-form-urlencoded body
func NewEngagementPresetsUpdateRequestWithFormdataBody(server string, id int, body EngagementPresetsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewEngagementPresetsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewEngagementPresetsUpdateRequestWithBody generates requests for EngagementPresetsUpdate with any type of body
func NewEngagementPresetsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/engagement_presets/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEngagementsListRequest generates requests for EngagementsList
func NewEngagementsListRequest(server string, params *EngagementsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/engagements/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Active != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "active", runtime.ParamLocationQuery, *params.Active); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApiTest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api_test", runtime.ParamLocationQuery, *params.ApiTest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotProductTagsName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_product__tags__name", runtime.ParamLocationQuery, *params.NotProductTagsName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotTag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_tag", runtime.ParamLocationQuery, *params.NotTag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_tags", runtime.ParamLocationQuery, *params.NotTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.O != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "o", runtime.ParamLocationQuery, *params.O); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PenTest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pen_test", runtime.ParamLocationQuery, *params.PenTest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Product != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product", runtime.ParamLocationQuery, *params.Product); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProductProdType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "product__prod_type", runtime.ParamLocationQuery, *params.ProductProdType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProductTagsName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "product__tags__name", runtime.ParamLocationQuery, *params.ProductTagsName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReportType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "report_type", runtime.ParamLocationQuery, *params.ReportType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Requester != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "requester", runtime.ParamLocationQuery, *params.Requester); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TargetEnd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "target_end", runtime.ParamLocationQuery, *params.TargetEnd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TargetStart != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "target_start", runtime.ParamLocationQuery, *params.TargetStart); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ThreatModel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "threat_model", runtime.ParamLocationQuery, *params.ThreatModel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Updated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated", runtime.ParamLocationQuery, *params.Updated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEngagementsCreateRequest calls the generic EngagementsCreate builder with application/json body
func NewEngagementsCreateRequest(server string, body EngagementsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEngagementsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewEngagementsCreateRequestWithFormdataBody calls the generic EngagementsCreate builder with application/x-www-form-urlencoded body
func NewEngagementsCreateRequestWithFormdataBody(server string, body EngagementsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewEngagementsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewEngagementsCreateRequestWithBody generates requests for EngagementsCreate with any type of body
func NewEngagementsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/engagements/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEngagementsDestroyRequest generates requests for EngagementsDestroy
func NewEngagementsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/engagements/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEngagementsRetrieveRequest generates requests for EngagementsRetrieve
func NewEngagementsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/engagements/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEngagementsPartialUpdateRequest calls the generic EngagementsPartialUpdate builder with application/json body
func NewEngagementsPartialUpdateRequest(server string, id int, body EngagementsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEngagementsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewEngagementsPartialUpdateRequestWithFormdataBody calls the generic EngagementsPartialUpdate builder with application/x-www-form-urlencoded body
func NewEngagementsPartialUpdateRequestWithFormdataBody(server string, id int, body EngagementsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewEngagementsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewEngagementsPartialUpdateRequestWithBody generates requests for EngagementsPartialUpdate with any type of body
func NewEngagementsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/engagements/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEngagementsUpdateRequest calls the generic EngagementsUpdate builder with application/json body
func NewEngagementsUpdateRequest(server string, id int, body EngagementsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEngagementsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewEngagementsUpdateRequestWithFormdataBody calls the generic EngagementsUpdate builder with application/x-www-form-urlencoded body
func NewEngagementsUpdateRequestWithFormdataBody(server string, id int, body EngagementsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewEngagementsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewEngagementsUpdateRequestWithBody generates requests for EngagementsUpdate with any type of body
func NewEngagementsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/engagements/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEngagementsAcceptRisksCreateRequest calls the generic EngagementsAcceptRisksCreate builder with application/json body
func NewEngagementsAcceptRisksCreateRequest(server string, id int, body EngagementsAcceptRisksCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEngagementsAcceptRisksCreateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewEngagementsAcceptRisksCreateRequestWithFormdataBody calls the generic EngagementsAcceptRisksCreate builder with application/x-www-form-urlencoded body
func NewEngagementsAcceptRisksCreateRequestWithFormdataBody(server string, id int, body EngagementsAcceptRisksCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewEngagementsAcceptRisksCreateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewEngagementsAcceptRisksCreateRequestWithBody generates requests for EngagementsAcceptRisksCreate with any type of body
func NewEngagementsAcceptRisksCreateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/engagements/%s/accept_risks/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEngagementsCloseCreateRequest generates requests for EngagementsCloseCreate
func NewEngagementsCloseCreateRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/engagements/%s/close/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEngagementsFilesRetrieveRequest generates requests for EngagementsFilesRetrieve
func NewEngagementsFilesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/engagements/%s/files/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEngagementsFilesCreateRequestWithBody generates requests for EngagementsFilesCreate with any type of body
func NewEngagementsFilesCreateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/engagements/%s/files/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEngagementsGenerateReportCreateRequest calls the generic EngagementsGenerateReportCreate builder with application/json body
func NewEngagementsGenerateReportCreateRequest(server string, id int, body EngagementsGenerateReportCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEngagementsGenerateReportCreateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewEngagementsGenerateReportCreateRequestWithFormdataBody calls the generic EngagementsGenerateReportCreate builder with application/x-www-form-urlencoded body
func NewEngagementsGenerateReportCreateRequestWithFormdataBody(server string, id int, body EngagementsGenerateReportCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewEngagementsGenerateReportCreateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewEngagementsGenerateReportCreateRequestWithBody generates requests for EngagementsGenerateReportCreate with any type of body
func NewEngagementsGenerateReportCreateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/engagements/%s/generate_report/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEngagementsNotesRetrieveRequest generates requests for EngagementsNotesRetrieve
func NewEngagementsNotesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/engagements/%s/notes/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEngagementsNotesCreateRequest calls the generic EngagementsNotesCreate builder with application/json body
func NewEngagementsNotesCreateRequest(server string, id int, body EngagementsNotesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEngagementsNotesCreateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewEngagementsNotesCreateRequestWithFormdataBody calls the generic EngagementsNotesCreate builder with application/x-www-form-urlencoded body
func NewEngagementsNotesCreateRequestWithFormdataBody(server string, id int, body EngagementsNotesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewEngagementsNotesCreateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewEngagementsNotesCreateRequestWithBody generates requests for EngagementsNotesCreate with any type of body
func NewEngagementsNotesCreateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/engagements/%s/notes/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEngagementsReopenCreateRequest generates requests for EngagementsReopenCreate
func NewEngagementsReopenCreateRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/engagements/%s/reopen/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindingTemplatesListRequest generates requests for FindingTemplatesList
func NewFindingTemplatesListRequest(server string, params *FindingTemplatesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/finding_templates/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cwe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cwe", runtime.ParamLocationQuery, *params.Cwe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Mitigation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mitigation", runtime.ParamLocationQuery, *params.Mitigation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotTag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_tag", runtime.ParamLocationQuery, *params.NotTag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_tags", runtime.ParamLocationQuery, *params.NotTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.O != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "o", runtime.ParamLocationQuery, *params.O); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Severity != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "severity", runtime.ParamLocationQuery, *params.Severity); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Title != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "title", runtime.ParamLocationQuery, *params.Title); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindingTemplatesCreateRequest calls the generic FindingTemplatesCreate builder with application/json body
func NewFindingTemplatesCreateRequest(server string, body FindingTemplatesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFindingTemplatesCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewFindingTemplatesCreateRequestWithFormdataBody calls the generic FindingTemplatesCreate builder with application/x-www-form-urlencoded body
func NewFindingTemplatesCreateRequestWithFormdataBody(server string, body FindingTemplatesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewFindingTemplatesCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewFindingTemplatesCreateRequestWithBody generates requests for FindingTemplatesCreate with any type of body
func NewFindingTemplatesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/finding_templates/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindingTemplatesDestroyRequest generates requests for FindingTemplatesDestroy
func NewFindingTemplatesDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/finding_templates/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindingTemplatesRetrieveRequest generates requests for FindingTemplatesRetrieve
func NewFindingTemplatesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/finding_templates/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindingTemplatesPartialUpdateRequest calls the generic FindingTemplatesPartialUpdate builder with application/json body
func NewFindingTemplatesPartialUpdateRequest(server string, id int, body FindingTemplatesPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFindingTemplatesPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewFindingTemplatesPartialUpdateRequestWithFormdataBody calls the generic FindingTemplatesPartialUpdate builder with application/x-www-form-urlencoded body
func NewFindingTemplatesPartialUpdateRequestWithFormdataBody(server string, id int, body FindingTemplatesPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewFindingTemplatesPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewFindingTemplatesPartialUpdateRequestWithBody generates requests for FindingTemplatesPartialUpdate with any type of body
func NewFindingTemplatesPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/finding_templates/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindingTemplatesUpdateRequest calls the generic FindingTemplatesUpdate builder with application/json body
func NewFindingTemplatesUpdateRequest(server string, id int, body FindingTemplatesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFindingTemplatesUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewFindingTemplatesUpdateRequestWithFormdataBody calls the generic FindingTemplatesUpdate builder with application/x-www-form-urlencoded body
func NewFindingTemplatesUpdateRequestWithFormdataBody(server string, id int, body FindingTemplatesUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewFindingTemplatesUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewFindingTemplatesUpdateRequestWithBody generates requests for FindingTemplatesUpdate with any type of body
func NewFindingTemplatesUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/finding_templates/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindingsListRequest generates requests for FindingsList
func NewFindingsListRequest(server string, params *FindingsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Active != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "active", runtime.ParamLocationQuery, *params.Active); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ComponentName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "component_name", runtime.ParamLocationQuery, *params.ComponentName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ComponentVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "component_version", runtime.ParamLocationQuery, *params.ComponentVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Created != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created", runtime.ParamLocationQuery, *params.Created); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cve != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cve", runtime.ParamLocationQuery, *params.Cve); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cvssv3 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cvssv3", runtime.ParamLocationQuery, *params.Cvssv3); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cvssv3Score != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cvssv3_score", runtime.ParamLocationQuery, *params.Cvssv3Score); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cwe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "cwe", runtime.ParamLocationQuery, *params.Cwe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Date != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DefectReviewRequestedBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "defect_review_requested_by", runtime.ParamLocationQuery, *params.DefectReviewRequestedBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Duplicate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "duplicate", runtime.ParamLocationQuery, *params.Duplicate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DuplicateFinding != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "duplicate_finding", runtime.ParamLocationQuery, *params.DuplicateFinding); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DynamicFinding != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dynamic_finding", runtime.ParamLocationQuery, *params.DynamicFinding); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Endpoints != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "endpoints", runtime.ParamLocationQuery, *params.Endpoints); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FalseP != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "false_p", runtime.ParamLocationQuery, *params.FalseP); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilePath != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_path", runtime.ParamLocationQuery, *params.FilePath); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FindingGroup != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "finding_group", runtime.ParamLocationQuery, *params.FindingGroup); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FoundBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "found_by", runtime.ParamLocationQuery, *params.FoundBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HashCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hash_code", runtime.ParamLocationQuery, *params.HashCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Impact != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "impact", runtime.ParamLocationQuery, *params.Impact); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsMitigated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_mitigated", runtime.ParamLocationQuery, *params.IsMitigated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.JiraChange != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "jira_change", runtime.ParamLocationQuery, *params.JiraChange); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.JiraCreation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "jira_creation", runtime.ParamLocationQuery, *params.JiraCreation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastReviewed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_reviewed", runtime.ParamLocationQuery, *params.LastReviewed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastReviewedBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "last_reviewed_by", runtime.ParamLocationQuery, *params.LastReviewedBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastStatusUpdate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_status_update", runtime.ParamLocationQuery, *params.LastStatusUpdate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Mitigated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mitigated", runtime.ParamLocationQuery, *params.Mitigated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MitigatedBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "mitigated_by", runtime.ParamLocationQuery, *params.MitigatedBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Mitigation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mitigation", runtime.ParamLocationQuery, *params.Mitigation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NbOccurences != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "nb_occurences", runtime.ParamLocationQuery, *params.NbOccurences); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotTag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_tag", runtime.ParamLocationQuery, *params.NotTag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_tags", runtime.ParamLocationQuery, *params.NotTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotTestEngagementProductTagsName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_test__engagement__product__tags__name", runtime.ParamLocationQuery, *params.NotTestEngagementProductTagsName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotTestEngagementTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_test__engagement__tags", runtime.ParamLocationQuery, *params.NotTestEngagementTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotTestTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_test__tags", runtime.ParamLocationQuery, *params.NotTestTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NumericalSeverity != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "numerical_severity", runtime.ParamLocationQuery, *params.NumericalSeverity); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.O != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "o", runtime.ParamLocationQuery, *params.O); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OutOfScope != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "out_of_scope", runtime.ParamLocationQuery, *params.OutOfScope); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Param != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "param", runtime.ParamLocationQuery, *params.Param); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Payload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "payload", runtime.ParamLocationQuery, *params.Payload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PublishDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "publish_date", runtime.ParamLocationQuery, *params.PublishDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.References != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "references", runtime.ParamLocationQuery, *params.References); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RelatedFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "related_fields", runtime.ParamLocationQuery, *params.RelatedFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Reporter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "reporter", runtime.ParamLocationQuery, *params.Reporter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReviewRequestedBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "review_requested_by", runtime.ParamLocationQuery, *params.ReviewRequestedBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Reviewers != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "reviewers", runtime.ParamLocationQuery, *params.Reviewers); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RiskAcceptance != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "risk_acceptance", runtime.ParamLocationQuery, *params.RiskAcceptance); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RiskAccepted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "risk_accepted", runtime.ParamLocationQuery, *params.RiskAccepted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SastSinkObject != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sast_sink_object", runtime.ParamLocationQuery, *params.SastSinkObject); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SastSourceFilePath != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sast_source_file_path", runtime.ParamLocationQuery, *params.SastSourceFilePath); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SastSourceLine != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sast_source_line", runtime.ParamLocationQuery, *params.SastSourceLine); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SastSourceObject != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sast_source_object", runtime.ParamLocationQuery, *params.SastSourceObject); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScannerConfidence != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "scanner_confidence", runtime.ParamLocationQuery, *params.ScannerConfidence); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Service != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service", runtime.ParamLocationQuery, *params.Service); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Severity != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "severity", runtime.ParamLocationQuery, *params.Severity); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SeverityJustification != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "severity_justification", runtime.ParamLocationQuery, *params.SeverityJustification); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SlaStartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sla_start_date", runtime.ParamLocationQuery, *params.SlaStartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SonarqubeIssue != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sonarqube_issue", runtime.ParamLocationQuery, *params.SonarqubeIssue); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StaticFinding != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "static_finding", runtime.ParamLocationQuery, *params.StaticFinding); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StepToReproduce != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "step_to_reproduce", runtime.ParamLocationQuery, *params.StepToReproduce); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StepsToReproduce != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "steps_to_reproduce", runtime.ParamLocationQuery, *params.StepsToReproduce); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Test != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "test", runtime.ParamLocationQuery, *params.Test); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TestEngagement != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "test__engagement", runtime.ParamLocationQuery, *params.TestEngagement); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TestEngagementProduct != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "test__engagement__product", runtime.ParamLocationQuery, *params.TestEngagementProduct); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TestEngagementProductTagsName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "test__engagement__product__tags__name", runtime.ParamLocationQuery, *params.TestEngagementProductTagsName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TestEngagementTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "test__engagement__tags", runtime.ParamLocationQuery, *params.TestEngagementTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TestTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "test__tags", runtime.ParamLocationQuery, *params.TestTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TestTestType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "test__test_type", runtime.ParamLocationQuery, *params.TestTestType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Title != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "title", runtime.ParamLocationQuery, *params.Title); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UnderDefectReview != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "under_defect_review", runtime.ParamLocationQuery, *params.UnderDefectReview); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UnderReview != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "under_review", runtime.ParamLocationQuery, *params.UnderReview); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UniqueIdFromTool != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unique_id_from_tool", runtime.ParamLocationQuery, *params.UniqueIdFromTool); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Verified != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verified", runtime.ParamLocationQuery, *params.Verified); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VulnIdFromTool != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vuln_id_from_tool", runtime.ParamLocationQuery, *params.VulnIdFromTool); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindingsCreateRequest calls the generic FindingsCreate builder with application/json body
func NewFindingsCreateRequest(server string, body FindingsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFindingsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewFindingsCreateRequestWithFormdataBody calls the generic FindingsCreate builder with application/x-www-form-urlencoded body
func NewFindingsCreateRequestWithFormdataBody(server string, body FindingsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewFindingsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewFindingsCreateRequestWithBody generates requests for FindingsCreate with any type of body
func NewFindingsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindingsAcceptRisksCreateRequest calls the generic FindingsAcceptRisksCreate builder with application/json body
func NewFindingsAcceptRisksCreateRequest(server string, params *FindingsAcceptRisksCreateParams, body FindingsAcceptRisksCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFindingsAcceptRisksCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewFindingsAcceptRisksCreateRequestWithFormdataBody calls the generic FindingsAcceptRisksCreate builder with application/x-www-form-urlencoded body
func NewFindingsAcceptRisksCreateRequestWithFormdataBody(server string, params *FindingsAcceptRisksCreateParams, body FindingsAcceptRisksCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewFindingsAcceptRisksCreateRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewFindingsAcceptRisksCreateRequestWithBody generates requests for FindingsAcceptRisksCreate with any type of body
func NewFindingsAcceptRisksCreateRequestWithBody(server string, params *FindingsAcceptRisksCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/accept_risks/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Active != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "active", runtime.ParamLocationQuery, *params.Active); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ComponentName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "component_name", runtime.ParamLocationQuery, *params.ComponentName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ComponentVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "component_version", runtime.ParamLocationQuery, *params.ComponentVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Created != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created", runtime.ParamLocationQuery, *params.Created); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cve != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cve", runtime.ParamLocationQuery, *params.Cve); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cvssv3 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cvssv3", runtime.ParamLocationQuery, *params.Cvssv3); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cvssv3Score != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cvssv3_score", runtime.ParamLocationQuery, *params.Cvssv3Score); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cwe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "cwe", runtime.ParamLocationQuery, *params.Cwe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Date != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DefectReviewRequestedBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "defect_review_requested_by", runtime.ParamLocationQuery, *params.DefectReviewRequestedBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Duplicate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "duplicate", runtime.ParamLocationQuery, *params.Duplicate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DuplicateFinding != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "duplicate_finding", runtime.ParamLocationQuery, *params.DuplicateFinding); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DynamicFinding != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dynamic_finding", runtime.ParamLocationQuery, *params.DynamicFinding); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Endpoints != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "endpoints", runtime.ParamLocationQuery, *params.Endpoints); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FalseP != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "false_p", runtime.ParamLocationQuery, *params.FalseP); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilePath != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_path", runtime.ParamLocationQuery, *params.FilePath); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FindingGroup != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "finding_group", runtime.ParamLocationQuery, *params.FindingGroup); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FoundBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "found_by", runtime.ParamLocationQuery, *params.FoundBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HashCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hash_code", runtime.ParamLocationQuery, *params.HashCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Impact != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "impact", runtime.ParamLocationQuery, *params.Impact); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsMitigated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_mitigated", runtime.ParamLocationQuery, *params.IsMitigated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.JiraChange != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "jira_change", runtime.ParamLocationQuery, *params.JiraChange); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.JiraCreation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "jira_creation", runtime.ParamLocationQuery, *params.JiraCreation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastReviewed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_reviewed", runtime.ParamLocationQuery, *params.LastReviewed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastReviewedBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "last_reviewed_by", runtime.ParamLocationQuery, *params.LastReviewedBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastStatusUpdate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_status_update", runtime.ParamLocationQuery, *params.LastStatusUpdate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Mitigated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mitigated", runtime.ParamLocationQuery, *params.Mitigated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MitigatedBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "mitigated_by", runtime.ParamLocationQuery, *params.MitigatedBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Mitigation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mitigation", runtime.ParamLocationQuery, *params.Mitigation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NbOccurences != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "nb_occurences", runtime.ParamLocationQuery, *params.NbOccurences); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotTag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_tag", runtime.ParamLocationQuery, *params.NotTag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_tags", runtime.ParamLocationQuery, *params.NotTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotTestEngagementProductTagsName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_test__engagement__product__tags__name", runtime.ParamLocationQuery, *params.NotTestEngagementProductTagsName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotTestEngagementTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_test__engagement__tags", runtime.ParamLocationQuery, *params.NotTestEngagementTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotTestTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_test__tags", runtime.ParamLocationQuery, *params.NotTestTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NumericalSeverity != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "numerical_severity", runtime.ParamLocationQuery, *params.NumericalSeverity); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.O != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "o", runtime.ParamLocationQuery, *params.O); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OutOfScope != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "out_of_scope", runtime.ParamLocationQuery, *params.OutOfScope); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Param != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "param", runtime.ParamLocationQuery, *params.Param); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Payload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "payload", runtime.ParamLocationQuery, *params.Payload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PublishDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "publish_date", runtime.ParamLocationQuery, *params.PublishDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.References != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "references", runtime.ParamLocationQuery, *params.References); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Reporter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "reporter", runtime.ParamLocationQuery, *params.Reporter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReviewRequestedBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "review_requested_by", runtime.ParamLocationQuery, *params.ReviewRequestedBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Reviewers != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "reviewers", runtime.ParamLocationQuery, *params.Reviewers); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RiskAcceptance != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "risk_acceptance", runtime.ParamLocationQuery, *params.RiskAcceptance); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RiskAccepted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "risk_accepted", runtime.ParamLocationQuery, *params.RiskAccepted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SastSinkObject != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sast_sink_object", runtime.ParamLocationQuery, *params.SastSinkObject); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SastSourceFilePath != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sast_source_file_path", runtime.ParamLocationQuery, *params.SastSourceFilePath); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SastSourceLine != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sast_source_line", runtime.ParamLocationQuery, *params.SastSourceLine); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SastSourceObject != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sast_source_object", runtime.ParamLocationQuery, *params.SastSourceObject); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScannerConfidence != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "scanner_confidence", runtime.ParamLocationQuery, *params.ScannerConfidence); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Service != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service", runtime.ParamLocationQuery, *params.Service); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Severity != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "severity", runtime.ParamLocationQuery, *params.Severity); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SeverityJustification != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "severity_justification", runtime.ParamLocationQuery, *params.SeverityJustification); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SlaStartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sla_start_date", runtime.ParamLocationQuery, *params.SlaStartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SonarqubeIssue != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sonarqube_issue", runtime.ParamLocationQuery, *params.SonarqubeIssue); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StaticFinding != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "static_finding", runtime.ParamLocationQuery, *params.StaticFinding); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StepToReproduce != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "step_to_reproduce", runtime.ParamLocationQuery, *params.StepToReproduce); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StepsToReproduce != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "steps_to_reproduce", runtime.ParamLocationQuery, *params.StepsToReproduce); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Test != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "test", runtime.ParamLocationQuery, *params.Test); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TestEngagement != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "test__engagement", runtime.ParamLocationQuery, *params.TestEngagement); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TestEngagementProduct != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "test__engagement__product", runtime.ParamLocationQuery, *params.TestEngagementProduct); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TestEngagementProductTagsName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "test__engagement__product__tags__name", runtime.ParamLocationQuery, *params.TestEngagementProductTagsName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TestEngagementTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "test__engagement__tags", runtime.ParamLocationQuery, *params.TestEngagementTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TestTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "test__tags", runtime.ParamLocationQuery, *params.TestTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TestTestType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "test__test_type", runtime.ParamLocationQuery, *params.TestTestType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Title != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "title", runtime.ParamLocationQuery, *params.Title); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UnderDefectReview != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "under_defect_review", runtime.ParamLocationQuery, *params.UnderDefectReview); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UnderReview != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "under_review", runtime.ParamLocationQuery, *params.UnderReview); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UniqueIdFromTool != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unique_id_from_tool", runtime.ParamLocationQuery, *params.UniqueIdFromTool); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Verified != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verified", runtime.ParamLocationQuery, *params.Verified); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VulnIdFromTool != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vuln_id_from_tool", runtime.ParamLocationQuery, *params.VulnIdFromTool); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindingsGenerateReportCreateRequest calls the generic FindingsGenerateReportCreate builder with application/json body
func NewFindingsGenerateReportCreateRequest(server string, body FindingsGenerateReportCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFindingsGenerateReportCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewFindingsGenerateReportCreateRequestWithFormdataBody calls the generic FindingsGenerateReportCreate builder with application/x-www-form-urlencoded body
func NewFindingsGenerateReportCreateRequestWithFormdataBody(server string, body FindingsGenerateReportCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewFindingsGenerateReportCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewFindingsGenerateReportCreateRequestWithBody generates requests for FindingsGenerateReportCreate with any type of body
func NewFindingsGenerateReportCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/generate_report/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindingsDestroyRequest generates requests for FindingsDestroy
func NewFindingsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindingsRetrieveRequest generates requests for FindingsRetrieve
func NewFindingsRetrieveRequest(server string, id int, params *FindingsRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RelatedFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "related_fields", runtime.ParamLocationQuery, *params.RelatedFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindingsPartialUpdateRequest calls the generic FindingsPartialUpdate builder with application/json body
func NewFindingsPartialUpdateRequest(server string, id int, body FindingsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFindingsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewFindingsPartialUpdateRequestWithFormdataBody calls the generic FindingsPartialUpdate builder with application/x-www-form-urlencoded body
func NewFindingsPartialUpdateRequestWithFormdataBody(server string, id int, body FindingsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewFindingsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewFindingsPartialUpdateRequestWithBody generates requests for FindingsPartialUpdate with any type of body
func NewFindingsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindingsUpdateRequest calls the generic FindingsUpdate builder with application/json body
func NewFindingsUpdateRequest(server string, id int, body FindingsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFindingsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewFindingsUpdateRequestWithFormdataBody calls the generic FindingsUpdate builder with application/x-www-form-urlencoded body
func NewFindingsUpdateRequestWithFormdataBody(server string, id int, body FindingsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewFindingsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewFindingsUpdateRequestWithBody generates requests for FindingsUpdate with any type of body
func NewFindingsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindingsDuplicateListRequest generates requests for FindingsDuplicateList
func NewFindingsDuplicateListRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/%s/duplicate/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindingsDuplicateResetCreateRequest generates requests for FindingsDuplicateResetCreate
func NewFindingsDuplicateResetCreateRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/%s/duplicate/reset/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindingsFilesRetrieveRequest generates requests for FindingsFilesRetrieve
func NewFindingsFilesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/%s/files/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindingsFilesCreateRequestWithBody generates requests for FindingsFilesCreate with any type of body
func NewFindingsFilesCreateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/%s/files/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindingsMetadataDestroyRequest generates requests for FindingsMetadataDestroy
func NewFindingsMetadataDestroyRequest(server string, id int, params *FindingsMetadataDestroyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/%s/metadata/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindingsMetadataListRequest generates requests for FindingsMetadataList
func NewFindingsMetadataListRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/%s/metadata/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindingsMetadataCreateRequest calls the generic FindingsMetadataCreate builder with application/json body
func NewFindingsMetadataCreateRequest(server string, id int, body FindingsMetadataCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFindingsMetadataCreateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewFindingsMetadataCreateRequestWithFormdataBody calls the generic FindingsMetadataCreate builder with application/x-www-form-urlencoded body
func NewFindingsMetadataCreateRequestWithFormdataBody(server string, id int, body FindingsMetadataCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewFindingsMetadataCreateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewFindingsMetadataCreateRequestWithBody generates requests for FindingsMetadataCreate with any type of body
func NewFindingsMetadataCreateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/%s/metadata/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindingsMetadataUpdateRequest calls the generic FindingsMetadataUpdate builder with application/json body
func NewFindingsMetadataUpdateRequest(server string, id int, body FindingsMetadataUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFindingsMetadataUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewFindingsMetadataUpdateRequestWithFormdataBody calls the generic FindingsMetadataUpdate builder with application/x-www-form-urlencoded body
func NewFindingsMetadataUpdateRequestWithFormdataBody(server string, id int, body FindingsMetadataUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewFindingsMetadataUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewFindingsMetadataUpdateRequestWithBody generates requests for FindingsMetadataUpdate with any type of body
func NewFindingsMetadataUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/%s/metadata/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindingsNotesRetrieveRequest generates requests for FindingsNotesRetrieve
func NewFindingsNotesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/%s/notes/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindingsNotesCreateRequest calls the generic FindingsNotesCreate builder with application/json body
func NewFindingsNotesCreateRequest(server string, id int, body FindingsNotesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFindingsNotesCreateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewFindingsNotesCreateRequestWithFormdataBody calls the generic FindingsNotesCreate builder with application/x-www-form-urlencoded body
func NewFindingsNotesCreateRequestWithFormdataBody(server string, id int, body FindingsNotesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewFindingsNotesCreateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewFindingsNotesCreateRequestWithBody generates requests for FindingsNotesCreate with any type of body
func NewFindingsNotesCreateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/%s/notes/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindingsOriginalCreateRequest generates requests for FindingsOriginalCreate
func NewFindingsOriginalCreateRequest(server string, id int, newFid int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "new_fid", runtime.ParamLocationPath, newFid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/%s/original/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindingsRemoveNotePartialUpdateRequest calls the generic FindingsRemoveNotePartialUpdate builder with application/json body
func NewFindingsRemoveNotePartialUpdateRequest(server string, id int, body FindingsRemoveNotePartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFindingsRemoveNotePartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewFindingsRemoveNotePartialUpdateRequestWithFormdataBody calls the generic FindingsRemoveNotePartialUpdate builder with application/x-www-form-urlencoded body
func NewFindingsRemoveNotePartialUpdateRequestWithFormdataBody(server string, id int, body FindingsRemoveNotePartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewFindingsRemoveNotePartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewFindingsRemoveNotePartialUpdateRequestWithBody generates requests for FindingsRemoveNotePartialUpdate with any type of body
func NewFindingsRemoveNotePartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/%s/remove_note/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindingsRemoveTagsPartialUpdateRequest calls the generic FindingsRemoveTagsPartialUpdate builder with application/json body
func NewFindingsRemoveTagsPartialUpdateRequest(server string, id int, body FindingsRemoveTagsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFindingsRemoveTagsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewFindingsRemoveTagsPartialUpdateRequestWithFormdataBody calls the generic FindingsRemoveTagsPartialUpdate builder with application/x-www-form-urlencoded body
func NewFindingsRemoveTagsPartialUpdateRequestWithFormdataBody(server string, id int, body FindingsRemoveTagsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewFindingsRemoveTagsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewFindingsRemoveTagsPartialUpdateRequestWithBody generates requests for FindingsRemoveTagsPartialUpdate with any type of body
func NewFindingsRemoveTagsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/%s/remove_tags/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindingsRemoveTagsUpdateRequest calls the generic FindingsRemoveTagsUpdate builder with application/json body
func NewFindingsRemoveTagsUpdateRequest(server string, id int, body FindingsRemoveTagsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFindingsRemoveTagsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewFindingsRemoveTagsUpdateRequestWithFormdataBody calls the generic FindingsRemoveTagsUpdate builder with application/x-www-form-urlencoded body
func NewFindingsRemoveTagsUpdateRequestWithFormdataBody(server string, id int, body FindingsRemoveTagsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewFindingsRemoveTagsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewFindingsRemoveTagsUpdateRequestWithBody generates requests for FindingsRemoveTagsUpdate with any type of body
func NewFindingsRemoveTagsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/%s/remove_tags/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindingsRequestResponseRetrieveRequest generates requests for FindingsRequestResponseRetrieve
func NewFindingsRequestResponseRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/%s/request_response/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindingsRequestResponseCreateRequest calls the generic FindingsRequestResponseCreate builder with application/json body
func NewFindingsRequestResponseCreateRequest(server string, id int, body FindingsRequestResponseCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFindingsRequestResponseCreateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewFindingsRequestResponseCreateRequestWithFormdataBody calls the generic FindingsRequestResponseCreate builder with application/x-www-form-urlencoded body
func NewFindingsRequestResponseCreateRequestWithFormdataBody(server string, id int, body FindingsRequestResponseCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewFindingsRequestResponseCreateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewFindingsRequestResponseCreateRequestWithBody generates requests for FindingsRequestResponseCreate with any type of body
func NewFindingsRequestResponseCreateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/%s/request_response/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindingsTagsRetrieveRequest generates requests for FindingsTagsRetrieve
func NewFindingsTagsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/%s/tags/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindingsTagsCreateRequest calls the generic FindingsTagsCreate builder with application/json body
func NewFindingsTagsCreateRequest(server string, id int, body FindingsTagsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFindingsTagsCreateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewFindingsTagsCreateRequestWithFormdataBody calls the generic FindingsTagsCreate builder with application/x-www-form-urlencoded body
func NewFindingsTagsCreateRequestWithFormdataBody(server string, id int, body FindingsTagsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewFindingsTagsCreateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewFindingsTagsCreateRequestWithBody generates requests for FindingsTagsCreate with any type of body
func NewFindingsTagsCreateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/%s/tags/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGlobalRolesListRequest generates requests for GlobalRolesList
func NewGlobalRolesListRequest(server string, params *GlobalRolesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/global_roles/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Group != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "group", runtime.ParamLocationQuery, *params.Group); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Role != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "role", runtime.ParamLocationQuery, *params.Role); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.User != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user", runtime.ParamLocationQuery, *params.User); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGlobalRolesCreateRequest calls the generic GlobalRolesCreate builder with application/json body
func NewGlobalRolesCreateRequest(server string, body GlobalRolesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGlobalRolesCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewGlobalRolesCreateRequestWithFormdataBody calls the generic GlobalRolesCreate builder with application/x-www-form-urlencoded body
func NewGlobalRolesCreateRequestWithFormdataBody(server string, body GlobalRolesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewGlobalRolesCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewGlobalRolesCreateRequestWithBody generates requests for GlobalRolesCreate with any type of body
func NewGlobalRolesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/global_roles/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGlobalRolesDestroyRequest generates requests for GlobalRolesDestroy
func NewGlobalRolesDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/global_roles/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGlobalRolesRetrieveRequest generates requests for GlobalRolesRetrieve
func NewGlobalRolesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/global_roles/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGlobalRolesPartialUpdateRequest calls the generic GlobalRolesPartialUpdate builder with application/json body
func NewGlobalRolesPartialUpdateRequest(server string, id int, body GlobalRolesPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGlobalRolesPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewGlobalRolesPartialUpdateRequestWithFormdataBody calls the generic GlobalRolesPartialUpdate builder with application/x-www-form-urlencoded body
func NewGlobalRolesPartialUpdateRequestWithFormdataBody(server string, id int, body GlobalRolesPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewGlobalRolesPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewGlobalRolesPartialUpdateRequestWithBody generates requests for GlobalRolesPartialUpdate with any type of body
func NewGlobalRolesPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/global_roles/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGlobalRolesUpdateRequest calls the generic GlobalRolesUpdate builder with application/json body
func NewGlobalRolesUpdateRequest(server string, id int, body GlobalRolesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGlobalRolesUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewGlobalRolesUpdateRequestWithFormdataBody calls the generic GlobalRolesUpdate builder with application/x-www-form-urlencoded body
func NewGlobalRolesUpdateRequestWithFormdataBody(server string, id int, body GlobalRolesUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewGlobalRolesUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewGlobalRolesUpdateRequestWithBody generates requests for GlobalRolesUpdate with any type of body
func NewGlobalRolesUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/global_roles/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewImportLanguagesCreateRequestWithBody generates requests for ImportLanguagesCreate with any type of body
func NewImportLanguagesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/import-languages/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewImportScanCreateRequestWithBody generates requests for ImportScanCreate with any type of body
func NewImportScanCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/import-scan/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewJiraConfigurationsListRequest generates requests for JiraConfigurationsList
func NewJiraConfigurationsListRequest(server string, params *JiraConfigurationsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_configurations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Url != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, *params.Url); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewJiraConfigurationsCreateRequest calls the generic JiraConfigurationsCreate builder with application/json body
func NewJiraConfigurationsCreateRequest(server string, body JiraConfigurationsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewJiraConfigurationsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewJiraConfigurationsCreateRequestWithFormdataBody calls the generic JiraConfigurationsCreate builder with application/x-www-form-urlencoded body
func NewJiraConfigurationsCreateRequestWithFormdataBody(server string, body JiraConfigurationsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewJiraConfigurationsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewJiraConfigurationsCreateRequestWithBody generates requests for JiraConfigurationsCreate with any type of body
func NewJiraConfigurationsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_configurations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewJiraConfigurationsDestroyRequest generates requests for JiraConfigurationsDestroy
func NewJiraConfigurationsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_configurations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewJiraConfigurationsRetrieveRequest generates requests for JiraConfigurationsRetrieve
func NewJiraConfigurationsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_configurations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewJiraConfigurationsPartialUpdateRequest calls the generic JiraConfigurationsPartialUpdate builder with application/json body
func NewJiraConfigurationsPartialUpdateRequest(server string, id int, body JiraConfigurationsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewJiraConfigurationsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewJiraConfigurationsPartialUpdateRequestWithFormdataBody calls the generic JiraConfigurationsPartialUpdate builder with application/x-www-form-urlencoded body
func NewJiraConfigurationsPartialUpdateRequestWithFormdataBody(server string, id int, body JiraConfigurationsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewJiraConfigurationsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewJiraConfigurationsPartialUpdateRequestWithBody generates requests for JiraConfigurationsPartialUpdate with any type of body
func NewJiraConfigurationsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_configurations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewJiraConfigurationsUpdateRequest calls the generic JiraConfigurationsUpdate builder with application/json body
func NewJiraConfigurationsUpdateRequest(server string, id int, body JiraConfigurationsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewJiraConfigurationsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewJiraConfigurationsUpdateRequestWithFormdataBody calls the generic JiraConfigurationsUpdate builder with application/x-www-form-urlencoded body
func NewJiraConfigurationsUpdateRequestWithFormdataBody(server string, id int, body JiraConfigurationsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewJiraConfigurationsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewJiraConfigurationsUpdateRequestWithBody generates requests for JiraConfigurationsUpdate with any type of body
func NewJiraConfigurationsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_configurations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewJiraFindingMappingsListRequest generates requests for JiraFindingMappingsList
func NewJiraFindingMappingsListRequest(server string, params *JiraFindingMappingsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_finding_mappings/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Engagement != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "engagement", runtime.ParamLocationQuery, *params.Engagement); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Finding != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "finding", runtime.ParamLocationQuery, *params.Finding); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FindingGroup != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "finding_group", runtime.ParamLocationQuery, *params.FindingGroup); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.JiraId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "jira_id", runtime.ParamLocationQuery, *params.JiraId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.JiraKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "jira_key", runtime.ParamLocationQuery, *params.JiraKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewJiraFindingMappingsCreateRequest calls the generic JiraFindingMappingsCreate builder with application/json body
func NewJiraFindingMappingsCreateRequest(server string, body JiraFindingMappingsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewJiraFindingMappingsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewJiraFindingMappingsCreateRequestWithFormdataBody calls the generic JiraFindingMappingsCreate builder with application/x-www-form-urlencoded body
func NewJiraFindingMappingsCreateRequestWithFormdataBody(server string, body JiraFindingMappingsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewJiraFindingMappingsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewJiraFindingMappingsCreateRequestWithBody generates requests for JiraFindingMappingsCreate with any type of body
func NewJiraFindingMappingsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_finding_mappings/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewJiraFindingMappingsDestroyRequest generates requests for JiraFindingMappingsDestroy
func NewJiraFindingMappingsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_finding_mappings/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewJiraFindingMappingsRetrieveRequest generates requests for JiraFindingMappingsRetrieve
func NewJiraFindingMappingsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_finding_mappings/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewJiraFindingMappingsPartialUpdateRequest calls the generic JiraFindingMappingsPartialUpdate builder with application/json body
func NewJiraFindingMappingsPartialUpdateRequest(server string, id int, body JiraFindingMappingsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewJiraFindingMappingsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewJiraFindingMappingsPartialUpdateRequestWithFormdataBody calls the generic JiraFindingMappingsPartialUpdate builder with application/x-www-form-urlencoded body
func NewJiraFindingMappingsPartialUpdateRequestWithFormdataBody(server string, id int, body JiraFindingMappingsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewJiraFindingMappingsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewJiraFindingMappingsPartialUpdateRequestWithBody generates requests for JiraFindingMappingsPartialUpdate with any type of body
func NewJiraFindingMappingsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_finding_mappings/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewJiraFindingMappingsUpdateRequest calls the generic JiraFindingMappingsUpdate builder with application/json body
func NewJiraFindingMappingsUpdateRequest(server string, id int, body JiraFindingMappingsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewJiraFindingMappingsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewJiraFindingMappingsUpdateRequestWithFormdataBody calls the generic JiraFindingMappingsUpdate builder with application/x-www-form-urlencoded body
func NewJiraFindingMappingsUpdateRequestWithFormdataBody(server string, id int, body JiraFindingMappingsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewJiraFindingMappingsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewJiraFindingMappingsUpdateRequestWithBody generates requests for JiraFindingMappingsUpdate with any type of body
func NewJiraFindingMappingsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_finding_mappings/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewJiraInstancesListRequest generates requests for JiraInstancesList
func NewJiraInstancesListRequest(server string, params *JiraInstancesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_instances/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Url != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, *params.Url); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewJiraInstancesCreateRequest calls the generic JiraInstancesCreate builder with application/json body
func NewJiraInstancesCreateRequest(server string, body JiraInstancesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewJiraInstancesCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewJiraInstancesCreateRequestWithFormdataBody calls the generic JiraInstancesCreate builder with application/x-www-form-urlencoded body
func NewJiraInstancesCreateRequestWithFormdataBody(server string, body JiraInstancesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewJiraInstancesCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewJiraInstancesCreateRequestWithBody generates requests for JiraInstancesCreate with any type of body
func NewJiraInstancesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_instances/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewJiraInstancesDestroyRequest generates requests for JiraInstancesDestroy
func NewJiraInstancesDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_instances/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewJiraInstancesRetrieveRequest generates requests for JiraInstancesRetrieve
func NewJiraInstancesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_instances/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewJiraInstancesPartialUpdateRequest calls the generic JiraInstancesPartialUpdate builder with application/json body
func NewJiraInstancesPartialUpdateRequest(server string, id int, body JiraInstancesPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewJiraInstancesPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewJiraInstancesPartialUpdateRequestWithFormdataBody calls the generic JiraInstancesPartialUpdate builder with application/x-www-form-urlencoded body
func NewJiraInstancesPartialUpdateRequestWithFormdataBody(server string, id int, body JiraInstancesPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewJiraInstancesPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewJiraInstancesPartialUpdateRequestWithBody generates requests for JiraInstancesPartialUpdate with any type of body
func NewJiraInstancesPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_instances/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewJiraInstancesUpdateRequest calls the generic JiraInstancesUpdate builder with application/json body
func NewJiraInstancesUpdateRequest(server string, id int, body JiraInstancesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewJiraInstancesUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewJiraInstancesUpdateRequestWithFormdataBody calls the generic JiraInstancesUpdate builder with application/x-www-form-urlencoded body
func NewJiraInstancesUpdateRequestWithFormdataBody(server string, id int, body JiraInstancesUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewJiraInstancesUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewJiraInstancesUpdateRequestWithBody generates requests for JiraInstancesUpdate with any type of body
func NewJiraInstancesUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_instances/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewJiraProductConfigurationsListRequest generates requests for JiraProductConfigurationsList
func NewJiraProductConfigurationsListRequest(server string, params *JiraProductConfigurationsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_product_configurations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Component != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "component", runtime.ParamLocationQuery, *params.Component); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EnableEngagementEpicMapping != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enable_engagement_epic_mapping", runtime.ParamLocationQuery, *params.EnableEngagementEpicMapping); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Engagement != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "engagement", runtime.ParamLocationQuery, *params.Engagement); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.JiraInstance != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "jira_instance", runtime.ParamLocationQuery, *params.JiraInstance); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Product != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product", runtime.ParamLocationQuery, *params.Product); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProjectKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project_key", runtime.ParamLocationQuery, *params.ProjectKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PushAllIssues != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "push_all_issues", runtime.ParamLocationQuery, *params.PushAllIssues); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PushNotes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "push_notes", runtime.ParamLocationQuery, *params.PushNotes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewJiraProductConfigurationsCreateRequest calls the generic JiraProductConfigurationsCreate builder with application/json body
func NewJiraProductConfigurationsCreateRequest(server string, body JiraProductConfigurationsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewJiraProductConfigurationsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewJiraProductConfigurationsCreateRequestWithFormdataBody calls the generic JiraProductConfigurationsCreate builder with application/x-www-form-urlencoded body
func NewJiraProductConfigurationsCreateRequestWithFormdataBody(server string, body JiraProductConfigurationsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewJiraProductConfigurationsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewJiraProductConfigurationsCreateRequestWithBody generates requests for JiraProductConfigurationsCreate with any type of body
func NewJiraProductConfigurationsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_product_configurations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewJiraProductConfigurationsDestroyRequest generates requests for JiraProductConfigurationsDestroy
func NewJiraProductConfigurationsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_product_configurations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewJiraProductConfigurationsRetrieveRequest generates requests for JiraProductConfigurationsRetrieve
func NewJiraProductConfigurationsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_product_configurations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewJiraProductConfigurationsPartialUpdateRequest calls the generic JiraProductConfigurationsPartialUpdate builder with application/json body
func NewJiraProductConfigurationsPartialUpdateRequest(server string, id int, body JiraProductConfigurationsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewJiraProductConfigurationsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewJiraProductConfigurationsPartialUpdateRequestWithFormdataBody calls the generic JiraProductConfigurationsPartialUpdate builder with application/x-www-form-urlencoded body
func NewJiraProductConfigurationsPartialUpdateRequestWithFormdataBody(server string, id int, body JiraProductConfigurationsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewJiraProductConfigurationsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewJiraProductConfigurationsPartialUpdateRequestWithBody generates requests for JiraProductConfigurationsPartialUpdate with any type of body
func NewJiraProductConfigurationsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_product_configurations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewJiraProductConfigurationsUpdateRequest calls the generic JiraProductConfigurationsUpdate builder with application/json body
func NewJiraProductConfigurationsUpdateRequest(server string, id int, body JiraProductConfigurationsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewJiraProductConfigurationsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewJiraProductConfigurationsUpdateRequestWithFormdataBody calls the generic JiraProductConfigurationsUpdate builder with application/x-www-form-urlencoded body
func NewJiraProductConfigurationsUpdateRequestWithFormdataBody(server string, id int, body JiraProductConfigurationsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewJiraProductConfigurationsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewJiraProductConfigurationsUpdateRequestWithBody generates requests for JiraProductConfigurationsUpdate with any type of body
func NewJiraProductConfigurationsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_product_configurations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewJiraProjectsListRequest generates requests for JiraProjectsList
func NewJiraProjectsListRequest(server string, params *JiraProjectsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_projects/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Component != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "component", runtime.ParamLocationQuery, *params.Component); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EnableEngagementEpicMapping != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enable_engagement_epic_mapping", runtime.ParamLocationQuery, *params.EnableEngagementEpicMapping); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Engagement != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "engagement", runtime.ParamLocationQuery, *params.Engagement); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.JiraInstance != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "jira_instance", runtime.ParamLocationQuery, *params.JiraInstance); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Product != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product", runtime.ParamLocationQuery, *params.Product); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProjectKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project_key", runtime.ParamLocationQuery, *params.ProjectKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PushAllIssues != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "push_all_issues", runtime.ParamLocationQuery, *params.PushAllIssues); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PushNotes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "push_notes", runtime.ParamLocationQuery, *params.PushNotes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewJiraProjectsCreateRequest calls the generic JiraProjectsCreate builder with application/json body
func NewJiraProjectsCreateRequest(server string, body JiraProjectsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewJiraProjectsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewJiraProjectsCreateRequestWithFormdataBody calls the generic JiraProjectsCreate builder with application/x-www-form-urlencoded body
func NewJiraProjectsCreateRequestWithFormdataBody(server string, body JiraProjectsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewJiraProjectsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewJiraProjectsCreateRequestWithBody generates requests for JiraProjectsCreate with any type of body
func NewJiraProjectsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_projects/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewJiraProjectsDestroyRequest generates requests for JiraProjectsDestroy
func NewJiraProjectsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_projects/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewJiraProjectsRetrieveRequest generates requests for JiraProjectsRetrieve
func NewJiraProjectsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_projects/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewJiraProjectsPartialUpdateRequest calls the generic JiraProjectsPartialUpdate builder with application/json body
func NewJiraProjectsPartialUpdateRequest(server string, id int, body JiraProjectsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewJiraProjectsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewJiraProjectsPartialUpdateRequestWithFormdataBody calls the generic JiraProjectsPartialUpdate builder with application/x-www-form-urlencoded body
func NewJiraProjectsPartialUpdateRequestWithFormdataBody(server string, id int, body JiraProjectsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewJiraProjectsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewJiraProjectsPartialUpdateRequestWithBody generates requests for JiraProjectsPartialUpdate with any type of body
func NewJiraProjectsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_projects/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewJiraProjectsUpdateRequest calls the generic JiraProjectsUpdate builder with application/json body
func NewJiraProjectsUpdateRequest(server string, id int, body JiraProjectsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewJiraProjectsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewJiraProjectsUpdateRequestWithFormdataBody calls the generic JiraProjectsUpdate builder with application/x-www-form-urlencoded body
func NewJiraProjectsUpdateRequestWithFormdataBody(server string, id int, body JiraProjectsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewJiraProjectsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewJiraProjectsUpdateRequestWithBody generates requests for JiraProjectsUpdate with any type of body
func NewJiraProjectsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_projects/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLanguageTypesListRequest generates requests for LanguageTypesList
func NewLanguageTypesListRequest(server string, params *LanguageTypesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/language_types/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Color != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "color", runtime.ParamLocationQuery, *params.Color); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Language != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLanguageTypesCreateRequest calls the generic LanguageTypesCreate builder with application/json body
func NewLanguageTypesCreateRequest(server string, body LanguageTypesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLanguageTypesCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewLanguageTypesCreateRequestWithFormdataBody calls the generic LanguageTypesCreate builder with application/x-www-form-urlencoded body
func NewLanguageTypesCreateRequestWithFormdataBody(server string, body LanguageTypesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewLanguageTypesCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewLanguageTypesCreateRequestWithBody generates requests for LanguageTypesCreate with any type of body
func NewLanguageTypesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/language_types/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLanguageTypesDestroyRequest generates requests for LanguageTypesDestroy
func NewLanguageTypesDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/language_types/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLanguageTypesRetrieveRequest generates requests for LanguageTypesRetrieve
func NewLanguageTypesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/language_types/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLanguageTypesPartialUpdateRequest calls the generic LanguageTypesPartialUpdate builder with application/json body
func NewLanguageTypesPartialUpdateRequest(server string, id int, body LanguageTypesPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLanguageTypesPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewLanguageTypesPartialUpdateRequestWithFormdataBody calls the generic LanguageTypesPartialUpdate builder with application/x-www-form-urlencoded body
func NewLanguageTypesPartialUpdateRequestWithFormdataBody(server string, id int, body LanguageTypesPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewLanguageTypesPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewLanguageTypesPartialUpdateRequestWithBody generates requests for LanguageTypesPartialUpdate with any type of body
func NewLanguageTypesPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/language_types/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLanguageTypesUpdateRequest calls the generic LanguageTypesUpdate builder with application/json body
func NewLanguageTypesUpdateRequest(server string, id int, body LanguageTypesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLanguageTypesUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewLanguageTypesUpdateRequestWithFormdataBody calls the generic LanguageTypesUpdate builder with application/x-www-form-urlencoded body
func NewLanguageTypesUpdateRequestWithFormdataBody(server string, id int, body LanguageTypesUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewLanguageTypesUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewLanguageTypesUpdateRequestWithBody generates requests for LanguageTypesUpdate with any type of body
func NewLanguageTypesUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/language_types/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLanguagesListRequest generates requests for LanguagesList
func NewLanguagesListRequest(server string, params *LanguagesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/languages/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Language != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Product != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product", runtime.ParamLocationQuery, *params.Product); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLanguagesCreateRequest calls the generic LanguagesCreate builder with application/json body
func NewLanguagesCreateRequest(server string, body LanguagesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLanguagesCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewLanguagesCreateRequestWithFormdataBody calls the generic LanguagesCreate builder with application/x-www-form-urlencoded body
func NewLanguagesCreateRequestWithFormdataBody(server string, body LanguagesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewLanguagesCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewLanguagesCreateRequestWithBody generates requests for LanguagesCreate with any type of body
func NewLanguagesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/languages/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLanguagesDestroyRequest generates requests for LanguagesDestroy
func NewLanguagesDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/languages/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLanguagesRetrieveRequest generates requests for LanguagesRetrieve
func NewLanguagesRetrieveRequest(server string, id int, params *LanguagesRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/languages/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLanguagesPartialUpdateRequest calls the generic LanguagesPartialUpdate builder with application/json body
func NewLanguagesPartialUpdateRequest(server string, id int, body LanguagesPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLanguagesPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewLanguagesPartialUpdateRequestWithFormdataBody calls the generic LanguagesPartialUpdate builder with application/x-www-form-urlencoded body
func NewLanguagesPartialUpdateRequestWithFormdataBody(server string, id int, body LanguagesPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewLanguagesPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewLanguagesPartialUpdateRequestWithBody generates requests for LanguagesPartialUpdate with any type of body
func NewLanguagesPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/languages/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLanguagesUpdateRequest calls the generic LanguagesUpdate builder with application/json body
func NewLanguagesUpdateRequest(server string, id int, body LanguagesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLanguagesUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewLanguagesUpdateRequestWithFormdataBody calls the generic LanguagesUpdate builder with application/x-www-form-urlencoded body
func NewLanguagesUpdateRequestWithFormdataBody(server string, id int, body LanguagesUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewLanguagesUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewLanguagesUpdateRequestWithBody generates requests for LanguagesUpdate with any type of body
func NewLanguagesUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/languages/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMetadataListRequest generates requests for MetadataList
func NewMetadataListRequest(server string, params *MetadataListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/metadata/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Endpoint != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endpoint", runtime.ParamLocationQuery, *params.Endpoint); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Finding != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "finding", runtime.ParamLocationQuery, *params.Finding); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Product != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product", runtime.ParamLocationQuery, *params.Product); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Value != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value", runtime.ParamLocationQuery, *params.Value); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMetadataCreateRequest calls the generic MetadataCreate builder with application/json body
func NewMetadataCreateRequest(server string, body MetadataCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMetadataCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewMetadataCreateRequestWithFormdataBody calls the generic MetadataCreate builder with application/x-www-form-urlencoded body
func NewMetadataCreateRequestWithFormdataBody(server string, body MetadataCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewMetadataCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewMetadataCreateRequestWithBody generates requests for MetadataCreate with any type of body
func NewMetadataCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/metadata/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMetadataDestroyRequest generates requests for MetadataDestroy
func NewMetadataDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/metadata/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMetadataRetrieveRequest generates requests for MetadataRetrieve
func NewMetadataRetrieveRequest(server string, id int, params *MetadataRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/metadata/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMetadataPartialUpdateRequest calls the generic MetadataPartialUpdate builder with application/json body
func NewMetadataPartialUpdateRequest(server string, id int, body MetadataPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMetadataPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewMetadataPartialUpdateRequestWithFormdataBody calls the generic MetadataPartialUpdate builder with application/x-www-form-urlencoded body
func NewMetadataPartialUpdateRequestWithFormdataBody(server string, id int, body MetadataPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewMetadataPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewMetadataPartialUpdateRequestWithBody generates requests for MetadataPartialUpdate with any type of body
func NewMetadataPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/metadata/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMetadataUpdateRequest calls the generic MetadataUpdate builder with application/json body
func NewMetadataUpdateRequest(server string, id int, body MetadataUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMetadataUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewMetadataUpdateRequestWithFormdataBody calls the generic MetadataUpdate builder with application/x-www-form-urlencoded body
func NewMetadataUpdateRequestWithFormdataBody(server string, id int, body MetadataUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewMetadataUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewMetadataUpdateRequestWithBody generates requests for MetadataUpdate with any type of body
func NewMetadataUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/metadata/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNetworkLocationsListRequest generates requests for NetworkLocationsList
func NewNetworkLocationsListRequest(server string, params *NetworkLocationsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/network_locations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Location != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "location", runtime.ParamLocationQuery, *params.Location); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkLocationsCreateRequest calls the generic NetworkLocationsCreate builder with application/json body
func NewNetworkLocationsCreateRequest(server string, body NetworkLocationsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNetworkLocationsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewNetworkLocationsCreateRequestWithFormdataBody calls the generic NetworkLocationsCreate builder with application/x-www-form-urlencoded body
func NewNetworkLocationsCreateRequestWithFormdataBody(server string, body NetworkLocationsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewNetworkLocationsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewNetworkLocationsCreateRequestWithBody generates requests for NetworkLocationsCreate with any type of body
func NewNetworkLocationsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/network_locations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNetworkLocationsDestroyRequest generates requests for NetworkLocationsDestroy
func NewNetworkLocationsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/network_locations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkLocationsRetrieveRequest generates requests for NetworkLocationsRetrieve
func NewNetworkLocationsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/network_locations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkLocationsPartialUpdateRequest calls the generic NetworkLocationsPartialUpdate builder with application/json body
func NewNetworkLocationsPartialUpdateRequest(server string, id int, body NetworkLocationsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNetworkLocationsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewNetworkLocationsPartialUpdateRequestWithFormdataBody calls the generic NetworkLocationsPartialUpdate builder with application/x-www-form-urlencoded body
func NewNetworkLocationsPartialUpdateRequestWithFormdataBody(server string, id int, body NetworkLocationsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewNetworkLocationsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewNetworkLocationsPartialUpdateRequestWithBody generates requests for NetworkLocationsPartialUpdate with any type of body
func NewNetworkLocationsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/network_locations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNetworkLocationsUpdateRequest calls the generic NetworkLocationsUpdate builder with application/json body
func NewNetworkLocationsUpdateRequest(server string, id int, body NetworkLocationsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNetworkLocationsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewNetworkLocationsUpdateRequestWithFormdataBody calls the generic NetworkLocationsUpdate builder with application/x-www-form-urlencoded body
func NewNetworkLocationsUpdateRequestWithFormdataBody(server string, id int, body NetworkLocationsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewNetworkLocationsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewNetworkLocationsUpdateRequestWithBody generates requests for NetworkLocationsUpdate with any type of body
func NewNetworkLocationsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/network_locations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNoteTypeListRequest generates requests for NoteTypeList
func NewNoteTypeListRequest(server string, params *NoteTypeListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/note_type/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsActive != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_active", runtime.ParamLocationQuery, *params.IsActive); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsMandatory != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_mandatory", runtime.ParamLocationQuery, *params.IsMandatory); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsSingle != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_single", runtime.ParamLocationQuery, *params.IsSingle); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNoteTypeCreateRequest calls the generic NoteTypeCreate builder with application/json body
func NewNoteTypeCreateRequest(server string, body NoteTypeCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNoteTypeCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewNoteTypeCreateRequestWithFormdataBody calls the generic NoteTypeCreate builder with application/x-www-form-urlencoded body
func NewNoteTypeCreateRequestWithFormdataBody(server string, body NoteTypeCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewNoteTypeCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewNoteTypeCreateRequestWithBody generates requests for NoteTypeCreate with any type of body
func NewNoteTypeCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/note_type/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNoteTypeDestroyRequest generates requests for NoteTypeDestroy
func NewNoteTypeDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/note_type/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNoteTypeRetrieveRequest generates requests for NoteTypeRetrieve
func NewNoteTypeRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/note_type/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNoteTypePartialUpdateRequest calls the generic NoteTypePartialUpdate builder with application/json body
func NewNoteTypePartialUpdateRequest(server string, id int, body NoteTypePartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNoteTypePartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewNoteTypePartialUpdateRequestWithFormdataBody calls the generic NoteTypePartialUpdate builder with application/x-www-form-urlencoded body
func NewNoteTypePartialUpdateRequestWithFormdataBody(server string, id int, body NoteTypePartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewNoteTypePartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewNoteTypePartialUpdateRequestWithBody generates requests for NoteTypePartialUpdate with any type of body
func NewNoteTypePartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/note_type/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNoteTypeUpdateRequest calls the generic NoteTypeUpdate builder with application/json body
func NewNoteTypeUpdateRequest(server string, id int, body NoteTypeUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNoteTypeUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewNoteTypeUpdateRequestWithFormdataBody calls the generic NoteTypeUpdate builder with application/x-www-form-urlencoded body
func NewNoteTypeUpdateRequestWithFormdataBody(server string, id int, body NoteTypeUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewNoteTypeUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewNoteTypeUpdateRequestWithBody generates requests for NoteTypeUpdate with any type of body
func NewNoteTypeUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/note_type/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNotesListRequest generates requests for NotesList
func NewNotesListRequest(server string, params *NotesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/notes/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Author != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "author", runtime.ParamLocationQuery, *params.Author); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Date != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EditTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "edit_time", runtime.ParamLocationQuery, *params.EditTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Edited != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "edited", runtime.ParamLocationQuery, *params.Edited); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Editor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "editor", runtime.ParamLocationQuery, *params.Editor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Entry != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "entry", runtime.ParamLocationQuery, *params.Entry); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Private != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "private", runtime.ParamLocationQuery, *params.Private); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNotesRetrieveRequest generates requests for NotesRetrieve
func NewNotesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/notes/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNotesPartialUpdateRequest calls the generic NotesPartialUpdate builder with application/json body
func NewNotesPartialUpdateRequest(server string, id int, body NotesPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNotesPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewNotesPartialUpdateRequestWithFormdataBody calls the generic NotesPartialUpdate builder with application/x-www-form-urlencoded body
func NewNotesPartialUpdateRequestWithFormdataBody(server string, id int, body NotesPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewNotesPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewNotesPartialUpdateRequestWithBody generates requests for NotesPartialUpdate with any type of body
func NewNotesPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/notes/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNotesUpdateRequest calls the generic NotesUpdate builder with application/json body
func NewNotesUpdateRequest(server string, id int, body NotesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNotesUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewNotesUpdateRequestWithFormdataBody calls the generic NotesUpdate builder with application/x-www-form-urlencoded body
func NewNotesUpdateRequestWithFormdataBody(server string, id int, body NotesUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewNotesUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewNotesUpdateRequestWithBody generates requests for NotesUpdate with any type of body
func NewNotesUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/notes/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNotificationsListRequest generates requests for NotificationsList
func NewNotificationsListRequest(server string, params *NotificationsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/notifications/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Product != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product", runtime.ParamLocationQuery, *params.Product); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.User != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user", runtime.ParamLocationQuery, *params.User); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNotificationsCreateRequest calls the generic NotificationsCreate builder with application/json body
func NewNotificationsCreateRequest(server string, body NotificationsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNotificationsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewNotificationsCreateRequestWithFormdataBody calls the generic NotificationsCreate builder with application/x-www-form-urlencoded body
func NewNotificationsCreateRequestWithFormdataBody(server string, body NotificationsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewNotificationsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewNotificationsCreateRequestWithBody generates requests for NotificationsCreate with any type of body
func NewNotificationsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/notifications/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNotificationsDestroyRequest generates requests for NotificationsDestroy
func NewNotificationsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/notifications/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNotificationsRetrieveRequest generates requests for NotificationsRetrieve
func NewNotificationsRetrieveRequest(server string, id int, params *NotificationsRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/notifications/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNotificationsPartialUpdateRequest calls the generic NotificationsPartialUpdate builder with application/json body
func NewNotificationsPartialUpdateRequest(server string, id int, body NotificationsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNotificationsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewNotificationsPartialUpdateRequestWithFormdataBody calls the generic NotificationsPartialUpdate builder with application/x-www-form-urlencoded body
func NewNotificationsPartialUpdateRequestWithFormdataBody(server string, id int, body NotificationsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewNotificationsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewNotificationsPartialUpdateRequestWithBody generates requests for NotificationsPartialUpdate with any type of body
func NewNotificationsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/notifications/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNotificationsUpdateRequest calls the generic NotificationsUpdate builder with application/json body
func NewNotificationsUpdateRequest(server string, id int, body NotificationsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNotificationsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewNotificationsUpdateRequestWithFormdataBody calls the generic NotificationsUpdate builder with application/x-www-form-urlencoded body
func NewNotificationsUpdateRequestWithFormdataBody(server string, id int, body NotificationsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewNotificationsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewNotificationsUpdateRequestWithBody generates requests for NotificationsUpdate with any type of body
func NewNotificationsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/notifications/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOa3SchemaRetrieveRequest generates requests for Oa3SchemaRetrieve
func NewOa3SchemaRetrieveRequest(server string, params *Oa3SchemaRetrieveParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/oa3/schema/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lang != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lang", runtime.ParamLocationQuery, *params.Lang); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductApiScanConfigurationsListRequest generates requests for ProductApiScanConfigurationsList
func NewProductApiScanConfigurationsListRequest(server string, params *ProductApiScanConfigurationsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_api_scan_configurations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Product != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product", runtime.ParamLocationQuery, *params.Product); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ServiceKey1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service_key_1", runtime.ParamLocationQuery, *params.ServiceKey1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ServiceKey2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service_key_2", runtime.ParamLocationQuery, *params.ServiceKey2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ServiceKey3 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service_key_3", runtime.ParamLocationQuery, *params.ServiceKey3); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ToolConfiguration != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tool_configuration", runtime.ParamLocationQuery, *params.ToolConfiguration); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductApiScanConfigurationsCreateRequest calls the generic ProductApiScanConfigurationsCreate builder with application/json body
func NewProductApiScanConfigurationsCreateRequest(server string, body ProductApiScanConfigurationsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProductApiScanConfigurationsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewProductApiScanConfigurationsCreateRequestWithFormdataBody calls the generic ProductApiScanConfigurationsCreate builder with application/x-www-form-urlencoded body
func NewProductApiScanConfigurationsCreateRequestWithFormdataBody(server string, body ProductApiScanConfigurationsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewProductApiScanConfigurationsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewProductApiScanConfigurationsCreateRequestWithBody generates requests for ProductApiScanConfigurationsCreate with any type of body
func NewProductApiScanConfigurationsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_api_scan_configurations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProductApiScanConfigurationsDestroyRequest generates requests for ProductApiScanConfigurationsDestroy
func NewProductApiScanConfigurationsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_api_scan_configurations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductApiScanConfigurationsRetrieveRequest generates requests for ProductApiScanConfigurationsRetrieve
func NewProductApiScanConfigurationsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_api_scan_configurations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductApiScanConfigurationsPartialUpdateRequest calls the generic ProductApiScanConfigurationsPartialUpdate builder with application/json body
func NewProductApiScanConfigurationsPartialUpdateRequest(server string, id int, body ProductApiScanConfigurationsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProductApiScanConfigurationsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewProductApiScanConfigurationsPartialUpdateRequestWithFormdataBody calls the generic ProductApiScanConfigurationsPartialUpdate builder with application/x-www-form-urlencoded body
func NewProductApiScanConfigurationsPartialUpdateRequestWithFormdataBody(server string, id int, body ProductApiScanConfigurationsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewProductApiScanConfigurationsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewProductApiScanConfigurationsPartialUpdateRequestWithBody generates requests for ProductApiScanConfigurationsPartialUpdate with any type of body
func NewProductApiScanConfigurationsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_api_scan_configurations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProductApiScanConfigurationsUpdateRequest calls the generic ProductApiScanConfigurationsUpdate builder with application/json body
func NewProductApiScanConfigurationsUpdateRequest(server string, id int, body ProductApiScanConfigurationsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProductApiScanConfigurationsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewProductApiScanConfigurationsUpdateRequestWithFormdataBody calls the generic ProductApiScanConfigurationsUpdate builder with application/x-www-form-urlencoded body
func NewProductApiScanConfigurationsUpdateRequestWithFormdataBody(server string, id int, body ProductApiScanConfigurationsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewProductApiScanConfigurationsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewProductApiScanConfigurationsUpdateRequestWithBody generates requests for ProductApiScanConfigurationsUpdate with any type of body
func NewProductApiScanConfigurationsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_api_scan_configurations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProductGroupsListRequest generates requests for ProductGroupsList
func NewProductGroupsListRequest(server string, params *ProductGroupsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_groups/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.GroupId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "group_id", runtime.ParamLocationQuery, *params.GroupId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProductId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product_id", runtime.ParamLocationQuery, *params.ProductId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductGroupsCreateRequest calls the generic ProductGroupsCreate builder with application/json body
func NewProductGroupsCreateRequest(server string, body ProductGroupsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProductGroupsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewProductGroupsCreateRequestWithFormdataBody calls the generic ProductGroupsCreate builder with application/x-www-form-urlencoded body
func NewProductGroupsCreateRequestWithFormdataBody(server string, body ProductGroupsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewProductGroupsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewProductGroupsCreateRequestWithBody generates requests for ProductGroupsCreate with any type of body
func NewProductGroupsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_groups/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProductGroupsDestroyRequest generates requests for ProductGroupsDestroy
func NewProductGroupsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_groups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductGroupsRetrieveRequest generates requests for ProductGroupsRetrieve
func NewProductGroupsRetrieveRequest(server string, id int, params *ProductGroupsRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_groups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductGroupsPartialUpdateRequest generates requests for ProductGroupsPartialUpdate
func NewProductGroupsPartialUpdateRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_groups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductGroupsUpdateRequest calls the generic ProductGroupsUpdate builder with application/json body
func NewProductGroupsUpdateRequest(server string, id int, body ProductGroupsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProductGroupsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewProductGroupsUpdateRequestWithFormdataBody calls the generic ProductGroupsUpdate builder with application/x-www-form-urlencoded body
func NewProductGroupsUpdateRequestWithFormdataBody(server string, id int, body ProductGroupsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewProductGroupsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewProductGroupsUpdateRequestWithBody generates requests for ProductGroupsUpdate with any type of body
func NewProductGroupsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_groups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProductMembersListRequest generates requests for ProductMembersList
func NewProductMembersListRequest(server string, params *ProductMembersListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_members/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProductId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product_id", runtime.ParamLocationQuery, *params.ProductId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_id", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductMembersCreateRequest calls the generic ProductMembersCreate builder with application/json body
func NewProductMembersCreateRequest(server string, body ProductMembersCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProductMembersCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewProductMembersCreateRequestWithFormdataBody calls the generic ProductMembersCreate builder with application/x-www-form-urlencoded body
func NewProductMembersCreateRequestWithFormdataBody(server string, body ProductMembersCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewProductMembersCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewProductMembersCreateRequestWithBody generates requests for ProductMembersCreate with any type of body
func NewProductMembersCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_members/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProductMembersDestroyRequest generates requests for ProductMembersDestroy
func NewProductMembersDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_members/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductMembersRetrieveRequest generates requests for ProductMembersRetrieve
func NewProductMembersRetrieveRequest(server string, id int, params *ProductMembersRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_members/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductMembersPartialUpdateRequest generates requests for ProductMembersPartialUpdate
func NewProductMembersPartialUpdateRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_members/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductMembersUpdateRequest calls the generic ProductMembersUpdate builder with application/json body
func NewProductMembersUpdateRequest(server string, id int, body ProductMembersUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProductMembersUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewProductMembersUpdateRequestWithFormdataBody calls the generic ProductMembersUpdate builder with application/x-www-form-urlencoded body
func NewProductMembersUpdateRequestWithFormdataBody(server string, id int, body ProductMembersUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewProductMembersUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewProductMembersUpdateRequestWithBody generates requests for ProductMembersUpdate with any type of body
func NewProductMembersUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_members/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProductTypeGroupsListRequest generates requests for ProductTypeGroupsList
func NewProductTypeGroupsListRequest(server string, params *ProductTypeGroupsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_type_groups/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.GroupId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "group_id", runtime.ParamLocationQuery, *params.GroupId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProductTypeId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product_type_id", runtime.ParamLocationQuery, *params.ProductTypeId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductTypeGroupsCreateRequest calls the generic ProductTypeGroupsCreate builder with application/json body
func NewProductTypeGroupsCreateRequest(server string, body ProductTypeGroupsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProductTypeGroupsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewProductTypeGroupsCreateRequestWithFormdataBody calls the generic ProductTypeGroupsCreate builder with application/x-www-form-urlencoded body
func NewProductTypeGroupsCreateRequestWithFormdataBody(server string, body ProductTypeGroupsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewProductTypeGroupsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewProductTypeGroupsCreateRequestWithBody generates requests for ProductTypeGroupsCreate with any type of body
func NewProductTypeGroupsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_type_groups/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProductTypeGroupsDestroyRequest generates requests for ProductTypeGroupsDestroy
func NewProductTypeGroupsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_type_groups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductTypeGroupsRetrieveRequest generates requests for ProductTypeGroupsRetrieve
func NewProductTypeGroupsRetrieveRequest(server string, id int, params *ProductTypeGroupsRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_type_groups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductTypeGroupsPartialUpdateRequest generates requests for ProductTypeGroupsPartialUpdate
func NewProductTypeGroupsPartialUpdateRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_type_groups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductTypeGroupsUpdateRequest calls the generic ProductTypeGroupsUpdate builder with application/json body
func NewProductTypeGroupsUpdateRequest(server string, id int, body ProductTypeGroupsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProductTypeGroupsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewProductTypeGroupsUpdateRequestWithFormdataBody calls the generic ProductTypeGroupsUpdate builder with application/x-www-form-urlencoded body
func NewProductTypeGroupsUpdateRequestWithFormdataBody(server string, id int, body ProductTypeGroupsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewProductTypeGroupsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewProductTypeGroupsUpdateRequestWithBody generates requests for ProductTypeGroupsUpdate with any type of body
func NewProductTypeGroupsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_type_groups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProductTypeMembersListRequest generates requests for ProductTypeMembersList
func NewProductTypeMembersListRequest(server string, params *ProductTypeMembersListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_type_members/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProductTypeId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product_type_id", runtime.ParamLocationQuery, *params.ProductTypeId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_id", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductTypeMembersCreateRequest calls the generic ProductTypeMembersCreate builder with application/json body
func NewProductTypeMembersCreateRequest(server string, body ProductTypeMembersCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProductTypeMembersCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewProductTypeMembersCreateRequestWithFormdataBody calls the generic ProductTypeMembersCreate builder with application/x-www-form-urlencoded body
func NewProductTypeMembersCreateRequestWithFormdataBody(server string, body ProductTypeMembersCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewProductTypeMembersCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewProductTypeMembersCreateRequestWithBody generates requests for ProductTypeMembersCreate with any type of body
func NewProductTypeMembersCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_type_members/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProductTypeMembersDestroyRequest generates requests for ProductTypeMembersDestroy
func NewProductTypeMembersDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_type_members/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductTypeMembersRetrieveRequest generates requests for ProductTypeMembersRetrieve
func NewProductTypeMembersRetrieveRequest(server string, id int, params *ProductTypeMembersRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_type_members/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductTypeMembersPartialUpdateRequest generates requests for ProductTypeMembersPartialUpdate
func NewProductTypeMembersPartialUpdateRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_type_members/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductTypeMembersUpdateRequest calls the generic ProductTypeMembersUpdate builder with application/json body
func NewProductTypeMembersUpdateRequest(server string, id int, body ProductTypeMembersUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProductTypeMembersUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewProductTypeMembersUpdateRequestWithFormdataBody calls the generic ProductTypeMembersUpdate builder with application/x-www-form-urlencoded body
func NewProductTypeMembersUpdateRequestWithFormdataBody(server string, id int, body ProductTypeMembersUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewProductTypeMembersUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewProductTypeMembersUpdateRequestWithBody generates requests for ProductTypeMembersUpdate with any type of body
func NewProductTypeMembersUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_type_members/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProductTypesListRequest generates requests for ProductTypesList
func NewProductTypesListRequest(server string, params *ProductTypesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_types/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Created != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created", runtime.ParamLocationQuery, *params.Created); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CriticalProduct != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "critical_product", runtime.ParamLocationQuery, *params.CriticalProduct); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.KeyProduct != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key_product", runtime.ParamLocationQuery, *params.KeyProduct); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Updated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated", runtime.ParamLocationQuery, *params.Updated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductTypesCreateRequest calls the generic ProductTypesCreate builder with application/json body
func NewProductTypesCreateRequest(server string, body ProductTypesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProductTypesCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewProductTypesCreateRequestWithFormdataBody calls the generic ProductTypesCreate builder with application/x-www-form-urlencoded body
func NewProductTypesCreateRequestWithFormdataBody(server string, body ProductTypesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewProductTypesCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewProductTypesCreateRequestWithBody generates requests for ProductTypesCreate with any type of body
func NewProductTypesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_types/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProductTypesDestroyRequest generates requests for ProductTypesDestroy
func NewProductTypesDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_types/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductTypesRetrieveRequest generates requests for ProductTypesRetrieve
func NewProductTypesRetrieveRequest(server string, id int, params *ProductTypesRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_types/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductTypesPartialUpdateRequest calls the generic ProductTypesPartialUpdate builder with application/json body
func NewProductTypesPartialUpdateRequest(server string, id int, body ProductTypesPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProductTypesPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewProductTypesPartialUpdateRequestWithFormdataBody calls the generic ProductTypesPartialUpdate builder with application/x-www-form-urlencoded body
func NewProductTypesPartialUpdateRequestWithFormdataBody(server string, id int, body ProductTypesPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewProductTypesPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewProductTypesPartialUpdateRequestWithBody generates requests for ProductTypesPartialUpdate with any type of body
func NewProductTypesPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_types/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProductTypesUpdateRequest calls the generic ProductTypesUpdate builder with application/json body
func NewProductTypesUpdateRequest(server string, id int, body ProductTypesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProductTypesUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewProductTypesUpdateRequestWithFormdataBody calls the generic ProductTypesUpdate builder with application/x-www-form-urlencoded body
func NewProductTypesUpdateRequestWithFormdataBody(server string, id int, body ProductTypesUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewProductTypesUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewProductTypesUpdateRequestWithBody generates requests for ProductTypesUpdate with any type of body
func NewProductTypesUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_types/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProductTypesGenerateReportCreateRequest calls the generic ProductTypesGenerateReportCreate builder with application/json body
func NewProductTypesGenerateReportCreateRequest(server string, id int, body ProductTypesGenerateReportCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProductTypesGenerateReportCreateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewProductTypesGenerateReportCreateRequestWithFormdataBody calls the generic ProductTypesGenerateReportCreate builder with application/x-www-form-urlencoded body
func NewProductTypesGenerateReportCreateRequestWithFormdataBody(server string, id int, body ProductTypesGenerateReportCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewProductTypesGenerateReportCreateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewProductTypesGenerateReportCreateRequestWithBody generates requests for ProductTypesGenerateReportCreate with any type of body
func NewProductTypesGenerateReportCreateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_types/%s/generate_report/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProductsListRequest generates requests for ProductsList
func NewProductsListRequest(server string, params *ProductsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/products/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BusinessCriticality != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "business_criticality", runtime.ParamLocationQuery, *params.BusinessCriticality); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Created != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created", runtime.ParamLocationQuery, *params.Created); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalAudience != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_audience", runtime.ParamLocationQuery, *params.ExternalAudience); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InternetAccessible != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "internet_accessible", runtime.ParamLocationQuery, *params.InternetAccessible); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lifecycle != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lifecycle", runtime.ParamLocationQuery, *params.Lifecycle); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotTag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_tag", runtime.ParamLocationQuery, *params.NotTag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_tags", runtime.ParamLocationQuery, *params.NotTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.O != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "o", runtime.ParamLocationQuery, *params.O); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Origin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "origin", runtime.ParamLocationQuery, *params.Origin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Platform != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "platform", runtime.ParamLocationQuery, *params.Platform); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProdNumericGrade != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "prod_numeric_grade", runtime.ParamLocationQuery, *params.ProdNumericGrade); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProdType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "prod_type", runtime.ParamLocationQuery, *params.ProdType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProductManager != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "product_manager", runtime.ParamLocationQuery, *params.ProductManager); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Regulations != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "regulations", runtime.ParamLocationQuery, *params.Regulations); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Revenue != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "revenue", runtime.ParamLocationQuery, *params.Revenue); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TeamManager != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "team_manager", runtime.ParamLocationQuery, *params.TeamManager); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TechnicalContact != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "technical_contact", runtime.ParamLocationQuery, *params.TechnicalContact); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "tid", runtime.ParamLocationQuery, *params.Tid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Updated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated", runtime.ParamLocationQuery, *params.Updated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserRecords != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_records", runtime.ParamLocationQuery, *params.UserRecords); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductsCreateRequest calls the generic ProductsCreate builder with application/json body
func NewProductsCreateRequest(server string, body ProductsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProductsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewProductsCreateRequestWithFormdataBody calls the generic ProductsCreate builder with application/x-www-form-urlencoded body
func NewProductsCreateRequestWithFormdataBody(server string, body ProductsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewProductsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewProductsCreateRequestWithBody generates requests for ProductsCreate with any type of body
func NewProductsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/products/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProductsDestroyRequest generates requests for ProductsDestroy
func NewProductsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/products/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductsRetrieveRequest generates requests for ProductsRetrieve
func NewProductsRetrieveRequest(server string, id int, params *ProductsRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/products/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductsPartialUpdateRequest calls the generic ProductsPartialUpdate builder with application/json body
func NewProductsPartialUpdateRequest(server string, id int, body ProductsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProductsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewProductsPartialUpdateRequestWithFormdataBody calls the generic ProductsPartialUpdate builder with application/x-www-form-urlencoded body
func NewProductsPartialUpdateRequestWithFormdataBody(server string, id int, body ProductsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewProductsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewProductsPartialUpdateRequestWithBody generates requests for ProductsPartialUpdate with any type of body
func NewProductsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/products/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProductsUpdateRequest calls the generic ProductsUpdate builder with application/json body
func NewProductsUpdateRequest(server string, id int, body ProductsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProductsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewProductsUpdateRequestWithFormdataBody calls the generic ProductsUpdate builder with application/x-www-form-urlencoded body
func NewProductsUpdateRequestWithFormdataBody(server string, id int, body ProductsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewProductsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewProductsUpdateRequestWithBody generates requests for ProductsUpdate with any type of body
func NewProductsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/products/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProductsGenerateReportCreateRequest calls the generic ProductsGenerateReportCreate builder with application/json body
func NewProductsGenerateReportCreateRequest(server string, id int, body ProductsGenerateReportCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProductsGenerateReportCreateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewProductsGenerateReportCreateRequestWithFormdataBody calls the generic ProductsGenerateReportCreate builder with application/x-www-form-urlencoded body
func NewProductsGenerateReportCreateRequestWithFormdataBody(server string, id int, body ProductsGenerateReportCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewProductsGenerateReportCreateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewProductsGenerateReportCreateRequestWithBody generates requests for ProductsGenerateReportCreate with any type of body
func NewProductsGenerateReportCreateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/products/%s/generate_report/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRegulationsListRequest generates requests for RegulationsList
func NewRegulationsListRequest(server string, params *RegulationsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/regulations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRegulationsCreateRequest calls the generic RegulationsCreate builder with application/json body
func NewRegulationsCreateRequest(server string, body RegulationsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegulationsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewRegulationsCreateRequestWithFormdataBody calls the generic RegulationsCreate builder with application/x-www-form-urlencoded body
func NewRegulationsCreateRequestWithFormdataBody(server string, body RegulationsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewRegulationsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewRegulationsCreateRequestWithBody generates requests for RegulationsCreate with any type of body
func NewRegulationsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/regulations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRegulationsDestroyRequest generates requests for RegulationsDestroy
func NewRegulationsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/regulations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRegulationsRetrieveRequest generates requests for RegulationsRetrieve
func NewRegulationsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/regulations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRegulationsPartialUpdateRequest calls the generic RegulationsPartialUpdate builder with application/json body
func NewRegulationsPartialUpdateRequest(server string, id int, body RegulationsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegulationsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewRegulationsPartialUpdateRequestWithFormdataBody calls the generic RegulationsPartialUpdate builder with application/x-www-form-urlencoded body
func NewRegulationsPartialUpdateRequestWithFormdataBody(server string, id int, body RegulationsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewRegulationsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewRegulationsPartialUpdateRequestWithBody generates requests for RegulationsPartialUpdate with any type of body
func NewRegulationsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/regulations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRegulationsUpdateRequest calls the generic RegulationsUpdate builder with application/json body
func NewRegulationsUpdateRequest(server string, id int, body RegulationsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegulationsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewRegulationsUpdateRequestWithFormdataBody calls the generic RegulationsUpdate builder with application/x-www-form-urlencoded body
func NewRegulationsUpdateRequestWithFormdataBody(server string, id int, body RegulationsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewRegulationsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewRegulationsUpdateRequestWithBody generates requests for RegulationsUpdate with any type of body
func NewRegulationsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/regulations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReimportScanCreateRequestWithBody generates requests for ReimportScanCreate with any type of body
func NewReimportScanCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/reimport-scan/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRolesListRequest generates requests for RolesList
func NewRolesListRequest(server string, params *RolesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/roles/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRolesRetrieveRequest generates requests for RolesRetrieve
func NewRolesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/roles/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSonarqubeIssuesListRequest generates requests for SonarqubeIssuesList
func NewSonarqubeIssuesListRequest(server string, params *SonarqubeIssuesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/sonarqube_issues/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Key != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSonarqubeIssuesCreateRequest calls the generic SonarqubeIssuesCreate builder with application/json body
func NewSonarqubeIssuesCreateRequest(server string, body SonarqubeIssuesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSonarqubeIssuesCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewSonarqubeIssuesCreateRequestWithFormdataBody calls the generic SonarqubeIssuesCreate builder with application/x-www-form-urlencoded body
func NewSonarqubeIssuesCreateRequestWithFormdataBody(server string, body SonarqubeIssuesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewSonarqubeIssuesCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewSonarqubeIssuesCreateRequestWithBody generates requests for SonarqubeIssuesCreate with any type of body
func NewSonarqubeIssuesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/sonarqube_issues/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSonarqubeIssuesDestroyRequest generates requests for SonarqubeIssuesDestroy
func NewSonarqubeIssuesDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/sonarqube_issues/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSonarqubeIssuesRetrieveRequest generates requests for SonarqubeIssuesRetrieve
func NewSonarqubeIssuesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/sonarqube_issues/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSonarqubeIssuesPartialUpdateRequest calls the generic SonarqubeIssuesPartialUpdate builder with application/json body
func NewSonarqubeIssuesPartialUpdateRequest(server string, id int, body SonarqubeIssuesPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSonarqubeIssuesPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewSonarqubeIssuesPartialUpdateRequestWithFormdataBody calls the generic SonarqubeIssuesPartialUpdate builder with application/x-www-form-urlencoded body
func NewSonarqubeIssuesPartialUpdateRequestWithFormdataBody(server string, id int, body SonarqubeIssuesPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewSonarqubeIssuesPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewSonarqubeIssuesPartialUpdateRequestWithBody generates requests for SonarqubeIssuesPartialUpdate with any type of body
func NewSonarqubeIssuesPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/sonarqube_issues/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSonarqubeIssuesUpdateRequest calls the generic SonarqubeIssuesUpdate builder with application/json body
func NewSonarqubeIssuesUpdateRequest(server string, id int, body SonarqubeIssuesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSonarqubeIssuesUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewSonarqubeIssuesUpdateRequestWithFormdataBody calls the generic SonarqubeIssuesUpdate builder with application/x-www-form-urlencoded body
func NewSonarqubeIssuesUpdateRequestWithFormdataBody(server string, id int, body SonarqubeIssuesUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewSonarqubeIssuesUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewSonarqubeIssuesUpdateRequestWithBody generates requests for SonarqubeIssuesUpdate with any type of body
func NewSonarqubeIssuesUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/sonarqube_issues/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSonarqubeTransitionsListRequest generates requests for SonarqubeTransitionsList
func NewSonarqubeTransitionsListRequest(server string, params *SonarqubeTransitionsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/sonarqube_transitions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FindingStatus != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "finding_status", runtime.ParamLocationQuery, *params.FindingStatus); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SonarqubeIssue != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sonarqube_issue", runtime.ParamLocationQuery, *params.SonarqubeIssue); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SonarqubeStatus != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sonarqube_status", runtime.ParamLocationQuery, *params.SonarqubeStatus); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Transitions != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transitions", runtime.ParamLocationQuery, *params.Transitions); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSonarqubeTransitionsCreateRequest calls the generic SonarqubeTransitionsCreate builder with application/json body
func NewSonarqubeTransitionsCreateRequest(server string, body SonarqubeTransitionsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSonarqubeTransitionsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewSonarqubeTransitionsCreateRequestWithFormdataBody calls the generic SonarqubeTransitionsCreate builder with application/x-www-form-urlencoded body
func NewSonarqubeTransitionsCreateRequestWithFormdataBody(server string, body SonarqubeTransitionsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewSonarqubeTransitionsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewSonarqubeTransitionsCreateRequestWithBody generates requests for SonarqubeTransitionsCreate with any type of body
func NewSonarqubeTransitionsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/sonarqube_transitions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSonarqubeTransitionsDestroyRequest generates requests for SonarqubeTransitionsDestroy
func NewSonarqubeTransitionsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/sonarqube_transitions/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSonarqubeTransitionsRetrieveRequest generates requests for SonarqubeTransitionsRetrieve
func NewSonarqubeTransitionsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/sonarqube_transitions/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSonarqubeTransitionsPartialUpdateRequest calls the generic SonarqubeTransitionsPartialUpdate builder with application/json body
func NewSonarqubeTransitionsPartialUpdateRequest(server string, id int, body SonarqubeTransitionsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSonarqubeTransitionsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewSonarqubeTransitionsPartialUpdateRequestWithFormdataBody calls the generic SonarqubeTransitionsPartialUpdate builder with application/x-www-form-urlencoded body
func NewSonarqubeTransitionsPartialUpdateRequestWithFormdataBody(server string, id int, body SonarqubeTransitionsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewSonarqubeTransitionsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewSonarqubeTransitionsPartialUpdateRequestWithBody generates requests for SonarqubeTransitionsPartialUpdate with any type of body
func NewSonarqubeTransitionsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/sonarqube_transitions/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSonarqubeTransitionsUpdateRequest calls the generic SonarqubeTransitionsUpdate builder with application/json body
func NewSonarqubeTransitionsUpdateRequest(server string, id int, body SonarqubeTransitionsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSonarqubeTransitionsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewSonarqubeTransitionsUpdateRequestWithFormdataBody calls the generic SonarqubeTransitionsUpdate builder with application/x-www-form-urlencoded body
func NewSonarqubeTransitionsUpdateRequestWithFormdataBody(server string, id int, body SonarqubeTransitionsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewSonarqubeTransitionsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewSonarqubeTransitionsUpdateRequestWithBody generates requests for SonarqubeTransitionsUpdate with any type of body
func NewSonarqubeTransitionsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/sonarqube_transitions/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewStubFindingsListRequest generates requests for StubFindingsList
func NewStubFindingsListRequest(server string, params *StubFindingsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/stub_findings/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Date != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Severity != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "severity", runtime.ParamLocationQuery, *params.Severity); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Title != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "title", runtime.ParamLocationQuery, *params.Title); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStubFindingsCreateRequest calls the generic StubFindingsCreate builder with application/json body
func NewStubFindingsCreateRequest(server string, body StubFindingsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStubFindingsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewStubFindingsCreateRequestWithFormdataBody calls the generic StubFindingsCreate builder with application/x-www-form-urlencoded body
func NewStubFindingsCreateRequestWithFormdataBody(server string, body StubFindingsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewStubFindingsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewStubFindingsCreateRequestWithBody generates requests for StubFindingsCreate with any type of body
func NewStubFindingsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/stub_findings/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewStubFindingsDestroyRequest generates requests for StubFindingsDestroy
func NewStubFindingsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/stub_findings/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStubFindingsRetrieveRequest generates requests for StubFindingsRetrieve
func NewStubFindingsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/stub_findings/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStubFindingsPartialUpdateRequest calls the generic StubFindingsPartialUpdate builder with application/json body
func NewStubFindingsPartialUpdateRequest(server string, id int, body StubFindingsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStubFindingsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewStubFindingsPartialUpdateRequestWithFormdataBody calls the generic StubFindingsPartialUpdate builder with application/x-www-form-urlencoded body
func NewStubFindingsPartialUpdateRequestWithFormdataBody(server string, id int, body StubFindingsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewStubFindingsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewStubFindingsPartialUpdateRequestWithBody generates requests for StubFindingsPartialUpdate with any type of body
func NewStubFindingsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/stub_findings/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewStubFindingsUpdateRequest calls the generic StubFindingsUpdate builder with application/json body
func NewStubFindingsUpdateRequest(server string, id int, body StubFindingsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStubFindingsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewStubFindingsUpdateRequestWithFormdataBody calls the generic StubFindingsUpdate builder with application/x-www-form-urlencoded body
func NewStubFindingsUpdateRequestWithFormdataBody(server string, id int, body StubFindingsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewStubFindingsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewStubFindingsUpdateRequestWithBody generates requests for StubFindingsUpdate with any type of body
func NewStubFindingsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/stub_findings/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSystemSettingsListRequest generates requests for SystemSettingsList
func NewSystemSettingsListRequest(server string, params *SystemSettingsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/system_settings/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSystemSettingsPartialUpdateRequest calls the generic SystemSettingsPartialUpdate builder with application/json body
func NewSystemSettingsPartialUpdateRequest(server string, id int, body SystemSettingsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSystemSettingsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewSystemSettingsPartialUpdateRequestWithFormdataBody calls the generic SystemSettingsPartialUpdate builder with application/x-www-form-urlencoded body
func NewSystemSettingsPartialUpdateRequestWithFormdataBody(server string, id int, body SystemSettingsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewSystemSettingsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewSystemSettingsPartialUpdateRequestWithBody generates requests for SystemSettingsPartialUpdate with any type of body
func NewSystemSettingsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/system_settings/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSystemSettingsUpdateRequest calls the generic SystemSettingsUpdate builder with application/json body
func NewSystemSettingsUpdateRequest(server string, id int, body SystemSettingsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSystemSettingsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewSystemSettingsUpdateRequestWithFormdataBody calls the generic SystemSettingsUpdate builder with application/x-www-form-urlencoded body
func NewSystemSettingsUpdateRequestWithFormdataBody(server string, id int, body SystemSettingsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewSystemSettingsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewSystemSettingsUpdateRequestWithBody generates requests for SystemSettingsUpdate with any type of body
func NewSystemSettingsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/system_settings/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTechnologiesListRequest generates requests for TechnologiesList
func NewTechnologiesListRequest(server string, params *TechnologiesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/technologies/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotTag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_tag", runtime.ParamLocationQuery, *params.NotTag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_tags", runtime.ParamLocationQuery, *params.NotTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Product != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product", runtime.ParamLocationQuery, *params.Product); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.User != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user", runtime.ParamLocationQuery, *params.User); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTechnologiesCreateRequest calls the generic TechnologiesCreate builder with application/json body
func NewTechnologiesCreateRequest(server string, body TechnologiesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTechnologiesCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewTechnologiesCreateRequestWithFormdataBody calls the generic TechnologiesCreate builder with application/x-www-form-urlencoded body
func NewTechnologiesCreateRequestWithFormdataBody(server string, body TechnologiesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTechnologiesCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewTechnologiesCreateRequestWithBody generates requests for TechnologiesCreate with any type of body
func NewTechnologiesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/technologies/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTechnologiesDestroyRequest generates requests for TechnologiesDestroy
func NewTechnologiesDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/technologies/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTechnologiesRetrieveRequest generates requests for TechnologiesRetrieve
func NewTechnologiesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/technologies/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTechnologiesPartialUpdateRequest calls the generic TechnologiesPartialUpdate builder with application/json body
func NewTechnologiesPartialUpdateRequest(server string, id int, body TechnologiesPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTechnologiesPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewTechnologiesPartialUpdateRequestWithFormdataBody calls the generic TechnologiesPartialUpdate builder with application/x-www-form-urlencoded body
func NewTechnologiesPartialUpdateRequestWithFormdataBody(server string, id int, body TechnologiesPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTechnologiesPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewTechnologiesPartialUpdateRequestWithBody generates requests for TechnologiesPartialUpdate with any type of body
func NewTechnologiesPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/technologies/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTechnologiesUpdateRequest calls the generic TechnologiesUpdate builder with application/json body
func NewTechnologiesUpdateRequest(server string, id int, body TechnologiesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTechnologiesUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewTechnologiesUpdateRequestWithFormdataBody calls the generic TechnologiesUpdate builder with application/x-www-form-urlencoded body
func NewTechnologiesUpdateRequestWithFormdataBody(server string, id int, body TechnologiesUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTechnologiesUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewTechnologiesUpdateRequestWithBody generates requests for TechnologiesUpdate with any type of body
func NewTechnologiesUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/technologies/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTestImportsListRequest generates requests for TestImportsList
func NewTestImportsListRequest(server string, params *TestImportsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/test_imports/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BranchTag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "branch_tag", runtime.ParamLocationQuery, *params.BranchTag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BuildId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "build_id", runtime.ParamLocationQuery, *params.BuildId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CommitHash != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "commit_hash", runtime.ParamLocationQuery, *params.CommitHash); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FindingsAffected != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "findings_affected", runtime.ParamLocationQuery, *params.FindingsAffected); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Test != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "test", runtime.ParamLocationQuery, *params.Test); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TestImportFindingActionAction != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "test_import_finding_action__action", runtime.ParamLocationQuery, *params.TestImportFindingActionAction); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TestImportFindingActionCreated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "test_import_finding_action__created", runtime.ParamLocationQuery, *params.TestImportFindingActionCreated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TestImportFindingActionFinding != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "test_import_finding_action__finding", runtime.ParamLocationQuery, *params.TestImportFindingActionFinding); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestImportsCreateRequest calls the generic TestImportsCreate builder with application/json body
func NewTestImportsCreateRequest(server string, body TestImportsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTestImportsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewTestImportsCreateRequestWithFormdataBody calls the generic TestImportsCreate builder with application/x-www-form-urlencoded body
func NewTestImportsCreateRequestWithFormdataBody(server string, body TestImportsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTestImportsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewTestImportsCreateRequestWithBody generates requests for TestImportsCreate with any type of body
func NewTestImportsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/test_imports/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTestImportsDestroyRequest generates requests for TestImportsDestroy
func NewTestImportsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/test_imports/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestImportsRetrieveRequest generates requests for TestImportsRetrieve
func NewTestImportsRetrieveRequest(server string, id int, params *TestImportsRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/test_imports/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestImportsPartialUpdateRequest calls the generic TestImportsPartialUpdate builder with application/json body
func NewTestImportsPartialUpdateRequest(server string, id int, body TestImportsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTestImportsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewTestImportsPartialUpdateRequestWithFormdataBody calls the generic TestImportsPartialUpdate builder with application/x-www-form-urlencoded body
func NewTestImportsPartialUpdateRequestWithFormdataBody(server string, id int, body TestImportsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTestImportsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewTestImportsPartialUpdateRequestWithBody generates requests for TestImportsPartialUpdate with any type of body
func NewTestImportsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/test_imports/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTestImportsUpdateRequest calls the generic TestImportsUpdate builder with application/json body
func NewTestImportsUpdateRequest(server string, id int, body TestImportsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTestImportsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewTestImportsUpdateRequestWithFormdataBody calls the generic TestImportsUpdate builder with application/x-www-form-urlencoded body
func NewTestImportsUpdateRequestWithFormdataBody(server string, id int, body TestImportsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTestImportsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewTestImportsUpdateRequestWithBody generates requests for TestImportsUpdate with any type of body
func NewTestImportsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/test_imports/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTestTypesListRequest generates requests for TestTypesList
func NewTestTypesListRequest(server string, params *TestTypesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/test_types/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestTypesCreateRequest calls the generic TestTypesCreate builder with application/json body
func NewTestTypesCreateRequest(server string, body TestTypesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTestTypesCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewTestTypesCreateRequestWithFormdataBody calls the generic TestTypesCreate builder with application/x-www-form-urlencoded body
func NewTestTypesCreateRequestWithFormdataBody(server string, body TestTypesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTestTypesCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewTestTypesCreateRequestWithBody generates requests for TestTypesCreate with any type of body
func NewTestTypesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/test_types/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTestTypesRetrieveRequest generates requests for TestTypesRetrieve
func NewTestTypesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/test_types/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestTypesPartialUpdateRequest calls the generic TestTypesPartialUpdate builder with application/json body
func NewTestTypesPartialUpdateRequest(server string, id int, body TestTypesPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTestTypesPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewTestTypesPartialUpdateRequestWithFormdataBody calls the generic TestTypesPartialUpdate builder with application/x-www-form-urlencoded body
func NewTestTypesPartialUpdateRequestWithFormdataBody(server string, id int, body TestTypesPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTestTypesPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewTestTypesPartialUpdateRequestWithBody generates requests for TestTypesPartialUpdate with any type of body
func NewTestTypesPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/test_types/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTestTypesUpdateRequest calls the generic TestTypesUpdate builder with application/json body
func NewTestTypesUpdateRequest(server string, id int, body TestTypesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTestTypesUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewTestTypesUpdateRequestWithFormdataBody calls the generic TestTypesUpdate builder with application/x-www-form-urlencoded body
func NewTestTypesUpdateRequestWithFormdataBody(server string, id int, body TestTypesUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTestTypesUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewTestTypesUpdateRequestWithBody generates requests for TestTypesUpdate with any type of body
func NewTestTypesUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/test_types/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTestsListRequest generates requests for TestsList
func NewTestsListRequest(server string, params *TestsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tests/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ActualTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "actual_time", runtime.ParamLocationQuery, *params.ActualTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApiScanConfiguration != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api_scan_configuration", runtime.ParamLocationQuery, *params.ApiScanConfiguration); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BranchTag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "branch_tag", runtime.ParamLocationQuery, *params.BranchTag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BuildId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "build_id", runtime.ParamLocationQuery, *params.BuildId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CommitHash != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "commit_hash", runtime.ParamLocationQuery, *params.CommitHash); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Engagement != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "engagement", runtime.ParamLocationQuery, *params.Engagement); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EngagementProductTagsName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "engagement__product__tags__name", runtime.ParamLocationQuery, *params.EngagementProductTagsName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EngagementTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "engagement__tags", runtime.ParamLocationQuery, *params.EngagementTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotEngagementProductTagsName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_engagement__product__tags__name", runtime.ParamLocationQuery, *params.NotEngagementProductTagsName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotEngagementTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_engagement__tags", runtime.ParamLocationQuery, *params.NotEngagementTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotTag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_tag", runtime.ParamLocationQuery, *params.NotTag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_tags", runtime.ParamLocationQuery, *params.NotTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Notes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "notes", runtime.ParamLocationQuery, *params.Notes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.O != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "o", runtime.ParamLocationQuery, *params.O); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PercentComplete != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "percent_complete", runtime.ParamLocationQuery, *params.PercentComplete); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TargetEnd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "target_end", runtime.ParamLocationQuery, *params.TargetEnd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TargetStart != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "target_start", runtime.ParamLocationQuery, *params.TargetStart); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TestType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "test_type", runtime.ParamLocationQuery, *params.TestType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Title != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "title", runtime.ParamLocationQuery, *params.Title); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestsCreateRequest calls the generic TestsCreate builder with application/json body
func NewTestsCreateRequest(server string, body TestsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTestsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewTestsCreateRequestWithFormdataBody calls the generic TestsCreate builder with application/x-www-form-urlencoded body
func NewTestsCreateRequestWithFormdataBody(server string, body TestsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTestsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewTestsCreateRequestWithBody generates requests for TestsCreate with any type of body
func NewTestsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tests/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTestsDestroyRequest generates requests for TestsDestroy
func NewTestsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tests/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestsRetrieveRequest generates requests for TestsRetrieve
func NewTestsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tests/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestsPartialUpdateRequest calls the generic TestsPartialUpdate builder with application/json body
func NewTestsPartialUpdateRequest(server string, id int, body TestsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTestsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewTestsPartialUpdateRequestWithFormdataBody calls the generic TestsPartialUpdate builder with application/x-www-form-urlencoded body
func NewTestsPartialUpdateRequestWithFormdataBody(server string, id int, body TestsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTestsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewTestsPartialUpdateRequestWithBody generates requests for TestsPartialUpdate with any type of body
func NewTestsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tests/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTestsUpdateRequest calls the generic TestsUpdate builder with application/json body
func NewTestsUpdateRequest(server string, id int, body TestsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTestsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewTestsUpdateRequestWithFormdataBody calls the generic TestsUpdate builder with application/x-www-form-urlencoded body
func NewTestsUpdateRequestWithFormdataBody(server string, id int, body TestsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTestsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewTestsUpdateRequestWithBody generates requests for TestsUpdate with any type of body
func NewTestsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tests/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTestsAcceptRisksCreateRequest calls the generic TestsAcceptRisksCreate builder with application/json body
func NewTestsAcceptRisksCreateRequest(server string, id int, body TestsAcceptRisksCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTestsAcceptRisksCreateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewTestsAcceptRisksCreateRequestWithFormdataBody calls the generic TestsAcceptRisksCreate builder with application/x-www-form-urlencoded body
func NewTestsAcceptRisksCreateRequestWithFormdataBody(server string, id int, body TestsAcceptRisksCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTestsAcceptRisksCreateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewTestsAcceptRisksCreateRequestWithBody generates requests for TestsAcceptRisksCreate with any type of body
func NewTestsAcceptRisksCreateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tests/%s/accept_risks/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTestsFilesRetrieveRequest generates requests for TestsFilesRetrieve
func NewTestsFilesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tests/%s/files/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestsFilesCreateRequestWithBody generates requests for TestsFilesCreate with any type of body
func NewTestsFilesCreateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tests/%s/files/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTestsGenerateReportCreateRequest calls the generic TestsGenerateReportCreate builder with application/json body
func NewTestsGenerateReportCreateRequest(server string, id int, body TestsGenerateReportCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTestsGenerateReportCreateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewTestsGenerateReportCreateRequestWithFormdataBody calls the generic TestsGenerateReportCreate builder with application/x-www-form-urlencoded body
func NewTestsGenerateReportCreateRequestWithFormdataBody(server string, id int, body TestsGenerateReportCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTestsGenerateReportCreateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewTestsGenerateReportCreateRequestWithBody generates requests for TestsGenerateReportCreate with any type of body
func NewTestsGenerateReportCreateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tests/%s/generate_report/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTestsNotesRetrieveRequest generates requests for TestsNotesRetrieve
func NewTestsNotesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tests/%s/notes/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestsNotesCreateRequest calls the generic TestsNotesCreate builder with application/json body
func NewTestsNotesCreateRequest(server string, id int, body TestsNotesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTestsNotesCreateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewTestsNotesCreateRequestWithFormdataBody calls the generic TestsNotesCreate builder with application/x-www-form-urlencoded body
func NewTestsNotesCreateRequestWithFormdataBody(server string, id int, body TestsNotesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTestsNotesCreateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewTestsNotesCreateRequestWithBody generates requests for TestsNotesCreate with any type of body
func NewTestsNotesCreateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tests/%s/notes/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewToolConfigurationsListRequest generates requests for ToolConfigurationsList
func NewToolConfigurationsListRequest(server string, params *ToolConfigurationsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tool_configurations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AuthenticationType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "authentication_type", runtime.ParamLocationQuery, *params.AuthenticationType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ToolType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tool_type", runtime.ParamLocationQuery, *params.ToolType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Url != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, *params.Url); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewToolConfigurationsCreateRequest calls the generic ToolConfigurationsCreate builder with application/json body
func NewToolConfigurationsCreateRequest(server string, body ToolConfigurationsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewToolConfigurationsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewToolConfigurationsCreateRequestWithFormdataBody calls the generic ToolConfigurationsCreate builder with application/x-www-form-urlencoded body
func NewToolConfigurationsCreateRequestWithFormdataBody(server string, body ToolConfigurationsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewToolConfigurationsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewToolConfigurationsCreateRequestWithBody generates requests for ToolConfigurationsCreate with any type of body
func NewToolConfigurationsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tool_configurations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewToolConfigurationsDestroyRequest generates requests for ToolConfigurationsDestroy
func NewToolConfigurationsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tool_configurations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewToolConfigurationsRetrieveRequest generates requests for ToolConfigurationsRetrieve
func NewToolConfigurationsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tool_configurations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewToolConfigurationsPartialUpdateRequest calls the generic ToolConfigurationsPartialUpdate builder with application/json body
func NewToolConfigurationsPartialUpdateRequest(server string, id int, body ToolConfigurationsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewToolConfigurationsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewToolConfigurationsPartialUpdateRequestWithFormdataBody calls the generic ToolConfigurationsPartialUpdate builder with application/x-www-form-urlencoded body
func NewToolConfigurationsPartialUpdateRequestWithFormdataBody(server string, id int, body ToolConfigurationsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewToolConfigurationsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewToolConfigurationsPartialUpdateRequestWithBody generates requests for ToolConfigurationsPartialUpdate with any type of body
func NewToolConfigurationsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tool_configurations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewToolConfigurationsUpdateRequest calls the generic ToolConfigurationsUpdate builder with application/json body
func NewToolConfigurationsUpdateRequest(server string, id int, body ToolConfigurationsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewToolConfigurationsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewToolConfigurationsUpdateRequestWithFormdataBody calls the generic ToolConfigurationsUpdate builder with application/x-www-form-urlencoded body
func NewToolConfigurationsUpdateRequestWithFormdataBody(server string, id int, body ToolConfigurationsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewToolConfigurationsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewToolConfigurationsUpdateRequestWithBody generates requests for ToolConfigurationsUpdate with any type of body
func NewToolConfigurationsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tool_configurations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewToolProductSettingsListRequest generates requests for ToolProductSettingsList
func NewToolProductSettingsListRequest(server string, params *ToolProductSettingsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tool_product_settings/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Product != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product", runtime.ParamLocationQuery, *params.Product); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ToolConfiguration != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tool_configuration", runtime.ParamLocationQuery, *params.ToolConfiguration); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ToolProjectId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tool_project_id", runtime.ParamLocationQuery, *params.ToolProjectId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Url != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, *params.Url); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewToolProductSettingsCreateRequest calls the generic ToolProductSettingsCreate builder with application/json body
func NewToolProductSettingsCreateRequest(server string, body ToolProductSettingsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewToolProductSettingsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewToolProductSettingsCreateRequestWithFormdataBody calls the generic ToolProductSettingsCreate builder with application/x-www-form-urlencoded body
func NewToolProductSettingsCreateRequestWithFormdataBody(server string, body ToolProductSettingsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewToolProductSettingsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewToolProductSettingsCreateRequestWithBody generates requests for ToolProductSettingsCreate with any type of body
func NewToolProductSettingsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tool_product_settings/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewToolProductSettingsDestroyRequest generates requests for ToolProductSettingsDestroy
func NewToolProductSettingsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tool_product_settings/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewToolProductSettingsRetrieveRequest generates requests for ToolProductSettingsRetrieve
func NewToolProductSettingsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tool_product_settings/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewToolProductSettingsPartialUpdateRequest calls the generic ToolProductSettingsPartialUpdate builder with application/json body
func NewToolProductSettingsPartialUpdateRequest(server string, id int, body ToolProductSettingsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewToolProductSettingsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewToolProductSettingsPartialUpdateRequestWithFormdataBody calls the generic ToolProductSettingsPartialUpdate builder with application/x-www-form-urlencoded body
func NewToolProductSettingsPartialUpdateRequestWithFormdataBody(server string, id int, body ToolProductSettingsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewToolProductSettingsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewToolProductSettingsPartialUpdateRequestWithBody generates requests for ToolProductSettingsPartialUpdate with any type of body
func NewToolProductSettingsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tool_product_settings/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewToolProductSettingsUpdateRequest calls the generic ToolProductSettingsUpdate builder with application/json body
func NewToolProductSettingsUpdateRequest(server string, id int, body ToolProductSettingsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewToolProductSettingsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewToolProductSettingsUpdateRequestWithFormdataBody calls the generic ToolProductSettingsUpdate builder with application/x-www-form-urlencoded body
func NewToolProductSettingsUpdateRequestWithFormdataBody(server string, id int, body ToolProductSettingsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewToolProductSettingsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewToolProductSettingsUpdateRequestWithBody generates requests for ToolProductSettingsUpdate with any type of body
func NewToolProductSettingsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tool_product_settings/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewToolTypesListRequest generates requests for ToolTypesList
func NewToolTypesListRequest(server string, params *ToolTypesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tool_types/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewToolTypesCreateRequest calls the generic ToolTypesCreate builder with application/json body
func NewToolTypesCreateRequest(server string, body ToolTypesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewToolTypesCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewToolTypesCreateRequestWithFormdataBody calls the generic ToolTypesCreate builder with application/x-www-form-urlencoded body
func NewToolTypesCreateRequestWithFormdataBody(server string, body ToolTypesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewToolTypesCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewToolTypesCreateRequestWithBody generates requests for ToolTypesCreate with any type of body
func NewToolTypesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tool_types/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewToolTypesDestroyRequest generates requests for ToolTypesDestroy
func NewToolTypesDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tool_types/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewToolTypesRetrieveRequest generates requests for ToolTypesRetrieve
func NewToolTypesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tool_types/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewToolTypesPartialUpdateRequest calls the generic ToolTypesPartialUpdate builder with application/json body
func NewToolTypesPartialUpdateRequest(server string, id int, body ToolTypesPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewToolTypesPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewToolTypesPartialUpdateRequestWithFormdataBody calls the generic ToolTypesPartialUpdate builder with application/x-www-form-urlencoded body
func NewToolTypesPartialUpdateRequestWithFormdataBody(server string, id int, body ToolTypesPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewToolTypesPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewToolTypesPartialUpdateRequestWithBody generates requests for ToolTypesPartialUpdate with any type of body
func NewToolTypesPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tool_types/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewToolTypesUpdateRequest calls the generic ToolTypesUpdate builder with application/json body
func NewToolTypesUpdateRequest(server string, id int, body ToolTypesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewToolTypesUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewToolTypesUpdateRequestWithFormdataBody calls the generic ToolTypesUpdate builder with application/x-www-form-urlencoded body
func NewToolTypesUpdateRequestWithFormdataBody(server string, id int, body ToolTypesUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewToolTypesUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewToolTypesUpdateRequestWithBody generates requests for ToolTypesUpdate with any type of body
func NewToolTypesUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tool_types/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUserContactInfosListRequest generates requests for UserContactInfosList
func NewUserContactInfosListRequest(server string, params *UserContactInfosListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/user_contact_infos/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BlockExecution != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "block_execution", runtime.ParamLocationQuery, *params.BlockExecution); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CellNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cell_number", runtime.ParamLocationQuery, *params.CellNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForcePasswordReset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_password_reset", runtime.ParamLocationQuery, *params.ForcePasswordReset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GithubUsername != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "github_username", runtime.ParamLocationQuery, *params.GithubUsername); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PhoneNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "phone_number", runtime.ParamLocationQuery, *params.PhoneNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SlackUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "slack_user_id", runtime.ParamLocationQuery, *params.SlackUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SlackUsername != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "slack_username", runtime.ParamLocationQuery, *params.SlackUsername); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Title != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "title", runtime.ParamLocationQuery, *params.Title); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TwitterUsername != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "twitter_username", runtime.ParamLocationQuery, *params.TwitterUsername); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.User != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user", runtime.ParamLocationQuery, *params.User); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserContactInfosCreateRequest calls the generic UserContactInfosCreate builder with application/json body
func NewUserContactInfosCreateRequest(server string, body UserContactInfosCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUserContactInfosCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewUserContactInfosCreateRequestWithFormdataBody calls the generic UserContactInfosCreate builder with application/x-www-form-urlencoded body
func NewUserContactInfosCreateRequestWithFormdataBody(server string, body UserContactInfosCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewUserContactInfosCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewUserContactInfosCreateRequestWithBody generates requests for UserContactInfosCreate with any type of body
func NewUserContactInfosCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/user_contact_infos/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUserContactInfosDestroyRequest generates requests for UserContactInfosDestroy
func NewUserContactInfosDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/user_contact_infos/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserContactInfosRetrieveRequest generates requests for UserContactInfosRetrieve
func NewUserContactInfosRetrieveRequest(server string, id int, params *UserContactInfosRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/user_contact_infos/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserContactInfosPartialUpdateRequest calls the generic UserContactInfosPartialUpdate builder with application/json body
func NewUserContactInfosPartialUpdateRequest(server string, id int, body UserContactInfosPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUserContactInfosPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUserContactInfosPartialUpdateRequestWithFormdataBody calls the generic UserContactInfosPartialUpdate builder with application/x-www-form-urlencoded body
func NewUserContactInfosPartialUpdateRequestWithFormdataBody(server string, id int, body UserContactInfosPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewUserContactInfosPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewUserContactInfosPartialUpdateRequestWithBody generates requests for UserContactInfosPartialUpdate with any type of body
func NewUserContactInfosPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/user_contact_infos/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUserContactInfosUpdateRequest calls the generic UserContactInfosUpdate builder with application/json body
func NewUserContactInfosUpdateRequest(server string, id int, body UserContactInfosUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUserContactInfosUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUserContactInfosUpdateRequestWithFormdataBody calls the generic UserContactInfosUpdate builder with application/x-www-form-urlencoded body
func NewUserContactInfosUpdateRequestWithFormdataBody(server string, id int, body UserContactInfosUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewUserContactInfosUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewUserContactInfosUpdateRequestWithBody generates requests for UserContactInfosUpdate with any type of body
func NewUserContactInfosUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/user_contact_infos/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUserProfileRetrieveRequest generates requests for UserProfileRetrieve
func NewUserProfileRetrieveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/user_profile/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersListRequest generates requests for UsersList
func NewUsersListRequest(server string, params *UsersListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/users/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Email != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, *params.Email); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FirstName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first_name", runtime.ParamLocationQuery, *params.FirstName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsActive != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_active", runtime.ParamLocationQuery, *params.IsActive); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsSuperuser != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_superuser", runtime.ParamLocationQuery, *params.IsSuperuser); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_name", runtime.ParamLocationQuery, *params.LastName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Username != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, *params.Username); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersCreateRequest calls the generic UsersCreate builder with application/json body
func NewUsersCreateRequest(server string, body UsersCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewUsersCreateRequestWithFormdataBody calls the generic UsersCreate builder with application/x-www-form-urlencoded body
func NewUsersCreateRequestWithFormdataBody(server string, body UsersCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewUsersCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewUsersCreateRequestWithBody generates requests for UsersCreate with any type of body
func NewUsersCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/users/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersDestroyRequest generates requests for UsersDestroy
func NewUsersDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/users/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersRetrieveRequest generates requests for UsersRetrieve
func NewUsersRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/users/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersPartialUpdateRequest calls the generic UsersPartialUpdate builder with application/json body
func NewUsersPartialUpdateRequest(server string, id int, body UsersPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUsersPartialUpdateRequestWithFormdataBody calls the generic UsersPartialUpdate builder with application/x-www-form-urlencoded body
func NewUsersPartialUpdateRequestWithFormdataBody(server string, id int, body UsersPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewUsersPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewUsersPartialUpdateRequestWithBody generates requests for UsersPartialUpdate with any type of body
func NewUsersPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/users/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersUpdateRequest calls the generic UsersUpdate builder with application/json body
func NewUsersUpdateRequest(server string, id int, body UsersUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUsersUpdateRequestWithFormdataBody calls the generic UsersUpdate builder with application/x-www-form-urlencoded body
func NewUsersUpdateRequestWithFormdataBody(server string, id int, body UsersUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewUsersUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewUsersUpdateRequestWithBody generates requests for UsersUpdate with any type of body
func NewUsersUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/users/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ApiTokenAuthCreate request with any body
	ApiTokenAuthCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiTokenAuthCreateResponse, error)

	ApiTokenAuthCreateWithResponse(ctx context.Context, body ApiTokenAuthCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ApiTokenAuthCreateResponse, error)

	ApiTokenAuthCreateWithFormdataBodyWithResponse(ctx context.Context, body ApiTokenAuthCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ApiTokenAuthCreateResponse, error)

	// DevelopmentEnvironmentsList request
	DevelopmentEnvironmentsListWithResponse(ctx context.Context, params *DevelopmentEnvironmentsListParams, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsListResponse, error)

	// DevelopmentEnvironmentsCreate request with any body
	DevelopmentEnvironmentsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsCreateResponse, error)

	DevelopmentEnvironmentsCreateWithResponse(ctx context.Context, body DevelopmentEnvironmentsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsCreateResponse, error)

	DevelopmentEnvironmentsCreateWithFormdataBodyWithResponse(ctx context.Context, body DevelopmentEnvironmentsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsCreateResponse, error)

	// DevelopmentEnvironmentsDestroy request
	DevelopmentEnvironmentsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsDestroyResponse, error)

	// DevelopmentEnvironmentsRetrieve request
	DevelopmentEnvironmentsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsRetrieveResponse, error)

	// DevelopmentEnvironmentsPartialUpdate request with any body
	DevelopmentEnvironmentsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsPartialUpdateResponse, error)

	DevelopmentEnvironmentsPartialUpdateWithResponse(ctx context.Context, id int, body DevelopmentEnvironmentsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsPartialUpdateResponse, error)

	DevelopmentEnvironmentsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body DevelopmentEnvironmentsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsPartialUpdateResponse, error)

	// DevelopmentEnvironmentsUpdate request with any body
	DevelopmentEnvironmentsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsUpdateResponse, error)

	DevelopmentEnvironmentsUpdateWithResponse(ctx context.Context, id int, body DevelopmentEnvironmentsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsUpdateResponse, error)

	DevelopmentEnvironmentsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body DevelopmentEnvironmentsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsUpdateResponse, error)

	// DojoGroupMembersList request
	DojoGroupMembersListWithResponse(ctx context.Context, params *DojoGroupMembersListParams, reqEditors ...RequestEditorFn) (*DojoGroupMembersListResponse, error)

	// DojoGroupMembersCreate request with any body
	DojoGroupMembersCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DojoGroupMembersCreateResponse, error)

	DojoGroupMembersCreateWithResponse(ctx context.Context, body DojoGroupMembersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupMembersCreateResponse, error)

	DojoGroupMembersCreateWithFormdataBodyWithResponse(ctx context.Context, body DojoGroupMembersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupMembersCreateResponse, error)

	// DojoGroupMembersDestroy request
	DojoGroupMembersDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DojoGroupMembersDestroyResponse, error)

	// DojoGroupMembersRetrieve request
	DojoGroupMembersRetrieveWithResponse(ctx context.Context, id int, params *DojoGroupMembersRetrieveParams, reqEditors ...RequestEditorFn) (*DojoGroupMembersRetrieveResponse, error)

	// DojoGroupMembersPartialUpdate request with any body
	DojoGroupMembersPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DojoGroupMembersPartialUpdateResponse, error)

	DojoGroupMembersPartialUpdateWithResponse(ctx context.Context, id int, body DojoGroupMembersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupMembersPartialUpdateResponse, error)

	DojoGroupMembersPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body DojoGroupMembersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupMembersPartialUpdateResponse, error)

	// DojoGroupMembersUpdate request with any body
	DojoGroupMembersUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DojoGroupMembersUpdateResponse, error)

	DojoGroupMembersUpdateWithResponse(ctx context.Context, id int, body DojoGroupMembersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupMembersUpdateResponse, error)

	DojoGroupMembersUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body DojoGroupMembersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupMembersUpdateResponse, error)

	// DojoGroupsList request
	DojoGroupsListWithResponse(ctx context.Context, params *DojoGroupsListParams, reqEditors ...RequestEditorFn) (*DojoGroupsListResponse, error)

	// DojoGroupsCreate request with any body
	DojoGroupsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DojoGroupsCreateResponse, error)

	DojoGroupsCreateWithResponse(ctx context.Context, body DojoGroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupsCreateResponse, error)

	DojoGroupsCreateWithFormdataBodyWithResponse(ctx context.Context, body DojoGroupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupsCreateResponse, error)

	// DojoGroupsDestroy request
	DojoGroupsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DojoGroupsDestroyResponse, error)

	// DojoGroupsRetrieve request
	DojoGroupsRetrieveWithResponse(ctx context.Context, id int, params *DojoGroupsRetrieveParams, reqEditors ...RequestEditorFn) (*DojoGroupsRetrieveResponse, error)

	// DojoGroupsPartialUpdate request with any body
	DojoGroupsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DojoGroupsPartialUpdateResponse, error)

	DojoGroupsPartialUpdateWithResponse(ctx context.Context, id int, body DojoGroupsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupsPartialUpdateResponse, error)

	DojoGroupsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body DojoGroupsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupsPartialUpdateResponse, error)

	// DojoGroupsUpdate request with any body
	DojoGroupsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DojoGroupsUpdateResponse, error)

	DojoGroupsUpdateWithResponse(ctx context.Context, id int, body DojoGroupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupsUpdateResponse, error)

	DojoGroupsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body DojoGroupsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupsUpdateResponse, error)

	// EndpointMetaImportCreate request with any body
	EndpointMetaImportCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EndpointMetaImportCreateResponse, error)

	// EndpointStatusList request
	EndpointStatusListWithResponse(ctx context.Context, params *EndpointStatusListParams, reqEditors ...RequestEditorFn) (*EndpointStatusListResponse, error)

	// EndpointStatusCreate request with any body
	EndpointStatusCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EndpointStatusCreateResponse, error)

	EndpointStatusCreateWithResponse(ctx context.Context, body EndpointStatusCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EndpointStatusCreateResponse, error)

	EndpointStatusCreateWithFormdataBodyWithResponse(ctx context.Context, body EndpointStatusCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EndpointStatusCreateResponse, error)

	// EndpointStatusDestroy request
	EndpointStatusDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EndpointStatusDestroyResponse, error)

	// EndpointStatusRetrieve request
	EndpointStatusRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EndpointStatusRetrieveResponse, error)

	// EndpointStatusPartialUpdate request with any body
	EndpointStatusPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EndpointStatusPartialUpdateResponse, error)

	EndpointStatusPartialUpdateWithResponse(ctx context.Context, id int, body EndpointStatusPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EndpointStatusPartialUpdateResponse, error)

	EndpointStatusPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body EndpointStatusPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EndpointStatusPartialUpdateResponse, error)

	// EndpointStatusUpdate request with any body
	EndpointStatusUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EndpointStatusUpdateResponse, error)

	EndpointStatusUpdateWithResponse(ctx context.Context, id int, body EndpointStatusUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EndpointStatusUpdateResponse, error)

	EndpointStatusUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body EndpointStatusUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EndpointStatusUpdateResponse, error)

	// EndpointsList request
	EndpointsListWithResponse(ctx context.Context, params *EndpointsListParams, reqEditors ...RequestEditorFn) (*EndpointsListResponse, error)

	// EndpointsCreate request with any body
	EndpointsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EndpointsCreateResponse, error)

	EndpointsCreateWithResponse(ctx context.Context, body EndpointsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EndpointsCreateResponse, error)

	EndpointsCreateWithFormdataBodyWithResponse(ctx context.Context, body EndpointsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EndpointsCreateResponse, error)

	// EndpointsDestroy request
	EndpointsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EndpointsDestroyResponse, error)

	// EndpointsRetrieve request
	EndpointsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EndpointsRetrieveResponse, error)

	// EndpointsPartialUpdate request with any body
	EndpointsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EndpointsPartialUpdateResponse, error)

	EndpointsPartialUpdateWithResponse(ctx context.Context, id int, body EndpointsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EndpointsPartialUpdateResponse, error)

	EndpointsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body EndpointsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EndpointsPartialUpdateResponse, error)

	// EndpointsUpdate request with any body
	EndpointsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EndpointsUpdateResponse, error)

	EndpointsUpdateWithResponse(ctx context.Context, id int, body EndpointsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EndpointsUpdateResponse, error)

	EndpointsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body EndpointsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EndpointsUpdateResponse, error)

	// EndpointsGenerateReportCreate request with any body
	EndpointsGenerateReportCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EndpointsGenerateReportCreateResponse, error)

	EndpointsGenerateReportCreateWithResponse(ctx context.Context, id int, body EndpointsGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EndpointsGenerateReportCreateResponse, error)

	EndpointsGenerateReportCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body EndpointsGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EndpointsGenerateReportCreateResponse, error)

	// EngagementPresetsList request
	EngagementPresetsListWithResponse(ctx context.Context, params *EngagementPresetsListParams, reqEditors ...RequestEditorFn) (*EngagementPresetsListResponse, error)

	// EngagementPresetsCreate request with any body
	EngagementPresetsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EngagementPresetsCreateResponse, error)

	EngagementPresetsCreateWithResponse(ctx context.Context, body EngagementPresetsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EngagementPresetsCreateResponse, error)

	EngagementPresetsCreateWithFormdataBodyWithResponse(ctx context.Context, body EngagementPresetsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EngagementPresetsCreateResponse, error)

	// EngagementPresetsDestroy request
	EngagementPresetsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EngagementPresetsDestroyResponse, error)

	// EngagementPresetsRetrieve request
	EngagementPresetsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EngagementPresetsRetrieveResponse, error)

	// EngagementPresetsPartialUpdate request with any body
	EngagementPresetsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EngagementPresetsPartialUpdateResponse, error)

	EngagementPresetsPartialUpdateWithResponse(ctx context.Context, id int, body EngagementPresetsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EngagementPresetsPartialUpdateResponse, error)

	EngagementPresetsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body EngagementPresetsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EngagementPresetsPartialUpdateResponse, error)

	// EngagementPresetsUpdate request with any body
	EngagementPresetsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EngagementPresetsUpdateResponse, error)

	EngagementPresetsUpdateWithResponse(ctx context.Context, id int, body EngagementPresetsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EngagementPresetsUpdateResponse, error)

	EngagementPresetsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body EngagementPresetsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EngagementPresetsUpdateResponse, error)

	// EngagementsList request
	EngagementsListWithResponse(ctx context.Context, params *EngagementsListParams, reqEditors ...RequestEditorFn) (*EngagementsListResponse, error)

	// EngagementsCreate request with any body
	EngagementsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EngagementsCreateResponse, error)

	EngagementsCreateWithResponse(ctx context.Context, body EngagementsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EngagementsCreateResponse, error)

	EngagementsCreateWithFormdataBodyWithResponse(ctx context.Context, body EngagementsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EngagementsCreateResponse, error)

	// EngagementsDestroy request
	EngagementsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EngagementsDestroyResponse, error)

	// EngagementsRetrieve request
	EngagementsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EngagementsRetrieveResponse, error)

	// EngagementsPartialUpdate request with any body
	EngagementsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EngagementsPartialUpdateResponse, error)

	EngagementsPartialUpdateWithResponse(ctx context.Context, id int, body EngagementsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EngagementsPartialUpdateResponse, error)

	EngagementsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body EngagementsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EngagementsPartialUpdateResponse, error)

	// EngagementsUpdate request with any body
	EngagementsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EngagementsUpdateResponse, error)

	EngagementsUpdateWithResponse(ctx context.Context, id int, body EngagementsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EngagementsUpdateResponse, error)

	EngagementsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body EngagementsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EngagementsUpdateResponse, error)

	// EngagementsAcceptRisksCreate request with any body
	EngagementsAcceptRisksCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EngagementsAcceptRisksCreateResponse, error)

	EngagementsAcceptRisksCreateWithResponse(ctx context.Context, id int, body EngagementsAcceptRisksCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EngagementsAcceptRisksCreateResponse, error)

	EngagementsAcceptRisksCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body EngagementsAcceptRisksCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EngagementsAcceptRisksCreateResponse, error)

	// EngagementsCloseCreate request
	EngagementsCloseCreateWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EngagementsCloseCreateResponse, error)

	// EngagementsFilesRetrieve request
	EngagementsFilesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EngagementsFilesRetrieveResponse, error)

	// EngagementsFilesCreate request with any body
	EngagementsFilesCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EngagementsFilesCreateResponse, error)

	// EngagementsGenerateReportCreate request with any body
	EngagementsGenerateReportCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EngagementsGenerateReportCreateResponse, error)

	EngagementsGenerateReportCreateWithResponse(ctx context.Context, id int, body EngagementsGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EngagementsGenerateReportCreateResponse, error)

	EngagementsGenerateReportCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body EngagementsGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EngagementsGenerateReportCreateResponse, error)

	// EngagementsNotesRetrieve request
	EngagementsNotesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EngagementsNotesRetrieveResponse, error)

	// EngagementsNotesCreate request with any body
	EngagementsNotesCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EngagementsNotesCreateResponse, error)

	EngagementsNotesCreateWithResponse(ctx context.Context, id int, body EngagementsNotesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EngagementsNotesCreateResponse, error)

	EngagementsNotesCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body EngagementsNotesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EngagementsNotesCreateResponse, error)

	// EngagementsReopenCreate request
	EngagementsReopenCreateWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EngagementsReopenCreateResponse, error)

	// FindingTemplatesList request
	FindingTemplatesListWithResponse(ctx context.Context, params *FindingTemplatesListParams, reqEditors ...RequestEditorFn) (*FindingTemplatesListResponse, error)

	// FindingTemplatesCreate request with any body
	FindingTemplatesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingTemplatesCreateResponse, error)

	FindingTemplatesCreateWithResponse(ctx context.Context, body FindingTemplatesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingTemplatesCreateResponse, error)

	FindingTemplatesCreateWithFormdataBodyWithResponse(ctx context.Context, body FindingTemplatesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingTemplatesCreateResponse, error)

	// FindingTemplatesDestroy request
	FindingTemplatesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*FindingTemplatesDestroyResponse, error)

	// FindingTemplatesRetrieve request
	FindingTemplatesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*FindingTemplatesRetrieveResponse, error)

	// FindingTemplatesPartialUpdate request with any body
	FindingTemplatesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingTemplatesPartialUpdateResponse, error)

	FindingTemplatesPartialUpdateWithResponse(ctx context.Context, id int, body FindingTemplatesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingTemplatesPartialUpdateResponse, error)

	FindingTemplatesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingTemplatesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingTemplatesPartialUpdateResponse, error)

	// FindingTemplatesUpdate request with any body
	FindingTemplatesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingTemplatesUpdateResponse, error)

	FindingTemplatesUpdateWithResponse(ctx context.Context, id int, body FindingTemplatesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingTemplatesUpdateResponse, error)

	FindingTemplatesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingTemplatesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingTemplatesUpdateResponse, error)

	// FindingsList request
	FindingsListWithResponse(ctx context.Context, params *FindingsListParams, reqEditors ...RequestEditorFn) (*FindingsListResponse, error)

	// FindingsCreate request with any body
	FindingsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsCreateResponse, error)

	FindingsCreateWithResponse(ctx context.Context, body FindingsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsCreateResponse, error)

	FindingsCreateWithFormdataBodyWithResponse(ctx context.Context, body FindingsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsCreateResponse, error)

	// FindingsAcceptRisksCreate request with any body
	FindingsAcceptRisksCreateWithBodyWithResponse(ctx context.Context, params *FindingsAcceptRisksCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsAcceptRisksCreateResponse, error)

	FindingsAcceptRisksCreateWithResponse(ctx context.Context, params *FindingsAcceptRisksCreateParams, body FindingsAcceptRisksCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsAcceptRisksCreateResponse, error)

	FindingsAcceptRisksCreateWithFormdataBodyWithResponse(ctx context.Context, params *FindingsAcceptRisksCreateParams, body FindingsAcceptRisksCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsAcceptRisksCreateResponse, error)

	// FindingsGenerateReportCreate request with any body
	FindingsGenerateReportCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsGenerateReportCreateResponse, error)

	FindingsGenerateReportCreateWithResponse(ctx context.Context, body FindingsGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsGenerateReportCreateResponse, error)

	FindingsGenerateReportCreateWithFormdataBodyWithResponse(ctx context.Context, body FindingsGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsGenerateReportCreateResponse, error)

	// FindingsDestroy request
	FindingsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*FindingsDestroyResponse, error)

	// FindingsRetrieve request
	FindingsRetrieveWithResponse(ctx context.Context, id int, params *FindingsRetrieveParams, reqEditors ...RequestEditorFn) (*FindingsRetrieveResponse, error)

	// FindingsPartialUpdate request with any body
	FindingsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsPartialUpdateResponse, error)

	FindingsPartialUpdateWithResponse(ctx context.Context, id int, body FindingsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsPartialUpdateResponse, error)

	FindingsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsPartialUpdateResponse, error)

	// FindingsUpdate request with any body
	FindingsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsUpdateResponse, error)

	FindingsUpdateWithResponse(ctx context.Context, id int, body FindingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsUpdateResponse, error)

	FindingsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsUpdateResponse, error)

	// FindingsDuplicateList request
	FindingsDuplicateListWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*FindingsDuplicateListResponse, error)

	// FindingsDuplicateResetCreate request
	FindingsDuplicateResetCreateWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*FindingsDuplicateResetCreateResponse, error)

	// FindingsFilesRetrieve request
	FindingsFilesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*FindingsFilesRetrieveResponse, error)

	// FindingsFilesCreate request with any body
	FindingsFilesCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsFilesCreateResponse, error)

	// FindingsMetadataDestroy request
	FindingsMetadataDestroyWithResponse(ctx context.Context, id int, params *FindingsMetadataDestroyParams, reqEditors ...RequestEditorFn) (*FindingsMetadataDestroyResponse, error)

	// FindingsMetadataList request
	FindingsMetadataListWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*FindingsMetadataListResponse, error)

	// FindingsMetadataCreate request with any body
	FindingsMetadataCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsMetadataCreateResponse, error)

	FindingsMetadataCreateWithResponse(ctx context.Context, id int, body FindingsMetadataCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsMetadataCreateResponse, error)

	FindingsMetadataCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingsMetadataCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsMetadataCreateResponse, error)

	// FindingsMetadataUpdate request with any body
	FindingsMetadataUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsMetadataUpdateResponse, error)

	FindingsMetadataUpdateWithResponse(ctx context.Context, id int, body FindingsMetadataUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsMetadataUpdateResponse, error)

	FindingsMetadataUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingsMetadataUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsMetadataUpdateResponse, error)

	// FindingsNotesRetrieve request
	FindingsNotesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*FindingsNotesRetrieveResponse, error)

	// FindingsNotesCreate request with any body
	FindingsNotesCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsNotesCreateResponse, error)

	FindingsNotesCreateWithResponse(ctx context.Context, id int, body FindingsNotesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsNotesCreateResponse, error)

	FindingsNotesCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingsNotesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsNotesCreateResponse, error)

	// FindingsOriginalCreate request
	FindingsOriginalCreateWithResponse(ctx context.Context, id int, newFid int, reqEditors ...RequestEditorFn) (*FindingsOriginalCreateResponse, error)

	// FindingsRemoveNotePartialUpdate request with any body
	FindingsRemoveNotePartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsRemoveNotePartialUpdateResponse, error)

	FindingsRemoveNotePartialUpdateWithResponse(ctx context.Context, id int, body FindingsRemoveNotePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsRemoveNotePartialUpdateResponse, error)

	FindingsRemoveNotePartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingsRemoveNotePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsRemoveNotePartialUpdateResponse, error)

	// FindingsRemoveTagsPartialUpdate request with any body
	FindingsRemoveTagsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsRemoveTagsPartialUpdateResponse, error)

	FindingsRemoveTagsPartialUpdateWithResponse(ctx context.Context, id int, body FindingsRemoveTagsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsRemoveTagsPartialUpdateResponse, error)

	FindingsRemoveTagsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingsRemoveTagsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsRemoveTagsPartialUpdateResponse, error)

	// FindingsRemoveTagsUpdate request with any body
	FindingsRemoveTagsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsRemoveTagsUpdateResponse, error)

	FindingsRemoveTagsUpdateWithResponse(ctx context.Context, id int, body FindingsRemoveTagsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsRemoveTagsUpdateResponse, error)

	FindingsRemoveTagsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingsRemoveTagsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsRemoveTagsUpdateResponse, error)

	// FindingsRequestResponseRetrieve request
	FindingsRequestResponseRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*FindingsRequestResponseRetrieveResponse, error)

	// FindingsRequestResponseCreate request with any body
	FindingsRequestResponseCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsRequestResponseCreateResponse, error)

	FindingsRequestResponseCreateWithResponse(ctx context.Context, id int, body FindingsRequestResponseCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsRequestResponseCreateResponse, error)

	FindingsRequestResponseCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingsRequestResponseCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsRequestResponseCreateResponse, error)

	// FindingsTagsRetrieve request
	FindingsTagsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*FindingsTagsRetrieveResponse, error)

	// FindingsTagsCreate request with any body
	FindingsTagsCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsTagsCreateResponse, error)

	FindingsTagsCreateWithResponse(ctx context.Context, id int, body FindingsTagsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsTagsCreateResponse, error)

	FindingsTagsCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingsTagsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsTagsCreateResponse, error)

	// GlobalRolesList request
	GlobalRolesListWithResponse(ctx context.Context, params *GlobalRolesListParams, reqEditors ...RequestEditorFn) (*GlobalRolesListResponse, error)

	// GlobalRolesCreate request with any body
	GlobalRolesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GlobalRolesCreateResponse, error)

	GlobalRolesCreateWithResponse(ctx context.Context, body GlobalRolesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*GlobalRolesCreateResponse, error)

	GlobalRolesCreateWithFormdataBodyWithResponse(ctx context.Context, body GlobalRolesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*GlobalRolesCreateResponse, error)

	// GlobalRolesDestroy request
	GlobalRolesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GlobalRolesDestroyResponse, error)

	// GlobalRolesRetrieve request
	GlobalRolesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GlobalRolesRetrieveResponse, error)

	// GlobalRolesPartialUpdate request with any body
	GlobalRolesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GlobalRolesPartialUpdateResponse, error)

	GlobalRolesPartialUpdateWithResponse(ctx context.Context, id int, body GlobalRolesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*GlobalRolesPartialUpdateResponse, error)

	GlobalRolesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body GlobalRolesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*GlobalRolesPartialUpdateResponse, error)

	// GlobalRolesUpdate request with any body
	GlobalRolesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GlobalRolesUpdateResponse, error)

	GlobalRolesUpdateWithResponse(ctx context.Context, id int, body GlobalRolesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*GlobalRolesUpdateResponse, error)

	GlobalRolesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body GlobalRolesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*GlobalRolesUpdateResponse, error)

	// ImportLanguagesCreate request with any body
	ImportLanguagesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportLanguagesCreateResponse, error)

	// ImportScanCreate request with any body
	ImportScanCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportScanCreateResponse, error)

	// JiraConfigurationsList request
	JiraConfigurationsListWithResponse(ctx context.Context, params *JiraConfigurationsListParams, reqEditors ...RequestEditorFn) (*JiraConfigurationsListResponse, error)

	// JiraConfigurationsCreate request with any body
	JiraConfigurationsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraConfigurationsCreateResponse, error)

	JiraConfigurationsCreateWithResponse(ctx context.Context, body JiraConfigurationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraConfigurationsCreateResponse, error)

	JiraConfigurationsCreateWithFormdataBodyWithResponse(ctx context.Context, body JiraConfigurationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraConfigurationsCreateResponse, error)

	// JiraConfigurationsDestroy request
	JiraConfigurationsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*JiraConfigurationsDestroyResponse, error)

	// JiraConfigurationsRetrieve request
	JiraConfigurationsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*JiraConfigurationsRetrieveResponse, error)

	// JiraConfigurationsPartialUpdate request with any body
	JiraConfigurationsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraConfigurationsPartialUpdateResponse, error)

	JiraConfigurationsPartialUpdateWithResponse(ctx context.Context, id int, body JiraConfigurationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraConfigurationsPartialUpdateResponse, error)

	JiraConfigurationsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body JiraConfigurationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraConfigurationsPartialUpdateResponse, error)

	// JiraConfigurationsUpdate request with any body
	JiraConfigurationsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraConfigurationsUpdateResponse, error)

	JiraConfigurationsUpdateWithResponse(ctx context.Context, id int, body JiraConfigurationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraConfigurationsUpdateResponse, error)

	JiraConfigurationsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body JiraConfigurationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraConfigurationsUpdateResponse, error)

	// JiraFindingMappingsList request
	JiraFindingMappingsListWithResponse(ctx context.Context, params *JiraFindingMappingsListParams, reqEditors ...RequestEditorFn) (*JiraFindingMappingsListResponse, error)

	// JiraFindingMappingsCreate request with any body
	JiraFindingMappingsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraFindingMappingsCreateResponse, error)

	JiraFindingMappingsCreateWithResponse(ctx context.Context, body JiraFindingMappingsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraFindingMappingsCreateResponse, error)

	JiraFindingMappingsCreateWithFormdataBodyWithResponse(ctx context.Context, body JiraFindingMappingsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraFindingMappingsCreateResponse, error)

	// JiraFindingMappingsDestroy request
	JiraFindingMappingsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*JiraFindingMappingsDestroyResponse, error)

	// JiraFindingMappingsRetrieve request
	JiraFindingMappingsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*JiraFindingMappingsRetrieveResponse, error)

	// JiraFindingMappingsPartialUpdate request with any body
	JiraFindingMappingsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraFindingMappingsPartialUpdateResponse, error)

	JiraFindingMappingsPartialUpdateWithResponse(ctx context.Context, id int, body JiraFindingMappingsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraFindingMappingsPartialUpdateResponse, error)

	JiraFindingMappingsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body JiraFindingMappingsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraFindingMappingsPartialUpdateResponse, error)

	// JiraFindingMappingsUpdate request with any body
	JiraFindingMappingsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraFindingMappingsUpdateResponse, error)

	JiraFindingMappingsUpdateWithResponse(ctx context.Context, id int, body JiraFindingMappingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraFindingMappingsUpdateResponse, error)

	JiraFindingMappingsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body JiraFindingMappingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraFindingMappingsUpdateResponse, error)

	// JiraInstancesList request
	JiraInstancesListWithResponse(ctx context.Context, params *JiraInstancesListParams, reqEditors ...RequestEditorFn) (*JiraInstancesListResponse, error)

	// JiraInstancesCreate request with any body
	JiraInstancesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraInstancesCreateResponse, error)

	JiraInstancesCreateWithResponse(ctx context.Context, body JiraInstancesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraInstancesCreateResponse, error)

	JiraInstancesCreateWithFormdataBodyWithResponse(ctx context.Context, body JiraInstancesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraInstancesCreateResponse, error)

	// JiraInstancesDestroy request
	JiraInstancesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*JiraInstancesDestroyResponse, error)

	// JiraInstancesRetrieve request
	JiraInstancesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*JiraInstancesRetrieveResponse, error)

	// JiraInstancesPartialUpdate request with any body
	JiraInstancesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraInstancesPartialUpdateResponse, error)

	JiraInstancesPartialUpdateWithResponse(ctx context.Context, id int, body JiraInstancesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraInstancesPartialUpdateResponse, error)

	JiraInstancesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body JiraInstancesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraInstancesPartialUpdateResponse, error)

	// JiraInstancesUpdate request with any body
	JiraInstancesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraInstancesUpdateResponse, error)

	JiraInstancesUpdateWithResponse(ctx context.Context, id int, body JiraInstancesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraInstancesUpdateResponse, error)

	JiraInstancesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body JiraInstancesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraInstancesUpdateResponse, error)

	// JiraProductConfigurationsList request
	JiraProductConfigurationsListWithResponse(ctx context.Context, params *JiraProductConfigurationsListParams, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsListResponse, error)

	// JiraProductConfigurationsCreate request with any body
	JiraProductConfigurationsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsCreateResponse, error)

	JiraProductConfigurationsCreateWithResponse(ctx context.Context, body JiraProductConfigurationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsCreateResponse, error)

	JiraProductConfigurationsCreateWithFormdataBodyWithResponse(ctx context.Context, body JiraProductConfigurationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsCreateResponse, error)

	// JiraProductConfigurationsDestroy request
	JiraProductConfigurationsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsDestroyResponse, error)

	// JiraProductConfigurationsRetrieve request
	JiraProductConfigurationsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsRetrieveResponse, error)

	// JiraProductConfigurationsPartialUpdate request with any body
	JiraProductConfigurationsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsPartialUpdateResponse, error)

	JiraProductConfigurationsPartialUpdateWithResponse(ctx context.Context, id int, body JiraProductConfigurationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsPartialUpdateResponse, error)

	JiraProductConfigurationsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body JiraProductConfigurationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsPartialUpdateResponse, error)

	// JiraProductConfigurationsUpdate request with any body
	JiraProductConfigurationsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsUpdateResponse, error)

	JiraProductConfigurationsUpdateWithResponse(ctx context.Context, id int, body JiraProductConfigurationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsUpdateResponse, error)

	JiraProductConfigurationsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body JiraProductConfigurationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsUpdateResponse, error)

	// JiraProjectsList request
	JiraProjectsListWithResponse(ctx context.Context, params *JiraProjectsListParams, reqEditors ...RequestEditorFn) (*JiraProjectsListResponse, error)

	// JiraProjectsCreate request with any body
	JiraProjectsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraProjectsCreateResponse, error)

	JiraProjectsCreateWithResponse(ctx context.Context, body JiraProjectsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraProjectsCreateResponse, error)

	JiraProjectsCreateWithFormdataBodyWithResponse(ctx context.Context, body JiraProjectsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraProjectsCreateResponse, error)

	// JiraProjectsDestroy request
	JiraProjectsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*JiraProjectsDestroyResponse, error)

	// JiraProjectsRetrieve request
	JiraProjectsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*JiraProjectsRetrieveResponse, error)

	// JiraProjectsPartialUpdate request with any body
	JiraProjectsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraProjectsPartialUpdateResponse, error)

	JiraProjectsPartialUpdateWithResponse(ctx context.Context, id int, body JiraProjectsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraProjectsPartialUpdateResponse, error)

	JiraProjectsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body JiraProjectsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraProjectsPartialUpdateResponse, error)

	// JiraProjectsUpdate request with any body
	JiraProjectsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraProjectsUpdateResponse, error)

	JiraProjectsUpdateWithResponse(ctx context.Context, id int, body JiraProjectsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraProjectsUpdateResponse, error)

	JiraProjectsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body JiraProjectsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraProjectsUpdateResponse, error)

	// LanguageTypesList request
	LanguageTypesListWithResponse(ctx context.Context, params *LanguageTypesListParams, reqEditors ...RequestEditorFn) (*LanguageTypesListResponse, error)

	// LanguageTypesCreate request with any body
	LanguageTypesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LanguageTypesCreateResponse, error)

	LanguageTypesCreateWithResponse(ctx context.Context, body LanguageTypesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*LanguageTypesCreateResponse, error)

	LanguageTypesCreateWithFormdataBodyWithResponse(ctx context.Context, body LanguageTypesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*LanguageTypesCreateResponse, error)

	// LanguageTypesDestroy request
	LanguageTypesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*LanguageTypesDestroyResponse, error)

	// LanguageTypesRetrieve request
	LanguageTypesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*LanguageTypesRetrieveResponse, error)

	// LanguageTypesPartialUpdate request with any body
	LanguageTypesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LanguageTypesPartialUpdateResponse, error)

	LanguageTypesPartialUpdateWithResponse(ctx context.Context, id int, body LanguageTypesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*LanguageTypesPartialUpdateResponse, error)

	LanguageTypesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body LanguageTypesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*LanguageTypesPartialUpdateResponse, error)

	// LanguageTypesUpdate request with any body
	LanguageTypesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LanguageTypesUpdateResponse, error)

	LanguageTypesUpdateWithResponse(ctx context.Context, id int, body LanguageTypesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*LanguageTypesUpdateResponse, error)

	LanguageTypesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body LanguageTypesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*LanguageTypesUpdateResponse, error)

	// LanguagesList request
	LanguagesListWithResponse(ctx context.Context, params *LanguagesListParams, reqEditors ...RequestEditorFn) (*LanguagesListResponse, error)

	// LanguagesCreate request with any body
	LanguagesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LanguagesCreateResponse, error)

	LanguagesCreateWithResponse(ctx context.Context, body LanguagesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*LanguagesCreateResponse, error)

	LanguagesCreateWithFormdataBodyWithResponse(ctx context.Context, body LanguagesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*LanguagesCreateResponse, error)

	// LanguagesDestroy request
	LanguagesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*LanguagesDestroyResponse, error)

	// LanguagesRetrieve request
	LanguagesRetrieveWithResponse(ctx context.Context, id int, params *LanguagesRetrieveParams, reqEditors ...RequestEditorFn) (*LanguagesRetrieveResponse, error)

	// LanguagesPartialUpdate request with any body
	LanguagesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LanguagesPartialUpdateResponse, error)

	LanguagesPartialUpdateWithResponse(ctx context.Context, id int, body LanguagesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*LanguagesPartialUpdateResponse, error)

	LanguagesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body LanguagesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*LanguagesPartialUpdateResponse, error)

	// LanguagesUpdate request with any body
	LanguagesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LanguagesUpdateResponse, error)

	LanguagesUpdateWithResponse(ctx context.Context, id int, body LanguagesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*LanguagesUpdateResponse, error)

	LanguagesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body LanguagesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*LanguagesUpdateResponse, error)

	// MetadataList request
	MetadataListWithResponse(ctx context.Context, params *MetadataListParams, reqEditors ...RequestEditorFn) (*MetadataListResponse, error)

	// MetadataCreate request with any body
	MetadataCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MetadataCreateResponse, error)

	MetadataCreateWithResponse(ctx context.Context, body MetadataCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*MetadataCreateResponse, error)

	MetadataCreateWithFormdataBodyWithResponse(ctx context.Context, body MetadataCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*MetadataCreateResponse, error)

	// MetadataDestroy request
	MetadataDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*MetadataDestroyResponse, error)

	// MetadataRetrieve request
	MetadataRetrieveWithResponse(ctx context.Context, id int, params *MetadataRetrieveParams, reqEditors ...RequestEditorFn) (*MetadataRetrieveResponse, error)

	// MetadataPartialUpdate request with any body
	MetadataPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MetadataPartialUpdateResponse, error)

	MetadataPartialUpdateWithResponse(ctx context.Context, id int, body MetadataPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*MetadataPartialUpdateResponse, error)

	MetadataPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body MetadataPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*MetadataPartialUpdateResponse, error)

	// MetadataUpdate request with any body
	MetadataUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MetadataUpdateResponse, error)

	MetadataUpdateWithResponse(ctx context.Context, id int, body MetadataUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*MetadataUpdateResponse, error)

	MetadataUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body MetadataUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*MetadataUpdateResponse, error)

	// NetworkLocationsList request
	NetworkLocationsListWithResponse(ctx context.Context, params *NetworkLocationsListParams, reqEditors ...RequestEditorFn) (*NetworkLocationsListResponse, error)

	// NetworkLocationsCreate request with any body
	NetworkLocationsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkLocationsCreateResponse, error)

	NetworkLocationsCreateWithResponse(ctx context.Context, body NetworkLocationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkLocationsCreateResponse, error)

	NetworkLocationsCreateWithFormdataBodyWithResponse(ctx context.Context, body NetworkLocationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*NetworkLocationsCreateResponse, error)

	// NetworkLocationsDestroy request
	NetworkLocationsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*NetworkLocationsDestroyResponse, error)

	// NetworkLocationsRetrieve request
	NetworkLocationsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*NetworkLocationsRetrieveResponse, error)

	// NetworkLocationsPartialUpdate request with any body
	NetworkLocationsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkLocationsPartialUpdateResponse, error)

	NetworkLocationsPartialUpdateWithResponse(ctx context.Context, id int, body NetworkLocationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkLocationsPartialUpdateResponse, error)

	NetworkLocationsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body NetworkLocationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*NetworkLocationsPartialUpdateResponse, error)

	// NetworkLocationsUpdate request with any body
	NetworkLocationsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkLocationsUpdateResponse, error)

	NetworkLocationsUpdateWithResponse(ctx context.Context, id int, body NetworkLocationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkLocationsUpdateResponse, error)

	NetworkLocationsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body NetworkLocationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*NetworkLocationsUpdateResponse, error)

	// NoteTypeList request
	NoteTypeListWithResponse(ctx context.Context, params *NoteTypeListParams, reqEditors ...RequestEditorFn) (*NoteTypeListResponse, error)

	// NoteTypeCreate request with any body
	NoteTypeCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NoteTypeCreateResponse, error)

	NoteTypeCreateWithResponse(ctx context.Context, body NoteTypeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*NoteTypeCreateResponse, error)

	NoteTypeCreateWithFormdataBodyWithResponse(ctx context.Context, body NoteTypeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*NoteTypeCreateResponse, error)

	// NoteTypeDestroy request
	NoteTypeDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*NoteTypeDestroyResponse, error)

	// NoteTypeRetrieve request
	NoteTypeRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*NoteTypeRetrieveResponse, error)

	// NoteTypePartialUpdate request with any body
	NoteTypePartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NoteTypePartialUpdateResponse, error)

	NoteTypePartialUpdateWithResponse(ctx context.Context, id int, body NoteTypePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*NoteTypePartialUpdateResponse, error)

	NoteTypePartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body NoteTypePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*NoteTypePartialUpdateResponse, error)

	// NoteTypeUpdate request with any body
	NoteTypeUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NoteTypeUpdateResponse, error)

	NoteTypeUpdateWithResponse(ctx context.Context, id int, body NoteTypeUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*NoteTypeUpdateResponse, error)

	NoteTypeUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body NoteTypeUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*NoteTypeUpdateResponse, error)

	// NotesList request
	NotesListWithResponse(ctx context.Context, params *NotesListParams, reqEditors ...RequestEditorFn) (*NotesListResponse, error)

	// NotesRetrieve request
	NotesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*NotesRetrieveResponse, error)

	// NotesPartialUpdate request with any body
	NotesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NotesPartialUpdateResponse, error)

	NotesPartialUpdateWithResponse(ctx context.Context, id int, body NotesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*NotesPartialUpdateResponse, error)

	NotesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body NotesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*NotesPartialUpdateResponse, error)

	// NotesUpdate request with any body
	NotesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NotesUpdateResponse, error)

	NotesUpdateWithResponse(ctx context.Context, id int, body NotesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*NotesUpdateResponse, error)

	NotesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body NotesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*NotesUpdateResponse, error)

	// NotificationsList request
	NotificationsListWithResponse(ctx context.Context, params *NotificationsListParams, reqEditors ...RequestEditorFn) (*NotificationsListResponse, error)

	// NotificationsCreate request with any body
	NotificationsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NotificationsCreateResponse, error)

	NotificationsCreateWithResponse(ctx context.Context, body NotificationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*NotificationsCreateResponse, error)

	NotificationsCreateWithFormdataBodyWithResponse(ctx context.Context, body NotificationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*NotificationsCreateResponse, error)

	// NotificationsDestroy request
	NotificationsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*NotificationsDestroyResponse, error)

	// NotificationsRetrieve request
	NotificationsRetrieveWithResponse(ctx context.Context, id int, params *NotificationsRetrieveParams, reqEditors ...RequestEditorFn) (*NotificationsRetrieveResponse, error)

	// NotificationsPartialUpdate request with any body
	NotificationsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NotificationsPartialUpdateResponse, error)

	NotificationsPartialUpdateWithResponse(ctx context.Context, id int, body NotificationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*NotificationsPartialUpdateResponse, error)

	NotificationsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body NotificationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*NotificationsPartialUpdateResponse, error)

	// NotificationsUpdate request with any body
	NotificationsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NotificationsUpdateResponse, error)

	NotificationsUpdateWithResponse(ctx context.Context, id int, body NotificationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*NotificationsUpdateResponse, error)

	NotificationsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body NotificationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*NotificationsUpdateResponse, error)

	// Oa3SchemaRetrieve request
	Oa3SchemaRetrieveWithResponse(ctx context.Context, params *Oa3SchemaRetrieveParams, reqEditors ...RequestEditorFn) (*Oa3SchemaRetrieveResponse, error)

	// ProductApiScanConfigurationsList request
	ProductApiScanConfigurationsListWithResponse(ctx context.Context, params *ProductApiScanConfigurationsListParams, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsListResponse, error)

	// ProductApiScanConfigurationsCreate request with any body
	ProductApiScanConfigurationsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsCreateResponse, error)

	ProductApiScanConfigurationsCreateWithResponse(ctx context.Context, body ProductApiScanConfigurationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsCreateResponse, error)

	ProductApiScanConfigurationsCreateWithFormdataBodyWithResponse(ctx context.Context, body ProductApiScanConfigurationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsCreateResponse, error)

	// ProductApiScanConfigurationsDestroy request
	ProductApiScanConfigurationsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsDestroyResponse, error)

	// ProductApiScanConfigurationsRetrieve request
	ProductApiScanConfigurationsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsRetrieveResponse, error)

	// ProductApiScanConfigurationsPartialUpdate request with any body
	ProductApiScanConfigurationsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsPartialUpdateResponse, error)

	ProductApiScanConfigurationsPartialUpdateWithResponse(ctx context.Context, id int, body ProductApiScanConfigurationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsPartialUpdateResponse, error)

	ProductApiScanConfigurationsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductApiScanConfigurationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsPartialUpdateResponse, error)

	// ProductApiScanConfigurationsUpdate request with any body
	ProductApiScanConfigurationsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsUpdateResponse, error)

	ProductApiScanConfigurationsUpdateWithResponse(ctx context.Context, id int, body ProductApiScanConfigurationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsUpdateResponse, error)

	ProductApiScanConfigurationsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductApiScanConfigurationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsUpdateResponse, error)

	// ProductGroupsList request
	ProductGroupsListWithResponse(ctx context.Context, params *ProductGroupsListParams, reqEditors ...RequestEditorFn) (*ProductGroupsListResponse, error)

	// ProductGroupsCreate request with any body
	ProductGroupsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductGroupsCreateResponse, error)

	ProductGroupsCreateWithResponse(ctx context.Context, body ProductGroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductGroupsCreateResponse, error)

	ProductGroupsCreateWithFormdataBodyWithResponse(ctx context.Context, body ProductGroupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductGroupsCreateResponse, error)

	// ProductGroupsDestroy request
	ProductGroupsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductGroupsDestroyResponse, error)

	// ProductGroupsRetrieve request
	ProductGroupsRetrieveWithResponse(ctx context.Context, id int, params *ProductGroupsRetrieveParams, reqEditors ...RequestEditorFn) (*ProductGroupsRetrieveResponse, error)

	// ProductGroupsPartialUpdate request
	ProductGroupsPartialUpdateWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductGroupsPartialUpdateResponse, error)

	// ProductGroupsUpdate request with any body
	ProductGroupsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductGroupsUpdateResponse, error)

	ProductGroupsUpdateWithResponse(ctx context.Context, id int, body ProductGroupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductGroupsUpdateResponse, error)

	ProductGroupsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductGroupsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductGroupsUpdateResponse, error)

	// ProductMembersList request
	ProductMembersListWithResponse(ctx context.Context, params *ProductMembersListParams, reqEditors ...RequestEditorFn) (*ProductMembersListResponse, error)

	// ProductMembersCreate request with any body
	ProductMembersCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductMembersCreateResponse, error)

	ProductMembersCreateWithResponse(ctx context.Context, body ProductMembersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductMembersCreateResponse, error)

	ProductMembersCreateWithFormdataBodyWithResponse(ctx context.Context, body ProductMembersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductMembersCreateResponse, error)

	// ProductMembersDestroy request
	ProductMembersDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductMembersDestroyResponse, error)

	// ProductMembersRetrieve request
	ProductMembersRetrieveWithResponse(ctx context.Context, id int, params *ProductMembersRetrieveParams, reqEditors ...RequestEditorFn) (*ProductMembersRetrieveResponse, error)

	// ProductMembersPartialUpdate request
	ProductMembersPartialUpdateWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductMembersPartialUpdateResponse, error)

	// ProductMembersUpdate request with any body
	ProductMembersUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductMembersUpdateResponse, error)

	ProductMembersUpdateWithResponse(ctx context.Context, id int, body ProductMembersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductMembersUpdateResponse, error)

	ProductMembersUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductMembersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductMembersUpdateResponse, error)

	// ProductTypeGroupsList request
	ProductTypeGroupsListWithResponse(ctx context.Context, params *ProductTypeGroupsListParams, reqEditors ...RequestEditorFn) (*ProductTypeGroupsListResponse, error)

	// ProductTypeGroupsCreate request with any body
	ProductTypeGroupsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductTypeGroupsCreateResponse, error)

	ProductTypeGroupsCreateWithResponse(ctx context.Context, body ProductTypeGroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductTypeGroupsCreateResponse, error)

	ProductTypeGroupsCreateWithFormdataBodyWithResponse(ctx context.Context, body ProductTypeGroupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductTypeGroupsCreateResponse, error)

	// ProductTypeGroupsDestroy request
	ProductTypeGroupsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductTypeGroupsDestroyResponse, error)

	// ProductTypeGroupsRetrieve request
	ProductTypeGroupsRetrieveWithResponse(ctx context.Context, id int, params *ProductTypeGroupsRetrieveParams, reqEditors ...RequestEditorFn) (*ProductTypeGroupsRetrieveResponse, error)

	// ProductTypeGroupsPartialUpdate request
	ProductTypeGroupsPartialUpdateWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductTypeGroupsPartialUpdateResponse, error)

	// ProductTypeGroupsUpdate request with any body
	ProductTypeGroupsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductTypeGroupsUpdateResponse, error)

	ProductTypeGroupsUpdateWithResponse(ctx context.Context, id int, body ProductTypeGroupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductTypeGroupsUpdateResponse, error)

	ProductTypeGroupsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductTypeGroupsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductTypeGroupsUpdateResponse, error)

	// ProductTypeMembersList request
	ProductTypeMembersListWithResponse(ctx context.Context, params *ProductTypeMembersListParams, reqEditors ...RequestEditorFn) (*ProductTypeMembersListResponse, error)

	// ProductTypeMembersCreate request with any body
	ProductTypeMembersCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductTypeMembersCreateResponse, error)

	ProductTypeMembersCreateWithResponse(ctx context.Context, body ProductTypeMembersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductTypeMembersCreateResponse, error)

	ProductTypeMembersCreateWithFormdataBodyWithResponse(ctx context.Context, body ProductTypeMembersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductTypeMembersCreateResponse, error)

	// ProductTypeMembersDestroy request
	ProductTypeMembersDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductTypeMembersDestroyResponse, error)

	// ProductTypeMembersRetrieve request
	ProductTypeMembersRetrieveWithResponse(ctx context.Context, id int, params *ProductTypeMembersRetrieveParams, reqEditors ...RequestEditorFn) (*ProductTypeMembersRetrieveResponse, error)

	// ProductTypeMembersPartialUpdate request
	ProductTypeMembersPartialUpdateWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductTypeMembersPartialUpdateResponse, error)

	// ProductTypeMembersUpdate request with any body
	ProductTypeMembersUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductTypeMembersUpdateResponse, error)

	ProductTypeMembersUpdateWithResponse(ctx context.Context, id int, body ProductTypeMembersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductTypeMembersUpdateResponse, error)

	ProductTypeMembersUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductTypeMembersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductTypeMembersUpdateResponse, error)

	// ProductTypesList request
	ProductTypesListWithResponse(ctx context.Context, params *ProductTypesListParams, reqEditors ...RequestEditorFn) (*ProductTypesListResponse, error)

	// ProductTypesCreate request with any body
	ProductTypesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductTypesCreateResponse, error)

	ProductTypesCreateWithResponse(ctx context.Context, body ProductTypesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductTypesCreateResponse, error)

	ProductTypesCreateWithFormdataBodyWithResponse(ctx context.Context, body ProductTypesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductTypesCreateResponse, error)

	// ProductTypesDestroy request
	ProductTypesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductTypesDestroyResponse, error)

	// ProductTypesRetrieve request
	ProductTypesRetrieveWithResponse(ctx context.Context, id int, params *ProductTypesRetrieveParams, reqEditors ...RequestEditorFn) (*ProductTypesRetrieveResponse, error)

	// ProductTypesPartialUpdate request with any body
	ProductTypesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductTypesPartialUpdateResponse, error)

	ProductTypesPartialUpdateWithResponse(ctx context.Context, id int, body ProductTypesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductTypesPartialUpdateResponse, error)

	ProductTypesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductTypesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductTypesPartialUpdateResponse, error)

	// ProductTypesUpdate request with any body
	ProductTypesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductTypesUpdateResponse, error)

	ProductTypesUpdateWithResponse(ctx context.Context, id int, body ProductTypesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductTypesUpdateResponse, error)

	ProductTypesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductTypesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductTypesUpdateResponse, error)

	// ProductTypesGenerateReportCreate request with any body
	ProductTypesGenerateReportCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductTypesGenerateReportCreateResponse, error)

	ProductTypesGenerateReportCreateWithResponse(ctx context.Context, id int, body ProductTypesGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductTypesGenerateReportCreateResponse, error)

	ProductTypesGenerateReportCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductTypesGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductTypesGenerateReportCreateResponse, error)

	// ProductsList request
	ProductsListWithResponse(ctx context.Context, params *ProductsListParams, reqEditors ...RequestEditorFn) (*ProductsListResponse, error)

	// ProductsCreate request with any body
	ProductsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductsCreateResponse, error)

	ProductsCreateWithResponse(ctx context.Context, body ProductsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductsCreateResponse, error)

	ProductsCreateWithFormdataBodyWithResponse(ctx context.Context, body ProductsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductsCreateResponse, error)

	// ProductsDestroy request
	ProductsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductsDestroyResponse, error)

	// ProductsRetrieve request
	ProductsRetrieveWithResponse(ctx context.Context, id int, params *ProductsRetrieveParams, reqEditors ...RequestEditorFn) (*ProductsRetrieveResponse, error)

	// ProductsPartialUpdate request with any body
	ProductsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductsPartialUpdateResponse, error)

	ProductsPartialUpdateWithResponse(ctx context.Context, id int, body ProductsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductsPartialUpdateResponse, error)

	ProductsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductsPartialUpdateResponse, error)

	// ProductsUpdate request with any body
	ProductsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductsUpdateResponse, error)

	ProductsUpdateWithResponse(ctx context.Context, id int, body ProductsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductsUpdateResponse, error)

	ProductsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductsUpdateResponse, error)

	// ProductsGenerateReportCreate request with any body
	ProductsGenerateReportCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductsGenerateReportCreateResponse, error)

	ProductsGenerateReportCreateWithResponse(ctx context.Context, id int, body ProductsGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductsGenerateReportCreateResponse, error)

	ProductsGenerateReportCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductsGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductsGenerateReportCreateResponse, error)

	// RegulationsList request
	RegulationsListWithResponse(ctx context.Context, params *RegulationsListParams, reqEditors ...RequestEditorFn) (*RegulationsListResponse, error)

	// RegulationsCreate request with any body
	RegulationsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegulationsCreateResponse, error)

	RegulationsCreateWithResponse(ctx context.Context, body RegulationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*RegulationsCreateResponse, error)

	RegulationsCreateWithFormdataBodyWithResponse(ctx context.Context, body RegulationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*RegulationsCreateResponse, error)

	// RegulationsDestroy request
	RegulationsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*RegulationsDestroyResponse, error)

	// RegulationsRetrieve request
	RegulationsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*RegulationsRetrieveResponse, error)

	// RegulationsPartialUpdate request with any body
	RegulationsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegulationsPartialUpdateResponse, error)

	RegulationsPartialUpdateWithResponse(ctx context.Context, id int, body RegulationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*RegulationsPartialUpdateResponse, error)

	RegulationsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body RegulationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*RegulationsPartialUpdateResponse, error)

	// RegulationsUpdate request with any body
	RegulationsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegulationsUpdateResponse, error)

	RegulationsUpdateWithResponse(ctx context.Context, id int, body RegulationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*RegulationsUpdateResponse, error)

	RegulationsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body RegulationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*RegulationsUpdateResponse, error)

	// ReimportScanCreate request with any body
	ReimportScanCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReimportScanCreateResponse, error)

	// RolesList request
	RolesListWithResponse(ctx context.Context, params *RolesListParams, reqEditors ...RequestEditorFn) (*RolesListResponse, error)

	// RolesRetrieve request
	RolesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*RolesRetrieveResponse, error)

	// SonarqubeIssuesList request
	SonarqubeIssuesListWithResponse(ctx context.Context, params *SonarqubeIssuesListParams, reqEditors ...RequestEditorFn) (*SonarqubeIssuesListResponse, error)

	// SonarqubeIssuesCreate request with any body
	SonarqubeIssuesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SonarqubeIssuesCreateResponse, error)

	SonarqubeIssuesCreateWithResponse(ctx context.Context, body SonarqubeIssuesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeIssuesCreateResponse, error)

	SonarqubeIssuesCreateWithFormdataBodyWithResponse(ctx context.Context, body SonarqubeIssuesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeIssuesCreateResponse, error)

	// SonarqubeIssuesDestroy request
	SonarqubeIssuesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*SonarqubeIssuesDestroyResponse, error)

	// SonarqubeIssuesRetrieve request
	SonarqubeIssuesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*SonarqubeIssuesRetrieveResponse, error)

	// SonarqubeIssuesPartialUpdate request with any body
	SonarqubeIssuesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SonarqubeIssuesPartialUpdateResponse, error)

	SonarqubeIssuesPartialUpdateWithResponse(ctx context.Context, id int, body SonarqubeIssuesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeIssuesPartialUpdateResponse, error)

	SonarqubeIssuesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body SonarqubeIssuesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeIssuesPartialUpdateResponse, error)

	// SonarqubeIssuesUpdate request with any body
	SonarqubeIssuesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SonarqubeIssuesUpdateResponse, error)

	SonarqubeIssuesUpdateWithResponse(ctx context.Context, id int, body SonarqubeIssuesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeIssuesUpdateResponse, error)

	SonarqubeIssuesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body SonarqubeIssuesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeIssuesUpdateResponse, error)

	// SonarqubeTransitionsList request
	SonarqubeTransitionsListWithResponse(ctx context.Context, params *SonarqubeTransitionsListParams, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsListResponse, error)

	// SonarqubeTransitionsCreate request with any body
	SonarqubeTransitionsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsCreateResponse, error)

	SonarqubeTransitionsCreateWithResponse(ctx context.Context, body SonarqubeTransitionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsCreateResponse, error)

	SonarqubeTransitionsCreateWithFormdataBodyWithResponse(ctx context.Context, body SonarqubeTransitionsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsCreateResponse, error)

	// SonarqubeTransitionsDestroy request
	SonarqubeTransitionsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsDestroyResponse, error)

	// SonarqubeTransitionsRetrieve request
	SonarqubeTransitionsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsRetrieveResponse, error)

	// SonarqubeTransitionsPartialUpdate request with any body
	SonarqubeTransitionsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsPartialUpdateResponse, error)

	SonarqubeTransitionsPartialUpdateWithResponse(ctx context.Context, id int, body SonarqubeTransitionsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsPartialUpdateResponse, error)

	SonarqubeTransitionsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body SonarqubeTransitionsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsPartialUpdateResponse, error)

	// SonarqubeTransitionsUpdate request with any body
	SonarqubeTransitionsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsUpdateResponse, error)

	SonarqubeTransitionsUpdateWithResponse(ctx context.Context, id int, body SonarqubeTransitionsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsUpdateResponse, error)

	SonarqubeTransitionsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body SonarqubeTransitionsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsUpdateResponse, error)

	// StubFindingsList request
	StubFindingsListWithResponse(ctx context.Context, params *StubFindingsListParams, reqEditors ...RequestEditorFn) (*StubFindingsListResponse, error)

	// StubFindingsCreate request with any body
	StubFindingsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StubFindingsCreateResponse, error)

	StubFindingsCreateWithResponse(ctx context.Context, body StubFindingsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*StubFindingsCreateResponse, error)

	StubFindingsCreateWithFormdataBodyWithResponse(ctx context.Context, body StubFindingsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*StubFindingsCreateResponse, error)

	// StubFindingsDestroy request
	StubFindingsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*StubFindingsDestroyResponse, error)

	// StubFindingsRetrieve request
	StubFindingsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*StubFindingsRetrieveResponse, error)

	// StubFindingsPartialUpdate request with any body
	StubFindingsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StubFindingsPartialUpdateResponse, error)

	StubFindingsPartialUpdateWithResponse(ctx context.Context, id int, body StubFindingsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*StubFindingsPartialUpdateResponse, error)

	StubFindingsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body StubFindingsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*StubFindingsPartialUpdateResponse, error)

	// StubFindingsUpdate request with any body
	StubFindingsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StubFindingsUpdateResponse, error)

	StubFindingsUpdateWithResponse(ctx context.Context, id int, body StubFindingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*StubFindingsUpdateResponse, error)

	StubFindingsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body StubFindingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*StubFindingsUpdateResponse, error)

	// SystemSettingsList request
	SystemSettingsListWithResponse(ctx context.Context, params *SystemSettingsListParams, reqEditors ...RequestEditorFn) (*SystemSettingsListResponse, error)

	// SystemSettingsPartialUpdate request with any body
	SystemSettingsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SystemSettingsPartialUpdateResponse, error)

	SystemSettingsPartialUpdateWithResponse(ctx context.Context, id int, body SystemSettingsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SystemSettingsPartialUpdateResponse, error)

	SystemSettingsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body SystemSettingsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SystemSettingsPartialUpdateResponse, error)

	// SystemSettingsUpdate request with any body
	SystemSettingsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SystemSettingsUpdateResponse, error)

	SystemSettingsUpdateWithResponse(ctx context.Context, id int, body SystemSettingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SystemSettingsUpdateResponse, error)

	SystemSettingsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body SystemSettingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SystemSettingsUpdateResponse, error)

	// TechnologiesList request
	TechnologiesListWithResponse(ctx context.Context, params *TechnologiesListParams, reqEditors ...RequestEditorFn) (*TechnologiesListResponse, error)

	// TechnologiesCreate request with any body
	TechnologiesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TechnologiesCreateResponse, error)

	TechnologiesCreateWithResponse(ctx context.Context, body TechnologiesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TechnologiesCreateResponse, error)

	TechnologiesCreateWithFormdataBodyWithResponse(ctx context.Context, body TechnologiesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TechnologiesCreateResponse, error)

	// TechnologiesDestroy request
	TechnologiesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TechnologiesDestroyResponse, error)

	// TechnologiesRetrieve request
	TechnologiesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TechnologiesRetrieveResponse, error)

	// TechnologiesPartialUpdate request with any body
	TechnologiesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TechnologiesPartialUpdateResponse, error)

	TechnologiesPartialUpdateWithResponse(ctx context.Context, id int, body TechnologiesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TechnologiesPartialUpdateResponse, error)

	TechnologiesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body TechnologiesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TechnologiesPartialUpdateResponse, error)

	// TechnologiesUpdate request with any body
	TechnologiesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TechnologiesUpdateResponse, error)

	TechnologiesUpdateWithResponse(ctx context.Context, id int, body TechnologiesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TechnologiesUpdateResponse, error)

	TechnologiesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body TechnologiesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TechnologiesUpdateResponse, error)

	// TestImportsList request
	TestImportsListWithResponse(ctx context.Context, params *TestImportsListParams, reqEditors ...RequestEditorFn) (*TestImportsListResponse, error)

	// TestImportsCreate request with any body
	TestImportsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestImportsCreateResponse, error)

	TestImportsCreateWithResponse(ctx context.Context, body TestImportsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestImportsCreateResponse, error)

	TestImportsCreateWithFormdataBodyWithResponse(ctx context.Context, body TestImportsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestImportsCreateResponse, error)

	// TestImportsDestroy request
	TestImportsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TestImportsDestroyResponse, error)

	// TestImportsRetrieve request
	TestImportsRetrieveWithResponse(ctx context.Context, id int, params *TestImportsRetrieveParams, reqEditors ...RequestEditorFn) (*TestImportsRetrieveResponse, error)

	// TestImportsPartialUpdate request with any body
	TestImportsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestImportsPartialUpdateResponse, error)

	TestImportsPartialUpdateWithResponse(ctx context.Context, id int, body TestImportsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestImportsPartialUpdateResponse, error)

	TestImportsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body TestImportsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestImportsPartialUpdateResponse, error)

	// TestImportsUpdate request with any body
	TestImportsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestImportsUpdateResponse, error)

	TestImportsUpdateWithResponse(ctx context.Context, id int, body TestImportsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestImportsUpdateResponse, error)

	TestImportsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body TestImportsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestImportsUpdateResponse, error)

	// TestTypesList request
	TestTypesListWithResponse(ctx context.Context, params *TestTypesListParams, reqEditors ...RequestEditorFn) (*TestTypesListResponse, error)

	// TestTypesCreate request with any body
	TestTypesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestTypesCreateResponse, error)

	TestTypesCreateWithResponse(ctx context.Context, body TestTypesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestTypesCreateResponse, error)

	TestTypesCreateWithFormdataBodyWithResponse(ctx context.Context, body TestTypesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestTypesCreateResponse, error)

	// TestTypesRetrieve request
	TestTypesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TestTypesRetrieveResponse, error)

	// TestTypesPartialUpdate request with any body
	TestTypesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestTypesPartialUpdateResponse, error)

	TestTypesPartialUpdateWithResponse(ctx context.Context, id int, body TestTypesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestTypesPartialUpdateResponse, error)

	TestTypesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body TestTypesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestTypesPartialUpdateResponse, error)

	// TestTypesUpdate request with any body
	TestTypesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestTypesUpdateResponse, error)

	TestTypesUpdateWithResponse(ctx context.Context, id int, body TestTypesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestTypesUpdateResponse, error)

	TestTypesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body TestTypesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestTypesUpdateResponse, error)

	// TestsList request
	TestsListWithResponse(ctx context.Context, params *TestsListParams, reqEditors ...RequestEditorFn) (*TestsListResponse, error)

	// TestsCreate request with any body
	TestsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestsCreateResponse, error)

	TestsCreateWithResponse(ctx context.Context, body TestsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestsCreateResponse, error)

	TestsCreateWithFormdataBodyWithResponse(ctx context.Context, body TestsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestsCreateResponse, error)

	// TestsDestroy request
	TestsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TestsDestroyResponse, error)

	// TestsRetrieve request
	TestsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TestsRetrieveResponse, error)

	// TestsPartialUpdate request with any body
	TestsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestsPartialUpdateResponse, error)

	TestsPartialUpdateWithResponse(ctx context.Context, id int, body TestsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestsPartialUpdateResponse, error)

	TestsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body TestsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestsPartialUpdateResponse, error)

	// TestsUpdate request with any body
	TestsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestsUpdateResponse, error)

	TestsUpdateWithResponse(ctx context.Context, id int, body TestsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestsUpdateResponse, error)

	TestsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body TestsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestsUpdateResponse, error)

	// TestsAcceptRisksCreate request with any body
	TestsAcceptRisksCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestsAcceptRisksCreateResponse, error)

	TestsAcceptRisksCreateWithResponse(ctx context.Context, id int, body TestsAcceptRisksCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestsAcceptRisksCreateResponse, error)

	TestsAcceptRisksCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body TestsAcceptRisksCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestsAcceptRisksCreateResponse, error)

	// TestsFilesRetrieve request
	TestsFilesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TestsFilesRetrieveResponse, error)

	// TestsFilesCreate request with any body
	TestsFilesCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestsFilesCreateResponse, error)

	// TestsGenerateReportCreate request with any body
	TestsGenerateReportCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestsGenerateReportCreateResponse, error)

	TestsGenerateReportCreateWithResponse(ctx context.Context, id int, body TestsGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestsGenerateReportCreateResponse, error)

	TestsGenerateReportCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body TestsGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestsGenerateReportCreateResponse, error)

	// TestsNotesRetrieve request
	TestsNotesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TestsNotesRetrieveResponse, error)

	// TestsNotesCreate request with any body
	TestsNotesCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestsNotesCreateResponse, error)

	TestsNotesCreateWithResponse(ctx context.Context, id int, body TestsNotesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestsNotesCreateResponse, error)

	TestsNotesCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body TestsNotesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestsNotesCreateResponse, error)

	// ToolConfigurationsList request
	ToolConfigurationsListWithResponse(ctx context.Context, params *ToolConfigurationsListParams, reqEditors ...RequestEditorFn) (*ToolConfigurationsListResponse, error)

	// ToolConfigurationsCreate request with any body
	ToolConfigurationsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ToolConfigurationsCreateResponse, error)

	ToolConfigurationsCreateWithResponse(ctx context.Context, body ToolConfigurationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ToolConfigurationsCreateResponse, error)

	ToolConfigurationsCreateWithFormdataBodyWithResponse(ctx context.Context, body ToolConfigurationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ToolConfigurationsCreateResponse, error)

	// ToolConfigurationsDestroy request
	ToolConfigurationsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ToolConfigurationsDestroyResponse, error)

	// ToolConfigurationsRetrieve request
	ToolConfigurationsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ToolConfigurationsRetrieveResponse, error)

	// ToolConfigurationsPartialUpdate request with any body
	ToolConfigurationsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ToolConfigurationsPartialUpdateResponse, error)

	ToolConfigurationsPartialUpdateWithResponse(ctx context.Context, id int, body ToolConfigurationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ToolConfigurationsPartialUpdateResponse, error)

	ToolConfigurationsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ToolConfigurationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ToolConfigurationsPartialUpdateResponse, error)

	// ToolConfigurationsUpdate request with any body
	ToolConfigurationsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ToolConfigurationsUpdateResponse, error)

	ToolConfigurationsUpdateWithResponse(ctx context.Context, id int, body ToolConfigurationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ToolConfigurationsUpdateResponse, error)

	ToolConfigurationsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ToolConfigurationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ToolConfigurationsUpdateResponse, error)

	// ToolProductSettingsList request
	ToolProductSettingsListWithResponse(ctx context.Context, params *ToolProductSettingsListParams, reqEditors ...RequestEditorFn) (*ToolProductSettingsListResponse, error)

	// ToolProductSettingsCreate request with any body
	ToolProductSettingsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ToolProductSettingsCreateResponse, error)

	ToolProductSettingsCreateWithResponse(ctx context.Context, body ToolProductSettingsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ToolProductSettingsCreateResponse, error)

	ToolProductSettingsCreateWithFormdataBodyWithResponse(ctx context.Context, body ToolProductSettingsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ToolProductSettingsCreateResponse, error)

	// ToolProductSettingsDestroy request
	ToolProductSettingsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ToolProductSettingsDestroyResponse, error)

	// ToolProductSettingsRetrieve request
	ToolProductSettingsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ToolProductSettingsRetrieveResponse, error)

	// ToolProductSettingsPartialUpdate request with any body
	ToolProductSettingsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ToolProductSettingsPartialUpdateResponse, error)

	ToolProductSettingsPartialUpdateWithResponse(ctx context.Context, id int, body ToolProductSettingsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ToolProductSettingsPartialUpdateResponse, error)

	ToolProductSettingsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ToolProductSettingsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ToolProductSettingsPartialUpdateResponse, error)

	// ToolProductSettingsUpdate request with any body
	ToolProductSettingsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ToolProductSettingsUpdateResponse, error)

	ToolProductSettingsUpdateWithResponse(ctx context.Context, id int, body ToolProductSettingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ToolProductSettingsUpdateResponse, error)

	ToolProductSettingsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ToolProductSettingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ToolProductSettingsUpdateResponse, error)

	// ToolTypesList request
	ToolTypesListWithResponse(ctx context.Context, params *ToolTypesListParams, reqEditors ...RequestEditorFn) (*ToolTypesListResponse, error)

	// ToolTypesCreate request with any body
	ToolTypesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ToolTypesCreateResponse, error)

	ToolTypesCreateWithResponse(ctx context.Context, body ToolTypesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ToolTypesCreateResponse, error)

	ToolTypesCreateWithFormdataBodyWithResponse(ctx context.Context, body ToolTypesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ToolTypesCreateResponse, error)

	// ToolTypesDestroy request
	ToolTypesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ToolTypesDestroyResponse, error)

	// ToolTypesRetrieve request
	ToolTypesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ToolTypesRetrieveResponse, error)

	// ToolTypesPartialUpdate request with any body
	ToolTypesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ToolTypesPartialUpdateResponse, error)

	ToolTypesPartialUpdateWithResponse(ctx context.Context, id int, body ToolTypesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ToolTypesPartialUpdateResponse, error)

	ToolTypesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ToolTypesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ToolTypesPartialUpdateResponse, error)

	// ToolTypesUpdate request with any body
	ToolTypesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ToolTypesUpdateResponse, error)

	ToolTypesUpdateWithResponse(ctx context.Context, id int, body ToolTypesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ToolTypesUpdateResponse, error)

	ToolTypesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ToolTypesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ToolTypesUpdateResponse, error)

	// UserContactInfosList request
	UserContactInfosListWithResponse(ctx context.Context, params *UserContactInfosListParams, reqEditors ...RequestEditorFn) (*UserContactInfosListResponse, error)

	// UserContactInfosCreate request with any body
	UserContactInfosCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserContactInfosCreateResponse, error)

	UserContactInfosCreateWithResponse(ctx context.Context, body UserContactInfosCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*UserContactInfosCreateResponse, error)

	UserContactInfosCreateWithFormdataBodyWithResponse(ctx context.Context, body UserContactInfosCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UserContactInfosCreateResponse, error)

	// UserContactInfosDestroy request
	UserContactInfosDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*UserContactInfosDestroyResponse, error)

	// UserContactInfosRetrieve request
	UserContactInfosRetrieveWithResponse(ctx context.Context, id int, params *UserContactInfosRetrieveParams, reqEditors ...RequestEditorFn) (*UserContactInfosRetrieveResponse, error)

	// UserContactInfosPartialUpdate request with any body
	UserContactInfosPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserContactInfosPartialUpdateResponse, error)

	UserContactInfosPartialUpdateWithResponse(ctx context.Context, id int, body UserContactInfosPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UserContactInfosPartialUpdateResponse, error)

	UserContactInfosPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body UserContactInfosPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UserContactInfosPartialUpdateResponse, error)

	// UserContactInfosUpdate request with any body
	UserContactInfosUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserContactInfosUpdateResponse, error)

	UserContactInfosUpdateWithResponse(ctx context.Context, id int, body UserContactInfosUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UserContactInfosUpdateResponse, error)

	UserContactInfosUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body UserContactInfosUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UserContactInfosUpdateResponse, error)

	// UserProfileRetrieve request
	UserProfileRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UserProfileRetrieveResponse, error)

	// UsersList request
	UsersListWithResponse(ctx context.Context, params *UsersListParams, reqEditors ...RequestEditorFn) (*UsersListResponse, error)

	// UsersCreate request with any body
	UsersCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersCreateResponse, error)

	UsersCreateWithResponse(ctx context.Context, body UsersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersCreateResponse, error)

	UsersCreateWithFormdataBodyWithResponse(ctx context.Context, body UsersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UsersCreateResponse, error)

	// UsersDestroy request
	UsersDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*UsersDestroyResponse, error)

	// UsersRetrieve request
	UsersRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*UsersRetrieveResponse, error)

	// UsersPartialUpdate request with any body
	UsersPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersPartialUpdateResponse, error)

	UsersPartialUpdateWithResponse(ctx context.Context, id int, body UsersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersPartialUpdateResponse, error)

	UsersPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body UsersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UsersPartialUpdateResponse, error)

	// UsersUpdate request with any body
	UsersUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUpdateResponse, error)

	UsersUpdateWithResponse(ctx context.Context, id int, body UsersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUpdateResponse, error)

	UsersUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body UsersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UsersUpdateResponse, error)
}

type ApiTokenAuthCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthToken
}

// Status returns HTTPResponse.Status
func (r ApiTokenAuthCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiTokenAuthCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevelopmentEnvironmentsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDevelopmentEnvironmentList
}

// Status returns HTTPResponse.Status
func (r DevelopmentEnvironmentsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevelopmentEnvironmentsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevelopmentEnvironmentsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *DevelopmentEnvironment
}

// Status returns HTTPResponse.Status
func (r DevelopmentEnvironmentsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevelopmentEnvironmentsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevelopmentEnvironmentsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DevelopmentEnvironmentsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevelopmentEnvironmentsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevelopmentEnvironmentsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DevelopmentEnvironment
}

// Status returns HTTPResponse.Status
func (r DevelopmentEnvironmentsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevelopmentEnvironmentsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevelopmentEnvironmentsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DevelopmentEnvironment
}

// Status returns HTTPResponse.Status
func (r DevelopmentEnvironmentsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevelopmentEnvironmentsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevelopmentEnvironmentsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DevelopmentEnvironment
}

// Status returns HTTPResponse.Status
func (r DevelopmentEnvironmentsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevelopmentEnvironmentsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DojoGroupMembersListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDojoGroupMemberList
}

// Status returns HTTPResponse.Status
func (r DojoGroupMembersListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DojoGroupMembersListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DojoGroupMembersCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *DojoGroupMember
}

// Status returns HTTPResponse.Status
func (r DojoGroupMembersCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DojoGroupMembersCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DojoGroupMembersDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DojoGroupMembersDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DojoGroupMembersDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DojoGroupMembersRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DojoGroupMember
}

// Status returns HTTPResponse.Status
func (r DojoGroupMembersRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DojoGroupMembersRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DojoGroupMembersPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DojoGroupMember
}

// Status returns HTTPResponse.Status
func (r DojoGroupMembersPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DojoGroupMembersPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DojoGroupMembersUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DojoGroupMember
}

// Status returns HTTPResponse.Status
func (r DojoGroupMembersUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DojoGroupMembersUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DojoGroupsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDojoGroupList
}

// Status returns HTTPResponse.Status
func (r DojoGroupsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DojoGroupsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DojoGroupsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *DojoGroup
}

// Status returns HTTPResponse.Status
func (r DojoGroupsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DojoGroupsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DojoGroupsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DojoGroupsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DojoGroupsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DojoGroupsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DojoGroup
}

// Status returns HTTPResponse.Status
func (r DojoGroupsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DojoGroupsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DojoGroupsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DojoGroup
}

// Status returns HTTPResponse.Status
func (r DojoGroupsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DojoGroupsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DojoGroupsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DojoGroup
}

// Status returns HTTPResponse.Status
func (r DojoGroupsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DojoGroupsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EndpointMetaImportCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *EndpointMetaImporter
}

// Status returns HTTPResponse.Status
func (r EndpointMetaImportCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EndpointMetaImportCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EndpointStatusListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedEndpointStatusList
}

// Status returns HTTPResponse.Status
func (r EndpointStatusListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EndpointStatusListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EndpointStatusCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *EndpointStatus
}

// Status returns HTTPResponse.Status
func (r EndpointStatusCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EndpointStatusCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EndpointStatusDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EndpointStatusDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EndpointStatusDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EndpointStatusRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EndpointStatus
}

// Status returns HTTPResponse.Status
func (r EndpointStatusRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EndpointStatusRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EndpointStatusPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EndpointStatus
}

// Status returns HTTPResponse.Status
func (r EndpointStatusPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EndpointStatusPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EndpointStatusUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EndpointStatus
}

// Status returns HTTPResponse.Status
func (r EndpointStatusUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EndpointStatusUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EndpointsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedEndpointList
}

// Status returns HTTPResponse.Status
func (r EndpointsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EndpointsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EndpointsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Endpoint
}

// Status returns HTTPResponse.Status
func (r EndpointsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EndpointsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EndpointsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EndpointsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EndpointsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EndpointsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Endpoint
}

// Status returns HTTPResponse.Status
func (r EndpointsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EndpointsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EndpointsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Endpoint
}

// Status returns HTTPResponse.Status
func (r EndpointsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EndpointsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EndpointsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Endpoint
}

// Status returns HTTPResponse.Status
func (r EndpointsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EndpointsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EndpointsGenerateReportCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReportGenerate
}

// Status returns HTTPResponse.Status
func (r EndpointsGenerateReportCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EndpointsGenerateReportCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EngagementPresetsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedEngagementPresetsList
}

// Status returns HTTPResponse.Status
func (r EngagementPresetsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EngagementPresetsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EngagementPresetsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *EngagementPresets
}

// Status returns HTTPResponse.Status
func (r EngagementPresetsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EngagementPresetsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EngagementPresetsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EngagementPresetsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EngagementPresetsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EngagementPresetsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EngagementPresets
}

// Status returns HTTPResponse.Status
func (r EngagementPresetsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EngagementPresetsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EngagementPresetsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EngagementPresets
}

// Status returns HTTPResponse.Status
func (r EngagementPresetsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EngagementPresetsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EngagementPresetsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EngagementPresets
}

// Status returns HTTPResponse.Status
func (r EngagementPresetsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EngagementPresetsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EngagementsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedEngagementList
}

// Status returns HTTPResponse.Status
func (r EngagementsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EngagementsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EngagementsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Engagement
}

// Status returns HTTPResponse.Status
func (r EngagementsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EngagementsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EngagementsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EngagementsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EngagementsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EngagementsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Engagement
}

// Status returns HTTPResponse.Status
func (r EngagementsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EngagementsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EngagementsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Engagement
}

// Status returns HTTPResponse.Status
func (r EngagementsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EngagementsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EngagementsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Engagement
}

// Status returns HTTPResponse.Status
func (r EngagementsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EngagementsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EngagementsAcceptRisksCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]RiskAcceptance
}

// Status returns HTTPResponse.Status
func (r EngagementsAcceptRisksCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EngagementsAcceptRisksCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EngagementsCloseCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EngagementsCloseCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EngagementsCloseCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EngagementsFilesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EngagementToFiles
}

// Status returns HTTPResponse.Status
func (r EngagementsFilesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EngagementsFilesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EngagementsFilesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *File
}

// Status returns HTTPResponse.Status
func (r EngagementsFilesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EngagementsFilesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EngagementsGenerateReportCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReportGenerate
}

// Status returns HTTPResponse.Status
func (r EngagementsGenerateReportCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EngagementsGenerateReportCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EngagementsNotesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EngagementToNotes
}

// Status returns HTTPResponse.Status
func (r EngagementsNotesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EngagementsNotesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EngagementsNotesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Note
}

// Status returns HTTPResponse.Status
func (r EngagementsNotesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EngagementsNotesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EngagementsReopenCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EngagementsReopenCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EngagementsReopenCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingTemplatesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedFindingTemplateList
}

// Status returns HTTPResponse.Status
func (r FindingTemplatesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingTemplatesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingTemplatesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *FindingTemplate
}

// Status returns HTTPResponse.Status
func (r FindingTemplatesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingTemplatesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingTemplatesDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r FindingTemplatesDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingTemplatesDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingTemplatesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FindingTemplate
}

// Status returns HTTPResponse.Status
func (r FindingTemplatesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingTemplatesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingTemplatesPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FindingTemplate
}

// Status returns HTTPResponse.Status
func (r FindingTemplatesPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingTemplatesPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingTemplatesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FindingTemplate
}

// Status returns HTTPResponse.Status
func (r FindingTemplatesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingTemplatesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedFindingList
}

// Status returns HTTPResponse.Status
func (r FindingsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *FindingCreate
}

// Status returns HTTPResponse.Status
func (r FindingsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsAcceptRisksCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PaginatedRiskAcceptanceList
}

// Status returns HTTPResponse.Status
func (r FindingsAcceptRisksCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsAcceptRisksCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsGenerateReportCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReportGenerate
}

// Status returns HTTPResponse.Status
func (r FindingsGenerateReportCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsGenerateReportCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r FindingsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Finding
}

// Status returns HTTPResponse.Status
func (r FindingsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Finding
}

// Status returns HTTPResponse.Status
func (r FindingsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Finding
}

// Status returns HTTPResponse.Status
func (r FindingsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsDuplicateListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Finding
}

// Status returns HTTPResponse.Status
func (r FindingsDuplicateListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsDuplicateListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsDuplicateResetCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r FindingsDuplicateResetCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsDuplicateResetCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsFilesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FindingToFiles
}

// Status returns HTTPResponse.Status
func (r FindingsFilesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsFilesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsFilesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *File
}

// Status returns HTTPResponse.Status
func (r FindingsFilesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsFilesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsMetadataDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r FindingsMetadataDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsMetadataDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsMetadataListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FindingMeta
}

// Status returns HTTPResponse.Status
func (r FindingsMetadataListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsMetadataListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsMetadataCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FindingMeta
}

// Status returns HTTPResponse.Status
func (r FindingsMetadataCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsMetadataCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsMetadataUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FindingMeta
}

// Status returns HTTPResponse.Status
func (r FindingsMetadataUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsMetadataUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsNotesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FindingToNotes
}

// Status returns HTTPResponse.Status
func (r FindingsNotesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsNotesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsNotesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Note
}

// Status returns HTTPResponse.Status
func (r FindingsNotesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsNotesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsOriginalCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r FindingsOriginalCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsOriginalCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsRemoveNotePartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r FindingsRemoveNotePartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsRemoveNotePartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsRemoveTagsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r FindingsRemoveTagsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsRemoveTagsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsRemoveTagsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r FindingsRemoveTagsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsRemoveTagsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsRequestResponseRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BurpRawRequestResponse
}

// Status returns HTTPResponse.Status
func (r FindingsRequestResponseRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsRequestResponseRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsRequestResponseCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BurpRawRequestResponse
}

// Status returns HTTPResponse.Status
func (r FindingsRequestResponseCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsRequestResponseCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsTagsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Tag
}

// Status returns HTTPResponse.Status
func (r FindingsTagsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsTagsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsTagsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Tag
}

// Status returns HTTPResponse.Status
func (r FindingsTagsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsTagsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GlobalRolesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedGlobalRoleList
}

// Status returns HTTPResponse.Status
func (r GlobalRolesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GlobalRolesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GlobalRolesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *GlobalRole
}

// Status returns HTTPResponse.Status
func (r GlobalRolesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GlobalRolesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GlobalRolesDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GlobalRolesDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GlobalRolesDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GlobalRolesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GlobalRole
}

// Status returns HTTPResponse.Status
func (r GlobalRolesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GlobalRolesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GlobalRolesPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GlobalRole
}

// Status returns HTTPResponse.Status
func (r GlobalRolesPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GlobalRolesPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GlobalRolesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GlobalRole
}

// Status returns HTTPResponse.Status
func (r GlobalRolesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GlobalRolesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ImportLanguagesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ImportLanguages
}

// Status returns HTTPResponse.Status
func (r ImportLanguagesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ImportLanguagesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ImportScanCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ImportScan
}

// Status returns HTTPResponse.Status
func (r ImportScanCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ImportScanCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraConfigurationsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedJIRAInstanceList
}

// Status returns HTTPResponse.Status
func (r JiraConfigurationsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraConfigurationsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraConfigurationsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *JIRAInstance
}

// Status returns HTTPResponse.Status
func (r JiraConfigurationsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraConfigurationsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraConfigurationsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r JiraConfigurationsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraConfigurationsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraConfigurationsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JIRAInstance
}

// Status returns HTTPResponse.Status
func (r JiraConfigurationsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraConfigurationsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraConfigurationsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JIRAInstance
}

// Status returns HTTPResponse.Status
func (r JiraConfigurationsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraConfigurationsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraConfigurationsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JIRAInstance
}

// Status returns HTTPResponse.Status
func (r JiraConfigurationsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraConfigurationsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraFindingMappingsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedJIRAIssueList
}

// Status returns HTTPResponse.Status
func (r JiraFindingMappingsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraFindingMappingsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraFindingMappingsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *JIRAIssue
}

// Status returns HTTPResponse.Status
func (r JiraFindingMappingsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraFindingMappingsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraFindingMappingsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r JiraFindingMappingsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraFindingMappingsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraFindingMappingsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JIRAIssue
}

// Status returns HTTPResponse.Status
func (r JiraFindingMappingsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraFindingMappingsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraFindingMappingsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JIRAIssue
}

// Status returns HTTPResponse.Status
func (r JiraFindingMappingsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraFindingMappingsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraFindingMappingsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JIRAIssue
}

// Status returns HTTPResponse.Status
func (r JiraFindingMappingsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraFindingMappingsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraInstancesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedJIRAInstanceList
}

// Status returns HTTPResponse.Status
func (r JiraInstancesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraInstancesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraInstancesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *JIRAInstance
}

// Status returns HTTPResponse.Status
func (r JiraInstancesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraInstancesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraInstancesDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r JiraInstancesDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraInstancesDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraInstancesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JIRAInstance
}

// Status returns HTTPResponse.Status
func (r JiraInstancesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraInstancesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraInstancesPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JIRAInstance
}

// Status returns HTTPResponse.Status
func (r JiraInstancesPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraInstancesPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraInstancesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JIRAInstance
}

// Status returns HTTPResponse.Status
func (r JiraInstancesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraInstancesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraProductConfigurationsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedJIRAProjectList
}

// Status returns HTTPResponse.Status
func (r JiraProductConfigurationsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraProductConfigurationsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraProductConfigurationsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *JIRAProject
}

// Status returns HTTPResponse.Status
func (r JiraProductConfigurationsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraProductConfigurationsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraProductConfigurationsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r JiraProductConfigurationsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraProductConfigurationsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraProductConfigurationsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JIRAProject
}

// Status returns HTTPResponse.Status
func (r JiraProductConfigurationsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraProductConfigurationsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraProductConfigurationsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JIRAProject
}

// Status returns HTTPResponse.Status
func (r JiraProductConfigurationsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraProductConfigurationsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraProductConfigurationsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JIRAProject
}

// Status returns HTTPResponse.Status
func (r JiraProductConfigurationsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraProductConfigurationsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraProjectsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedJIRAProjectList
}

// Status returns HTTPResponse.Status
func (r JiraProjectsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraProjectsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraProjectsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *JIRAProject
}

// Status returns HTTPResponse.Status
func (r JiraProjectsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraProjectsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraProjectsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r JiraProjectsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraProjectsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraProjectsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JIRAProject
}

// Status returns HTTPResponse.Status
func (r JiraProjectsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraProjectsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraProjectsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JIRAProject
}

// Status returns HTTPResponse.Status
func (r JiraProjectsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraProjectsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraProjectsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JIRAProject
}

// Status returns HTTPResponse.Status
func (r JiraProjectsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraProjectsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LanguageTypesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedLanguageTypeList
}

// Status returns HTTPResponse.Status
func (r LanguageTypesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LanguageTypesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LanguageTypesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *LanguageType
}

// Status returns HTTPResponse.Status
func (r LanguageTypesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LanguageTypesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LanguageTypesDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LanguageTypesDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LanguageTypesDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LanguageTypesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LanguageType
}

// Status returns HTTPResponse.Status
func (r LanguageTypesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LanguageTypesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LanguageTypesPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LanguageType
}

// Status returns HTTPResponse.Status
func (r LanguageTypesPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LanguageTypesPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LanguageTypesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LanguageType
}

// Status returns HTTPResponse.Status
func (r LanguageTypesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LanguageTypesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LanguagesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedLanguageList
}

// Status returns HTTPResponse.Status
func (r LanguagesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LanguagesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LanguagesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Language
}

// Status returns HTTPResponse.Status
func (r LanguagesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LanguagesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LanguagesDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LanguagesDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LanguagesDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LanguagesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Language
}

// Status returns HTTPResponse.Status
func (r LanguagesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LanguagesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LanguagesPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Language
}

// Status returns HTTPResponse.Status
func (r LanguagesPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LanguagesPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LanguagesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Language
}

// Status returns HTTPResponse.Status
func (r LanguagesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LanguagesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MetadataListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedMetaList
}

// Status returns HTTPResponse.Status
func (r MetadataListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MetadataListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MetadataCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Meta
}

// Status returns HTTPResponse.Status
func (r MetadataCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MetadataCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MetadataDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r MetadataDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MetadataDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MetadataRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Meta
}

// Status returns HTTPResponse.Status
func (r MetadataRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MetadataRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MetadataPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Meta
}

// Status returns HTTPResponse.Status
func (r MetadataPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MetadataPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MetadataUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Meta
}

// Status returns HTTPResponse.Status
func (r MetadataUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MetadataUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkLocationsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedNetworkLocationsList
}

// Status returns HTTPResponse.Status
func (r NetworkLocationsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkLocationsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkLocationsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *NetworkLocations
}

// Status returns HTTPResponse.Status
func (r NetworkLocationsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkLocationsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkLocationsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r NetworkLocationsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkLocationsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkLocationsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkLocations
}

// Status returns HTTPResponse.Status
func (r NetworkLocationsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkLocationsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkLocationsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkLocations
}

// Status returns HTTPResponse.Status
func (r NetworkLocationsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkLocationsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkLocationsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkLocations
}

// Status returns HTTPResponse.Status
func (r NetworkLocationsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkLocationsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NoteTypeListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedNoteTypeList
}

// Status returns HTTPResponse.Status
func (r NoteTypeListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NoteTypeListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NoteTypeCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *NoteType
}

// Status returns HTTPResponse.Status
func (r NoteTypeCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NoteTypeCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NoteTypeDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r NoteTypeDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NoteTypeDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NoteTypeRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NoteType
}

// Status returns HTTPResponse.Status
func (r NoteTypeRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NoteTypeRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NoteTypePartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NoteType
}

// Status returns HTTPResponse.Status
func (r NoteTypePartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NoteTypePartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NoteTypeUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NoteType
}

// Status returns HTTPResponse.Status
func (r NoteTypeUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NoteTypeUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NotesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedNoteList
}

// Status returns HTTPResponse.Status
func (r NotesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NotesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Note
}

// Status returns HTTPResponse.Status
func (r NotesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NotesPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Note
}

// Status returns HTTPResponse.Status
func (r NotesPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotesPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NotesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Note
}

// Status returns HTTPResponse.Status
func (r NotesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NotificationsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedNotificationsList
}

// Status returns HTTPResponse.Status
func (r NotificationsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotificationsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NotificationsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Notifications
}

// Status returns HTTPResponse.Status
func (r NotificationsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotificationsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NotificationsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r NotificationsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotificationsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NotificationsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Notifications
}

// Status returns HTTPResponse.Status
func (r NotificationsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotificationsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NotificationsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Notifications
}

// Status returns HTTPResponse.Status
func (r NotificationsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotificationsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NotificationsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Notifications
}

// Status returns HTTPResponse.Status
func (r NotificationsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotificationsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Oa3SchemaRetrieveResponse struct {
	Body                            []byte
	HTTPResponse                    *http.Response
	JSON200                         *map[string]interface{}
	ApplicationvndOaiOpenapiJSON200 *map[string]interface{}
	YAML200                         *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r Oa3SchemaRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Oa3SchemaRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductApiScanConfigurationsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedProductAPIScanConfigurationList
}

// Status returns HTTPResponse.Status
func (r ProductApiScanConfigurationsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductApiScanConfigurationsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductApiScanConfigurationsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ProductAPIScanConfiguration
}

// Status returns HTTPResponse.Status
func (r ProductApiScanConfigurationsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductApiScanConfigurationsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductApiScanConfigurationsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ProductApiScanConfigurationsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductApiScanConfigurationsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductApiScanConfigurationsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductAPIScanConfiguration
}

// Status returns HTTPResponse.Status
func (r ProductApiScanConfigurationsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductApiScanConfigurationsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductApiScanConfigurationsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductAPIScanConfiguration
}

// Status returns HTTPResponse.Status
func (r ProductApiScanConfigurationsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductApiScanConfigurationsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductApiScanConfigurationsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductAPIScanConfiguration
}

// Status returns HTTPResponse.Status
func (r ProductApiScanConfigurationsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductApiScanConfigurationsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductGroupsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedProductGroupList
}

// Status returns HTTPResponse.Status
func (r ProductGroupsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductGroupsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductGroupsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ProductGroup
}

// Status returns HTTPResponse.Status
func (r ProductGroupsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductGroupsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductGroupsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ProductGroupsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductGroupsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductGroupsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductGroup
}

// Status returns HTTPResponse.Status
func (r ProductGroupsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductGroupsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductGroupsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ProductGroupsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductGroupsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductGroupsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductGroup
}

// Status returns HTTPResponse.Status
func (r ProductGroupsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductGroupsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductMembersListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedProductMemberList
}

// Status returns HTTPResponse.Status
func (r ProductMembersListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductMembersListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductMembersCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ProductMember
}

// Status returns HTTPResponse.Status
func (r ProductMembersCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductMembersCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductMembersDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ProductMembersDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductMembersDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductMembersRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductMember
}

// Status returns HTTPResponse.Status
func (r ProductMembersRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductMembersRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductMembersPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ProductMembersPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductMembersPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductMembersUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductMember
}

// Status returns HTTPResponse.Status
func (r ProductMembersUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductMembersUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductTypeGroupsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedProductTypeGroupList
}

// Status returns HTTPResponse.Status
func (r ProductTypeGroupsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductTypeGroupsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductTypeGroupsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ProductTypeGroup
}

// Status returns HTTPResponse.Status
func (r ProductTypeGroupsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductTypeGroupsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductTypeGroupsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ProductTypeGroupsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductTypeGroupsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductTypeGroupsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductTypeGroup
}

// Status returns HTTPResponse.Status
func (r ProductTypeGroupsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductTypeGroupsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductTypeGroupsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ProductTypeGroupsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductTypeGroupsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductTypeGroupsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductTypeGroup
}

// Status returns HTTPResponse.Status
func (r ProductTypeGroupsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductTypeGroupsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductTypeMembersListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedProductTypeMemberList
}

// Status returns HTTPResponse.Status
func (r ProductTypeMembersListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductTypeMembersListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductTypeMembersCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ProductTypeMember
}

// Status returns HTTPResponse.Status
func (r ProductTypeMembersCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductTypeMembersCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductTypeMembersDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ProductTypeMembersDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductTypeMembersDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductTypeMembersRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductTypeMember
}

// Status returns HTTPResponse.Status
func (r ProductTypeMembersRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductTypeMembersRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductTypeMembersPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ProductTypeMembersPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductTypeMembersPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductTypeMembersUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductTypeMember
}

// Status returns HTTPResponse.Status
func (r ProductTypeMembersUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductTypeMembersUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductTypesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedProductTypeList
}

// Status returns HTTPResponse.Status
func (r ProductTypesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductTypesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductTypesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ProductType
}

// Status returns HTTPResponse.Status
func (r ProductTypesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductTypesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductTypesDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ProductTypesDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductTypesDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductTypesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductType
}

// Status returns HTTPResponse.Status
func (r ProductTypesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductTypesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductTypesPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductType
}

// Status returns HTTPResponse.Status
func (r ProductTypesPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductTypesPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductTypesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductType
}

// Status returns HTTPResponse.Status
func (r ProductTypesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductTypesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductTypesGenerateReportCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReportGenerate
}

// Status returns HTTPResponse.Status
func (r ProductTypesGenerateReportCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductTypesGenerateReportCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedProductList
}

// Status returns HTTPResponse.Status
func (r ProductsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Product
}

// Status returns HTTPResponse.Status
func (r ProductsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ProductsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Product
}

// Status returns HTTPResponse.Status
func (r ProductsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Product
}

// Status returns HTTPResponse.Status
func (r ProductsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Product
}

// Status returns HTTPResponse.Status
func (r ProductsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductsGenerateReportCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReportGenerate
}

// Status returns HTTPResponse.Status
func (r ProductsGenerateReportCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductsGenerateReportCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegulationsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedRegulationList
}

// Status returns HTTPResponse.Status
func (r RegulationsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegulationsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegulationsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Regulation
}

// Status returns HTTPResponse.Status
func (r RegulationsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegulationsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegulationsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RegulationsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegulationsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegulationsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Regulation
}

// Status returns HTTPResponse.Status
func (r RegulationsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegulationsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegulationsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Regulation
}

// Status returns HTTPResponse.Status
func (r RegulationsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegulationsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegulationsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Regulation
}

// Status returns HTTPResponse.Status
func (r RegulationsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegulationsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReimportScanCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ReImportScan
}

// Status returns HTTPResponse.Status
func (r ReimportScanCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReimportScanCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RolesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedRoleList
}

// Status returns HTTPResponse.Status
func (r RolesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RolesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RolesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Role
}

// Status returns HTTPResponse.Status
func (r RolesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RolesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SonarqubeIssuesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedSonarqubeIssueList
}

// Status returns HTTPResponse.Status
func (r SonarqubeIssuesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SonarqubeIssuesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SonarqubeIssuesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SonarqubeIssue
}

// Status returns HTTPResponse.Status
func (r SonarqubeIssuesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SonarqubeIssuesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SonarqubeIssuesDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SonarqubeIssuesDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SonarqubeIssuesDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SonarqubeIssuesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SonarqubeIssue
}

// Status returns HTTPResponse.Status
func (r SonarqubeIssuesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SonarqubeIssuesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SonarqubeIssuesPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SonarqubeIssue
}

// Status returns HTTPResponse.Status
func (r SonarqubeIssuesPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SonarqubeIssuesPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SonarqubeIssuesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SonarqubeIssue
}

// Status returns HTTPResponse.Status
func (r SonarqubeIssuesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SonarqubeIssuesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SonarqubeTransitionsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedSonarqubeIssueTransitionList
}

// Status returns HTTPResponse.Status
func (r SonarqubeTransitionsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SonarqubeTransitionsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SonarqubeTransitionsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SonarqubeIssueTransition
}

// Status returns HTTPResponse.Status
func (r SonarqubeTransitionsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SonarqubeTransitionsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SonarqubeTransitionsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SonarqubeTransitionsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SonarqubeTransitionsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SonarqubeTransitionsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SonarqubeIssueTransition
}

// Status returns HTTPResponse.Status
func (r SonarqubeTransitionsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SonarqubeTransitionsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SonarqubeTransitionsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SonarqubeIssueTransition
}

// Status returns HTTPResponse.Status
func (r SonarqubeTransitionsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SonarqubeTransitionsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SonarqubeTransitionsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SonarqubeIssueTransition
}

// Status returns HTTPResponse.Status
func (r SonarqubeTransitionsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SonarqubeTransitionsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StubFindingsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedStubFindingList
}

// Status returns HTTPResponse.Status
func (r StubFindingsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StubFindingsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StubFindingsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *StubFindingCreate
}

// Status returns HTTPResponse.Status
func (r StubFindingsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StubFindingsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StubFindingsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r StubFindingsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StubFindingsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StubFindingsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StubFinding
}

// Status returns HTTPResponse.Status
func (r StubFindingsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StubFindingsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StubFindingsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StubFinding
}

// Status returns HTTPResponse.Status
func (r StubFindingsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StubFindingsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StubFindingsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StubFinding
}

// Status returns HTTPResponse.Status
func (r StubFindingsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StubFindingsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SystemSettingsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedSystemSettingsList
}

// Status returns HTTPResponse.Status
func (r SystemSettingsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SystemSettingsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SystemSettingsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SystemSettings
}

// Status returns HTTPResponse.Status
func (r SystemSettingsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SystemSettingsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SystemSettingsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SystemSettings
}

// Status returns HTTPResponse.Status
func (r SystemSettingsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SystemSettingsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TechnologiesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedAppAnalysisList
}

// Status returns HTTPResponse.Status
func (r TechnologiesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TechnologiesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TechnologiesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AppAnalysis
}

// Status returns HTTPResponse.Status
func (r TechnologiesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TechnologiesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TechnologiesDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TechnologiesDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TechnologiesDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TechnologiesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppAnalysis
}

// Status returns HTTPResponse.Status
func (r TechnologiesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TechnologiesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TechnologiesPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppAnalysis
}

// Status returns HTTPResponse.Status
func (r TechnologiesPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TechnologiesPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TechnologiesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppAnalysis
}

// Status returns HTTPResponse.Status
func (r TechnologiesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TechnologiesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestImportsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedTestImportList
}

// Status returns HTTPResponse.Status
func (r TestImportsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestImportsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestImportsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TestImport
}

// Status returns HTTPResponse.Status
func (r TestImportsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestImportsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestImportsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestImportsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestImportsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestImportsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TestImport
}

// Status returns HTTPResponse.Status
func (r TestImportsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestImportsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestImportsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TestImport
}

// Status returns HTTPResponse.Status
func (r TestImportsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestImportsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestImportsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TestImport
}

// Status returns HTTPResponse.Status
func (r TestImportsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestImportsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestTypesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedTestTypeList
}

// Status returns HTTPResponse.Status
func (r TestTypesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestTypesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestTypesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TestType
}

// Status returns HTTPResponse.Status
func (r TestTypesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestTypesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestTypesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TestType
}

// Status returns HTTPResponse.Status
func (r TestTypesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestTypesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestTypesPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TestType
}

// Status returns HTTPResponse.Status
func (r TestTypesPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestTypesPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestTypesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TestType
}

// Status returns HTTPResponse.Status
func (r TestTypesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestTypesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedTestList
}

// Status returns HTTPResponse.Status
func (r TestsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TestCreate
}

// Status returns HTTPResponse.Status
func (r TestsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Test
}

// Status returns HTTPResponse.Status
func (r TestsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Test
}

// Status returns HTTPResponse.Status
func (r TestsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Test
}

// Status returns HTTPResponse.Status
func (r TestsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestsAcceptRisksCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]RiskAcceptance
}

// Status returns HTTPResponse.Status
func (r TestsAcceptRisksCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestsAcceptRisksCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestsFilesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TestToFiles
}

// Status returns HTTPResponse.Status
func (r TestsFilesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestsFilesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestsFilesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *File
}

// Status returns HTTPResponse.Status
func (r TestsFilesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestsFilesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestsGenerateReportCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReportGenerate
}

// Status returns HTTPResponse.Status
func (r TestsGenerateReportCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestsGenerateReportCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestsNotesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TestToNotes
}

// Status returns HTTPResponse.Status
func (r TestsNotesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestsNotesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestsNotesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Note
}

// Status returns HTTPResponse.Status
func (r TestsNotesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestsNotesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToolConfigurationsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedToolConfigurationList
}

// Status returns HTTPResponse.Status
func (r ToolConfigurationsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToolConfigurationsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToolConfigurationsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ToolConfiguration
}

// Status returns HTTPResponse.Status
func (r ToolConfigurationsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToolConfigurationsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToolConfigurationsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ToolConfigurationsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToolConfigurationsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToolConfigurationsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ToolConfiguration
}

// Status returns HTTPResponse.Status
func (r ToolConfigurationsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToolConfigurationsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToolConfigurationsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ToolConfiguration
}

// Status returns HTTPResponse.Status
func (r ToolConfigurationsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToolConfigurationsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToolConfigurationsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ToolConfiguration
}

// Status returns HTTPResponse.Status
func (r ToolConfigurationsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToolConfigurationsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToolProductSettingsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedToolProductSettingsList
}

// Status returns HTTPResponse.Status
func (r ToolProductSettingsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToolProductSettingsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToolProductSettingsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ToolProductSettings
}

// Status returns HTTPResponse.Status
func (r ToolProductSettingsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToolProductSettingsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToolProductSettingsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ToolProductSettingsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToolProductSettingsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToolProductSettingsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ToolProductSettings
}

// Status returns HTTPResponse.Status
func (r ToolProductSettingsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToolProductSettingsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToolProductSettingsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ToolProductSettings
}

// Status returns HTTPResponse.Status
func (r ToolProductSettingsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToolProductSettingsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToolProductSettingsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ToolProductSettings
}

// Status returns HTTPResponse.Status
func (r ToolProductSettingsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToolProductSettingsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToolTypesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedToolTypeList
}

// Status returns HTTPResponse.Status
func (r ToolTypesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToolTypesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToolTypesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ToolType
}

// Status returns HTTPResponse.Status
func (r ToolTypesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToolTypesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToolTypesDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ToolTypesDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToolTypesDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToolTypesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ToolType
}

// Status returns HTTPResponse.Status
func (r ToolTypesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToolTypesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToolTypesPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ToolType
}

// Status returns HTTPResponse.Status
func (r ToolTypesPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToolTypesPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToolTypesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ToolType
}

// Status returns HTTPResponse.Status
func (r ToolTypesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToolTypesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserContactInfosListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedUserContactInfoList
}

// Status returns HTTPResponse.Status
func (r UserContactInfosListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserContactInfosListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserContactInfosCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *UserContactInfo
}

// Status returns HTTPResponse.Status
func (r UserContactInfosCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserContactInfosCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserContactInfosDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UserContactInfosDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserContactInfosDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserContactInfosRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserContactInfo
}

// Status returns HTTPResponse.Status
func (r UserContactInfosRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserContactInfosRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserContactInfosPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserContactInfo
}

// Status returns HTTPResponse.Status
func (r UserContactInfosPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserContactInfosPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserContactInfosUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserContactInfo
}

// Status returns HTTPResponse.Status
func (r UserContactInfosUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserContactInfosUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserProfileRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserProfile
}

// Status returns HTTPResponse.Status
func (r UserProfileRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserProfileRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedUserList
}

// Status returns HTTPResponse.Status
func (r UsersListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *User
}

// Status returns HTTPResponse.Status
func (r UsersCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UsersDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r UsersRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r UsersPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r UsersUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ApiTokenAuthCreateWithBodyWithResponse request with arbitrary body returning *ApiTokenAuthCreateResponse
func (c *ClientWithResponses) ApiTokenAuthCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiTokenAuthCreateResponse, error) {
	rsp, err := c.ApiTokenAuthCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiTokenAuthCreateResponse(rsp)
}

func (c *ClientWithResponses) ApiTokenAuthCreateWithResponse(ctx context.Context, body ApiTokenAuthCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ApiTokenAuthCreateResponse, error) {
	rsp, err := c.ApiTokenAuthCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiTokenAuthCreateResponse(rsp)
}

func (c *ClientWithResponses) ApiTokenAuthCreateWithFormdataBodyWithResponse(ctx context.Context, body ApiTokenAuthCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ApiTokenAuthCreateResponse, error) {
	rsp, err := c.ApiTokenAuthCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiTokenAuthCreateResponse(rsp)
}

// DevelopmentEnvironmentsListWithResponse request returning *DevelopmentEnvironmentsListResponse
func (c *ClientWithResponses) DevelopmentEnvironmentsListWithResponse(ctx context.Context, params *DevelopmentEnvironmentsListParams, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsListResponse, error) {
	rsp, err := c.DevelopmentEnvironmentsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevelopmentEnvironmentsListResponse(rsp)
}

// DevelopmentEnvironmentsCreateWithBodyWithResponse request with arbitrary body returning *DevelopmentEnvironmentsCreateResponse
func (c *ClientWithResponses) DevelopmentEnvironmentsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsCreateResponse, error) {
	rsp, err := c.DevelopmentEnvironmentsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevelopmentEnvironmentsCreateResponse(rsp)
}

func (c *ClientWithResponses) DevelopmentEnvironmentsCreateWithResponse(ctx context.Context, body DevelopmentEnvironmentsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsCreateResponse, error) {
	rsp, err := c.DevelopmentEnvironmentsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevelopmentEnvironmentsCreateResponse(rsp)
}

func (c *ClientWithResponses) DevelopmentEnvironmentsCreateWithFormdataBodyWithResponse(ctx context.Context, body DevelopmentEnvironmentsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsCreateResponse, error) {
	rsp, err := c.DevelopmentEnvironmentsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevelopmentEnvironmentsCreateResponse(rsp)
}

// DevelopmentEnvironmentsDestroyWithResponse request returning *DevelopmentEnvironmentsDestroyResponse
func (c *ClientWithResponses) DevelopmentEnvironmentsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsDestroyResponse, error) {
	rsp, err := c.DevelopmentEnvironmentsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevelopmentEnvironmentsDestroyResponse(rsp)
}

// DevelopmentEnvironmentsRetrieveWithResponse request returning *DevelopmentEnvironmentsRetrieveResponse
func (c *ClientWithResponses) DevelopmentEnvironmentsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsRetrieveResponse, error) {
	rsp, err := c.DevelopmentEnvironmentsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevelopmentEnvironmentsRetrieveResponse(rsp)
}

// DevelopmentEnvironmentsPartialUpdateWithBodyWithResponse request with arbitrary body returning *DevelopmentEnvironmentsPartialUpdateResponse
func (c *ClientWithResponses) DevelopmentEnvironmentsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsPartialUpdateResponse, error) {
	rsp, err := c.DevelopmentEnvironmentsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevelopmentEnvironmentsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) DevelopmentEnvironmentsPartialUpdateWithResponse(ctx context.Context, id int, body DevelopmentEnvironmentsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsPartialUpdateResponse, error) {
	rsp, err := c.DevelopmentEnvironmentsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevelopmentEnvironmentsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) DevelopmentEnvironmentsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body DevelopmentEnvironmentsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsPartialUpdateResponse, error) {
	rsp, err := c.DevelopmentEnvironmentsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevelopmentEnvironmentsPartialUpdateResponse(rsp)
}

// DevelopmentEnvironmentsUpdateWithBodyWithResponse request with arbitrary body returning *DevelopmentEnvironmentsUpdateResponse
func (c *ClientWithResponses) DevelopmentEnvironmentsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsUpdateResponse, error) {
	rsp, err := c.DevelopmentEnvironmentsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevelopmentEnvironmentsUpdateResponse(rsp)
}

func (c *ClientWithResponses) DevelopmentEnvironmentsUpdateWithResponse(ctx context.Context, id int, body DevelopmentEnvironmentsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsUpdateResponse, error) {
	rsp, err := c.DevelopmentEnvironmentsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevelopmentEnvironmentsUpdateResponse(rsp)
}

func (c *ClientWithResponses) DevelopmentEnvironmentsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body DevelopmentEnvironmentsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsUpdateResponse, error) {
	rsp, err := c.DevelopmentEnvironmentsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevelopmentEnvironmentsUpdateResponse(rsp)
}

// DojoGroupMembersListWithResponse request returning *DojoGroupMembersListResponse
func (c *ClientWithResponses) DojoGroupMembersListWithResponse(ctx context.Context, params *DojoGroupMembersListParams, reqEditors ...RequestEditorFn) (*DojoGroupMembersListResponse, error) {
	rsp, err := c.DojoGroupMembersList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupMembersListResponse(rsp)
}

// DojoGroupMembersCreateWithBodyWithResponse request with arbitrary body returning *DojoGroupMembersCreateResponse
func (c *ClientWithResponses) DojoGroupMembersCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DojoGroupMembersCreateResponse, error) {
	rsp, err := c.DojoGroupMembersCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupMembersCreateResponse(rsp)
}

func (c *ClientWithResponses) DojoGroupMembersCreateWithResponse(ctx context.Context, body DojoGroupMembersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupMembersCreateResponse, error) {
	rsp, err := c.DojoGroupMembersCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupMembersCreateResponse(rsp)
}

func (c *ClientWithResponses) DojoGroupMembersCreateWithFormdataBodyWithResponse(ctx context.Context, body DojoGroupMembersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupMembersCreateResponse, error) {
	rsp, err := c.DojoGroupMembersCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupMembersCreateResponse(rsp)
}

// DojoGroupMembersDestroyWithResponse request returning *DojoGroupMembersDestroyResponse
func (c *ClientWithResponses) DojoGroupMembersDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DojoGroupMembersDestroyResponse, error) {
	rsp, err := c.DojoGroupMembersDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupMembersDestroyResponse(rsp)
}

// DojoGroupMembersRetrieveWithResponse request returning *DojoGroupMembersRetrieveResponse
func (c *ClientWithResponses) DojoGroupMembersRetrieveWithResponse(ctx context.Context, id int, params *DojoGroupMembersRetrieveParams, reqEditors ...RequestEditorFn) (*DojoGroupMembersRetrieveResponse, error) {
	rsp, err := c.DojoGroupMembersRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupMembersRetrieveResponse(rsp)
}

// DojoGroupMembersPartialUpdateWithBodyWithResponse request with arbitrary body returning *DojoGroupMembersPartialUpdateResponse
func (c *ClientWithResponses) DojoGroupMembersPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DojoGroupMembersPartialUpdateResponse, error) {
	rsp, err := c.DojoGroupMembersPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupMembersPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) DojoGroupMembersPartialUpdateWithResponse(ctx context.Context, id int, body DojoGroupMembersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupMembersPartialUpdateResponse, error) {
	rsp, err := c.DojoGroupMembersPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupMembersPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) DojoGroupMembersPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body DojoGroupMembersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupMembersPartialUpdateResponse, error) {
	rsp, err := c.DojoGroupMembersPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupMembersPartialUpdateResponse(rsp)
}

// DojoGroupMembersUpdateWithBodyWithResponse request with arbitrary body returning *DojoGroupMembersUpdateResponse
func (c *ClientWithResponses) DojoGroupMembersUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DojoGroupMembersUpdateResponse, error) {
	rsp, err := c.DojoGroupMembersUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupMembersUpdateResponse(rsp)
}

func (c *ClientWithResponses) DojoGroupMembersUpdateWithResponse(ctx context.Context, id int, body DojoGroupMembersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupMembersUpdateResponse, error) {
	rsp, err := c.DojoGroupMembersUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupMembersUpdateResponse(rsp)
}

func (c *ClientWithResponses) DojoGroupMembersUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body DojoGroupMembersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupMembersUpdateResponse, error) {
	rsp, err := c.DojoGroupMembersUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupMembersUpdateResponse(rsp)
}

// DojoGroupsListWithResponse request returning *DojoGroupsListResponse
func (c *ClientWithResponses) DojoGroupsListWithResponse(ctx context.Context, params *DojoGroupsListParams, reqEditors ...RequestEditorFn) (*DojoGroupsListResponse, error) {
	rsp, err := c.DojoGroupsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupsListResponse(rsp)
}

// DojoGroupsCreateWithBodyWithResponse request with arbitrary body returning *DojoGroupsCreateResponse
func (c *ClientWithResponses) DojoGroupsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DojoGroupsCreateResponse, error) {
	rsp, err := c.DojoGroupsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupsCreateResponse(rsp)
}

func (c *ClientWithResponses) DojoGroupsCreateWithResponse(ctx context.Context, body DojoGroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupsCreateResponse, error) {
	rsp, err := c.DojoGroupsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupsCreateResponse(rsp)
}

func (c *ClientWithResponses) DojoGroupsCreateWithFormdataBodyWithResponse(ctx context.Context, body DojoGroupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupsCreateResponse, error) {
	rsp, err := c.DojoGroupsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupsCreateResponse(rsp)
}

// DojoGroupsDestroyWithResponse request returning *DojoGroupsDestroyResponse
func (c *ClientWithResponses) DojoGroupsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DojoGroupsDestroyResponse, error) {
	rsp, err := c.DojoGroupsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupsDestroyResponse(rsp)
}

// DojoGroupsRetrieveWithResponse request returning *DojoGroupsRetrieveResponse
func (c *ClientWithResponses) DojoGroupsRetrieveWithResponse(ctx context.Context, id int, params *DojoGroupsRetrieveParams, reqEditors ...RequestEditorFn) (*DojoGroupsRetrieveResponse, error) {
	rsp, err := c.DojoGroupsRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupsRetrieveResponse(rsp)
}

// DojoGroupsPartialUpdateWithBodyWithResponse request with arbitrary body returning *DojoGroupsPartialUpdateResponse
func (c *ClientWithResponses) DojoGroupsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DojoGroupsPartialUpdateResponse, error) {
	rsp, err := c.DojoGroupsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) DojoGroupsPartialUpdateWithResponse(ctx context.Context, id int, body DojoGroupsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupsPartialUpdateResponse, error) {
	rsp, err := c.DojoGroupsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) DojoGroupsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body DojoGroupsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupsPartialUpdateResponse, error) {
	rsp, err := c.DojoGroupsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupsPartialUpdateResponse(rsp)
}

// DojoGroupsUpdateWithBodyWithResponse request with arbitrary body returning *DojoGroupsUpdateResponse
func (c *ClientWithResponses) DojoGroupsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DojoGroupsUpdateResponse, error) {
	rsp, err := c.DojoGroupsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupsUpdateResponse(rsp)
}

func (c *ClientWithResponses) DojoGroupsUpdateWithResponse(ctx context.Context, id int, body DojoGroupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupsUpdateResponse, error) {
	rsp, err := c.DojoGroupsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupsUpdateResponse(rsp)
}

func (c *ClientWithResponses) DojoGroupsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body DojoGroupsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupsUpdateResponse, error) {
	rsp, err := c.DojoGroupsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupsUpdateResponse(rsp)
}

// EndpointMetaImportCreateWithBodyWithResponse request with arbitrary body returning *EndpointMetaImportCreateResponse
func (c *ClientWithResponses) EndpointMetaImportCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EndpointMetaImportCreateResponse, error) {
	rsp, err := c.EndpointMetaImportCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointMetaImportCreateResponse(rsp)
}

// EndpointStatusListWithResponse request returning *EndpointStatusListResponse
func (c *ClientWithResponses) EndpointStatusListWithResponse(ctx context.Context, params *EndpointStatusListParams, reqEditors ...RequestEditorFn) (*EndpointStatusListResponse, error) {
	rsp, err := c.EndpointStatusList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointStatusListResponse(rsp)
}

// EndpointStatusCreateWithBodyWithResponse request with arbitrary body returning *EndpointStatusCreateResponse
func (c *ClientWithResponses) EndpointStatusCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EndpointStatusCreateResponse, error) {
	rsp, err := c.EndpointStatusCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointStatusCreateResponse(rsp)
}

func (c *ClientWithResponses) EndpointStatusCreateWithResponse(ctx context.Context, body EndpointStatusCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EndpointStatusCreateResponse, error) {
	rsp, err := c.EndpointStatusCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointStatusCreateResponse(rsp)
}

func (c *ClientWithResponses) EndpointStatusCreateWithFormdataBodyWithResponse(ctx context.Context, body EndpointStatusCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EndpointStatusCreateResponse, error) {
	rsp, err := c.EndpointStatusCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointStatusCreateResponse(rsp)
}

// EndpointStatusDestroyWithResponse request returning *EndpointStatusDestroyResponse
func (c *ClientWithResponses) EndpointStatusDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EndpointStatusDestroyResponse, error) {
	rsp, err := c.EndpointStatusDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointStatusDestroyResponse(rsp)
}

// EndpointStatusRetrieveWithResponse request returning *EndpointStatusRetrieveResponse
func (c *ClientWithResponses) EndpointStatusRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EndpointStatusRetrieveResponse, error) {
	rsp, err := c.EndpointStatusRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointStatusRetrieveResponse(rsp)
}

// EndpointStatusPartialUpdateWithBodyWithResponse request with arbitrary body returning *EndpointStatusPartialUpdateResponse
func (c *ClientWithResponses) EndpointStatusPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EndpointStatusPartialUpdateResponse, error) {
	rsp, err := c.EndpointStatusPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointStatusPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) EndpointStatusPartialUpdateWithResponse(ctx context.Context, id int, body EndpointStatusPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EndpointStatusPartialUpdateResponse, error) {
	rsp, err := c.EndpointStatusPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointStatusPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) EndpointStatusPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body EndpointStatusPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EndpointStatusPartialUpdateResponse, error) {
	rsp, err := c.EndpointStatusPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointStatusPartialUpdateResponse(rsp)
}

// EndpointStatusUpdateWithBodyWithResponse request with arbitrary body returning *EndpointStatusUpdateResponse
func (c *ClientWithResponses) EndpointStatusUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EndpointStatusUpdateResponse, error) {
	rsp, err := c.EndpointStatusUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointStatusUpdateResponse(rsp)
}

func (c *ClientWithResponses) EndpointStatusUpdateWithResponse(ctx context.Context, id int, body EndpointStatusUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EndpointStatusUpdateResponse, error) {
	rsp, err := c.EndpointStatusUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointStatusUpdateResponse(rsp)
}

func (c *ClientWithResponses) EndpointStatusUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body EndpointStatusUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EndpointStatusUpdateResponse, error) {
	rsp, err := c.EndpointStatusUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointStatusUpdateResponse(rsp)
}

// EndpointsListWithResponse request returning *EndpointsListResponse
func (c *ClientWithResponses) EndpointsListWithResponse(ctx context.Context, params *EndpointsListParams, reqEditors ...RequestEditorFn) (*EndpointsListResponse, error) {
	rsp, err := c.EndpointsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointsListResponse(rsp)
}

// EndpointsCreateWithBodyWithResponse request with arbitrary body returning *EndpointsCreateResponse
func (c *ClientWithResponses) EndpointsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EndpointsCreateResponse, error) {
	rsp, err := c.EndpointsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointsCreateResponse(rsp)
}

func (c *ClientWithResponses) EndpointsCreateWithResponse(ctx context.Context, body EndpointsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EndpointsCreateResponse, error) {
	rsp, err := c.EndpointsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointsCreateResponse(rsp)
}

func (c *ClientWithResponses) EndpointsCreateWithFormdataBodyWithResponse(ctx context.Context, body EndpointsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EndpointsCreateResponse, error) {
	rsp, err := c.EndpointsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointsCreateResponse(rsp)
}

// EndpointsDestroyWithResponse request returning *EndpointsDestroyResponse
func (c *ClientWithResponses) EndpointsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EndpointsDestroyResponse, error) {
	rsp, err := c.EndpointsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointsDestroyResponse(rsp)
}

// EndpointsRetrieveWithResponse request returning *EndpointsRetrieveResponse
func (c *ClientWithResponses) EndpointsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EndpointsRetrieveResponse, error) {
	rsp, err := c.EndpointsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointsRetrieveResponse(rsp)
}

// EndpointsPartialUpdateWithBodyWithResponse request with arbitrary body returning *EndpointsPartialUpdateResponse
func (c *ClientWithResponses) EndpointsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EndpointsPartialUpdateResponse, error) {
	rsp, err := c.EndpointsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) EndpointsPartialUpdateWithResponse(ctx context.Context, id int, body EndpointsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EndpointsPartialUpdateResponse, error) {
	rsp, err := c.EndpointsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) EndpointsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body EndpointsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EndpointsPartialUpdateResponse, error) {
	rsp, err := c.EndpointsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointsPartialUpdateResponse(rsp)
}

// EndpointsUpdateWithBodyWithResponse request with arbitrary body returning *EndpointsUpdateResponse
func (c *ClientWithResponses) EndpointsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EndpointsUpdateResponse, error) {
	rsp, err := c.EndpointsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointsUpdateResponse(rsp)
}

func (c *ClientWithResponses) EndpointsUpdateWithResponse(ctx context.Context, id int, body EndpointsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EndpointsUpdateResponse, error) {
	rsp, err := c.EndpointsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointsUpdateResponse(rsp)
}

func (c *ClientWithResponses) EndpointsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body EndpointsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EndpointsUpdateResponse, error) {
	rsp, err := c.EndpointsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointsUpdateResponse(rsp)
}

// EndpointsGenerateReportCreateWithBodyWithResponse request with arbitrary body returning *EndpointsGenerateReportCreateResponse
func (c *ClientWithResponses) EndpointsGenerateReportCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EndpointsGenerateReportCreateResponse, error) {
	rsp, err := c.EndpointsGenerateReportCreateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointsGenerateReportCreateResponse(rsp)
}

func (c *ClientWithResponses) EndpointsGenerateReportCreateWithResponse(ctx context.Context, id int, body EndpointsGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EndpointsGenerateReportCreateResponse, error) {
	rsp, err := c.EndpointsGenerateReportCreate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointsGenerateReportCreateResponse(rsp)
}

func (c *ClientWithResponses) EndpointsGenerateReportCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body EndpointsGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EndpointsGenerateReportCreateResponse, error) {
	rsp, err := c.EndpointsGenerateReportCreateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointsGenerateReportCreateResponse(rsp)
}

// EngagementPresetsListWithResponse request returning *EngagementPresetsListResponse
func (c *ClientWithResponses) EngagementPresetsListWithResponse(ctx context.Context, params *EngagementPresetsListParams, reqEditors ...RequestEditorFn) (*EngagementPresetsListResponse, error) {
	rsp, err := c.EngagementPresetsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementPresetsListResponse(rsp)
}

// EngagementPresetsCreateWithBodyWithResponse request with arbitrary body returning *EngagementPresetsCreateResponse
func (c *ClientWithResponses) EngagementPresetsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EngagementPresetsCreateResponse, error) {
	rsp, err := c.EngagementPresetsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementPresetsCreateResponse(rsp)
}

func (c *ClientWithResponses) EngagementPresetsCreateWithResponse(ctx context.Context, body EngagementPresetsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EngagementPresetsCreateResponse, error) {
	rsp, err := c.EngagementPresetsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementPresetsCreateResponse(rsp)
}

func (c *ClientWithResponses) EngagementPresetsCreateWithFormdataBodyWithResponse(ctx context.Context, body EngagementPresetsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EngagementPresetsCreateResponse, error) {
	rsp, err := c.EngagementPresetsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementPresetsCreateResponse(rsp)
}

// EngagementPresetsDestroyWithResponse request returning *EngagementPresetsDestroyResponse
func (c *ClientWithResponses) EngagementPresetsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EngagementPresetsDestroyResponse, error) {
	rsp, err := c.EngagementPresetsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementPresetsDestroyResponse(rsp)
}

// EngagementPresetsRetrieveWithResponse request returning *EngagementPresetsRetrieveResponse
func (c *ClientWithResponses) EngagementPresetsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EngagementPresetsRetrieveResponse, error) {
	rsp, err := c.EngagementPresetsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementPresetsRetrieveResponse(rsp)
}

// EngagementPresetsPartialUpdateWithBodyWithResponse request with arbitrary body returning *EngagementPresetsPartialUpdateResponse
func (c *ClientWithResponses) EngagementPresetsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EngagementPresetsPartialUpdateResponse, error) {
	rsp, err := c.EngagementPresetsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementPresetsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) EngagementPresetsPartialUpdateWithResponse(ctx context.Context, id int, body EngagementPresetsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EngagementPresetsPartialUpdateResponse, error) {
	rsp, err := c.EngagementPresetsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementPresetsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) EngagementPresetsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body EngagementPresetsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EngagementPresetsPartialUpdateResponse, error) {
	rsp, err := c.EngagementPresetsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementPresetsPartialUpdateResponse(rsp)
}

// EngagementPresetsUpdateWithBodyWithResponse request with arbitrary body returning *EngagementPresetsUpdateResponse
func (c *ClientWithResponses) EngagementPresetsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EngagementPresetsUpdateResponse, error) {
	rsp, err := c.EngagementPresetsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementPresetsUpdateResponse(rsp)
}

func (c *ClientWithResponses) EngagementPresetsUpdateWithResponse(ctx context.Context, id int, body EngagementPresetsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EngagementPresetsUpdateResponse, error) {
	rsp, err := c.EngagementPresetsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementPresetsUpdateResponse(rsp)
}

func (c *ClientWithResponses) EngagementPresetsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body EngagementPresetsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EngagementPresetsUpdateResponse, error) {
	rsp, err := c.EngagementPresetsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementPresetsUpdateResponse(rsp)
}

// EngagementsListWithResponse request returning *EngagementsListResponse
func (c *ClientWithResponses) EngagementsListWithResponse(ctx context.Context, params *EngagementsListParams, reqEditors ...RequestEditorFn) (*EngagementsListResponse, error) {
	rsp, err := c.EngagementsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsListResponse(rsp)
}

// EngagementsCreateWithBodyWithResponse request with arbitrary body returning *EngagementsCreateResponse
func (c *ClientWithResponses) EngagementsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EngagementsCreateResponse, error) {
	rsp, err := c.EngagementsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsCreateResponse(rsp)
}

func (c *ClientWithResponses) EngagementsCreateWithResponse(ctx context.Context, body EngagementsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EngagementsCreateResponse, error) {
	rsp, err := c.EngagementsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsCreateResponse(rsp)
}

func (c *ClientWithResponses) EngagementsCreateWithFormdataBodyWithResponse(ctx context.Context, body EngagementsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EngagementsCreateResponse, error) {
	rsp, err := c.EngagementsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsCreateResponse(rsp)
}

// EngagementsDestroyWithResponse request returning *EngagementsDestroyResponse
func (c *ClientWithResponses) EngagementsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EngagementsDestroyResponse, error) {
	rsp, err := c.EngagementsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsDestroyResponse(rsp)
}

// EngagementsRetrieveWithResponse request returning *EngagementsRetrieveResponse
func (c *ClientWithResponses) EngagementsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EngagementsRetrieveResponse, error) {
	rsp, err := c.EngagementsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsRetrieveResponse(rsp)
}

// EngagementsPartialUpdateWithBodyWithResponse request with arbitrary body returning *EngagementsPartialUpdateResponse
func (c *ClientWithResponses) EngagementsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EngagementsPartialUpdateResponse, error) {
	rsp, err := c.EngagementsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) EngagementsPartialUpdateWithResponse(ctx context.Context, id int, body EngagementsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EngagementsPartialUpdateResponse, error) {
	rsp, err := c.EngagementsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) EngagementsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body EngagementsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EngagementsPartialUpdateResponse, error) {
	rsp, err := c.EngagementsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsPartialUpdateResponse(rsp)
}

// EngagementsUpdateWithBodyWithResponse request with arbitrary body returning *EngagementsUpdateResponse
func (c *ClientWithResponses) EngagementsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EngagementsUpdateResponse, error) {
	rsp, err := c.EngagementsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsUpdateResponse(rsp)
}

func (c *ClientWithResponses) EngagementsUpdateWithResponse(ctx context.Context, id int, body EngagementsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EngagementsUpdateResponse, error) {
	rsp, err := c.EngagementsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsUpdateResponse(rsp)
}

func (c *ClientWithResponses) EngagementsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body EngagementsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EngagementsUpdateResponse, error) {
	rsp, err := c.EngagementsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsUpdateResponse(rsp)
}

// EngagementsAcceptRisksCreateWithBodyWithResponse request with arbitrary body returning *EngagementsAcceptRisksCreateResponse
func (c *ClientWithResponses) EngagementsAcceptRisksCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EngagementsAcceptRisksCreateResponse, error) {
	rsp, err := c.EngagementsAcceptRisksCreateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsAcceptRisksCreateResponse(rsp)
}

func (c *ClientWithResponses) EngagementsAcceptRisksCreateWithResponse(ctx context.Context, id int, body EngagementsAcceptRisksCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EngagementsAcceptRisksCreateResponse, error) {
	rsp, err := c.EngagementsAcceptRisksCreate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsAcceptRisksCreateResponse(rsp)
}

func (c *ClientWithResponses) EngagementsAcceptRisksCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body EngagementsAcceptRisksCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EngagementsAcceptRisksCreateResponse, error) {
	rsp, err := c.EngagementsAcceptRisksCreateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsAcceptRisksCreateResponse(rsp)
}

// EngagementsCloseCreateWithResponse request returning *EngagementsCloseCreateResponse
func (c *ClientWithResponses) EngagementsCloseCreateWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EngagementsCloseCreateResponse, error) {
	rsp, err := c.EngagementsCloseCreate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsCloseCreateResponse(rsp)
}

// EngagementsFilesRetrieveWithResponse request returning *EngagementsFilesRetrieveResponse
func (c *ClientWithResponses) EngagementsFilesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EngagementsFilesRetrieveResponse, error) {
	rsp, err := c.EngagementsFilesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsFilesRetrieveResponse(rsp)
}

// EngagementsFilesCreateWithBodyWithResponse request with arbitrary body returning *EngagementsFilesCreateResponse
func (c *ClientWithResponses) EngagementsFilesCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EngagementsFilesCreateResponse, error) {
	rsp, err := c.EngagementsFilesCreateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsFilesCreateResponse(rsp)
}

// EngagementsGenerateReportCreateWithBodyWithResponse request with arbitrary body returning *EngagementsGenerateReportCreateResponse
func (c *ClientWithResponses) EngagementsGenerateReportCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EngagementsGenerateReportCreateResponse, error) {
	rsp, err := c.EngagementsGenerateReportCreateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsGenerateReportCreateResponse(rsp)
}

func (c *ClientWithResponses) EngagementsGenerateReportCreateWithResponse(ctx context.Context, id int, body EngagementsGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EngagementsGenerateReportCreateResponse, error) {
	rsp, err := c.EngagementsGenerateReportCreate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsGenerateReportCreateResponse(rsp)
}

func (c *ClientWithResponses) EngagementsGenerateReportCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body EngagementsGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EngagementsGenerateReportCreateResponse, error) {
	rsp, err := c.EngagementsGenerateReportCreateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsGenerateReportCreateResponse(rsp)
}

// EngagementsNotesRetrieveWithResponse request returning *EngagementsNotesRetrieveResponse
func (c *ClientWithResponses) EngagementsNotesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EngagementsNotesRetrieveResponse, error) {
	rsp, err := c.EngagementsNotesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsNotesRetrieveResponse(rsp)
}

// EngagementsNotesCreateWithBodyWithResponse request with arbitrary body returning *EngagementsNotesCreateResponse
func (c *ClientWithResponses) EngagementsNotesCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EngagementsNotesCreateResponse, error) {
	rsp, err := c.EngagementsNotesCreateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsNotesCreateResponse(rsp)
}

func (c *ClientWithResponses) EngagementsNotesCreateWithResponse(ctx context.Context, id int, body EngagementsNotesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EngagementsNotesCreateResponse, error) {
	rsp, err := c.EngagementsNotesCreate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsNotesCreateResponse(rsp)
}

func (c *ClientWithResponses) EngagementsNotesCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body EngagementsNotesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EngagementsNotesCreateResponse, error) {
	rsp, err := c.EngagementsNotesCreateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsNotesCreateResponse(rsp)
}

// EngagementsReopenCreateWithResponse request returning *EngagementsReopenCreateResponse
func (c *ClientWithResponses) EngagementsReopenCreateWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EngagementsReopenCreateResponse, error) {
	rsp, err := c.EngagementsReopenCreate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsReopenCreateResponse(rsp)
}

// FindingTemplatesListWithResponse request returning *FindingTemplatesListResponse
func (c *ClientWithResponses) FindingTemplatesListWithResponse(ctx context.Context, params *FindingTemplatesListParams, reqEditors ...RequestEditorFn) (*FindingTemplatesListResponse, error) {
	rsp, err := c.FindingTemplatesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingTemplatesListResponse(rsp)
}

// FindingTemplatesCreateWithBodyWithResponse request with arbitrary body returning *FindingTemplatesCreateResponse
func (c *ClientWithResponses) FindingTemplatesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingTemplatesCreateResponse, error) {
	rsp, err := c.FindingTemplatesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingTemplatesCreateResponse(rsp)
}

func (c *ClientWithResponses) FindingTemplatesCreateWithResponse(ctx context.Context, body FindingTemplatesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingTemplatesCreateResponse, error) {
	rsp, err := c.FindingTemplatesCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingTemplatesCreateResponse(rsp)
}

func (c *ClientWithResponses) FindingTemplatesCreateWithFormdataBodyWithResponse(ctx context.Context, body FindingTemplatesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingTemplatesCreateResponse, error) {
	rsp, err := c.FindingTemplatesCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingTemplatesCreateResponse(rsp)
}

// FindingTemplatesDestroyWithResponse request returning *FindingTemplatesDestroyResponse
func (c *ClientWithResponses) FindingTemplatesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*FindingTemplatesDestroyResponse, error) {
	rsp, err := c.FindingTemplatesDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingTemplatesDestroyResponse(rsp)
}

// FindingTemplatesRetrieveWithResponse request returning *FindingTemplatesRetrieveResponse
func (c *ClientWithResponses) FindingTemplatesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*FindingTemplatesRetrieveResponse, error) {
	rsp, err := c.FindingTemplatesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingTemplatesRetrieveResponse(rsp)
}

// FindingTemplatesPartialUpdateWithBodyWithResponse request with arbitrary body returning *FindingTemplatesPartialUpdateResponse
func (c *ClientWithResponses) FindingTemplatesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingTemplatesPartialUpdateResponse, error) {
	rsp, err := c.FindingTemplatesPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingTemplatesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) FindingTemplatesPartialUpdateWithResponse(ctx context.Context, id int, body FindingTemplatesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingTemplatesPartialUpdateResponse, error) {
	rsp, err := c.FindingTemplatesPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingTemplatesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) FindingTemplatesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingTemplatesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingTemplatesPartialUpdateResponse, error) {
	rsp, err := c.FindingTemplatesPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingTemplatesPartialUpdateResponse(rsp)
}

// FindingTemplatesUpdateWithBodyWithResponse request with arbitrary body returning *FindingTemplatesUpdateResponse
func (c *ClientWithResponses) FindingTemplatesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingTemplatesUpdateResponse, error) {
	rsp, err := c.FindingTemplatesUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingTemplatesUpdateResponse(rsp)
}

func (c *ClientWithResponses) FindingTemplatesUpdateWithResponse(ctx context.Context, id int, body FindingTemplatesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingTemplatesUpdateResponse, error) {
	rsp, err := c.FindingTemplatesUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingTemplatesUpdateResponse(rsp)
}

func (c *ClientWithResponses) FindingTemplatesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingTemplatesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingTemplatesUpdateResponse, error) {
	rsp, err := c.FindingTemplatesUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingTemplatesUpdateResponse(rsp)
}

// FindingsListWithResponse request returning *FindingsListResponse
func (c *ClientWithResponses) FindingsListWithResponse(ctx context.Context, params *FindingsListParams, reqEditors ...RequestEditorFn) (*FindingsListResponse, error) {
	rsp, err := c.FindingsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsListResponse(rsp)
}

// FindingsCreateWithBodyWithResponse request with arbitrary body returning *FindingsCreateResponse
func (c *ClientWithResponses) FindingsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsCreateResponse, error) {
	rsp, err := c.FindingsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsCreateResponse(rsp)
}

func (c *ClientWithResponses) FindingsCreateWithResponse(ctx context.Context, body FindingsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsCreateResponse, error) {
	rsp, err := c.FindingsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsCreateResponse(rsp)
}

func (c *ClientWithResponses) FindingsCreateWithFormdataBodyWithResponse(ctx context.Context, body FindingsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsCreateResponse, error) {
	rsp, err := c.FindingsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsCreateResponse(rsp)
}

// FindingsAcceptRisksCreateWithBodyWithResponse request with arbitrary body returning *FindingsAcceptRisksCreateResponse
func (c *ClientWithResponses) FindingsAcceptRisksCreateWithBodyWithResponse(ctx context.Context, params *FindingsAcceptRisksCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsAcceptRisksCreateResponse, error) {
	rsp, err := c.FindingsAcceptRisksCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsAcceptRisksCreateResponse(rsp)
}

func (c *ClientWithResponses) FindingsAcceptRisksCreateWithResponse(ctx context.Context, params *FindingsAcceptRisksCreateParams, body FindingsAcceptRisksCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsAcceptRisksCreateResponse, error) {
	rsp, err := c.FindingsAcceptRisksCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsAcceptRisksCreateResponse(rsp)
}

func (c *ClientWithResponses) FindingsAcceptRisksCreateWithFormdataBodyWithResponse(ctx context.Context, params *FindingsAcceptRisksCreateParams, body FindingsAcceptRisksCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsAcceptRisksCreateResponse, error) {
	rsp, err := c.FindingsAcceptRisksCreateWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsAcceptRisksCreateResponse(rsp)
}

// FindingsGenerateReportCreateWithBodyWithResponse request with arbitrary body returning *FindingsGenerateReportCreateResponse
func (c *ClientWithResponses) FindingsGenerateReportCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsGenerateReportCreateResponse, error) {
	rsp, err := c.FindingsGenerateReportCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsGenerateReportCreateResponse(rsp)
}

func (c *ClientWithResponses) FindingsGenerateReportCreateWithResponse(ctx context.Context, body FindingsGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsGenerateReportCreateResponse, error) {
	rsp, err := c.FindingsGenerateReportCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsGenerateReportCreateResponse(rsp)
}

func (c *ClientWithResponses) FindingsGenerateReportCreateWithFormdataBodyWithResponse(ctx context.Context, body FindingsGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsGenerateReportCreateResponse, error) {
	rsp, err := c.FindingsGenerateReportCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsGenerateReportCreateResponse(rsp)
}

// FindingsDestroyWithResponse request returning *FindingsDestroyResponse
func (c *ClientWithResponses) FindingsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*FindingsDestroyResponse, error) {
	rsp, err := c.FindingsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsDestroyResponse(rsp)
}

// FindingsRetrieveWithResponse request returning *FindingsRetrieveResponse
func (c *ClientWithResponses) FindingsRetrieveWithResponse(ctx context.Context, id int, params *FindingsRetrieveParams, reqEditors ...RequestEditorFn) (*FindingsRetrieveResponse, error) {
	rsp, err := c.FindingsRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsRetrieveResponse(rsp)
}

// FindingsPartialUpdateWithBodyWithResponse request with arbitrary body returning *FindingsPartialUpdateResponse
func (c *ClientWithResponses) FindingsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsPartialUpdateResponse, error) {
	rsp, err := c.FindingsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) FindingsPartialUpdateWithResponse(ctx context.Context, id int, body FindingsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsPartialUpdateResponse, error) {
	rsp, err := c.FindingsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) FindingsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsPartialUpdateResponse, error) {
	rsp, err := c.FindingsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsPartialUpdateResponse(rsp)
}

// FindingsUpdateWithBodyWithResponse request with arbitrary body returning *FindingsUpdateResponse
func (c *ClientWithResponses) FindingsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsUpdateResponse, error) {
	rsp, err := c.FindingsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsUpdateResponse(rsp)
}

func (c *ClientWithResponses) FindingsUpdateWithResponse(ctx context.Context, id int, body FindingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsUpdateResponse, error) {
	rsp, err := c.FindingsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsUpdateResponse(rsp)
}

func (c *ClientWithResponses) FindingsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsUpdateResponse, error) {
	rsp, err := c.FindingsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsUpdateResponse(rsp)
}

// FindingsDuplicateListWithResponse request returning *FindingsDuplicateListResponse
func (c *ClientWithResponses) FindingsDuplicateListWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*FindingsDuplicateListResponse, error) {
	rsp, err := c.FindingsDuplicateList(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsDuplicateListResponse(rsp)
}

// FindingsDuplicateResetCreateWithResponse request returning *FindingsDuplicateResetCreateResponse
func (c *ClientWithResponses) FindingsDuplicateResetCreateWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*FindingsDuplicateResetCreateResponse, error) {
	rsp, err := c.FindingsDuplicateResetCreate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsDuplicateResetCreateResponse(rsp)
}

// FindingsFilesRetrieveWithResponse request returning *FindingsFilesRetrieveResponse
func (c *ClientWithResponses) FindingsFilesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*FindingsFilesRetrieveResponse, error) {
	rsp, err := c.FindingsFilesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsFilesRetrieveResponse(rsp)
}

// FindingsFilesCreateWithBodyWithResponse request with arbitrary body returning *FindingsFilesCreateResponse
func (c *ClientWithResponses) FindingsFilesCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsFilesCreateResponse, error) {
	rsp, err := c.FindingsFilesCreateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsFilesCreateResponse(rsp)
}

// FindingsMetadataDestroyWithResponse request returning *FindingsMetadataDestroyResponse
func (c *ClientWithResponses) FindingsMetadataDestroyWithResponse(ctx context.Context, id int, params *FindingsMetadataDestroyParams, reqEditors ...RequestEditorFn) (*FindingsMetadataDestroyResponse, error) {
	rsp, err := c.FindingsMetadataDestroy(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsMetadataDestroyResponse(rsp)
}

// FindingsMetadataListWithResponse request returning *FindingsMetadataListResponse
func (c *ClientWithResponses) FindingsMetadataListWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*FindingsMetadataListResponse, error) {
	rsp, err := c.FindingsMetadataList(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsMetadataListResponse(rsp)
}

// FindingsMetadataCreateWithBodyWithResponse request with arbitrary body returning *FindingsMetadataCreateResponse
func (c *ClientWithResponses) FindingsMetadataCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsMetadataCreateResponse, error) {
	rsp, err := c.FindingsMetadataCreateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsMetadataCreateResponse(rsp)
}

func (c *ClientWithResponses) FindingsMetadataCreateWithResponse(ctx context.Context, id int, body FindingsMetadataCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsMetadataCreateResponse, error) {
	rsp, err := c.FindingsMetadataCreate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsMetadataCreateResponse(rsp)
}

func (c *ClientWithResponses) FindingsMetadataCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingsMetadataCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsMetadataCreateResponse, error) {
	rsp, err := c.FindingsMetadataCreateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsMetadataCreateResponse(rsp)
}

// FindingsMetadataUpdateWithBodyWithResponse request with arbitrary body returning *FindingsMetadataUpdateResponse
func (c *ClientWithResponses) FindingsMetadataUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsMetadataUpdateResponse, error) {
	rsp, err := c.FindingsMetadataUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsMetadataUpdateResponse(rsp)
}

func (c *ClientWithResponses) FindingsMetadataUpdateWithResponse(ctx context.Context, id int, body FindingsMetadataUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsMetadataUpdateResponse, error) {
	rsp, err := c.FindingsMetadataUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsMetadataUpdateResponse(rsp)
}

func (c *ClientWithResponses) FindingsMetadataUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingsMetadataUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsMetadataUpdateResponse, error) {
	rsp, err := c.FindingsMetadataUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsMetadataUpdateResponse(rsp)
}

// FindingsNotesRetrieveWithResponse request returning *FindingsNotesRetrieveResponse
func (c *ClientWithResponses) FindingsNotesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*FindingsNotesRetrieveResponse, error) {
	rsp, err := c.FindingsNotesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsNotesRetrieveResponse(rsp)
}

// FindingsNotesCreateWithBodyWithResponse request with arbitrary body returning *FindingsNotesCreateResponse
func (c *ClientWithResponses) FindingsNotesCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsNotesCreateResponse, error) {
	rsp, err := c.FindingsNotesCreateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsNotesCreateResponse(rsp)
}

func (c *ClientWithResponses) FindingsNotesCreateWithResponse(ctx context.Context, id int, body FindingsNotesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsNotesCreateResponse, error) {
	rsp, err := c.FindingsNotesCreate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsNotesCreateResponse(rsp)
}

func (c *ClientWithResponses) FindingsNotesCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingsNotesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsNotesCreateResponse, error) {
	rsp, err := c.FindingsNotesCreateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsNotesCreateResponse(rsp)
}

// FindingsOriginalCreateWithResponse request returning *FindingsOriginalCreateResponse
func (c *ClientWithResponses) FindingsOriginalCreateWithResponse(ctx context.Context, id int, newFid int, reqEditors ...RequestEditorFn) (*FindingsOriginalCreateResponse, error) {
	rsp, err := c.FindingsOriginalCreate(ctx, id, newFid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsOriginalCreateResponse(rsp)
}

// FindingsRemoveNotePartialUpdateWithBodyWithResponse request with arbitrary body returning *FindingsRemoveNotePartialUpdateResponse
func (c *ClientWithResponses) FindingsRemoveNotePartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsRemoveNotePartialUpdateResponse, error) {
	rsp, err := c.FindingsRemoveNotePartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsRemoveNotePartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) FindingsRemoveNotePartialUpdateWithResponse(ctx context.Context, id int, body FindingsRemoveNotePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsRemoveNotePartialUpdateResponse, error) {
	rsp, err := c.FindingsRemoveNotePartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsRemoveNotePartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) FindingsRemoveNotePartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingsRemoveNotePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsRemoveNotePartialUpdateResponse, error) {
	rsp, err := c.FindingsRemoveNotePartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsRemoveNotePartialUpdateResponse(rsp)
}

// FindingsRemoveTagsPartialUpdateWithBodyWithResponse request with arbitrary body returning *FindingsRemoveTagsPartialUpdateResponse
func (c *ClientWithResponses) FindingsRemoveTagsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsRemoveTagsPartialUpdateResponse, error) {
	rsp, err := c.FindingsRemoveTagsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsRemoveTagsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) FindingsRemoveTagsPartialUpdateWithResponse(ctx context.Context, id int, body FindingsRemoveTagsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsRemoveTagsPartialUpdateResponse, error) {
	rsp, err := c.FindingsRemoveTagsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsRemoveTagsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) FindingsRemoveTagsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingsRemoveTagsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsRemoveTagsPartialUpdateResponse, error) {
	rsp, err := c.FindingsRemoveTagsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsRemoveTagsPartialUpdateResponse(rsp)
}

// FindingsRemoveTagsUpdateWithBodyWithResponse request with arbitrary body returning *FindingsRemoveTagsUpdateResponse
func (c *ClientWithResponses) FindingsRemoveTagsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsRemoveTagsUpdateResponse, error) {
	rsp, err := c.FindingsRemoveTagsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsRemoveTagsUpdateResponse(rsp)
}

func (c *ClientWithResponses) FindingsRemoveTagsUpdateWithResponse(ctx context.Context, id int, body FindingsRemoveTagsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsRemoveTagsUpdateResponse, error) {
	rsp, err := c.FindingsRemoveTagsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsRemoveTagsUpdateResponse(rsp)
}

func (c *ClientWithResponses) FindingsRemoveTagsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingsRemoveTagsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsRemoveTagsUpdateResponse, error) {
	rsp, err := c.FindingsRemoveTagsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsRemoveTagsUpdateResponse(rsp)
}

// FindingsRequestResponseRetrieveWithResponse request returning *FindingsRequestResponseRetrieveResponse
func (c *ClientWithResponses) FindingsRequestResponseRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*FindingsRequestResponseRetrieveResponse, error) {
	rsp, err := c.FindingsRequestResponseRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsRequestResponseRetrieveResponse(rsp)
}

// FindingsRequestResponseCreateWithBodyWithResponse request with arbitrary body returning *FindingsRequestResponseCreateResponse
func (c *ClientWithResponses) FindingsRequestResponseCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsRequestResponseCreateResponse, error) {
	rsp, err := c.FindingsRequestResponseCreateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsRequestResponseCreateResponse(rsp)
}

func (c *ClientWithResponses) FindingsRequestResponseCreateWithResponse(ctx context.Context, id int, body FindingsRequestResponseCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsRequestResponseCreateResponse, error) {
	rsp, err := c.FindingsRequestResponseCreate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsRequestResponseCreateResponse(rsp)
}

func (c *ClientWithResponses) FindingsRequestResponseCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingsRequestResponseCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsRequestResponseCreateResponse, error) {
	rsp, err := c.FindingsRequestResponseCreateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsRequestResponseCreateResponse(rsp)
}

// FindingsTagsRetrieveWithResponse request returning *FindingsTagsRetrieveResponse
func (c *ClientWithResponses) FindingsTagsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*FindingsTagsRetrieveResponse, error) {
	rsp, err := c.FindingsTagsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsTagsRetrieveResponse(rsp)
}

// FindingsTagsCreateWithBodyWithResponse request with arbitrary body returning *FindingsTagsCreateResponse
func (c *ClientWithResponses) FindingsTagsCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsTagsCreateResponse, error) {
	rsp, err := c.FindingsTagsCreateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsTagsCreateResponse(rsp)
}

func (c *ClientWithResponses) FindingsTagsCreateWithResponse(ctx context.Context, id int, body FindingsTagsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsTagsCreateResponse, error) {
	rsp, err := c.FindingsTagsCreate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsTagsCreateResponse(rsp)
}

func (c *ClientWithResponses) FindingsTagsCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingsTagsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsTagsCreateResponse, error) {
	rsp, err := c.FindingsTagsCreateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsTagsCreateResponse(rsp)
}

// GlobalRolesListWithResponse request returning *GlobalRolesListResponse
func (c *ClientWithResponses) GlobalRolesListWithResponse(ctx context.Context, params *GlobalRolesListParams, reqEditors ...RequestEditorFn) (*GlobalRolesListResponse, error) {
	rsp, err := c.GlobalRolesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGlobalRolesListResponse(rsp)
}

// GlobalRolesCreateWithBodyWithResponse request with arbitrary body returning *GlobalRolesCreateResponse
func (c *ClientWithResponses) GlobalRolesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GlobalRolesCreateResponse, error) {
	rsp, err := c.GlobalRolesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGlobalRolesCreateResponse(rsp)
}

func (c *ClientWithResponses) GlobalRolesCreateWithResponse(ctx context.Context, body GlobalRolesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*GlobalRolesCreateResponse, error) {
	rsp, err := c.GlobalRolesCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGlobalRolesCreateResponse(rsp)
}

func (c *ClientWithResponses) GlobalRolesCreateWithFormdataBodyWithResponse(ctx context.Context, body GlobalRolesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*GlobalRolesCreateResponse, error) {
	rsp, err := c.GlobalRolesCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGlobalRolesCreateResponse(rsp)
}

// GlobalRolesDestroyWithResponse request returning *GlobalRolesDestroyResponse
func (c *ClientWithResponses) GlobalRolesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GlobalRolesDestroyResponse, error) {
	rsp, err := c.GlobalRolesDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGlobalRolesDestroyResponse(rsp)
}

// GlobalRolesRetrieveWithResponse request returning *GlobalRolesRetrieveResponse
func (c *ClientWithResponses) GlobalRolesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GlobalRolesRetrieveResponse, error) {
	rsp, err := c.GlobalRolesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGlobalRolesRetrieveResponse(rsp)
}

// GlobalRolesPartialUpdateWithBodyWithResponse request with arbitrary body returning *GlobalRolesPartialUpdateResponse
func (c *ClientWithResponses) GlobalRolesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GlobalRolesPartialUpdateResponse, error) {
	rsp, err := c.GlobalRolesPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGlobalRolesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) GlobalRolesPartialUpdateWithResponse(ctx context.Context, id int, body GlobalRolesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*GlobalRolesPartialUpdateResponse, error) {
	rsp, err := c.GlobalRolesPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGlobalRolesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) GlobalRolesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body GlobalRolesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*GlobalRolesPartialUpdateResponse, error) {
	rsp, err := c.GlobalRolesPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGlobalRolesPartialUpdateResponse(rsp)
}

// GlobalRolesUpdateWithBodyWithResponse request with arbitrary body returning *GlobalRolesUpdateResponse
func (c *ClientWithResponses) GlobalRolesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GlobalRolesUpdateResponse, error) {
	rsp, err := c.GlobalRolesUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGlobalRolesUpdateResponse(rsp)
}

func (c *ClientWithResponses) GlobalRolesUpdateWithResponse(ctx context.Context, id int, body GlobalRolesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*GlobalRolesUpdateResponse, error) {
	rsp, err := c.GlobalRolesUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGlobalRolesUpdateResponse(rsp)
}

func (c *ClientWithResponses) GlobalRolesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body GlobalRolesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*GlobalRolesUpdateResponse, error) {
	rsp, err := c.GlobalRolesUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGlobalRolesUpdateResponse(rsp)
}

// ImportLanguagesCreateWithBodyWithResponse request with arbitrary body returning *ImportLanguagesCreateResponse
func (c *ClientWithResponses) ImportLanguagesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportLanguagesCreateResponse, error) {
	rsp, err := c.ImportLanguagesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImportLanguagesCreateResponse(rsp)
}

// ImportScanCreateWithBodyWithResponse request with arbitrary body returning *ImportScanCreateResponse
func (c *ClientWithResponses) ImportScanCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportScanCreateResponse, error) {
	rsp, err := c.ImportScanCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImportScanCreateResponse(rsp)
}

// JiraConfigurationsListWithResponse request returning *JiraConfigurationsListResponse
func (c *ClientWithResponses) JiraConfigurationsListWithResponse(ctx context.Context, params *JiraConfigurationsListParams, reqEditors ...RequestEditorFn) (*JiraConfigurationsListResponse, error) {
	rsp, err := c.JiraConfigurationsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraConfigurationsListResponse(rsp)
}

// JiraConfigurationsCreateWithBodyWithResponse request with arbitrary body returning *JiraConfigurationsCreateResponse
func (c *ClientWithResponses) JiraConfigurationsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraConfigurationsCreateResponse, error) {
	rsp, err := c.JiraConfigurationsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraConfigurationsCreateResponse(rsp)
}

func (c *ClientWithResponses) JiraConfigurationsCreateWithResponse(ctx context.Context, body JiraConfigurationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraConfigurationsCreateResponse, error) {
	rsp, err := c.JiraConfigurationsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraConfigurationsCreateResponse(rsp)
}

func (c *ClientWithResponses) JiraConfigurationsCreateWithFormdataBodyWithResponse(ctx context.Context, body JiraConfigurationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraConfigurationsCreateResponse, error) {
	rsp, err := c.JiraConfigurationsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraConfigurationsCreateResponse(rsp)
}

// JiraConfigurationsDestroyWithResponse request returning *JiraConfigurationsDestroyResponse
func (c *ClientWithResponses) JiraConfigurationsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*JiraConfigurationsDestroyResponse, error) {
	rsp, err := c.JiraConfigurationsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraConfigurationsDestroyResponse(rsp)
}

// JiraConfigurationsRetrieveWithResponse request returning *JiraConfigurationsRetrieveResponse
func (c *ClientWithResponses) JiraConfigurationsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*JiraConfigurationsRetrieveResponse, error) {
	rsp, err := c.JiraConfigurationsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraConfigurationsRetrieveResponse(rsp)
}

// JiraConfigurationsPartialUpdateWithBodyWithResponse request with arbitrary body returning *JiraConfigurationsPartialUpdateResponse
func (c *ClientWithResponses) JiraConfigurationsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraConfigurationsPartialUpdateResponse, error) {
	rsp, err := c.JiraConfigurationsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraConfigurationsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) JiraConfigurationsPartialUpdateWithResponse(ctx context.Context, id int, body JiraConfigurationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraConfigurationsPartialUpdateResponse, error) {
	rsp, err := c.JiraConfigurationsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraConfigurationsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) JiraConfigurationsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body JiraConfigurationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraConfigurationsPartialUpdateResponse, error) {
	rsp, err := c.JiraConfigurationsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraConfigurationsPartialUpdateResponse(rsp)
}

// JiraConfigurationsUpdateWithBodyWithResponse request with arbitrary body returning *JiraConfigurationsUpdateResponse
func (c *ClientWithResponses) JiraConfigurationsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraConfigurationsUpdateResponse, error) {
	rsp, err := c.JiraConfigurationsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraConfigurationsUpdateResponse(rsp)
}

func (c *ClientWithResponses) JiraConfigurationsUpdateWithResponse(ctx context.Context, id int, body JiraConfigurationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraConfigurationsUpdateResponse, error) {
	rsp, err := c.JiraConfigurationsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraConfigurationsUpdateResponse(rsp)
}

func (c *ClientWithResponses) JiraConfigurationsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body JiraConfigurationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraConfigurationsUpdateResponse, error) {
	rsp, err := c.JiraConfigurationsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraConfigurationsUpdateResponse(rsp)
}

// JiraFindingMappingsListWithResponse request returning *JiraFindingMappingsListResponse
func (c *ClientWithResponses) JiraFindingMappingsListWithResponse(ctx context.Context, params *JiraFindingMappingsListParams, reqEditors ...RequestEditorFn) (*JiraFindingMappingsListResponse, error) {
	rsp, err := c.JiraFindingMappingsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraFindingMappingsListResponse(rsp)
}

// JiraFindingMappingsCreateWithBodyWithResponse request with arbitrary body returning *JiraFindingMappingsCreateResponse
func (c *ClientWithResponses) JiraFindingMappingsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraFindingMappingsCreateResponse, error) {
	rsp, err := c.JiraFindingMappingsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraFindingMappingsCreateResponse(rsp)
}

func (c *ClientWithResponses) JiraFindingMappingsCreateWithResponse(ctx context.Context, body JiraFindingMappingsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraFindingMappingsCreateResponse, error) {
	rsp, err := c.JiraFindingMappingsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraFindingMappingsCreateResponse(rsp)
}

func (c *ClientWithResponses) JiraFindingMappingsCreateWithFormdataBodyWithResponse(ctx context.Context, body JiraFindingMappingsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraFindingMappingsCreateResponse, error) {
	rsp, err := c.JiraFindingMappingsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraFindingMappingsCreateResponse(rsp)
}

// JiraFindingMappingsDestroyWithResponse request returning *JiraFindingMappingsDestroyResponse
func (c *ClientWithResponses) JiraFindingMappingsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*JiraFindingMappingsDestroyResponse, error) {
	rsp, err := c.JiraFindingMappingsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraFindingMappingsDestroyResponse(rsp)
}

// JiraFindingMappingsRetrieveWithResponse request returning *JiraFindingMappingsRetrieveResponse
func (c *ClientWithResponses) JiraFindingMappingsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*JiraFindingMappingsRetrieveResponse, error) {
	rsp, err := c.JiraFindingMappingsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraFindingMappingsRetrieveResponse(rsp)
}

// JiraFindingMappingsPartialUpdateWithBodyWithResponse request with arbitrary body returning *JiraFindingMappingsPartialUpdateResponse
func (c *ClientWithResponses) JiraFindingMappingsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraFindingMappingsPartialUpdateResponse, error) {
	rsp, err := c.JiraFindingMappingsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraFindingMappingsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) JiraFindingMappingsPartialUpdateWithResponse(ctx context.Context, id int, body JiraFindingMappingsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraFindingMappingsPartialUpdateResponse, error) {
	rsp, err := c.JiraFindingMappingsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraFindingMappingsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) JiraFindingMappingsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body JiraFindingMappingsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraFindingMappingsPartialUpdateResponse, error) {
	rsp, err := c.JiraFindingMappingsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraFindingMappingsPartialUpdateResponse(rsp)
}

// JiraFindingMappingsUpdateWithBodyWithResponse request with arbitrary body returning *JiraFindingMappingsUpdateResponse
func (c *ClientWithResponses) JiraFindingMappingsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraFindingMappingsUpdateResponse, error) {
	rsp, err := c.JiraFindingMappingsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraFindingMappingsUpdateResponse(rsp)
}

func (c *ClientWithResponses) JiraFindingMappingsUpdateWithResponse(ctx context.Context, id int, body JiraFindingMappingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraFindingMappingsUpdateResponse, error) {
	rsp, err := c.JiraFindingMappingsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraFindingMappingsUpdateResponse(rsp)
}

func (c *ClientWithResponses) JiraFindingMappingsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body JiraFindingMappingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraFindingMappingsUpdateResponse, error) {
	rsp, err := c.JiraFindingMappingsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraFindingMappingsUpdateResponse(rsp)
}

// JiraInstancesListWithResponse request returning *JiraInstancesListResponse
func (c *ClientWithResponses) JiraInstancesListWithResponse(ctx context.Context, params *JiraInstancesListParams, reqEditors ...RequestEditorFn) (*JiraInstancesListResponse, error) {
	rsp, err := c.JiraInstancesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraInstancesListResponse(rsp)
}

// JiraInstancesCreateWithBodyWithResponse request with arbitrary body returning *JiraInstancesCreateResponse
func (c *ClientWithResponses) JiraInstancesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraInstancesCreateResponse, error) {
	rsp, err := c.JiraInstancesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraInstancesCreateResponse(rsp)
}

func (c *ClientWithResponses) JiraInstancesCreateWithResponse(ctx context.Context, body JiraInstancesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraInstancesCreateResponse, error) {
	rsp, err := c.JiraInstancesCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraInstancesCreateResponse(rsp)
}

func (c *ClientWithResponses) JiraInstancesCreateWithFormdataBodyWithResponse(ctx context.Context, body JiraInstancesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraInstancesCreateResponse, error) {
	rsp, err := c.JiraInstancesCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraInstancesCreateResponse(rsp)
}

// JiraInstancesDestroyWithResponse request returning *JiraInstancesDestroyResponse
func (c *ClientWithResponses) JiraInstancesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*JiraInstancesDestroyResponse, error) {
	rsp, err := c.JiraInstancesDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraInstancesDestroyResponse(rsp)
}

// JiraInstancesRetrieveWithResponse request returning *JiraInstancesRetrieveResponse
func (c *ClientWithResponses) JiraInstancesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*JiraInstancesRetrieveResponse, error) {
	rsp, err := c.JiraInstancesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraInstancesRetrieveResponse(rsp)
}

// JiraInstancesPartialUpdateWithBodyWithResponse request with arbitrary body returning *JiraInstancesPartialUpdateResponse
func (c *ClientWithResponses) JiraInstancesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraInstancesPartialUpdateResponse, error) {
	rsp, err := c.JiraInstancesPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraInstancesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) JiraInstancesPartialUpdateWithResponse(ctx context.Context, id int, body JiraInstancesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraInstancesPartialUpdateResponse, error) {
	rsp, err := c.JiraInstancesPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraInstancesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) JiraInstancesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body JiraInstancesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraInstancesPartialUpdateResponse, error) {
	rsp, err := c.JiraInstancesPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraInstancesPartialUpdateResponse(rsp)
}

// JiraInstancesUpdateWithBodyWithResponse request with arbitrary body returning *JiraInstancesUpdateResponse
func (c *ClientWithResponses) JiraInstancesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraInstancesUpdateResponse, error) {
	rsp, err := c.JiraInstancesUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraInstancesUpdateResponse(rsp)
}

func (c *ClientWithResponses) JiraInstancesUpdateWithResponse(ctx context.Context, id int, body JiraInstancesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraInstancesUpdateResponse, error) {
	rsp, err := c.JiraInstancesUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraInstancesUpdateResponse(rsp)
}

func (c *ClientWithResponses) JiraInstancesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body JiraInstancesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraInstancesUpdateResponse, error) {
	rsp, err := c.JiraInstancesUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraInstancesUpdateResponse(rsp)
}

// JiraProductConfigurationsListWithResponse request returning *JiraProductConfigurationsListResponse
func (c *ClientWithResponses) JiraProductConfigurationsListWithResponse(ctx context.Context, params *JiraProductConfigurationsListParams, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsListResponse, error) {
	rsp, err := c.JiraProductConfigurationsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProductConfigurationsListResponse(rsp)
}

// JiraProductConfigurationsCreateWithBodyWithResponse request with arbitrary body returning *JiraProductConfigurationsCreateResponse
func (c *ClientWithResponses) JiraProductConfigurationsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsCreateResponse, error) {
	rsp, err := c.JiraProductConfigurationsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProductConfigurationsCreateResponse(rsp)
}

func (c *ClientWithResponses) JiraProductConfigurationsCreateWithResponse(ctx context.Context, body JiraProductConfigurationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsCreateResponse, error) {
	rsp, err := c.JiraProductConfigurationsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProductConfigurationsCreateResponse(rsp)
}

func (c *ClientWithResponses) JiraProductConfigurationsCreateWithFormdataBodyWithResponse(ctx context.Context, body JiraProductConfigurationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsCreateResponse, error) {
	rsp, err := c.JiraProductConfigurationsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProductConfigurationsCreateResponse(rsp)
}

// JiraProductConfigurationsDestroyWithResponse request returning *JiraProductConfigurationsDestroyResponse
func (c *ClientWithResponses) JiraProductConfigurationsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsDestroyResponse, error) {
	rsp, err := c.JiraProductConfigurationsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProductConfigurationsDestroyResponse(rsp)
}

// JiraProductConfigurationsRetrieveWithResponse request returning *JiraProductConfigurationsRetrieveResponse
func (c *ClientWithResponses) JiraProductConfigurationsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsRetrieveResponse, error) {
	rsp, err := c.JiraProductConfigurationsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProductConfigurationsRetrieveResponse(rsp)
}

// JiraProductConfigurationsPartialUpdateWithBodyWithResponse request with arbitrary body returning *JiraProductConfigurationsPartialUpdateResponse
func (c *ClientWithResponses) JiraProductConfigurationsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsPartialUpdateResponse, error) {
	rsp, err := c.JiraProductConfigurationsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProductConfigurationsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) JiraProductConfigurationsPartialUpdateWithResponse(ctx context.Context, id int, body JiraProductConfigurationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsPartialUpdateResponse, error) {
	rsp, err := c.JiraProductConfigurationsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProductConfigurationsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) JiraProductConfigurationsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body JiraProductConfigurationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsPartialUpdateResponse, error) {
	rsp, err := c.JiraProductConfigurationsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProductConfigurationsPartialUpdateResponse(rsp)
}

// JiraProductConfigurationsUpdateWithBodyWithResponse request with arbitrary body returning *JiraProductConfigurationsUpdateResponse
func (c *ClientWithResponses) JiraProductConfigurationsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsUpdateResponse, error) {
	rsp, err := c.JiraProductConfigurationsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProductConfigurationsUpdateResponse(rsp)
}

func (c *ClientWithResponses) JiraProductConfigurationsUpdateWithResponse(ctx context.Context, id int, body JiraProductConfigurationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsUpdateResponse, error) {
	rsp, err := c.JiraProductConfigurationsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProductConfigurationsUpdateResponse(rsp)
}

func (c *ClientWithResponses) JiraProductConfigurationsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body JiraProductConfigurationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsUpdateResponse, error) {
	rsp, err := c.JiraProductConfigurationsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProductConfigurationsUpdateResponse(rsp)
}

// JiraProjectsListWithResponse request returning *JiraProjectsListResponse
func (c *ClientWithResponses) JiraProjectsListWithResponse(ctx context.Context, params *JiraProjectsListParams, reqEditors ...RequestEditorFn) (*JiraProjectsListResponse, error) {
	rsp, err := c.JiraProjectsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProjectsListResponse(rsp)
}

// JiraProjectsCreateWithBodyWithResponse request with arbitrary body returning *JiraProjectsCreateResponse
func (c *ClientWithResponses) JiraProjectsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraProjectsCreateResponse, error) {
	rsp, err := c.JiraProjectsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProjectsCreateResponse(rsp)
}

func (c *ClientWithResponses) JiraProjectsCreateWithResponse(ctx context.Context, body JiraProjectsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraProjectsCreateResponse, error) {
	rsp, err := c.JiraProjectsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProjectsCreateResponse(rsp)
}

func (c *ClientWithResponses) JiraProjectsCreateWithFormdataBodyWithResponse(ctx context.Context, body JiraProjectsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraProjectsCreateResponse, error) {
	rsp, err := c.JiraProjectsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProjectsCreateResponse(rsp)
}

// JiraProjectsDestroyWithResponse request returning *JiraProjectsDestroyResponse
func (c *ClientWithResponses) JiraProjectsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*JiraProjectsDestroyResponse, error) {
	rsp, err := c.JiraProjectsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProjectsDestroyResponse(rsp)
}

// JiraProjectsRetrieveWithResponse request returning *JiraProjectsRetrieveResponse
func (c *ClientWithResponses) JiraProjectsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*JiraProjectsRetrieveResponse, error) {
	rsp, err := c.JiraProjectsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProjectsRetrieveResponse(rsp)
}

// JiraProjectsPartialUpdateWithBodyWithResponse request with arbitrary body returning *JiraProjectsPartialUpdateResponse
func (c *ClientWithResponses) JiraProjectsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraProjectsPartialUpdateResponse, error) {
	rsp, err := c.JiraProjectsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProjectsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) JiraProjectsPartialUpdateWithResponse(ctx context.Context, id int, body JiraProjectsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraProjectsPartialUpdateResponse, error) {
	rsp, err := c.JiraProjectsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProjectsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) JiraProjectsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body JiraProjectsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraProjectsPartialUpdateResponse, error) {
	rsp, err := c.JiraProjectsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProjectsPartialUpdateResponse(rsp)
}

// JiraProjectsUpdateWithBodyWithResponse request with arbitrary body returning *JiraProjectsUpdateResponse
func (c *ClientWithResponses) JiraProjectsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraProjectsUpdateResponse, error) {
	rsp, err := c.JiraProjectsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProjectsUpdateResponse(rsp)
}

func (c *ClientWithResponses) JiraProjectsUpdateWithResponse(ctx context.Context, id int, body JiraProjectsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraProjectsUpdateResponse, error) {
	rsp, err := c.JiraProjectsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProjectsUpdateResponse(rsp)
}

func (c *ClientWithResponses) JiraProjectsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body JiraProjectsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraProjectsUpdateResponse, error) {
	rsp, err := c.JiraProjectsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProjectsUpdateResponse(rsp)
}

// LanguageTypesListWithResponse request returning *LanguageTypesListResponse
func (c *ClientWithResponses) LanguageTypesListWithResponse(ctx context.Context, params *LanguageTypesListParams, reqEditors ...RequestEditorFn) (*LanguageTypesListResponse, error) {
	rsp, err := c.LanguageTypesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguageTypesListResponse(rsp)
}

// LanguageTypesCreateWithBodyWithResponse request with arbitrary body returning *LanguageTypesCreateResponse
func (c *ClientWithResponses) LanguageTypesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LanguageTypesCreateResponse, error) {
	rsp, err := c.LanguageTypesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguageTypesCreateResponse(rsp)
}

func (c *ClientWithResponses) LanguageTypesCreateWithResponse(ctx context.Context, body LanguageTypesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*LanguageTypesCreateResponse, error) {
	rsp, err := c.LanguageTypesCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguageTypesCreateResponse(rsp)
}

func (c *ClientWithResponses) LanguageTypesCreateWithFormdataBodyWithResponse(ctx context.Context, body LanguageTypesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*LanguageTypesCreateResponse, error) {
	rsp, err := c.LanguageTypesCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguageTypesCreateResponse(rsp)
}

// LanguageTypesDestroyWithResponse request returning *LanguageTypesDestroyResponse
func (c *ClientWithResponses) LanguageTypesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*LanguageTypesDestroyResponse, error) {
	rsp, err := c.LanguageTypesDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguageTypesDestroyResponse(rsp)
}

// LanguageTypesRetrieveWithResponse request returning *LanguageTypesRetrieveResponse
func (c *ClientWithResponses) LanguageTypesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*LanguageTypesRetrieveResponse, error) {
	rsp, err := c.LanguageTypesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguageTypesRetrieveResponse(rsp)
}

// LanguageTypesPartialUpdateWithBodyWithResponse request with arbitrary body returning *LanguageTypesPartialUpdateResponse
func (c *ClientWithResponses) LanguageTypesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LanguageTypesPartialUpdateResponse, error) {
	rsp, err := c.LanguageTypesPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguageTypesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) LanguageTypesPartialUpdateWithResponse(ctx context.Context, id int, body LanguageTypesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*LanguageTypesPartialUpdateResponse, error) {
	rsp, err := c.LanguageTypesPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguageTypesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) LanguageTypesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body LanguageTypesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*LanguageTypesPartialUpdateResponse, error) {
	rsp, err := c.LanguageTypesPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguageTypesPartialUpdateResponse(rsp)
}

// LanguageTypesUpdateWithBodyWithResponse request with arbitrary body returning *LanguageTypesUpdateResponse
func (c *ClientWithResponses) LanguageTypesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LanguageTypesUpdateResponse, error) {
	rsp, err := c.LanguageTypesUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguageTypesUpdateResponse(rsp)
}

func (c *ClientWithResponses) LanguageTypesUpdateWithResponse(ctx context.Context, id int, body LanguageTypesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*LanguageTypesUpdateResponse, error) {
	rsp, err := c.LanguageTypesUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguageTypesUpdateResponse(rsp)
}

func (c *ClientWithResponses) LanguageTypesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body LanguageTypesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*LanguageTypesUpdateResponse, error) {
	rsp, err := c.LanguageTypesUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguageTypesUpdateResponse(rsp)
}

// LanguagesListWithResponse request returning *LanguagesListResponse
func (c *ClientWithResponses) LanguagesListWithResponse(ctx context.Context, params *LanguagesListParams, reqEditors ...RequestEditorFn) (*LanguagesListResponse, error) {
	rsp, err := c.LanguagesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguagesListResponse(rsp)
}

// LanguagesCreateWithBodyWithResponse request with arbitrary body returning *LanguagesCreateResponse
func (c *ClientWithResponses) LanguagesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LanguagesCreateResponse, error) {
	rsp, err := c.LanguagesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguagesCreateResponse(rsp)
}

func (c *ClientWithResponses) LanguagesCreateWithResponse(ctx context.Context, body LanguagesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*LanguagesCreateResponse, error) {
	rsp, err := c.LanguagesCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguagesCreateResponse(rsp)
}

func (c *ClientWithResponses) LanguagesCreateWithFormdataBodyWithResponse(ctx context.Context, body LanguagesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*LanguagesCreateResponse, error) {
	rsp, err := c.LanguagesCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguagesCreateResponse(rsp)
}

// LanguagesDestroyWithResponse request returning *LanguagesDestroyResponse
func (c *ClientWithResponses) LanguagesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*LanguagesDestroyResponse, error) {
	rsp, err := c.LanguagesDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguagesDestroyResponse(rsp)
}

// LanguagesRetrieveWithResponse request returning *LanguagesRetrieveResponse
func (c *ClientWithResponses) LanguagesRetrieveWithResponse(ctx context.Context, id int, params *LanguagesRetrieveParams, reqEditors ...RequestEditorFn) (*LanguagesRetrieveResponse, error) {
	rsp, err := c.LanguagesRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguagesRetrieveResponse(rsp)
}

// LanguagesPartialUpdateWithBodyWithResponse request with arbitrary body returning *LanguagesPartialUpdateResponse
func (c *ClientWithResponses) LanguagesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LanguagesPartialUpdateResponse, error) {
	rsp, err := c.LanguagesPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguagesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) LanguagesPartialUpdateWithResponse(ctx context.Context, id int, body LanguagesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*LanguagesPartialUpdateResponse, error) {
	rsp, err := c.LanguagesPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguagesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) LanguagesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body LanguagesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*LanguagesPartialUpdateResponse, error) {
	rsp, err := c.LanguagesPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguagesPartialUpdateResponse(rsp)
}

// LanguagesUpdateWithBodyWithResponse request with arbitrary body returning *LanguagesUpdateResponse
func (c *ClientWithResponses) LanguagesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LanguagesUpdateResponse, error) {
	rsp, err := c.LanguagesUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguagesUpdateResponse(rsp)
}

func (c *ClientWithResponses) LanguagesUpdateWithResponse(ctx context.Context, id int, body LanguagesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*LanguagesUpdateResponse, error) {
	rsp, err := c.LanguagesUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguagesUpdateResponse(rsp)
}

func (c *ClientWithResponses) LanguagesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body LanguagesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*LanguagesUpdateResponse, error) {
	rsp, err := c.LanguagesUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguagesUpdateResponse(rsp)
}

// MetadataListWithResponse request returning *MetadataListResponse
func (c *ClientWithResponses) MetadataListWithResponse(ctx context.Context, params *MetadataListParams, reqEditors ...RequestEditorFn) (*MetadataListResponse, error) {
	rsp, err := c.MetadataList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMetadataListResponse(rsp)
}

// MetadataCreateWithBodyWithResponse request with arbitrary body returning *MetadataCreateResponse
func (c *ClientWithResponses) MetadataCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MetadataCreateResponse, error) {
	rsp, err := c.MetadataCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMetadataCreateResponse(rsp)
}

func (c *ClientWithResponses) MetadataCreateWithResponse(ctx context.Context, body MetadataCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*MetadataCreateResponse, error) {
	rsp, err := c.MetadataCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMetadataCreateResponse(rsp)
}

func (c *ClientWithResponses) MetadataCreateWithFormdataBodyWithResponse(ctx context.Context, body MetadataCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*MetadataCreateResponse, error) {
	rsp, err := c.MetadataCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMetadataCreateResponse(rsp)
}

// MetadataDestroyWithResponse request returning *MetadataDestroyResponse
func (c *ClientWithResponses) MetadataDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*MetadataDestroyResponse, error) {
	rsp, err := c.MetadataDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMetadataDestroyResponse(rsp)
}

// MetadataRetrieveWithResponse request returning *MetadataRetrieveResponse
func (c *ClientWithResponses) MetadataRetrieveWithResponse(ctx context.Context, id int, params *MetadataRetrieveParams, reqEditors ...RequestEditorFn) (*MetadataRetrieveResponse, error) {
	rsp, err := c.MetadataRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMetadataRetrieveResponse(rsp)
}

// MetadataPartialUpdateWithBodyWithResponse request with arbitrary body returning *MetadataPartialUpdateResponse
func (c *ClientWithResponses) MetadataPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MetadataPartialUpdateResponse, error) {
	rsp, err := c.MetadataPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMetadataPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) MetadataPartialUpdateWithResponse(ctx context.Context, id int, body MetadataPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*MetadataPartialUpdateResponse, error) {
	rsp, err := c.MetadataPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMetadataPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) MetadataPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body MetadataPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*MetadataPartialUpdateResponse, error) {
	rsp, err := c.MetadataPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMetadataPartialUpdateResponse(rsp)
}

// MetadataUpdateWithBodyWithResponse request with arbitrary body returning *MetadataUpdateResponse
func (c *ClientWithResponses) MetadataUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MetadataUpdateResponse, error) {
	rsp, err := c.MetadataUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMetadataUpdateResponse(rsp)
}

func (c *ClientWithResponses) MetadataUpdateWithResponse(ctx context.Context, id int, body MetadataUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*MetadataUpdateResponse, error) {
	rsp, err := c.MetadataUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMetadataUpdateResponse(rsp)
}

func (c *ClientWithResponses) MetadataUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body MetadataUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*MetadataUpdateResponse, error) {
	rsp, err := c.MetadataUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMetadataUpdateResponse(rsp)
}

// NetworkLocationsListWithResponse request returning *NetworkLocationsListResponse
func (c *ClientWithResponses) NetworkLocationsListWithResponse(ctx context.Context, params *NetworkLocationsListParams, reqEditors ...RequestEditorFn) (*NetworkLocationsListResponse, error) {
	rsp, err := c.NetworkLocationsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkLocationsListResponse(rsp)
}

// NetworkLocationsCreateWithBodyWithResponse request with arbitrary body returning *NetworkLocationsCreateResponse
func (c *ClientWithResponses) NetworkLocationsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkLocationsCreateResponse, error) {
	rsp, err := c.NetworkLocationsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkLocationsCreateResponse(rsp)
}

func (c *ClientWithResponses) NetworkLocationsCreateWithResponse(ctx context.Context, body NetworkLocationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkLocationsCreateResponse, error) {
	rsp, err := c.NetworkLocationsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkLocationsCreateResponse(rsp)
}

func (c *ClientWithResponses) NetworkLocationsCreateWithFormdataBodyWithResponse(ctx context.Context, body NetworkLocationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*NetworkLocationsCreateResponse, error) {
	rsp, err := c.NetworkLocationsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkLocationsCreateResponse(rsp)
}

// NetworkLocationsDestroyWithResponse request returning *NetworkLocationsDestroyResponse
func (c *ClientWithResponses) NetworkLocationsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*NetworkLocationsDestroyResponse, error) {
	rsp, err := c.NetworkLocationsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkLocationsDestroyResponse(rsp)
}

// NetworkLocationsRetrieveWithResponse request returning *NetworkLocationsRetrieveResponse
func (c *ClientWithResponses) NetworkLocationsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*NetworkLocationsRetrieveResponse, error) {
	rsp, err := c.NetworkLocationsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkLocationsRetrieveResponse(rsp)
}

// NetworkLocationsPartialUpdateWithBodyWithResponse request with arbitrary body returning *NetworkLocationsPartialUpdateResponse
func (c *ClientWithResponses) NetworkLocationsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkLocationsPartialUpdateResponse, error) {
	rsp, err := c.NetworkLocationsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkLocationsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) NetworkLocationsPartialUpdateWithResponse(ctx context.Context, id int, body NetworkLocationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkLocationsPartialUpdateResponse, error) {
	rsp, err := c.NetworkLocationsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkLocationsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) NetworkLocationsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body NetworkLocationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*NetworkLocationsPartialUpdateResponse, error) {
	rsp, err := c.NetworkLocationsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkLocationsPartialUpdateResponse(rsp)
}

// NetworkLocationsUpdateWithBodyWithResponse request with arbitrary body returning *NetworkLocationsUpdateResponse
func (c *ClientWithResponses) NetworkLocationsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkLocationsUpdateResponse, error) {
	rsp, err := c.NetworkLocationsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkLocationsUpdateResponse(rsp)
}

func (c *ClientWithResponses) NetworkLocationsUpdateWithResponse(ctx context.Context, id int, body NetworkLocationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkLocationsUpdateResponse, error) {
	rsp, err := c.NetworkLocationsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkLocationsUpdateResponse(rsp)
}

func (c *ClientWithResponses) NetworkLocationsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body NetworkLocationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*NetworkLocationsUpdateResponse, error) {
	rsp, err := c.NetworkLocationsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkLocationsUpdateResponse(rsp)
}

// NoteTypeListWithResponse request returning *NoteTypeListResponse
func (c *ClientWithResponses) NoteTypeListWithResponse(ctx context.Context, params *NoteTypeListParams, reqEditors ...RequestEditorFn) (*NoteTypeListResponse, error) {
	rsp, err := c.NoteTypeList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNoteTypeListResponse(rsp)
}

// NoteTypeCreateWithBodyWithResponse request with arbitrary body returning *NoteTypeCreateResponse
func (c *ClientWithResponses) NoteTypeCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NoteTypeCreateResponse, error) {
	rsp, err := c.NoteTypeCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNoteTypeCreateResponse(rsp)
}

func (c *ClientWithResponses) NoteTypeCreateWithResponse(ctx context.Context, body NoteTypeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*NoteTypeCreateResponse, error) {
	rsp, err := c.NoteTypeCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNoteTypeCreateResponse(rsp)
}

func (c *ClientWithResponses) NoteTypeCreateWithFormdataBodyWithResponse(ctx context.Context, body NoteTypeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*NoteTypeCreateResponse, error) {
	rsp, err := c.NoteTypeCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNoteTypeCreateResponse(rsp)
}

// NoteTypeDestroyWithResponse request returning *NoteTypeDestroyResponse
func (c *ClientWithResponses) NoteTypeDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*NoteTypeDestroyResponse, error) {
	rsp, err := c.NoteTypeDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNoteTypeDestroyResponse(rsp)
}

// NoteTypeRetrieveWithResponse request returning *NoteTypeRetrieveResponse
func (c *ClientWithResponses) NoteTypeRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*NoteTypeRetrieveResponse, error) {
	rsp, err := c.NoteTypeRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNoteTypeRetrieveResponse(rsp)
}

// NoteTypePartialUpdateWithBodyWithResponse request with arbitrary body returning *NoteTypePartialUpdateResponse
func (c *ClientWithResponses) NoteTypePartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NoteTypePartialUpdateResponse, error) {
	rsp, err := c.NoteTypePartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNoteTypePartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) NoteTypePartialUpdateWithResponse(ctx context.Context, id int, body NoteTypePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*NoteTypePartialUpdateResponse, error) {
	rsp, err := c.NoteTypePartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNoteTypePartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) NoteTypePartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body NoteTypePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*NoteTypePartialUpdateResponse, error) {
	rsp, err := c.NoteTypePartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNoteTypePartialUpdateResponse(rsp)
}

// NoteTypeUpdateWithBodyWithResponse request with arbitrary body returning *NoteTypeUpdateResponse
func (c *ClientWithResponses) NoteTypeUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NoteTypeUpdateResponse, error) {
	rsp, err := c.NoteTypeUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNoteTypeUpdateResponse(rsp)
}

func (c *ClientWithResponses) NoteTypeUpdateWithResponse(ctx context.Context, id int, body NoteTypeUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*NoteTypeUpdateResponse, error) {
	rsp, err := c.NoteTypeUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNoteTypeUpdateResponse(rsp)
}

func (c *ClientWithResponses) NoteTypeUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body NoteTypeUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*NoteTypeUpdateResponse, error) {
	rsp, err := c.NoteTypeUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNoteTypeUpdateResponse(rsp)
}

// NotesListWithResponse request returning *NotesListResponse
func (c *ClientWithResponses) NotesListWithResponse(ctx context.Context, params *NotesListParams, reqEditors ...RequestEditorFn) (*NotesListResponse, error) {
	rsp, err := c.NotesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotesListResponse(rsp)
}

// NotesRetrieveWithResponse request returning *NotesRetrieveResponse
func (c *ClientWithResponses) NotesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*NotesRetrieveResponse, error) {
	rsp, err := c.NotesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotesRetrieveResponse(rsp)
}

// NotesPartialUpdateWithBodyWithResponse request with arbitrary body returning *NotesPartialUpdateResponse
func (c *ClientWithResponses) NotesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NotesPartialUpdateResponse, error) {
	rsp, err := c.NotesPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) NotesPartialUpdateWithResponse(ctx context.Context, id int, body NotesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*NotesPartialUpdateResponse, error) {
	rsp, err := c.NotesPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) NotesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body NotesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*NotesPartialUpdateResponse, error) {
	rsp, err := c.NotesPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotesPartialUpdateResponse(rsp)
}

// NotesUpdateWithBodyWithResponse request with arbitrary body returning *NotesUpdateResponse
func (c *ClientWithResponses) NotesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NotesUpdateResponse, error) {
	rsp, err := c.NotesUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotesUpdateResponse(rsp)
}

func (c *ClientWithResponses) NotesUpdateWithResponse(ctx context.Context, id int, body NotesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*NotesUpdateResponse, error) {
	rsp, err := c.NotesUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotesUpdateResponse(rsp)
}

func (c *ClientWithResponses) NotesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body NotesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*NotesUpdateResponse, error) {
	rsp, err := c.NotesUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotesUpdateResponse(rsp)
}

// NotificationsListWithResponse request returning *NotificationsListResponse
func (c *ClientWithResponses) NotificationsListWithResponse(ctx context.Context, params *NotificationsListParams, reqEditors ...RequestEditorFn) (*NotificationsListResponse, error) {
	rsp, err := c.NotificationsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotificationsListResponse(rsp)
}

// NotificationsCreateWithBodyWithResponse request with arbitrary body returning *NotificationsCreateResponse
func (c *ClientWithResponses) NotificationsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NotificationsCreateResponse, error) {
	rsp, err := c.NotificationsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotificationsCreateResponse(rsp)
}

func (c *ClientWithResponses) NotificationsCreateWithResponse(ctx context.Context, body NotificationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*NotificationsCreateResponse, error) {
	rsp, err := c.NotificationsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotificationsCreateResponse(rsp)
}

func (c *ClientWithResponses) NotificationsCreateWithFormdataBodyWithResponse(ctx context.Context, body NotificationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*NotificationsCreateResponse, error) {
	rsp, err := c.NotificationsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotificationsCreateResponse(rsp)
}

// NotificationsDestroyWithResponse request returning *NotificationsDestroyResponse
func (c *ClientWithResponses) NotificationsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*NotificationsDestroyResponse, error) {
	rsp, err := c.NotificationsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotificationsDestroyResponse(rsp)
}

// NotificationsRetrieveWithResponse request returning *NotificationsRetrieveResponse
func (c *ClientWithResponses) NotificationsRetrieveWithResponse(ctx context.Context, id int, params *NotificationsRetrieveParams, reqEditors ...RequestEditorFn) (*NotificationsRetrieveResponse, error) {
	rsp, err := c.NotificationsRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotificationsRetrieveResponse(rsp)
}

// NotificationsPartialUpdateWithBodyWithResponse request with arbitrary body returning *NotificationsPartialUpdateResponse
func (c *ClientWithResponses) NotificationsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NotificationsPartialUpdateResponse, error) {
	rsp, err := c.NotificationsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotificationsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) NotificationsPartialUpdateWithResponse(ctx context.Context, id int, body NotificationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*NotificationsPartialUpdateResponse, error) {
	rsp, err := c.NotificationsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotificationsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) NotificationsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body NotificationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*NotificationsPartialUpdateResponse, error) {
	rsp, err := c.NotificationsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotificationsPartialUpdateResponse(rsp)
}

// NotificationsUpdateWithBodyWithResponse request with arbitrary body returning *NotificationsUpdateResponse
func (c *ClientWithResponses) NotificationsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NotificationsUpdateResponse, error) {
	rsp, err := c.NotificationsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotificationsUpdateResponse(rsp)
}

func (c *ClientWithResponses) NotificationsUpdateWithResponse(ctx context.Context, id int, body NotificationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*NotificationsUpdateResponse, error) {
	rsp, err := c.NotificationsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotificationsUpdateResponse(rsp)
}

func (c *ClientWithResponses) NotificationsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body NotificationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*NotificationsUpdateResponse, error) {
	rsp, err := c.NotificationsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotificationsUpdateResponse(rsp)
}

// Oa3SchemaRetrieveWithResponse request returning *Oa3SchemaRetrieveResponse
func (c *ClientWithResponses) Oa3SchemaRetrieveWithResponse(ctx context.Context, params *Oa3SchemaRetrieveParams, reqEditors ...RequestEditorFn) (*Oa3SchemaRetrieveResponse, error) {
	rsp, err := c.Oa3SchemaRetrieve(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOa3SchemaRetrieveResponse(rsp)
}

// ProductApiScanConfigurationsListWithResponse request returning *ProductApiScanConfigurationsListResponse
func (c *ClientWithResponses) ProductApiScanConfigurationsListWithResponse(ctx context.Context, params *ProductApiScanConfigurationsListParams, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsListResponse, error) {
	rsp, err := c.ProductApiScanConfigurationsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductApiScanConfigurationsListResponse(rsp)
}

// ProductApiScanConfigurationsCreateWithBodyWithResponse request with arbitrary body returning *ProductApiScanConfigurationsCreateResponse
func (c *ClientWithResponses) ProductApiScanConfigurationsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsCreateResponse, error) {
	rsp, err := c.ProductApiScanConfigurationsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductApiScanConfigurationsCreateResponse(rsp)
}

func (c *ClientWithResponses) ProductApiScanConfigurationsCreateWithResponse(ctx context.Context, body ProductApiScanConfigurationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsCreateResponse, error) {
	rsp, err := c.ProductApiScanConfigurationsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductApiScanConfigurationsCreateResponse(rsp)
}

func (c *ClientWithResponses) ProductApiScanConfigurationsCreateWithFormdataBodyWithResponse(ctx context.Context, body ProductApiScanConfigurationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsCreateResponse, error) {
	rsp, err := c.ProductApiScanConfigurationsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductApiScanConfigurationsCreateResponse(rsp)
}

// ProductApiScanConfigurationsDestroyWithResponse request returning *ProductApiScanConfigurationsDestroyResponse
func (c *ClientWithResponses) ProductApiScanConfigurationsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsDestroyResponse, error) {
	rsp, err := c.ProductApiScanConfigurationsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductApiScanConfigurationsDestroyResponse(rsp)
}

// ProductApiScanConfigurationsRetrieveWithResponse request returning *ProductApiScanConfigurationsRetrieveResponse
func (c *ClientWithResponses) ProductApiScanConfigurationsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsRetrieveResponse, error) {
	rsp, err := c.ProductApiScanConfigurationsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductApiScanConfigurationsRetrieveResponse(rsp)
}

// ProductApiScanConfigurationsPartialUpdateWithBodyWithResponse request with arbitrary body returning *ProductApiScanConfigurationsPartialUpdateResponse
func (c *ClientWithResponses) ProductApiScanConfigurationsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsPartialUpdateResponse, error) {
	rsp, err := c.ProductApiScanConfigurationsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductApiScanConfigurationsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) ProductApiScanConfigurationsPartialUpdateWithResponse(ctx context.Context, id int, body ProductApiScanConfigurationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsPartialUpdateResponse, error) {
	rsp, err := c.ProductApiScanConfigurationsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductApiScanConfigurationsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) ProductApiScanConfigurationsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductApiScanConfigurationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsPartialUpdateResponse, error) {
	rsp, err := c.ProductApiScanConfigurationsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductApiScanConfigurationsPartialUpdateResponse(rsp)
}

// ProductApiScanConfigurationsUpdateWithBodyWithResponse request with arbitrary body returning *ProductApiScanConfigurationsUpdateResponse
func (c *ClientWithResponses) ProductApiScanConfigurationsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsUpdateResponse, error) {
	rsp, err := c.ProductApiScanConfigurationsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductApiScanConfigurationsUpdateResponse(rsp)
}

func (c *ClientWithResponses) ProductApiScanConfigurationsUpdateWithResponse(ctx context.Context, id int, body ProductApiScanConfigurationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsUpdateResponse, error) {
	rsp, err := c.ProductApiScanConfigurationsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductApiScanConfigurationsUpdateResponse(rsp)
}

func (c *ClientWithResponses) ProductApiScanConfigurationsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductApiScanConfigurationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsUpdateResponse, error) {
	rsp, err := c.ProductApiScanConfigurationsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductApiScanConfigurationsUpdateResponse(rsp)
}

// ProductGroupsListWithResponse request returning *ProductGroupsListResponse
func (c *ClientWithResponses) ProductGroupsListWithResponse(ctx context.Context, params *ProductGroupsListParams, reqEditors ...RequestEditorFn) (*ProductGroupsListResponse, error) {
	rsp, err := c.ProductGroupsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductGroupsListResponse(rsp)
}

// ProductGroupsCreateWithBodyWithResponse request with arbitrary body returning *ProductGroupsCreateResponse
func (c *ClientWithResponses) ProductGroupsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductGroupsCreateResponse, error) {
	rsp, err := c.ProductGroupsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductGroupsCreateResponse(rsp)
}

func (c *ClientWithResponses) ProductGroupsCreateWithResponse(ctx context.Context, body ProductGroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductGroupsCreateResponse, error) {
	rsp, err := c.ProductGroupsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductGroupsCreateResponse(rsp)
}

func (c *ClientWithResponses) ProductGroupsCreateWithFormdataBodyWithResponse(ctx context.Context, body ProductGroupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductGroupsCreateResponse, error) {
	rsp, err := c.ProductGroupsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductGroupsCreateResponse(rsp)
}

// ProductGroupsDestroyWithResponse request returning *ProductGroupsDestroyResponse
func (c *ClientWithResponses) ProductGroupsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductGroupsDestroyResponse, error) {
	rsp, err := c.ProductGroupsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductGroupsDestroyResponse(rsp)
}

// ProductGroupsRetrieveWithResponse request returning *ProductGroupsRetrieveResponse
func (c *ClientWithResponses) ProductGroupsRetrieveWithResponse(ctx context.Context, id int, params *ProductGroupsRetrieveParams, reqEditors ...RequestEditorFn) (*ProductGroupsRetrieveResponse, error) {
	rsp, err := c.ProductGroupsRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductGroupsRetrieveResponse(rsp)
}

// ProductGroupsPartialUpdateWithResponse request returning *ProductGroupsPartialUpdateResponse
func (c *ClientWithResponses) ProductGroupsPartialUpdateWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductGroupsPartialUpdateResponse, error) {
	rsp, err := c.ProductGroupsPartialUpdate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductGroupsPartialUpdateResponse(rsp)
}

// ProductGroupsUpdateWithBodyWithResponse request with arbitrary body returning *ProductGroupsUpdateResponse
func (c *ClientWithResponses) ProductGroupsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductGroupsUpdateResponse, error) {
	rsp, err := c.ProductGroupsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductGroupsUpdateResponse(rsp)
}

func (c *ClientWithResponses) ProductGroupsUpdateWithResponse(ctx context.Context, id int, body ProductGroupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductGroupsUpdateResponse, error) {
	rsp, err := c.ProductGroupsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductGroupsUpdateResponse(rsp)
}

func (c *ClientWithResponses) ProductGroupsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductGroupsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductGroupsUpdateResponse, error) {
	rsp, err := c.ProductGroupsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductGroupsUpdateResponse(rsp)
}

// ProductMembersListWithResponse request returning *ProductMembersListResponse
func (c *ClientWithResponses) ProductMembersListWithResponse(ctx context.Context, params *ProductMembersListParams, reqEditors ...RequestEditorFn) (*ProductMembersListResponse, error) {
	rsp, err := c.ProductMembersList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductMembersListResponse(rsp)
}

// ProductMembersCreateWithBodyWithResponse request with arbitrary body returning *ProductMembersCreateResponse
func (c *ClientWithResponses) ProductMembersCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductMembersCreateResponse, error) {
	rsp, err := c.ProductMembersCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductMembersCreateResponse(rsp)
}

func (c *ClientWithResponses) ProductMembersCreateWithResponse(ctx context.Context, body ProductMembersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductMembersCreateResponse, error) {
	rsp, err := c.ProductMembersCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductMembersCreateResponse(rsp)
}

func (c *ClientWithResponses) ProductMembersCreateWithFormdataBodyWithResponse(ctx context.Context, body ProductMembersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductMembersCreateResponse, error) {
	rsp, err := c.ProductMembersCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductMembersCreateResponse(rsp)
}

// ProductMembersDestroyWithResponse request returning *ProductMembersDestroyResponse
func (c *ClientWithResponses) ProductMembersDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductMembersDestroyResponse, error) {
	rsp, err := c.ProductMembersDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductMembersDestroyResponse(rsp)
}

// ProductMembersRetrieveWithResponse request returning *ProductMembersRetrieveResponse
func (c *ClientWithResponses) ProductMembersRetrieveWithResponse(ctx context.Context, id int, params *ProductMembersRetrieveParams, reqEditors ...RequestEditorFn) (*ProductMembersRetrieveResponse, error) {
	rsp, err := c.ProductMembersRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductMembersRetrieveResponse(rsp)
}

// ProductMembersPartialUpdateWithResponse request returning *ProductMembersPartialUpdateResponse
func (c *ClientWithResponses) ProductMembersPartialUpdateWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductMembersPartialUpdateResponse, error) {
	rsp, err := c.ProductMembersPartialUpdate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductMembersPartialUpdateResponse(rsp)
}

// ProductMembersUpdateWithBodyWithResponse request with arbitrary body returning *ProductMembersUpdateResponse
func (c *ClientWithResponses) ProductMembersUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductMembersUpdateResponse, error) {
	rsp, err := c.ProductMembersUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductMembersUpdateResponse(rsp)
}

func (c *ClientWithResponses) ProductMembersUpdateWithResponse(ctx context.Context, id int, body ProductMembersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductMembersUpdateResponse, error) {
	rsp, err := c.ProductMembersUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductMembersUpdateResponse(rsp)
}

func (c *ClientWithResponses) ProductMembersUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductMembersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductMembersUpdateResponse, error) {
	rsp, err := c.ProductMembersUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductMembersUpdateResponse(rsp)
}

// ProductTypeGroupsListWithResponse request returning *ProductTypeGroupsListResponse
func (c *ClientWithResponses) ProductTypeGroupsListWithResponse(ctx context.Context, params *ProductTypeGroupsListParams, reqEditors ...RequestEditorFn) (*ProductTypeGroupsListResponse, error) {
	rsp, err := c.ProductTypeGroupsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypeGroupsListResponse(rsp)
}

// ProductTypeGroupsCreateWithBodyWithResponse request with arbitrary body returning *ProductTypeGroupsCreateResponse
func (c *ClientWithResponses) ProductTypeGroupsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductTypeGroupsCreateResponse, error) {
	rsp, err := c.ProductTypeGroupsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypeGroupsCreateResponse(rsp)
}

func (c *ClientWithResponses) ProductTypeGroupsCreateWithResponse(ctx context.Context, body ProductTypeGroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductTypeGroupsCreateResponse, error) {
	rsp, err := c.ProductTypeGroupsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypeGroupsCreateResponse(rsp)
}

func (c *ClientWithResponses) ProductTypeGroupsCreateWithFormdataBodyWithResponse(ctx context.Context, body ProductTypeGroupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductTypeGroupsCreateResponse, error) {
	rsp, err := c.ProductTypeGroupsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypeGroupsCreateResponse(rsp)
}

// ProductTypeGroupsDestroyWithResponse request returning *ProductTypeGroupsDestroyResponse
func (c *ClientWithResponses) ProductTypeGroupsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductTypeGroupsDestroyResponse, error) {
	rsp, err := c.ProductTypeGroupsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypeGroupsDestroyResponse(rsp)
}

// ProductTypeGroupsRetrieveWithResponse request returning *ProductTypeGroupsRetrieveResponse
func (c *ClientWithResponses) ProductTypeGroupsRetrieveWithResponse(ctx context.Context, id int, params *ProductTypeGroupsRetrieveParams, reqEditors ...RequestEditorFn) (*ProductTypeGroupsRetrieveResponse, error) {
	rsp, err := c.ProductTypeGroupsRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypeGroupsRetrieveResponse(rsp)
}

// ProductTypeGroupsPartialUpdateWithResponse request returning *ProductTypeGroupsPartialUpdateResponse
func (c *ClientWithResponses) ProductTypeGroupsPartialUpdateWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductTypeGroupsPartialUpdateResponse, error) {
	rsp, err := c.ProductTypeGroupsPartialUpdate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypeGroupsPartialUpdateResponse(rsp)
}

// ProductTypeGroupsUpdateWithBodyWithResponse request with arbitrary body returning *ProductTypeGroupsUpdateResponse
func (c *ClientWithResponses) ProductTypeGroupsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductTypeGroupsUpdateResponse, error) {
	rsp, err := c.ProductTypeGroupsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypeGroupsUpdateResponse(rsp)
}

func (c *ClientWithResponses) ProductTypeGroupsUpdateWithResponse(ctx context.Context, id int, body ProductTypeGroupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductTypeGroupsUpdateResponse, error) {
	rsp, err := c.ProductTypeGroupsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypeGroupsUpdateResponse(rsp)
}

func (c *ClientWithResponses) ProductTypeGroupsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductTypeGroupsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductTypeGroupsUpdateResponse, error) {
	rsp, err := c.ProductTypeGroupsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypeGroupsUpdateResponse(rsp)
}

// ProductTypeMembersListWithResponse request returning *ProductTypeMembersListResponse
func (c *ClientWithResponses) ProductTypeMembersListWithResponse(ctx context.Context, params *ProductTypeMembersListParams, reqEditors ...RequestEditorFn) (*ProductTypeMembersListResponse, error) {
	rsp, err := c.ProductTypeMembersList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypeMembersListResponse(rsp)
}

// ProductTypeMembersCreateWithBodyWithResponse request with arbitrary body returning *ProductTypeMembersCreateResponse
func (c *ClientWithResponses) ProductTypeMembersCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductTypeMembersCreateResponse, error) {
	rsp, err := c.ProductTypeMembersCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypeMembersCreateResponse(rsp)
}

func (c *ClientWithResponses) ProductTypeMembersCreateWithResponse(ctx context.Context, body ProductTypeMembersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductTypeMembersCreateResponse, error) {
	rsp, err := c.ProductTypeMembersCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypeMembersCreateResponse(rsp)
}

func (c *ClientWithResponses) ProductTypeMembersCreateWithFormdataBodyWithResponse(ctx context.Context, body ProductTypeMembersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductTypeMembersCreateResponse, error) {
	rsp, err := c.ProductTypeMembersCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypeMembersCreateResponse(rsp)
}

// ProductTypeMembersDestroyWithResponse request returning *ProductTypeMembersDestroyResponse
func (c *ClientWithResponses) ProductTypeMembersDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductTypeMembersDestroyResponse, error) {
	rsp, err := c.ProductTypeMembersDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypeMembersDestroyResponse(rsp)
}

// ProductTypeMembersRetrieveWithResponse request returning *ProductTypeMembersRetrieveResponse
func (c *ClientWithResponses) ProductTypeMembersRetrieveWithResponse(ctx context.Context, id int, params *ProductTypeMembersRetrieveParams, reqEditors ...RequestEditorFn) (*ProductTypeMembersRetrieveResponse, error) {
	rsp, err := c.ProductTypeMembersRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypeMembersRetrieveResponse(rsp)
}

// ProductTypeMembersPartialUpdateWithResponse request returning *ProductTypeMembersPartialUpdateResponse
func (c *ClientWithResponses) ProductTypeMembersPartialUpdateWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductTypeMembersPartialUpdateResponse, error) {
	rsp, err := c.ProductTypeMembersPartialUpdate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypeMembersPartialUpdateResponse(rsp)
}

// ProductTypeMembersUpdateWithBodyWithResponse request with arbitrary body returning *ProductTypeMembersUpdateResponse
func (c *ClientWithResponses) ProductTypeMembersUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductTypeMembersUpdateResponse, error) {
	rsp, err := c.ProductTypeMembersUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypeMembersUpdateResponse(rsp)
}

func (c *ClientWithResponses) ProductTypeMembersUpdateWithResponse(ctx context.Context, id int, body ProductTypeMembersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductTypeMembersUpdateResponse, error) {
	rsp, err := c.ProductTypeMembersUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypeMembersUpdateResponse(rsp)
}

func (c *ClientWithResponses) ProductTypeMembersUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductTypeMembersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductTypeMembersUpdateResponse, error) {
	rsp, err := c.ProductTypeMembersUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypeMembersUpdateResponse(rsp)
}

// ProductTypesListWithResponse request returning *ProductTypesListResponse
func (c *ClientWithResponses) ProductTypesListWithResponse(ctx context.Context, params *ProductTypesListParams, reqEditors ...RequestEditorFn) (*ProductTypesListResponse, error) {
	rsp, err := c.ProductTypesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypesListResponse(rsp)
}

// ProductTypesCreateWithBodyWithResponse request with arbitrary body returning *ProductTypesCreateResponse
func (c *ClientWithResponses) ProductTypesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductTypesCreateResponse, error) {
	rsp, err := c.ProductTypesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypesCreateResponse(rsp)
}

func (c *ClientWithResponses) ProductTypesCreateWithResponse(ctx context.Context, body ProductTypesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductTypesCreateResponse, error) {
	rsp, err := c.ProductTypesCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypesCreateResponse(rsp)
}

func (c *ClientWithResponses) ProductTypesCreateWithFormdataBodyWithResponse(ctx context.Context, body ProductTypesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductTypesCreateResponse, error) {
	rsp, err := c.ProductTypesCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypesCreateResponse(rsp)
}

// ProductTypesDestroyWithResponse request returning *ProductTypesDestroyResponse
func (c *ClientWithResponses) ProductTypesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductTypesDestroyResponse, error) {
	rsp, err := c.ProductTypesDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypesDestroyResponse(rsp)
}

// ProductTypesRetrieveWithResponse request returning *ProductTypesRetrieveResponse
func (c *ClientWithResponses) ProductTypesRetrieveWithResponse(ctx context.Context, id int, params *ProductTypesRetrieveParams, reqEditors ...RequestEditorFn) (*ProductTypesRetrieveResponse, error) {
	rsp, err := c.ProductTypesRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypesRetrieveResponse(rsp)
}

// ProductTypesPartialUpdateWithBodyWithResponse request with arbitrary body returning *ProductTypesPartialUpdateResponse
func (c *ClientWithResponses) ProductTypesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductTypesPartialUpdateResponse, error) {
	rsp, err := c.ProductTypesPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) ProductTypesPartialUpdateWithResponse(ctx context.Context, id int, body ProductTypesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductTypesPartialUpdateResponse, error) {
	rsp, err := c.ProductTypesPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) ProductTypesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductTypesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductTypesPartialUpdateResponse, error) {
	rsp, err := c.ProductTypesPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypesPartialUpdateResponse(rsp)
}

// ProductTypesUpdateWithBodyWithResponse request with arbitrary body returning *ProductTypesUpdateResponse
func (c *ClientWithResponses) ProductTypesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductTypesUpdateResponse, error) {
	rsp, err := c.ProductTypesUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypesUpdateResponse(rsp)
}

func (c *ClientWithResponses) ProductTypesUpdateWithResponse(ctx context.Context, id int, body ProductTypesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductTypesUpdateResponse, error) {
	rsp, err := c.ProductTypesUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypesUpdateResponse(rsp)
}

func (c *ClientWithResponses) ProductTypesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductTypesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductTypesUpdateResponse, error) {
	rsp, err := c.ProductTypesUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypesUpdateResponse(rsp)
}

// ProductTypesGenerateReportCreateWithBodyWithResponse request with arbitrary body returning *ProductTypesGenerateReportCreateResponse
func (c *ClientWithResponses) ProductTypesGenerateReportCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductTypesGenerateReportCreateResponse, error) {
	rsp, err := c.ProductTypesGenerateReportCreateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypesGenerateReportCreateResponse(rsp)
}

func (c *ClientWithResponses) ProductTypesGenerateReportCreateWithResponse(ctx context.Context, id int, body ProductTypesGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductTypesGenerateReportCreateResponse, error) {
	rsp, err := c.ProductTypesGenerateReportCreate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypesGenerateReportCreateResponse(rsp)
}

func (c *ClientWithResponses) ProductTypesGenerateReportCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductTypesGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductTypesGenerateReportCreateResponse, error) {
	rsp, err := c.ProductTypesGenerateReportCreateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypesGenerateReportCreateResponse(rsp)
}

// ProductsListWithResponse request returning *ProductsListResponse
func (c *ClientWithResponses) ProductsListWithResponse(ctx context.Context, params *ProductsListParams, reqEditors ...RequestEditorFn) (*ProductsListResponse, error) {
	rsp, err := c.ProductsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductsListResponse(rsp)
}

// ProductsCreateWithBodyWithResponse request with arbitrary body returning *ProductsCreateResponse
func (c *ClientWithResponses) ProductsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductsCreateResponse, error) {
	rsp, err := c.ProductsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductsCreateResponse(rsp)
}

func (c *ClientWithResponses) ProductsCreateWithResponse(ctx context.Context, body ProductsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductsCreateResponse, error) {
	rsp, err := c.ProductsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductsCreateResponse(rsp)
}

func (c *ClientWithResponses) ProductsCreateWithFormdataBodyWithResponse(ctx context.Context, body ProductsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductsCreateResponse, error) {
	rsp, err := c.ProductsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductsCreateResponse(rsp)
}

// ProductsDestroyWithResponse request returning *ProductsDestroyResponse
func (c *ClientWithResponses) ProductsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductsDestroyResponse, error) {
	rsp, err := c.ProductsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductsDestroyResponse(rsp)
}

// ProductsRetrieveWithResponse request returning *ProductsRetrieveResponse
func (c *ClientWithResponses) ProductsRetrieveWithResponse(ctx context.Context, id int, params *ProductsRetrieveParams, reqEditors ...RequestEditorFn) (*ProductsRetrieveResponse, error) {
	rsp, err := c.ProductsRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductsRetrieveResponse(rsp)
}

// ProductsPartialUpdateWithBodyWithResponse request with arbitrary body returning *ProductsPartialUpdateResponse
func (c *ClientWithResponses) ProductsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductsPartialUpdateResponse, error) {
	rsp, err := c.ProductsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) ProductsPartialUpdateWithResponse(ctx context.Context, id int, body ProductsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductsPartialUpdateResponse, error) {
	rsp, err := c.ProductsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) ProductsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductsPartialUpdateResponse, error) {
	rsp, err := c.ProductsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductsPartialUpdateResponse(rsp)
}

// ProductsUpdateWithBodyWithResponse request with arbitrary body returning *ProductsUpdateResponse
func (c *ClientWithResponses) ProductsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductsUpdateResponse, error) {
	rsp, err := c.ProductsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductsUpdateResponse(rsp)
}

func (c *ClientWithResponses) ProductsUpdateWithResponse(ctx context.Context, id int, body ProductsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductsUpdateResponse, error) {
	rsp, err := c.ProductsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductsUpdateResponse(rsp)
}

func (c *ClientWithResponses) ProductsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductsUpdateResponse, error) {
	rsp, err := c.ProductsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductsUpdateResponse(rsp)
}

// ProductsGenerateReportCreateWithBodyWithResponse request with arbitrary body returning *ProductsGenerateReportCreateResponse
func (c *ClientWithResponses) ProductsGenerateReportCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductsGenerateReportCreateResponse, error) {
	rsp, err := c.ProductsGenerateReportCreateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductsGenerateReportCreateResponse(rsp)
}

func (c *ClientWithResponses) ProductsGenerateReportCreateWithResponse(ctx context.Context, id int, body ProductsGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductsGenerateReportCreateResponse, error) {
	rsp, err := c.ProductsGenerateReportCreate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductsGenerateReportCreateResponse(rsp)
}

func (c *ClientWithResponses) ProductsGenerateReportCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductsGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductsGenerateReportCreateResponse, error) {
	rsp, err := c.ProductsGenerateReportCreateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductsGenerateReportCreateResponse(rsp)
}

// RegulationsListWithResponse request returning *RegulationsListResponse
func (c *ClientWithResponses) RegulationsListWithResponse(ctx context.Context, params *RegulationsListParams, reqEditors ...RequestEditorFn) (*RegulationsListResponse, error) {
	rsp, err := c.RegulationsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegulationsListResponse(rsp)
}

// RegulationsCreateWithBodyWithResponse request with arbitrary body returning *RegulationsCreateResponse
func (c *ClientWithResponses) RegulationsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegulationsCreateResponse, error) {
	rsp, err := c.RegulationsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegulationsCreateResponse(rsp)
}

func (c *ClientWithResponses) RegulationsCreateWithResponse(ctx context.Context, body RegulationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*RegulationsCreateResponse, error) {
	rsp, err := c.RegulationsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegulationsCreateResponse(rsp)
}

func (c *ClientWithResponses) RegulationsCreateWithFormdataBodyWithResponse(ctx context.Context, body RegulationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*RegulationsCreateResponse, error) {
	rsp, err := c.RegulationsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegulationsCreateResponse(rsp)
}

// RegulationsDestroyWithResponse request returning *RegulationsDestroyResponse
func (c *ClientWithResponses) RegulationsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*RegulationsDestroyResponse, error) {
	rsp, err := c.RegulationsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegulationsDestroyResponse(rsp)
}

// RegulationsRetrieveWithResponse request returning *RegulationsRetrieveResponse
func (c *ClientWithResponses) RegulationsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*RegulationsRetrieveResponse, error) {
	rsp, err := c.RegulationsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegulationsRetrieveResponse(rsp)
}

// RegulationsPartialUpdateWithBodyWithResponse request with arbitrary body returning *RegulationsPartialUpdateResponse
func (c *ClientWithResponses) RegulationsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegulationsPartialUpdateResponse, error) {
	rsp, err := c.RegulationsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegulationsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) RegulationsPartialUpdateWithResponse(ctx context.Context, id int, body RegulationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*RegulationsPartialUpdateResponse, error) {
	rsp, err := c.RegulationsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegulationsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) RegulationsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body RegulationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*RegulationsPartialUpdateResponse, error) {
	rsp, err := c.RegulationsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegulationsPartialUpdateResponse(rsp)
}

// RegulationsUpdateWithBodyWithResponse request with arbitrary body returning *RegulationsUpdateResponse
func (c *ClientWithResponses) RegulationsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegulationsUpdateResponse, error) {
	rsp, err := c.RegulationsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegulationsUpdateResponse(rsp)
}

func (c *ClientWithResponses) RegulationsUpdateWithResponse(ctx context.Context, id int, body RegulationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*RegulationsUpdateResponse, error) {
	rsp, err := c.RegulationsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegulationsUpdateResponse(rsp)
}

func (c *ClientWithResponses) RegulationsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body RegulationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*RegulationsUpdateResponse, error) {
	rsp, err := c.RegulationsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegulationsUpdateResponse(rsp)
}

// ReimportScanCreateWithBodyWithResponse request with arbitrary body returning *ReimportScanCreateResponse
func (c *ClientWithResponses) ReimportScanCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReimportScanCreateResponse, error) {
	rsp, err := c.ReimportScanCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReimportScanCreateResponse(rsp)
}

// RolesListWithResponse request returning *RolesListResponse
func (c *ClientWithResponses) RolesListWithResponse(ctx context.Context, params *RolesListParams, reqEditors ...RequestEditorFn) (*RolesListResponse, error) {
	rsp, err := c.RolesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRolesListResponse(rsp)
}

// RolesRetrieveWithResponse request returning *RolesRetrieveResponse
func (c *ClientWithResponses) RolesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*RolesRetrieveResponse, error) {
	rsp, err := c.RolesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRolesRetrieveResponse(rsp)
}

// SonarqubeIssuesListWithResponse request returning *SonarqubeIssuesListResponse
func (c *ClientWithResponses) SonarqubeIssuesListWithResponse(ctx context.Context, params *SonarqubeIssuesListParams, reqEditors ...RequestEditorFn) (*SonarqubeIssuesListResponse, error) {
	rsp, err := c.SonarqubeIssuesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeIssuesListResponse(rsp)
}

// SonarqubeIssuesCreateWithBodyWithResponse request with arbitrary body returning *SonarqubeIssuesCreateResponse
func (c *ClientWithResponses) SonarqubeIssuesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SonarqubeIssuesCreateResponse, error) {
	rsp, err := c.SonarqubeIssuesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeIssuesCreateResponse(rsp)
}

func (c *ClientWithResponses) SonarqubeIssuesCreateWithResponse(ctx context.Context, body SonarqubeIssuesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeIssuesCreateResponse, error) {
	rsp, err := c.SonarqubeIssuesCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeIssuesCreateResponse(rsp)
}

func (c *ClientWithResponses) SonarqubeIssuesCreateWithFormdataBodyWithResponse(ctx context.Context, body SonarqubeIssuesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeIssuesCreateResponse, error) {
	rsp, err := c.SonarqubeIssuesCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeIssuesCreateResponse(rsp)
}

// SonarqubeIssuesDestroyWithResponse request returning *SonarqubeIssuesDestroyResponse
func (c *ClientWithResponses) SonarqubeIssuesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*SonarqubeIssuesDestroyResponse, error) {
	rsp, err := c.SonarqubeIssuesDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeIssuesDestroyResponse(rsp)
}

// SonarqubeIssuesRetrieveWithResponse request returning *SonarqubeIssuesRetrieveResponse
func (c *ClientWithResponses) SonarqubeIssuesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*SonarqubeIssuesRetrieveResponse, error) {
	rsp, err := c.SonarqubeIssuesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeIssuesRetrieveResponse(rsp)
}

// SonarqubeIssuesPartialUpdateWithBodyWithResponse request with arbitrary body returning *SonarqubeIssuesPartialUpdateResponse
func (c *ClientWithResponses) SonarqubeIssuesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SonarqubeIssuesPartialUpdateResponse, error) {
	rsp, err := c.SonarqubeIssuesPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeIssuesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) SonarqubeIssuesPartialUpdateWithResponse(ctx context.Context, id int, body SonarqubeIssuesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeIssuesPartialUpdateResponse, error) {
	rsp, err := c.SonarqubeIssuesPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeIssuesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) SonarqubeIssuesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body SonarqubeIssuesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeIssuesPartialUpdateResponse, error) {
	rsp, err := c.SonarqubeIssuesPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeIssuesPartialUpdateResponse(rsp)
}

// SonarqubeIssuesUpdateWithBodyWithResponse request with arbitrary body returning *SonarqubeIssuesUpdateResponse
func (c *ClientWithResponses) SonarqubeIssuesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SonarqubeIssuesUpdateResponse, error) {
	rsp, err := c.SonarqubeIssuesUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeIssuesUpdateResponse(rsp)
}

func (c *ClientWithResponses) SonarqubeIssuesUpdateWithResponse(ctx context.Context, id int, body SonarqubeIssuesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeIssuesUpdateResponse, error) {
	rsp, err := c.SonarqubeIssuesUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeIssuesUpdateResponse(rsp)
}

func (c *ClientWithResponses) SonarqubeIssuesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body SonarqubeIssuesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeIssuesUpdateResponse, error) {
	rsp, err := c.SonarqubeIssuesUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeIssuesUpdateResponse(rsp)
}

// SonarqubeTransitionsListWithResponse request returning *SonarqubeTransitionsListResponse
func (c *ClientWithResponses) SonarqubeTransitionsListWithResponse(ctx context.Context, params *SonarqubeTransitionsListParams, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsListResponse, error) {
	rsp, err := c.SonarqubeTransitionsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeTransitionsListResponse(rsp)
}

// SonarqubeTransitionsCreateWithBodyWithResponse request with arbitrary body returning *SonarqubeTransitionsCreateResponse
func (c *ClientWithResponses) SonarqubeTransitionsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsCreateResponse, error) {
	rsp, err := c.SonarqubeTransitionsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeTransitionsCreateResponse(rsp)
}

func (c *ClientWithResponses) SonarqubeTransitionsCreateWithResponse(ctx context.Context, body SonarqubeTransitionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsCreateResponse, error) {
	rsp, err := c.SonarqubeTransitionsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeTransitionsCreateResponse(rsp)
}

func (c *ClientWithResponses) SonarqubeTransitionsCreateWithFormdataBodyWithResponse(ctx context.Context, body SonarqubeTransitionsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsCreateResponse, error) {
	rsp, err := c.SonarqubeTransitionsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeTransitionsCreateResponse(rsp)
}

// SonarqubeTransitionsDestroyWithResponse request returning *SonarqubeTransitionsDestroyResponse
func (c *ClientWithResponses) SonarqubeTransitionsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsDestroyResponse, error) {
	rsp, err := c.SonarqubeTransitionsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeTransitionsDestroyResponse(rsp)
}

// SonarqubeTransitionsRetrieveWithResponse request returning *SonarqubeTransitionsRetrieveResponse
func (c *ClientWithResponses) SonarqubeTransitionsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsRetrieveResponse, error) {
	rsp, err := c.SonarqubeTransitionsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeTransitionsRetrieveResponse(rsp)
}

// SonarqubeTransitionsPartialUpdateWithBodyWithResponse request with arbitrary body returning *SonarqubeTransitionsPartialUpdateResponse
func (c *ClientWithResponses) SonarqubeTransitionsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsPartialUpdateResponse, error) {
	rsp, err := c.SonarqubeTransitionsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeTransitionsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) SonarqubeTransitionsPartialUpdateWithResponse(ctx context.Context, id int, body SonarqubeTransitionsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsPartialUpdateResponse, error) {
	rsp, err := c.SonarqubeTransitionsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeTransitionsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) SonarqubeTransitionsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body SonarqubeTransitionsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsPartialUpdateResponse, error) {
	rsp, err := c.SonarqubeTransitionsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeTransitionsPartialUpdateResponse(rsp)
}

// SonarqubeTransitionsUpdateWithBodyWithResponse request with arbitrary body returning *SonarqubeTransitionsUpdateResponse
func (c *ClientWithResponses) SonarqubeTransitionsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsUpdateResponse, error) {
	rsp, err := c.SonarqubeTransitionsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeTransitionsUpdateResponse(rsp)
}

func (c *ClientWithResponses) SonarqubeTransitionsUpdateWithResponse(ctx context.Context, id int, body SonarqubeTransitionsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsUpdateResponse, error) {
	rsp, err := c.SonarqubeTransitionsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeTransitionsUpdateResponse(rsp)
}

func (c *ClientWithResponses) SonarqubeTransitionsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body SonarqubeTransitionsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsUpdateResponse, error) {
	rsp, err := c.SonarqubeTransitionsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeTransitionsUpdateResponse(rsp)
}

// StubFindingsListWithResponse request returning *StubFindingsListResponse
func (c *ClientWithResponses) StubFindingsListWithResponse(ctx context.Context, params *StubFindingsListParams, reqEditors ...RequestEditorFn) (*StubFindingsListResponse, error) {
	rsp, err := c.StubFindingsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStubFindingsListResponse(rsp)
}

// StubFindingsCreateWithBodyWithResponse request with arbitrary body returning *StubFindingsCreateResponse
func (c *ClientWithResponses) StubFindingsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StubFindingsCreateResponse, error) {
	rsp, err := c.StubFindingsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStubFindingsCreateResponse(rsp)
}

func (c *ClientWithResponses) StubFindingsCreateWithResponse(ctx context.Context, body StubFindingsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*StubFindingsCreateResponse, error) {
	rsp, err := c.StubFindingsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStubFindingsCreateResponse(rsp)
}

func (c *ClientWithResponses) StubFindingsCreateWithFormdataBodyWithResponse(ctx context.Context, body StubFindingsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*StubFindingsCreateResponse, error) {
	rsp, err := c.StubFindingsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStubFindingsCreateResponse(rsp)
}

// StubFindingsDestroyWithResponse request returning *StubFindingsDestroyResponse
func (c *ClientWithResponses) StubFindingsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*StubFindingsDestroyResponse, error) {
	rsp, err := c.StubFindingsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStubFindingsDestroyResponse(rsp)
}

// StubFindingsRetrieveWithResponse request returning *StubFindingsRetrieveResponse
func (c *ClientWithResponses) StubFindingsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*StubFindingsRetrieveResponse, error) {
	rsp, err := c.StubFindingsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStubFindingsRetrieveResponse(rsp)
}

// StubFindingsPartialUpdateWithBodyWithResponse request with arbitrary body returning *StubFindingsPartialUpdateResponse
func (c *ClientWithResponses) StubFindingsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StubFindingsPartialUpdateResponse, error) {
	rsp, err := c.StubFindingsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStubFindingsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) StubFindingsPartialUpdateWithResponse(ctx context.Context, id int, body StubFindingsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*StubFindingsPartialUpdateResponse, error) {
	rsp, err := c.StubFindingsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStubFindingsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) StubFindingsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body StubFindingsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*StubFindingsPartialUpdateResponse, error) {
	rsp, err := c.StubFindingsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStubFindingsPartialUpdateResponse(rsp)
}

// StubFindingsUpdateWithBodyWithResponse request with arbitrary body returning *StubFindingsUpdateResponse
func (c *ClientWithResponses) StubFindingsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StubFindingsUpdateResponse, error) {
	rsp, err := c.StubFindingsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStubFindingsUpdateResponse(rsp)
}

func (c *ClientWithResponses) StubFindingsUpdateWithResponse(ctx context.Context, id int, body StubFindingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*StubFindingsUpdateResponse, error) {
	rsp, err := c.StubFindingsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStubFindingsUpdateResponse(rsp)
}

func (c *ClientWithResponses) StubFindingsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body StubFindingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*StubFindingsUpdateResponse, error) {
	rsp, err := c.StubFindingsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStubFindingsUpdateResponse(rsp)
}

// SystemSettingsListWithResponse request returning *SystemSettingsListResponse
func (c *ClientWithResponses) SystemSettingsListWithResponse(ctx context.Context, params *SystemSettingsListParams, reqEditors ...RequestEditorFn) (*SystemSettingsListResponse, error) {
	rsp, err := c.SystemSettingsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSystemSettingsListResponse(rsp)
}

// SystemSettingsPartialUpdateWithBodyWithResponse request with arbitrary body returning *SystemSettingsPartialUpdateResponse
func (c *ClientWithResponses) SystemSettingsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SystemSettingsPartialUpdateResponse, error) {
	rsp, err := c.SystemSettingsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSystemSettingsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) SystemSettingsPartialUpdateWithResponse(ctx context.Context, id int, body SystemSettingsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SystemSettingsPartialUpdateResponse, error) {
	rsp, err := c.SystemSettingsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSystemSettingsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) SystemSettingsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body SystemSettingsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SystemSettingsPartialUpdateResponse, error) {
	rsp, err := c.SystemSettingsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSystemSettingsPartialUpdateResponse(rsp)
}

// SystemSettingsUpdateWithBodyWithResponse request with arbitrary body returning *SystemSettingsUpdateResponse
func (c *ClientWithResponses) SystemSettingsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SystemSettingsUpdateResponse, error) {
	rsp, err := c.SystemSettingsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSystemSettingsUpdateResponse(rsp)
}

func (c *ClientWithResponses) SystemSettingsUpdateWithResponse(ctx context.Context, id int, body SystemSettingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SystemSettingsUpdateResponse, error) {
	rsp, err := c.SystemSettingsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSystemSettingsUpdateResponse(rsp)
}

func (c *ClientWithResponses) SystemSettingsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body SystemSettingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SystemSettingsUpdateResponse, error) {
	rsp, err := c.SystemSettingsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSystemSettingsUpdateResponse(rsp)
}

// TechnologiesListWithResponse request returning *TechnologiesListResponse
func (c *ClientWithResponses) TechnologiesListWithResponse(ctx context.Context, params *TechnologiesListParams, reqEditors ...RequestEditorFn) (*TechnologiesListResponse, error) {
	rsp, err := c.TechnologiesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTechnologiesListResponse(rsp)
}

// TechnologiesCreateWithBodyWithResponse request with arbitrary body returning *TechnologiesCreateResponse
func (c *ClientWithResponses) TechnologiesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TechnologiesCreateResponse, error) {
	rsp, err := c.TechnologiesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTechnologiesCreateResponse(rsp)
}

func (c *ClientWithResponses) TechnologiesCreateWithResponse(ctx context.Context, body TechnologiesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TechnologiesCreateResponse, error) {
	rsp, err := c.TechnologiesCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTechnologiesCreateResponse(rsp)
}

func (c *ClientWithResponses) TechnologiesCreateWithFormdataBodyWithResponse(ctx context.Context, body TechnologiesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TechnologiesCreateResponse, error) {
	rsp, err := c.TechnologiesCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTechnologiesCreateResponse(rsp)
}

// TechnologiesDestroyWithResponse request returning *TechnologiesDestroyResponse
func (c *ClientWithResponses) TechnologiesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TechnologiesDestroyResponse, error) {
	rsp, err := c.TechnologiesDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTechnologiesDestroyResponse(rsp)
}

// TechnologiesRetrieveWithResponse request returning *TechnologiesRetrieveResponse
func (c *ClientWithResponses) TechnologiesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TechnologiesRetrieveResponse, error) {
	rsp, err := c.TechnologiesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTechnologiesRetrieveResponse(rsp)
}

// TechnologiesPartialUpdateWithBodyWithResponse request with arbitrary body returning *TechnologiesPartialUpdateResponse
func (c *ClientWithResponses) TechnologiesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TechnologiesPartialUpdateResponse, error) {
	rsp, err := c.TechnologiesPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTechnologiesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) TechnologiesPartialUpdateWithResponse(ctx context.Context, id int, body TechnologiesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TechnologiesPartialUpdateResponse, error) {
	rsp, err := c.TechnologiesPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTechnologiesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) TechnologiesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body TechnologiesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TechnologiesPartialUpdateResponse, error) {
	rsp, err := c.TechnologiesPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTechnologiesPartialUpdateResponse(rsp)
}

// TechnologiesUpdateWithBodyWithResponse request with arbitrary body returning *TechnologiesUpdateResponse
func (c *ClientWithResponses) TechnologiesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TechnologiesUpdateResponse, error) {
	rsp, err := c.TechnologiesUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTechnologiesUpdateResponse(rsp)
}

func (c *ClientWithResponses) TechnologiesUpdateWithResponse(ctx context.Context, id int, body TechnologiesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TechnologiesUpdateResponse, error) {
	rsp, err := c.TechnologiesUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTechnologiesUpdateResponse(rsp)
}

func (c *ClientWithResponses) TechnologiesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body TechnologiesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TechnologiesUpdateResponse, error) {
	rsp, err := c.TechnologiesUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTechnologiesUpdateResponse(rsp)
}

// TestImportsListWithResponse request returning *TestImportsListResponse
func (c *ClientWithResponses) TestImportsListWithResponse(ctx context.Context, params *TestImportsListParams, reqEditors ...RequestEditorFn) (*TestImportsListResponse, error) {
	rsp, err := c.TestImportsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestImportsListResponse(rsp)
}

// TestImportsCreateWithBodyWithResponse request with arbitrary body returning *TestImportsCreateResponse
func (c *ClientWithResponses) TestImportsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestImportsCreateResponse, error) {
	rsp, err := c.TestImportsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestImportsCreateResponse(rsp)
}

func (c *ClientWithResponses) TestImportsCreateWithResponse(ctx context.Context, body TestImportsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestImportsCreateResponse, error) {
	rsp, err := c.TestImportsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestImportsCreateResponse(rsp)
}

func (c *ClientWithResponses) TestImportsCreateWithFormdataBodyWithResponse(ctx context.Context, body TestImportsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestImportsCreateResponse, error) {
	rsp, err := c.TestImportsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestImportsCreateResponse(rsp)
}

// TestImportsDestroyWithResponse request returning *TestImportsDestroyResponse
func (c *ClientWithResponses) TestImportsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TestImportsDestroyResponse, error) {
	rsp, err := c.TestImportsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestImportsDestroyResponse(rsp)
}

// TestImportsRetrieveWithResponse request returning *TestImportsRetrieveResponse
func (c *ClientWithResponses) TestImportsRetrieveWithResponse(ctx context.Context, id int, params *TestImportsRetrieveParams, reqEditors ...RequestEditorFn) (*TestImportsRetrieveResponse, error) {
	rsp, err := c.TestImportsRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestImportsRetrieveResponse(rsp)
}

// TestImportsPartialUpdateWithBodyWithResponse request with arbitrary body returning *TestImportsPartialUpdateResponse
func (c *ClientWithResponses) TestImportsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestImportsPartialUpdateResponse, error) {
	rsp, err := c.TestImportsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestImportsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) TestImportsPartialUpdateWithResponse(ctx context.Context, id int, body TestImportsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestImportsPartialUpdateResponse, error) {
	rsp, err := c.TestImportsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestImportsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) TestImportsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body TestImportsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestImportsPartialUpdateResponse, error) {
	rsp, err := c.TestImportsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestImportsPartialUpdateResponse(rsp)
}

// TestImportsUpdateWithBodyWithResponse request with arbitrary body returning *TestImportsUpdateResponse
func (c *ClientWithResponses) TestImportsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestImportsUpdateResponse, error) {
	rsp, err := c.TestImportsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestImportsUpdateResponse(rsp)
}

func (c *ClientWithResponses) TestImportsUpdateWithResponse(ctx context.Context, id int, body TestImportsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestImportsUpdateResponse, error) {
	rsp, err := c.TestImportsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestImportsUpdateResponse(rsp)
}

func (c *ClientWithResponses) TestImportsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body TestImportsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestImportsUpdateResponse, error) {
	rsp, err := c.TestImportsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestImportsUpdateResponse(rsp)
}

// TestTypesListWithResponse request returning *TestTypesListResponse
func (c *ClientWithResponses) TestTypesListWithResponse(ctx context.Context, params *TestTypesListParams, reqEditors ...RequestEditorFn) (*TestTypesListResponse, error) {
	rsp, err := c.TestTypesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestTypesListResponse(rsp)
}

// TestTypesCreateWithBodyWithResponse request with arbitrary body returning *TestTypesCreateResponse
func (c *ClientWithResponses) TestTypesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestTypesCreateResponse, error) {
	rsp, err := c.TestTypesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestTypesCreateResponse(rsp)
}

func (c *ClientWithResponses) TestTypesCreateWithResponse(ctx context.Context, body TestTypesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestTypesCreateResponse, error) {
	rsp, err := c.TestTypesCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestTypesCreateResponse(rsp)
}

func (c *ClientWithResponses) TestTypesCreateWithFormdataBodyWithResponse(ctx context.Context, body TestTypesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestTypesCreateResponse, error) {
	rsp, err := c.TestTypesCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestTypesCreateResponse(rsp)
}

// TestTypesRetrieveWithResponse request returning *TestTypesRetrieveResponse
func (c *ClientWithResponses) TestTypesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TestTypesRetrieveResponse, error) {
	rsp, err := c.TestTypesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestTypesRetrieveResponse(rsp)
}

// TestTypesPartialUpdateWithBodyWithResponse request with arbitrary body returning *TestTypesPartialUpdateResponse
func (c *ClientWithResponses) TestTypesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestTypesPartialUpdateResponse, error) {
	rsp, err := c.TestTypesPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestTypesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) TestTypesPartialUpdateWithResponse(ctx context.Context, id int, body TestTypesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestTypesPartialUpdateResponse, error) {
	rsp, err := c.TestTypesPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestTypesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) TestTypesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body TestTypesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestTypesPartialUpdateResponse, error) {
	rsp, err := c.TestTypesPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestTypesPartialUpdateResponse(rsp)
}

// TestTypesUpdateWithBodyWithResponse request with arbitrary body returning *TestTypesUpdateResponse
func (c *ClientWithResponses) TestTypesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestTypesUpdateResponse, error) {
	rsp, err := c.TestTypesUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestTypesUpdateResponse(rsp)
}

func (c *ClientWithResponses) TestTypesUpdateWithResponse(ctx context.Context, id int, body TestTypesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestTypesUpdateResponse, error) {
	rsp, err := c.TestTypesUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestTypesUpdateResponse(rsp)
}

func (c *ClientWithResponses) TestTypesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body TestTypesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestTypesUpdateResponse, error) {
	rsp, err := c.TestTypesUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestTypesUpdateResponse(rsp)
}

// TestsListWithResponse request returning *TestsListResponse
func (c *ClientWithResponses) TestsListWithResponse(ctx context.Context, params *TestsListParams, reqEditors ...RequestEditorFn) (*TestsListResponse, error) {
	rsp, err := c.TestsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsListResponse(rsp)
}

// TestsCreateWithBodyWithResponse request with arbitrary body returning *TestsCreateResponse
func (c *ClientWithResponses) TestsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestsCreateResponse, error) {
	rsp, err := c.TestsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsCreateResponse(rsp)
}

func (c *ClientWithResponses) TestsCreateWithResponse(ctx context.Context, body TestsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestsCreateResponse, error) {
	rsp, err := c.TestsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsCreateResponse(rsp)
}

func (c *ClientWithResponses) TestsCreateWithFormdataBodyWithResponse(ctx context.Context, body TestsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestsCreateResponse, error) {
	rsp, err := c.TestsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsCreateResponse(rsp)
}

// TestsDestroyWithResponse request returning *TestsDestroyResponse
func (c *ClientWithResponses) TestsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TestsDestroyResponse, error) {
	rsp, err := c.TestsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsDestroyResponse(rsp)
}

// TestsRetrieveWithResponse request returning *TestsRetrieveResponse
func (c *ClientWithResponses) TestsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TestsRetrieveResponse, error) {
	rsp, err := c.TestsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsRetrieveResponse(rsp)
}

// TestsPartialUpdateWithBodyWithResponse request with arbitrary body returning *TestsPartialUpdateResponse
func (c *ClientWithResponses) TestsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestsPartialUpdateResponse, error) {
	rsp, err := c.TestsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) TestsPartialUpdateWithResponse(ctx context.Context, id int, body TestsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestsPartialUpdateResponse, error) {
	rsp, err := c.TestsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) TestsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body TestsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestsPartialUpdateResponse, error) {
	rsp, err := c.TestsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsPartialUpdateResponse(rsp)
}

// TestsUpdateWithBodyWithResponse request with arbitrary body returning *TestsUpdateResponse
func (c *ClientWithResponses) TestsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestsUpdateResponse, error) {
	rsp, err := c.TestsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsUpdateResponse(rsp)
}

func (c *ClientWithResponses) TestsUpdateWithResponse(ctx context.Context, id int, body TestsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestsUpdateResponse, error) {
	rsp, err := c.TestsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsUpdateResponse(rsp)
}

func (c *ClientWithResponses) TestsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body TestsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestsUpdateResponse, error) {
	rsp, err := c.TestsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsUpdateResponse(rsp)
}

// TestsAcceptRisksCreateWithBodyWithResponse request with arbitrary body returning *TestsAcceptRisksCreateResponse
func (c *ClientWithResponses) TestsAcceptRisksCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestsAcceptRisksCreateResponse, error) {
	rsp, err := c.TestsAcceptRisksCreateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsAcceptRisksCreateResponse(rsp)
}

func (c *ClientWithResponses) TestsAcceptRisksCreateWithResponse(ctx context.Context, id int, body TestsAcceptRisksCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestsAcceptRisksCreateResponse, error) {
	rsp, err := c.TestsAcceptRisksCreate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsAcceptRisksCreateResponse(rsp)
}

func (c *ClientWithResponses) TestsAcceptRisksCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body TestsAcceptRisksCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestsAcceptRisksCreateResponse, error) {
	rsp, err := c.TestsAcceptRisksCreateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsAcceptRisksCreateResponse(rsp)
}

// TestsFilesRetrieveWithResponse request returning *TestsFilesRetrieveResponse
func (c *ClientWithResponses) TestsFilesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TestsFilesRetrieveResponse, error) {
	rsp, err := c.TestsFilesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsFilesRetrieveResponse(rsp)
}

// TestsFilesCreateWithBodyWithResponse request with arbitrary body returning *TestsFilesCreateResponse
func (c *ClientWithResponses) TestsFilesCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestsFilesCreateResponse, error) {
	rsp, err := c.TestsFilesCreateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsFilesCreateResponse(rsp)
}

// TestsGenerateReportCreateWithBodyWithResponse request with arbitrary body returning *TestsGenerateReportCreateResponse
func (c *ClientWithResponses) TestsGenerateReportCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestsGenerateReportCreateResponse, error) {
	rsp, err := c.TestsGenerateReportCreateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsGenerateReportCreateResponse(rsp)
}

func (c *ClientWithResponses) TestsGenerateReportCreateWithResponse(ctx context.Context, id int, body TestsGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestsGenerateReportCreateResponse, error) {
	rsp, err := c.TestsGenerateReportCreate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsGenerateReportCreateResponse(rsp)
}

func (c *ClientWithResponses) TestsGenerateReportCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body TestsGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestsGenerateReportCreateResponse, error) {
	rsp, err := c.TestsGenerateReportCreateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsGenerateReportCreateResponse(rsp)
}

// TestsNotesRetrieveWithResponse request returning *TestsNotesRetrieveResponse
func (c *ClientWithResponses) TestsNotesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TestsNotesRetrieveResponse, error) {
	rsp, err := c.TestsNotesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsNotesRetrieveResponse(rsp)
}

// TestsNotesCreateWithBodyWithResponse request with arbitrary body returning *TestsNotesCreateResponse
func (c *ClientWithResponses) TestsNotesCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestsNotesCreateResponse, error) {
	rsp, err := c.TestsNotesCreateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsNotesCreateResponse(rsp)
}

func (c *ClientWithResponses) TestsNotesCreateWithResponse(ctx context.Context, id int, body TestsNotesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestsNotesCreateResponse, error) {
	rsp, err := c.TestsNotesCreate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsNotesCreateResponse(rsp)
}

func (c *ClientWithResponses) TestsNotesCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body TestsNotesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestsNotesCreateResponse, error) {
	rsp, err := c.TestsNotesCreateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsNotesCreateResponse(rsp)
}

// ToolConfigurationsListWithResponse request returning *ToolConfigurationsListResponse
func (c *ClientWithResponses) ToolConfigurationsListWithResponse(ctx context.Context, params *ToolConfigurationsListParams, reqEditors ...RequestEditorFn) (*ToolConfigurationsListResponse, error) {
	rsp, err := c.ToolConfigurationsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolConfigurationsListResponse(rsp)
}

// ToolConfigurationsCreateWithBodyWithResponse request with arbitrary body returning *ToolConfigurationsCreateResponse
func (c *ClientWithResponses) ToolConfigurationsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ToolConfigurationsCreateResponse, error) {
	rsp, err := c.ToolConfigurationsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolConfigurationsCreateResponse(rsp)
}

func (c *ClientWithResponses) ToolConfigurationsCreateWithResponse(ctx context.Context, body ToolConfigurationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ToolConfigurationsCreateResponse, error) {
	rsp, err := c.ToolConfigurationsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolConfigurationsCreateResponse(rsp)
}

func (c *ClientWithResponses) ToolConfigurationsCreateWithFormdataBodyWithResponse(ctx context.Context, body ToolConfigurationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ToolConfigurationsCreateResponse, error) {
	rsp, err := c.ToolConfigurationsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolConfigurationsCreateResponse(rsp)
}

// ToolConfigurationsDestroyWithResponse request returning *ToolConfigurationsDestroyResponse
func (c *ClientWithResponses) ToolConfigurationsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ToolConfigurationsDestroyResponse, error) {
	rsp, err := c.ToolConfigurationsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolConfigurationsDestroyResponse(rsp)
}

// ToolConfigurationsRetrieveWithResponse request returning *ToolConfigurationsRetrieveResponse
func (c *ClientWithResponses) ToolConfigurationsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ToolConfigurationsRetrieveResponse, error) {
	rsp, err := c.ToolConfigurationsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolConfigurationsRetrieveResponse(rsp)
}

// ToolConfigurationsPartialUpdateWithBodyWithResponse request with arbitrary body returning *ToolConfigurationsPartialUpdateResponse
func (c *ClientWithResponses) ToolConfigurationsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ToolConfigurationsPartialUpdateResponse, error) {
	rsp, err := c.ToolConfigurationsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolConfigurationsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) ToolConfigurationsPartialUpdateWithResponse(ctx context.Context, id int, body ToolConfigurationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ToolConfigurationsPartialUpdateResponse, error) {
	rsp, err := c.ToolConfigurationsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolConfigurationsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) ToolConfigurationsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ToolConfigurationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ToolConfigurationsPartialUpdateResponse, error) {
	rsp, err := c.ToolConfigurationsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolConfigurationsPartialUpdateResponse(rsp)
}

// ToolConfigurationsUpdateWithBodyWithResponse request with arbitrary body returning *ToolConfigurationsUpdateResponse
func (c *ClientWithResponses) ToolConfigurationsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ToolConfigurationsUpdateResponse, error) {
	rsp, err := c.ToolConfigurationsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolConfigurationsUpdateResponse(rsp)
}

func (c *ClientWithResponses) ToolConfigurationsUpdateWithResponse(ctx context.Context, id int, body ToolConfigurationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ToolConfigurationsUpdateResponse, error) {
	rsp, err := c.ToolConfigurationsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolConfigurationsUpdateResponse(rsp)
}

func (c *ClientWithResponses) ToolConfigurationsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ToolConfigurationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ToolConfigurationsUpdateResponse, error) {
	rsp, err := c.ToolConfigurationsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolConfigurationsUpdateResponse(rsp)
}

// ToolProductSettingsListWithResponse request returning *ToolProductSettingsListResponse
func (c *ClientWithResponses) ToolProductSettingsListWithResponse(ctx context.Context, params *ToolProductSettingsListParams, reqEditors ...RequestEditorFn) (*ToolProductSettingsListResponse, error) {
	rsp, err := c.ToolProductSettingsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolProductSettingsListResponse(rsp)
}

// ToolProductSettingsCreateWithBodyWithResponse request with arbitrary body returning *ToolProductSettingsCreateResponse
func (c *ClientWithResponses) ToolProductSettingsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ToolProductSettingsCreateResponse, error) {
	rsp, err := c.ToolProductSettingsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolProductSettingsCreateResponse(rsp)
}

func (c *ClientWithResponses) ToolProductSettingsCreateWithResponse(ctx context.Context, body ToolProductSettingsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ToolProductSettingsCreateResponse, error) {
	rsp, err := c.ToolProductSettingsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolProductSettingsCreateResponse(rsp)
}

func (c *ClientWithResponses) ToolProductSettingsCreateWithFormdataBodyWithResponse(ctx context.Context, body ToolProductSettingsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ToolProductSettingsCreateResponse, error) {
	rsp, err := c.ToolProductSettingsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolProductSettingsCreateResponse(rsp)
}

// ToolProductSettingsDestroyWithResponse request returning *ToolProductSettingsDestroyResponse
func (c *ClientWithResponses) ToolProductSettingsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ToolProductSettingsDestroyResponse, error) {
	rsp, err := c.ToolProductSettingsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolProductSettingsDestroyResponse(rsp)
}

// ToolProductSettingsRetrieveWithResponse request returning *ToolProductSettingsRetrieveResponse
func (c *ClientWithResponses) ToolProductSettingsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ToolProductSettingsRetrieveResponse, error) {
	rsp, err := c.ToolProductSettingsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolProductSettingsRetrieveResponse(rsp)
}

// ToolProductSettingsPartialUpdateWithBodyWithResponse request with arbitrary body returning *ToolProductSettingsPartialUpdateResponse
func (c *ClientWithResponses) ToolProductSettingsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ToolProductSettingsPartialUpdateResponse, error) {
	rsp, err := c.ToolProductSettingsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolProductSettingsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) ToolProductSettingsPartialUpdateWithResponse(ctx context.Context, id int, body ToolProductSettingsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ToolProductSettingsPartialUpdateResponse, error) {
	rsp, err := c.ToolProductSettingsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolProductSettingsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) ToolProductSettingsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ToolProductSettingsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ToolProductSettingsPartialUpdateResponse, error) {
	rsp, err := c.ToolProductSettingsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolProductSettingsPartialUpdateResponse(rsp)
}

// ToolProductSettingsUpdateWithBodyWithResponse request with arbitrary body returning *ToolProductSettingsUpdateResponse
func (c *ClientWithResponses) ToolProductSettingsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ToolProductSettingsUpdateResponse, error) {
	rsp, err := c.ToolProductSettingsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolProductSettingsUpdateResponse(rsp)
}

func (c *ClientWithResponses) ToolProductSettingsUpdateWithResponse(ctx context.Context, id int, body ToolProductSettingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ToolProductSettingsUpdateResponse, error) {
	rsp, err := c.ToolProductSettingsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolProductSettingsUpdateResponse(rsp)
}

func (c *ClientWithResponses) ToolProductSettingsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ToolProductSettingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ToolProductSettingsUpdateResponse, error) {
	rsp, err := c.ToolProductSettingsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolProductSettingsUpdateResponse(rsp)
}

// ToolTypesListWithResponse request returning *ToolTypesListResponse
func (c *ClientWithResponses) ToolTypesListWithResponse(ctx context.Context, params *ToolTypesListParams, reqEditors ...RequestEditorFn) (*ToolTypesListResponse, error) {
	rsp, err := c.ToolTypesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolTypesListResponse(rsp)
}

// ToolTypesCreateWithBodyWithResponse request with arbitrary body returning *ToolTypesCreateResponse
func (c *ClientWithResponses) ToolTypesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ToolTypesCreateResponse, error) {
	rsp, err := c.ToolTypesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolTypesCreateResponse(rsp)
}

func (c *ClientWithResponses) ToolTypesCreateWithResponse(ctx context.Context, body ToolTypesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ToolTypesCreateResponse, error) {
	rsp, err := c.ToolTypesCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolTypesCreateResponse(rsp)
}

func (c *ClientWithResponses) ToolTypesCreateWithFormdataBodyWithResponse(ctx context.Context, body ToolTypesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ToolTypesCreateResponse, error) {
	rsp, err := c.ToolTypesCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolTypesCreateResponse(rsp)
}

// ToolTypesDestroyWithResponse request returning *ToolTypesDestroyResponse
func (c *ClientWithResponses) ToolTypesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ToolTypesDestroyResponse, error) {
	rsp, err := c.ToolTypesDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolTypesDestroyResponse(rsp)
}

// ToolTypesRetrieveWithResponse request returning *ToolTypesRetrieveResponse
func (c *ClientWithResponses) ToolTypesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ToolTypesRetrieveResponse, error) {
	rsp, err := c.ToolTypesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolTypesRetrieveResponse(rsp)
}

// ToolTypesPartialUpdateWithBodyWithResponse request with arbitrary body returning *ToolTypesPartialUpdateResponse
func (c *ClientWithResponses) ToolTypesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ToolTypesPartialUpdateResponse, error) {
	rsp, err := c.ToolTypesPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolTypesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) ToolTypesPartialUpdateWithResponse(ctx context.Context, id int, body ToolTypesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ToolTypesPartialUpdateResponse, error) {
	rsp, err := c.ToolTypesPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolTypesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) ToolTypesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ToolTypesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ToolTypesPartialUpdateResponse, error) {
	rsp, err := c.ToolTypesPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolTypesPartialUpdateResponse(rsp)
}

// ToolTypesUpdateWithBodyWithResponse request with arbitrary body returning *ToolTypesUpdateResponse
func (c *ClientWithResponses) ToolTypesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ToolTypesUpdateResponse, error) {
	rsp, err := c.ToolTypesUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolTypesUpdateResponse(rsp)
}

func (c *ClientWithResponses) ToolTypesUpdateWithResponse(ctx context.Context, id int, body ToolTypesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ToolTypesUpdateResponse, error) {
	rsp, err := c.ToolTypesUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolTypesUpdateResponse(rsp)
}

func (c *ClientWithResponses) ToolTypesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ToolTypesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ToolTypesUpdateResponse, error) {
	rsp, err := c.ToolTypesUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolTypesUpdateResponse(rsp)
}

// UserContactInfosListWithResponse request returning *UserContactInfosListResponse
func (c *ClientWithResponses) UserContactInfosListWithResponse(ctx context.Context, params *UserContactInfosListParams, reqEditors ...RequestEditorFn) (*UserContactInfosListResponse, error) {
	rsp, err := c.UserContactInfosList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserContactInfosListResponse(rsp)
}

// UserContactInfosCreateWithBodyWithResponse request with arbitrary body returning *UserContactInfosCreateResponse
func (c *ClientWithResponses) UserContactInfosCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserContactInfosCreateResponse, error) {
	rsp, err := c.UserContactInfosCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserContactInfosCreateResponse(rsp)
}

func (c *ClientWithResponses) UserContactInfosCreateWithResponse(ctx context.Context, body UserContactInfosCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*UserContactInfosCreateResponse, error) {
	rsp, err := c.UserContactInfosCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserContactInfosCreateResponse(rsp)
}

func (c *ClientWithResponses) UserContactInfosCreateWithFormdataBodyWithResponse(ctx context.Context, body UserContactInfosCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UserContactInfosCreateResponse, error) {
	rsp, err := c.UserContactInfosCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserContactInfosCreateResponse(rsp)
}

// UserContactInfosDestroyWithResponse request returning *UserContactInfosDestroyResponse
func (c *ClientWithResponses) UserContactInfosDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*UserContactInfosDestroyResponse, error) {
	rsp, err := c.UserContactInfosDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserContactInfosDestroyResponse(rsp)
}

// UserContactInfosRetrieveWithResponse request returning *UserContactInfosRetrieveResponse
func (c *ClientWithResponses) UserContactInfosRetrieveWithResponse(ctx context.Context, id int, params *UserContactInfosRetrieveParams, reqEditors ...RequestEditorFn) (*UserContactInfosRetrieveResponse, error) {
	rsp, err := c.UserContactInfosRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserContactInfosRetrieveResponse(rsp)
}

// UserContactInfosPartialUpdateWithBodyWithResponse request with arbitrary body returning *UserContactInfosPartialUpdateResponse
func (c *ClientWithResponses) UserContactInfosPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserContactInfosPartialUpdateResponse, error) {
	rsp, err := c.UserContactInfosPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserContactInfosPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) UserContactInfosPartialUpdateWithResponse(ctx context.Context, id int, body UserContactInfosPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UserContactInfosPartialUpdateResponse, error) {
	rsp, err := c.UserContactInfosPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserContactInfosPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) UserContactInfosPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body UserContactInfosPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UserContactInfosPartialUpdateResponse, error) {
	rsp, err := c.UserContactInfosPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserContactInfosPartialUpdateResponse(rsp)
}

// UserContactInfosUpdateWithBodyWithResponse request with arbitrary body returning *UserContactInfosUpdateResponse
func (c *ClientWithResponses) UserContactInfosUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserContactInfosUpdateResponse, error) {
	rsp, err := c.UserContactInfosUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserContactInfosUpdateResponse(rsp)
}

func (c *ClientWithResponses) UserContactInfosUpdateWithResponse(ctx context.Context, id int, body UserContactInfosUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UserContactInfosUpdateResponse, error) {
	rsp, err := c.UserContactInfosUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserContactInfosUpdateResponse(rsp)
}

func (c *ClientWithResponses) UserContactInfosUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body UserContactInfosUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UserContactInfosUpdateResponse, error) {
	rsp, err := c.UserContactInfosUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserContactInfosUpdateResponse(rsp)
}

// UserProfileRetrieveWithResponse request returning *UserProfileRetrieveResponse
func (c *ClientWithResponses) UserProfileRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UserProfileRetrieveResponse, error) {
	rsp, err := c.UserProfileRetrieve(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserProfileRetrieveResponse(rsp)
}

// UsersListWithResponse request returning *UsersListResponse
func (c *ClientWithResponses) UsersListWithResponse(ctx context.Context, params *UsersListParams, reqEditors ...RequestEditorFn) (*UsersListResponse, error) {
	rsp, err := c.UsersList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersListResponse(rsp)
}

// UsersCreateWithBodyWithResponse request with arbitrary body returning *UsersCreateResponse
func (c *ClientWithResponses) UsersCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersCreateResponse, error) {
	rsp, err := c.UsersCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersCreateResponse(rsp)
}

func (c *ClientWithResponses) UsersCreateWithResponse(ctx context.Context, body UsersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersCreateResponse, error) {
	rsp, err := c.UsersCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersCreateResponse(rsp)
}

func (c *ClientWithResponses) UsersCreateWithFormdataBodyWithResponse(ctx context.Context, body UsersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UsersCreateResponse, error) {
	rsp, err := c.UsersCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersCreateResponse(rsp)
}

// UsersDestroyWithResponse request returning *UsersDestroyResponse
func (c *ClientWithResponses) UsersDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*UsersDestroyResponse, error) {
	rsp, err := c.UsersDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersDestroyResponse(rsp)
}

// UsersRetrieveWithResponse request returning *UsersRetrieveResponse
func (c *ClientWithResponses) UsersRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*UsersRetrieveResponse, error) {
	rsp, err := c.UsersRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersRetrieveResponse(rsp)
}

// UsersPartialUpdateWithBodyWithResponse request with arbitrary body returning *UsersPartialUpdateResponse
func (c *ClientWithResponses) UsersPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersPartialUpdateResponse, error) {
	rsp, err := c.UsersPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) UsersPartialUpdateWithResponse(ctx context.Context, id int, body UsersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersPartialUpdateResponse, error) {
	rsp, err := c.UsersPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) UsersPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body UsersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UsersPartialUpdateResponse, error) {
	rsp, err := c.UsersPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersPartialUpdateResponse(rsp)
}

// UsersUpdateWithBodyWithResponse request with arbitrary body returning *UsersUpdateResponse
func (c *ClientWithResponses) UsersUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUpdateResponse, error) {
	rsp, err := c.UsersUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUpdateResponse(rsp)
}

func (c *ClientWithResponses) UsersUpdateWithResponse(ctx context.Context, id int, body UsersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUpdateResponse, error) {
	rsp, err := c.UsersUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUpdateResponse(rsp)
}

func (c *ClientWithResponses) UsersUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body UsersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UsersUpdateResponse, error) {
	rsp, err := c.UsersUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUpdateResponse(rsp)
}

// ParseApiTokenAuthCreateResponse parses an HTTP response from a ApiTokenAuthCreateWithResponse call
func ParseApiTokenAuthCreateResponse(rsp *http.Response) (*ApiTokenAuthCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiTokenAuthCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDevelopmentEnvironmentsListResponse parses an HTTP response from a DevelopmentEnvironmentsListWithResponse call
func ParseDevelopmentEnvironmentsListResponse(rsp *http.Response) (*DevelopmentEnvironmentsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevelopmentEnvironmentsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDevelopmentEnvironmentList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDevelopmentEnvironmentsCreateResponse parses an HTTP response from a DevelopmentEnvironmentsCreateWithResponse call
func ParseDevelopmentEnvironmentsCreateResponse(rsp *http.Response) (*DevelopmentEnvironmentsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevelopmentEnvironmentsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DevelopmentEnvironment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDevelopmentEnvironmentsDestroyResponse parses an HTTP response from a DevelopmentEnvironmentsDestroyWithResponse call
func ParseDevelopmentEnvironmentsDestroyResponse(rsp *http.Response) (*DevelopmentEnvironmentsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevelopmentEnvironmentsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDevelopmentEnvironmentsRetrieveResponse parses an HTTP response from a DevelopmentEnvironmentsRetrieveWithResponse call
func ParseDevelopmentEnvironmentsRetrieveResponse(rsp *http.Response) (*DevelopmentEnvironmentsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevelopmentEnvironmentsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DevelopmentEnvironment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDevelopmentEnvironmentsPartialUpdateResponse parses an HTTP response from a DevelopmentEnvironmentsPartialUpdateWithResponse call
func ParseDevelopmentEnvironmentsPartialUpdateResponse(rsp *http.Response) (*DevelopmentEnvironmentsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevelopmentEnvironmentsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DevelopmentEnvironment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDevelopmentEnvironmentsUpdateResponse parses an HTTP response from a DevelopmentEnvironmentsUpdateWithResponse call
func ParseDevelopmentEnvironmentsUpdateResponse(rsp *http.Response) (*DevelopmentEnvironmentsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevelopmentEnvironmentsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DevelopmentEnvironment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDojoGroupMembersListResponse parses an HTTP response from a DojoGroupMembersListWithResponse call
func ParseDojoGroupMembersListResponse(rsp *http.Response) (*DojoGroupMembersListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DojoGroupMembersListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDojoGroupMemberList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDojoGroupMembersCreateResponse parses an HTTP response from a DojoGroupMembersCreateWithResponse call
func ParseDojoGroupMembersCreateResponse(rsp *http.Response) (*DojoGroupMembersCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DojoGroupMembersCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DojoGroupMember
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDojoGroupMembersDestroyResponse parses an HTTP response from a DojoGroupMembersDestroyWithResponse call
func ParseDojoGroupMembersDestroyResponse(rsp *http.Response) (*DojoGroupMembersDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DojoGroupMembersDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDojoGroupMembersRetrieveResponse parses an HTTP response from a DojoGroupMembersRetrieveWithResponse call
func ParseDojoGroupMembersRetrieveResponse(rsp *http.Response) (*DojoGroupMembersRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DojoGroupMembersRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DojoGroupMember
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDojoGroupMembersPartialUpdateResponse parses an HTTP response from a DojoGroupMembersPartialUpdateWithResponse call
func ParseDojoGroupMembersPartialUpdateResponse(rsp *http.Response) (*DojoGroupMembersPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DojoGroupMembersPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DojoGroupMember
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDojoGroupMembersUpdateResponse parses an HTTP response from a DojoGroupMembersUpdateWithResponse call
func ParseDojoGroupMembersUpdateResponse(rsp *http.Response) (*DojoGroupMembersUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DojoGroupMembersUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DojoGroupMember
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDojoGroupsListResponse parses an HTTP response from a DojoGroupsListWithResponse call
func ParseDojoGroupsListResponse(rsp *http.Response) (*DojoGroupsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DojoGroupsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDojoGroupList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDojoGroupsCreateResponse parses an HTTP response from a DojoGroupsCreateWithResponse call
func ParseDojoGroupsCreateResponse(rsp *http.Response) (*DojoGroupsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DojoGroupsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DojoGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDojoGroupsDestroyResponse parses an HTTP response from a DojoGroupsDestroyWithResponse call
func ParseDojoGroupsDestroyResponse(rsp *http.Response) (*DojoGroupsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DojoGroupsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDojoGroupsRetrieveResponse parses an HTTP response from a DojoGroupsRetrieveWithResponse call
func ParseDojoGroupsRetrieveResponse(rsp *http.Response) (*DojoGroupsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DojoGroupsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DojoGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDojoGroupsPartialUpdateResponse parses an HTTP response from a DojoGroupsPartialUpdateWithResponse call
func ParseDojoGroupsPartialUpdateResponse(rsp *http.Response) (*DojoGroupsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DojoGroupsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DojoGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDojoGroupsUpdateResponse parses an HTTP response from a DojoGroupsUpdateWithResponse call
func ParseDojoGroupsUpdateResponse(rsp *http.Response) (*DojoGroupsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DojoGroupsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DojoGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEndpointMetaImportCreateResponse parses an HTTP response from a EndpointMetaImportCreateWithResponse call
func ParseEndpointMetaImportCreateResponse(rsp *http.Response) (*EndpointMetaImportCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EndpointMetaImportCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest EndpointMetaImporter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseEndpointStatusListResponse parses an HTTP response from a EndpointStatusListWithResponse call
func ParseEndpointStatusListResponse(rsp *http.Response) (*EndpointStatusListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EndpointStatusListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedEndpointStatusList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEndpointStatusCreateResponse parses an HTTP response from a EndpointStatusCreateWithResponse call
func ParseEndpointStatusCreateResponse(rsp *http.Response) (*EndpointStatusCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EndpointStatusCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest EndpointStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseEndpointStatusDestroyResponse parses an HTTP response from a EndpointStatusDestroyWithResponse call
func ParseEndpointStatusDestroyResponse(rsp *http.Response) (*EndpointStatusDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EndpointStatusDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEndpointStatusRetrieveResponse parses an HTTP response from a EndpointStatusRetrieveWithResponse call
func ParseEndpointStatusRetrieveResponse(rsp *http.Response) (*EndpointStatusRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EndpointStatusRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EndpointStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEndpointStatusPartialUpdateResponse parses an HTTP response from a EndpointStatusPartialUpdateWithResponse call
func ParseEndpointStatusPartialUpdateResponse(rsp *http.Response) (*EndpointStatusPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EndpointStatusPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EndpointStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEndpointStatusUpdateResponse parses an HTTP response from a EndpointStatusUpdateWithResponse call
func ParseEndpointStatusUpdateResponse(rsp *http.Response) (*EndpointStatusUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EndpointStatusUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EndpointStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEndpointsListResponse parses an HTTP response from a EndpointsListWithResponse call
func ParseEndpointsListResponse(rsp *http.Response) (*EndpointsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EndpointsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedEndpointList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEndpointsCreateResponse parses an HTTP response from a EndpointsCreateWithResponse call
func ParseEndpointsCreateResponse(rsp *http.Response) (*EndpointsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EndpointsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Endpoint
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseEndpointsDestroyResponse parses an HTTP response from a EndpointsDestroyWithResponse call
func ParseEndpointsDestroyResponse(rsp *http.Response) (*EndpointsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EndpointsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEndpointsRetrieveResponse parses an HTTP response from a EndpointsRetrieveWithResponse call
func ParseEndpointsRetrieveResponse(rsp *http.Response) (*EndpointsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EndpointsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Endpoint
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEndpointsPartialUpdateResponse parses an HTTP response from a EndpointsPartialUpdateWithResponse call
func ParseEndpointsPartialUpdateResponse(rsp *http.Response) (*EndpointsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EndpointsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Endpoint
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEndpointsUpdateResponse parses an HTTP response from a EndpointsUpdateWithResponse call
func ParseEndpointsUpdateResponse(rsp *http.Response) (*EndpointsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EndpointsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Endpoint
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEndpointsGenerateReportCreateResponse parses an HTTP response from a EndpointsGenerateReportCreateWithResponse call
func ParseEndpointsGenerateReportCreateResponse(rsp *http.Response) (*EndpointsGenerateReportCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EndpointsGenerateReportCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReportGenerate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEngagementPresetsListResponse parses an HTTP response from a EngagementPresetsListWithResponse call
func ParseEngagementPresetsListResponse(rsp *http.Response) (*EngagementPresetsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EngagementPresetsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedEngagementPresetsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEngagementPresetsCreateResponse parses an HTTP response from a EngagementPresetsCreateWithResponse call
func ParseEngagementPresetsCreateResponse(rsp *http.Response) (*EngagementPresetsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EngagementPresetsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest EngagementPresets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseEngagementPresetsDestroyResponse parses an HTTP response from a EngagementPresetsDestroyWithResponse call
func ParseEngagementPresetsDestroyResponse(rsp *http.Response) (*EngagementPresetsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EngagementPresetsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEngagementPresetsRetrieveResponse parses an HTTP response from a EngagementPresetsRetrieveWithResponse call
func ParseEngagementPresetsRetrieveResponse(rsp *http.Response) (*EngagementPresetsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EngagementPresetsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EngagementPresets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEngagementPresetsPartialUpdateResponse parses an HTTP response from a EngagementPresetsPartialUpdateWithResponse call
func ParseEngagementPresetsPartialUpdateResponse(rsp *http.Response) (*EngagementPresetsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EngagementPresetsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EngagementPresets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEngagementPresetsUpdateResponse parses an HTTP response from a EngagementPresetsUpdateWithResponse call
func ParseEngagementPresetsUpdateResponse(rsp *http.Response) (*EngagementPresetsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EngagementPresetsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EngagementPresets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEngagementsListResponse parses an HTTP response from a EngagementsListWithResponse call
func ParseEngagementsListResponse(rsp *http.Response) (*EngagementsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EngagementsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedEngagementList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEngagementsCreateResponse parses an HTTP response from a EngagementsCreateWithResponse call
func ParseEngagementsCreateResponse(rsp *http.Response) (*EngagementsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EngagementsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Engagement
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseEngagementsDestroyResponse parses an HTTP response from a EngagementsDestroyWithResponse call
func ParseEngagementsDestroyResponse(rsp *http.Response) (*EngagementsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EngagementsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEngagementsRetrieveResponse parses an HTTP response from a EngagementsRetrieveWithResponse call
func ParseEngagementsRetrieveResponse(rsp *http.Response) (*EngagementsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EngagementsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Engagement
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEngagementsPartialUpdateResponse parses an HTTP response from a EngagementsPartialUpdateWithResponse call
func ParseEngagementsPartialUpdateResponse(rsp *http.Response) (*EngagementsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EngagementsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Engagement
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEngagementsUpdateResponse parses an HTTP response from a EngagementsUpdateWithResponse call
func ParseEngagementsUpdateResponse(rsp *http.Response) (*EngagementsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EngagementsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Engagement
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEngagementsAcceptRisksCreateResponse parses an HTTP response from a EngagementsAcceptRisksCreateWithResponse call
func ParseEngagementsAcceptRisksCreateResponse(rsp *http.Response) (*EngagementsAcceptRisksCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EngagementsAcceptRisksCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []RiskAcceptance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseEngagementsCloseCreateResponse parses an HTTP response from a EngagementsCloseCreateWithResponse call
func ParseEngagementsCloseCreateResponse(rsp *http.Response) (*EngagementsCloseCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EngagementsCloseCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEngagementsFilesRetrieveResponse parses an HTTP response from a EngagementsFilesRetrieveWithResponse call
func ParseEngagementsFilesRetrieveResponse(rsp *http.Response) (*EngagementsFilesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EngagementsFilesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EngagementToFiles
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEngagementsFilesCreateResponse parses an HTTP response from a EngagementsFilesCreateWithResponse call
func ParseEngagementsFilesCreateResponse(rsp *http.Response) (*EngagementsFilesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EngagementsFilesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest File
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseEngagementsGenerateReportCreateResponse parses an HTTP response from a EngagementsGenerateReportCreateWithResponse call
func ParseEngagementsGenerateReportCreateResponse(rsp *http.Response) (*EngagementsGenerateReportCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EngagementsGenerateReportCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReportGenerate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEngagementsNotesRetrieveResponse parses an HTTP response from a EngagementsNotesRetrieveWithResponse call
func ParseEngagementsNotesRetrieveResponse(rsp *http.Response) (*EngagementsNotesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EngagementsNotesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EngagementToNotes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEngagementsNotesCreateResponse parses an HTTP response from a EngagementsNotesCreateWithResponse call
func ParseEngagementsNotesCreateResponse(rsp *http.Response) (*EngagementsNotesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EngagementsNotesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Note
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseEngagementsReopenCreateResponse parses an HTTP response from a EngagementsReopenCreateWithResponse call
func ParseEngagementsReopenCreateResponse(rsp *http.Response) (*EngagementsReopenCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EngagementsReopenCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFindingTemplatesListResponse parses an HTTP response from a FindingTemplatesListWithResponse call
func ParseFindingTemplatesListResponse(rsp *http.Response) (*FindingTemplatesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingTemplatesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedFindingTemplateList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindingTemplatesCreateResponse parses an HTTP response from a FindingTemplatesCreateWithResponse call
func ParseFindingTemplatesCreateResponse(rsp *http.Response) (*FindingTemplatesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingTemplatesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest FindingTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseFindingTemplatesDestroyResponse parses an HTTP response from a FindingTemplatesDestroyWithResponse call
func ParseFindingTemplatesDestroyResponse(rsp *http.Response) (*FindingTemplatesDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingTemplatesDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFindingTemplatesRetrieveResponse parses an HTTP response from a FindingTemplatesRetrieveWithResponse call
func ParseFindingTemplatesRetrieveResponse(rsp *http.Response) (*FindingTemplatesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingTemplatesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FindingTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindingTemplatesPartialUpdateResponse parses an HTTP response from a FindingTemplatesPartialUpdateWithResponse call
func ParseFindingTemplatesPartialUpdateResponse(rsp *http.Response) (*FindingTemplatesPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingTemplatesPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FindingTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindingTemplatesUpdateResponse parses an HTTP response from a FindingTemplatesUpdateWithResponse call
func ParseFindingTemplatesUpdateResponse(rsp *http.Response) (*FindingTemplatesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingTemplatesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FindingTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindingsListResponse parses an HTTP response from a FindingsListWithResponse call
func ParseFindingsListResponse(rsp *http.Response) (*FindingsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedFindingList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindingsCreateResponse parses an HTTP response from a FindingsCreateWithResponse call
func ParseFindingsCreateResponse(rsp *http.Response) (*FindingsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest FindingCreate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseFindingsAcceptRisksCreateResponse parses an HTTP response from a FindingsAcceptRisksCreateWithResponse call
func ParseFindingsAcceptRisksCreateResponse(rsp *http.Response) (*FindingsAcceptRisksCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsAcceptRisksCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PaginatedRiskAcceptanceList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseFindingsGenerateReportCreateResponse parses an HTTP response from a FindingsGenerateReportCreateWithResponse call
func ParseFindingsGenerateReportCreateResponse(rsp *http.Response) (*FindingsGenerateReportCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsGenerateReportCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReportGenerate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindingsDestroyResponse parses an HTTP response from a FindingsDestroyWithResponse call
func ParseFindingsDestroyResponse(rsp *http.Response) (*FindingsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFindingsRetrieveResponse parses an HTTP response from a FindingsRetrieveWithResponse call
func ParseFindingsRetrieveResponse(rsp *http.Response) (*FindingsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Finding
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindingsPartialUpdateResponse parses an HTTP response from a FindingsPartialUpdateWithResponse call
func ParseFindingsPartialUpdateResponse(rsp *http.Response) (*FindingsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Finding
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindingsUpdateResponse parses an HTTP response from a FindingsUpdateWithResponse call
func ParseFindingsUpdateResponse(rsp *http.Response) (*FindingsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Finding
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindingsDuplicateListResponse parses an HTTP response from a FindingsDuplicateListWithResponse call
func ParseFindingsDuplicateListResponse(rsp *http.Response) (*FindingsDuplicateListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsDuplicateListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Finding
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindingsDuplicateResetCreateResponse parses an HTTP response from a FindingsDuplicateResetCreateWithResponse call
func ParseFindingsDuplicateResetCreateResponse(rsp *http.Response) (*FindingsDuplicateResetCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsDuplicateResetCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFindingsFilesRetrieveResponse parses an HTTP response from a FindingsFilesRetrieveWithResponse call
func ParseFindingsFilesRetrieveResponse(rsp *http.Response) (*FindingsFilesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsFilesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FindingToFiles
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindingsFilesCreateResponse parses an HTTP response from a FindingsFilesCreateWithResponse call
func ParseFindingsFilesCreateResponse(rsp *http.Response) (*FindingsFilesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsFilesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest File
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseFindingsMetadataDestroyResponse parses an HTTP response from a FindingsMetadataDestroyWithResponse call
func ParseFindingsMetadataDestroyResponse(rsp *http.Response) (*FindingsMetadataDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsMetadataDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFindingsMetadataListResponse parses an HTTP response from a FindingsMetadataListWithResponse call
func ParseFindingsMetadataListResponse(rsp *http.Response) (*FindingsMetadataListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsMetadataListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FindingMeta
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindingsMetadataCreateResponse parses an HTTP response from a FindingsMetadataCreateWithResponse call
func ParseFindingsMetadataCreateResponse(rsp *http.Response) (*FindingsMetadataCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsMetadataCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FindingMeta
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindingsMetadataUpdateResponse parses an HTTP response from a FindingsMetadataUpdateWithResponse call
func ParseFindingsMetadataUpdateResponse(rsp *http.Response) (*FindingsMetadataUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsMetadataUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FindingMeta
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindingsNotesRetrieveResponse parses an HTTP response from a FindingsNotesRetrieveWithResponse call
func ParseFindingsNotesRetrieveResponse(rsp *http.Response) (*FindingsNotesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsNotesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FindingToNotes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindingsNotesCreateResponse parses an HTTP response from a FindingsNotesCreateWithResponse call
func ParseFindingsNotesCreateResponse(rsp *http.Response) (*FindingsNotesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsNotesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Note
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseFindingsOriginalCreateResponse parses an HTTP response from a FindingsOriginalCreateWithResponse call
func ParseFindingsOriginalCreateResponse(rsp *http.Response) (*FindingsOriginalCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsOriginalCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFindingsRemoveNotePartialUpdateResponse parses an HTTP response from a FindingsRemoveNotePartialUpdateWithResponse call
func ParseFindingsRemoveNotePartialUpdateResponse(rsp *http.Response) (*FindingsRemoveNotePartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsRemoveNotePartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFindingsRemoveTagsPartialUpdateResponse parses an HTTP response from a FindingsRemoveTagsPartialUpdateWithResponse call
func ParseFindingsRemoveTagsPartialUpdateResponse(rsp *http.Response) (*FindingsRemoveTagsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsRemoveTagsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFindingsRemoveTagsUpdateResponse parses an HTTP response from a FindingsRemoveTagsUpdateWithResponse call
func ParseFindingsRemoveTagsUpdateResponse(rsp *http.Response) (*FindingsRemoveTagsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsRemoveTagsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFindingsRequestResponseRetrieveResponse parses an HTTP response from a FindingsRequestResponseRetrieveWithResponse call
func ParseFindingsRequestResponseRetrieveResponse(rsp *http.Response) (*FindingsRequestResponseRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsRequestResponseRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BurpRawRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindingsRequestResponseCreateResponse parses an HTTP response from a FindingsRequestResponseCreateWithResponse call
func ParseFindingsRequestResponseCreateResponse(rsp *http.Response) (*FindingsRequestResponseCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsRequestResponseCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BurpRawRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseFindingsTagsRetrieveResponse parses an HTTP response from a FindingsTagsRetrieveWithResponse call
func ParseFindingsTagsRetrieveResponse(rsp *http.Response) (*FindingsTagsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsTagsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Tag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindingsTagsCreateResponse parses an HTTP response from a FindingsTagsCreateWithResponse call
func ParseFindingsTagsCreateResponse(rsp *http.Response) (*FindingsTagsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsTagsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Tag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGlobalRolesListResponse parses an HTTP response from a GlobalRolesListWithResponse call
func ParseGlobalRolesListResponse(rsp *http.Response) (*GlobalRolesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GlobalRolesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedGlobalRoleList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGlobalRolesCreateResponse parses an HTTP response from a GlobalRolesCreateWithResponse call
func ParseGlobalRolesCreateResponse(rsp *http.Response) (*GlobalRolesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GlobalRolesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest GlobalRole
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGlobalRolesDestroyResponse parses an HTTP response from a GlobalRolesDestroyWithResponse call
func ParseGlobalRolesDestroyResponse(rsp *http.Response) (*GlobalRolesDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GlobalRolesDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGlobalRolesRetrieveResponse parses an HTTP response from a GlobalRolesRetrieveWithResponse call
func ParseGlobalRolesRetrieveResponse(rsp *http.Response) (*GlobalRolesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GlobalRolesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GlobalRole
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGlobalRolesPartialUpdateResponse parses an HTTP response from a GlobalRolesPartialUpdateWithResponse call
func ParseGlobalRolesPartialUpdateResponse(rsp *http.Response) (*GlobalRolesPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GlobalRolesPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GlobalRole
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGlobalRolesUpdateResponse parses an HTTP response from a GlobalRolesUpdateWithResponse call
func ParseGlobalRolesUpdateResponse(rsp *http.Response) (*GlobalRolesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GlobalRolesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GlobalRole
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseImportLanguagesCreateResponse parses an HTTP response from a ImportLanguagesCreateWithResponse call
func ParseImportLanguagesCreateResponse(rsp *http.Response) (*ImportLanguagesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ImportLanguagesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ImportLanguages
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseImportScanCreateResponse parses an HTTP response from a ImportScanCreateWithResponse call
func ParseImportScanCreateResponse(rsp *http.Response) (*ImportScanCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ImportScanCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ImportScan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseJiraConfigurationsListResponse parses an HTTP response from a JiraConfigurationsListWithResponse call
func ParseJiraConfigurationsListResponse(rsp *http.Response) (*JiraConfigurationsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraConfigurationsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedJIRAInstanceList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseJiraConfigurationsCreateResponse parses an HTTP response from a JiraConfigurationsCreateWithResponse call
func ParseJiraConfigurationsCreateResponse(rsp *http.Response) (*JiraConfigurationsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraConfigurationsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest JIRAInstance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseJiraConfigurationsDestroyResponse parses an HTTP response from a JiraConfigurationsDestroyWithResponse call
func ParseJiraConfigurationsDestroyResponse(rsp *http.Response) (*JiraConfigurationsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraConfigurationsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseJiraConfigurationsRetrieveResponse parses an HTTP response from a JiraConfigurationsRetrieveWithResponse call
func ParseJiraConfigurationsRetrieveResponse(rsp *http.Response) (*JiraConfigurationsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraConfigurationsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JIRAInstance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseJiraConfigurationsPartialUpdateResponse parses an HTTP response from a JiraConfigurationsPartialUpdateWithResponse call
func ParseJiraConfigurationsPartialUpdateResponse(rsp *http.Response) (*JiraConfigurationsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraConfigurationsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JIRAInstance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseJiraConfigurationsUpdateResponse parses an HTTP response from a JiraConfigurationsUpdateWithResponse call
func ParseJiraConfigurationsUpdateResponse(rsp *http.Response) (*JiraConfigurationsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraConfigurationsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JIRAInstance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseJiraFindingMappingsListResponse parses an HTTP response from a JiraFindingMappingsListWithResponse call
func ParseJiraFindingMappingsListResponse(rsp *http.Response) (*JiraFindingMappingsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraFindingMappingsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedJIRAIssueList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseJiraFindingMappingsCreateResponse parses an HTTP response from a JiraFindingMappingsCreateWithResponse call
func ParseJiraFindingMappingsCreateResponse(rsp *http.Response) (*JiraFindingMappingsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraFindingMappingsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest JIRAIssue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseJiraFindingMappingsDestroyResponse parses an HTTP response from a JiraFindingMappingsDestroyWithResponse call
func ParseJiraFindingMappingsDestroyResponse(rsp *http.Response) (*JiraFindingMappingsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraFindingMappingsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseJiraFindingMappingsRetrieveResponse parses an HTTP response from a JiraFindingMappingsRetrieveWithResponse call
func ParseJiraFindingMappingsRetrieveResponse(rsp *http.Response) (*JiraFindingMappingsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraFindingMappingsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JIRAIssue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseJiraFindingMappingsPartialUpdateResponse parses an HTTP response from a JiraFindingMappingsPartialUpdateWithResponse call
func ParseJiraFindingMappingsPartialUpdateResponse(rsp *http.Response) (*JiraFindingMappingsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraFindingMappingsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JIRAIssue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseJiraFindingMappingsUpdateResponse parses an HTTP response from a JiraFindingMappingsUpdateWithResponse call
func ParseJiraFindingMappingsUpdateResponse(rsp *http.Response) (*JiraFindingMappingsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraFindingMappingsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JIRAIssue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseJiraInstancesListResponse parses an HTTP response from a JiraInstancesListWithResponse call
func ParseJiraInstancesListResponse(rsp *http.Response) (*JiraInstancesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraInstancesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedJIRAInstanceList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseJiraInstancesCreateResponse parses an HTTP response from a JiraInstancesCreateWithResponse call
func ParseJiraInstancesCreateResponse(rsp *http.Response) (*JiraInstancesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraInstancesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest JIRAInstance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseJiraInstancesDestroyResponse parses an HTTP response from a JiraInstancesDestroyWithResponse call
func ParseJiraInstancesDestroyResponse(rsp *http.Response) (*JiraInstancesDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraInstancesDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseJiraInstancesRetrieveResponse parses an HTTP response from a JiraInstancesRetrieveWithResponse call
func ParseJiraInstancesRetrieveResponse(rsp *http.Response) (*JiraInstancesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraInstancesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JIRAInstance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseJiraInstancesPartialUpdateResponse parses an HTTP response from a JiraInstancesPartialUpdateWithResponse call
func ParseJiraInstancesPartialUpdateResponse(rsp *http.Response) (*JiraInstancesPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraInstancesPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JIRAInstance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseJiraInstancesUpdateResponse parses an HTTP response from a JiraInstancesUpdateWithResponse call
func ParseJiraInstancesUpdateResponse(rsp *http.Response) (*JiraInstancesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraInstancesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JIRAInstance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseJiraProductConfigurationsListResponse parses an HTTP response from a JiraProductConfigurationsListWithResponse call
func ParseJiraProductConfigurationsListResponse(rsp *http.Response) (*JiraProductConfigurationsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraProductConfigurationsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedJIRAProjectList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseJiraProductConfigurationsCreateResponse parses an HTTP response from a JiraProductConfigurationsCreateWithResponse call
func ParseJiraProductConfigurationsCreateResponse(rsp *http.Response) (*JiraProductConfigurationsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraProductConfigurationsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest JIRAProject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseJiraProductConfigurationsDestroyResponse parses an HTTP response from a JiraProductConfigurationsDestroyWithResponse call
func ParseJiraProductConfigurationsDestroyResponse(rsp *http.Response) (*JiraProductConfigurationsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraProductConfigurationsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseJiraProductConfigurationsRetrieveResponse parses an HTTP response from a JiraProductConfigurationsRetrieveWithResponse call
func ParseJiraProductConfigurationsRetrieveResponse(rsp *http.Response) (*JiraProductConfigurationsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraProductConfigurationsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JIRAProject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseJiraProductConfigurationsPartialUpdateResponse parses an HTTP response from a JiraProductConfigurationsPartialUpdateWithResponse call
func ParseJiraProductConfigurationsPartialUpdateResponse(rsp *http.Response) (*JiraProductConfigurationsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraProductConfigurationsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JIRAProject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseJiraProductConfigurationsUpdateResponse parses an HTTP response from a JiraProductConfigurationsUpdateWithResponse call
func ParseJiraProductConfigurationsUpdateResponse(rsp *http.Response) (*JiraProductConfigurationsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraProductConfigurationsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JIRAProject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseJiraProjectsListResponse parses an HTTP response from a JiraProjectsListWithResponse call
func ParseJiraProjectsListResponse(rsp *http.Response) (*JiraProjectsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraProjectsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedJIRAProjectList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseJiraProjectsCreateResponse parses an HTTP response from a JiraProjectsCreateWithResponse call
func ParseJiraProjectsCreateResponse(rsp *http.Response) (*JiraProjectsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraProjectsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest JIRAProject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseJiraProjectsDestroyResponse parses an HTTP response from a JiraProjectsDestroyWithResponse call
func ParseJiraProjectsDestroyResponse(rsp *http.Response) (*JiraProjectsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraProjectsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseJiraProjectsRetrieveResponse parses an HTTP response from a JiraProjectsRetrieveWithResponse call
func ParseJiraProjectsRetrieveResponse(rsp *http.Response) (*JiraProjectsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraProjectsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JIRAProject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseJiraProjectsPartialUpdateResponse parses an HTTP response from a JiraProjectsPartialUpdateWithResponse call
func ParseJiraProjectsPartialUpdateResponse(rsp *http.Response) (*JiraProjectsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraProjectsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JIRAProject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseJiraProjectsUpdateResponse parses an HTTP response from a JiraProjectsUpdateWithResponse call
func ParseJiraProjectsUpdateResponse(rsp *http.Response) (*JiraProjectsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraProjectsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JIRAProject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLanguageTypesListResponse parses an HTTP response from a LanguageTypesListWithResponse call
func ParseLanguageTypesListResponse(rsp *http.Response) (*LanguageTypesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LanguageTypesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedLanguageTypeList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLanguageTypesCreateResponse parses an HTTP response from a LanguageTypesCreateWithResponse call
func ParseLanguageTypesCreateResponse(rsp *http.Response) (*LanguageTypesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LanguageTypesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest LanguageType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseLanguageTypesDestroyResponse parses an HTTP response from a LanguageTypesDestroyWithResponse call
func ParseLanguageTypesDestroyResponse(rsp *http.Response) (*LanguageTypesDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LanguageTypesDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseLanguageTypesRetrieveResponse parses an HTTP response from a LanguageTypesRetrieveWithResponse call
func ParseLanguageTypesRetrieveResponse(rsp *http.Response) (*LanguageTypesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LanguageTypesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LanguageType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLanguageTypesPartialUpdateResponse parses an HTTP response from a LanguageTypesPartialUpdateWithResponse call
func ParseLanguageTypesPartialUpdateResponse(rsp *http.Response) (*LanguageTypesPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LanguageTypesPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LanguageType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLanguageTypesUpdateResponse parses an HTTP response from a LanguageTypesUpdateWithResponse call
func ParseLanguageTypesUpdateResponse(rsp *http.Response) (*LanguageTypesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LanguageTypesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LanguageType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLanguagesListResponse parses an HTTP response from a LanguagesListWithResponse call
func ParseLanguagesListResponse(rsp *http.Response) (*LanguagesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LanguagesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedLanguageList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLanguagesCreateResponse parses an HTTP response from a LanguagesCreateWithResponse call
func ParseLanguagesCreateResponse(rsp *http.Response) (*LanguagesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LanguagesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Language
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseLanguagesDestroyResponse parses an HTTP response from a LanguagesDestroyWithResponse call
func ParseLanguagesDestroyResponse(rsp *http.Response) (*LanguagesDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LanguagesDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseLanguagesRetrieveResponse parses an HTTP response from a LanguagesRetrieveWithResponse call
func ParseLanguagesRetrieveResponse(rsp *http.Response) (*LanguagesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LanguagesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Language
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLanguagesPartialUpdateResponse parses an HTTP response from a LanguagesPartialUpdateWithResponse call
func ParseLanguagesPartialUpdateResponse(rsp *http.Response) (*LanguagesPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LanguagesPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Language
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLanguagesUpdateResponse parses an HTTP response from a LanguagesUpdateWithResponse call
func ParseLanguagesUpdateResponse(rsp *http.Response) (*LanguagesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LanguagesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Language
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMetadataListResponse parses an HTTP response from a MetadataListWithResponse call
func ParseMetadataListResponse(rsp *http.Response) (*MetadataListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MetadataListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedMetaList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMetadataCreateResponse parses an HTTP response from a MetadataCreateWithResponse call
func ParseMetadataCreateResponse(rsp *http.Response) (*MetadataCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MetadataCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Meta
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseMetadataDestroyResponse parses an HTTP response from a MetadataDestroyWithResponse call
func ParseMetadataDestroyResponse(rsp *http.Response) (*MetadataDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MetadataDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseMetadataRetrieveResponse parses an HTTP response from a MetadataRetrieveWithResponse call
func ParseMetadataRetrieveResponse(rsp *http.Response) (*MetadataRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MetadataRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Meta
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMetadataPartialUpdateResponse parses an HTTP response from a MetadataPartialUpdateWithResponse call
func ParseMetadataPartialUpdateResponse(rsp *http.Response) (*MetadataPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MetadataPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Meta
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMetadataUpdateResponse parses an HTTP response from a MetadataUpdateWithResponse call
func ParseMetadataUpdateResponse(rsp *http.Response) (*MetadataUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MetadataUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Meta
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNetworkLocationsListResponse parses an HTTP response from a NetworkLocationsListWithResponse call
func ParseNetworkLocationsListResponse(rsp *http.Response) (*NetworkLocationsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkLocationsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedNetworkLocationsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNetworkLocationsCreateResponse parses an HTTP response from a NetworkLocationsCreateWithResponse call
func ParseNetworkLocationsCreateResponse(rsp *http.Response) (*NetworkLocationsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkLocationsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest NetworkLocations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseNetworkLocationsDestroyResponse parses an HTTP response from a NetworkLocationsDestroyWithResponse call
func ParseNetworkLocationsDestroyResponse(rsp *http.Response) (*NetworkLocationsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkLocationsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseNetworkLocationsRetrieveResponse parses an HTTP response from a NetworkLocationsRetrieveWithResponse call
func ParseNetworkLocationsRetrieveResponse(rsp *http.Response) (*NetworkLocationsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkLocationsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkLocations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNetworkLocationsPartialUpdateResponse parses an HTTP response from a NetworkLocationsPartialUpdateWithResponse call
func ParseNetworkLocationsPartialUpdateResponse(rsp *http.Response) (*NetworkLocationsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkLocationsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkLocations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNetworkLocationsUpdateResponse parses an HTTP response from a NetworkLocationsUpdateWithResponse call
func ParseNetworkLocationsUpdateResponse(rsp *http.Response) (*NetworkLocationsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkLocationsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkLocations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNoteTypeListResponse parses an HTTP response from a NoteTypeListWithResponse call
func ParseNoteTypeListResponse(rsp *http.Response) (*NoteTypeListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NoteTypeListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedNoteTypeList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNoteTypeCreateResponse parses an HTTP response from a NoteTypeCreateWithResponse call
func ParseNoteTypeCreateResponse(rsp *http.Response) (*NoteTypeCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NoteTypeCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest NoteType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseNoteTypeDestroyResponse parses an HTTP response from a NoteTypeDestroyWithResponse call
func ParseNoteTypeDestroyResponse(rsp *http.Response) (*NoteTypeDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NoteTypeDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseNoteTypeRetrieveResponse parses an HTTP response from a NoteTypeRetrieveWithResponse call
func ParseNoteTypeRetrieveResponse(rsp *http.Response) (*NoteTypeRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NoteTypeRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NoteType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNoteTypePartialUpdateResponse parses an HTTP response from a NoteTypePartialUpdateWithResponse call
func ParseNoteTypePartialUpdateResponse(rsp *http.Response) (*NoteTypePartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NoteTypePartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NoteType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNoteTypeUpdateResponse parses an HTTP response from a NoteTypeUpdateWithResponse call
func ParseNoteTypeUpdateResponse(rsp *http.Response) (*NoteTypeUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NoteTypeUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NoteType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNotesListResponse parses an HTTP response from a NotesListWithResponse call
func ParseNotesListResponse(rsp *http.Response) (*NotesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NotesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedNoteList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNotesRetrieveResponse parses an HTTP response from a NotesRetrieveWithResponse call
func ParseNotesRetrieveResponse(rsp *http.Response) (*NotesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NotesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Note
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNotesPartialUpdateResponse parses an HTTP response from a NotesPartialUpdateWithResponse call
func ParseNotesPartialUpdateResponse(rsp *http.Response) (*NotesPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NotesPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Note
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNotesUpdateResponse parses an HTTP response from a NotesUpdateWithResponse call
func ParseNotesUpdateResponse(rsp *http.Response) (*NotesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NotesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Note
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNotificationsListResponse parses an HTTP response from a NotificationsListWithResponse call
func ParseNotificationsListResponse(rsp *http.Response) (*NotificationsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NotificationsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedNotificationsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNotificationsCreateResponse parses an HTTP response from a NotificationsCreateWithResponse call
func ParseNotificationsCreateResponse(rsp *http.Response) (*NotificationsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NotificationsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Notifications
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseNotificationsDestroyResponse parses an HTTP response from a NotificationsDestroyWithResponse call
func ParseNotificationsDestroyResponse(rsp *http.Response) (*NotificationsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NotificationsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseNotificationsRetrieveResponse parses an HTTP response from a NotificationsRetrieveWithResponse call
func ParseNotificationsRetrieveResponse(rsp *http.Response) (*NotificationsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NotificationsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Notifications
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNotificationsPartialUpdateResponse parses an HTTP response from a NotificationsPartialUpdateWithResponse call
func ParseNotificationsPartialUpdateResponse(rsp *http.Response) (*NotificationsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NotificationsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Notifications
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNotificationsUpdateResponse parses an HTTP response from a NotificationsUpdateWithResponse call
func ParseNotificationsUpdateResponse(rsp *http.Response) (*NotificationsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NotificationsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Notifications
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOa3SchemaRetrieveResponse parses an HTTP response from a Oa3SchemaRetrieveWithResponse call
func ParseOa3SchemaRetrieveResponse(rsp *http.Response) (*Oa3SchemaRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Oa3SchemaRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndOaiOpenapiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (application/vnd.oai.openapi) unsupported

	}

	return response, nil
}

// ParseProductApiScanConfigurationsListResponse parses an HTTP response from a ProductApiScanConfigurationsListWithResponse call
func ParseProductApiScanConfigurationsListResponse(rsp *http.Response) (*ProductApiScanConfigurationsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductApiScanConfigurationsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedProductAPIScanConfigurationList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductApiScanConfigurationsCreateResponse parses an HTTP response from a ProductApiScanConfigurationsCreateWithResponse call
func ParseProductApiScanConfigurationsCreateResponse(rsp *http.Response) (*ProductApiScanConfigurationsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductApiScanConfigurationsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ProductAPIScanConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseProductApiScanConfigurationsDestroyResponse parses an HTTP response from a ProductApiScanConfigurationsDestroyWithResponse call
func ParseProductApiScanConfigurationsDestroyResponse(rsp *http.Response) (*ProductApiScanConfigurationsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductApiScanConfigurationsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseProductApiScanConfigurationsRetrieveResponse parses an HTTP response from a ProductApiScanConfigurationsRetrieveWithResponse call
func ParseProductApiScanConfigurationsRetrieveResponse(rsp *http.Response) (*ProductApiScanConfigurationsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductApiScanConfigurationsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductAPIScanConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductApiScanConfigurationsPartialUpdateResponse parses an HTTP response from a ProductApiScanConfigurationsPartialUpdateWithResponse call
func ParseProductApiScanConfigurationsPartialUpdateResponse(rsp *http.Response) (*ProductApiScanConfigurationsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductApiScanConfigurationsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductAPIScanConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductApiScanConfigurationsUpdateResponse parses an HTTP response from a ProductApiScanConfigurationsUpdateWithResponse call
func ParseProductApiScanConfigurationsUpdateResponse(rsp *http.Response) (*ProductApiScanConfigurationsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductApiScanConfigurationsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductAPIScanConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductGroupsListResponse parses an HTTP response from a ProductGroupsListWithResponse call
func ParseProductGroupsListResponse(rsp *http.Response) (*ProductGroupsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductGroupsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedProductGroupList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductGroupsCreateResponse parses an HTTP response from a ProductGroupsCreateWithResponse call
func ParseProductGroupsCreateResponse(rsp *http.Response) (*ProductGroupsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductGroupsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ProductGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseProductGroupsDestroyResponse parses an HTTP response from a ProductGroupsDestroyWithResponse call
func ParseProductGroupsDestroyResponse(rsp *http.Response) (*ProductGroupsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductGroupsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseProductGroupsRetrieveResponse parses an HTTP response from a ProductGroupsRetrieveWithResponse call
func ParseProductGroupsRetrieveResponse(rsp *http.Response) (*ProductGroupsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductGroupsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductGroupsPartialUpdateResponse parses an HTTP response from a ProductGroupsPartialUpdateWithResponse call
func ParseProductGroupsPartialUpdateResponse(rsp *http.Response) (*ProductGroupsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductGroupsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseProductGroupsUpdateResponse parses an HTTP response from a ProductGroupsUpdateWithResponse call
func ParseProductGroupsUpdateResponse(rsp *http.Response) (*ProductGroupsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductGroupsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductMembersListResponse parses an HTTP response from a ProductMembersListWithResponse call
func ParseProductMembersListResponse(rsp *http.Response) (*ProductMembersListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductMembersListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedProductMemberList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductMembersCreateResponse parses an HTTP response from a ProductMembersCreateWithResponse call
func ParseProductMembersCreateResponse(rsp *http.Response) (*ProductMembersCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductMembersCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ProductMember
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseProductMembersDestroyResponse parses an HTTP response from a ProductMembersDestroyWithResponse call
func ParseProductMembersDestroyResponse(rsp *http.Response) (*ProductMembersDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductMembersDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseProductMembersRetrieveResponse parses an HTTP response from a ProductMembersRetrieveWithResponse call
func ParseProductMembersRetrieveResponse(rsp *http.Response) (*ProductMembersRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductMembersRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductMember
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductMembersPartialUpdateResponse parses an HTTP response from a ProductMembersPartialUpdateWithResponse call
func ParseProductMembersPartialUpdateResponse(rsp *http.Response) (*ProductMembersPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductMembersPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseProductMembersUpdateResponse parses an HTTP response from a ProductMembersUpdateWithResponse call
func ParseProductMembersUpdateResponse(rsp *http.Response) (*ProductMembersUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductMembersUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductMember
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductTypeGroupsListResponse parses an HTTP response from a ProductTypeGroupsListWithResponse call
func ParseProductTypeGroupsListResponse(rsp *http.Response) (*ProductTypeGroupsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductTypeGroupsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedProductTypeGroupList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductTypeGroupsCreateResponse parses an HTTP response from a ProductTypeGroupsCreateWithResponse call
func ParseProductTypeGroupsCreateResponse(rsp *http.Response) (*ProductTypeGroupsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductTypeGroupsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ProductTypeGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseProductTypeGroupsDestroyResponse parses an HTTP response from a ProductTypeGroupsDestroyWithResponse call
func ParseProductTypeGroupsDestroyResponse(rsp *http.Response) (*ProductTypeGroupsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductTypeGroupsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseProductTypeGroupsRetrieveResponse parses an HTTP response from a ProductTypeGroupsRetrieveWithResponse call
func ParseProductTypeGroupsRetrieveResponse(rsp *http.Response) (*ProductTypeGroupsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductTypeGroupsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductTypeGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductTypeGroupsPartialUpdateResponse parses an HTTP response from a ProductTypeGroupsPartialUpdateWithResponse call
func ParseProductTypeGroupsPartialUpdateResponse(rsp *http.Response) (*ProductTypeGroupsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductTypeGroupsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseProductTypeGroupsUpdateResponse parses an HTTP response from a ProductTypeGroupsUpdateWithResponse call
func ParseProductTypeGroupsUpdateResponse(rsp *http.Response) (*ProductTypeGroupsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductTypeGroupsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductTypeGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductTypeMembersListResponse parses an HTTP response from a ProductTypeMembersListWithResponse call
func ParseProductTypeMembersListResponse(rsp *http.Response) (*ProductTypeMembersListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductTypeMembersListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedProductTypeMemberList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductTypeMembersCreateResponse parses an HTTP response from a ProductTypeMembersCreateWithResponse call
func ParseProductTypeMembersCreateResponse(rsp *http.Response) (*ProductTypeMembersCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductTypeMembersCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ProductTypeMember
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseProductTypeMembersDestroyResponse parses an HTTP response from a ProductTypeMembersDestroyWithResponse call
func ParseProductTypeMembersDestroyResponse(rsp *http.Response) (*ProductTypeMembersDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductTypeMembersDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseProductTypeMembersRetrieveResponse parses an HTTP response from a ProductTypeMembersRetrieveWithResponse call
func ParseProductTypeMembersRetrieveResponse(rsp *http.Response) (*ProductTypeMembersRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductTypeMembersRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductTypeMember
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductTypeMembersPartialUpdateResponse parses an HTTP response from a ProductTypeMembersPartialUpdateWithResponse call
func ParseProductTypeMembersPartialUpdateResponse(rsp *http.Response) (*ProductTypeMembersPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductTypeMembersPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseProductTypeMembersUpdateResponse parses an HTTP response from a ProductTypeMembersUpdateWithResponse call
func ParseProductTypeMembersUpdateResponse(rsp *http.Response) (*ProductTypeMembersUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductTypeMembersUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductTypeMember
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductTypesListResponse parses an HTTP response from a ProductTypesListWithResponse call
func ParseProductTypesListResponse(rsp *http.Response) (*ProductTypesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductTypesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedProductTypeList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductTypesCreateResponse parses an HTTP response from a ProductTypesCreateWithResponse call
func ParseProductTypesCreateResponse(rsp *http.Response) (*ProductTypesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductTypesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ProductType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseProductTypesDestroyResponse parses an HTTP response from a ProductTypesDestroyWithResponse call
func ParseProductTypesDestroyResponse(rsp *http.Response) (*ProductTypesDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductTypesDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseProductTypesRetrieveResponse parses an HTTP response from a ProductTypesRetrieveWithResponse call
func ParseProductTypesRetrieveResponse(rsp *http.Response) (*ProductTypesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductTypesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductTypesPartialUpdateResponse parses an HTTP response from a ProductTypesPartialUpdateWithResponse call
func ParseProductTypesPartialUpdateResponse(rsp *http.Response) (*ProductTypesPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductTypesPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductTypesUpdateResponse parses an HTTP response from a ProductTypesUpdateWithResponse call
func ParseProductTypesUpdateResponse(rsp *http.Response) (*ProductTypesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductTypesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductTypesGenerateReportCreateResponse parses an HTTP response from a ProductTypesGenerateReportCreateWithResponse call
func ParseProductTypesGenerateReportCreateResponse(rsp *http.Response) (*ProductTypesGenerateReportCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductTypesGenerateReportCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReportGenerate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductsListResponse parses an HTTP response from a ProductsListWithResponse call
func ParseProductsListResponse(rsp *http.Response) (*ProductsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedProductList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductsCreateResponse parses an HTTP response from a ProductsCreateWithResponse call
func ParseProductsCreateResponse(rsp *http.Response) (*ProductsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Product
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseProductsDestroyResponse parses an HTTP response from a ProductsDestroyWithResponse call
func ParseProductsDestroyResponse(rsp *http.Response) (*ProductsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseProductsRetrieveResponse parses an HTTP response from a ProductsRetrieveWithResponse call
func ParseProductsRetrieveResponse(rsp *http.Response) (*ProductsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Product
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductsPartialUpdateResponse parses an HTTP response from a ProductsPartialUpdateWithResponse call
func ParseProductsPartialUpdateResponse(rsp *http.Response) (*ProductsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Product
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductsUpdateResponse parses an HTTP response from a ProductsUpdateWithResponse call
func ParseProductsUpdateResponse(rsp *http.Response) (*ProductsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Product
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductsGenerateReportCreateResponse parses an HTTP response from a ProductsGenerateReportCreateWithResponse call
func ParseProductsGenerateReportCreateResponse(rsp *http.Response) (*ProductsGenerateReportCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductsGenerateReportCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReportGenerate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRegulationsListResponse parses an HTTP response from a RegulationsListWithResponse call
func ParseRegulationsListResponse(rsp *http.Response) (*RegulationsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegulationsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedRegulationList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRegulationsCreateResponse parses an HTTP response from a RegulationsCreateWithResponse call
func ParseRegulationsCreateResponse(rsp *http.Response) (*RegulationsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegulationsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Regulation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseRegulationsDestroyResponse parses an HTTP response from a RegulationsDestroyWithResponse call
func ParseRegulationsDestroyResponse(rsp *http.Response) (*RegulationsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegulationsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRegulationsRetrieveResponse parses an HTTP response from a RegulationsRetrieveWithResponse call
func ParseRegulationsRetrieveResponse(rsp *http.Response) (*RegulationsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegulationsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Regulation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRegulationsPartialUpdateResponse parses an HTTP response from a RegulationsPartialUpdateWithResponse call
func ParseRegulationsPartialUpdateResponse(rsp *http.Response) (*RegulationsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegulationsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Regulation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRegulationsUpdateResponse parses an HTTP response from a RegulationsUpdateWithResponse call
func ParseRegulationsUpdateResponse(rsp *http.Response) (*RegulationsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegulationsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Regulation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReimportScanCreateResponse parses an HTTP response from a ReimportScanCreateWithResponse call
func ParseReimportScanCreateResponse(rsp *http.Response) (*ReimportScanCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReimportScanCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ReImportScan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseRolesListResponse parses an HTTP response from a RolesListWithResponse call
func ParseRolesListResponse(rsp *http.Response) (*RolesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RolesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedRoleList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRolesRetrieveResponse parses an HTTP response from a RolesRetrieveWithResponse call
func ParseRolesRetrieveResponse(rsp *http.Response) (*RolesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RolesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Role
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSonarqubeIssuesListResponse parses an HTTP response from a SonarqubeIssuesListWithResponse call
func ParseSonarqubeIssuesListResponse(rsp *http.Response) (*SonarqubeIssuesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SonarqubeIssuesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedSonarqubeIssueList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSonarqubeIssuesCreateResponse parses an HTTP response from a SonarqubeIssuesCreateWithResponse call
func ParseSonarqubeIssuesCreateResponse(rsp *http.Response) (*SonarqubeIssuesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SonarqubeIssuesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SonarqubeIssue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseSonarqubeIssuesDestroyResponse parses an HTTP response from a SonarqubeIssuesDestroyWithResponse call
func ParseSonarqubeIssuesDestroyResponse(rsp *http.Response) (*SonarqubeIssuesDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SonarqubeIssuesDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSonarqubeIssuesRetrieveResponse parses an HTTP response from a SonarqubeIssuesRetrieveWithResponse call
func ParseSonarqubeIssuesRetrieveResponse(rsp *http.Response) (*SonarqubeIssuesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SonarqubeIssuesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SonarqubeIssue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSonarqubeIssuesPartialUpdateResponse parses an HTTP response from a SonarqubeIssuesPartialUpdateWithResponse call
func ParseSonarqubeIssuesPartialUpdateResponse(rsp *http.Response) (*SonarqubeIssuesPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SonarqubeIssuesPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SonarqubeIssue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSonarqubeIssuesUpdateResponse parses an HTTP response from a SonarqubeIssuesUpdateWithResponse call
func ParseSonarqubeIssuesUpdateResponse(rsp *http.Response) (*SonarqubeIssuesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SonarqubeIssuesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SonarqubeIssue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSonarqubeTransitionsListResponse parses an HTTP response from a SonarqubeTransitionsListWithResponse call
func ParseSonarqubeTransitionsListResponse(rsp *http.Response) (*SonarqubeTransitionsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SonarqubeTransitionsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedSonarqubeIssueTransitionList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSonarqubeTransitionsCreateResponse parses an HTTP response from a SonarqubeTransitionsCreateWithResponse call
func ParseSonarqubeTransitionsCreateResponse(rsp *http.Response) (*SonarqubeTransitionsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SonarqubeTransitionsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SonarqubeIssueTransition
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseSonarqubeTransitionsDestroyResponse parses an HTTP response from a SonarqubeTransitionsDestroyWithResponse call
func ParseSonarqubeTransitionsDestroyResponse(rsp *http.Response) (*SonarqubeTransitionsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SonarqubeTransitionsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSonarqubeTransitionsRetrieveResponse parses an HTTP response from a SonarqubeTransitionsRetrieveWithResponse call
func ParseSonarqubeTransitionsRetrieveResponse(rsp *http.Response) (*SonarqubeTransitionsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SonarqubeTransitionsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SonarqubeIssueTransition
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSonarqubeTransitionsPartialUpdateResponse parses an HTTP response from a SonarqubeTransitionsPartialUpdateWithResponse call
func ParseSonarqubeTransitionsPartialUpdateResponse(rsp *http.Response) (*SonarqubeTransitionsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SonarqubeTransitionsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SonarqubeIssueTransition
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSonarqubeTransitionsUpdateResponse parses an HTTP response from a SonarqubeTransitionsUpdateWithResponse call
func ParseSonarqubeTransitionsUpdateResponse(rsp *http.Response) (*SonarqubeTransitionsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SonarqubeTransitionsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SonarqubeIssueTransition
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseStubFindingsListResponse parses an HTTP response from a StubFindingsListWithResponse call
func ParseStubFindingsListResponse(rsp *http.Response) (*StubFindingsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StubFindingsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedStubFindingList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseStubFindingsCreateResponse parses an HTTP response from a StubFindingsCreateWithResponse call
func ParseStubFindingsCreateResponse(rsp *http.Response) (*StubFindingsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StubFindingsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest StubFindingCreate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseStubFindingsDestroyResponse parses an HTTP response from a StubFindingsDestroyWithResponse call
func ParseStubFindingsDestroyResponse(rsp *http.Response) (*StubFindingsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StubFindingsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseStubFindingsRetrieveResponse parses an HTTP response from a StubFindingsRetrieveWithResponse call
func ParseStubFindingsRetrieveResponse(rsp *http.Response) (*StubFindingsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StubFindingsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StubFinding
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseStubFindingsPartialUpdateResponse parses an HTTP response from a StubFindingsPartialUpdateWithResponse call
func ParseStubFindingsPartialUpdateResponse(rsp *http.Response) (*StubFindingsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StubFindingsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StubFinding
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseStubFindingsUpdateResponse parses an HTTP response from a StubFindingsUpdateWithResponse call
func ParseStubFindingsUpdateResponse(rsp *http.Response) (*StubFindingsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StubFindingsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StubFinding
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSystemSettingsListResponse parses an HTTP response from a SystemSettingsListWithResponse call
func ParseSystemSettingsListResponse(rsp *http.Response) (*SystemSettingsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SystemSettingsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedSystemSettingsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSystemSettingsPartialUpdateResponse parses an HTTP response from a SystemSettingsPartialUpdateWithResponse call
func ParseSystemSettingsPartialUpdateResponse(rsp *http.Response) (*SystemSettingsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SystemSettingsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SystemSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSystemSettingsUpdateResponse parses an HTTP response from a SystemSettingsUpdateWithResponse call
func ParseSystemSettingsUpdateResponse(rsp *http.Response) (*SystemSettingsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SystemSettingsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SystemSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTechnologiesListResponse parses an HTTP response from a TechnologiesListWithResponse call
func ParseTechnologiesListResponse(rsp *http.Response) (*TechnologiesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TechnologiesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedAppAnalysisList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTechnologiesCreateResponse parses an HTTP response from a TechnologiesCreateWithResponse call
func ParseTechnologiesCreateResponse(rsp *http.Response) (*TechnologiesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TechnologiesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AppAnalysis
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseTechnologiesDestroyResponse parses an HTTP response from a TechnologiesDestroyWithResponse call
func ParseTechnologiesDestroyResponse(rsp *http.Response) (*TechnologiesDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TechnologiesDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTechnologiesRetrieveResponse parses an HTTP response from a TechnologiesRetrieveWithResponse call
func ParseTechnologiesRetrieveResponse(rsp *http.Response) (*TechnologiesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TechnologiesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppAnalysis
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTechnologiesPartialUpdateResponse parses an HTTP response from a TechnologiesPartialUpdateWithResponse call
func ParseTechnologiesPartialUpdateResponse(rsp *http.Response) (*TechnologiesPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TechnologiesPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppAnalysis
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTechnologiesUpdateResponse parses an HTTP response from a TechnologiesUpdateWithResponse call
func ParseTechnologiesUpdateResponse(rsp *http.Response) (*TechnologiesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TechnologiesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppAnalysis
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTestImportsListResponse parses an HTTP response from a TestImportsListWithResponse call
func ParseTestImportsListResponse(rsp *http.Response) (*TestImportsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestImportsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedTestImportList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTestImportsCreateResponse parses an HTTP response from a TestImportsCreateWithResponse call
func ParseTestImportsCreateResponse(rsp *http.Response) (*TestImportsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestImportsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TestImport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseTestImportsDestroyResponse parses an HTTP response from a TestImportsDestroyWithResponse call
func ParseTestImportsDestroyResponse(rsp *http.Response) (*TestImportsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestImportsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestImportsRetrieveResponse parses an HTTP response from a TestImportsRetrieveWithResponse call
func ParseTestImportsRetrieveResponse(rsp *http.Response) (*TestImportsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestImportsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TestImport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTestImportsPartialUpdateResponse parses an HTTP response from a TestImportsPartialUpdateWithResponse call
func ParseTestImportsPartialUpdateResponse(rsp *http.Response) (*TestImportsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestImportsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TestImport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTestImportsUpdateResponse parses an HTTP response from a TestImportsUpdateWithResponse call
func ParseTestImportsUpdateResponse(rsp *http.Response) (*TestImportsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestImportsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TestImport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTestTypesListResponse parses an HTTP response from a TestTypesListWithResponse call
func ParseTestTypesListResponse(rsp *http.Response) (*TestTypesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestTypesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedTestTypeList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTestTypesCreateResponse parses an HTTP response from a TestTypesCreateWithResponse call
func ParseTestTypesCreateResponse(rsp *http.Response) (*TestTypesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestTypesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TestType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseTestTypesRetrieveResponse parses an HTTP response from a TestTypesRetrieveWithResponse call
func ParseTestTypesRetrieveResponse(rsp *http.Response) (*TestTypesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestTypesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TestType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTestTypesPartialUpdateResponse parses an HTTP response from a TestTypesPartialUpdateWithResponse call
func ParseTestTypesPartialUpdateResponse(rsp *http.Response) (*TestTypesPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestTypesPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TestType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTestTypesUpdateResponse parses an HTTP response from a TestTypesUpdateWithResponse call
func ParseTestTypesUpdateResponse(rsp *http.Response) (*TestTypesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestTypesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TestType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTestsListResponse parses an HTTP response from a TestsListWithResponse call
func ParseTestsListResponse(rsp *http.Response) (*TestsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedTestList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTestsCreateResponse parses an HTTP response from a TestsCreateWithResponse call
func ParseTestsCreateResponse(rsp *http.Response) (*TestsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TestCreate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseTestsDestroyResponse parses an HTTP response from a TestsDestroyWithResponse call
func ParseTestsDestroyResponse(rsp *http.Response) (*TestsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestsRetrieveResponse parses an HTTP response from a TestsRetrieveWithResponse call
func ParseTestsRetrieveResponse(rsp *http.Response) (*TestsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Test
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTestsPartialUpdateResponse parses an HTTP response from a TestsPartialUpdateWithResponse call
func ParseTestsPartialUpdateResponse(rsp *http.Response) (*TestsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Test
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTestsUpdateResponse parses an HTTP response from a TestsUpdateWithResponse call
func ParseTestsUpdateResponse(rsp *http.Response) (*TestsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Test
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTestsAcceptRisksCreateResponse parses an HTTP response from a TestsAcceptRisksCreateWithResponse call
func ParseTestsAcceptRisksCreateResponse(rsp *http.Response) (*TestsAcceptRisksCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestsAcceptRisksCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []RiskAcceptance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseTestsFilesRetrieveResponse parses an HTTP response from a TestsFilesRetrieveWithResponse call
func ParseTestsFilesRetrieveResponse(rsp *http.Response) (*TestsFilesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestsFilesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TestToFiles
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTestsFilesCreateResponse parses an HTTP response from a TestsFilesCreateWithResponse call
func ParseTestsFilesCreateResponse(rsp *http.Response) (*TestsFilesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestsFilesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest File
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseTestsGenerateReportCreateResponse parses an HTTP response from a TestsGenerateReportCreateWithResponse call
func ParseTestsGenerateReportCreateResponse(rsp *http.Response) (*TestsGenerateReportCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestsGenerateReportCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReportGenerate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTestsNotesRetrieveResponse parses an HTTP response from a TestsNotesRetrieveWithResponse call
func ParseTestsNotesRetrieveResponse(rsp *http.Response) (*TestsNotesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestsNotesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TestToNotes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTestsNotesCreateResponse parses an HTTP response from a TestsNotesCreateWithResponse call
func ParseTestsNotesCreateResponse(rsp *http.Response) (*TestsNotesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestsNotesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Note
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseToolConfigurationsListResponse parses an HTTP response from a ToolConfigurationsListWithResponse call
func ParseToolConfigurationsListResponse(rsp *http.Response) (*ToolConfigurationsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToolConfigurationsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedToolConfigurationList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseToolConfigurationsCreateResponse parses an HTTP response from a ToolConfigurationsCreateWithResponse call
func ParseToolConfigurationsCreateResponse(rsp *http.Response) (*ToolConfigurationsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToolConfigurationsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ToolConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseToolConfigurationsDestroyResponse parses an HTTP response from a ToolConfigurationsDestroyWithResponse call
func ParseToolConfigurationsDestroyResponse(rsp *http.Response) (*ToolConfigurationsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToolConfigurationsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseToolConfigurationsRetrieveResponse parses an HTTP response from a ToolConfigurationsRetrieveWithResponse call
func ParseToolConfigurationsRetrieveResponse(rsp *http.Response) (*ToolConfigurationsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToolConfigurationsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ToolConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseToolConfigurationsPartialUpdateResponse parses an HTTP response from a ToolConfigurationsPartialUpdateWithResponse call
func ParseToolConfigurationsPartialUpdateResponse(rsp *http.Response) (*ToolConfigurationsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToolConfigurationsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ToolConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseToolConfigurationsUpdateResponse parses an HTTP response from a ToolConfigurationsUpdateWithResponse call
func ParseToolConfigurationsUpdateResponse(rsp *http.Response) (*ToolConfigurationsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToolConfigurationsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ToolConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseToolProductSettingsListResponse parses an HTTP response from a ToolProductSettingsListWithResponse call
func ParseToolProductSettingsListResponse(rsp *http.Response) (*ToolProductSettingsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToolProductSettingsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedToolProductSettingsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseToolProductSettingsCreateResponse parses an HTTP response from a ToolProductSettingsCreateWithResponse call
func ParseToolProductSettingsCreateResponse(rsp *http.Response) (*ToolProductSettingsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToolProductSettingsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ToolProductSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseToolProductSettingsDestroyResponse parses an HTTP response from a ToolProductSettingsDestroyWithResponse call
func ParseToolProductSettingsDestroyResponse(rsp *http.Response) (*ToolProductSettingsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToolProductSettingsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseToolProductSettingsRetrieveResponse parses an HTTP response from a ToolProductSettingsRetrieveWithResponse call
func ParseToolProductSettingsRetrieveResponse(rsp *http.Response) (*ToolProductSettingsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToolProductSettingsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ToolProductSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseToolProductSettingsPartialUpdateResponse parses an HTTP response from a ToolProductSettingsPartialUpdateWithResponse call
func ParseToolProductSettingsPartialUpdateResponse(rsp *http.Response) (*ToolProductSettingsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToolProductSettingsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ToolProductSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseToolProductSettingsUpdateResponse parses an HTTP response from a ToolProductSettingsUpdateWithResponse call
func ParseToolProductSettingsUpdateResponse(rsp *http.Response) (*ToolProductSettingsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToolProductSettingsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ToolProductSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseToolTypesListResponse parses an HTTP response from a ToolTypesListWithResponse call
func ParseToolTypesListResponse(rsp *http.Response) (*ToolTypesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToolTypesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedToolTypeList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseToolTypesCreateResponse parses an HTTP response from a ToolTypesCreateWithResponse call
func ParseToolTypesCreateResponse(rsp *http.Response) (*ToolTypesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToolTypesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ToolType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseToolTypesDestroyResponse parses an HTTP response from a ToolTypesDestroyWithResponse call
func ParseToolTypesDestroyResponse(rsp *http.Response) (*ToolTypesDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToolTypesDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseToolTypesRetrieveResponse parses an HTTP response from a ToolTypesRetrieveWithResponse call
func ParseToolTypesRetrieveResponse(rsp *http.Response) (*ToolTypesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToolTypesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ToolType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseToolTypesPartialUpdateResponse parses an HTTP response from a ToolTypesPartialUpdateWithResponse call
func ParseToolTypesPartialUpdateResponse(rsp *http.Response) (*ToolTypesPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToolTypesPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ToolType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseToolTypesUpdateResponse parses an HTTP response from a ToolTypesUpdateWithResponse call
func ParseToolTypesUpdateResponse(rsp *http.Response) (*ToolTypesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToolTypesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ToolType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUserContactInfosListResponse parses an HTTP response from a UserContactInfosListWithResponse call
func ParseUserContactInfosListResponse(rsp *http.Response) (*UserContactInfosListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserContactInfosListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedUserContactInfoList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUserContactInfosCreateResponse parses an HTTP response from a UserContactInfosCreateWithResponse call
func ParseUserContactInfosCreateResponse(rsp *http.Response) (*UserContactInfosCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserContactInfosCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UserContactInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseUserContactInfosDestroyResponse parses an HTTP response from a UserContactInfosDestroyWithResponse call
func ParseUserContactInfosDestroyResponse(rsp *http.Response) (*UserContactInfosDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserContactInfosDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUserContactInfosRetrieveResponse parses an HTTP response from a UserContactInfosRetrieveWithResponse call
func ParseUserContactInfosRetrieveResponse(rsp *http.Response) (*UserContactInfosRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserContactInfosRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserContactInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUserContactInfosPartialUpdateResponse parses an HTTP response from a UserContactInfosPartialUpdateWithResponse call
func ParseUserContactInfosPartialUpdateResponse(rsp *http.Response) (*UserContactInfosPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserContactInfosPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserContactInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUserContactInfosUpdateResponse parses an HTTP response from a UserContactInfosUpdateWithResponse call
func ParseUserContactInfosUpdateResponse(rsp *http.Response) (*UserContactInfosUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserContactInfosUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserContactInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUserProfileRetrieveResponse parses an HTTP response from a UserProfileRetrieveWithResponse call
func ParseUserProfileRetrieveResponse(rsp *http.Response) (*UserProfileRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserProfileRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersListResponse parses an HTTP response from a UsersListWithResponse call
func ParseUsersListResponse(rsp *http.Response) (*UsersListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedUserList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersCreateResponse parses an HTTP response from a UsersCreateWithResponse call
func ParseUsersCreateResponse(rsp *http.Response) (*UsersCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseUsersDestroyResponse parses an HTTP response from a UsersDestroyWithResponse call
func ParseUsersDestroyResponse(rsp *http.Response) (*UsersDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUsersRetrieveResponse parses an HTTP response from a UsersRetrieveWithResponse call
func ParseUsersRetrieveResponse(rsp *http.Response) (*UsersRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersPartialUpdateResponse parses an HTTP response from a UsersPartialUpdateWithResponse call
func ParseUsersPartialUpdateResponse(rsp *http.Response) (*UsersPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersUpdateResponse parses an HTTP response from a UsersUpdateWithResponse call
func ParseUsersUpdateResponse(rsp *http.Response) (*UsersUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /api/v2/api-token-auth/)
	ApiTokenAuthCreate(ctx echo.Context) error

	// (GET /api/v2/development_environments/)
	DevelopmentEnvironmentsList(ctx echo.Context, params DevelopmentEnvironmentsListParams) error

	// (POST /api/v2/development_environments/)
	DevelopmentEnvironmentsCreate(ctx echo.Context) error

	// (DELETE /api/v2/development_environments/{id}/)
	DevelopmentEnvironmentsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/development_environments/{id}/)
	DevelopmentEnvironmentsRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/development_environments/{id}/)
	DevelopmentEnvironmentsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/development_environments/{id}/)
	DevelopmentEnvironmentsUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/dojo_group_members/)
	DojoGroupMembersList(ctx echo.Context, params DojoGroupMembersListParams) error

	// (POST /api/v2/dojo_group_members/)
	DojoGroupMembersCreate(ctx echo.Context) error

	// (DELETE /api/v2/dojo_group_members/{id}/)
	DojoGroupMembersDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/dojo_group_members/{id}/)
	DojoGroupMembersRetrieve(ctx echo.Context, id int, params DojoGroupMembersRetrieveParams) error

	// (PATCH /api/v2/dojo_group_members/{id}/)
	DojoGroupMembersPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/dojo_group_members/{id}/)
	DojoGroupMembersUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/dojo_groups/)
	DojoGroupsList(ctx echo.Context, params DojoGroupsListParams) error

	// (POST /api/v2/dojo_groups/)
	DojoGroupsCreate(ctx echo.Context) error

	// (DELETE /api/v2/dojo_groups/{id}/)
	DojoGroupsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/dojo_groups/{id}/)
	DojoGroupsRetrieve(ctx echo.Context, id int, params DojoGroupsRetrieveParams) error

	// (PATCH /api/v2/dojo_groups/{id}/)
	DojoGroupsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/dojo_groups/{id}/)
	DojoGroupsUpdate(ctx echo.Context, id int) error

	// (POST /api/v2/endpoint_meta_import/)
	EndpointMetaImportCreate(ctx echo.Context) error

	// (GET /api/v2/endpoint_status/)
	EndpointStatusList(ctx echo.Context, params EndpointStatusListParams) error

	// (POST /api/v2/endpoint_status/)
	EndpointStatusCreate(ctx echo.Context) error

	// (DELETE /api/v2/endpoint_status/{id}/)
	EndpointStatusDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/endpoint_status/{id}/)
	EndpointStatusRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/endpoint_status/{id}/)
	EndpointStatusPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/endpoint_status/{id}/)
	EndpointStatusUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/endpoints/)
	EndpointsList(ctx echo.Context, params EndpointsListParams) error

	// (POST /api/v2/endpoints/)
	EndpointsCreate(ctx echo.Context) error

	// (DELETE /api/v2/endpoints/{id}/)
	EndpointsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/endpoints/{id}/)
	EndpointsRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/endpoints/{id}/)
	EndpointsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/endpoints/{id}/)
	EndpointsUpdate(ctx echo.Context, id int) error

	// (POST /api/v2/endpoints/{id}/generate_report/)
	EndpointsGenerateReportCreate(ctx echo.Context, id int) error

	// (GET /api/v2/engagement_presets/)
	EngagementPresetsList(ctx echo.Context, params EngagementPresetsListParams) error

	// (POST /api/v2/engagement_presets/)
	EngagementPresetsCreate(ctx echo.Context) error

	// (DELETE /api/v2/engagement_presets/{id}/)
	EngagementPresetsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/engagement_presets/{id}/)
	EngagementPresetsRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/engagement_presets/{id}/)
	EngagementPresetsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/engagement_presets/{id}/)
	EngagementPresetsUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/engagements/)
	EngagementsList(ctx echo.Context, params EngagementsListParams) error

	// (POST /api/v2/engagements/)
	EngagementsCreate(ctx echo.Context) error

	// (DELETE /api/v2/engagements/{id}/)
	EngagementsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/engagements/{id}/)
	EngagementsRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/engagements/{id}/)
	EngagementsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/engagements/{id}/)
	EngagementsUpdate(ctx echo.Context, id int) error

	// (POST /api/v2/engagements/{id}/accept_risks/)
	EngagementsAcceptRisksCreate(ctx echo.Context, id int) error

	// (POST /api/v2/engagements/{id}/close/)
	EngagementsCloseCreate(ctx echo.Context, id int) error

	// (GET /api/v2/engagements/{id}/files/)
	EngagementsFilesRetrieve(ctx echo.Context, id int) error

	// (POST /api/v2/engagements/{id}/files/)
	EngagementsFilesCreate(ctx echo.Context, id int) error

	// (POST /api/v2/engagements/{id}/generate_report/)
	EngagementsGenerateReportCreate(ctx echo.Context, id int) error

	// (GET /api/v2/engagements/{id}/notes/)
	EngagementsNotesRetrieve(ctx echo.Context, id int) error

	// (POST /api/v2/engagements/{id}/notes/)
	EngagementsNotesCreate(ctx echo.Context, id int) error

	// (POST /api/v2/engagements/{id}/reopen/)
	EngagementsReopenCreate(ctx echo.Context, id int) error

	// (GET /api/v2/finding_templates/)
	FindingTemplatesList(ctx echo.Context, params FindingTemplatesListParams) error

	// (POST /api/v2/finding_templates/)
	FindingTemplatesCreate(ctx echo.Context) error

	// (DELETE /api/v2/finding_templates/{id}/)
	FindingTemplatesDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/finding_templates/{id}/)
	FindingTemplatesRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/finding_templates/{id}/)
	FindingTemplatesPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/finding_templates/{id}/)
	FindingTemplatesUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/findings/)
	FindingsList(ctx echo.Context, params FindingsListParams) error

	// (POST /api/v2/findings/)
	FindingsCreate(ctx echo.Context) error

	// (POST /api/v2/findings/accept_risks/)
	FindingsAcceptRisksCreate(ctx echo.Context, params FindingsAcceptRisksCreateParams) error

	// (POST /api/v2/findings/generate_report/)
	FindingsGenerateReportCreate(ctx echo.Context) error

	// (DELETE /api/v2/findings/{id}/)
	FindingsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/findings/{id}/)
	FindingsRetrieve(ctx echo.Context, id int, params FindingsRetrieveParams) error

	// (PATCH /api/v2/findings/{id}/)
	FindingsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/findings/{id}/)
	FindingsUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/findings/{id}/duplicate/)
	FindingsDuplicateList(ctx echo.Context, id int) error

	// (POST /api/v2/findings/{id}/duplicate/reset/)
	FindingsDuplicateResetCreate(ctx echo.Context, id int) error

	// (GET /api/v2/findings/{id}/files/)
	FindingsFilesRetrieve(ctx echo.Context, id int) error

	// (POST /api/v2/findings/{id}/files/)
	FindingsFilesCreate(ctx echo.Context, id int) error

	// (DELETE /api/v2/findings/{id}/metadata/)
	FindingsMetadataDestroy(ctx echo.Context, id int, params FindingsMetadataDestroyParams) error

	// (GET /api/v2/findings/{id}/metadata/)
	FindingsMetadataList(ctx echo.Context, id int) error

	// (POST /api/v2/findings/{id}/metadata/)
	FindingsMetadataCreate(ctx echo.Context, id int) error

	// (PUT /api/v2/findings/{id}/metadata/)
	FindingsMetadataUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/findings/{id}/notes/)
	FindingsNotesRetrieve(ctx echo.Context, id int) error

	// (POST /api/v2/findings/{id}/notes/)
	FindingsNotesCreate(ctx echo.Context, id int) error

	// (POST /api/v2/findings/{id}/original/{new_fid}/)
	FindingsOriginalCreate(ctx echo.Context, id int, newFid int) error

	// (PATCH /api/v2/findings/{id}/remove_note/)
	FindingsRemoveNotePartialUpdate(ctx echo.Context, id int) error

	// (PATCH /api/v2/findings/{id}/remove_tags/)
	FindingsRemoveTagsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/findings/{id}/remove_tags/)
	FindingsRemoveTagsUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/findings/{id}/request_response/)
	FindingsRequestResponseRetrieve(ctx echo.Context, id int) error

	// (POST /api/v2/findings/{id}/request_response/)
	FindingsRequestResponseCreate(ctx echo.Context, id int) error

	// (GET /api/v2/findings/{id}/tags/)
	FindingsTagsRetrieve(ctx echo.Context, id int) error

	// (POST /api/v2/findings/{id}/tags/)
	FindingsTagsCreate(ctx echo.Context, id int) error

	// (GET /api/v2/global_roles/)
	GlobalRolesList(ctx echo.Context, params GlobalRolesListParams) error

	// (POST /api/v2/global_roles/)
	GlobalRolesCreate(ctx echo.Context) error

	// (DELETE /api/v2/global_roles/{id}/)
	GlobalRolesDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/global_roles/{id}/)
	GlobalRolesRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/global_roles/{id}/)
	GlobalRolesPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/global_roles/{id}/)
	GlobalRolesUpdate(ctx echo.Context, id int) error

	// (POST /api/v2/import-languages/)
	ImportLanguagesCreate(ctx echo.Context) error

	// (POST /api/v2/import-scan/)
	ImportScanCreate(ctx echo.Context) error

	// (GET /api/v2/jira_configurations/)
	JiraConfigurationsList(ctx echo.Context, params JiraConfigurationsListParams) error

	// (POST /api/v2/jira_configurations/)
	JiraConfigurationsCreate(ctx echo.Context) error

	// (DELETE /api/v2/jira_configurations/{id}/)
	JiraConfigurationsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/jira_configurations/{id}/)
	JiraConfigurationsRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/jira_configurations/{id}/)
	JiraConfigurationsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/jira_configurations/{id}/)
	JiraConfigurationsUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/jira_finding_mappings/)
	JiraFindingMappingsList(ctx echo.Context, params JiraFindingMappingsListParams) error

	// (POST /api/v2/jira_finding_mappings/)
	JiraFindingMappingsCreate(ctx echo.Context) error

	// (DELETE /api/v2/jira_finding_mappings/{id}/)
	JiraFindingMappingsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/jira_finding_mappings/{id}/)
	JiraFindingMappingsRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/jira_finding_mappings/{id}/)
	JiraFindingMappingsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/jira_finding_mappings/{id}/)
	JiraFindingMappingsUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/jira_instances/)
	JiraInstancesList(ctx echo.Context, params JiraInstancesListParams) error

	// (POST /api/v2/jira_instances/)
	JiraInstancesCreate(ctx echo.Context) error

	// (DELETE /api/v2/jira_instances/{id}/)
	JiraInstancesDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/jira_instances/{id}/)
	JiraInstancesRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/jira_instances/{id}/)
	JiraInstancesPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/jira_instances/{id}/)
	JiraInstancesUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/jira_product_configurations/)
	JiraProductConfigurationsList(ctx echo.Context, params JiraProductConfigurationsListParams) error

	// (POST /api/v2/jira_product_configurations/)
	JiraProductConfigurationsCreate(ctx echo.Context) error

	// (DELETE /api/v2/jira_product_configurations/{id}/)
	JiraProductConfigurationsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/jira_product_configurations/{id}/)
	JiraProductConfigurationsRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/jira_product_configurations/{id}/)
	JiraProductConfigurationsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/jira_product_configurations/{id}/)
	JiraProductConfigurationsUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/jira_projects/)
	JiraProjectsList(ctx echo.Context, params JiraProjectsListParams) error

	// (POST /api/v2/jira_projects/)
	JiraProjectsCreate(ctx echo.Context) error

	// (DELETE /api/v2/jira_projects/{id}/)
	JiraProjectsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/jira_projects/{id}/)
	JiraProjectsRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/jira_projects/{id}/)
	JiraProjectsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/jira_projects/{id}/)
	JiraProjectsUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/language_types/)
	LanguageTypesList(ctx echo.Context, params LanguageTypesListParams) error

	// (POST /api/v2/language_types/)
	LanguageTypesCreate(ctx echo.Context) error

	// (DELETE /api/v2/language_types/{id}/)
	LanguageTypesDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/language_types/{id}/)
	LanguageTypesRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/language_types/{id}/)
	LanguageTypesPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/language_types/{id}/)
	LanguageTypesUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/languages/)
	LanguagesList(ctx echo.Context, params LanguagesListParams) error

	// (POST /api/v2/languages/)
	LanguagesCreate(ctx echo.Context) error

	// (DELETE /api/v2/languages/{id}/)
	LanguagesDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/languages/{id}/)
	LanguagesRetrieve(ctx echo.Context, id int, params LanguagesRetrieveParams) error

	// (PATCH /api/v2/languages/{id}/)
	LanguagesPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/languages/{id}/)
	LanguagesUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/metadata/)
	MetadataList(ctx echo.Context, params MetadataListParams) error

	// (POST /api/v2/metadata/)
	MetadataCreate(ctx echo.Context) error

	// (DELETE /api/v2/metadata/{id}/)
	MetadataDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/metadata/{id}/)
	MetadataRetrieve(ctx echo.Context, id int, params MetadataRetrieveParams) error

	// (PATCH /api/v2/metadata/{id}/)
	MetadataPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/metadata/{id}/)
	MetadataUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/network_locations/)
	NetworkLocationsList(ctx echo.Context, params NetworkLocationsListParams) error

	// (POST /api/v2/network_locations/)
	NetworkLocationsCreate(ctx echo.Context) error

	// (DELETE /api/v2/network_locations/{id}/)
	NetworkLocationsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/network_locations/{id}/)
	NetworkLocationsRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/network_locations/{id}/)
	NetworkLocationsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/network_locations/{id}/)
	NetworkLocationsUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/note_type/)
	NoteTypeList(ctx echo.Context, params NoteTypeListParams) error

	// (POST /api/v2/note_type/)
	NoteTypeCreate(ctx echo.Context) error

	// (DELETE /api/v2/note_type/{id}/)
	NoteTypeDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/note_type/{id}/)
	NoteTypeRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/note_type/{id}/)
	NoteTypePartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/note_type/{id}/)
	NoteTypeUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/notes/)
	NotesList(ctx echo.Context, params NotesListParams) error

	// (GET /api/v2/notes/{id}/)
	NotesRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/notes/{id}/)
	NotesPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/notes/{id}/)
	NotesUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/notifications/)
	NotificationsList(ctx echo.Context, params NotificationsListParams) error

	// (POST /api/v2/notifications/)
	NotificationsCreate(ctx echo.Context) error

	// (DELETE /api/v2/notifications/{id}/)
	NotificationsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/notifications/{id}/)
	NotificationsRetrieve(ctx echo.Context, id int, params NotificationsRetrieveParams) error

	// (PATCH /api/v2/notifications/{id}/)
	NotificationsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/notifications/{id}/)
	NotificationsUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/oa3/schema/)
	Oa3SchemaRetrieve(ctx echo.Context, params Oa3SchemaRetrieveParams) error

	// (GET /api/v2/product_api_scan_configurations/)
	ProductApiScanConfigurationsList(ctx echo.Context, params ProductApiScanConfigurationsListParams) error

	// (POST /api/v2/product_api_scan_configurations/)
	ProductApiScanConfigurationsCreate(ctx echo.Context) error

	// (DELETE /api/v2/product_api_scan_configurations/{id}/)
	ProductApiScanConfigurationsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/product_api_scan_configurations/{id}/)
	ProductApiScanConfigurationsRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/product_api_scan_configurations/{id}/)
	ProductApiScanConfigurationsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/product_api_scan_configurations/{id}/)
	ProductApiScanConfigurationsUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/product_groups/)
	ProductGroupsList(ctx echo.Context, params ProductGroupsListParams) error

	// (POST /api/v2/product_groups/)
	ProductGroupsCreate(ctx echo.Context) error

	// (DELETE /api/v2/product_groups/{id}/)
	ProductGroupsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/product_groups/{id}/)
	ProductGroupsRetrieve(ctx echo.Context, id int, params ProductGroupsRetrieveParams) error

	// (PATCH /api/v2/product_groups/{id}/)
	ProductGroupsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/product_groups/{id}/)
	ProductGroupsUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/product_members/)
	ProductMembersList(ctx echo.Context, params ProductMembersListParams) error

	// (POST /api/v2/product_members/)
	ProductMembersCreate(ctx echo.Context) error

	// (DELETE /api/v2/product_members/{id}/)
	ProductMembersDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/product_members/{id}/)
	ProductMembersRetrieve(ctx echo.Context, id int, params ProductMembersRetrieveParams) error

	// (PATCH /api/v2/product_members/{id}/)
	ProductMembersPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/product_members/{id}/)
	ProductMembersUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/product_type_groups/)
	ProductTypeGroupsList(ctx echo.Context, params ProductTypeGroupsListParams) error

	// (POST /api/v2/product_type_groups/)
	ProductTypeGroupsCreate(ctx echo.Context) error

	// (DELETE /api/v2/product_type_groups/{id}/)
	ProductTypeGroupsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/product_type_groups/{id}/)
	ProductTypeGroupsRetrieve(ctx echo.Context, id int, params ProductTypeGroupsRetrieveParams) error

	// (PATCH /api/v2/product_type_groups/{id}/)
	ProductTypeGroupsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/product_type_groups/{id}/)
	ProductTypeGroupsUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/product_type_members/)
	ProductTypeMembersList(ctx echo.Context, params ProductTypeMembersListParams) error

	// (POST /api/v2/product_type_members/)
	ProductTypeMembersCreate(ctx echo.Context) error

	// (DELETE /api/v2/product_type_members/{id}/)
	ProductTypeMembersDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/product_type_members/{id}/)
	ProductTypeMembersRetrieve(ctx echo.Context, id int, params ProductTypeMembersRetrieveParams) error

	// (PATCH /api/v2/product_type_members/{id}/)
	ProductTypeMembersPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/product_type_members/{id}/)
	ProductTypeMembersUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/product_types/)
	ProductTypesList(ctx echo.Context, params ProductTypesListParams) error

	// (POST /api/v2/product_types/)
	ProductTypesCreate(ctx echo.Context) error

	// (DELETE /api/v2/product_types/{id}/)
	ProductTypesDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/product_types/{id}/)
	ProductTypesRetrieve(ctx echo.Context, id int, params ProductTypesRetrieveParams) error

	// (PATCH /api/v2/product_types/{id}/)
	ProductTypesPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/product_types/{id}/)
	ProductTypesUpdate(ctx echo.Context, id int) error

	// (POST /api/v2/product_types/{id}/generate_report/)
	ProductTypesGenerateReportCreate(ctx echo.Context, id int) error

	// (GET /api/v2/products/)
	ProductsList(ctx echo.Context, params ProductsListParams) error

	// (POST /api/v2/products/)
	ProductsCreate(ctx echo.Context) error

	// (DELETE /api/v2/products/{id}/)
	ProductsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/products/{id}/)
	ProductsRetrieve(ctx echo.Context, id int, params ProductsRetrieveParams) error

	// (PATCH /api/v2/products/{id}/)
	ProductsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/products/{id}/)
	ProductsUpdate(ctx echo.Context, id int) error

	// (POST /api/v2/products/{id}/generate_report/)
	ProductsGenerateReportCreate(ctx echo.Context, id int) error

	// (GET /api/v2/regulations/)
	RegulationsList(ctx echo.Context, params RegulationsListParams) error

	// (POST /api/v2/regulations/)
	RegulationsCreate(ctx echo.Context) error

	// (DELETE /api/v2/regulations/{id}/)
	RegulationsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/regulations/{id}/)
	RegulationsRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/regulations/{id}/)
	RegulationsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/regulations/{id}/)
	RegulationsUpdate(ctx echo.Context, id int) error

	// (POST /api/v2/reimport-scan/)
	ReimportScanCreate(ctx echo.Context) error

	// (GET /api/v2/roles/)
	RolesList(ctx echo.Context, params RolesListParams) error

	// (GET /api/v2/roles/{id}/)
	RolesRetrieve(ctx echo.Context, id int) error

	// (GET /api/v2/sonarqube_issues/)
	SonarqubeIssuesList(ctx echo.Context, params SonarqubeIssuesListParams) error

	// (POST /api/v2/sonarqube_issues/)
	SonarqubeIssuesCreate(ctx echo.Context) error

	// (DELETE /api/v2/sonarqube_issues/{id}/)
	SonarqubeIssuesDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/sonarqube_issues/{id}/)
	SonarqubeIssuesRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/sonarqube_issues/{id}/)
	SonarqubeIssuesPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/sonarqube_issues/{id}/)
	SonarqubeIssuesUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/sonarqube_transitions/)
	SonarqubeTransitionsList(ctx echo.Context, params SonarqubeTransitionsListParams) error

	// (POST /api/v2/sonarqube_transitions/)
	SonarqubeTransitionsCreate(ctx echo.Context) error

	// (DELETE /api/v2/sonarqube_transitions/{id}/)
	SonarqubeTransitionsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/sonarqube_transitions/{id}/)
	SonarqubeTransitionsRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/sonarqube_transitions/{id}/)
	SonarqubeTransitionsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/sonarqube_transitions/{id}/)
	SonarqubeTransitionsUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/stub_findings/)
	StubFindingsList(ctx echo.Context, params StubFindingsListParams) error

	// (POST /api/v2/stub_findings/)
	StubFindingsCreate(ctx echo.Context) error

	// (DELETE /api/v2/stub_findings/{id}/)
	StubFindingsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/stub_findings/{id}/)
	StubFindingsRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/stub_findings/{id}/)
	StubFindingsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/stub_findings/{id}/)
	StubFindingsUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/system_settings/)
	SystemSettingsList(ctx echo.Context, params SystemSettingsListParams) error

	// (PATCH /api/v2/system_settings/{id}/)
	SystemSettingsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/system_settings/{id}/)
	SystemSettingsUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/technologies/)
	TechnologiesList(ctx echo.Context, params TechnologiesListParams) error

	// (POST /api/v2/technologies/)
	TechnologiesCreate(ctx echo.Context) error

	// (DELETE /api/v2/technologies/{id}/)
	TechnologiesDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/technologies/{id}/)
	TechnologiesRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/technologies/{id}/)
	TechnologiesPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/technologies/{id}/)
	TechnologiesUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/test_imports/)
	TestImportsList(ctx echo.Context, params TestImportsListParams) error

	// (POST /api/v2/test_imports/)
	TestImportsCreate(ctx echo.Context) error

	// (DELETE /api/v2/test_imports/{id}/)
	TestImportsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/test_imports/{id}/)
	TestImportsRetrieve(ctx echo.Context, id int, params TestImportsRetrieveParams) error

	// (PATCH /api/v2/test_imports/{id}/)
	TestImportsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/test_imports/{id}/)
	TestImportsUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/test_types/)
	TestTypesList(ctx echo.Context, params TestTypesListParams) error

	// (POST /api/v2/test_types/)
	TestTypesCreate(ctx echo.Context) error

	// (GET /api/v2/test_types/{id}/)
	TestTypesRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/test_types/{id}/)
	TestTypesPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/test_types/{id}/)
	TestTypesUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/tests/)
	TestsList(ctx echo.Context, params TestsListParams) error

	// (POST /api/v2/tests/)
	TestsCreate(ctx echo.Context) error

	// (DELETE /api/v2/tests/{id}/)
	TestsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/tests/{id}/)
	TestsRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/tests/{id}/)
	TestsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/tests/{id}/)
	TestsUpdate(ctx echo.Context, id int) error

	// (POST /api/v2/tests/{id}/accept_risks/)
	TestsAcceptRisksCreate(ctx echo.Context, id int) error

	// (GET /api/v2/tests/{id}/files/)
	TestsFilesRetrieve(ctx echo.Context, id int) error

	// (POST /api/v2/tests/{id}/files/)
	TestsFilesCreate(ctx echo.Context, id int) error

	// (POST /api/v2/tests/{id}/generate_report/)
	TestsGenerateReportCreate(ctx echo.Context, id int) error

	// (GET /api/v2/tests/{id}/notes/)
	TestsNotesRetrieve(ctx echo.Context, id int) error

	// (POST /api/v2/tests/{id}/notes/)
	TestsNotesCreate(ctx echo.Context, id int) error

	// (GET /api/v2/tool_configurations/)
	ToolConfigurationsList(ctx echo.Context, params ToolConfigurationsListParams) error

	// (POST /api/v2/tool_configurations/)
	ToolConfigurationsCreate(ctx echo.Context) error

	// (DELETE /api/v2/tool_configurations/{id}/)
	ToolConfigurationsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/tool_configurations/{id}/)
	ToolConfigurationsRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/tool_configurations/{id}/)
	ToolConfigurationsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/tool_configurations/{id}/)
	ToolConfigurationsUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/tool_product_settings/)
	ToolProductSettingsList(ctx echo.Context, params ToolProductSettingsListParams) error

	// (POST /api/v2/tool_product_settings/)
	ToolProductSettingsCreate(ctx echo.Context) error

	// (DELETE /api/v2/tool_product_settings/{id}/)
	ToolProductSettingsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/tool_product_settings/{id}/)
	ToolProductSettingsRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/tool_product_settings/{id}/)
	ToolProductSettingsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/tool_product_settings/{id}/)
	ToolProductSettingsUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/tool_types/)
	ToolTypesList(ctx echo.Context, params ToolTypesListParams) error

	// (POST /api/v2/tool_types/)
	ToolTypesCreate(ctx echo.Context) error

	// (DELETE /api/v2/tool_types/{id}/)
	ToolTypesDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/tool_types/{id}/)
	ToolTypesRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/tool_types/{id}/)
	ToolTypesPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/tool_types/{id}/)
	ToolTypesUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/user_contact_infos/)
	UserContactInfosList(ctx echo.Context, params UserContactInfosListParams) error

	// (POST /api/v2/user_contact_infos/)
	UserContactInfosCreate(ctx echo.Context) error

	// (DELETE /api/v2/user_contact_infos/{id}/)
	UserContactInfosDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/user_contact_infos/{id}/)
	UserContactInfosRetrieve(ctx echo.Context, id int, params UserContactInfosRetrieveParams) error

	// (PATCH /api/v2/user_contact_infos/{id}/)
	UserContactInfosPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/user_contact_infos/{id}/)
	UserContactInfosUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/user_profile/)
	UserProfileRetrieve(ctx echo.Context) error

	// (GET /api/v2/users/)
	UsersList(ctx echo.Context, params UsersListParams) error

	// (POST /api/v2/users/)
	UsersCreate(ctx echo.Context) error

	// (DELETE /api/v2/users/{id}/)
	UsersDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/users/{id}/)
	UsersRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/users/{id}/)
	UsersPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/users/{id}/)
	UsersUpdate(ctx echo.Context, id int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApiTokenAuthCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiTokenAuthCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiTokenAuthCreate(ctx)
	return err
}

// DevelopmentEnvironmentsList converts echo context to params.
func (w *ServerInterfaceWrapper) DevelopmentEnvironmentsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DevelopmentEnvironmentsListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DevelopmentEnvironmentsList(ctx, params)
	return err
}

// DevelopmentEnvironmentsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) DevelopmentEnvironmentsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DevelopmentEnvironmentsCreate(ctx)
	return err
}

// DevelopmentEnvironmentsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) DevelopmentEnvironmentsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DevelopmentEnvironmentsDestroy(ctx, id)
	return err
}

// DevelopmentEnvironmentsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) DevelopmentEnvironmentsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DevelopmentEnvironmentsRetrieve(ctx, id)
	return err
}

// DevelopmentEnvironmentsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) DevelopmentEnvironmentsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DevelopmentEnvironmentsPartialUpdate(ctx, id)
	return err
}

// DevelopmentEnvironmentsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) DevelopmentEnvironmentsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DevelopmentEnvironmentsUpdate(ctx, id)
	return err
}

// DojoGroupMembersList converts echo context to params.
func (w *ServerInterfaceWrapper) DojoGroupMembersList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DojoGroupMembersListParams
	// ------------- Optional query parameter "group_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "group_id", ctx.QueryParams(), &params.GroupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter group_id: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// ------------- Optional query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DojoGroupMembersList(ctx, params)
	return err
}

// DojoGroupMembersCreate converts echo context to params.
func (w *ServerInterfaceWrapper) DojoGroupMembersCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DojoGroupMembersCreate(ctx)
	return err
}

// DojoGroupMembersDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) DojoGroupMembersDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DojoGroupMembersDestroy(ctx, id)
	return err
}

// DojoGroupMembersRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) DojoGroupMembersRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DojoGroupMembersRetrieveParams
	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DojoGroupMembersRetrieve(ctx, id, params)
	return err
}

// DojoGroupMembersPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) DojoGroupMembersPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DojoGroupMembersPartialUpdate(ctx, id)
	return err
}

// DojoGroupMembersUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) DojoGroupMembersUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DojoGroupMembersUpdate(ctx, id)
	return err
}

// DojoGroupsList converts echo context to params.
func (w *ServerInterfaceWrapper) DojoGroupsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DojoGroupsListParams
	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DojoGroupsList(ctx, params)
	return err
}

// DojoGroupsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) DojoGroupsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DojoGroupsCreate(ctx)
	return err
}

// DojoGroupsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) DojoGroupsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DojoGroupsDestroy(ctx, id)
	return err
}

// DojoGroupsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) DojoGroupsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DojoGroupsRetrieveParams
	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DojoGroupsRetrieve(ctx, id, params)
	return err
}

// DojoGroupsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) DojoGroupsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DojoGroupsPartialUpdate(ctx, id)
	return err
}

// DojoGroupsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) DojoGroupsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DojoGroupsUpdate(ctx, id)
	return err
}

// EndpointMetaImportCreate converts echo context to params.
func (w *ServerInterfaceWrapper) EndpointMetaImportCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndpointMetaImportCreate(ctx)
	return err
}

// EndpointStatusList converts echo context to params.
func (w *ServerInterfaceWrapper) EndpointStatusList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params EndpointStatusListParams
	// ------------- Optional query parameter "endpoint" -------------

	err = runtime.BindQueryParameter("form", true, false, "endpoint", ctx.QueryParams(), &params.Endpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endpoint: %s", err))
	}

	// ------------- Optional query parameter "false_positive" -------------

	err = runtime.BindQueryParameter("form", true, false, "false_positive", ctx.QueryParams(), &params.FalsePositive)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter false_positive: %s", err))
	}

	// ------------- Optional query parameter "finding" -------------

	err = runtime.BindQueryParameter("form", true, false, "finding", ctx.QueryParams(), &params.Finding)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter finding: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "mitigated" -------------

	err = runtime.BindQueryParameter("form", true, false, "mitigated", ctx.QueryParams(), &params.Mitigated)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter mitigated: %s", err))
	}

	// ------------- Optional query parameter "mitigated_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "mitigated_by", ctx.QueryParams(), &params.MitigatedBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter mitigated_by: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "out_of_scope" -------------

	err = runtime.BindQueryParameter("form", true, false, "out_of_scope", ctx.QueryParams(), &params.OutOfScope)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter out_of_scope: %s", err))
	}

	// ------------- Optional query parameter "risk_accepted" -------------

	err = runtime.BindQueryParameter("form", true, false, "risk_accepted", ctx.QueryParams(), &params.RiskAccepted)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter risk_accepted: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndpointStatusList(ctx, params)
	return err
}

// EndpointStatusCreate converts echo context to params.
func (w *ServerInterfaceWrapper) EndpointStatusCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndpointStatusCreate(ctx)
	return err
}

// EndpointStatusDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) EndpointStatusDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndpointStatusDestroy(ctx, id)
	return err
}

// EndpointStatusRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) EndpointStatusRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndpointStatusRetrieve(ctx, id)
	return err
}

// EndpointStatusPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) EndpointStatusPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndpointStatusPartialUpdate(ctx, id)
	return err
}

// EndpointStatusUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) EndpointStatusUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndpointStatusUpdate(ctx, id)
	return err
}

// EndpointsList converts echo context to params.
func (w *ServerInterfaceWrapper) EndpointsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params EndpointsListParams
	// ------------- Optional query parameter "host" -------------

	err = runtime.BindQueryParameter("form", true, false, "host", ctx.QueryParams(), &params.Host)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter host: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "not_tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "not_tag", ctx.QueryParams(), &params.NotTag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_tag: %s", err))
	}

	// ------------- Optional query parameter "not_tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "not_tags", ctx.QueryParams(), &params.NotTags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_tags: %s", err))
	}

	// ------------- Optional query parameter "o" -------------

	err = runtime.BindQueryParameter("form", false, false, "o", ctx.QueryParams(), &params.O)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter o: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "product" -------------

	err = runtime.BindQueryParameter("form", true, false, "product", ctx.QueryParams(), &params.Product)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndpointsList(ctx, params)
	return err
}

// EndpointsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) EndpointsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndpointsCreate(ctx)
	return err
}

// EndpointsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) EndpointsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndpointsDestroy(ctx, id)
	return err
}

// EndpointsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) EndpointsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndpointsRetrieve(ctx, id)
	return err
}

// EndpointsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) EndpointsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndpointsPartialUpdate(ctx, id)
	return err
}

// EndpointsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) EndpointsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndpointsUpdate(ctx, id)
	return err
}

// EndpointsGenerateReportCreate converts echo context to params.
func (w *ServerInterfaceWrapper) EndpointsGenerateReportCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndpointsGenerateReportCreate(ctx, id)
	return err
}

// EngagementPresetsList converts echo context to params.
func (w *ServerInterfaceWrapper) EngagementPresetsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params EngagementPresetsListParams
	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "product" -------------

	err = runtime.BindQueryParameter("form", true, false, "product", ctx.QueryParams(), &params.Product)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product: %s", err))
	}

	// ------------- Optional query parameter "title" -------------

	err = runtime.BindQueryParameter("form", true, false, "title", ctx.QueryParams(), &params.Title)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter title: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EngagementPresetsList(ctx, params)
	return err
}

// EngagementPresetsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) EngagementPresetsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EngagementPresetsCreate(ctx)
	return err
}

// EngagementPresetsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) EngagementPresetsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EngagementPresetsDestroy(ctx, id)
	return err
}

// EngagementPresetsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) EngagementPresetsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EngagementPresetsRetrieve(ctx, id)
	return err
}

// EngagementPresetsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) EngagementPresetsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EngagementPresetsPartialUpdate(ctx, id)
	return err
}

// EngagementPresetsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) EngagementPresetsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EngagementPresetsUpdate(ctx, id)
	return err
}

// EngagementsList converts echo context to params.
func (w *ServerInterfaceWrapper) EngagementsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params EngagementsListParams
	// ------------- Optional query parameter "active" -------------

	err = runtime.BindQueryParameter("form", true, false, "active", ctx.QueryParams(), &params.Active)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter active: %s", err))
	}

	// ------------- Optional query parameter "api_test" -------------

	err = runtime.BindQueryParameter("form", true, false, "api_test", ctx.QueryParams(), &params.ApiTest)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter api_test: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "not_product__tags__name" -------------

	err = runtime.BindQueryParameter("form", false, false, "not_product__tags__name", ctx.QueryParams(), &params.NotProductTagsName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_product__tags__name: %s", err))
	}

	// ------------- Optional query parameter "not_tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "not_tag", ctx.QueryParams(), &params.NotTag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_tag: %s", err))
	}

	// ------------- Optional query parameter "not_tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "not_tags", ctx.QueryParams(), &params.NotTags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_tags: %s", err))
	}

	// ------------- Optional query parameter "o" -------------

	err = runtime.BindQueryParameter("form", false, false, "o", ctx.QueryParams(), &params.O)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter o: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pen_test" -------------

	err = runtime.BindQueryParameter("form", true, false, "pen_test", ctx.QueryParams(), &params.PenTest)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pen_test: %s", err))
	}

	// ------------- Optional query parameter "product" -------------

	err = runtime.BindQueryParameter("form", true, false, "product", ctx.QueryParams(), &params.Product)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product: %s", err))
	}

	// ------------- Optional query parameter "product__prod_type" -------------

	err = runtime.BindQueryParameter("form", false, false, "product__prod_type", ctx.QueryParams(), &params.ProductProdType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product__prod_type: %s", err))
	}

	// ------------- Optional query parameter "product__tags__name" -------------

	err = runtime.BindQueryParameter("form", false, false, "product__tags__name", ctx.QueryParams(), &params.ProductTagsName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product__tags__name: %s", err))
	}

	// ------------- Optional query parameter "report_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "report_type", ctx.QueryParams(), &params.ReportType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter report_type: %s", err))
	}

	// ------------- Optional query parameter "requester" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester", ctx.QueryParams(), &params.Requester)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester: %s", err))
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "target_end" -------------

	err = runtime.BindQueryParameter("form", true, false, "target_end", ctx.QueryParams(), &params.TargetEnd)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter target_end: %s", err))
	}

	// ------------- Optional query parameter "target_start" -------------

	err = runtime.BindQueryParameter("form", true, false, "target_start", ctx.QueryParams(), &params.TargetStart)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter target_start: %s", err))
	}

	// ------------- Optional query parameter "threat_model" -------------

	err = runtime.BindQueryParameter("form", true, false, "threat_model", ctx.QueryParams(), &params.ThreatModel)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter threat_model: %s", err))
	}

	// ------------- Optional query parameter "updated" -------------

	err = runtime.BindQueryParameter("form", true, false, "updated", ctx.QueryParams(), &params.Updated)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter updated: %s", err))
	}

	// ------------- Optional query parameter "version" -------------

	err = runtime.BindQueryParameter("form", true, false, "version", ctx.QueryParams(), &params.Version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EngagementsList(ctx, params)
	return err
}

// EngagementsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) EngagementsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EngagementsCreate(ctx)
	return err
}

// EngagementsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) EngagementsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EngagementsDestroy(ctx, id)
	return err
}

// EngagementsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) EngagementsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EngagementsRetrieve(ctx, id)
	return err
}

// EngagementsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) EngagementsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EngagementsPartialUpdate(ctx, id)
	return err
}

// EngagementsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) EngagementsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EngagementsUpdate(ctx, id)
	return err
}

// EngagementsAcceptRisksCreate converts echo context to params.
func (w *ServerInterfaceWrapper) EngagementsAcceptRisksCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EngagementsAcceptRisksCreate(ctx, id)
	return err
}

// EngagementsCloseCreate converts echo context to params.
func (w *ServerInterfaceWrapper) EngagementsCloseCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EngagementsCloseCreate(ctx, id)
	return err
}

// EngagementsFilesRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) EngagementsFilesRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EngagementsFilesRetrieve(ctx, id)
	return err
}

// EngagementsFilesCreate converts echo context to params.
func (w *ServerInterfaceWrapper) EngagementsFilesCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EngagementsFilesCreate(ctx, id)
	return err
}

// EngagementsGenerateReportCreate converts echo context to params.
func (w *ServerInterfaceWrapper) EngagementsGenerateReportCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EngagementsGenerateReportCreate(ctx, id)
	return err
}

// EngagementsNotesRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) EngagementsNotesRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EngagementsNotesRetrieve(ctx, id)
	return err
}

// EngagementsNotesCreate converts echo context to params.
func (w *ServerInterfaceWrapper) EngagementsNotesCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EngagementsNotesCreate(ctx, id)
	return err
}

// EngagementsReopenCreate converts echo context to params.
func (w *ServerInterfaceWrapper) EngagementsReopenCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EngagementsReopenCreate(ctx, id)
	return err
}

// FindingTemplatesList converts echo context to params.
func (w *ServerInterfaceWrapper) FindingTemplatesList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindingTemplatesListParams
	// ------------- Optional query parameter "cwe" -------------

	err = runtime.BindQueryParameter("form", true, false, "cwe", ctx.QueryParams(), &params.Cwe)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cwe: %s", err))
	}

	// ------------- Optional query parameter "description" -------------

	err = runtime.BindQueryParameter("form", true, false, "description", ctx.QueryParams(), &params.Description)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter description: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "mitigation" -------------

	err = runtime.BindQueryParameter("form", true, false, "mitigation", ctx.QueryParams(), &params.Mitigation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter mitigation: %s", err))
	}

	// ------------- Optional query parameter "not_tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "not_tag", ctx.QueryParams(), &params.NotTag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_tag: %s", err))
	}

	// ------------- Optional query parameter "not_tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "not_tags", ctx.QueryParams(), &params.NotTags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_tags: %s", err))
	}

	// ------------- Optional query parameter "o" -------------

	err = runtime.BindQueryParameter("form", false, false, "o", ctx.QueryParams(), &params.O)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter o: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "severity" -------------

	err = runtime.BindQueryParameter("form", true, false, "severity", ctx.QueryParams(), &params.Severity)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter severity: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "title" -------------

	err = runtime.BindQueryParameter("form", true, false, "title", ctx.QueryParams(), &params.Title)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter title: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingTemplatesList(ctx, params)
	return err
}

// FindingTemplatesCreate converts echo context to params.
func (w *ServerInterfaceWrapper) FindingTemplatesCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingTemplatesCreate(ctx)
	return err
}

// FindingTemplatesDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) FindingTemplatesDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingTemplatesDestroy(ctx, id)
	return err
}

// FindingTemplatesRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) FindingTemplatesRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingTemplatesRetrieve(ctx, id)
	return err
}

// FindingTemplatesPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) FindingTemplatesPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingTemplatesPartialUpdate(ctx, id)
	return err
}

// FindingTemplatesUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) FindingTemplatesUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingTemplatesUpdate(ctx, id)
	return err
}

// FindingsList converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindingsListParams
	// ------------- Optional query parameter "active" -------------

	err = runtime.BindQueryParameter("form", true, false, "active", ctx.QueryParams(), &params.Active)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter active: %s", err))
	}

	// ------------- Optional query parameter "component_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "component_name", ctx.QueryParams(), &params.ComponentName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter component_name: %s", err))
	}

	// ------------- Optional query parameter "component_version" -------------

	err = runtime.BindQueryParameter("form", true, false, "component_version", ctx.QueryParams(), &params.ComponentVersion)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter component_version: %s", err))
	}

	// ------------- Optional query parameter "created" -------------

	err = runtime.BindQueryParameter("form", true, false, "created", ctx.QueryParams(), &params.Created)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter created: %s", err))
	}

	// ------------- Optional query parameter "cve" -------------

	err = runtime.BindQueryParameter("form", true, false, "cve", ctx.QueryParams(), &params.Cve)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cve: %s", err))
	}

	// ------------- Optional query parameter "cvssv3" -------------

	err = runtime.BindQueryParameter("form", true, false, "cvssv3", ctx.QueryParams(), &params.Cvssv3)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cvssv3: %s", err))
	}

	// ------------- Optional query parameter "cvssv3_score" -------------

	err = runtime.BindQueryParameter("form", true, false, "cvssv3_score", ctx.QueryParams(), &params.Cvssv3Score)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cvssv3_score: %s", err))
	}

	// ------------- Optional query parameter "cwe" -------------

	err = runtime.BindQueryParameter("form", false, false, "cwe", ctx.QueryParams(), &params.Cwe)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cwe: %s", err))
	}

	// ------------- Optional query parameter "date" -------------

	err = runtime.BindQueryParameter("form", true, false, "date", ctx.QueryParams(), &params.Date)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter date: %s", err))
	}

	// ------------- Optional query parameter "defect_review_requested_by" -------------

	err = runtime.BindQueryParameter("form", false, false, "defect_review_requested_by", ctx.QueryParams(), &params.DefectReviewRequestedBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter defect_review_requested_by: %s", err))
	}

	// ------------- Optional query parameter "description" -------------

	err = runtime.BindQueryParameter("form", true, false, "description", ctx.QueryParams(), &params.Description)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter description: %s", err))
	}

	// ------------- Optional query parameter "duplicate" -------------

	err = runtime.BindQueryParameter("form", true, false, "duplicate", ctx.QueryParams(), &params.Duplicate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duplicate: %s", err))
	}

	// ------------- Optional query parameter "duplicate_finding" -------------

	err = runtime.BindQueryParameter("form", true, false, "duplicate_finding", ctx.QueryParams(), &params.DuplicateFinding)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duplicate_finding: %s", err))
	}

	// ------------- Optional query parameter "dynamic_finding" -------------

	err = runtime.BindQueryParameter("form", true, false, "dynamic_finding", ctx.QueryParams(), &params.DynamicFinding)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dynamic_finding: %s", err))
	}

	// ------------- Optional query parameter "endpoints" -------------

	err = runtime.BindQueryParameter("form", false, false, "endpoints", ctx.QueryParams(), &params.Endpoints)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endpoints: %s", err))
	}

	// ------------- Optional query parameter "false_p" -------------

	err = runtime.BindQueryParameter("form", true, false, "false_p", ctx.QueryParams(), &params.FalseP)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter false_p: %s", err))
	}

	// ------------- Optional query parameter "file_path" -------------

	err = runtime.BindQueryParameter("form", true, false, "file_path", ctx.QueryParams(), &params.FilePath)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter file_path: %s", err))
	}

	// ------------- Optional query parameter "finding_group" -------------

	err = runtime.BindQueryParameter("form", false, false, "finding_group", ctx.QueryParams(), &params.FindingGroup)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter finding_group: %s", err))
	}

	// ------------- Optional query parameter "found_by" -------------

	err = runtime.BindQueryParameter("form", false, false, "found_by", ctx.QueryParams(), &params.FoundBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter found_by: %s", err))
	}

	// ------------- Optional query parameter "hash_code" -------------

	err = runtime.BindQueryParameter("form", true, false, "hash_code", ctx.QueryParams(), &params.HashCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash_code: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", false, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "impact" -------------

	err = runtime.BindQueryParameter("form", true, false, "impact", ctx.QueryParams(), &params.Impact)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impact: %s", err))
	}

	// ------------- Optional query parameter "is_mitigated" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_mitigated", ctx.QueryParams(), &params.IsMitigated)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_mitigated: %s", err))
	}

	// ------------- Optional query parameter "jira_change" -------------

	err = runtime.BindQueryParameter("form", true, false, "jira_change", ctx.QueryParams(), &params.JiraChange)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter jira_change: %s", err))
	}

	// ------------- Optional query parameter "jira_creation" -------------

	err = runtime.BindQueryParameter("form", true, false, "jira_creation", ctx.QueryParams(), &params.JiraCreation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter jira_creation: %s", err))
	}

	// ------------- Optional query parameter "last_reviewed" -------------

	err = runtime.BindQueryParameter("form", true, false, "last_reviewed", ctx.QueryParams(), &params.LastReviewed)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last_reviewed: %s", err))
	}

	// ------------- Optional query parameter "last_reviewed_by" -------------

	err = runtime.BindQueryParameter("form", false, false, "last_reviewed_by", ctx.QueryParams(), &params.LastReviewedBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last_reviewed_by: %s", err))
	}

	// ------------- Optional query parameter "last_status_update" -------------

	err = runtime.BindQueryParameter("form", true, false, "last_status_update", ctx.QueryParams(), &params.LastStatusUpdate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last_status_update: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "mitigated" -------------

	err = runtime.BindQueryParameter("form", true, false, "mitigated", ctx.QueryParams(), &params.Mitigated)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter mitigated: %s", err))
	}

	// ------------- Optional query parameter "mitigated_by" -------------

	err = runtime.BindQueryParameter("form", false, false, "mitigated_by", ctx.QueryParams(), &params.MitigatedBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter mitigated_by: %s", err))
	}

	// ------------- Optional query parameter "mitigation" -------------

	err = runtime.BindQueryParameter("form", true, false, "mitigation", ctx.QueryParams(), &params.Mitigation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter mitigation: %s", err))
	}

	// ------------- Optional query parameter "nb_occurences" -------------

	err = runtime.BindQueryParameter("form", false, false, "nb_occurences", ctx.QueryParams(), &params.NbOccurences)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nb_occurences: %s", err))
	}

	// ------------- Optional query parameter "not_tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "not_tag", ctx.QueryParams(), &params.NotTag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_tag: %s", err))
	}

	// ------------- Optional query parameter "not_tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "not_tags", ctx.QueryParams(), &params.NotTags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_tags: %s", err))
	}

	// ------------- Optional query parameter "not_test__engagement__product__tags__name" -------------

	err = runtime.BindQueryParameter("form", false, false, "not_test__engagement__product__tags__name", ctx.QueryParams(), &params.NotTestEngagementProductTagsName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_test__engagement__product__tags__name: %s", err))
	}

	// ------------- Optional query parameter "not_test__engagement__tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "not_test__engagement__tags", ctx.QueryParams(), &params.NotTestEngagementTags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_test__engagement__tags: %s", err))
	}

	// ------------- Optional query parameter "not_test__tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "not_test__tags", ctx.QueryParams(), &params.NotTestTags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_test__tags: %s", err))
	}

	// ------------- Optional query parameter "numerical_severity" -------------

	err = runtime.BindQueryParameter("form", true, false, "numerical_severity", ctx.QueryParams(), &params.NumericalSeverity)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter numerical_severity: %s", err))
	}

	// ------------- Optional query parameter "o" -------------

	err = runtime.BindQueryParameter("form", false, false, "o", ctx.QueryParams(), &params.O)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter o: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "out_of_scope" -------------

	err = runtime.BindQueryParameter("form", true, false, "out_of_scope", ctx.QueryParams(), &params.OutOfScope)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter out_of_scope: %s", err))
	}

	// ------------- Optional query parameter "param" -------------

	err = runtime.BindQueryParameter("form", true, false, "param", ctx.QueryParams(), &params.Param)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter param: %s", err))
	}

	// ------------- Optional query parameter "payload" -------------

	err = runtime.BindQueryParameter("form", true, false, "payload", ctx.QueryParams(), &params.Payload)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter payload: %s", err))
	}

	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// ------------- Optional query parameter "publish_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "publish_date", ctx.QueryParams(), &params.PublishDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter publish_date: %s", err))
	}

	// ------------- Optional query parameter "references" -------------

	err = runtime.BindQueryParameter("form", true, false, "references", ctx.QueryParams(), &params.References)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter references: %s", err))
	}

	// ------------- Optional query parameter "related_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "related_fields", ctx.QueryParams(), &params.RelatedFields)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter related_fields: %s", err))
	}

	// ------------- Optional query parameter "reporter" -------------

	err = runtime.BindQueryParameter("form", false, false, "reporter", ctx.QueryParams(), &params.Reporter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reporter: %s", err))
	}

	// ------------- Optional query parameter "review_requested_by" -------------

	err = runtime.BindQueryParameter("form", false, false, "review_requested_by", ctx.QueryParams(), &params.ReviewRequestedBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter review_requested_by: %s", err))
	}

	// ------------- Optional query parameter "reviewers" -------------

	err = runtime.BindQueryParameter("form", false, false, "reviewers", ctx.QueryParams(), &params.Reviewers)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reviewers: %s", err))
	}

	// ------------- Optional query parameter "risk_acceptance" -------------

	err = runtime.BindQueryParameter("form", true, false, "risk_acceptance", ctx.QueryParams(), &params.RiskAcceptance)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter risk_acceptance: %s", err))
	}

	// ------------- Optional query parameter "risk_accepted" -------------

	err = runtime.BindQueryParameter("form", true, false, "risk_accepted", ctx.QueryParams(), &params.RiskAccepted)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter risk_accepted: %s", err))
	}

	// ------------- Optional query parameter "sast_sink_object" -------------

	err = runtime.BindQueryParameter("form", true, false, "sast_sink_object", ctx.QueryParams(), &params.SastSinkObject)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sast_sink_object: %s", err))
	}

	// ------------- Optional query parameter "sast_source_file_path" -------------

	err = runtime.BindQueryParameter("form", true, false, "sast_source_file_path", ctx.QueryParams(), &params.SastSourceFilePath)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sast_source_file_path: %s", err))
	}

	// ------------- Optional query parameter "sast_source_line" -------------

	err = runtime.BindQueryParameter("form", false, false, "sast_source_line", ctx.QueryParams(), &params.SastSourceLine)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sast_source_line: %s", err))
	}

	// ------------- Optional query parameter "sast_source_object" -------------

	err = runtime.BindQueryParameter("form", true, false, "sast_source_object", ctx.QueryParams(), &params.SastSourceObject)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sast_source_object: %s", err))
	}

	// ------------- Optional query parameter "scanner_confidence" -------------

	err = runtime.BindQueryParameter("form", false, false, "scanner_confidence", ctx.QueryParams(), &params.ScannerConfidence)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanner_confidence: %s", err))
	}

	// ------------- Optional query parameter "service" -------------

	err = runtime.BindQueryParameter("form", true, false, "service", ctx.QueryParams(), &params.Service)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service: %s", err))
	}

	// ------------- Optional query parameter "severity" -------------

	err = runtime.BindQueryParameter("form", true, false, "severity", ctx.QueryParams(), &params.Severity)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter severity: %s", err))
	}

	// ------------- Optional query parameter "severity_justification" -------------

	err = runtime.BindQueryParameter("form", true, false, "severity_justification", ctx.QueryParams(), &params.SeverityJustification)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter severity_justification: %s", err))
	}

	// ------------- Optional query parameter "sla_start_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "sla_start_date", ctx.QueryParams(), &params.SlaStartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sla_start_date: %s", err))
	}

	// ------------- Optional query parameter "sonarqube_issue" -------------

	err = runtime.BindQueryParameter("form", false, false, "sonarqube_issue", ctx.QueryParams(), &params.SonarqubeIssue)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sonarqube_issue: %s", err))
	}

	// ------------- Optional query parameter "static_finding" -------------

	err = runtime.BindQueryParameter("form", true, false, "static_finding", ctx.QueryParams(), &params.StaticFinding)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter static_finding: %s", err))
	}

	// ------------- Optional query parameter "step_to_reproduce" -------------

	err = runtime.BindQueryParameter("form", true, false, "step_to_reproduce", ctx.QueryParams(), &params.StepToReproduce)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter step_to_reproduce: %s", err))
	}

	// ------------- Optional query parameter "steps_to_reproduce" -------------

	err = runtime.BindQueryParameter("form", true, false, "steps_to_reproduce", ctx.QueryParams(), &params.StepsToReproduce)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter steps_to_reproduce: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "test" -------------

	err = runtime.BindQueryParameter("form", true, false, "test", ctx.QueryParams(), &params.Test)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter test: %s", err))
	}

	// ------------- Optional query parameter "test__engagement" -------------

	err = runtime.BindQueryParameter("form", false, false, "test__engagement", ctx.QueryParams(), &params.TestEngagement)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter test__engagement: %s", err))
	}

	// ------------- Optional query parameter "test__engagement__product" -------------

	err = runtime.BindQueryParameter("form", false, false, "test__engagement__product", ctx.QueryParams(), &params.TestEngagementProduct)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter test__engagement__product: %s", err))
	}

	// ------------- Optional query parameter "test__engagement__product__tags__name" -------------

	err = runtime.BindQueryParameter("form", false, false, "test__engagement__product__tags__name", ctx.QueryParams(), &params.TestEngagementProductTagsName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter test__engagement__product__tags__name: %s", err))
	}

	// ------------- Optional query parameter "test__engagement__tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "test__engagement__tags", ctx.QueryParams(), &params.TestEngagementTags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter test__engagement__tags: %s", err))
	}

	// ------------- Optional query parameter "test__tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "test__tags", ctx.QueryParams(), &params.TestTags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter test__tags: %s", err))
	}

	// ------------- Optional query parameter "test__test_type" -------------

	err = runtime.BindQueryParameter("form", false, false, "test__test_type", ctx.QueryParams(), &params.TestTestType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter test__test_type: %s", err))
	}

	// ------------- Optional query parameter "title" -------------

	err = runtime.BindQueryParameter("form", true, false, "title", ctx.QueryParams(), &params.Title)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter title: %s", err))
	}

	// ------------- Optional query parameter "under_defect_review" -------------

	err = runtime.BindQueryParameter("form", true, false, "under_defect_review", ctx.QueryParams(), &params.UnderDefectReview)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter under_defect_review: %s", err))
	}

	// ------------- Optional query parameter "under_review" -------------

	err = runtime.BindQueryParameter("form", true, false, "under_review", ctx.QueryParams(), &params.UnderReview)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter under_review: %s", err))
	}

	// ------------- Optional query parameter "unique_id_from_tool" -------------

	err = runtime.BindQueryParameter("form", true, false, "unique_id_from_tool", ctx.QueryParams(), &params.UniqueIdFromTool)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unique_id_from_tool: %s", err))
	}

	// ------------- Optional query parameter "verified" -------------

	err = runtime.BindQueryParameter("form", true, false, "verified", ctx.QueryParams(), &params.Verified)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter verified: %s", err))
	}

	// ------------- Optional query parameter "vuln_id_from_tool" -------------

	err = runtime.BindQueryParameter("form", true, false, "vuln_id_from_tool", ctx.QueryParams(), &params.VulnIdFromTool)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vuln_id_from_tool: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsList(ctx, params)
	return err
}

// FindingsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsCreate(ctx)
	return err
}

// FindingsAcceptRisksCreate converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsAcceptRisksCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindingsAcceptRisksCreateParams
	// ------------- Optional query parameter "active" -------------

	err = runtime.BindQueryParameter("form", true, false, "active", ctx.QueryParams(), &params.Active)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter active: %s", err))
	}

	// ------------- Optional query parameter "component_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "component_name", ctx.QueryParams(), &params.ComponentName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter component_name: %s", err))
	}

	// ------------- Optional query parameter "component_version" -------------

	err = runtime.BindQueryParameter("form", true, false, "component_version", ctx.QueryParams(), &params.ComponentVersion)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter component_version: %s", err))
	}

	// ------------- Optional query parameter "created" -------------

	err = runtime.BindQueryParameter("form", true, false, "created", ctx.QueryParams(), &params.Created)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter created: %s", err))
	}

	// ------------- Optional query parameter "cve" -------------

	err = runtime.BindQueryParameter("form", true, false, "cve", ctx.QueryParams(), &params.Cve)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cve: %s", err))
	}

	// ------------- Optional query parameter "cvssv3" -------------

	err = runtime.BindQueryParameter("form", true, false, "cvssv3", ctx.QueryParams(), &params.Cvssv3)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cvssv3: %s", err))
	}

	// ------------- Optional query parameter "cvssv3_score" -------------

	err = runtime.BindQueryParameter("form", true, false, "cvssv3_score", ctx.QueryParams(), &params.Cvssv3Score)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cvssv3_score: %s", err))
	}

	// ------------- Optional query parameter "cwe" -------------

	err = runtime.BindQueryParameter("form", false, false, "cwe", ctx.QueryParams(), &params.Cwe)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cwe: %s", err))
	}

	// ------------- Optional query parameter "date" -------------

	err = runtime.BindQueryParameter("form", true, false, "date", ctx.QueryParams(), &params.Date)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter date: %s", err))
	}

	// ------------- Optional query parameter "defect_review_requested_by" -------------

	err = runtime.BindQueryParameter("form", false, false, "defect_review_requested_by", ctx.QueryParams(), &params.DefectReviewRequestedBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter defect_review_requested_by: %s", err))
	}

	// ------------- Optional query parameter "description" -------------

	err = runtime.BindQueryParameter("form", true, false, "description", ctx.QueryParams(), &params.Description)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter description: %s", err))
	}

	// ------------- Optional query parameter "duplicate" -------------

	err = runtime.BindQueryParameter("form", true, false, "duplicate", ctx.QueryParams(), &params.Duplicate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duplicate: %s", err))
	}

	// ------------- Optional query parameter "duplicate_finding" -------------

	err = runtime.BindQueryParameter("form", true, false, "duplicate_finding", ctx.QueryParams(), &params.DuplicateFinding)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duplicate_finding: %s", err))
	}

	// ------------- Optional query parameter "dynamic_finding" -------------

	err = runtime.BindQueryParameter("form", true, false, "dynamic_finding", ctx.QueryParams(), &params.DynamicFinding)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dynamic_finding: %s", err))
	}

	// ------------- Optional query parameter "endpoints" -------------

	err = runtime.BindQueryParameter("form", false, false, "endpoints", ctx.QueryParams(), &params.Endpoints)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endpoints: %s", err))
	}

	// ------------- Optional query parameter "false_p" -------------

	err = runtime.BindQueryParameter("form", true, false, "false_p", ctx.QueryParams(), &params.FalseP)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter false_p: %s", err))
	}

	// ------------- Optional query parameter "file_path" -------------

	err = runtime.BindQueryParameter("form", true, false, "file_path", ctx.QueryParams(), &params.FilePath)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter file_path: %s", err))
	}

	// ------------- Optional query parameter "finding_group" -------------

	err = runtime.BindQueryParameter("form", false, false, "finding_group", ctx.QueryParams(), &params.FindingGroup)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter finding_group: %s", err))
	}

	// ------------- Optional query parameter "found_by" -------------

	err = runtime.BindQueryParameter("form", false, false, "found_by", ctx.QueryParams(), &params.FoundBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter found_by: %s", err))
	}

	// ------------- Optional query parameter "hash_code" -------------

	err = runtime.BindQueryParameter("form", true, false, "hash_code", ctx.QueryParams(), &params.HashCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash_code: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", false, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "impact" -------------

	err = runtime.BindQueryParameter("form", true, false, "impact", ctx.QueryParams(), &params.Impact)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impact: %s", err))
	}

	// ------------- Optional query parameter "is_mitigated" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_mitigated", ctx.QueryParams(), &params.IsMitigated)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_mitigated: %s", err))
	}

	// ------------- Optional query parameter "jira_change" -------------

	err = runtime.BindQueryParameter("form", true, false, "jira_change", ctx.QueryParams(), &params.JiraChange)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter jira_change: %s", err))
	}

	// ------------- Optional query parameter "jira_creation" -------------

	err = runtime.BindQueryParameter("form", true, false, "jira_creation", ctx.QueryParams(), &params.JiraCreation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter jira_creation: %s", err))
	}

	// ------------- Optional query parameter "last_reviewed" -------------

	err = runtime.BindQueryParameter("form", true, false, "last_reviewed", ctx.QueryParams(), &params.LastReviewed)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last_reviewed: %s", err))
	}

	// ------------- Optional query parameter "last_reviewed_by" -------------

	err = runtime.BindQueryParameter("form", false, false, "last_reviewed_by", ctx.QueryParams(), &params.LastReviewedBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last_reviewed_by: %s", err))
	}

	// ------------- Optional query parameter "last_status_update" -------------

	err = runtime.BindQueryParameter("form", true, false, "last_status_update", ctx.QueryParams(), &params.LastStatusUpdate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last_status_update: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "mitigated" -------------

	err = runtime.BindQueryParameter("form", true, false, "mitigated", ctx.QueryParams(), &params.Mitigated)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter mitigated: %s", err))
	}

	// ------------- Optional query parameter "mitigated_by" -------------

	err = runtime.BindQueryParameter("form", false, false, "mitigated_by", ctx.QueryParams(), &params.MitigatedBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter mitigated_by: %s", err))
	}

	// ------------- Optional query parameter "mitigation" -------------

	err = runtime.BindQueryParameter("form", true, false, "mitigation", ctx.QueryParams(), &params.Mitigation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter mitigation: %s", err))
	}

	// ------------- Optional query parameter "nb_occurences" -------------

	err = runtime.BindQueryParameter("form", false, false, "nb_occurences", ctx.QueryParams(), &params.NbOccurences)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nb_occurences: %s", err))
	}

	// ------------- Optional query parameter "not_tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "not_tag", ctx.QueryParams(), &params.NotTag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_tag: %s", err))
	}

	// ------------- Optional query parameter "not_tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "not_tags", ctx.QueryParams(), &params.NotTags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_tags: %s", err))
	}

	// ------------- Optional query parameter "not_test__engagement__product__tags__name" -------------

	err = runtime.BindQueryParameter("form", false, false, "not_test__engagement__product__tags__name", ctx.QueryParams(), &params.NotTestEngagementProductTagsName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_test__engagement__product__tags__name: %s", err))
	}

	// ------------- Optional query parameter "not_test__engagement__tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "not_test__engagement__tags", ctx.QueryParams(), &params.NotTestEngagementTags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_test__engagement__tags: %s", err))
	}

	// ------------- Optional query parameter "not_test__tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "not_test__tags", ctx.QueryParams(), &params.NotTestTags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_test__tags: %s", err))
	}

	// ------------- Optional query parameter "numerical_severity" -------------

	err = runtime.BindQueryParameter("form", true, false, "numerical_severity", ctx.QueryParams(), &params.NumericalSeverity)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter numerical_severity: %s", err))
	}

	// ------------- Optional query parameter "o" -------------

	err = runtime.BindQueryParameter("form", false, false, "o", ctx.QueryParams(), &params.O)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter o: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "out_of_scope" -------------

	err = runtime.BindQueryParameter("form", true, false, "out_of_scope", ctx.QueryParams(), &params.OutOfScope)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter out_of_scope: %s", err))
	}

	// ------------- Optional query parameter "param" -------------

	err = runtime.BindQueryParameter("form", true, false, "param", ctx.QueryParams(), &params.Param)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter param: %s", err))
	}

	// ------------- Optional query parameter "payload" -------------

	err = runtime.BindQueryParameter("form", true, false, "payload", ctx.QueryParams(), &params.Payload)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter payload: %s", err))
	}

	// ------------- Optional query parameter "publish_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "publish_date", ctx.QueryParams(), &params.PublishDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter publish_date: %s", err))
	}

	// ------------- Optional query parameter "references" -------------

	err = runtime.BindQueryParameter("form", true, false, "references", ctx.QueryParams(), &params.References)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter references: %s", err))
	}

	// ------------- Optional query parameter "reporter" -------------

	err = runtime.BindQueryParameter("form", false, false, "reporter", ctx.QueryParams(), &params.Reporter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reporter: %s", err))
	}

	// ------------- Optional query parameter "review_requested_by" -------------

	err = runtime.BindQueryParameter("form", false, false, "review_requested_by", ctx.QueryParams(), &params.ReviewRequestedBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter review_requested_by: %s", err))
	}

	// ------------- Optional query parameter "reviewers" -------------

	err = runtime.BindQueryParameter("form", false, false, "reviewers", ctx.QueryParams(), &params.Reviewers)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reviewers: %s", err))
	}

	// ------------- Optional query parameter "risk_acceptance" -------------

	err = runtime.BindQueryParameter("form", true, false, "risk_acceptance", ctx.QueryParams(), &params.RiskAcceptance)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter risk_acceptance: %s", err))
	}

	// ------------- Optional query parameter "risk_accepted" -------------

	err = runtime.BindQueryParameter("form", true, false, "risk_accepted", ctx.QueryParams(), &params.RiskAccepted)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter risk_accepted: %s", err))
	}

	// ------------- Optional query parameter "sast_sink_object" -------------

	err = runtime.BindQueryParameter("form", true, false, "sast_sink_object", ctx.QueryParams(), &params.SastSinkObject)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sast_sink_object: %s", err))
	}

	// ------------- Optional query parameter "sast_source_file_path" -------------

	err = runtime.BindQueryParameter("form", true, false, "sast_source_file_path", ctx.QueryParams(), &params.SastSourceFilePath)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sast_source_file_path: %s", err))
	}

	// ------------- Optional query parameter "sast_source_line" -------------

	err = runtime.BindQueryParameter("form", false, false, "sast_source_line", ctx.QueryParams(), &params.SastSourceLine)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sast_source_line: %s", err))
	}

	// ------------- Optional query parameter "sast_source_object" -------------

	err = runtime.BindQueryParameter("form", true, false, "sast_source_object", ctx.QueryParams(), &params.SastSourceObject)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sast_source_object: %s", err))
	}

	// ------------- Optional query parameter "scanner_confidence" -------------

	err = runtime.BindQueryParameter("form", false, false, "scanner_confidence", ctx.QueryParams(), &params.ScannerConfidence)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanner_confidence: %s", err))
	}

	// ------------- Optional query parameter "service" -------------

	err = runtime.BindQueryParameter("form", true, false, "service", ctx.QueryParams(), &params.Service)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service: %s", err))
	}

	// ------------- Optional query parameter "severity" -------------

	err = runtime.BindQueryParameter("form", true, false, "severity", ctx.QueryParams(), &params.Severity)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter severity: %s", err))
	}

	// ------------- Optional query parameter "severity_justification" -------------

	err = runtime.BindQueryParameter("form", true, false, "severity_justification", ctx.QueryParams(), &params.SeverityJustification)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter severity_justification: %s", err))
	}

	// ------------- Optional query parameter "sla_start_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "sla_start_date", ctx.QueryParams(), &params.SlaStartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sla_start_date: %s", err))
	}

	// ------------- Optional query parameter "sonarqube_issue" -------------

	err = runtime.BindQueryParameter("form", false, false, "sonarqube_issue", ctx.QueryParams(), &params.SonarqubeIssue)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sonarqube_issue: %s", err))
	}

	// ------------- Optional query parameter "static_finding" -------------

	err = runtime.BindQueryParameter("form", true, false, "static_finding", ctx.QueryParams(), &params.StaticFinding)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter static_finding: %s", err))
	}

	// ------------- Optional query parameter "step_to_reproduce" -------------

	err = runtime.BindQueryParameter("form", true, false, "step_to_reproduce", ctx.QueryParams(), &params.StepToReproduce)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter step_to_reproduce: %s", err))
	}

	// ------------- Optional query parameter "steps_to_reproduce" -------------

	err = runtime.BindQueryParameter("form", true, false, "steps_to_reproduce", ctx.QueryParams(), &params.StepsToReproduce)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter steps_to_reproduce: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "test" -------------

	err = runtime.BindQueryParameter("form", true, false, "test", ctx.QueryParams(), &params.Test)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter test: %s", err))
	}

	// ------------- Optional query parameter "test__engagement" -------------

	err = runtime.BindQueryParameter("form", false, false, "test__engagement", ctx.QueryParams(), &params.TestEngagement)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter test__engagement: %s", err))
	}

	// ------------- Optional query parameter "test__engagement__product" -------------

	err = runtime.BindQueryParameter("form", false, false, "test__engagement__product", ctx.QueryParams(), &params.TestEngagementProduct)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter test__engagement__product: %s", err))
	}

	// ------------- Optional query parameter "test__engagement__product__tags__name" -------------

	err = runtime.BindQueryParameter("form", false, false, "test__engagement__product__tags__name", ctx.QueryParams(), &params.TestEngagementProductTagsName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter test__engagement__product__tags__name: %s", err))
	}

	// ------------- Optional query parameter "test__engagement__tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "test__engagement__tags", ctx.QueryParams(), &params.TestEngagementTags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter test__engagement__tags: %s", err))
	}

	// ------------- Optional query parameter "test__tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "test__tags", ctx.QueryParams(), &params.TestTags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter test__tags: %s", err))
	}

	// ------------- Optional query parameter "test__test_type" -------------

	err = runtime.BindQueryParameter("form", false, false, "test__test_type", ctx.QueryParams(), &params.TestTestType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter test__test_type: %s", err))
	}

	// ------------- Optional query parameter "title" -------------

	err = runtime.BindQueryParameter("form", true, false, "title", ctx.QueryParams(), &params.Title)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter title: %s", err))
	}

	// ------------- Optional query parameter "under_defect_review" -------------

	err = runtime.BindQueryParameter("form", true, false, "under_defect_review", ctx.QueryParams(), &params.UnderDefectReview)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter under_defect_review: %s", err))
	}

	// ------------- Optional query parameter "under_review" -------------

	err = runtime.BindQueryParameter("form", true, false, "under_review", ctx.QueryParams(), &params.UnderReview)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter under_review: %s", err))
	}

	// ------------- Optional query parameter "unique_id_from_tool" -------------

	err = runtime.BindQueryParameter("form", true, false, "unique_id_from_tool", ctx.QueryParams(), &params.UniqueIdFromTool)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unique_id_from_tool: %s", err))
	}

	// ------------- Optional query parameter "verified" -------------

	err = runtime.BindQueryParameter("form", true, false, "verified", ctx.QueryParams(), &params.Verified)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter verified: %s", err))
	}

	// ------------- Optional query parameter "vuln_id_from_tool" -------------

	err = runtime.BindQueryParameter("form", true, false, "vuln_id_from_tool", ctx.QueryParams(), &params.VulnIdFromTool)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vuln_id_from_tool: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsAcceptRisksCreate(ctx, params)
	return err
}

// FindingsGenerateReportCreate converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsGenerateReportCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsGenerateReportCreate(ctx)
	return err
}

// FindingsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsDestroy(ctx, id)
	return err
}

// FindingsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindingsRetrieveParams
	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// ------------- Optional query parameter "related_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "related_fields", ctx.QueryParams(), &params.RelatedFields)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter related_fields: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsRetrieve(ctx, id, params)
	return err
}

// FindingsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsPartialUpdate(ctx, id)
	return err
}

// FindingsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsUpdate(ctx, id)
	return err
}

// FindingsDuplicateList converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsDuplicateList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsDuplicateList(ctx, id)
	return err
}

// FindingsDuplicateResetCreate converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsDuplicateResetCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsDuplicateResetCreate(ctx, id)
	return err
}

// FindingsFilesRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsFilesRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsFilesRetrieve(ctx, id)
	return err
}

// FindingsFilesCreate converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsFilesCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsFilesCreate(ctx, id)
	return err
}

// FindingsMetadataDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsMetadataDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindingsMetadataDestroyParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsMetadataDestroy(ctx, id, params)
	return err
}

// FindingsMetadataList converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsMetadataList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsMetadataList(ctx, id)
	return err
}

// FindingsMetadataCreate converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsMetadataCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsMetadataCreate(ctx, id)
	return err
}

// FindingsMetadataUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsMetadataUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsMetadataUpdate(ctx, id)
	return err
}

// FindingsNotesRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsNotesRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsNotesRetrieve(ctx, id)
	return err
}

// FindingsNotesCreate converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsNotesCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsNotesCreate(ctx, id)
	return err
}

// FindingsOriginalCreate converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsOriginalCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "new_fid" -------------
	var newFid int

	err = runtime.BindStyledParameterWithLocation("simple", false, "new_fid", runtime.ParamLocationPath, ctx.Param("new_fid"), &newFid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter new_fid: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsOriginalCreate(ctx, id, newFid)
	return err
}

// FindingsRemoveNotePartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsRemoveNotePartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsRemoveNotePartialUpdate(ctx, id)
	return err
}

// FindingsRemoveTagsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsRemoveTagsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsRemoveTagsPartialUpdate(ctx, id)
	return err
}

// FindingsRemoveTagsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsRemoveTagsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsRemoveTagsUpdate(ctx, id)
	return err
}

// FindingsRequestResponseRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsRequestResponseRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsRequestResponseRetrieve(ctx, id)
	return err
}

// FindingsRequestResponseCreate converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsRequestResponseCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsRequestResponseCreate(ctx, id)
	return err
}

// FindingsTagsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsTagsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsTagsRetrieve(ctx, id)
	return err
}

// FindingsTagsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsTagsCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsTagsCreate(ctx, id)
	return err
}

// GlobalRolesList converts echo context to params.
func (w *ServerInterfaceWrapper) GlobalRolesList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GlobalRolesListParams
	// ------------- Optional query parameter "group" -------------

	err = runtime.BindQueryParameter("form", true, false, "group", ctx.QueryParams(), &params.Group)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter group: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "user" -------------

	err = runtime.BindQueryParameter("form", true, false, "user", ctx.QueryParams(), &params.User)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GlobalRolesList(ctx, params)
	return err
}

// GlobalRolesCreate converts echo context to params.
func (w *ServerInterfaceWrapper) GlobalRolesCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GlobalRolesCreate(ctx)
	return err
}

// GlobalRolesDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) GlobalRolesDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GlobalRolesDestroy(ctx, id)
	return err
}

// GlobalRolesRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) GlobalRolesRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GlobalRolesRetrieve(ctx, id)
	return err
}

// GlobalRolesPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) GlobalRolesPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GlobalRolesPartialUpdate(ctx, id)
	return err
}

// GlobalRolesUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) GlobalRolesUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GlobalRolesUpdate(ctx, id)
	return err
}

// ImportLanguagesCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ImportLanguagesCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ImportLanguagesCreate(ctx)
	return err
}

// ImportScanCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ImportScanCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ImportScanCreate(ctx)
	return err
}

// JiraConfigurationsList converts echo context to params.
func (w *ServerInterfaceWrapper) JiraConfigurationsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params JiraConfigurationsListParams
	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "url" -------------

	err = runtime.BindQueryParameter("form", true, false, "url", ctx.QueryParams(), &params.Url)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter url: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraConfigurationsList(ctx, params)
	return err
}

// JiraConfigurationsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) JiraConfigurationsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraConfigurationsCreate(ctx)
	return err
}

// JiraConfigurationsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) JiraConfigurationsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraConfigurationsDestroy(ctx, id)
	return err
}

// JiraConfigurationsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) JiraConfigurationsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraConfigurationsRetrieve(ctx, id)
	return err
}

// JiraConfigurationsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) JiraConfigurationsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraConfigurationsPartialUpdate(ctx, id)
	return err
}

// JiraConfigurationsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) JiraConfigurationsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraConfigurationsUpdate(ctx, id)
	return err
}

// JiraFindingMappingsList converts echo context to params.
func (w *ServerInterfaceWrapper) JiraFindingMappingsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params JiraFindingMappingsListParams
	// ------------- Optional query parameter "engagement" -------------

	err = runtime.BindQueryParameter("form", true, false, "engagement", ctx.QueryParams(), &params.Engagement)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter engagement: %s", err))
	}

	// ------------- Optional query parameter "finding" -------------

	err = runtime.BindQueryParameter("form", true, false, "finding", ctx.QueryParams(), &params.Finding)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter finding: %s", err))
	}

	// ------------- Optional query parameter "finding_group" -------------

	err = runtime.BindQueryParameter("form", true, false, "finding_group", ctx.QueryParams(), &params.FindingGroup)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter finding_group: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "jira_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "jira_id", ctx.QueryParams(), &params.JiraId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter jira_id: %s", err))
	}

	// ------------- Optional query parameter "jira_key" -------------

	err = runtime.BindQueryParameter("form", true, false, "jira_key", ctx.QueryParams(), &params.JiraKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter jira_key: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraFindingMappingsList(ctx, params)
	return err
}

// JiraFindingMappingsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) JiraFindingMappingsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraFindingMappingsCreate(ctx)
	return err
}

// JiraFindingMappingsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) JiraFindingMappingsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraFindingMappingsDestroy(ctx, id)
	return err
}

// JiraFindingMappingsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) JiraFindingMappingsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraFindingMappingsRetrieve(ctx, id)
	return err
}

// JiraFindingMappingsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) JiraFindingMappingsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraFindingMappingsPartialUpdate(ctx, id)
	return err
}

// JiraFindingMappingsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) JiraFindingMappingsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraFindingMappingsUpdate(ctx, id)
	return err
}

// JiraInstancesList converts echo context to params.
func (w *ServerInterfaceWrapper) JiraInstancesList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params JiraInstancesListParams
	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "url" -------------

	err = runtime.BindQueryParameter("form", true, false, "url", ctx.QueryParams(), &params.Url)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter url: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraInstancesList(ctx, params)
	return err
}

// JiraInstancesCreate converts echo context to params.
func (w *ServerInterfaceWrapper) JiraInstancesCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraInstancesCreate(ctx)
	return err
}

// JiraInstancesDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) JiraInstancesDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraInstancesDestroy(ctx, id)
	return err
}

// JiraInstancesRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) JiraInstancesRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraInstancesRetrieve(ctx, id)
	return err
}

// JiraInstancesPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) JiraInstancesPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraInstancesPartialUpdate(ctx, id)
	return err
}

// JiraInstancesUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) JiraInstancesUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraInstancesUpdate(ctx, id)
	return err
}

// JiraProductConfigurationsList converts echo context to params.
func (w *ServerInterfaceWrapper) JiraProductConfigurationsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params JiraProductConfigurationsListParams
	// ------------- Optional query parameter "component" -------------

	err = runtime.BindQueryParameter("form", true, false, "component", ctx.QueryParams(), &params.Component)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter component: %s", err))
	}

	// ------------- Optional query parameter "enable_engagement_epic_mapping" -------------

	err = runtime.BindQueryParameter("form", true, false, "enable_engagement_epic_mapping", ctx.QueryParams(), &params.EnableEngagementEpicMapping)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enable_engagement_epic_mapping: %s", err))
	}

	// ------------- Optional query parameter "engagement" -------------

	err = runtime.BindQueryParameter("form", true, false, "engagement", ctx.QueryParams(), &params.Engagement)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter engagement: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "jira_instance" -------------

	err = runtime.BindQueryParameter("form", true, false, "jira_instance", ctx.QueryParams(), &params.JiraInstance)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter jira_instance: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "product" -------------

	err = runtime.BindQueryParameter("form", true, false, "product", ctx.QueryParams(), &params.Product)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product: %s", err))
	}

	// ------------- Optional query parameter "project_key" -------------

	err = runtime.BindQueryParameter("form", true, false, "project_key", ctx.QueryParams(), &params.ProjectKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter project_key: %s", err))
	}

	// ------------- Optional query parameter "push_all_issues" -------------

	err = runtime.BindQueryParameter("form", true, false, "push_all_issues", ctx.QueryParams(), &params.PushAllIssues)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter push_all_issues: %s", err))
	}

	// ------------- Optional query parameter "push_notes" -------------

	err = runtime.BindQueryParameter("form", true, false, "push_notes", ctx.QueryParams(), &params.PushNotes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter push_notes: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraProductConfigurationsList(ctx, params)
	return err
}

// JiraProductConfigurationsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) JiraProductConfigurationsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraProductConfigurationsCreate(ctx)
	return err
}

// JiraProductConfigurationsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) JiraProductConfigurationsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraProductConfigurationsDestroy(ctx, id)
	return err
}

// JiraProductConfigurationsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) JiraProductConfigurationsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraProductConfigurationsRetrieve(ctx, id)
	return err
}

// JiraProductConfigurationsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) JiraProductConfigurationsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraProductConfigurationsPartialUpdate(ctx, id)
	return err
}

// JiraProductConfigurationsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) JiraProductConfigurationsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraProductConfigurationsUpdate(ctx, id)
	return err
}

// JiraProjectsList converts echo context to params.
func (w *ServerInterfaceWrapper) JiraProjectsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params JiraProjectsListParams
	// ------------- Optional query parameter "component" -------------

	err = runtime.BindQueryParameter("form", true, false, "component", ctx.QueryParams(), &params.Component)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter component: %s", err))
	}

	// ------------- Optional query parameter "enable_engagement_epic_mapping" -------------

	err = runtime.BindQueryParameter("form", true, false, "enable_engagement_epic_mapping", ctx.QueryParams(), &params.EnableEngagementEpicMapping)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enable_engagement_epic_mapping: %s", err))
	}

	// ------------- Optional query parameter "engagement" -------------

	err = runtime.BindQueryParameter("form", true, false, "engagement", ctx.QueryParams(), &params.Engagement)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter engagement: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "jira_instance" -------------

	err = runtime.BindQueryParameter("form", true, false, "jira_instance", ctx.QueryParams(), &params.JiraInstance)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter jira_instance: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "product" -------------

	err = runtime.BindQueryParameter("form", true, false, "product", ctx.QueryParams(), &params.Product)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product: %s", err))
	}

	// ------------- Optional query parameter "project_key" -------------

	err = runtime.BindQueryParameter("form", true, false, "project_key", ctx.QueryParams(), &params.ProjectKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter project_key: %s", err))
	}

	// ------------- Optional query parameter "push_all_issues" -------------

	err = runtime.BindQueryParameter("form", true, false, "push_all_issues", ctx.QueryParams(), &params.PushAllIssues)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter push_all_issues: %s", err))
	}

	// ------------- Optional query parameter "push_notes" -------------

	err = runtime.BindQueryParameter("form", true, false, "push_notes", ctx.QueryParams(), &params.PushNotes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter push_notes: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraProjectsList(ctx, params)
	return err
}

// JiraProjectsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) JiraProjectsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraProjectsCreate(ctx)
	return err
}

// JiraProjectsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) JiraProjectsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraProjectsDestroy(ctx, id)
	return err
}

// JiraProjectsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) JiraProjectsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraProjectsRetrieve(ctx, id)
	return err
}

// JiraProjectsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) JiraProjectsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraProjectsPartialUpdate(ctx, id)
	return err
}

// JiraProjectsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) JiraProjectsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraProjectsUpdate(ctx, id)
	return err
}

// LanguageTypesList converts echo context to params.
func (w *ServerInterfaceWrapper) LanguageTypesList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params LanguageTypesListParams
	// ------------- Optional query parameter "color" -------------

	err = runtime.BindQueryParameter("form", true, false, "color", ctx.QueryParams(), &params.Color)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter color: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "language" -------------

	err = runtime.BindQueryParameter("form", true, false, "language", ctx.QueryParams(), &params.Language)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter language: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LanguageTypesList(ctx, params)
	return err
}

// LanguageTypesCreate converts echo context to params.
func (w *ServerInterfaceWrapper) LanguageTypesCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LanguageTypesCreate(ctx)
	return err
}

// LanguageTypesDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) LanguageTypesDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LanguageTypesDestroy(ctx, id)
	return err
}

// LanguageTypesRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) LanguageTypesRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LanguageTypesRetrieve(ctx, id)
	return err
}

// LanguageTypesPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) LanguageTypesPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LanguageTypesPartialUpdate(ctx, id)
	return err
}

// LanguageTypesUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) LanguageTypesUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LanguageTypesUpdate(ctx, id)
	return err
}

// LanguagesList converts echo context to params.
func (w *ServerInterfaceWrapper) LanguagesList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params LanguagesListParams
	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "language" -------------

	err = runtime.BindQueryParameter("form", true, false, "language", ctx.QueryParams(), &params.Language)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter language: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// ------------- Optional query parameter "product" -------------

	err = runtime.BindQueryParameter("form", true, false, "product", ctx.QueryParams(), &params.Product)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LanguagesList(ctx, params)
	return err
}

// LanguagesCreate converts echo context to params.
func (w *ServerInterfaceWrapper) LanguagesCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LanguagesCreate(ctx)
	return err
}

// LanguagesDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) LanguagesDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LanguagesDestroy(ctx, id)
	return err
}

// LanguagesRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) LanguagesRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params LanguagesRetrieveParams
	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LanguagesRetrieve(ctx, id, params)
	return err
}

// LanguagesPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) LanguagesPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LanguagesPartialUpdate(ctx, id)
	return err
}

// LanguagesUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) LanguagesUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LanguagesUpdate(ctx, id)
	return err
}

// MetadataList converts echo context to params.
func (w *ServerInterfaceWrapper) MetadataList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params MetadataListParams
	// ------------- Optional query parameter "endpoint" -------------

	err = runtime.BindQueryParameter("form", true, false, "endpoint", ctx.QueryParams(), &params.Endpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endpoint: %s", err))
	}

	// ------------- Optional query parameter "finding" -------------

	err = runtime.BindQueryParameter("form", true, false, "finding", ctx.QueryParams(), &params.Finding)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter finding: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// ------------- Optional query parameter "product" -------------

	err = runtime.BindQueryParameter("form", true, false, "product", ctx.QueryParams(), &params.Product)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product: %s", err))
	}

	// ------------- Optional query parameter "value" -------------

	err = runtime.BindQueryParameter("form", true, false, "value", ctx.QueryParams(), &params.Value)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter value: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MetadataList(ctx, params)
	return err
}

// MetadataCreate converts echo context to params.
func (w *ServerInterfaceWrapper) MetadataCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MetadataCreate(ctx)
	return err
}

// MetadataDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) MetadataDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MetadataDestroy(ctx, id)
	return err
}

// MetadataRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) MetadataRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params MetadataRetrieveParams
	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MetadataRetrieve(ctx, id, params)
	return err
}

// MetadataPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) MetadataPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MetadataPartialUpdate(ctx, id)
	return err
}

// MetadataUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) MetadataUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MetadataUpdate(ctx, id)
	return err
}

// NetworkLocationsList converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkLocationsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NetworkLocationsListParams
	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "location" -------------

	err = runtime.BindQueryParameter("form", true, false, "location", ctx.QueryParams(), &params.Location)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter location: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkLocationsList(ctx, params)
	return err
}

// NetworkLocationsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkLocationsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkLocationsCreate(ctx)
	return err
}

// NetworkLocationsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkLocationsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkLocationsDestroy(ctx, id)
	return err
}

// NetworkLocationsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkLocationsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkLocationsRetrieve(ctx, id)
	return err
}

// NetworkLocationsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkLocationsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkLocationsPartialUpdate(ctx, id)
	return err
}

// NetworkLocationsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkLocationsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkLocationsUpdate(ctx, id)
	return err
}

// NoteTypeList converts echo context to params.
func (w *ServerInterfaceWrapper) NoteTypeList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NoteTypeListParams
	// ------------- Optional query parameter "description" -------------

	err = runtime.BindQueryParameter("form", true, false, "description", ctx.QueryParams(), &params.Description)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter description: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "is_active" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_active", ctx.QueryParams(), &params.IsActive)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_active: %s", err))
	}

	// ------------- Optional query parameter "is_mandatory" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_mandatory", ctx.QueryParams(), &params.IsMandatory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_mandatory: %s", err))
	}

	// ------------- Optional query parameter "is_single" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_single", ctx.QueryParams(), &params.IsSingle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_single: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NoteTypeList(ctx, params)
	return err
}

// NoteTypeCreate converts echo context to params.
func (w *ServerInterfaceWrapper) NoteTypeCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NoteTypeCreate(ctx)
	return err
}

// NoteTypeDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) NoteTypeDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NoteTypeDestroy(ctx, id)
	return err
}

// NoteTypeRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) NoteTypeRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NoteTypeRetrieve(ctx, id)
	return err
}

// NoteTypePartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) NoteTypePartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NoteTypePartialUpdate(ctx, id)
	return err
}

// NoteTypeUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) NoteTypeUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NoteTypeUpdate(ctx, id)
	return err
}

// NotesList converts echo context to params.
func (w *ServerInterfaceWrapper) NotesList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NotesListParams
	// ------------- Optional query parameter "author" -------------

	err = runtime.BindQueryParameter("form", true, false, "author", ctx.QueryParams(), &params.Author)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter author: %s", err))
	}

	// ------------- Optional query parameter "date" -------------

	err = runtime.BindQueryParameter("form", true, false, "date", ctx.QueryParams(), &params.Date)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter date: %s", err))
	}

	// ------------- Optional query parameter "edit_time" -------------

	err = runtime.BindQueryParameter("form", true, false, "edit_time", ctx.QueryParams(), &params.EditTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter edit_time: %s", err))
	}

	// ------------- Optional query parameter "edited" -------------

	err = runtime.BindQueryParameter("form", true, false, "edited", ctx.QueryParams(), &params.Edited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter edited: %s", err))
	}

	// ------------- Optional query parameter "editor" -------------

	err = runtime.BindQueryParameter("form", true, false, "editor", ctx.QueryParams(), &params.Editor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter editor: %s", err))
	}

	// ------------- Optional query parameter "entry" -------------

	err = runtime.BindQueryParameter("form", true, false, "entry", ctx.QueryParams(), &params.Entry)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entry: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "private" -------------

	err = runtime.BindQueryParameter("form", true, false, "private", ctx.QueryParams(), &params.Private)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter private: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NotesList(ctx, params)
	return err
}

// NotesRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) NotesRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NotesRetrieve(ctx, id)
	return err
}

// NotesPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) NotesPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NotesPartialUpdate(ctx, id)
	return err
}

// NotesUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) NotesUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NotesUpdate(ctx, id)
	return err
}

// NotificationsList converts echo context to params.
func (w *ServerInterfaceWrapper) NotificationsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NotificationsListParams
	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// ------------- Optional query parameter "product" -------------

	err = runtime.BindQueryParameter("form", true, false, "product", ctx.QueryParams(), &params.Product)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product: %s", err))
	}

	// ------------- Optional query parameter "user" -------------

	err = runtime.BindQueryParameter("form", true, false, "user", ctx.QueryParams(), &params.User)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NotificationsList(ctx, params)
	return err
}

// NotificationsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) NotificationsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NotificationsCreate(ctx)
	return err
}

// NotificationsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) NotificationsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NotificationsDestroy(ctx, id)
	return err
}

// NotificationsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) NotificationsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NotificationsRetrieveParams
	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NotificationsRetrieve(ctx, id, params)
	return err
}

// NotificationsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) NotificationsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NotificationsPartialUpdate(ctx, id)
	return err
}

// NotificationsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) NotificationsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NotificationsUpdate(ctx, id)
	return err
}

// Oa3SchemaRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) Oa3SchemaRetrieve(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params Oa3SchemaRetrieveParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "lang" -------------

	err = runtime.BindQueryParameter("form", true, false, "lang", ctx.QueryParams(), &params.Lang)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lang: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Oa3SchemaRetrieve(ctx, params)
	return err
}

// ProductApiScanConfigurationsList converts echo context to params.
func (w *ServerInterfaceWrapper) ProductApiScanConfigurationsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProductApiScanConfigurationsListParams
	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "product" -------------

	err = runtime.BindQueryParameter("form", true, false, "product", ctx.QueryParams(), &params.Product)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product: %s", err))
	}

	// ------------- Optional query parameter "service_key_1" -------------

	err = runtime.BindQueryParameter("form", true, false, "service_key_1", ctx.QueryParams(), &params.ServiceKey1)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service_key_1: %s", err))
	}

	// ------------- Optional query parameter "service_key_2" -------------

	err = runtime.BindQueryParameter("form", true, false, "service_key_2", ctx.QueryParams(), &params.ServiceKey2)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service_key_2: %s", err))
	}

	// ------------- Optional query parameter "service_key_3" -------------

	err = runtime.BindQueryParameter("form", true, false, "service_key_3", ctx.QueryParams(), &params.ServiceKey3)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service_key_3: %s", err))
	}

	// ------------- Optional query parameter "tool_configuration" -------------

	err = runtime.BindQueryParameter("form", true, false, "tool_configuration", ctx.QueryParams(), &params.ToolConfiguration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tool_configuration: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductApiScanConfigurationsList(ctx, params)
	return err
}

// ProductApiScanConfigurationsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ProductApiScanConfigurationsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductApiScanConfigurationsCreate(ctx)
	return err
}

// ProductApiScanConfigurationsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) ProductApiScanConfigurationsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductApiScanConfigurationsDestroy(ctx, id)
	return err
}

// ProductApiScanConfigurationsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) ProductApiScanConfigurationsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductApiScanConfigurationsRetrieve(ctx, id)
	return err
}

// ProductApiScanConfigurationsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ProductApiScanConfigurationsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductApiScanConfigurationsPartialUpdate(ctx, id)
	return err
}

// ProductApiScanConfigurationsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ProductApiScanConfigurationsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductApiScanConfigurationsUpdate(ctx, id)
	return err
}

// ProductGroupsList converts echo context to params.
func (w *ServerInterfaceWrapper) ProductGroupsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProductGroupsListParams
	// ------------- Optional query parameter "group_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "group_id", ctx.QueryParams(), &params.GroupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter group_id: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// ------------- Optional query parameter "product_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "product_id", ctx.QueryParams(), &params.ProductId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductGroupsList(ctx, params)
	return err
}

// ProductGroupsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ProductGroupsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductGroupsCreate(ctx)
	return err
}

// ProductGroupsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) ProductGroupsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductGroupsDestroy(ctx, id)
	return err
}

// ProductGroupsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) ProductGroupsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProductGroupsRetrieveParams
	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductGroupsRetrieve(ctx, id, params)
	return err
}

// ProductGroupsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ProductGroupsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductGroupsPartialUpdate(ctx, id)
	return err
}

// ProductGroupsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ProductGroupsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductGroupsUpdate(ctx, id)
	return err
}

// ProductMembersList converts echo context to params.
func (w *ServerInterfaceWrapper) ProductMembersList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProductMembersListParams
	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// ------------- Optional query parameter "product_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "product_id", ctx.QueryParams(), &params.ProductId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product_id: %s", err))
	}

	// ------------- Optional query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductMembersList(ctx, params)
	return err
}

// ProductMembersCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ProductMembersCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductMembersCreate(ctx)
	return err
}

// ProductMembersDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) ProductMembersDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductMembersDestroy(ctx, id)
	return err
}

// ProductMembersRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) ProductMembersRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProductMembersRetrieveParams
	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductMembersRetrieve(ctx, id, params)
	return err
}

// ProductMembersPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ProductMembersPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductMembersPartialUpdate(ctx, id)
	return err
}

// ProductMembersUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ProductMembersUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductMembersUpdate(ctx, id)
	return err
}

// ProductTypeGroupsList converts echo context to params.
func (w *ServerInterfaceWrapper) ProductTypeGroupsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProductTypeGroupsListParams
	// ------------- Optional query parameter "group_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "group_id", ctx.QueryParams(), &params.GroupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter group_id: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// ------------- Optional query parameter "product_type_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "product_type_id", ctx.QueryParams(), &params.ProductTypeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product_type_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductTypeGroupsList(ctx, params)
	return err
}

// ProductTypeGroupsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ProductTypeGroupsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductTypeGroupsCreate(ctx)
	return err
}

// ProductTypeGroupsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) ProductTypeGroupsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductTypeGroupsDestroy(ctx, id)
	return err
}

// ProductTypeGroupsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) ProductTypeGroupsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProductTypeGroupsRetrieveParams
	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductTypeGroupsRetrieve(ctx, id, params)
	return err
}

// ProductTypeGroupsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ProductTypeGroupsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductTypeGroupsPartialUpdate(ctx, id)
	return err
}

// ProductTypeGroupsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ProductTypeGroupsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductTypeGroupsUpdate(ctx, id)
	return err
}

// ProductTypeMembersList converts echo context to params.
func (w *ServerInterfaceWrapper) ProductTypeMembersList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProductTypeMembersListParams
	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// ------------- Optional query parameter "product_type_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "product_type_id", ctx.QueryParams(), &params.ProductTypeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product_type_id: %s", err))
	}

	// ------------- Optional query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductTypeMembersList(ctx, params)
	return err
}

// ProductTypeMembersCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ProductTypeMembersCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductTypeMembersCreate(ctx)
	return err
}

// ProductTypeMembersDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) ProductTypeMembersDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductTypeMembersDestroy(ctx, id)
	return err
}

// ProductTypeMembersRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) ProductTypeMembersRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProductTypeMembersRetrieveParams
	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductTypeMembersRetrieve(ctx, id, params)
	return err
}

// ProductTypeMembersPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ProductTypeMembersPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductTypeMembersPartialUpdate(ctx, id)
	return err
}

// ProductTypeMembersUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ProductTypeMembersUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductTypeMembersUpdate(ctx, id)
	return err
}

// ProductTypesList converts echo context to params.
func (w *ServerInterfaceWrapper) ProductTypesList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProductTypesListParams
	// ------------- Optional query parameter "created" -------------

	err = runtime.BindQueryParameter("form", true, false, "created", ctx.QueryParams(), &params.Created)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter created: %s", err))
	}

	// ------------- Optional query parameter "critical_product" -------------

	err = runtime.BindQueryParameter("form", true, false, "critical_product", ctx.QueryParams(), &params.CriticalProduct)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter critical_product: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "key_product" -------------

	err = runtime.BindQueryParameter("form", true, false, "key_product", ctx.QueryParams(), &params.KeyProduct)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key_product: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// ------------- Optional query parameter "updated" -------------

	err = runtime.BindQueryParameter("form", true, false, "updated", ctx.QueryParams(), &params.Updated)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter updated: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductTypesList(ctx, params)
	return err
}

// ProductTypesCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ProductTypesCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductTypesCreate(ctx)
	return err
}

// ProductTypesDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) ProductTypesDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductTypesDestroy(ctx, id)
	return err
}

// ProductTypesRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) ProductTypesRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProductTypesRetrieveParams
	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductTypesRetrieve(ctx, id, params)
	return err
}

// ProductTypesPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ProductTypesPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductTypesPartialUpdate(ctx, id)
	return err
}

// ProductTypesUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ProductTypesUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductTypesUpdate(ctx, id)
	return err
}

// ProductTypesGenerateReportCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ProductTypesGenerateReportCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductTypesGenerateReportCreate(ctx, id)
	return err
}

// ProductsList converts echo context to params.
func (w *ServerInterfaceWrapper) ProductsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProductsListParams
	// ------------- Optional query parameter "business_criticality" -------------

	err = runtime.BindQueryParameter("form", true, false, "business_criticality", ctx.QueryParams(), &params.BusinessCriticality)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter business_criticality: %s", err))
	}

	// ------------- Optional query parameter "created" -------------

	err = runtime.BindQueryParameter("form", true, false, "created", ctx.QueryParams(), &params.Created)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter created: %s", err))
	}

	// ------------- Optional query parameter "description" -------------

	err = runtime.BindQueryParameter("form", true, false, "description", ctx.QueryParams(), &params.Description)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter description: %s", err))
	}

	// ------------- Optional query parameter "external_audience" -------------

	err = runtime.BindQueryParameter("form", true, false, "external_audience", ctx.QueryParams(), &params.ExternalAudience)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter external_audience: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", false, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "internet_accessible" -------------

	err = runtime.BindQueryParameter("form", true, false, "internet_accessible", ctx.QueryParams(), &params.InternetAccessible)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter internet_accessible: %s", err))
	}

	// ------------- Optional query parameter "lifecycle" -------------

	err = runtime.BindQueryParameter("form", true, false, "lifecycle", ctx.QueryParams(), &params.Lifecycle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lifecycle: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "not_tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "not_tag", ctx.QueryParams(), &params.NotTag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_tag: %s", err))
	}

	// ------------- Optional query parameter "not_tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "not_tags", ctx.QueryParams(), &params.NotTags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_tags: %s", err))
	}

	// ------------- Optional query parameter "o" -------------

	err = runtime.BindQueryParameter("form", false, false, "o", ctx.QueryParams(), &params.O)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter o: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "origin" -------------

	err = runtime.BindQueryParameter("form", true, false, "origin", ctx.QueryParams(), &params.Origin)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter origin: %s", err))
	}

	// ------------- Optional query parameter "platform" -------------

	err = runtime.BindQueryParameter("form", true, false, "platform", ctx.QueryParams(), &params.Platform)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter platform: %s", err))
	}

	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// ------------- Optional query parameter "prod_numeric_grade" -------------

	err = runtime.BindQueryParameter("form", false, false, "prod_numeric_grade", ctx.QueryParams(), &params.ProdNumericGrade)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prod_numeric_grade: %s", err))
	}

	// ------------- Optional query parameter "prod_type" -------------

	err = runtime.BindQueryParameter("form", false, false, "prod_type", ctx.QueryParams(), &params.ProdType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prod_type: %s", err))
	}

	// ------------- Optional query parameter "product_manager" -------------

	err = runtime.BindQueryParameter("form", false, false, "product_manager", ctx.QueryParams(), &params.ProductManager)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product_manager: %s", err))
	}

	// ------------- Optional query parameter "regulations" -------------

	err = runtime.BindQueryParameter("form", false, false, "regulations", ctx.QueryParams(), &params.Regulations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regulations: %s", err))
	}

	// ------------- Optional query parameter "revenue" -------------

	err = runtime.BindQueryParameter("form", true, false, "revenue", ctx.QueryParams(), &params.Revenue)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revenue: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "team_manager" -------------

	err = runtime.BindQueryParameter("form", false, false, "team_manager", ctx.QueryParams(), &params.TeamManager)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter team_manager: %s", err))
	}

	// ------------- Optional query parameter "technical_contact" -------------

	err = runtime.BindQueryParameter("form", false, false, "technical_contact", ctx.QueryParams(), &params.TechnicalContact)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter technical_contact: %s", err))
	}

	// ------------- Optional query parameter "tid" -------------

	err = runtime.BindQueryParameter("form", false, false, "tid", ctx.QueryParams(), &params.Tid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tid: %s", err))
	}

	// ------------- Optional query parameter "updated" -------------

	err = runtime.BindQueryParameter("form", true, false, "updated", ctx.QueryParams(), &params.Updated)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter updated: %s", err))
	}

	// ------------- Optional query parameter "user_records" -------------

	err = runtime.BindQueryParameter("form", false, false, "user_records", ctx.QueryParams(), &params.UserRecords)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_records: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductsList(ctx, params)
	return err
}

// ProductsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ProductsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductsCreate(ctx)
	return err
}

// ProductsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) ProductsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductsDestroy(ctx, id)
	return err
}

// ProductsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) ProductsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProductsRetrieveParams
	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductsRetrieve(ctx, id, params)
	return err
}

// ProductsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ProductsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductsPartialUpdate(ctx, id)
	return err
}

// ProductsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ProductsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductsUpdate(ctx, id)
	return err
}

// ProductsGenerateReportCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ProductsGenerateReportCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductsGenerateReportCreate(ctx, id)
	return err
}

// RegulationsList converts echo context to params.
func (w *ServerInterfaceWrapper) RegulationsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegulationsListParams
	// ------------- Optional query parameter "description" -------------

	err = runtime.BindQueryParameter("form", true, false, "description", ctx.QueryParams(), &params.Description)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter description: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegulationsList(ctx, params)
	return err
}

// RegulationsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) RegulationsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegulationsCreate(ctx)
	return err
}

// RegulationsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) RegulationsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegulationsDestroy(ctx, id)
	return err
}

// RegulationsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) RegulationsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegulationsRetrieve(ctx, id)
	return err
}

// RegulationsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) RegulationsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegulationsPartialUpdate(ctx, id)
	return err
}

// RegulationsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) RegulationsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegulationsUpdate(ctx, id)
	return err
}

// ReimportScanCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ReimportScanCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReimportScanCreate(ctx)
	return err
}

// RolesList converts echo context to params.
func (w *ServerInterfaceWrapper) RolesList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params RolesListParams
	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RolesList(ctx, params)
	return err
}

// RolesRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) RolesRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RolesRetrieve(ctx, id)
	return err
}

// SonarqubeIssuesList converts echo context to params.
func (w *ServerInterfaceWrapper) SonarqubeIssuesList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SonarqubeIssuesListParams
	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "key" -------------

	err = runtime.BindQueryParameter("form", true, false, "key", ctx.QueryParams(), &params.Key)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SonarqubeIssuesList(ctx, params)
	return err
}

// SonarqubeIssuesCreate converts echo context to params.
func (w *ServerInterfaceWrapper) SonarqubeIssuesCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SonarqubeIssuesCreate(ctx)
	return err
}

// SonarqubeIssuesDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) SonarqubeIssuesDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SonarqubeIssuesDestroy(ctx, id)
	return err
}

// SonarqubeIssuesRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) SonarqubeIssuesRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SonarqubeIssuesRetrieve(ctx, id)
	return err
}

// SonarqubeIssuesPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) SonarqubeIssuesPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SonarqubeIssuesPartialUpdate(ctx, id)
	return err
}

// SonarqubeIssuesUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) SonarqubeIssuesUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SonarqubeIssuesUpdate(ctx, id)
	return err
}

// SonarqubeTransitionsList converts echo context to params.
func (w *ServerInterfaceWrapper) SonarqubeTransitionsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SonarqubeTransitionsListParams
	// ------------- Optional query parameter "finding_status" -------------

	err = runtime.BindQueryParameter("form", true, false, "finding_status", ctx.QueryParams(), &params.FindingStatus)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter finding_status: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "sonarqube_issue" -------------

	err = runtime.BindQueryParameter("form", true, false, "sonarqube_issue", ctx.QueryParams(), &params.SonarqubeIssue)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sonarqube_issue: %s", err))
	}

	// ------------- Optional query parameter "sonarqube_status" -------------

	err = runtime.BindQueryParameter("form", true, false, "sonarqube_status", ctx.QueryParams(), &params.SonarqubeStatus)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sonarqube_status: %s", err))
	}

	// ------------- Optional query parameter "transitions" -------------

	err = runtime.BindQueryParameter("form", true, false, "transitions", ctx.QueryParams(), &params.Transitions)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter transitions: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SonarqubeTransitionsList(ctx, params)
	return err
}

// SonarqubeTransitionsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) SonarqubeTransitionsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SonarqubeTransitionsCreate(ctx)
	return err
}

// SonarqubeTransitionsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) SonarqubeTransitionsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SonarqubeTransitionsDestroy(ctx, id)
	return err
}

// SonarqubeTransitionsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) SonarqubeTransitionsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SonarqubeTransitionsRetrieve(ctx, id)
	return err
}

// SonarqubeTransitionsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) SonarqubeTransitionsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SonarqubeTransitionsPartialUpdate(ctx, id)
	return err
}

// SonarqubeTransitionsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) SonarqubeTransitionsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SonarqubeTransitionsUpdate(ctx, id)
	return err
}

// StubFindingsList converts echo context to params.
func (w *ServerInterfaceWrapper) StubFindingsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params StubFindingsListParams
	// ------------- Optional query parameter "date" -------------

	err = runtime.BindQueryParameter("form", true, false, "date", ctx.QueryParams(), &params.Date)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter date: %s", err))
	}

	// ------------- Optional query parameter "description" -------------

	err = runtime.BindQueryParameter("form", true, false, "description", ctx.QueryParams(), &params.Description)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter description: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "severity" -------------

	err = runtime.BindQueryParameter("form", true, false, "severity", ctx.QueryParams(), &params.Severity)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter severity: %s", err))
	}

	// ------------- Optional query parameter "title" -------------

	err = runtime.BindQueryParameter("form", true, false, "title", ctx.QueryParams(), &params.Title)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter title: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StubFindingsList(ctx, params)
	return err
}

// StubFindingsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) StubFindingsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StubFindingsCreate(ctx)
	return err
}

// StubFindingsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) StubFindingsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StubFindingsDestroy(ctx, id)
	return err
}

// StubFindingsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) StubFindingsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StubFindingsRetrieve(ctx, id)
	return err
}

// StubFindingsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) StubFindingsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StubFindingsPartialUpdate(ctx, id)
	return err
}

// StubFindingsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) StubFindingsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StubFindingsUpdate(ctx, id)
	return err
}

// SystemSettingsList converts echo context to params.
func (w *ServerInterfaceWrapper) SystemSettingsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SystemSettingsListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SystemSettingsList(ctx, params)
	return err
}

// SystemSettingsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) SystemSettingsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SystemSettingsPartialUpdate(ctx, id)
	return err
}

// SystemSettingsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) SystemSettingsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SystemSettingsUpdate(ctx, id)
	return err
}

// TechnologiesList converts echo context to params.
func (w *ServerInterfaceWrapper) TechnologiesList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params TechnologiesListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "not_tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "not_tag", ctx.QueryParams(), &params.NotTag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_tag: %s", err))
	}

	// ------------- Optional query parameter "not_tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "not_tags", ctx.QueryParams(), &params.NotTags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_tags: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "product" -------------

	err = runtime.BindQueryParameter("form", true, false, "product", ctx.QueryParams(), &params.Product)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "user" -------------

	err = runtime.BindQueryParameter("form", true, false, "user", ctx.QueryParams(), &params.User)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user: %s", err))
	}

	// ------------- Optional query parameter "version" -------------

	err = runtime.BindQueryParameter("form", true, false, "version", ctx.QueryParams(), &params.Version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TechnologiesList(ctx, params)
	return err
}

// TechnologiesCreate converts echo context to params.
func (w *ServerInterfaceWrapper) TechnologiesCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TechnologiesCreate(ctx)
	return err
}

// TechnologiesDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) TechnologiesDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TechnologiesDestroy(ctx, id)
	return err
}

// TechnologiesRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) TechnologiesRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TechnologiesRetrieve(ctx, id)
	return err
}

// TechnologiesPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) TechnologiesPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TechnologiesPartialUpdate(ctx, id)
	return err
}

// TechnologiesUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) TechnologiesUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TechnologiesUpdate(ctx, id)
	return err
}

// TestImportsList converts echo context to params.
func (w *ServerInterfaceWrapper) TestImportsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params TestImportsListParams
	// ------------- Optional query parameter "branch_tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "branch_tag", ctx.QueryParams(), &params.BranchTag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter branch_tag: %s", err))
	}

	// ------------- Optional query parameter "build_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "build_id", ctx.QueryParams(), &params.BuildId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter build_id: %s", err))
	}

	// ------------- Optional query parameter "commit_hash" -------------

	err = runtime.BindQueryParameter("form", true, false, "commit_hash", ctx.QueryParams(), &params.CommitHash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter commit_hash: %s", err))
	}

	// ------------- Optional query parameter "findings_affected" -------------

	err = runtime.BindQueryParameter("form", true, false, "findings_affected", ctx.QueryParams(), &params.FindingsAffected)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter findings_affected: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// ------------- Optional query parameter "test" -------------

	err = runtime.BindQueryParameter("form", true, false, "test", ctx.QueryParams(), &params.Test)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter test: %s", err))
	}

	// ------------- Optional query parameter "test_import_finding_action__action" -------------

	err = runtime.BindQueryParameter("form", true, false, "test_import_finding_action__action", ctx.QueryParams(), &params.TestImportFindingActionAction)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter test_import_finding_action__action: %s", err))
	}

	// ------------- Optional query parameter "test_import_finding_action__created" -------------

	err = runtime.BindQueryParameter("form", true, false, "test_import_finding_action__created", ctx.QueryParams(), &params.TestImportFindingActionCreated)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter test_import_finding_action__created: %s", err))
	}

	// ------------- Optional query parameter "test_import_finding_action__finding" -------------

	err = runtime.BindQueryParameter("form", true, false, "test_import_finding_action__finding", ctx.QueryParams(), &params.TestImportFindingActionFinding)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter test_import_finding_action__finding: %s", err))
	}

	// ------------- Optional query parameter "version" -------------

	err = runtime.BindQueryParameter("form", true, false, "version", ctx.QueryParams(), &params.Version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestImportsList(ctx, params)
	return err
}

// TestImportsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) TestImportsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestImportsCreate(ctx)
	return err
}

// TestImportsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) TestImportsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestImportsDestroy(ctx, id)
	return err
}

// TestImportsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) TestImportsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params TestImportsRetrieveParams
	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestImportsRetrieve(ctx, id, params)
	return err
}

// TestImportsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) TestImportsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestImportsPartialUpdate(ctx, id)
	return err
}

// TestImportsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) TestImportsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestImportsUpdate(ctx, id)
	return err
}

// TestTypesList converts echo context to params.
func (w *ServerInterfaceWrapper) TestTypesList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params TestTypesListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestTypesList(ctx, params)
	return err
}

// TestTypesCreate converts echo context to params.
func (w *ServerInterfaceWrapper) TestTypesCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestTypesCreate(ctx)
	return err
}

// TestTypesRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) TestTypesRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestTypesRetrieve(ctx, id)
	return err
}

// TestTypesPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) TestTypesPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestTypesPartialUpdate(ctx, id)
	return err
}

// TestTypesUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) TestTypesUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestTypesUpdate(ctx, id)
	return err
}

// TestsList converts echo context to params.
func (w *ServerInterfaceWrapper) TestsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params TestsListParams
	// ------------- Optional query parameter "actual_time" -------------

	err = runtime.BindQueryParameter("form", true, false, "actual_time", ctx.QueryParams(), &params.ActualTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter actual_time: %s", err))
	}

	// ------------- Optional query parameter "api_scan_configuration" -------------

	err = runtime.BindQueryParameter("form", true, false, "api_scan_configuration", ctx.QueryParams(), &params.ApiScanConfiguration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter api_scan_configuration: %s", err))
	}

	// ------------- Optional query parameter "branch_tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "branch_tag", ctx.QueryParams(), &params.BranchTag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter branch_tag: %s", err))
	}

	// ------------- Optional query parameter "build_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "build_id", ctx.QueryParams(), &params.BuildId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter build_id: %s", err))
	}

	// ------------- Optional query parameter "commit_hash" -------------

	err = runtime.BindQueryParameter("form", true, false, "commit_hash", ctx.QueryParams(), &params.CommitHash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter commit_hash: %s", err))
	}

	// ------------- Optional query parameter "engagement" -------------

	err = runtime.BindQueryParameter("form", true, false, "engagement", ctx.QueryParams(), &params.Engagement)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter engagement: %s", err))
	}

	// ------------- Optional query parameter "engagement__product__tags__name" -------------

	err = runtime.BindQueryParameter("form", false, false, "engagement__product__tags__name", ctx.QueryParams(), &params.EngagementProductTagsName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter engagement__product__tags__name: %s", err))
	}

	// ------------- Optional query parameter "engagement__tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "engagement__tags", ctx.QueryParams(), &params.EngagementTags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter engagement__tags: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "not_engagement__product__tags__name" -------------

	err = runtime.BindQueryParameter("form", false, false, "not_engagement__product__tags__name", ctx.QueryParams(), &params.NotEngagementProductTagsName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_engagement__product__tags__name: %s", err))
	}

	// ------------- Optional query parameter "not_engagement__tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "not_engagement__tags", ctx.QueryParams(), &params.NotEngagementTags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_engagement__tags: %s", err))
	}

	// ------------- Optional query parameter "not_tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "not_tag", ctx.QueryParams(), &params.NotTag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_tag: %s", err))
	}

	// ------------- Optional query parameter "not_tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "not_tags", ctx.QueryParams(), &params.NotTags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_tags: %s", err))
	}

	// ------------- Optional query parameter "notes" -------------

	err = runtime.BindQueryParameter("form", true, false, "notes", ctx.QueryParams(), &params.Notes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter notes: %s", err))
	}

	// ------------- Optional query parameter "o" -------------

	err = runtime.BindQueryParameter("form", false, false, "o", ctx.QueryParams(), &params.O)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter o: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "percent_complete" -------------

	err = runtime.BindQueryParameter("form", true, false, "percent_complete", ctx.QueryParams(), &params.PercentComplete)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter percent_complete: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "target_end" -------------

	err = runtime.BindQueryParameter("form", true, false, "target_end", ctx.QueryParams(), &params.TargetEnd)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter target_end: %s", err))
	}

	// ------------- Optional query parameter "target_start" -------------

	err = runtime.BindQueryParameter("form", true, false, "target_start", ctx.QueryParams(), &params.TargetStart)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter target_start: %s", err))
	}

	// ------------- Optional query parameter "test_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "test_type", ctx.QueryParams(), &params.TestType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter test_type: %s", err))
	}

	// ------------- Optional query parameter "title" -------------

	err = runtime.BindQueryParameter("form", true, false, "title", ctx.QueryParams(), &params.Title)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter title: %s", err))
	}

	// ------------- Optional query parameter "version" -------------

	err = runtime.BindQueryParameter("form", true, false, "version", ctx.QueryParams(), &params.Version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestsList(ctx, params)
	return err
}

// TestsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) TestsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestsCreate(ctx)
	return err
}

// TestsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) TestsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestsDestroy(ctx, id)
	return err
}

// TestsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) TestsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestsRetrieve(ctx, id)
	return err
}

// TestsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) TestsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestsPartialUpdate(ctx, id)
	return err
}

// TestsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) TestsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestsUpdate(ctx, id)
	return err
}

// TestsAcceptRisksCreate converts echo context to params.
func (w *ServerInterfaceWrapper) TestsAcceptRisksCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestsAcceptRisksCreate(ctx, id)
	return err
}

// TestsFilesRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) TestsFilesRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestsFilesRetrieve(ctx, id)
	return err
}

// TestsFilesCreate converts echo context to params.
func (w *ServerInterfaceWrapper) TestsFilesCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestsFilesCreate(ctx, id)
	return err
}

// TestsGenerateReportCreate converts echo context to params.
func (w *ServerInterfaceWrapper) TestsGenerateReportCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestsGenerateReportCreate(ctx, id)
	return err
}

// TestsNotesRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) TestsNotesRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestsNotesRetrieve(ctx, id)
	return err
}

// TestsNotesCreate converts echo context to params.
func (w *ServerInterfaceWrapper) TestsNotesCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestsNotesCreate(ctx, id)
	return err
}

// ToolConfigurationsList converts echo context to params.
func (w *ServerInterfaceWrapper) ToolConfigurationsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ToolConfigurationsListParams
	// ------------- Optional query parameter "authentication_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "authentication_type", ctx.QueryParams(), &params.AuthenticationType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter authentication_type: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "tool_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "tool_type", ctx.QueryParams(), &params.ToolType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tool_type: %s", err))
	}

	// ------------- Optional query parameter "url" -------------

	err = runtime.BindQueryParameter("form", true, false, "url", ctx.QueryParams(), &params.Url)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter url: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ToolConfigurationsList(ctx, params)
	return err
}

// ToolConfigurationsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ToolConfigurationsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ToolConfigurationsCreate(ctx)
	return err
}

// ToolConfigurationsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) ToolConfigurationsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ToolConfigurationsDestroy(ctx, id)
	return err
}

// ToolConfigurationsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) ToolConfigurationsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ToolConfigurationsRetrieve(ctx, id)
	return err
}

// ToolConfigurationsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ToolConfigurationsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ToolConfigurationsPartialUpdate(ctx, id)
	return err
}

// ToolConfigurationsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ToolConfigurationsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ToolConfigurationsUpdate(ctx, id)
	return err
}

// ToolProductSettingsList converts echo context to params.
func (w *ServerInterfaceWrapper) ToolProductSettingsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ToolProductSettingsListParams
	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "product" -------------

	err = runtime.BindQueryParameter("form", true, false, "product", ctx.QueryParams(), &params.Product)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product: %s", err))
	}

	// ------------- Optional query parameter "tool_configuration" -------------

	err = runtime.BindQueryParameter("form", true, false, "tool_configuration", ctx.QueryParams(), &params.ToolConfiguration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tool_configuration: %s", err))
	}

	// ------------- Optional query parameter "tool_project_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "tool_project_id", ctx.QueryParams(), &params.ToolProjectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tool_project_id: %s", err))
	}

	// ------------- Optional query parameter "url" -------------

	err = runtime.BindQueryParameter("form", true, false, "url", ctx.QueryParams(), &params.Url)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter url: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ToolProductSettingsList(ctx, params)
	return err
}

// ToolProductSettingsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ToolProductSettingsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ToolProductSettingsCreate(ctx)
	return err
}

// ToolProductSettingsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) ToolProductSettingsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ToolProductSettingsDestroy(ctx, id)
	return err
}

// ToolProductSettingsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) ToolProductSettingsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ToolProductSettingsRetrieve(ctx, id)
	return err
}

// ToolProductSettingsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ToolProductSettingsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ToolProductSettingsPartialUpdate(ctx, id)
	return err
}

// ToolProductSettingsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ToolProductSettingsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ToolProductSettingsUpdate(ctx, id)
	return err
}

// ToolTypesList converts echo context to params.
func (w *ServerInterfaceWrapper) ToolTypesList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ToolTypesListParams
	// ------------- Optional query parameter "description" -------------

	err = runtime.BindQueryParameter("form", true, false, "description", ctx.QueryParams(), &params.Description)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter description: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ToolTypesList(ctx, params)
	return err
}

// ToolTypesCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ToolTypesCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ToolTypesCreate(ctx)
	return err
}

// ToolTypesDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) ToolTypesDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ToolTypesDestroy(ctx, id)
	return err
}

// ToolTypesRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) ToolTypesRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ToolTypesRetrieve(ctx, id)
	return err
}

// ToolTypesPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ToolTypesPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ToolTypesPartialUpdate(ctx, id)
	return err
}

// ToolTypesUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ToolTypesUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ToolTypesUpdate(ctx, id)
	return err
}

// UserContactInfosList converts echo context to params.
func (w *ServerInterfaceWrapper) UserContactInfosList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UserContactInfosListParams
	// ------------- Optional query parameter "block_execution" -------------

	err = runtime.BindQueryParameter("form", true, false, "block_execution", ctx.QueryParams(), &params.BlockExecution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter block_execution: %s", err))
	}

	// ------------- Optional query parameter "cell_number" -------------

	err = runtime.BindQueryParameter("form", true, false, "cell_number", ctx.QueryParams(), &params.CellNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cell_number: %s", err))
	}

	// ------------- Optional query parameter "force_password_reset" -------------

	err = runtime.BindQueryParameter("form", true, false, "force_password_reset", ctx.QueryParams(), &params.ForcePasswordReset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter force_password_reset: %s", err))
	}

	// ------------- Optional query parameter "github_username" -------------

	err = runtime.BindQueryParameter("form", true, false, "github_username", ctx.QueryParams(), &params.GithubUsername)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter github_username: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "phone_number" -------------

	err = runtime.BindQueryParameter("form", true, false, "phone_number", ctx.QueryParams(), &params.PhoneNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter phone_number: %s", err))
	}

	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// ------------- Optional query parameter "slack_user_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "slack_user_id", ctx.QueryParams(), &params.SlackUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slack_user_id: %s", err))
	}

	// ------------- Optional query parameter "slack_username" -------------

	err = runtime.BindQueryParameter("form", true, false, "slack_username", ctx.QueryParams(), &params.SlackUsername)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slack_username: %s", err))
	}

	// ------------- Optional query parameter "title" -------------

	err = runtime.BindQueryParameter("form", true, false, "title", ctx.QueryParams(), &params.Title)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter title: %s", err))
	}

	// ------------- Optional query parameter "twitter_username" -------------

	err = runtime.BindQueryParameter("form", true, false, "twitter_username", ctx.QueryParams(), &params.TwitterUsername)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter twitter_username: %s", err))
	}

	// ------------- Optional query parameter "user" -------------

	err = runtime.BindQueryParameter("form", true, false, "user", ctx.QueryParams(), &params.User)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UserContactInfosList(ctx, params)
	return err
}

// UserContactInfosCreate converts echo context to params.
func (w *ServerInterfaceWrapper) UserContactInfosCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UserContactInfosCreate(ctx)
	return err
}

// UserContactInfosDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) UserContactInfosDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UserContactInfosDestroy(ctx, id)
	return err
}

// UserContactInfosRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) UserContactInfosRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UserContactInfosRetrieveParams
	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UserContactInfosRetrieve(ctx, id, params)
	return err
}

// UserContactInfosPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) UserContactInfosPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UserContactInfosPartialUpdate(ctx, id)
	return err
}

// UserContactInfosUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) UserContactInfosUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UserContactInfosUpdate(ctx, id)
	return err
}

// UserProfileRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) UserProfileRetrieve(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UserProfileRetrieve(ctx)
	return err
}

// UsersList converts echo context to params.
func (w *ServerInterfaceWrapper) UsersList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersListParams
	// ------------- Optional query parameter "email" -------------

	err = runtime.BindQueryParameter("form", true, false, "email", ctx.QueryParams(), &params.Email)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter email: %s", err))
	}

	// ------------- Optional query parameter "first_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "first_name", ctx.QueryParams(), &params.FirstName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first_name: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "is_active" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_active", ctx.QueryParams(), &params.IsActive)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_active: %s", err))
	}

	// ------------- Optional query parameter "is_superuser" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_superuser", ctx.QueryParams(), &params.IsSuperuser)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_superuser: %s", err))
	}

	// ------------- Optional query parameter "last_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "last_name", ctx.QueryParams(), &params.LastName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last_name: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, false, "username", ctx.QueryParams(), &params.Username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UsersList(ctx, params)
	return err
}

// UsersCreate converts echo context to params.
func (w *ServerInterfaceWrapper) UsersCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UsersCreate(ctx)
	return err
}

// UsersDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) UsersDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UsersDestroy(ctx, id)
	return err
}

// UsersRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) UsersRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UsersRetrieve(ctx, id)
	return err
}

// UsersPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) UsersPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UsersPartialUpdate(ctx, id)
	return err
}

// UsersUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) UsersUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UsersUpdate(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/api/v2/api-token-auth/", wrapper.ApiTokenAuthCreate)
	router.GET(baseURL+"/api/v2/development_environments/", wrapper.DevelopmentEnvironmentsList)
	router.POST(baseURL+"/api/v2/development_environments/", wrapper.DevelopmentEnvironmentsCreate)
	router.DELETE(baseURL+"/api/v2/development_environments/:id/", wrapper.DevelopmentEnvironmentsDestroy)
	router.GET(baseURL+"/api/v2/development_environments/:id/", wrapper.DevelopmentEnvironmentsRetrieve)
	router.PATCH(baseURL+"/api/v2/development_environments/:id/", wrapper.DevelopmentEnvironmentsPartialUpdate)
	router.PUT(baseURL+"/api/v2/development_environments/:id/", wrapper.DevelopmentEnvironmentsUpdate)
	router.GET(baseURL+"/api/v2/dojo_group_members/", wrapper.DojoGroupMembersList)
	router.POST(baseURL+"/api/v2/dojo_group_members/", wrapper.DojoGroupMembersCreate)
	router.DELETE(baseURL+"/api/v2/dojo_group_members/:id/", wrapper.DojoGroupMembersDestroy)
	router.GET(baseURL+"/api/v2/dojo_group_members/:id/", wrapper.DojoGroupMembersRetrieve)
	router.PATCH(baseURL+"/api/v2/dojo_group_members/:id/", wrapper.DojoGroupMembersPartialUpdate)
	router.PUT(baseURL+"/api/v2/dojo_group_members/:id/", wrapper.DojoGroupMembersUpdate)
	router.GET(baseURL+"/api/v2/dojo_groups/", wrapper.DojoGroupsList)
	router.POST(baseURL+"/api/v2/dojo_groups/", wrapper.DojoGroupsCreate)
	router.DELETE(baseURL+"/api/v2/dojo_groups/:id/", wrapper.DojoGroupsDestroy)
	router.GET(baseURL+"/api/v2/dojo_groups/:id/", wrapper.DojoGroupsRetrieve)
	router.PATCH(baseURL+"/api/v2/dojo_groups/:id/", wrapper.DojoGroupsPartialUpdate)
	router.PUT(baseURL+"/api/v2/dojo_groups/:id/", wrapper.DojoGroupsUpdate)
	router.POST(baseURL+"/api/v2/endpoint_meta_import/", wrapper.EndpointMetaImportCreate)
	router.GET(baseURL+"/api/v2/endpoint_status/", wrapper.EndpointStatusList)
	router.POST(baseURL+"/api/v2/endpoint_status/", wrapper.EndpointStatusCreate)
	router.DELETE(baseURL+"/api/v2/endpoint_status/:id/", wrapper.EndpointStatusDestroy)
	router.GET(baseURL+"/api/v2/endpoint_status/:id/", wrapper.EndpointStatusRetrieve)
	router.PATCH(baseURL+"/api/v2/endpoint_status/:id/", wrapper.EndpointStatusPartialUpdate)
	router.PUT(baseURL+"/api/v2/endpoint_status/:id/", wrapper.EndpointStatusUpdate)
	router.GET(baseURL+"/api/v2/endpoints/", wrapper.EndpointsList)
	router.POST(baseURL+"/api/v2/endpoints/", wrapper.EndpointsCreate)
	router.DELETE(baseURL+"/api/v2/endpoints/:id/", wrapper.EndpointsDestroy)
	router.GET(baseURL+"/api/v2/endpoints/:id/", wrapper.EndpointsRetrieve)
	router.PATCH(baseURL+"/api/v2/endpoints/:id/", wrapper.EndpointsPartialUpdate)
	router.PUT(baseURL+"/api/v2/endpoints/:id/", wrapper.EndpointsUpdate)
	router.POST(baseURL+"/api/v2/endpoints/:id/generate_report/", wrapper.EndpointsGenerateReportCreate)
	router.GET(baseURL+"/api/v2/engagement_presets/", wrapper.EngagementPresetsList)
	router.POST(baseURL+"/api/v2/engagement_presets/", wrapper.EngagementPresetsCreate)
	router.DELETE(baseURL+"/api/v2/engagement_presets/:id/", wrapper.EngagementPresetsDestroy)
	router.GET(baseURL+"/api/v2/engagement_presets/:id/", wrapper.EngagementPresetsRetrieve)
	router.PATCH(baseURL+"/api/v2/engagement_presets/:id/", wrapper.EngagementPresetsPartialUpdate)
	router.PUT(baseURL+"/api/v2/engagement_presets/:id/", wrapper.EngagementPresetsUpdate)
	router.GET(baseURL+"/api/v2/engagements/", wrapper.EngagementsList)
	router.POST(baseURL+"/api/v2/engagements/", wrapper.EngagementsCreate)
	router.DELETE(baseURL+"/api/v2/engagements/:id/", wrapper.EngagementsDestroy)
	router.GET(baseURL+"/api/v2/engagements/:id/", wrapper.EngagementsRetrieve)
	router.PATCH(baseURL+"/api/v2/engagements/:id/", wrapper.EngagementsPartialUpdate)
	router.PUT(baseURL+"/api/v2/engagements/:id/", wrapper.EngagementsUpdate)
	router.POST(baseURL+"/api/v2/engagements/:id/accept_risks/", wrapper.EngagementsAcceptRisksCreate)
	router.POST(baseURL+"/api/v2/engagements/:id/close/", wrapper.EngagementsCloseCreate)
	router.GET(baseURL+"/api/v2/engagements/:id/files/", wrapper.EngagementsFilesRetrieve)
	router.POST(baseURL+"/api/v2/engagements/:id/files/", wrapper.EngagementsFilesCreate)
	router.POST(baseURL+"/api/v2/engagements/:id/generate_report/", wrapper.EngagementsGenerateReportCreate)
	router.GET(baseURL+"/api/v2/engagements/:id/notes/", wrapper.EngagementsNotesRetrieve)
	router.POST(baseURL+"/api/v2/engagements/:id/notes/", wrapper.EngagementsNotesCreate)
	router.POST(baseURL+"/api/v2/engagements/:id/reopen/", wrapper.EngagementsReopenCreate)
	router.GET(baseURL+"/api/v2/finding_templates/", wrapper.FindingTemplatesList)
	router.POST(baseURL+"/api/v2/finding_templates/", wrapper.FindingTemplatesCreate)
	router.DELETE(baseURL+"/api/v2/finding_templates/:id/", wrapper.FindingTemplatesDestroy)
	router.GET(baseURL+"/api/v2/finding_templates/:id/", wrapper.FindingTemplatesRetrieve)
	router.PATCH(baseURL+"/api/v2/finding_templates/:id/", wrapper.FindingTemplatesPartialUpdate)
	router.PUT(baseURL+"/api/v2/finding_templates/:id/", wrapper.FindingTemplatesUpdate)
	router.GET(baseURL+"/api/v2/findings/", wrapper.FindingsList)
	router.POST(baseURL+"/api/v2/findings/", wrapper.FindingsCreate)
	router.POST(baseURL+"/api/v2/findings/accept_risks/", wrapper.FindingsAcceptRisksCreate)
	router.POST(baseURL+"/api/v2/findings/generate_report/", wrapper.FindingsGenerateReportCreate)
	router.DELETE(baseURL+"/api/v2/findings/:id/", wrapper.FindingsDestroy)
	router.GET(baseURL+"/api/v2/findings/:id/", wrapper.FindingsRetrieve)
	router.PATCH(baseURL+"/api/v2/findings/:id/", wrapper.FindingsPartialUpdate)
	router.PUT(baseURL+"/api/v2/findings/:id/", wrapper.FindingsUpdate)
	router.GET(baseURL+"/api/v2/findings/:id/duplicate/", wrapper.FindingsDuplicateList)
	router.POST(baseURL+"/api/v2/findings/:id/duplicate/reset/", wrapper.FindingsDuplicateResetCreate)
	router.GET(baseURL+"/api/v2/findings/:id/files/", wrapper.FindingsFilesRetrieve)
	router.POST(baseURL+"/api/v2/findings/:id/files/", wrapper.FindingsFilesCreate)
	router.DELETE(baseURL+"/api/v2/findings/:id/metadata/", wrapper.FindingsMetadataDestroy)
	router.GET(baseURL+"/api/v2/findings/:id/metadata/", wrapper.FindingsMetadataList)
	router.POST(baseURL+"/api/v2/findings/:id/metadata/", wrapper.FindingsMetadataCreate)
	router.PUT(baseURL+"/api/v2/findings/:id/metadata/", wrapper.FindingsMetadataUpdate)
	router.GET(baseURL+"/api/v2/findings/:id/notes/", wrapper.FindingsNotesRetrieve)
	router.POST(baseURL+"/api/v2/findings/:id/notes/", wrapper.FindingsNotesCreate)
	router.POST(baseURL+"/api/v2/findings/:id/original/:new_fid/", wrapper.FindingsOriginalCreate)
	router.PATCH(baseURL+"/api/v2/findings/:id/remove_note/", wrapper.FindingsRemoveNotePartialUpdate)
	router.PATCH(baseURL+"/api/v2/findings/:id/remove_tags/", wrapper.FindingsRemoveTagsPartialUpdate)
	router.PUT(baseURL+"/api/v2/findings/:id/remove_tags/", wrapper.FindingsRemoveTagsUpdate)
	router.GET(baseURL+"/api/v2/findings/:id/request_response/", wrapper.FindingsRequestResponseRetrieve)
	router.POST(baseURL+"/api/v2/findings/:id/request_response/", wrapper.FindingsRequestResponseCreate)
	router.GET(baseURL+"/api/v2/findings/:id/tags/", wrapper.FindingsTagsRetrieve)
	router.POST(baseURL+"/api/v2/findings/:id/tags/", wrapper.FindingsTagsCreate)
	router.GET(baseURL+"/api/v2/global_roles/", wrapper.GlobalRolesList)
	router.POST(baseURL+"/api/v2/global_roles/", wrapper.GlobalRolesCreate)
	router.DELETE(baseURL+"/api/v2/global_roles/:id/", wrapper.GlobalRolesDestroy)
	router.GET(baseURL+"/api/v2/global_roles/:id/", wrapper.GlobalRolesRetrieve)
	router.PATCH(baseURL+"/api/v2/global_roles/:id/", wrapper.GlobalRolesPartialUpdate)
	router.PUT(baseURL+"/api/v2/global_roles/:id/", wrapper.GlobalRolesUpdate)
	router.POST(baseURL+"/api/v2/import-languages/", wrapper.ImportLanguagesCreate)
	router.POST(baseURL+"/api/v2/import-scan/", wrapper.ImportScanCreate)
	router.GET(baseURL+"/api/v2/jira_configurations/", wrapper.JiraConfigurationsList)
	router.POST(baseURL+"/api/v2/jira_configurations/", wrapper.JiraConfigurationsCreate)
	router.DELETE(baseURL+"/api/v2/jira_configurations/:id/", wrapper.JiraConfigurationsDestroy)
	router.GET(baseURL+"/api/v2/jira_configurations/:id/", wrapper.JiraConfigurationsRetrieve)
	router.PATCH(baseURL+"/api/v2/jira_configurations/:id/", wrapper.JiraConfigurationsPartialUpdate)
	router.PUT(baseURL+"/api/v2/jira_configurations/:id/", wrapper.JiraConfigurationsUpdate)
	router.GET(baseURL+"/api/v2/jira_finding_mappings/", wrapper.JiraFindingMappingsList)
	router.POST(baseURL+"/api/v2/jira_finding_mappings/", wrapper.JiraFindingMappingsCreate)
	router.DELETE(baseURL+"/api/v2/jira_finding_mappings/:id/", wrapper.JiraFindingMappingsDestroy)
	router.GET(baseURL+"/api/v2/jira_finding_mappings/:id/", wrapper.JiraFindingMappingsRetrieve)
	router.PATCH(baseURL+"/api/v2/jira_finding_mappings/:id/", wrapper.JiraFindingMappingsPartialUpdate)
	router.PUT(baseURL+"/api/v2/jira_finding_mappings/:id/", wrapper.JiraFindingMappingsUpdate)
	router.GET(baseURL+"/api/v2/jira_instances/", wrapper.JiraInstancesList)
	router.POST(baseURL+"/api/v2/jira_instances/", wrapper.JiraInstancesCreate)
	router.DELETE(baseURL+"/api/v2/jira_instances/:id/", wrapper.JiraInstancesDestroy)
	router.GET(baseURL+"/api/v2/jira_instances/:id/", wrapper.JiraInstancesRetrieve)
	router.PATCH(baseURL+"/api/v2/jira_instances/:id/", wrapper.JiraInstancesPartialUpdate)
	router.PUT(baseURL+"/api/v2/jira_instances/:id/", wrapper.JiraInstancesUpdate)
	router.GET(baseURL+"/api/v2/jira_product_configurations/", wrapper.JiraProductConfigurationsList)
	router.POST(baseURL+"/api/v2/jira_product_configurations/", wrapper.JiraProductConfigurationsCreate)
	router.DELETE(baseURL+"/api/v2/jira_product_configurations/:id/", wrapper.JiraProductConfigurationsDestroy)
	router.GET(baseURL+"/api/v2/jira_product_configurations/:id/", wrapper.JiraProductConfigurationsRetrieve)
	router.PATCH(baseURL+"/api/v2/jira_product_configurations/:id/", wrapper.JiraProductConfigurationsPartialUpdate)
	router.PUT(baseURL+"/api/v2/jira_product_configurations/:id/", wrapper.JiraProductConfigurationsUpdate)
	router.GET(baseURL+"/api/v2/jira_projects/", wrapper.JiraProjectsList)
	router.POST(baseURL+"/api/v2/jira_projects/", wrapper.JiraProjectsCreate)
	router.DELETE(baseURL+"/api/v2/jira_projects/:id/", wrapper.JiraProjectsDestroy)
	router.GET(baseURL+"/api/v2/jira_projects/:id/", wrapper.JiraProjectsRetrieve)
	router.PATCH(baseURL+"/api/v2/jira_projects/:id/", wrapper.JiraProjectsPartialUpdate)
	router.PUT(baseURL+"/api/v2/jira_projects/:id/", wrapper.JiraProjectsUpdate)
	router.GET(baseURL+"/api/v2/language_types/", wrapper.LanguageTypesList)
	router.POST(baseURL+"/api/v2/language_types/", wrapper.LanguageTypesCreate)
	router.DELETE(baseURL+"/api/v2/language_types/:id/", wrapper.LanguageTypesDestroy)
	router.GET(baseURL+"/api/v2/language_types/:id/", wrapper.LanguageTypesRetrieve)
	router.PATCH(baseURL+"/api/v2/language_types/:id/", wrapper.LanguageTypesPartialUpdate)
	router.PUT(baseURL+"/api/v2/language_types/:id/", wrapper.LanguageTypesUpdate)
	router.GET(baseURL+"/api/v2/languages/", wrapper.LanguagesList)
	router.POST(baseURL+"/api/v2/languages/", wrapper.LanguagesCreate)
	router.DELETE(baseURL+"/api/v2/languages/:id/", wrapper.LanguagesDestroy)
	router.GET(baseURL+"/api/v2/languages/:id/", wrapper.LanguagesRetrieve)
	router.PATCH(baseURL+"/api/v2/languages/:id/", wrapper.LanguagesPartialUpdate)
	router.PUT(baseURL+"/api/v2/languages/:id/", wrapper.LanguagesUpdate)
	router.GET(baseURL+"/api/v2/metadata/", wrapper.MetadataList)
	router.POST(baseURL+"/api/v2/metadata/", wrapper.MetadataCreate)
	router.DELETE(baseURL+"/api/v2/metadata/:id/", wrapper.MetadataDestroy)
	router.GET(baseURL+"/api/v2/metadata/:id/", wrapper.MetadataRetrieve)
	router.PATCH(baseURL+"/api/v2/metadata/:id/", wrapper.MetadataPartialUpdate)
	router.PUT(baseURL+"/api/v2/metadata/:id/", wrapper.MetadataUpdate)
	router.GET(baseURL+"/api/v2/network_locations/", wrapper.NetworkLocationsList)
	router.POST(baseURL+"/api/v2/network_locations/", wrapper.NetworkLocationsCreate)
	router.DELETE(baseURL+"/api/v2/network_locations/:id/", wrapper.NetworkLocationsDestroy)
	router.GET(baseURL+"/api/v2/network_locations/:id/", wrapper.NetworkLocationsRetrieve)
	router.PATCH(baseURL+"/api/v2/network_locations/:id/", wrapper.NetworkLocationsPartialUpdate)
	router.PUT(baseURL+"/api/v2/network_locations/:id/", wrapper.NetworkLocationsUpdate)
	router.GET(baseURL+"/api/v2/note_type/", wrapper.NoteTypeList)
	router.POST(baseURL+"/api/v2/note_type/", wrapper.NoteTypeCreate)
	router.DELETE(baseURL+"/api/v2/note_type/:id/", wrapper.NoteTypeDestroy)
	router.GET(baseURL+"/api/v2/note_type/:id/", wrapper.NoteTypeRetrieve)
	router.PATCH(baseURL+"/api/v2/note_type/:id/", wrapper.NoteTypePartialUpdate)
	router.PUT(baseURL+"/api/v2/note_type/:id/", wrapper.NoteTypeUpdate)
	router.GET(baseURL+"/api/v2/notes/", wrapper.NotesList)
	router.GET(baseURL+"/api/v2/notes/:id/", wrapper.NotesRetrieve)
	router.PATCH(baseURL+"/api/v2/notes/:id/", wrapper.NotesPartialUpdate)
	router.PUT(baseURL+"/api/v2/notes/:id/", wrapper.NotesUpdate)
	router.GET(baseURL+"/api/v2/notifications/", wrapper.NotificationsList)
	router.POST(baseURL+"/api/v2/notifications/", wrapper.NotificationsCreate)
	router.DELETE(baseURL+"/api/v2/notifications/:id/", wrapper.NotificationsDestroy)
	router.GET(baseURL+"/api/v2/notifications/:id/", wrapper.NotificationsRetrieve)
	router.PATCH(baseURL+"/api/v2/notifications/:id/", wrapper.NotificationsPartialUpdate)
	router.PUT(baseURL+"/api/v2/notifications/:id/", wrapper.NotificationsUpdate)
	router.GET(baseURL+"/api/v2/oa3/schema/", wrapper.Oa3SchemaRetrieve)
	router.GET(baseURL+"/api/v2/product_api_scan_configurations/", wrapper.ProductApiScanConfigurationsList)
	router.POST(baseURL+"/api/v2/product_api_scan_configurations/", wrapper.ProductApiScanConfigurationsCreate)
	router.DELETE(baseURL+"/api/v2/product_api_scan_configurations/:id/", wrapper.ProductApiScanConfigurationsDestroy)
	router.GET(baseURL+"/api/v2/product_api_scan_configurations/:id/", wrapper.ProductApiScanConfigurationsRetrieve)
	router.PATCH(baseURL+"/api/v2/product_api_scan_configurations/:id/", wrapper.ProductApiScanConfigurationsPartialUpdate)
	router.PUT(baseURL+"/api/v2/product_api_scan_configurations/:id/", wrapper.ProductApiScanConfigurationsUpdate)
	router.GET(baseURL+"/api/v2/product_groups/", wrapper.ProductGroupsList)
	router.POST(baseURL+"/api/v2/product_groups/", wrapper.ProductGroupsCreate)
	router.DELETE(baseURL+"/api/v2/product_groups/:id/", wrapper.ProductGroupsDestroy)
	router.GET(baseURL+"/api/v2/product_groups/:id/", wrapper.ProductGroupsRetrieve)
	router.PATCH(baseURL+"/api/v2/product_groups/:id/", wrapper.ProductGroupsPartialUpdate)
	router.PUT(baseURL+"/api/v2/product_groups/:id/", wrapper.ProductGroupsUpdate)
	router.GET(baseURL+"/api/v2/product_members/", wrapper.ProductMembersList)
	router.POST(baseURL+"/api/v2/product_members/", wrapper.ProductMembersCreate)
	router.DELETE(baseURL+"/api/v2/product_members/:id/", wrapper.ProductMembersDestroy)
	router.GET(baseURL+"/api/v2/product_members/:id/", wrapper.ProductMembersRetrieve)
	router.PATCH(baseURL+"/api/v2/product_members/:id/", wrapper.ProductMembersPartialUpdate)
	router.PUT(baseURL+"/api/v2/product_members/:id/", wrapper.ProductMembersUpdate)
	router.GET(baseURL+"/api/v2/product_type_groups/", wrapper.ProductTypeGroupsList)
	router.POST(baseURL+"/api/v2/product_type_groups/", wrapper.ProductTypeGroupsCreate)
	router.DELETE(baseURL+"/api/v2/product_type_groups/:id/", wrapper.ProductTypeGroupsDestroy)
	router.GET(baseURL+"/api/v2/product_type_groups/:id/", wrapper.ProductTypeGroupsRetrieve)
	router.PATCH(baseURL+"/api/v2/product_type_groups/:id/", wrapper.ProductTypeGroupsPartialUpdate)
	router.PUT(baseURL+"/api/v2/product_type_groups/:id/", wrapper.ProductTypeGroupsUpdate)
	router.GET(baseURL+"/api/v2/product_type_members/", wrapper.ProductTypeMembersList)
	router.POST(baseURL+"/api/v2/product_type_members/", wrapper.ProductTypeMembersCreate)
	router.DELETE(baseURL+"/api/v2/product_type_members/:id/", wrapper.ProductTypeMembersDestroy)
	router.GET(baseURL+"/api/v2/product_type_members/:id/", wrapper.ProductTypeMembersRetrieve)
	router.PATCH(baseURL+"/api/v2/product_type_members/:id/", wrapper.ProductTypeMembersPartialUpdate)
	router.PUT(baseURL+"/api/v2/product_type_members/:id/", wrapper.ProductTypeMembersUpdate)
	router.GET(baseURL+"/api/v2/product_types/", wrapper.ProductTypesList)
	router.POST(baseURL+"/api/v2/product_types/", wrapper.ProductTypesCreate)
	router.DELETE(baseURL+"/api/v2/product_types/:id/", wrapper.ProductTypesDestroy)
	router.GET(baseURL+"/api/v2/product_types/:id/", wrapper.ProductTypesRetrieve)
	router.PATCH(baseURL+"/api/v2/product_types/:id/", wrapper.ProductTypesPartialUpdate)
	router.PUT(baseURL+"/api/v2/product_types/:id/", wrapper.ProductTypesUpdate)
	router.POST(baseURL+"/api/v2/product_types/:id/generate_report/", wrapper.ProductTypesGenerateReportCreate)
	router.GET(baseURL+"/api/v2/products/", wrapper.ProductsList)
	router.POST(baseURL+"/api/v2/products/", wrapper.ProductsCreate)
	router.DELETE(baseURL+"/api/v2/products/:id/", wrapper.ProductsDestroy)
	router.GET(baseURL+"/api/v2/products/:id/", wrapper.ProductsRetrieve)
	router.PATCH(baseURL+"/api/v2/products/:id/", wrapper.ProductsPartialUpdate)
	router.PUT(baseURL+"/api/v2/products/:id/", wrapper.ProductsUpdate)
	router.POST(baseURL+"/api/v2/products/:id/generate_report/", wrapper.ProductsGenerateReportCreate)
	router.GET(baseURL+"/api/v2/regulations/", wrapper.RegulationsList)
	router.POST(baseURL+"/api/v2/regulations/", wrapper.RegulationsCreate)
	router.DELETE(baseURL+"/api/v2/regulations/:id/", wrapper.RegulationsDestroy)
	router.GET(baseURL+"/api/v2/regulations/:id/", wrapper.RegulationsRetrieve)
	router.PATCH(baseURL+"/api/v2/regulations/:id/", wrapper.RegulationsPartialUpdate)
	router.PUT(baseURL+"/api/v2/regulations/:id/", wrapper.RegulationsUpdate)
	router.POST(baseURL+"/api/v2/reimport-scan/", wrapper.ReimportScanCreate)
	router.GET(baseURL+"/api/v2/roles/", wrapper.RolesList)
	router.GET(baseURL+"/api/v2/roles/:id/", wrapper.RolesRetrieve)
	router.GET(baseURL+"/api/v2/sonarqube_issues/", wrapper.SonarqubeIssuesList)
	router.POST(baseURL+"/api/v2/sonarqube_issues/", wrapper.SonarqubeIssuesCreate)
	router.DELETE(baseURL+"/api/v2/sonarqube_issues/:id/", wrapper.SonarqubeIssuesDestroy)
	router.GET(baseURL+"/api/v2/sonarqube_issues/:id/", wrapper.SonarqubeIssuesRetrieve)
	router.PATCH(baseURL+"/api/v2/sonarqube_issues/:id/", wrapper.SonarqubeIssuesPartialUpdate)
	router.PUT(baseURL+"/api/v2/sonarqube_issues/:id/", wrapper.SonarqubeIssuesUpdate)
	router.GET(baseURL+"/api/v2/sonarqube_transitions/", wrapper.SonarqubeTransitionsList)
	router.POST(baseURL+"/api/v2/sonarqube_transitions/", wrapper.SonarqubeTransitionsCreate)
	router.DELETE(baseURL+"/api/v2/sonarqube_transitions/:id/", wrapper.SonarqubeTransitionsDestroy)
	router.GET(baseURL+"/api/v2/sonarqube_transitions/:id/", wrapper.SonarqubeTransitionsRetrieve)
	router.PATCH(baseURL+"/api/v2/sonarqube_transitions/:id/", wrapper.SonarqubeTransitionsPartialUpdate)
	router.PUT(baseURL+"/api/v2/sonarqube_transitions/:id/", wrapper.SonarqubeTransitionsUpdate)
	router.GET(baseURL+"/api/v2/stub_findings/", wrapper.StubFindingsList)
	router.POST(baseURL+"/api/v2/stub_findings/", wrapper.StubFindingsCreate)
	router.DELETE(baseURL+"/api/v2/stub_findings/:id/", wrapper.StubFindingsDestroy)
	router.GET(baseURL+"/api/v2/stub_findings/:id/", wrapper.StubFindingsRetrieve)
	router.PATCH(baseURL+"/api/v2/stub_findings/:id/", wrapper.StubFindingsPartialUpdate)
	router.PUT(baseURL+"/api/v2/stub_findings/:id/", wrapper.StubFindingsUpdate)
	router.GET(baseURL+"/api/v2/system_settings/", wrapper.SystemSettingsList)
	router.PATCH(baseURL+"/api/v2/system_settings/:id/", wrapper.SystemSettingsPartialUpdate)
	router.PUT(baseURL+"/api/v2/system_settings/:id/", wrapper.SystemSettingsUpdate)
	router.GET(baseURL+"/api/v2/technologies/", wrapper.TechnologiesList)
	router.POST(baseURL+"/api/v2/technologies/", wrapper.TechnologiesCreate)
	router.DELETE(baseURL+"/api/v2/technologies/:id/", wrapper.TechnologiesDestroy)
	router.GET(baseURL+"/api/v2/technologies/:id/", wrapper.TechnologiesRetrieve)
	router.PATCH(baseURL+"/api/v2/technologies/:id/", wrapper.TechnologiesPartialUpdate)
	router.PUT(baseURL+"/api/v2/technologies/:id/", wrapper.TechnologiesUpdate)
	router.GET(baseURL+"/api/v2/test_imports/", wrapper.TestImportsList)
	router.POST(baseURL+"/api/v2/test_imports/", wrapper.TestImportsCreate)
	router.DELETE(baseURL+"/api/v2/test_imports/:id/", wrapper.TestImportsDestroy)
	router.GET(baseURL+"/api/v2/test_imports/:id/", wrapper.TestImportsRetrieve)
	router.PATCH(baseURL+"/api/v2/test_imports/:id/", wrapper.TestImportsPartialUpdate)
	router.PUT(baseURL+"/api/v2/test_imports/:id/", wrapper.TestImportsUpdate)
	router.GET(baseURL+"/api/v2/test_types/", wrapper.TestTypesList)
	router.POST(baseURL+"/api/v2/test_types/", wrapper.TestTypesCreate)
	router.GET(baseURL+"/api/v2/test_types/:id/", wrapper.TestTypesRetrieve)
	router.PATCH(baseURL+"/api/v2/test_types/:id/", wrapper.TestTypesPartialUpdate)
	router.PUT(baseURL+"/api/v2/test_types/:id/", wrapper.TestTypesUpdate)
	router.GET(baseURL+"/api/v2/tests/", wrapper.TestsList)
	router.POST(baseURL+"/api/v2/tests/", wrapper.TestsCreate)
	router.DELETE(baseURL+"/api/v2/tests/:id/", wrapper.TestsDestroy)
	router.GET(baseURL+"/api/v2/tests/:id/", wrapper.TestsRetrieve)
	router.PATCH(baseURL+"/api/v2/tests/:id/", wrapper.TestsPartialUpdate)
	router.PUT(baseURL+"/api/v2/tests/:id/", wrapper.TestsUpdate)
	router.POST(baseURL+"/api/v2/tests/:id/accept_risks/", wrapper.TestsAcceptRisksCreate)
	router.GET(baseURL+"/api/v2/tests/:id/files/", wrapper.TestsFilesRetrieve)
	router.POST(baseURL+"/api/v2/tests/:id/files/", wrapper.TestsFilesCreate)
	router.POST(baseURL+"/api/v2/tests/:id/generate_report/", wrapper.TestsGenerateReportCreate)
	router.GET(baseURL+"/api/v2/tests/:id/notes/", wrapper.TestsNotesRetrieve)
	router.POST(baseURL+"/api/v2/tests/:id/notes/", wrapper.TestsNotesCreate)
	router.GET(baseURL+"/api/v2/tool_configurations/", wrapper.ToolConfigurationsList)
	router.POST(baseURL+"/api/v2/tool_configurations/", wrapper.ToolConfigurationsCreate)
	router.DELETE(baseURL+"/api/v2/tool_configurations/:id/", wrapper.ToolConfigurationsDestroy)
	router.GET(baseURL+"/api/v2/tool_configurations/:id/", wrapper.ToolConfigurationsRetrieve)
	router.PATCH(baseURL+"/api/v2/tool_configurations/:id/", wrapper.ToolConfigurationsPartialUpdate)
	router.PUT(baseURL+"/api/v2/tool_configurations/:id/", wrapper.ToolConfigurationsUpdate)
	router.GET(baseURL+"/api/v2/tool_product_settings/", wrapper.ToolProductSettingsList)
	router.POST(baseURL+"/api/v2/tool_product_settings/", wrapper.ToolProductSettingsCreate)
	router.DELETE(baseURL+"/api/v2/tool_product_settings/:id/", wrapper.ToolProductSettingsDestroy)
	router.GET(baseURL+"/api/v2/tool_product_settings/:id/", wrapper.ToolProductSettingsRetrieve)
	router.PATCH(baseURL+"/api/v2/tool_product_settings/:id/", wrapper.ToolProductSettingsPartialUpdate)
	router.PUT(baseURL+"/api/v2/tool_product_settings/:id/", wrapper.ToolProductSettingsUpdate)
	router.GET(baseURL+"/api/v2/tool_types/", wrapper.ToolTypesList)
	router.POST(baseURL+"/api/v2/tool_types/", wrapper.ToolTypesCreate)
	router.DELETE(baseURL+"/api/v2/tool_types/:id/", wrapper.ToolTypesDestroy)
	router.GET(baseURL+"/api/v2/tool_types/:id/", wrapper.ToolTypesRetrieve)
	router.PATCH(baseURL+"/api/v2/tool_types/:id/", wrapper.ToolTypesPartialUpdate)
	router.PUT(baseURL+"/api/v2/tool_types/:id/", wrapper.ToolTypesUpdate)
	router.GET(baseURL+"/api/v2/user_contact_infos/", wrapper.UserContactInfosList)
	router.POST(baseURL+"/api/v2/user_contact_infos/", wrapper.UserContactInfosCreate)
	router.DELETE(baseURL+"/api/v2/user_contact_infos/:id/", wrapper.UserContactInfosDestroy)
	router.GET(baseURL+"/api/v2/user_contact_infos/:id/", wrapper.UserContactInfosRetrieve)
	router.PATCH(baseURL+"/api/v2/user_contact_infos/:id/", wrapper.UserContactInfosPartialUpdate)
	router.PUT(baseURL+"/api/v2/user_contact_infos/:id/", wrapper.UserContactInfosUpdate)
	router.GET(baseURL+"/api/v2/user_profile/", wrapper.UserProfileRetrieve)
	router.GET(baseURL+"/api/v2/users/", wrapper.UsersList)
	router.POST(baseURL+"/api/v2/users/", wrapper.UsersCreate)
	router.DELETE(baseURL+"/api/v2/users/:id/", wrapper.UsersDestroy)
	router.GET(baseURL+"/api/v2/users/:id/", wrapper.UsersRetrieve)
	router.PATCH(baseURL+"/api/v2/users/:id/", wrapper.UsersPartialUpdate)
	router.PUT(baseURL+"/api/v2/users/:id/", wrapper.UsersUpdate)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9a3MbudEo/FdQPE+V7Qot+bKb5HVVKkeWZFtrSVZE2X42Xp8pcKbJgYkBZgGMaG6S",
	"//4WbjOYIUgOKVlONvpia0BcGkCj0d3oyz8GKS9KzoApOXjxj4FMcyiw+fMgTaFUkF0SOdPfpeAlCEXA",
	"/Irdr8l4oT8zkKkgpSKcDV4MznEBiAsEBSYU8QkqQUjO0DznyDaUSOWAhO56OCjw11NgU5UPXjx78mQ4",
	"UIsSBi8GUgnCpoN/DQfpNSwPcvjhWI9xXVEGAo8JJWqBSIaUHwNNCMsIm0o04aIzzJ8jo3yppCITkmI7",
	"QHe8n8KfdZduGMKmzUhzonKkciLR4YfjwdIg/xoOBPxaEQHZ4MWn1iLaWXah+Fx3wcdfIFUazoMsO4f5",
	"K0LhXelBbW/OhFCzYBMuCqwGLwaVIIPIjEmmawnA2TtGF4MXSlRQVyNMwRSErqeIsh0GS/g0slOd6Rkw",
	"zCi+i9XTOedq5XSAKWGwbGkCjCtIbOk/BqyiFI81oKvmUQpyjRUEXY05p4DZEuh2yCi4ZXnAMF1IIpch",
	"TTmbkAxY6leLFFUxePHs6Q9/+uHPz//4w5+Gg4IwW/i4Lv3zcBl2u+KDw7pDROEa6CA2rVQAVpC1djzD",
	"Ch4rUugNWLHBAR6kdtm7B3HFim6PQAwXEBtgqcNS8KxKVbBDIRriqVlloqCQUXxwBVgIvNDflQQR7+sa",
	"hCQ9Z+324oNtgs6rYgwidp7mMJZExY5eMMYPvVbWdZVMeMWym3fYQW+PMe5wmu1pFt+tWxT7K5Vf8RlE",
	"TmmJpZxzkS1vzHAwF0RBgyJ6p3wnG5FTw+LxZ1O/nWnWIPnxgt5is3tZifISzy/h1wqkugRZciZheaoC",
	"fk0EyLKFjDjLiKZfmF60Kq9C0mbYNtZ25lCPFQP4CKjCI4UVkYqkMYJEubSU4X8ETAYvBv9nv7nw991t",
	"vz+CaxBELXRPlQz6axOXXbugMFGoYopXaX6zngTgVBkafoNuumfBLtEwOBQdgNvjxvfhGigvC2DqmF0T",
	"wZn+c3k7bpledmbSnOUojPwLfy14VS6D1WJ0/tGhLd/6Hvjxx+g9ABNQaR4hM5ZIJVM9lbUHbx12XDhS",
	"96+Vt2OzcH5E/cPtDHulh+gztKZWOw/2XoIYqWrcY6R/rRu7e90G+7mi2zglC68a2/laND0Dc80uIcDU",
	"4/AyOH3RcDV21Z3vsuDNCeuzt4JbnnqXkS51274I9J3wx8+vLUVdadlI/4QyUCAKwsDKgqX+kJrBklpi",
	"1EUaeC3OFZjhKZgisz97g4YpM+ttOoyyxqsYwA5q2m133JDrbCUPdMyykpMYeQf3S1JigYubHZ5h05s0",
	"V9iG3rqtJwJP/SXU3QJA/lekhQstb4JA85ykOZpwSvnc7kmOZY4KLGZ76Cr8RDLnFc3QGBAviFKQ7aFX",
	"Wt7/iouSAnogIdWDPX76/MEQPdCrMRW4zB8/e7DX5l1/7HW95FyumIf+BTGnbji5QDjLBEi5h04UKir9",
	"G1eIsJRWmUWgkguFmOHgOzA/ffanvSd7T/aeapApTzHVneuPBa9ExgtM2F7Ki92m0Jc0FUSRqedvukLq",
	"cFBilcdXQkNsNBPu8AiQvBIpDBEJlkIqLJTVUmD0YP9Bew08xu3/8OzJPmRE7TJTvcJxEBmoORczuwdY",
	"Sp4SPVOvNGnGdyu8s/AcIfi1WNmrsuIpp/FJpLwoKubVQL6uJZqAZJXmCEv0IFeq1Lgzsf9lTD4YIlDp",
	"Xlff1WNFf61ALOLQmJ+QrTo0a2hEFw3aioPawnlD9/7ywy/VkyfP/qgAF3/584M2gE/7MYC7ieaETfjy",
	"vPS9g/RPZiExJSnoJRzzcXQJf9xe/O3SaXM815H6M1D4pNB4G+NIrOCQZPwLTwpQ2E5pgiuqBi8mmMoG",
	"oOAou1YeFtlq1ZrFciO/3Bvr99UErtW7eAa4P3tl68el9hVawmCQdTsxqu/CjgiDO3qXUAG2NF0IrvDN",
	"BMFsYVJySRS5hjhhdhrgfh32XUiKpUoKnun7+QbqvQ13Sv2z0+Vvhr9pYUDYGTBeqYRPEpnycsWyCiJn",
	"iVeT99DbGgauvWxL4MbRa4qnEBfajegPa3YsgBeXJFEgVXw2Y4FZmuvTG6HmeKp5GFvFX+LuULjL0YOI",
	"9AiQdejg0x/X6C5fmm73r/A0dhzGFaGZO95tqF7qX9DJ0e0BFB9bgri2pDU2vv1VszQlZ5KMKZj3l8OT",
	"/cMjM/agDxOQ5pDOEkpW7Y6+2YlKNJcbeW0yP1oWeCJ4gQSUfJf53lhZn0FWldQxIAlnCbRwtw32yQQB",
	"0/BkqNUOzQmliDO6sHwC9k9YiDD7fhXsLpbINwWNCJhxlYNomkzQmKu8eQXDAiL97KGTCcqINOAMO/AQ",
	"iThroZh57whFvaPOBFQegVVPaRA7mat1XM/6sTgZZ2DOtiPzm4lBA1b9RgVMc6+fBidMgXCEZTgwiDwY",
	"ahA+94BE35htbmudGP+KrNUVNAIjEVIlKWcKpzEEHdyilEMBZ/2umojG8Hmv7WJcbbFI51z1WiQu0hyk",
	"EvbwAZsSFlFyvAtrGepFUrgp+SqBrblaSgESIgRgBErZM8kyZNbEjF2C0JurT2/3lA62FKiiP061FN7r",
	"eUcAlrseSU2DhdriAVjYlx170/So3nAf2L3p3kCfY+XxJOUZJFalZUjDqqtvZKojXd1fgJuxxpHK0eEZ",
	"Gtl+Y/NaAYmWDZbAuHR6BEQJmyHFkWzgGgzXPEv+cd1b6qW9PZd2tFF1eUp5zhUaKSzsy8xLytOZ+etQ",
	"7wil9m+uxVlb44ShC49/w8E7ht5wqss/YmJNNbhAfk79Se728q3CYgpKi3cxShoZwFQ3+pl+DUDq6gIr",
	"mC7WPxD3e8tXueZMNN8MNE5jlPkt8TqojUdbCZzOYqh96lAJSpJqpleRdAYKyYVUUFh1UJpjNgWpa7mn",
	"+r212NZvjlWZ3Yz5CswG2lPyxgG78MnbKzBqzqF5s2yxJ55H8O/75i4MH/jL5oh0iVwLdTuI2caBZj3X",
	"i1QX5m6SqxQnNzFc6fvuaDWPiVeSbqtMr5mJ9qYfNV964+c5VogBZAZtx+C2W2O4tNcwqkoEzQOxIUbN",
	"nm1/Aa69hmuxunOv6GIN7nEbL40G8eTigdz35FHuv788fSAftUH7c9Rwx5AjfxFvsbK1aVlH7hMEJihr",
	"r6/lcWLqv62sXfyirUfaK/7Ks9ndR56aqyc9mdjdGPa1j6ltKPwQm6Z07vH4xlPajb3eakp2iOiUvkJa",
	"aQo4qooCW934yhn1tj0LxbXtLu/lllve4wFN6A9viwNIzOpv5AJWnNvV012pQg0bxme7oemihC3myhWm",
	"iVcw9HjR7SLAqu1dvXmrtia28MvrGFugpZkvzSuG7K+cCv8/2MT3VaMcX2FFrpmQ/uTkksjZQcOx9JC9",
	"Gh1u9wa3MjGZWDl4QvEcEYlsfX1zM25unIiqdwr9lraeQI3uMWt5yzfiyQRSzTPUjdBDSsYCi4V55h6i",
	"EgtllHCOXR6ivb29R3u7cMMNYH3Z2mXwduBlWzrQ5SdNTTrMYF69OMcSuRaIMEkyQEeg4TjiX3hLKtiK",
	"d4w6FWgADnlRcIY+BI4FBKwC5fhryWUlQKKHhx+OH0UesR0O7S37G3RXpcRKgdCD/r9PB4///vkfT4dP",
	"n/zr4eNffsn+8OgP/zOIgizl9fO4croD8QKNUq7boZGVqtwWo+ca9NHo+vkjJFMuoPccnj7909pJHHx4",
	"8en84PTi8z8PDl98On3z+Z8Xly8+vT/Xf70/efHp/PLzP0cvPr0//PzPT4cnB59ffNI/BfpdDRa6fr56",
	"4okBOHKAqgIESTFFdmZuYoa5zqHtIWKU0KYUUsWFPutTcg3MPp7bhkQiJ9igeU4oIImvraasRsoQ6yaU",
	"4zUqPGtsYmYxX4VxH4+dTcrG3bg9mwj/YrruBGpqqI9fRmTKr0FY2XUjT5OZ45kIuCYwT7zSLe4rdMTT",
	"Sl+u0ngH1XURRrYXZHtxuxksRo8ZtlX+HR0EZ1MQqNAbXv9yDcbwQE9PnxU85pWqV2IvOlUiS4oXgY3W",
	"5gcc/5ayxXXUfoBxzy8UzyWyOlC7MZFXD98sCR6o48oYPU0uyJQwTMOnHQuI/27BsreazobbsGC4IOlq",
	"CF7pWeZYojEAM3aB5o4xz2wYHdnm6KBsHn9GkFZCE7krK7gixTlFD48ORlePWk9Grq0H39YYxB9rlqzt",
	"lk+G/c3fhr7J6kOLHnqaTGGIzvw7dHNnN5Kyg9jbOSBn6DDsIUN3TEhiNnKyeS8LlVNYmbc6WUnjyTam",
	"YDEhOGbbmBxaO4meaB1sOBTmwJv2yNtZoPHCQGuUKCLc1Vem3oW3x1hl95LEjeVOvMVjhnSth/IRMo9e",
	"hNU0fvny62kHXwv6HQTXxXogAdRgiTtuPdZ486udwezALr2njsE022StvDSMN2/aZpAz3abPGLxi8TvC",
	"GA8GXLJMMWMgLAKTZj9vaU1zLHPzOLIMyYG1ANB3IcLIuPtNK3O8kQTDl08I0Ew60CSqpMYzLprH8da7",
	"995tajlJUeI0ZnsJX5W748Yex23dznHkzAkVcuiJhBwiYApEKYiE2vxu80OwTFpWR9vQgwn5uuo6+0IE",
	"TuzTwO5KY9uJFigcY7BbN8bKyDInsTleCH5NMmfcvsxR6dbogfMweqBpHQ4o3S1AFD1ILaACp2wDjW/Z",
	"OkY9jdTsxZhYtjmCgaQAqXBR6hOiSaBU/i61TdBDu6uIMP+Dp5X2QD26wbJE3+hH9asmeN7bC7lK4XTm",
	"BISbst3uyjpthhlsNPve+rBo9JHKins1uhFlEK0+TTe0HezBvGugCixmBoU8pCEIvc3foxx7l4zlfG7f",
	"WaTSQ7TQdrN5yDjhaVoJYGnsxj6vMaKphRz75B7ADcs5z4EhCdcgMG0JmiDRHIwQWrHM6A7wdCrALKXn",
	"bNw1dksoFgN5cHuq+02XJvNCeCKd5+WKe7wW1gWYBx2mWn4LvjV6OHoyRKOnQzR6NkSj50M0+qGr5vqh",
	"h01pj8M0wZRKxCtldEtOD1DW3IahVphl+1x07GRi/hkCFxG6q4tBgbD8gGb/BJlOwSooiJQVBNLL0lK7",
	"Ha57iVpw4wXlOHYR2R/qkR15s2ttLZP2EQ6EK42sIXjjaor2NT8wplD0YlhW+9et1wx8Yy+1FeLwLqN6",
	"jXafQSOS5S5Ddizgtxn5xmP2Gq0WfnZb0J4ejS2BJ3E2bzfYwv4Om6F8ssuAVyD7e/7GeLlvfjy6l/03",
	"H7C+inYZacPNFHiiQuO5882n9L1Im8OVO3EXXzIausk57P2Y14wuOcPi12oMibk6dx155Ls5Mb30Gdkb",
	"4O56/nsPkhDjbnaThdXjWae1HT24y2pMicyTuEx3pIUMw/8aTqodh2tuRIEMkOkjpQuErzExfGvsBWGz",
	"oVMl80TxRMvu/dzrNAuyirvXfCh8VSAYpihzMoxjfjyYvR8cQnNkI7EmVmI120bpu8ngxadeN9Glbf7K",
	"tv7X5+6edSjZ+mcU+yiwpSjviFYigsg3/aawInLOiknc6Flo6T3Irl6/J6EWlVw/YkQZsoUufMlxbYMc",
	"4h4oarneydFYIsyQ78cEzIsLHtJoYQibJe78Lis8CJsh+yN6eI0FsY8Sk4oZX/29vb1H6zQg2zmBW3Cs",
	"mfkaXbxTwugaSNfoA0BPVXwIwb+DBmh0MLpCbshN2qAQ9pXbabu6sw21uoqkHeGua4bQDlanR+9cCybE",
	"BJFIVlrgjKpCNpMpJ7bGtPNeojXvlBLo5LF724EMlQRSI9T7FcIWJvswhpELzrOHTIwSYk4eL21Fq4Vs",
	"4DfCNGEdJzaj/veRIK1mSO1kmbNehVKrSOpVDh4cDwVRJMV0iN6QaT5EZ5CRqhiiUz4fopPmcRvTqNHQ",
	"SlCSDeExu9q5eb5AGKUg9Oo3IGvGYK2Nw+a1oTjJ8EImAgr7aNfvdUS3M3Z4K/iZh7oLzujiUW0DYXYZ",
	"Sxc1wxTpa2d0eoBSTNOK2jccNAKlERm+lsToYDWZRg13LPfQcVGqha7jGJchSnEldV3z7EnHRiXD0QM9",
	"yIOdWKQIU7yMOobl/Vs19kqn+FZsc6NKzTjt/Lhv4rL1etsfdd/2XdP6aX+08mlfKiil5h4F2Fct6PdG",
	"ZtrZlzwTQGUMLjqOPftcZDY+Ud1t88Szj8bVtBc67+BZBKui4RhNpX95XHvKehiE5rpOsrX96BJFzrlQ",
	"XUv+Fa/sPz59GnPaYRmIpKU57M9QaVqt27etieI8lB1o4wiybZuTVkIAU3SBxmAOv+McV41Bfq0gIVmi",
	"T0CicTtiddm6NBWkOTMac+LOTecVYg8duJhNHBmfK2RHaV2+BOROF38lIgAee+GplrIs2pX+fdGYVcVM",
	"qTbjYMvZqo58sc2bWIFZhSldIN9BxJRkaWP0Wm3YlnPOHruV3bgn0fhGbWZIw9BrS3z82VbrkyM3rga1",
	"d6Bpa2dtjZdb3mPBRJeM2mJ688bDrGOB0rEVCdSmoWGFMxkP3/O7D/PdF/aITjT6+Bw+pnZUmo0nXOS1",
	"yj/eNE8pSxJ9IIBHhOUokxzwclHWxZHzkN76Hbdnb409/aHZvnUBS27N2P3ehv3ehv3ehv3ehv3ehv33",
	"aMN+b5B+b5B+b5B+b5B+KwbpgZXEFlt1b3P972pzfW/nfG/nfG/nfG/n/Duwc+5jH3Bv5Xxv5dzTyvne",
	"PGpL86hvbLx0b1Z0b1Z0b1Z0b1Z0b1Z0b1a0k1nRvXnQvXnQ78Y8aINJT80iPrk35/nvM+fZWO/e9ub2",
	"bG+WYzW3rW3WGdesMZ75dzCPqa1hNpm+eCsXZ9lSo9ca85Z1OXnuM+lETWHuIH/NDVL9Pt82pnUPp6kg",
	"ke+/SWx2sgGp/03TQ7fcoXeGzJjwNU6ZvXzHfjq5PHAemDF3sd45o1cxPrFlCOCscxKb9muW5szFvmqv",
	"TAS8p89iEs81plX0RKzfNQecbb0GOn0Qrlz89dvDqshC74JVF82Z/qawWepRx6HvST+sU/4u82q7bC7N",
	"zqtjb+Uc1K7H2/iUWp/j5e46kzWAbj4BV1CUNGpy6gwRv6W54J2Y8S0NP/fzukWjtbZJ163duI0pwsYu",
	"DV9YyVtIKtl3EvGHsx7ZocJniq0UXNsnwNlB1LbnISmwi3bTcZMwqfecgOkrGx2RaWDFywIy4h5XsmuS",
	"wh460z/aDH1jsI9W7lGLUmesPWzkq1o1OF6gw4/HoQ7En1fXowUni4pg7akkK+R/0w+YoUwNpOCrQg+d",
	"MlQiCVik+SPzuNaBxYJQQzReoCvTg6saByoelL4fp9Pg+Ap5ZmO8+itHcXcVPYxqaI6lYy2H5pXJxnVA",
	"BV54kxCn4AB6t3LIt4FuZ6Hkm0LRTpHZ494MZE/TvMW092rftNgmC0OYRafn9e5DCsUOi+GR+uh65HJa",
	"zFsXfWpg/x3lnpXpfm4jd0/jE9UvvU4kyUboWLVhmVdl+dkOhm+S4icAYV1+n9eUjzG95LHEJ1MvoN5e",
	"mm3B6Yr3kKkBBOkKq+7jWpuwKJ2Djbfi3FuToPF103H0qbaS/XJU9juANgrQKWbTCk9XIfkN08Svzeq+",
	"BqpRitl6F7YNKe5xSRKZYpbUlsEbmNJgmXGleOJy6msmBr72yty99rpdvgIpl5BwmrXyF3VNdLppWymk",
	"CpEJ4jRg8RhH1Pp8OKMyb6tnNbFoCgqZ4cy7ZK3cta/G9lYlbGr8h/yTdq25l6CGNiN04CMkG4MY38Cf",
	"AzvOSnfB8NZfmX8/UTzBWRZ/rmpf2ut+7+2lHkkLFoGtddlHTer7nBUboDBmhHSYcy6hsQMwpKRSvMDm",
	"iZ0ukGmLGMxb3L3elzTnEnzDPZO+yuZJ7Xhodl02/7DsKBk6JXyOCYm9kzQ7SbhjE+nwe3DCJjwA1H2e",
	"8vlgOLBmBIPh4A2Z5oPhwJsZRAFyxKT3bvv6K7faVzAZubbttZXA7BYs8gwN87YHG93TTO1uVvGDtGKg",
	"yFdkiOqw/n7+xyd1EUtzLgAdm9TVy6Xe7QBdcErSBTrMIZ0FNV4LPeZwcFCWo5JkIOoufq1w/bfAac5I",
	"/VllRP00qj8/jtCF4HMaNP6of+WVetYq8U/9b6pxXf5bJaD55dA4SqBL0BQHWGaze/rKLzHLiKq/KE5n",
	"WZXO0GHtmHxJ5Kz1UzDUS4FnUGBWf1fTQ8HnWfPNMgrisZleUyjKcBnD4tcCl/nfTtHBxYkvujweXYXf",
	"rvohFlPe6tfsQ4HFV/RudND6XqqgC1AGChOXHVn/wq/rihQTgd5SLNol9QevMllSHoyteRW1R7iGFLmQ",
	"gmFxXY8pgWXQzlnn2AkeCixzY2Zcb99Po3fn6JVlFSI//+/ZafMrZGZivu9FSjmDo//1BUd4zkYuL4Qv",
	"ghJYBsyjcaT8yryvO84ZXeB0hqf6r1fm/KGHry5ePTIe02bGR8Y85bGEVICqseyIpzNa7/SReANYnwsz",
	"N7tY5oX0aPTuwlc6zqYgg9kcj06Ni539eqWv6cnCf74GBoKkHkrZ7MBrovJqvOQzbVsRdYrHZsdeVb/9",
	"pid1aZmEdoVDZ8gmOuVHB6Mr1yIobFbOrHXTa1NnFGs4MkuG7ALqKy+sQAHP6tV8zSWkyO2kvhhMDul3",
	"DNAhlkYMeoMzTvVy6YUHYaw8U0em3mAx5iK+Im+4qHzf+rOSs8XhSQPJycszpMma3hc9e11UFBUjc6hp",
	"wglTIzLNlWya/fRK8Cn6X4HrgYKS98wq6dwvb08OazL4llTzBgNm1Rgej4GluS85AwWCNDXOSCr4hKeV",
	"RB9hTJgsNYfof+Tj0avgQ05C9DrjvxFKMXo31kwcVlzUsJ6DlJXsfH08GDUlSpZYzBr8OIevJW8o2zmZ",
	"qZoCnBe4pmHnPAsI9QXFSl9q9a8XZ6hF4M6rlEJ9ZbwrgckUl/Gd1L9+OBihw9EH/XV5heAa08qwuiY/",
	"dXju3kl5wjL4io7gGtsRDw8skQxrVarkUj37wY9x8eaigd5Cev3Mly+KCWeL4Bpy6FeS8jEOZ3VxduT/",
	"/FuF6UKiEzbRNFJUqTI3mYbj4UcYv35/oundo6Zmu91HGOOyXtxLUETA3pe6lr7IzDXIAiJtZnZZjXnK",
	"m5aV1Dcqn/qC0cHlySv9f4qZIg31NvcxGlVE1Xs9gmIqoLSkrT4Ao7c15o3YoqayI66vmIOylKkACAhM",
	"Y2TYuk6a4qV63RtN/6J5n7ZhoGtVcvWymtYLMxqdolM8br4llfVfi98gqOe/0EM9Qb0TI4XT2Rs8nyH9",
	"j6t5BULg8HhdgVRS0vrz1aihMleCXC+aj2oyoZA3i9+UPA+KpJrja0CvKmO2oFdp6TcL5+Hogwbzak6k",
	"ojydoZMCT+spfTh8Xf8JAqfmQNrvj7gkqj5tH/UNYXdV+F39mBMFb7C+jZkiDKgvc4ZWvmnpVvN/MSOK",
	"/NZs889YsPYR//uBuwA/R59u/k2trzHLjKyr7zrekcdra2zbvQ0tY71O5zmnoX3JvlcUZeYONb0xtOCV",
	"6IxnvLKicRqMLa1UJN0itrBTsjQt42/LO1uZ9tRpb6cA95rsDVaJGxRDgVp7vYK4m3g8kDOXZcRQ9Gpt",
	"SWPj5ia8RufV2siO5mviI9X32t+RE7ltdIbOPned/i3aNTBb43UuLNrbgEToiH/hyEDhndZdBPExTFzo",
	"mu8KmgWjA1sGVG1hanGkq28LEZ9o5qL2VXAefE4v4x+t9pBG8MBPzpCIq8uDw7fJydnFu8ur5M3J6Ord",
	"5c8ox1IixhXKiDQPs3vLtqMGGWKIZIxFmLQx81fn1S5wWRI2TQRITqu4i4XuCjUVTIwuiR5qiRo/llBi",
	"YRgrY4EkHzmDd1wa+2TM0IH3IntVW69ubfNnVaTOUHUGMQcVgZk0IfDN2yVHh7oJMrAbOy45RNdEEoVy",
	"pUr5Yn//l+rJk+fpz+/eX9pa7y9PTRHsC5BqH5dk33ro75v2rv7B+c/ow8HpyRE6GY3eH6O3xz+7VqqG",
	"QP4VvpaYZX8JivZ8DApubgeDEydHRntqaLwF1G/YVq5fdWwpM+PWQgzi+cYDPfiKeG1GQ4GwzaqouIkf",
	"VUdaaSvSu848T6LB0Kzarsa31Z5GZw5z9AI9uBCE62oP3FVMGPqJCLyn5W8EX3FRUniBaqVgD78idytY",
	"275aQdYG4WdeIctRTggzrq4CO4cX+4pjPIuU0lf8XrkIdJdX2KiLRlqC0mJ7SVLDcpIZWAWRYZKtUBDl",
	"cqAkqdmS6Nv8FUd8bBybzOro7u0OkezB9tj9bN8uqmZgrGGGQUfT6zkuYA8d8tJSL++nWJlwKunkky34",
	"bN+zsLRhFnIQsKXb4jJ2upg8LlbOtydQqB2c5yZUyr9e+meiDp9ap+iwVjHWvsI/GmZZEGXHO7NEsB0R",
	"ltIqq+M+rIghyIVxJ1bchgpKlbUq6kRd7eVhZN84jaI6kRQnjK/1x7NPQeZwmEM0BhOZh2QZMIStVbVj",
	"uq0j4aD76kkXSALLjJ9cOJi5860eV/01+qyUk2n+bUiMe37YSF562+KxCf82kLrnk82QWgLozboyIlY+",
	"RBkk4zQD0Q08dfQFsymvTddkHV5BgPHC0nWaKzh0C9MSEUiw0bxqPi7jX/h+3Zu9eB8bHycQcg+dghZt",
	"wThDKq4Hs2FeLE1HBkUnFaUNQF1f0172LpTPv83e2DetjVtTmEevbwNC/aC2EQpeAtuO5bqEx+9KYP9V",
	"TNcl6HXqwXWVWMo5F9myfdLS4g8Hc0EUtCTwaJjtVxGa7sMBeSYNDBYMkaZJ9szWcWXbsTtaXsP2zXoZ",
	"Tjdrv3cxLUQlQcQNsTZaYi2x+es4xw6ztIr6O2e4OMFdcdZXH8HlYxHsrN2lYAVWCmbeAaYtlbUNGjY/",
	"qwdO070rJ9/APqqTdXtNsFVK2Awyg5HuSqhjwFnReU2IrlWmUqYz00Xtwbg5pfcKGHEXNM9POTfStnd7",
	"PzCjsJCsh52iq+uIb7/KpeA+cMfmDXZEZYOV/Wr/qPovexBWhSPXKH/RwNXxDPHal15zBGOingQaOUME",
	"3DmN22Zte6x683D3HNR6HA/UT5tXPTAd7F15tVBSR3nYTZBwp6j30TPWPJhSq1aIRHk6aJlvFZgYJEAl",
	"Fv41wuzyHjqgc7zwdMeI187C3SCBIukMlGwHLyUuhJh/yojPSENYW+xG4n11EnaaYCROQ7Rubc27YpOe",
	"EzXttlryfnaq3kI14nRBMZvd1BNrKYCg6dVEapIrNGkZ3Pqg5hlu3ZhF0VDL2xzW9Ltu5CajwW4uYbWp",
	"/K0C7q3fdyfkNECrGK1Zlaw8bLdLAlaPzr2TPgc0cpfxAl/4jUN5A/NvnCn4X+tneWuG701sDef75XZu",
	"vQV6a4MinAvlonM9/Gk1xr65OjtFts0NFEchznWdcXo5vbnmsenGHdi9LfY3kElu4NcT96FffVbDWdxB",
	"pvt6EW6Qef7fiyRsOKmbN3vH+AaNd9a6IAfnoOZczE65Yzd29yGjfJVq23euLx1mxzNeiYRNX6Bjq2CT",
	"L9CHi/MhOmEKBAOFuHB/YxqLJ9TnyHqAovPm0QRPlcr5FkYCDcGOGX9Ebc57X/qQEZWYyjfqArIVwl1G",
	"1M5T7SLt0tSBKbGIWprkRJpHvm3c3964Nj3iSPemjFw1r5h95CZy7XZzAwfuUGjoHQyabazX3C9PsxjD",
	"VYx7OPvle9RGVEtutJUxrMXRnftGS3sTFO8yK+0FcXNxrIvpcdUaxxmVTkCJ23vEkknjh7d8NIlMCswy",
	"7Hc9WkMSNqUrOohd+5uJZjt42nrn3vNQRI3SUZ5YpXRbiVTbln0aYArCcI81GfDGAJJiY/RbSAW4kIb6",
	"EzoYNk02WtF917F5Bq3oiHczbKDaM4/idzn2VgrvMMfH3YBnsmjd5YCr2en/Okm0v07yzrG2ZYF656N3",
	"w+rf6dgrlZZ3CYWx973zdZcUJ2MB2McVuqNRFabf60IydtN3vs5VmfKCsOl3mnRffZetmWjwCGd3uUT9",
	"VPcXeEoYVpAdlOUBw3QhiTwlMvogWNkldjYrgxdPnz2PMujOzK6uN8iVKl/s7+OS7LnCPS6m+zg1fcr9",
	"v/LJRIL6yw9PnvxSPXny7I+UFET95emTJ8u2Dz3ikMI14Tbx4vYgPLsNEATIiqr+MViCtY/u4+pdO4Jr",
	"oLzU6BWELrrfwDvewPg2bLuX/As3YVz/47dvPXPqM87fAY/aYsFuZdjeb0Ka7Mvvxh//550gj/y7Hpoz",
	"KMYgfq9Hp7YO2wWbWmu7EXF9VK1dRjKhv/7thcf/3MNhkXzLI+KfyO65gjvetvBtcof9sv6X97v2nXbN",
	"5U3fdu+8MHq/b3e+b2Ho15327EKABHV/5L7f1rkd2HIHnWHG75X5a+XcWkqU+o1ZqFieozuwn6kjTVqX",
	"jpuaBzXEvPfI8o5Mkpzt5W4L2pPdbjmZJBLUDbewvzRRJ8LaccAwUvbGwZYyad3F8ehmoP/mA9bW4ruM",
	"5MM9bxYDg6zP33xK34u0tfI/f/vROs9iNziHl0TOGuv+XqNHEonuMvLId+NS3vQYuc6As+P57z1IYmO5",
	"3GRh9XgndXia/w71QnAvb890+cwg90zz99m1OrfTdrvXhOq/37g73rggS8J2exbGjrrftTvetVbgrh32",
	"Td+W95v2PTbN8ylb7pjzjL7fs++wZ94rfbtd825hv1c90L1f4/2DYHsndzwgGgHu6dp32rM671v/fTsD",
	"hX+vRO3eAfSbOID+xx0P4+S83bHoOpfek7Q73rMl794t94/fq43ufs/41roi78F4v1ffYa92YBda3pO/",
	"c2Pie9nk3xBpA9/d7TDX7crBxckoxewwjGd+T3zueB/X7MVuu/q79m24QwPtO6R8d2AL/juheiGO73Y8",
	"fq8nw0YsIb/ZoIU3c8LZ7qAUxlr+bmw79KGso5LchX+Rd20qMMPTOzPTmVa0CcqxE1Wou+hp1YGLO52i",
	"gjRnJrC1S9Bwz/htSQJ3o36/b/et39eVfS8R7XQwdnLeCq6Fe/75VvnnO72t7xnpLQ9LjfC7n5d7hvo/",
	"l6H+/SHz7nj8X8Ea/d6o8T2PtPNJ2YlPauTKe0XxHW9dW6TfZs9aTiz3+3bX+7bkQ7TN3t17DnyHHdve",
	"Z6DtrnW/Y3e8Y8vecjvvXZPK8H4Xv+suNhux7X6qavx7CVXwH7eFzdpvu2sLqaAYubzi9xt31xvXWv4t",
	"967x5v29is8+21yCJxNIXZznb23bfAcO3b8TsbbtTr4l5t7Tmu+wWzvs071t7Hfaqx30qlec03u7wu+6",
	"cd0d2GEHnbbwnin7jnvY2YMddvGebn6nrduBbr6XIA6tRdQJm/DfKzt9/2izDS51kGIHlLo//t9hy/ru",
	"k0rzVl6Q2EaxCcnAJZO/hfTRh3WHiMI10G+T8Jqk8Yx7G1f7BolxVySoX5dTWeFpe2N7Z6WJZHkFIUnP",
	"Wbu9+GCbIJvSO5YceQ5jSTpJSC3eBmP80GtlXVeJiRd58w7XIPSKXB07J6btudfrIKqNcLZIEfnDk2+O",
	"sT/+GOmwzmvRxcqgs/VZVPushLMBWG0muHvSam/80U4ifJUTifRPKAMFoiAMJFI5oFJ/SH0QJOITU6SX",
	"ACmOrF26KTJw7Q2aw2NmYTocDNekS4+kR1+1NsdBoIR4CIWkxAIXN9ucaOTdNb11W08Enja5uNorDMj/",
	"ijSNV2RCQKB5TtIcTTilfG6XPMcyRwUWsz10FX4imfOKZmgMiBdEKcj20CsukLtl0QMJqR7s8dPnD4bo",
	"gV6NqcBl/vjZg1iO541nJ+dyxTz0L0gfGZNH+gLhLBMg5R46Uaio9G9cIcJSWmUWP0ouFGKGkHZgfvrs",
	"T3tP9p7sPdUgU55iqjvXHwteiYwXmLC9lBe7TaHvoaiD2MYzvpZY5fGVoEHybT1RAZJXIoUhIsFSSIWF",
	"QnOicoTRg/0H7TXwGLf/w7Mn+5ARtctMjY41CqLPCW72AEvJU6JnasHRMPvx3QrvzMOsSj3ZO0+l4imn",
	"8UmkvCgq5txqka9r2TpAskpzhCV6oHlPjTsT+1/G5IMhApV2kOdZnxX9tQKbIHgZGvMTslWHZg1N4F4N",
	"2oqD2sJ5Qy3/8oPlfhXg4i9/ftAG8Gm/2203DoloWWVpXpozRvons5CYkhT0Eo75OLqEP96MC+kEJl++",
	"+Ncld1/OxB7cDZsxbYKphKTkkqxOEh1EytncYe8c/liqpOCZJvw3YN83EKtuQO7N8DctbpYQn1cq4ZNE",
	"prxcsaxBCOg4+GtRJkx02bEJr/N9rwAygAGXJPEveMu/jgVmaZ4oPI0cfTzVF56t4im+I3KOknoQkTKB",
	"vDuH5umPa+SNl6bb/Ss8jaH4uCI0S0i2DNVL/Qs6Obo9gOJjSxDXPs/z8vj2V33/lZxJMqaAJlygw5P9",
	"wyMz9qDPjZHmkM4SSlbtjr4GiEo0S7QMyKH50fJLE8ELJKDku8z3xgJ2Bj5pBOEs4WwpSWsI9skEAdPw",
	"ZKjVDs0JpYgzurCXCkaOKCHCkNL8erC7WKI6T4VGBMxMVu6myQSNucr9t0RYQKSfPXQyQRmRBpxhBx4i",
	"EWctFDM6ipDtP+pMQOURWPWUBrGTuVrae9bvPsw4A3O2HeneTAyCtO7eAt9noD1hCoQjLMOBQeTBUIPw",
	"uQckdV6LnrGs1xrVN9IFEVJ5z9wIgg5ukSWmgLN+10dEdn7ea7vqTA5bRW7atEhcpDlIZR/X9MkjLCLw",
	"vgtrGepFUrgp+SqBrblaSpPcZxkU/4SEMMuQWRMzdglCb64+vd1TOtiS+47+ONUi2xpcCJWsWO56JG0e",
	"jfpwbQbbJ8HomV66k1TihsK/Fd6SlGfg3O4NaVh19Y1MdaSr+wtwM9Y4Ujk6PEMj229sXisgqQRZBuPS",
	"CZ2IEjZDiiPZwLWsUw/28I/r9J+X9vZc2tFGL+Ip5TlXaKRFXMgGw8FLytOZ+etQ7wil9m+uZR9b44Sh",
	"C49/w8E7ht5wqss/YqIPgllDP6f+JHd7YUhhMQWVAItS0sgAproR5vs1AKmrC6xguliv1O2nf1e55ky0",
	"CAE0TmOU+S3xCouNR1sJnM5iqH3qUAlKkmqmV5F0BgpJY45odQdpjtkUpK7l1Ot7a7Gt3xyrMrsZ8xWo",
	"+ttT8gr9Xfjkm0q73QRvy09JN37U6avptuqghNZRK7fTcNaXdntxj5ovvcDzHCvEADKDHmNwy6oxSdrr",
	"DlUlguYBwhx6z7oNd7ho1l53tUjaod+6WIN73N5/o9Y5uXgg9z0ZkvvvL08fyEdt0P4cfdQyx95feFus",
	"rCO8S/KVIDBBWXt9LS8R08n0x8pXjY6jK01bAT3Rl+tNHKo2XbeN2N5FJssGkYllfSYUz7X4YetrJGLc",
	"TD4i3U+h3zmoJ5B4/rUNw7lRb1tS4Y2LUd0IPaRkLLBYGDX4EJVYKCN3OQo5RHt7e4/2diGADWB9Kdky",
	"eDuQr5bYu6zy1LTIDOYlyjmWyLVAhEmSAToyiRqP+Bfeugi2ImPpNcQB0NI9Z+hDRRkIPCaUaHQ1PPPx",
	"15LLSoBEDw8/HD+KKLkdDnX3I6LFLrFSIPSg/+/TweO/f/7H0+HTJ/96+PiXX7I/PPrD/wyiIEt5/Tyu",
	"j+hAvECjlOt2yNr1+4sTPdegj0bXzx8hmXIBvefw9Omf1k7i4MOLT+cHpxef/3lw+OLT6ZvP/7y4fPHp",
	"/bn+6/3Ji0/nl5//OXrx6f3h539+Ojw5+Pzik/4pEOk1WOj6+eqJJwbgyAGqChAkxRTZmbmJGTqfA7oO",
	"l8XoHUwppIoLfdan5BqYVa7bhkQixxugeU4oIImvrXBUI2WIdRPK8RqpzT5GmVnMV2Hcx2P3ZrVxN27v",
	"zcQrvtedQE0N9fHLiEz5NQjLrmxkR9fnUe1QYJ5W+jqUaJ5zVNdFGNlekO3F7WawGD1m2NbydNhOzqYg",
	"UKE3vP7lGszDhJ6ePit4zCtVr8RedKpElhQvgjfczTo7rz7b4jpq69ycxo3iuUQufWQWv6SiKWXj/Lee",
	"JhdkShimoTbPAuK/W7Dsraaz4TYsGC5IuhqCV3qWOZZoDMCMWYC5Y4xmFaMj2xwdlI2+bwRpJTSRu7I8",
	"FFKcU/Tw6GB09ailJXRtPfi2xiCun1t6jV8+GfY3fxv6JqsPLXroaTKFITrzrx/Nnd0wbQ5i/1yF3HvV",
	"sAc710qkG39Dl42KNJRHsDLqWVlJzUwZZZTBhOCYbWOSYJ+7eqJ1sOFQmANv2iP/XIbGCwOt4edFuKuv",
	"TL0L/6w2jL6qUUjij+kn3iIiQ7rWQ/kIGT0nYTWNX778ehoB1crYDoLrYj2QAGqwxB23Hmu8WVEbJBze",
	"OqfhpohES8MUoPC2g/iEExvHCDIYR4wLAi5ZppgxEBaBSbOft7SmOZa50YctQ3JgH330XYgwSr13hT44",
	"EgxfPiFAtSxqQJOokhrPuGjeQ1pPHXu3KXCTonRxNDvLB1+Vu+PGHsdt3c5x5MwJFXLoiYQcImAKRCmI",
	"hPp5frPuXyatx+Nt6MGEfF11nX0hAidWG7S7/sJ2ogUKxxjs1k0rB/byHC8EvyaZs21b5qh0a/RA8UrL",
	"xw80rcMBpbsFiKIHqQVUCUJyZtguA41v2TpGPW0N7MWYWLY5goGkAKlwUeoTokmgVP4utU3QQ7uriDD/",
	"g6eV9kA9usGyRJ9lRrUiGzzv7YVcpXA6cwLCTdlud2WdNsMMNpqFbX1YNPpIZcW9Gt2IMohWn6YbmoD0",
	"YN41UAUWM4NCHtIQhN7mcVGOvUvGcj63Kj+p9BAttN38IjhOeJpWAlgau7HPa4xoaiHHPrk3D8NyznNg",
	"SMI1CExbgiZINAcjhFYsM7oDPJ0KMEvpORt3jd0SisVAjuLat3kMZV4IT8xyELXqHq+FdQFGt8hUy67R",
	"t0YPR0+GaPR0iEbPhmj0fIhGP3TVXD/0MA3qcZgmmFKJeKWMbsnpAcqa2zDUCrNsn4vO02jMflPgIkJ3",
	"dTEoEJYf0OyfINMpWAWFSRMfSC9LS+12uO4lJoiWeEE5jl1E9od6ZEfe7Frbx+h9hAPhSiNrCN64mqJ9",
	"zQ+MKRS9GJayGlMi8yR+GRxp6mQOjtmClnrGkKwCZ4BMHyldIHyNiUH4mOphs7K+knmieKIvfQvKBFdU",
	"DV4YYSO2hQImsIosaASGrwqElpEzR/zcqnkwe2sqwqdrc9Ul9qozinFK300GLz71YrAvbfNXtvW/Pnd3",
	"qH4cjz2/dfUvVpuwJQ/g1DaJs2qA/lN4WYnyEs8vbQeXvv2KSdxIn7SkSLKr10+X5JgjITePGOGithCi",
	"lwwXNxAwp9moGQJ3AWOJMEO+H6R7jVMsadg3wmaJe7ZZ5pQImyH7I3p4jQWx2oxJxYwTwN7e3qN1rNN2",
	"1uUWHGuSsEaId9ybroF0jT4A9JThQwj+HVjH0cHoCrkhN7GRIewrt9N2dWcbapmcpO3B2H2/aDsj6tE7",
	"14LxXSESyUrfVFEeajOZcvddTKz3V6FRcEqgk8dOKQQZKgmkhhvwK4QtTFajhpFz0N9DxreJmJPHS1vR",
	"ii8N/OYWJqxj8Gj0Bk4/4FhKtdOT3nreq+at6lUONJWHgijNlw3RGzLNh+gMMlIVQ3TK50N00mjFMY2+",
	"Nq4EJflSySZR2Wa2fp5rWTgFoVe/AVkzBmsfRzavDcVJhhcyEVBYbV8/tYpuZ0xxVvAzD3UXnNHFo/rx",
	"xOwyls4dxxTpa2d0eoBSTFMXxXUPjUBpRIavJTHCmybTqLExk3vouCjVQtdxjMsQpbiSuq7Rl9Kx4eU4",
	"eqAHebATiyR90L3EMKJx1DGR+f5WjT23Gt+KbW5ULebv/iowMq37PAqMuo8Crmn9JjBa+SYgFZRSc49a",
	"VNFnHPop10w7qwI0nlljcG539uxzkVm/xrrbRje0r9ntXui8gxUarHKzMyKOV1muPWWbj4sxHfMOBD2q",
	"x21RDpDMuVBda5QV6vkfnz6NGXixDETSeozsz1BpWq3bt58h4zyUHWjjCLL9qJdWQgBTdIHGYA6/4xxX",
	"jUF+rSAhWaJPQKJxO2Ku0bo06xRLiLhz01Ff7KED5wyqBVJNSeworcuXgNzp4q9EBMBjLzzVUpZFu9Ir",
	"Js17bOwNdjMOtgzzas+nbZRpBWYVpnSBfAeRN6iljdFrtWFbzjl77FZ2455EHSfbzJCGodeW+PgCrdYn",
	"R25cDeoOVlxGIbRkyaWX1Z35LVytXZdXUJQUx7p1Rjrf0pTmTkxcloaf3ziQxyZzh1vzz2ielTZ2ad4C",
	"NPNzY5/DvpOIqx17OBqESp6t2Ortbal3uKjteUgK7IIndaio8eJy14mvbDhM08BeJgVkxJHQTIs2e+hM",
	"/2idvcZgVX5OJUips3gcNqSvFkjGC3T48TjkoPx5dT1acLIodWxPJVlx25t+wAxlaiCluaqHTgSTSAIW",
	"af7IqCY7sFgQaojGC3RlenBV40B5KJYcoftTw9eUjzG9dDEuVgTPuD2P3lXBNABNDSA2pMaKva0NPhal",
	"M2T0r7t7a/xGXjcdrw2tsWmSaxbxp5PLgxMma4eaFdbBBS5LwqaJAMlpFRcjdVeoqWDsBaRGoaLAjyWU",
	"WJgr9RrTCuQjx5zj0vA+mKEDryl7VRv4be1lllIuwT+FziAmhNcRzfU1rDg61E2Qgd3IVXKIrokkCuVK",
	"lfLF/v4v1ZMnz9Of372/tLXeX56aItgXINU+Lsm+fU/dN+1d/YPzn9GHg9OTI3QyGr0/Rm+Pf3atVA2B",
	"/Ct8LTHL/hIU7XnrBW6Ov+E9NL/ABVrwSjhA/YZtpd6qrTzNjFsLEY89FUauXGE5fcyUscMwtiGKG0vO",
	"2oCp1UHM0D9ilmw1IDW+rdamnDnM0Qv04EIQrqs9cMoewtBPROBW7I0XyOtX+uhOnLBvBfLawr8Nws+8",
	"QinWkvGEMPMsIbATzu05N9oT6/C3Vy4Gw9qL6grL2WA4GCkudPFxSVL9WZKZ3tOXlUZ+L0wPPseiIJQk",
	"NVsSdRO/4oiPjfLGrI7u3u4QyR5sj93P9u2iaqplrwGDjqbXc1zAHjrkpeXSvS62MoY46eSTLfhsKR6W",
	"9lE8BwFbqmY3RXb49gQKtW3ebkKlvCmXciH9OnJ3HY/R3sEGjPpaybLAeK3xEV/CdheSp36lX2HNz4V5",
	"MlEcOU9jy8N0RMBe2hB7C5pnvkRSnDC+VueoCYR3D9KHaAzGpotkGTCErc3vReh7Pujei3SBJLDM6PTC",
	"wSTSE+RFAUz9Ncp95GSafxsS84ZM8z7kpTfnzyb820Bqolj2gdQSQM9EZiTygnmYc32lGCTjNAPRtec8",
	"+oLZlNeMsqyfwgUYDY+u01zBocrJxMWSYI1kFRdOd8+/8P26N3vxPnb+jXIPnQK+BgRGcau4Hswa5Via",
	"jgyKTipKG4C6+vQff+yB8ZTPv83enPJ5n60pzPvAtwHBvj30gYKXwLZjuS7h8bsS2H8V03UJep16cF0l",
	"lnLORRZ1wW8v/nAwF0RB64U+qvN7FaHp3njLM2lgsGCINE2yZ7b28GrbWWx0/H3SzNrv3WBFdMV4QMmt",
	"pEAjwPhXk26wwDASS49gUdsEgmqZfd+upNmxsV3jHkQJm0Fmds6Rztqy1ceeWml4uEroNJ2ZLpwtaR8D",
	"3hUw4i5onu9wetf2i1U/MKOwkKxXDFpT1xGpfpVLwf0j/uYNdodvg+5rAzJfNCN2IxA7251e0Ns4Q0E0",
	"osTIDO6yiEcU2PbA9OZi7nmI9dgbKGBuP9SiyTm8ki2v32R3Y6Xd+eh9qIw1IKbUCtYRW66DSnF9Q6WG",
	"wS8wMUiASiy8xYfZ5T10QOd44SmKETCdIbtBAhvDQrYdP3yAKm8uEp+RhrC20F0b107vWWJMB5yOZN3a",
	"XhI5Q43PPGrabbXka6jHKWbTyjnFt0nHmGI2u6W45Y2Vs+nVGGHJFQqkDG59UBOAZ92YRdGQyNsc1vS7",
	"buSbRvWoXdduFXDb681CWTZotWXoqVtQUHukvnIquO6dSLnoEJ4/rV6WN1dnp8i2uUm4tGBBupEX+t/1",
	"Z86RLx7g+htwrDeIj/702YaI/ptHN1q1WOi4/it2bsPZnIbRbHYLZO8D4sSc0huDQB9N2YWJeYGOrXQs",
	"X6APF+dDZKIGMlAmMjazZhU3C9MSf9nHlcotlvez6G6ys8RsuNeG291IpCAj6oahY3UXqwLa6t92nmoX",
	"CZemDkzZMM/L8c+JNLr4bXxy3rg2PVxzeh89rmCL+HmlINduN7dgEzTscWq6NijnTbSYMmnC/yxvOpFJ",
	"gVmG/Q5Ea0jCpnRFBzGKtfXBaziw6AnkiX1c7IZ3dc4snwaYglCDz4GrgX/tkRSnM00XpAJcSEMhCB0M",
	"myYb7RG+69g8g5Zp3d0MG0iu5tXjLsfeSlMTutzeDXgm+shdDriTyHnnu+YH1uV3P3rXN+pOx14pk94l",
	"FDLF7O7XXVKcjAVgb6Z1R6MqTL8XQTZBB+98nasy5QVh0+806b6ipK2ZaPAIZ3e5RGvYi4uGfsZYe/Kb",
	"1R9FQshsHztlXEnCQMrEG9O4J0E/z2sQC5Tbd2r3X+Ef+6h5eDQ17J+MM83T94/Mewvx9NenAVul6J5U",
	"lCaRCNEd7aK1tjeK246rD/JOPd1yPY9hqK7T8xmiqqQcZ2As+fikDswS06obACXRsmNvEG31JWDGC2QS",
	"JxA23a+Y/xNhWzrmX1fA4Kz+E1xlJO4COCohJZOFNcyHlj+695obL1AJXIMVuupzMcXMofDeilhQLnN/",
	"ne1yM2tVt/EZIm5wJPpbW1iB3uyPNKHht12npmXjW2Ad6ZHvPb5GlEwgXaS0lZcg5UwqUaXOgM4xOPZD",
	"gCLCkuFtDmhh0s3dlMj0zqFn49mFc1I5EZkJorpALrCqnlol0hxLY8OccqYETpXR0hGnWBlYSwPkQ4UP",
	"NAqav7Ot5l9SrPSJDkGaw9i7nw4MBZopXuqxucnPxcfEGODOYbzdUIJniTOPT6YCZ7fvcWCG8AqD1ay4",
	"jSovtuPft4o05m64vpHGBEydC+a2MakFXAOL+UgeS0UK/zAenMoHErk27TdmSElh0GqNu8kvv2T/eDJ8",
	"+vxfD//64pdf9uzns389+uv/DG7JzQAX221O7b3kU4NswRMJSLnI5Iala/zpTfJH1yiMXhgs7mYzzifD",
	"m2j/HVodXJyMUszaufR31v6uDx9u6UAyg0XydCdvk7CHZzfu4fluHi+c0yTtLtf2Cx/XE34DrvXGfGNt",
	"Or68u73SDt1yklm9dWshueN7+IapFtZgymVNymP+I4KzRbHSuRgYZCuiUOmZRVI5Lu87VjDlq7I3ysoG",
	"2ahTdnpY9wJrfKNGTzUXMiHMmfhBVqW13wJkzm0g5aLkwhpFWSXc580iTCf4aTS6cQPYA4nKSpRcwt5N",
	"3ii/VILIjKSrDbQUCEEUFwsbS9PGx2jD4ryYupYtf4xF/Yr7h3TjhrY3oPXC+Od1ToIRDGJNHKj3l6cr",
	"7dY35Cjpj+cjH6RhhbXhFpQhFhKmHdxBV+p4FqxNz7O+N+kjGW86THE/l253ptamznqvZGMS+w0ypXgr",
	"zWalNrwR9T9hkaAd6ypFIfjxSTxPjzdMvtmj1khV45WJP6LPwIPN1OzWbsgwIFqfwEE38f91YTe2iIVx",
	"A79Um+7BZ3qLXIqU8nmCmb4ZeSUTWYlrWCQCSukjt8WcjRFmC87Ap5amQdB424P1o5Rz45BniwKfGaNW",
	"Qgd+VDSybXy8NxlVSqScVgVL5iRT+RIy/rjChQ9MOGhM5bK1xzpPu9qQuhO5AeZGEJGND5SUZMq8GxSR",
	"TUb6Ph76wWAJFJiYBFpW3tswtEnPuTR+YxJq+hz6uIpABDL9+4zp1jPc+4wLmMJX5IZu4lbVQatSzqwb",
	"2N423op2WnFP5U0LqQFuTSWIPaN77LvAFBQkdYICGUth92tFBEjE4KvyPmAvkBMjA/mz6cSa+SpMVigY",
	"XRpTa+U6h3HO+SyRkIpYDkanYCXMvmf4CIVWxNUMGUa2KXposm5UAk8hQxSmONUIkONrwivxKMxyYMdH",
	"cxgjPbbrYBWsKcWkiIWCPKnz6JvoNFLxAjX1kebIKO2ai7IMTYGBdV60VFUuuSUGThmHtt+jBo4YRgly",
	"DYm1xE5OjnrdnPY4OXRv3S3gnlJ6djERvNjGyB1XGVGUR0JYfaxR2PsaqkpolOdsiIxvi7cwttEadUeI",
	"8qkx+XQ570wwVMWRpmomD9FDd6nKoQl0JYdBTjE5RBeCp5X+Y29v79HJBC14hUTF0JhMESlMan5dVOAF",
	"mmOmdNcOfy2kY0ixNzef4wXKjOH7Yz/JIGrRnIuZNHlzBDyQCJshXC5R81qQE7WHjmUJKTHm1Fllgpw9",
	"FPD4kQVFhpEc/EXjV2FqvYxWPmmMgaV5gcVsdYCMl76KrDP363m9+3gwukAHow8j9DAaQeyDCYLhSxVm",
	"GRbZo2VYm/7XAWoeRyiRsQQdq1FkMhmipmVNNn3OZB+NurLZ9BWICU5h7RtQ53LcCpCm6W1A0op+uMu5",
	"aToA2YpUkvKixAbN6qwoQ5TOwYWRH9roxnoXpU0FNedNe5ljAQgbiU7Xy/G1iwethcjDj8c2P6WiUB9f",
	"jVrGF0rfsQJSk2DQuTrjdrIc9DEHtpzp2qXkHhquShplQTC7IA4LkW0H7CCVZB2abCk7du14vRZD6+Q3",
	"BSicYYUTez63RZM6I47vx5OcW8CZWpiiePWBd7QRjU4PHlj3Cy2r2QvcBsSBCMlptVoHw5SovBq38/WY",
	"Hl6fXL15/9LMZFpHnFjdDedTConMAbanCXrZXpsOkO0gHHWbhe7MwHY5sl2e9JuIj6rd6ct5rPbuQjNN",
	"ieZcItHLKWAJJln1C3Ri4hNKJTib0oV5HCgKYO5M6FurZp7GoAUOfYj3jYH0BZrnRIE5YbWvlsuk7J/e",
	"S8G/LuqL4nxK2Ne1GGm4Bda13Vxd3Zp2RFq0V++MpIJLPlHoStdvM1zr4PFPZ/VjXyf2nU1VpomSqYEo",
	"aP7fMsImyEQdJ4gj6eM2cJPbgKIcMFV5BHF8mITXAmcbbuzaRE5gYziQrMiXtPkA1JC6nqyjyW2QGcON",
	"E84Y1lLCtrC1W98GPKKiIJOJwAVohmuXxTJdIN2FcSi4BaCMtdIWqN83oJmPZbUUvMyc5Dq4GWfmMtZl",
	"JtiXcbG08Ur85ASUFKcu91ITU27oEx/ptk0QOCPb1M7A6L2ESUVtbnwTmNKECeFMEqn0ddvqYwlUAVMs",
	"MsMQtPNVRQ7PZdD8IHMmACuX0byjloKbwOiQEYWjNiKGz6g5Jid2p5gh3cTJ2q4XuQySQQP3s1mCuSBq",
	"9cFuzKRrK/WIe60uNjJOwLTgiaY+z1GmadJDJ/w/MoF6UFb5LDZ1IJnAKTyykEFe5YNK8cdmxP4gm8DQ",
	"W8Ft9tUY4xDIQrWBnk3POdxmCKLAh6Qb8rSOpGAOB+64uIpZKz6PYVo7mficsdFSroFSwDXhlXT9uLQD",
	"ndZ76JzbDN0mnyowd9+2GOGhOTzOpZpxpfn4MWGG+9bC6JzH6dFWpvIUjyEm+gR+27YKkiVOAUkorV5j",
	"l0jsZkS3l63gKP7dL4gH5uL21FFPbAQWFyOnv8VPL/3TyPJHbj8Iq5+vao2UWY6Ptpvlp7eVgRuCVquC",
	"biwzTInivVQtBf6aZFUZvZA1StVCFDGZsY23jttSY5ztUp6t0/LZu5LTDGQgrxiFYraHjmp5yvykUbT5",
	"2aI1hYmyLvt76MDG8dIjPLEtBBT8GowGrRnzllJEnOGvDYBxd1vPfEYjtOjb0xilalxwd1aNDvMYJvzw",
	"ZI1LZsvabH0G+1aLJCLYXYDQMjWeQpDVGTP04OABstF1/rJbSJzXhgU+GKyzQbNQjftChR68vBWgXvYA",
	"Ku0P1OGtAHXYA6isP1BHtwLUUQ+gJlsg1SsHVXojqF5Foep6yUy4KBL/dBJnP47cg4ix/l6gEgThlqON",
	"WYnfeobwLsSGci+SMUy4WPbyaQc81zXR/1puyDZYgtl0AMvBTpxccku08TI2qotBBTiTqCoNlINVqT+8",
	"adfyLP9Pze+F+iWEkW8ShhfaJVSq7ybQT6GjdbAaj4r+cOrqN4RRsy794aN8vgV4lM9vCN0pn/cHzvmh",
	"9IfPNrghiJbp6w1lOjOxuRhE8PGde77dQ+eOu7PPP/6dx8SrdCJ2iwvb6/M4ZgdXfAYxky5dbN4yiXBC",
	"t9Ek4NRoJMxb7kh3sIdeg0KcAcJNvD1ckj3T/V7Ki30zhOwPUhjKbdWCfNQsmMIzsCH1xloiMYZhKgcx",
	"JxL6LYHCk4mVwjc83n90z/CdR3iuuVPmnsLrcGTjBXp3UKn82ZpH+qGT24lMDBRoQvG0ZlMlmA2+EhVE",
	"X+y9rGyAcT2aTbJ9GQ1B1KYccJH09G/XwxSQ/MZZy4nkYCJIivcPxiT7gtlgWBekqcDBZ5YRmRyM8Tgs",
	"pFNiIfMFssCtVrKA8PslLvCMh99sWpHW95eKBt9ESlwF3xQztRAQlAj822/4mlAaFlZfqmJchSMfYiJ4",
	"+KnvMMzSsApUKvzkDM+M94krOMIzLMJPkYBMRphiXATFX8iYVyqY1BGvMA06PqbJASZVsNavBIDi86Dk",
	"NR5zYb3rXMkbLHA48Z+4ITNyXIlpUFqF+/MWF2Vr6Lc5FopXAbhvyRRTEn4zmWMZtDnFUx5s8SkZC+is",
	"9ykvwq8KsyzsoBpXxRjLnIRlEs+COmeY4jEPv8tKtb4liAARzjQihstzxqc4IzIP63Am+DUJRjnXSDAO",
	"wDjPvuACWFiF4AKCTT/nFZ6lOVeqKXtX4SnOeDXlwWgXXCj++JxfB1CPME+uWmtzRYpxNVNBuytBSh7u",
	"wFXFSLDeHwnLcg5avjuwqTT2DzLc+mRpzgWeQqtsWhFqt74uUmRatUoEnlaYsHbZFJgiTB8iYFwmB0bN",
	"HqtwiBUusEjjzQ95wbNLco0z7PYgUkVkfBz/7afqS7WI/nKKk0vCv8SbnQHL+G/x3y4JT15jSsHh81KF",
	"EaYKr/iFJT9VljxGfzytSLzPqyqtihUN38u8wp21qdrrISuW2ge6ukiRGZ+1e1SzsNFLnJOl7+QlZhkI",
	"LFs/iDHOWovxEigU7W/yW4hYmgKnj0d4TFtQveQ4+UBka/le8invFBDZ6iuOYYe4GAuSTSF5iRft8pIn",
	"r4WeSKuYpRVrFQic4naPy5h6iBfAWLujRXunDnOS4ilvl+QVzlun6JALTJM3WIx5JdrlHew+5FJp5G3D",
	"IUCq1loeVgS321V6QiEcR5gZ04YcX7NW8Vzy5YLkUECLgBwBuwbRKlCCExWWcM0WtyA9zgrO2qAeE1Ex",
	"KMNVPKb6SrzGGQ8HOGYSGM7C7l5xoZJzoG2ITelHvGjtjC7EFFrn+jXFaRdDXvNM5XjcKuFyqZbGoOSq",
	"ErNWYRe+1xXOgPKqNbvXFVZQYNqpuMC/VsaErSlb4BZdfYMpmeCvrZLrThUQBZeE0nCnT1hGMKv/11eF",
	"jPz8lvGvkeIzLIBNY/1dgAJRMw+dH6+A0uSQqEXktw9wjaPlhKX6QMWg+0gYLnC6/MvydKprEm7Lya+Y",
	"Vi3E/AkXuI2X3avip4qBZRpdwVtgqkpni/1TXhFZ8y7dX884UySF9vrrhU1OzsMSgSmwjHwJ4TzFyQX+",
	"LSwgRQjjqaZzbAq0tT5ReE75HERyIYjJftWUn+EUCG8VMNy+0HVJ1W4jyJSrdokiJtVdq1Dhggvebvob",
	"VrRFD5cv1zNgmk5AqzMQJGtXUhTPdGetwq8k5V0kO9OAtW+WM85S1S1RIAQsumXXJAPeKRSAaadIghA4",
	"XJNz7KUMXwDz5Gfeog/npCTTFhjnjrGrPwVnOW6XqDw5wjOu9EVaUZyv+vUQ9JRW/arBGeH2xXxeVSF4",
	"774Qhqfh6BdYn7l2wZQRoSo2bZUKfTWScbhwFzkHRkKCornbx7h6bNGy80PCJ8moxIR1ynlykApYKvwA",
	"NG+NVoEuviRpu5QpnBxoshyi5SUmbJFckvb9dYnZjLDkhFEIN/YSUjKBVsG0ze5e2nwvrTqEJy8FZi1o",
	"LrnEonX6RljDdyLxGGi3WLS2SheRNh+hi3hi7thOOU8ucNWiQKOUC5DjhaxYFhbnpBQ8DZFgRNqM4Egl",
	"L7FQuebpFu3yn3jOZLvoLVGqU3RapaTT4VXOC9ypZkl/uPCjOZmo5NCaIgflVzCtUi1xlmG3V3nVooBX",
	"uU3Y2r62r8iXqn1hXukjp3i7RPEWnfmgN7JqY8sHIqYtZP2YEwU5Fy3u9CNhjJQQHpaf8axSLdLxs74u",
	"5jPm0EzvfaqcgsESqKboCF/byy4oqjRLdfRe1JdA89sZTn+tsCBLxZ7HC8rSs0pkvF14gam13g/KLo0+",
	"DbcLR7xSeXLBuwCMFnzeqXolOKXtog9cKvP6eGAK9k85my4Ai/ECDJSSaIE1+JsW2NJ881U4ltt8MJwt",
	"RP31q7JE2X3wMdRfMp/isd0I9z3L8RhndYFaiKbxSzzNs+bHlzgXjljZz1lQk01ndjb2UzBs9VHmE4io",
	"6kFfEpnPoKmrOWHivw4xTStlpR/znZPwg5MxprKZ+WHO2fRXa8TjCio2nYUFnPLCEmn9eYTTFDcfBZap",
	"vfjNd+50K+aD0Bqqo2qMgw+ZY9Ys6itc4GklGzBf49/qv7V40yzZGxgL3nzx5DAnyRlheVPEpslb3oD/",
	"hl/X638iZpWS9cKdSIXZuFnln/AMiwaKn/ACl06VZ75BVNJfhrrgLQ4av8VFmmPVTP+tFgZz0nxq1BHN",
	"p8oLzLIqKGh/55hli2nTHacz3AD3VmDJ+AKLZjpvK0xxcloVZdUMUxm7uOZzjkmNR2detvMfVfMxxVmD",
	"JGd4phkV0XwzQmtQziqZNifinKRckvrHc37NZ9VvDIJ112WSjEkA+7si+FvgelUvcsaL5AKaDb7QvDJm",
	"uK5+sdDnHjeT/BtWDah/05Ivw/Wx/9vitwXlIqsBvMRsyhuUuiQLnNWDjbBnvezXLMeUBN9aFMasxq8R",
	"8AYhRjlm07zB+hFhU1xyUaP9SEDGYMbpIpj8FSZlc5ivsD7prF7cqzGhRDY/Qy6aXboCmhxck+v6OyfF",
	"uAq/yrz55LMFbz4CCN5/qdg0ucAsC9b0PcWYjXG4su8pZslLbKMh2RJRFb/WwL2X6vE5NMfnAzFuIqye",
	"/weKM3JdE3FdZK45GXyyYPl/hhlWIAjzsqMtFHBt10DLDPoeOPiNO7WOL3kJoqjslvuiQ8xsgKegpITk",
	"Awir4vGlrzAI3inpFPyEWXKG3aXjC89wBkS0hryExewLdlKmL7RX4GvgYkpatUcqeQPUaYibQsyovd0r",
	"qQSm+sY5vGp/Z0AxsbOoC18KIr3aOijkM2DJG2Jv1rr8UBNnYYFvCivhOIK66AiLuT0NddFxldJ2uzd8",
	"jIVqFZ2+OWl/E5aBu42bQi6y5A2ft4c8AzrmlehM5Hz0sf2tZZhWyQV0S/5WATBJ3emti81+tEsWGess",
	"+RWWBWakPdEPJFVcdAo/gmzP/WfNFc4JM/v6UuDfCN13sor7OoJGoHNFx9j04r5cn4fHet8PR1d/PDwy",
	"f2GGM82AWFxpSrSIZ0mqK9DdgWBNwRmvjK9hU3IO8wmvWObWx5Ve4JRMwq5HWM7Mw+QcB41/rmbm1B7m",
	"hML+oSbYDJiyIJgyC8GJX/5Dq3s+NjM6Hrl/fzw28zqeLko932NiVulYpfuvz66av/7wJPj7afh364fW",
	"L8+Cj/Dv58HfPwR//xj8/cfg7z8Ff/85+Pv/a/5+HEDx+Gn4d+uH1i/Pwo/n4UcA1OOwVlgprBMA/jgA",
	"/HEA+OMA8McB4DV4AoDNSZq77/eHfvHfXx36v5gWi6XZYf3994rqm+a4EryE/YNC73Zm3ip9Ecu4pTC+",
	"QB+QWW7QyBep3L72u++XQCf2IDQF1p4wKBH2fvbfAisiKb7GYVklJdCw4yrNsYBW11WGy06JJGwKQeeH",
	"OZGE4WCih7wEluNWraNq3ALpNRkLTO096osqEMwKba7kDVBJ2Iw0JSeSQsInyVm4QgED60p+AtHq6K3m",
	"VwjTyxQUErgOvwQPPk+JHPNgjNMv1Zh+seKvL+Isa1WpvkKhyfK0KTvDmSBZ+G1fuOpPQSDHRdDLGWHm",
	"5vefnGGjCKm/ZWqMn913w2e6gneSBtUvsCDBFl/wbMqF1d76IoGnVYA7l2Qa/HppdWzuy3B6OPzWV74g",
	"jIdlAn+B606JCtd2RIoJCF7yYMdGM15+CYfik3BWI8XTWc5pcHauMKWEBSt3RYS92oNv2RrkPV1gxq/D",
	"9X3/Wz7lggdb9AFn1W/hp5ayg2E0AxeiwQdCGamCRf7A6ZS3Ue0jFhIHu/Z3PBUmWmX9XXLBf8sXAfh/",
	"r4SlNq9fmn8eO8pvqb6n+J60OkoVUqk35gbRkuDMCoInKbibxmr/9w+YFgoYFsTslys9zJ3BQf0tiFRW",
	"6eSLeNqqwQsugh7egphWmmtris5wDuEXzcg1yLCkEkTZdayLFlypoNUlVMy+xZ5Yfv9ECmyUf82bxE+4",
	"ND+9neMvmIIhOadkvNC/nZmL9Wzk/v3TmblYrSJ8/yX+gjXDBO2ikREiXcFrE8dBD3j+d/PP48M3B7qP",
	"c3yNv+gFuLjUd8HF6OrPF6ZzxyrsH5QGm+vPKp25rfBFL3k1xYR5PZQvPsyxys2V0ZRYzbP/tkxEWDCx",
	"oYLqb5aBGFeGzfdlr/AMc+M9UZeQLyT8rBieWCsaX/QaU1w61GjKijFpjf66whmmKbYxYYPScA5vOOPU",
	"Xo6+yChE7TuDL3qLWaeAaBwpcAust1xjQVgQbL0vO8NfKsFbBeLXCiQOJ3NGsjkOV+kcVyKE8ZxU4UDn",
	"XEw4nbVKqgLCjb7AU55cWN1zU0Zx2OsFUSkmIgT3gufMyr9NCcMltAqESs6sZjoovsSCK86mIRAjTOyh",
	"aAoKHla4wjlprekVFnjeqqG7VLgM4b4SLTz8iGfQ+qT2adEX/IxL/cU93nOhqqlBkst3h+bft4PhIFQP",
	"XFXCBlqzvNb70f4B1Zy2/xsqLUi7L0F+48z91LD670fmfDx2z51NiWX834/23+A5JsT+7Wo9HikszGTe",
	"j/bPSJqTqR8mEBHejwJB4P2oXlTLDoas4MfHo/f6P0N+DE8YC0tYCZqUAibk67K15PvLU2R/Q2QSpv4l",
	"0iY+ps5NlagHEvE5Q9dEqApTJKtxRgRomWyxF8mG3z9u1hWOhCnbNqbuuv5dFLBuiEo9jeWUVn0jzOGS",
	"JCbxxVK01c3m/WOBWZonCkci11zhKeIC2SpI5ViZBLrK5BYZIowEuMgOBV741Jcuoy7QrGtN++OT1Qb6",
	"5i0s39frH5nguCI0cwl22yC+1L+YnN7fBLqlyGK8KIhKciwjFvaH5kekf/zGUNxygoONA7bTbWx2tAR2",
	"TQRn/bP4gov+nO1+COooAr1ihb8iFPoEt22l2N6me9PstYknd4vZASjgrN+K1tlje+eS6wNnaX2mEt0F",
	"BXX7weQNGduQfe5G0c6xmIJKgK0+PZFRTBupsI2F07MVSLUmLH79c21ZvxHDY4Eh+2V4vmHkZZOORS7H",
	"q37awwd6w2V4UkcY6mQLvr+W/vuupTrfCp5o5s92dRc5V8xKJDIIl4ozG/oS04sQL/+1chka7C54ZsJB",
	"7L4OW8SK1VTEge+vKmwCbuvZ9Cb/zUl0F9eBDdrdY409hdsUm/ubUZAV6QHW5PrMFgwXJE0U53RFrs/d",
	"0xQ/W+UzptaOeJsyBud0Q5YKLTAsZ8v/4+bNGA7mgihoZbTFlcqT6N30ZA1lNSF7jPfZaPRm/+DiBL21",
	"sYKXhJtK5cCU81Ksb9Tas+zixMjfUs650DL3aPRmu2xh4VL5yAhbpAR71i9pA3xVAke8uw9qQoMymBBm",
	"g267e8M59qWcyaqwPoIuilDHv68XF3DrWF36Vb8VPJL28mp3tFNPJvPIatbL7fH2exj6mG4ZCmbDeXXh",
	"01YH7L4x/t365i8LGNtf0EF2kj7h183irDyi/fLNuHql4HobHPO2dVyfHVFoAxbskBH7O2z9mkm8dwky",
	"2xOwkZc3xGJ+9uMPXRdlH8U5yikKqaI+yT/eWpLwbhQOSabMRJqd56ByE/zLJiUUSOa8opkm1cp5c2OJ",
	"bE976D2TQCFVtj5hUgHObIBXCsYxHqcmKWErDvKBhWO4IhN5VYLw6UhXAmoukQbKXANFKSpBFERKc8/4",
	"eOPwtaQkJYouXEh2E0IwhyKEaeRHbbJ5RJIIYqkSyl3Gvd0YYNNH790Nr6HNl8PqQAEuKHy2h57++ASl",
	"ORY4VSCkFjYnMAexh05NsEw5RBmZEmUDn//f/b39P+w/3k9MdP6Y5BRkc/v0yy/zvf/7h8ef/xBJ37bh",
	"ZB3abGsmItiywEx5OkvgK6TVqqQ/NeJhuWCpDb1mY57+/+z9e3PbtrY4DH8VjN/fTNup5bjt7rl05sz5",
	"OXYubmLH23KSs89OXxYiIQkWBbAAaEXZ4+/yfJbnkz2DC0mA4k0ySduS+kdqQrgsAAvrhoW1kphuVnw3",
	"K2ylrIcCIBtNGSU61JucuarxnRr5uyx4ZEwEDoGxEJXm4/RRGHo6AldBaJ4pJWkWuHnMVZgt9XolC1Sp",
	"Mes38N2P/5n8990R+BgBQcFPv6YbFIZ0gVb12VyKvR//+6f//vIl+Nd/Hv70631hYr0xZT7yElTzGOJF",
	"cdVey1rcOnMqWIgKzKADLpr2gBIdcVUdlOIV0mGGvRKho5lK3jgdnVzw57QdWdCPAhbeRBiuixrisCBJ",
	"E6mPFWVXUUxU/BDVRUK81zAqqRAoQA9wUs7jCvPANNp1scByMR+GOgl3aZSwb59bep9bep9bep9bep9b",
	"eqdyS6MxMpG8m5H9Eqt6pW36jN7SuntUy/iebf8mg0kxeyjiUaOxnMTXm4xmJ7htOmAulXbnk8xlyd5k",
	"PCs7a5MR8wmpO59iYT7rjke9L8Onfa72fa72fa72ulztSYxJyd0KmU0mqbsi94qwlpfElDSV8REjCtgn",
	"J4fxf5TrQ/uU8V2ljLf3X+1XsjiFfVRs0Zsk46e7J2ki0AIhuvF2lUlHaefdi0MWzjxAQGkmKJiMnxtJ",
	"CDRED2CapacigakGg/SGHOYxSbWuwJ0LlJjLNj3QZRiyXduW2ZIeSahaGz8qrV8VtIfp8CaqcSXiaEnJ",
	"3fQiS11hhnSVVGI1sXHRdYINq2FkunUFdCUONe1b8h5sS0ssgN7qJtvuPjUWt9aM6JLvVULSs21it/Xz",
	"ImLwQD/YdQXPYkkyAaLmCO6GZNKr/eRxRZQKvfsBckqik9QJK3KROhdYtm03n4LksgHabCS+OIhUIcNc",
	"I+0pLDXbKr9bk9QmN2GLGz7k1ZrO2acIrTJsoK8lLNd9R1Dpwb8qXqicgDQMvDR7cpN55ZzxCy70TJpl",
	"QT0YBMUbaOUnbHo6rSaJiFAwtvMwq/ARlcMdY4aLTFeKEnmjgkSDp1NKOQKQAKqKVE5ZJ9mgaqvyX9gp",
	"u8UUAX9KOUoaHh0cWvdE5nB5hoe6BT9mn4mbuZ6KF0ExLXyI2vwhVVH2vhQHkvR8CaDmU6fuSzP5mcx+",
	"aa6/PypyoK1pDSrfavtYr92r8zBpteuYTyX2Jomf0+VQOR+LzoQ651LsWRG9Cp077EdgqaO3HxMk8Fcw",
	"1JEqku9f/u04LVI5ClQaUEzQaqlALGKYI3BFQ+wvwekU6dCmpsYbpkngSRQNIxwglnbxVwzTvxn0pwSn",
	"n3GAxe/D9PPzEFwxugitxp/lrzQWPzslyI8lOoG38Sgt/xYzlP2i4/WC6yTBtbZ/J5VfQhJgkX6F0J8F",
	"sT8Dp8lZANdYBQHJfrKGesngDM0hSb/jySmjiyD7JkGI2EBNLytkkb2MdvEbBqPp398D7Y+viq5fDW/s",
	"b1P9FLIJdfpV+zCH7Cv4MDxxvlcqyAIQIAFxqERs9Qu9SyuGEDPwLoTMLUk/aBzwKKTW2HQEQ3GEqYQU",
	"mOdodnFajwgGudVOkwMzwVMG+VQg+Xuyfb8PP1yC1/pqteDn/7l4n/2KAjWxpO+lH1KCzv4nKTiDCzLU",
	"jv9pEYoQCRBJ0Lig/IZBf5bmlLqC/gxO5F+v1fkD37++ev0DePXVzPgMCeSLgc4YmmLZGfVnYbrTZ+wt",
	"gvJcqLnpxVJvEc6GH66SSq+CCeLWbF4N32OSrttrylRWOPOpoo1gP4GSZzvwRrm/gU9xSBCDIxzKRUta",
	"YfEejtSOvY6/fZOTukbqNZtbQXlMYmvVTPnZyfDGtLAKs5VTa531mtUZFjU0yVT1AkqWZ1cIEZylq/mG",
	"cuSDYfqE4y30Z4h9IAicQq4ixbyFAQ3lcsmFR0ylX/YNmVLZH1jxirylLE76lp8xny1PzzNIzl9eAEnW",
	"5L7I2cui+TwmeIFSmnBOxBBPpoJnzX5/zegE/A+D6UBWyUei0x6bX96dn6Zk8B2OFxkGzOIRGowQ8adJ",
	"yQUSiOGshsp2P6Z+zMFnNMKER8hPN/OCjoavrQ8+ttHrgn7DYQjBhxFH7A4KylJYLxHnMc99fT4ZZiWC",
	"R5DNMvy4RF8jmlG2SzwTKQW4nMOUhl3SwCLUV8bnIv316gI4BO4y9kOUsowPESLch1HxTspfP50Mwenw",
	"k/y6vgHoDoax8j2c0wCF9rn7wPk5CdBXcIbuoB7x9EQTSbtWLCLKxc9/S8a4enuVQa8hvfs5KV/Ox5Qs",
	"LTZk0C/C0QDas7q6OEv+/HsMwyUH52QsaSSLfaE4mYTj+89o9ObjuaR3P2Q13Xaf0QhG6eJeK8+fo9u0",
	"lsreKNkgsYi0mtl1PKI+zVrGXHJUOkkKhifX56/l/31IBM6ot+LHYBhjke71EM0nDEWatKUHYPguxbwh",
	"WaZUdkglizmJIu4zhCwCM6QEsr/HI+Syk6x4pV6eo8lfpOwje089r5JWERUv40m6MMPhe/AejrJvHvL0",
	"r+U3ZNVLvsD3coJyJ4YC+rO3cDED8h9T8wYxBu3jdYO44DxMP18PMypzw/DdMvuIx+MQTbPFz0p+sYq4",
	"WMA7BF7HHJv9XPlNw3k6/CTBvFlgLkLqz8D5HE7SKX06fZP+iRj01YHU359hhEV62j5LDqF3lSW7qkKx",
	"v4WSG6uAlWFSpj2u0qaRWc3/gQQL/C3b5n9ARtwj/r8nhgH+UX4zWuAMmfhlKd86wFE4HviGaQUgwshX",
	"2aPHMfG19UEeSHO1DoGxmByBG/WyhGdal8o6isIALKbYn6YOjpi4CdeVF79UcyWvo2NAw8Dy/58iAjhK",
	"utdvsnUG7cWUhsjKhv/C6A0gUDxU9Ua0k7Q7HvdphI4Oyl7IcoF9bUYIww/jg9/+WW1gMYaIrOX9H3lL",
	"y4ZuFlxURG1oqkzpEA+JF3fRi+j0nXitUcF6Pl1tlHYNB45euaoT2qqWswXZTItNQKlDV4EBiFGynBei",
	"+lSSbYnYDEUMcUSExgqTbFzqmyuJK4uufaBAE8qWxSnMeazgTDrNPIdsg0LE8B30l9r7A+pkIyiINZYa",
	"j3Gdld+nLKJMK6oqr0HhAc/dMeVf3miNVx24kWQ8LmDfcRDFTModhSejKbrdxgzzAPvFQMilEYgxrAQk",
	"qbwY2uDCop11UD4ZbOGT/uKHEzdmJ4s3wLnc/I+CThkaI1bswX1CQOLnrXLUjykDc6m342yBHZ8tbbyq",
	"f87oXOoY/LXQzBjcnfU1sy8+HZIq6TCKouAmNbH/Nadzr5IWhfQt6a95tJ+sv/rbRjf0U1N40zbFEOtX",
	"anfI4/F8DvVJbth10nRoWt6veCpbUZvWC4JkdNAbeqmalcf6yEeHWnuIJgs/pZoJ1b/Ct5xFGq1h6h5S",
	"tDcrNznrdKnvboq61aKXh83bxdpJmfqNX6OX5Sguq83XWC8VtK9YtCiLelH6mqrZiNnNUdGo1qu3mvud",
	"lNTYVMI500WH0cJrg4a2j0v+usjaWHfb7E0xS56smFmPbCr1dPRDVOI9SfwwDpBXSFPqDdNJ84RiYKlj",
	"8M3aptSmeVOhnk7Rsb7EMjS8rnnRZaFUkU+cV1d5sUz+hoLCOxvJsiPEOCX6ybiurEV9hvnsEEiFbJQ9",
	"i6J2fM6iXOO1PjUpPIUktN6tu4V3eD7mhZKSsjaod/zyhICkIhgt9Ws1utDGu/RiQqqgB4cHFweHB6+l",
	"wloiIepuPK3qF3hVn48BVM+mEeFQxQVQD4VoCNBXzOV2UDDHAk8Sz+vk1TZlgEnhNdksIRW3EHMtZxb1",
	"+D3/4eigUdCa5FFgenlTkuE+/45PtUT8sPhJOUPqnljZtL6PSYg4BwHmEpYAjFBIFz+4zvfWzq4LtDeF",
	"JAhRQZC27yWSUBIufwDV89CS8QJyYPoC388hidVtJmXJ7WUAcbgEt3TUIuwLyEgN6GcSHaAw0jyhAvvI",
	"VjOqJySVsM3BXTeyyEqkCv11ZzQGY6wwD8pjZUOcwyWAIacSbZQNQ1Bzg5ybmTwfEx2YQ8rwnFv2CR2o",
	"wXAunlNDOotuownFapxjjpicpBXhmC5MvA3zwlLP6AjI3vUbVNmVmgQXcKyfWnBFlVGACzfaUiXt+10o",
	"pgX3+2Uv1a8YpeODQvEsOcCePulBUTiNpE7OplRCK/7bijRS1JYSC3kL35gy56a0CCL79+wBK09M3VJg",
	"Oaol7ckz/qSV223xctk1ylnAq69RCElqFEnhYvkRSkMLFMMEzsyIhbCpwKYeD2H5Xir6qB96B5qmD9+f",
	"KAU83R7MgekKBXqfK/jCkbPXqpXqsX6PW3bhXBFDVvw3jfyqCUJyqKu9OK+NX9ZmXnaYeynlWJ1/Q+/f",
	"IkevUovF0Li2DFVUn6FjiXXnkHhc1+m5Kz3dm2AMG7RLdMZ124V0sUkzEyxig5aCik1WJrdV6RKn4SuM",
	"bqUjVqSxLPRohdtJCWR/xSN0znn8AEQ0ESJz4QHSiyssewc6eYHzEqHEuh/z+t7SuFJ1NuDEPFHdndFR",
	"qzsrOip6Vm6Uq/qlvmGQcFysp7YVHNfLlrJWiGm60TyZhYcTjKmqVAhBYWQukS5IE4BXDkJCh3NTN4Q5",
	"D3UBiC4EhRtYS/JWIslaa5JcbZX8rPR3r8xbn3uJNlfiA0pjlfRc3ZmVSKBZsJWyTlKitPqTfQFV98Y2",
	"iUaXzTibXm4uOcDzUCYgWeMXb0w8SqylqyERm3oSrpvooOmJ0XYuzaObRK7MXEfXfxPbPBh0UcCo4+Nm",
	"FC+dUc5UV7M3p+qQ7neo5PD1tiNLLtC8PHysirvmQULJck5j7vGY3aGlx1DEKeFF0RGUrA8gWVKCdMwz",
	"CEJMZlL/VjqT6kF5dxO+kMqpKbJjWMpRwUkyKhjqNteIR3LU4viRPg3jOfEWOBBTvhq57Lg4KFegEg6H",
	"fPVZ5HEh0ikLq5e+d3Inf4kWRsNODFY6Jqa2PigtXbWssKHZTMIezFOhT700ZkTN0JSEy9XxETB9ajAO",
	"U3ULM4CcuHVzFT3SBCRkaIK+AjN05jSSeoz4lOhHLkf1t6b5aSVPUdZbSAmwMxWNaRpaGqKmCxwigbyU",
	"NfHS0J5cB100kYR/AyYUhRXDIutEh24UsCw8o7FXKid4b4FGU0pnnvaeLQ16holP55hMgDzsiIss/ioE",
	"uin4PsDcpzGDExSAEE2gLxFgCu8wjdkP1uE60+ODBRoBObbpoAxWP4R4XmSOOtdXEXrR/ZgLOgdZfamR",
	"wzBUdsWx8eLR1rSJuZgJjFsVX0m8dZwBe6r7PcvgKMIohu+QN6ZhgJh3ftZIxNXHKYkUXBNjuKqLMaPz",
	"Rjd5Jtyd8oQMaUF6ks8pChs8AyJmEuUpOQTK3DeHWLl4KYct7VIZUuWA5U8hmSB5buWOUCCpmqTh4PvE",
	"QfoQKI+8Q5BdsvNDcMWoH8s/jo6OfjgfgyWNAYsJGOEJMHk+ZNEcLsECEiG7NvirIR0hH8ZcXyss4BIE",
	"t5BM6CCZJPBjxhAR4RIsKJtpsz5D33EA1RARYmrdiY/AFIsj8IpHyMfKQB7EcuXA9wwNftCgONafhNEk",
	"qzDRcXtLwwwqN+I5ZLMynsXBy6QKBzz2pwDqm6wPn0+GV+Bk+GkIvnd8KxOb2ScljyalApIAsuCHVViz",
	"/qsAVV7bIeaCr4Mi4/EhyFpmMXiTyxFjHI+1DVkgNoaOrbcADpc5rgVI1rQNSBxXwE3OTdYB4s7jMZ/O",
	"I6jQLL3mPgT+AmknSH6oCJbaRX4EzsdALGjWnk8hQwAqlyJZbwrv9EHgcI7A6edXgDLdOD2+ErVkDXVx",
	"xZCPiEhv46A8FCmcR/pqyfWCxDyzpUJ9U6fCgaetAsesCoMg4/zZpQa4w2hhH6WzrANg2TNL9yN9iDhH",
	"AgZQQJNJZl00SfoBST8JyWkBZ1LVP4TlBz554jJ8f/IdV1ZpgedIM/A5CrDch9Vj7LSqgkEHYlYSvtvD",
	"m/Obtx9fqplMKkzWSTeUTkLk8SlC69MEuWxvVAdAd2CPus5C52aguxzqLs+bTSR59pfr6/fz65Oma5EI",
	"TZ6UXAoCTocIciSFDvQbOBfyEHDBKJmE1l2IPhOSa6XCk7o6Vof4hTy051dgMcUCpXfhCkSO2B1iaTjc",
	"iNGvy5RRXE4w+VqJkUpacMShYkN9Up0LBOe8oIW7euoFDKdjAW5kfVfgqoIn8cdJAwbmLlkxj0K4lERJ",
	"1QChCmGvBWGpvSXXovKDT+lC3zfeISbFvimCoZgWII5x+AJvGAxqOHbqMMSgCubrpZka1z0AKaSmJ6B6",
	"aoPMKGkcU0Kg1BLWhc1t3QY8LA4R98YMzpEUuDZZLNUFkF3IHtoASodMb476As2jEAp5ZEzQiGLyPQnp",
	"CIYprVZeyIF6FCFPsmpsXhRIZizLVPIoqcEiICQeZ34lUQh9yT4pS3xlsBQf8DyCvlBtUwdjdaOc5j44",
	"Ah85GsehahoxeocD4zDDMReS3Tp9rIDK0ASyQAkExvHZZGoqODzXVvOTwITlLV1G5SMXMaoetKMAC1gY",
	"t1m7sCQSU4GHAFbz0odvBSSFBuZntQQLhkX5wU7fGOhADCEtsiGdymKl41hCCxxL6vMLCCRN+t4o/z+A",
	"CHIBghip4ONAu8fJ9Q9lub5rLVjITAcCJ7GgAzVic5A9CcRacKt9VQGyMQpss4GcTcM5rBHQtfRKgXKs",
	"fB2nmIvClxCWc4k6HG4IBinBOi5kSmhVfYOk7yQAeFJlCqWaiAiIGLrDOgmI7Mcku8m1PgKXVACCUJB4",
	"A2h+6wjCh+rwGKceQoWU40eYKOlbKqMLWkyPGr+IkFJGCEeoSPXR4oq6JtRVAI+gjwBHkbZrbOLWqEYs",
	"ihiReJScZre7JipEGiVCB40wESSaR+FuZH8yT5TNfmCSvp9ILVJqOT7rblbffpT5m9itZJ9FZp1VgckT",
	"zZzA5/CrF8RRIUN2HFLwWMqAmEhZVm8pQ9AYPlGllU/zShoGiFv6ijIoBkfgLNWn1E8SRbOfNVqHaCwA",
	"mkdieQROgAquJ0c41i0YmtM7pCxo2ZhrEoGytb+AXzMAeaG7VyJ8mnRlq16/KlGExAXDs1J0WBRhwt+q",
	"3h84EauTFv9R38IrUOyudJppOJFclDLNkSAB3518B77Ex8e/oP9ak5CaNXujROCTg6rYJxqqUVOowHcv",
	"WwHqZQOg/OZAnbYC1GkDoILmQJ21AtRZA6DGayDVawOV/yCoXhdClUuH4o0pm3vJ1Umx+HFmLkSUI9wS",
	"RIhhqiXaoswtDyUmtRAryr30RmhMmfH2LDHgXaqa4H+0NKQblDoAgvcI3iFNOS1zdEu08brc63mKYMBB",
	"HCkoC/eMh9CzHd3cWf7/UnnPti8BCJImqUaxGTYlEoJtnwJnVbAmjnUN4ZTVHwijFF2aw2cc8RqCF9LF",
	"A6F7TxfNgcvc/RrCpxs8EEQt9DWG0p95/lRqkwX4+MFc3x6BSyPd6euf5J6HIxIkKrYjhR01uRzTgws6",
	"Q0VvimUxSBwXjDwpEIO+skiou1yV7OwIvEECUKIeKkyFiPhvL17ACB+p7o98On+hhuDNQSrP3JYtyGcp",
	"ggk4QzoUwUhqJOplspgitsAcNVsCAcdjrYXXXN6nr0jcS3gqpVNirsKBcWsDoyX4cBKL6c8Vl/SHRm/H",
	"3NN+/+MQTlIxVaUVpOCGxajwxt5Jpmp6VJtkvSE4WOMtZfHyCDxH3jdK3GBtY4Z9+OJkhINbHdrMFPg+",
	"g9ZnEGDunYzgyC4MJ1hDlhTwOXRa8Tmyv1/COZxR+5tMYux838ah9Y05h7H1HUIilgxZJQx++wbvcBja",
	"hfFtPB/F9sinEDNqf0oeBolvV0GxsD8pgTP1xtIUnMEZZPYn8xD3hjCEcG4V3+IRjYU1qTMaw9Dq+FXo",
	"nUAcW2v9miEk6MIqeQNHlOmMd6bkLWTQnvjvVJEZPorZxCqN7f15B+eRM/S7KWSCxha47/AEhtj+JnwK",
	"udXmPZxQa4vf4xFDufV+T+f2VwxJYHcQj+L5CPIptss4nFl1LmAIR9T+jmLhfHPELES4kIhoL88FncAA",
	"86ldhxJG77A1yqVEgpEFxmVwC+eI2FUwnCNr0y9pDGf+lAqRlX2I4QQGNJ5Qa7QrygQdXNI7C+ohpN6N",
	"szY3eD6KZ8Jqd8NwRO0duIkJttb7MybBlCIV/FDlG5JnETqfKiYinCCnbBLjUG99WiTwJHZKGJzEEBO3",
	"bKIC7chDhAjl3okysxdVOIUCziHzi5uf0jkNrvEdDKDZg4IqLKCj4t9+j2/jZeEv76F3jeltcbMLRAL6",
	"rfi3a0y9NzAMkcHnlQpDGApY8gvxfo81eSz88X2Mi/u8if14XtLwI5/GMLc2sbsePCa+vqBLiwSe0Znb",
	"o5jZjV7CKV759l5CEiAGufMDG8HAWYyXKERz9xt/sxFLUmB/MISj0IHqJYXeJ8yd5XtJJzRXgLnTVzGG",
	"ncL5iOFggryXcOmWR9R7w+REnGLix8QpYNCHbo+rmHoKl4gQt6Olu1OnU+zDCXVLpjGcOqfolDIYeiri",
	"X8zc8hx2n1IuJPK6cDDEhbOWpzGGbrtYTsiG4wwS5dowhXfEKV5wulrgnTLkEJAzRO4QcwoEo1jYJVSK",
	"xQ6kr4I5JS6orzCLCYrsVXwVSpZ4BwNqD/CKcERgYHf3mjLhXaLQhViVfoZLZ2dkIQyRc67fhNDPY8gb",
	"GogpHDkllK/Ukhjk3cRs5hTm4XsTwwCFNHZm9yaGAs1hmKu4hH/FyoUtK1tCh66+hSEew69OyV2uCmJz",
	"ynEY2jt9TgIMSfp/ySp4wc/vCP1aUHwBGSKTov6ukEAsFR5yP96gMPROsVgW/PYJ3cHCckx8eaCKoPuM",
	"CZxDf/WX1enEd9jelvO/YBg7iPk7nEMXL/Os4veYIC00moJ3iIjYny1fvKcx5qnskv/1ghKBfeSuv1xY",
	"7/zSLmEwRCTAtzac76F3Bb/ZBXhuw/he0jkyQaGzPoXwvKcLxLwrJtfTrnwBfYSpU0Cgy9BlSey2YXhC",
	"hVsiMMF/xcgpFHBOGXWbfoMidOjhKnO9QETSCeR0hhgO3EoihDPZmVP4Ffs0j2QXEjCXs1xQ4ot8iUCM",
	"oWW+7A4HiOYKGYJhrogjxqC9Jpcw0TKSArTw/kEd+nCJIzxxwLg0gl36ySiZQrdETL0zOKNCMtI4hNOy",
	"X3X86LJfJThD6DLmyzi2wftwiwmc2KNfQXnm3IIJwUzEZOKUMska8cheuKspRQTbBEVKtwMYDzRa5n7w",
	"6NgbRhCTXDn1TnyGVgo/oXDqjBYjWXyNfbeUCOidSLJso+U1xGTpXWOXf11DMsPEOychsjf2Gvl4jJyC",
	"iSvuXiNOw1g4dTD1XjJIHGiuKYfMOX1DKOE753CEwnwxc7ZKFmFXjpBF1FM8NldOvSsYOxRo6FOG+GjJ",
	"YxLYxVMcMerbSDDEriA4FN5LyMRUynRLt/x3OiXcLXqHhcgVvY99nOvwZkrnMFdNk3574YcLPBbeqXZF",
	"tspv0CT2pcYZ2d3eTGOHAt5MYymr5tj2Db6NXYZ5I4+coG6JoA6d+SQ3Mnax5RNmEwdZVUDRKWWOdPoZ",
	"E4IjZB+Wf8BZLBzS8Q/JLhYzYtBM7r0vjIFBE6is6AzeaWZnFcVSpDr7yFImkP12Af2/YsjwSnEi41ll",
	"/kXMAuoWXsFQe+9bZdfKngbdwiGNxdS7onkAhku6yFW9YTQM3aJPlAt1+3iiCl68p2SyRJCNlkhBybFU",
	"WK2/wznUNF99zY3IrT4IDJYs/fpLaKJsPugIpV98OoEjvRHmezaFIxikBWLJssYv4WQaZD++hFNmiJX+",
	"nFk1yWSmZ6M/GYHaHqU+EWZxOuhLzKczlNWVkjBOvk5h6MdCaz/qe4rtD4pHMOTZzE+nlEz+0k48piAm",
	"k5ldQEM610Rafp5B34fZxxxyXzN+9T01thX1gcMUqrN4BK0PPoUkW9TXcA4nMc/AfAO/pX9L9SZbsrdo",
	"xGj2Rb3TKfYuMJlmRWTivaMZ+G/pXbr+52wWC54u3DkXkIyyVf4dziDLoPgdLmFkTHnqG7GYJ8xQFryD",
	"VuN3cO5Pocim/04qg1OcfUrUYdmnmM4hCWKrwP2eQhIsJ1l3NJzBDLh3DHJCl5Bl03kXwxB67+N5FGfD",
	"xMovLvtcQJzi0UWi2yUfcfYxgUGGJBdwJgUVln0THKagXMTcz07EJfYpx+mPl/SOzuJvBFnrLss4HmEL",
	"9g9z628G01W9mhI6965QtsFXUlaGBKbVr5by3MNskn+HIgP171LzJTA99n9ffluGlAUpgNeQTGiGUtd4",
	"CYN0sCFMRC/9NZvCEFvfUhWGJMWvIaIZQgynkEymGdYPMZnAiLIU7YcMBQTNaLi0Jn8DcZQd5hsoTzpJ",
	"F/dmhEPMs5/RlGW7dINC7+QO36XfUzwfxfZXNM0+6WxJsw8Lgo+3MZl4V5AE1pp+DCEkI2iv7McQEu8l",
	"FDQrYfH8rxS4j1wMLlF2fD5h9UyEpPP/FMIA36VEXBYpNsetT2It/z/QDArEMEl0R13I0J1eA6kzSD5w",
	"8o0as05S8hKxeay3PCk6hUSHMbRKIuR9QkybeJLS1xAxmivJFfwOiXcBDdNJCi9ggDBzhrxGy9ktNFpm",
	"UqhZ4BtE2QQ7tYfCe4tCYyHOCiEJNXePuWAwlBzn9Mb9DlAIsZ5FWviSYZ6Yra1COkPEe4s1Z03LTyVx",
	"Zhr4rDBmRiJIi84gW+jTkBa9iv3QbfeWjqCKp54VvX977n5jEiDDjbNCygLvLV24Q16gcERjlpvI5fCz",
	"+y11GKfkCuVL/h4jRHhoTm9arPbDLVkGJLfkN5DPIcHuRD9hX1CWK/ysH2VnBf+QUuECE7WvLxn8hsMX",
	"RlcxX2coU+hM0SuoejFfps/TV3LfT4c3/3Z6pv6CBAZSANG4kpVIFU+TVFMgu0OMZAUXNFZvDbOSS7QY",
	"05gEZn1M6RX08djuegj5TF1MLqDV+B/xjOqMPDhEL06pCp9PdDwHXaYhOE+W/1Tbnl+pGb0amn9/faXm",
	"9WqyjOR8X2G1Sq+E/+LNxU3214/H1t8/2X87Pzi//Gx92H//Yv39N+vvX62//836+9+tv//D+vs/s78H",
	"FhSDn+y/nR+cX362P36xPyygBnYtu5JdxwJ8YAE+sAAfWIAPLMBT8BhCZIH9qfn+eJos/seb0+QvItVi",
	"rnZYfv9vHEpO8ypmNEIvTuZytwN1V5kUkYBqCpMUyAMym+pkQKZITPVtv/l+icKxPghZgfYntEqY5s/J",
	"N4MC8xDeQbss5hyFdsexP4UMOV3HAYxyJRyTCbI6P51ijgm0JnpKI0Sm0Kl1Fo8ckN7gEYOh5qNJUYwY",
	"0UqbKXmLQo7JDGcl51zHgL2wV8gSYE3J74g5Hb2T8gomcpmsQozu7C9Grc/3mI+oNcb723gU3mr1Nymi",
	"JHCqxF/RXJLlSVZ2AQOGA/tb33ClnwyjKZxbvVxgojh/8kkJVIaQ9Jv7yvnZfGdypin4wEOr+hVk2Nri",
	"KxpMKNPW26SIwUls4c41nli/Xmsbm/lSkh60vyXLZ5hQu4zBW3SXKxH22g7xfIwYjai1Y8MZjW7toejY",
	"ntVQUH82paF1dm5gGGJirdwNZpq1W9/cGeRjuISE3tnr+/HbdEIZtbboEwzib/an1LKtYaQAZ6PBJxwS",
	"HFuL/ImGE+qi2mfIOLR27X/hhKGR/R1RRr9Nlxb4/xszTW3evFT/DAzl11Q/ofgJaTWUyqZSbxUHkZrg",
	"TCuC5z4ynEZb/1+cEKkUEMiw2i9Tejo1DgfpN8NcaKNTUkR9pwadU2b18A6xSSyltqzoAk6R/RUG+A5x",
	"uyRmWOh1TIuWVAir1TWKib6LPdfy/jlnUBn/sjuJ32Gks2ot4C0MkSI57/FoKX+7UIz1Ymj+/fcLxVi1",
	"IfzFS3gLpcCE3KKhUiJNgQ6wLQe8/F/1z+D07Yns4xLewVu5AFfXkhdcDW/+40p1bkSFFyeRwub0M/Zn",
	"ZiuSopc0nkBMEjtUUnw6hWKqWEZWoi3PybcWIuyCsY4flH6TALFRrMT8pOw1nEGqXk+kJfgW258xgWPt",
	"RZMUvYEhjAxqZGXzEXZGfxPDAIY+JGqdrFJ7Dm8poaFmjkmRMojqe4ak6B0kuQIscWQOHbDeUYkFdoG1",
	"9UnZBbyNGXUK2F8x4tCezAUOFtBepUsYMxvGSxzbA11SNqbhzCmJ58je6Cs4od6Vtj1nZSG0e73CwoeY",
	"2eBe0SnR+m9WQmCEnAImvAttmbaKryGjgpKJDcQQYn0osoI5tSvcwCl21vQGMrhwasguBYxsuG+Yg4ef",
	"4Qw5n6G+WkwK/gEj+UUTvKdMxBOFJNcfTtW/7w4OD2zzwE3MdHBBLWt9HL44CaWknfyNYqlImy+Gv1Fi",
	"fspE/Y9DdT4G5rozK9GC/8fhi7dwATHWf5tag6GATE3m4/DFBfaneJIMY6kIH4eWIvBxmC6qFgdtUfDz",
	"YPhR/k+RHyUTFkU9j1noRQyN8deCOMjX74H+DWA7njzAHGDCBQzNM1UsvuOALgi4w0zEMAQ8HgWYIamT",
	"LY9Wws40CK5VFELrBhYEmls3d1RuKNW8cDATMmwl1GAMQ09FhLRD2TQNEfmQjNpuouycny9UQeZ1FZ0i",
	"YAE5EIgLHcKCIRPxYQ6X5qWj9mZV8TfyXra/Hpc77qs7sukLuRmH1em6XRBfyl/A+VlH0K1EHHNzfOfe",
	"j6ofgfyxYygengRhveB7bjKgJinJnXTj9ViIuGKFKNj8EKTRBRom5AlRk1juSRwSFaVs7Xw/b1ScuQbD",
	"NH3Z2jx9+XopkC6paLQckX5L5ckuQiQST/H2XiE5KcDrIzCun+IPsgkSHiLlp6dgFNVGRStfo5XKArgs",
	"C+Ga/px63NdieGHWoV9/bUAwHhg83UlDmH8YUDP4akDZlNXZIdfd1EQuNUjO9sppTCK1mxDt1t7mNs3e",
	"jZWlr47pLjl2WbDTPd/e8+1nxLefKp9eP8NKH+yyvs2eOXbGHHee0+FgDYZWx7/O0/B+Lv/a85Ad5CFJ",
	"hEhPJ/bWXfVAi/VKeNyKVQ4DHXcahlc2XpYnYM3Qek6DNIfBZusQMTRGJj6ZeywKV6gE1gdmfc0mlKYm",
	"3WAcnai0dpD7imEbZjU3m5jI4VAlRZZ72ljTzOiRWZ0TnVi5AaYl/KIuP3VrJHwlE4mFEoZEp3iYBeuv",
	"XqdqGu2uSWFOEl2ePLi+PDg8UAbng8ODj2vFj2qLkDQ8/Q2pxMPPtbX+TYas2/KSjU5GKNvOG/o6kXPz",
	"xGUTM9XKUTBZ+hvIqbkJpnEAK/L86wlcJiKxO4HNDEvtTSDV9usmYKhFTVYfO1r+ksA59j1BaVhcY928",
	"l7WRzriAonLEB15EVOd/u6E0PM2bHnLrFWHP5AOzyW49LT08WDAskJPAGsZi6pXmzi4TD1XQTxW/Yjh8",
	"++Lk6hy809lGVswpsZgiIkyck1S9SGNTXJ2rGzzOF5TJdRkO365HMe2lSmKr1eno7iyPG+WCFQwWxIc6",
	"SSUDEKAxJjq7lRF+TWgQnxIez3WUEROHNBchpJEW1TqeR8mqt4JHXEvgbkcb9SQPXoUeavZ4/T20o9Ss",
	"GUwyz5BWkM7NT5nNoOyEm5DN5UmCHoyxraNLG1l4k8z1DfNAqcUpPdRqlVestEVZ12joRYzK9Tfsbe1Y",
	"ohsiXSnlzwzkWTJ/e76FsytDpmKu+tQwaC0u+JHr9DjulHQamZrEMj//+rd8vKUkJU2hwMy4KAyw9OtD",
	"sjhi7mVSzUqmbTwhKm3GYqpzZCvzgwpIxac0DgPJNYQJTQU50D0dgY+EoxD5QtfHhAsEA52tIkQqyhf0",
	"fRoTN6nLSZIusEB04h6PI8RiXpSMyAJU8bMMyqkEKgxBhNgcc65YXpI8CX2NQuxjES5NfimdTBvNbZiG",
	"yajATevpQBdCLryQTjDZXPFQfTTeXZsj1vOp8qhnJsNVcAR++vUY+FPIoC8Q44AyMEYLxI7AexX5nx+C",
	"AE+wyYn+f18cvfjxxeCFp1KNFVmi0mhnB///f375sjj6vz8O/vjx/xw0OmvWclqwlx2+U0oE9MW5yfeb",
	"s1GG1J956Cvy4+Lok+cZbkK+JL4ONa1zPCQxrK141laYflkPBUA2mjJKdGhruTiqxndq5O+yYPkxETgE",
	"xrhvsqUVpLFDYejpiMMFoUinlKAkHvE85iqssHqtnwXm18j3G/jux/9M/vvuCHyMgKDgp1/TPQxDukCr",
	"JkRn3758+fG/f/rvL1+Cf/3n4U+/3v+fQqJEmY+8BBs9hnhRHOnXsha3jqUKjqgC0ekA86Y9oERnmFCb",
	"X7xCOq2KVyIiNbOCNqWNkVzw57Qd5VbJhHBuYiCUp2wo4tGGRsIs8mKBTNNEn6gL3eiwTknLqY8VR1Kh",
	"JFUQR9VFwnTWuFxQcSiBHuCknDcXZuxshIpigeUOPwyfk82tsX0o4qrqltHSK53KoUBEo7fU5Gyco+Q4",
	"NDLhnNFbqhyZLnS7AmuODjOaJoOs6u2Nqqoy5VvBm9cEyag05QCluWeWEdqwcynplg+QbFjdqUvqSvFa",
	"MjmvSVb7PFPMo8HqXrpbsLKuxQtiZlEEYBl6KSJSYNPsRLBdT6B6ZiJShVSk9FGdm3AoMcIIQpBj/yQW",
	"ijUoTFF8VZZmI06FiLSpis4wSmpLqdYUJYrQbwccKWlaXzQb7I7wO6TNs3SGSNK8IPjvYAS5VBgci5um",
	"1mlYYOPj/UW3+HJwcKgBmSIYKLQzgMhhKMPfcsnDEmDkciSHpijXic7NNwAfIkTAkMbMR+AuDglicIRD",
	"LJZAhbbS2VxUfk0E+fIIXBlOCxgKFa+JIINzFcjsBUsyFavUD0skEmlAn1A3+V4GxMnVObj7+cC6gTr4",
	"+eg/jo5VUvcIERjhg98Ofjk6PvrlQGGPTnT8Akb4xd3P8n8DtfADua4v1Dmj+nqOqtwkmJLzQK5YhG+S",
	"DTK+aRrDEBcvaaCstfI4G7cemCW9fHHLtQytJ1JHiOQAaiSFlHY/XweLxWIghaNBzEJEfBroS5tNOp7H",
	"ocARZOKF6jCAAm7WlXPQjOqU7qXs6Ofj404WJ2/3PXBO8cFv//yXcyT/+cf94b/sQ6YLrCP+zz/u/0is",
	"//88cDHj4A/ZeYI1AbpDIY1UiiPLn4sr/JmgAvQ5y1q8shq8x+r+MjsGCuxcqP80lQpDPA5Fki05ZkRq",
	"6CCCExWTWh30v2Kk3mmZcx7iuYpTkq3uqrRTlKtEWbphCDAJ0FcwZnQOFlPsT62hVd4zDVDZ6HQ85qhm",
	"+D86xJYrOMFE0pni1VeL3zkeleHKwR9SZiqkNSXI0inZKR6zbRpUMcqDCFJpvw2o00/dr+HjoVgTovUv",
	"HNy/0Kw+caFshI9niAtGl3X06wTEKlwlMIfeJG7CKt3xeKltRZgDGz5gAZhSF8m8M+KihCh3b9ckNH8r",
	"SqsCkkpgJI9Xf6RgHbZxjQTDSFl9n+fSH2/zmVNipjYnNdrNK8gks/2ofBWf05a2z4WuVBScoB9mVD/Y",
	"g3hSXff39zt3LOLmJG5/GnZZJjveFZksb1WsUiFdm3CJ7likh+kBFFJXK4JFjRs02yV9dWV4uQ1ysup5",
	"Adf5nJOhk5slMKcBCnWkBZUNG5IAwCAAYko5kjUNdOoMlECXXlPZ8KXW9cTjTu21pF7aKJ27uCh3YSze",
	"/OT+6Qmo8C7296S7rxzPKq09dz67VdfzF0Qt84SC7h/GDFY67FczLxq+d8ypJvz1angOwdrWvyVIQMME",
	"NFBbpHoXn+RGjLZ1bbuzhd5S5tSp/eBJUIZyk0EOF7uxFXR78rszE3TLBCtGacUwsIp597uA6HEDkrvj",
	"+L0T0t3xLkh3TfT5NTT5J6iMF7U0byBWGmbOOXslvkpOSjzH0phLjitZWqqzSj+yALWqofetmzdSyntS",
	"xzsj1S0S6UdTvvtGihKK3FzR7lDF3kbVuolO3aU2vSNa9HPiDo929us16s516eelQ3etPbevN/emMT8C",
	"7lYqyXxHUXYLpazjrZKyEAkiionw5khAE67H8anPPSNVFTiA4HT4CYxxqFCVAggMR9MMlkZ0AgUCkI2w",
	"YJAtgexeMVgJEaAEJAPzoy/kC3m5BJdwjvhvX8gAXDF6hwME/ky4pMTpPyU7R18xV8+qzS+m6fmZ006y",
	"bayeusq/EsDM24Sk0z+zlwyyl3OiTxb3EYEMU2C/WFAvXUNKZyCOnD5Hy+RTDhyAAAmIQ6XouoTglZnt",
	"BRJQr2ED5eZBWL06Yv93eOUwdInrRShdgvT6rXu5wSeZwFDVa270SQbYyBQzhiFHXkQ5NmECVrpInwmX",
	"dpFG5Xr6lqc5FnhioomtP9O0tadyojxpL5TCprFK5c59Gm221QzzmQd9H0W1S9iLTangyPR34k3sinLj",
	"kgtdpwYmd6i25Z+C3lthF2l/930whmy0vhGkghvUGptc6Fs2OKXQmEAs22N1KjqlDbhu29an3hb4eIuO",
	"S6ltxgWtE/tMlxvWmZGmW+pfPkgb5pomvGDLkDuuJUO7jNPbJ8ocb7co00ClXUObnVIu6nwDnuU7hEsq",
	"wA2cANkFUJFdsEq7XeggQYVKAbGWj8Qpnc8h4EjtAApAaK6l0FfoC20KI1SAiCGOiACU6Dupg8MD9DUK",
	"aYAOflPWgEqQePHdU20eEy6WKjaHPGIHq7B/YAEykfaaAEOrb8AGBokGWXRNU5IU1F971YL8JDR6K3zo",
	"OsaIhmjYAQo23ODWMK1XM0S/Bogmpod+rA5dMen22HNfNoZ+d7+QGTe2KHRlTNg+I0ID80FnloNnZDHo",
	"nfRVWwm6NRA8K8NAxyaB1o0BfelRvWNslerPdxFRn7sIcby1IsQEESXFewyt+GmUIPAb0+QaOU4HO4TO",
	"eubJOnzQk2wZtUvHeBCal/TaKcq7Yz4i4ifpPz1lHKm2aCV1r3TVZ/045xlbNAqtBioAbJXFoidzQBGO",
	"9IDdeTSuNBDkYOzYUJAbrX12XzTAA/n+apc9O7QVAtA7ClVTygbmhtw0Wjc7pDABA9Q2WSAKz3Qz1tS+",
	"SaK/lT7eumNUYa/IAdiR3aLTzevQhNEx66gcpx2jRgEC3u8GxsdN6NSOI/oOCUfHuyEcNdIf19Acob+x",
	"cz6MsGeyoK/feGvDSazvKpGppU2dJZL3RMprwvNWgGzNd2LvWNKfY0mWi34QIqj+bzZ2kKayHAjIJkh4",
	"iATWFxeQKZ+UWHE79VOSk+bQynFvuk3QJc2PafeZ6zLrMelwa9xbENmcem3mG3Oh2GKItHjBwRwuwQhJ",
	"7Ica+0dL4MsDoebbBKdSQiD/0Hmhq1DdTl283pY1OKcbU7QOqVnhQyNlGV5drKaIY+Q0ldNq/dbpqcua",
	"JhTgZUj9mTprp5D4KAz13zoDqfr7nIArRicmq6EkzkN5TtVvHwh4S0P512eI1dvSMWXgGnGVI+vgjwYZ",
	"pXfYl6vM6muTxmwUJ2PwwWFTP9IcbX14f1NJ2r2EI65PxjLqXgJLkg25IUAZ03kyZvK+7ePNDON9mcS7",
	"U/fa1PMez/rdN2aUqHRrGLq7M3Fvo2W7kUm7Q2P2s7JhPwKZrLNad22vfmZm6s7t0x0YpvuzSD8C/lbb",
	"oPluou12ih/HWy5+6NAbHsN8xisd8tJ2J6rFtWzQtj/e00H0RjnkT0zYErkWRRlu1j0D7QxaezzaGKZ1",
	"wb0RUBIYDRgkPioG62kcKz+kHDU7T6ey6nM4Sat08fGk+6q1H+MQNbsvey1r7tUABewNVavxBI0mCq7n",
	"zGoelvk+CC7RQq5B5kHdp9VEjvyUKOs6jwjSpt0+I3ge8vn+IcHTfkjQ9AAQKhqyt0tZc8/eDHtTq/EE",
	"2ZuCazdJkuZtcgG6IUeF/bfAjZ0ee+XGcuSnRIwYohEizZjwtaq713Q2Xn0TFtcTaB6FsJILvNZVb5Ka",
	"zT0D/cVm/hH2Cm1HsKWKeL0NJrn3qHs0jzqFwYPk6Z7+1F/b4sXG0R1StGa9lGd7x56n8ZwzR537cVZZ",
	"4R4V4mmefXTqt5IbrG0hsKj7B8mAqx32bJApGL5vxKmUSmr9WvLo1bJzSwIRSEDaHh+X4kPcSARs2xDQ",
	"3yofb9fZKXWAye9YJ14wnW5bZ84wHfOIilHacIspQLv7HcDyuAFV2mnk3gnJ53jbJZ96M0w/DzPTFfOa",
	"PF+s7qGJS3+haixPs1J+zeKABeTAvEUDmHAcIJOb7Ize0jLVOHu8tvJe5qfDnw9/Ofzb4a+H/3b475k+",
	"T+IksXzJ1O42W5E7zu9+2bylx33KUPFLi3FIoTgonEHXD8jyRr72Xoy5OBDChUKAAHOf3iGGgrIdN1xg",
	"k+3uerECha4eQ3cYLbzkHdhKxq6HrGEHBtUg1mR2M1qStvaa5mIr7GVJ4Bz7VX04kHS9k1m0ti43ziTA",
	"2zDzXYg8I6usQXnbX6qE9amkm5XLlRzFtUlFB0DTmHR+LqeQTz0piT32FuWuTNqeJ55H0N8scQb3mmdF",
	"rGAfISYzFIDfMYMAcx4jxUtCyAWY0wCPcTk7ucUMev4UkkkjrrLyRlbZiX87UEOrAePIfaRZzoDSKcA8",
	"5IkYpC4MbH2lehayVZ4JNJ1HHbAm5yxX673Kt9XUvxM0llrsdxJFIRDqFXTp1RrkCatcS37r9f28A2TX",
	"9EINpt9/eykWrf/w9nEDeZ4h5XYE8NggrsSQKeRghBABY/xVbwMXlGll3GATFgqPVIUyeIppxRNCl9Ik",
	"rW2jyqa3y+1PmYw86vsxQ8RHvCNVYX8n/rDIGw+OJyQpuedZQaj6izC0/vQyMB80w6e0YyYOzXqT6fqK",
	"nMRzxLAPQ28zJ4OWnTlSe9hgxbw1KDJX2fGUfNNQ+4MYzjuwFePBqoY6yNS3gaVPDJS0PciJtoO8uDMo",
	"5PaDwkUd5JJnD0w/TIV8sivK/lwgK45usjqJr8MgJgFinmPFyIqzbzmcFKkPDjMj5MqaFy15tuJ6wfV6",
	"m6nbq7262NlaW0utVjq30Pl1LlzmwlXOLbK9xjaC51e4foGT9S1e3tzqpou7LR5ID078rmzhm2iXEVyG",
	"FAbrUaX3hhiPMQoDrmIkpesVMTRGwp9q7g8w4ep5IQeQBAAGARBTypGsaZZU3W4clEW10p1Vk7VKk2KR",
	"7S2fNvPQsWWpF2/q/5bRxtNbax2sArUnJ9oqIV+dkogyHeuqGEb7GFkp/OW6mXE5JZD9FY+QpxRgc6SS",
	"k4XnKhqXrFp/IkoxIR6FmE+9ap2qeRwjuXUFEm8tcr36GklUSW480FeBGIEhYChUwjwH32eE5BAgcocZ",
	"JfrDUJVDsM5/CSmSkB0qMUL/qwp+KMFMBQ0KPH0EHt0Wa6FYF8pFFwB3Z//vB3bD9TpTX3OEoFSdb35r",
	"Z/XYwJRY6CmrBAVMZh4d3aLN7Jm6DxVQz3syBnobqBAT1OnO2oM1W8fOp+9DQhDzfErGOEB5dGt9ARC7",
	"w/5GV8hN1aiqtt5tzAUeG7eJjXoKoY5AuBG37Hw3V4SFDrcyL+pvQFQEijxBPYY0J94MLwSK+Fq97L35",
	"c/2XxPHt1TicVxSfjUxQquE+w1jCT9uS+RAr5hOzYG5mvWzfctnP4Uh1qk4ZUv2jpLI4voWWpw3iAbu2",
	"qk06wH/FyMOBN2Z07glKw03mY1kg14fhLg5Jcwj6fObV6/OuBq+6ennNZcboxqPZ6rwNf+a0u8d4x2UP",
	"3hN+FLkwN4wDmKBQgyCAe+/mvXfz3rt57928927eezfvvZv33s177+a9d/Ouejf3ydD3zs3P3bm5T2zZ",
	"+zbvfZv3vs173+a9b/Pet3nv27z3bd77Nj8D3+an7Ay79xTde4ruPUX3nqJ7T9G9p+jeU3TvKbr3FN17",
	"iu49RfeeontP0b2n6LP1FN0nkX0WSWQbeeW6SWR7d84tcr5sntMw8b8sSWi4zxu4a3kDazCraSqGjlIw",
	"bF3ihfp8C13lWWhpKfeRMbYtMsa2x6LoIR9I369zKtN/dJr24zkl++g2yUfbyT16SurRN6pW5PDgO4ih",
	"HaFmazjpYEnvmTmehribSgn1eTnOkqrFCTqepux73L4RIt2/Ih396ewnQxw10Y7Tbb2WDdrNOLzNmk3p",
	"Figxuv44vZbVnrb+00d2OarW4Uk9+VYQPfmDUMavW0jZLhfgcVK2y5GfBiGdIwHl2jUyCF2Yyk/aMLSi",
	"/qprbjpW9ohkusZvUBGlI3A+1nfhmAM0j8TyMPEphGGomjX5L+0ack59rG6OFlhM7bfhZd7++n6x7ZT0",
	"12oSKNCPWKzJq6dZlDHki3AJ9K4HktH/rUE3TD/tglLLH4Vonk0y7R8T7RWiTpbs9W/VvSaWiYAi7TSO",
	"vmoT/KMY6xIs38t/EmS5Gs1kwKe40dUcMNnpZ8sEHyyX6N3tRHFNu25DeTWdPYYCmw1dhPC7QS8rTT7J",
	"Kdpd08/+FO1P0eYiuLpGqlekL6nYK9KTG6rW4Ukp0gqiHZQhtBYtZ9+NB0hh/y3o/U6Pver9cuSnofdT",
	"hieYwPDFvwhaeOPEJaQa0T+YRk8Z1xMHP7cXM8mtNMQyNKd3yJNsRO9hcpWcZ32yGpAoCF4zOgdmV1XJ",
	"wWGp54psJavsr6A1rOYMd3gNnY7Q4lV0QnnunxVOyyYNcPoGTr7nP+hnwYlUl7ifG7/xKuy+gXsHi+AG",
	"duVckfTcBjbrvp4YFqf6cVfIuYNY2QE6toKHBgHrhcYnSlbVTnkJGPVa57VucW0a7K7++TJm0TVc5Nbj",
	"SemhOdh2UCMt3aRWCUnFKA+iLVUo1p+O+gQQvZR+pfJgJc2SLHN3CVXKoZ4IVZK7sYOk6NkLMD89W4y0",
	"yMckpCMYeoxW+qq9UbWuZaXiS/8ip43VONFNY0nhYM24A30HP30SEbfknm3UMOa5uFC9kt/0TWmGVP28",
	"J7VRvYIsW7je6RPRbJy2yWCu5wdRQ6ev+y6JoDtSr6hQRg9rH4JauNKyy5+BA0hAtsdteuUI1nGbtqXU",
	"Xpb1eBvOROmLO2t3OrEJd7VFnRmGuyPkxQO0YSauI+vbgsJxNXnZVczdDtnjeMtkD/2KfRBCMonhBFWl",
	"lDtXVd8nNRsIqg/aidxwfevHhcN3uUf5nSjcJ+5D4myRC5EGmgMIZEWgYyBIEkIBtCOVAcqSeABHX8gX",
	"8nIJzs9++0IGQO8qgOBK/wy+pwzEHKn2XzEXkvKYpj/YDQh4lXVvMuxJXdTUlVVNlhdVjIPk9Qeym6mS",
	"P7OiP0FKJSWc50RTPe4jAhmmAAKCFuAGcQEWOAzBCOWz/LlDJLO9hHPEe5vwn0nsBUmR/3R+scLApT9q",
	"NygYhkvZmduDpNZJzYL10DkNwRm9pXpBQkpnII4UZBa8o2UCq+w+AAESEIdcLc/nKSIg5nLeciAOljQG",
	"Ep1CJPTezXVoDQBjQedQYF/BqhfeGoUfJouqA5GYD+9mGSH+hYyWZpQ/ZT86wRDy1OH9Kv7rhsXoz6OV",
	"e1iN4UMfkn7ojxzpcUhPNnIPVEeSC5fg6KRPlIzxJNbrX2Gr+x0zeOrUbW6y2xveGtnP2BPIk/z7+fXJ",
	"uYkt1I/9rAALK8xoq2jYqTXNXo62ZdqVvh9Ey3K99UrNVsfuH2Fq6FqtzW0VsVo2vd1iBqCXBu7aHutb",
	"2QFuyEbatsX1tc7HW3V8Su1yqxvWiXmuw13rzELXJXMoG6INK10e3+63H7fjRqRoh1F6mwWd460WdJJw",
	"mnMYRcpjq1KFS56FmsrNdbiSXAlNlZuHJHcvzxDeoudHaVZkvFEKMNV0htZMarjdem9/CizncZ/aa/4I",
	"1uivuTPYvQKrQtt2QdTTjh9O0U1X/eut2cCPgSe11LyR4prDqI40V7lSW6a2Fp7cpsyzK82103U+3qbT",
	"U6m15narU7W17S3rVmftgh8U9t+atpqg2f3W43PcjPbsKhpvoTxzvM3yTJqnolotTZTq/aXi/lKxNfRM",
	"ca9GH0uRb3+VuItXiTaalJOvRnpYikn7u8ONz2k9j9jfGD7yKalUu9Jt2t8T7u8JnxFGx3VkZ387uL8d",
	"fE6yS+JPvI6Hp/Hf3dTRM12UTa7MEIGjENlZs1GE/US53Ci98AMvLR90bZggwl5JrV2wohT2a7S9Rb5o",
	"ctda2DzmUw+Goc7/yDfCMtVHkpTykbInOrr2lV6THlXtYlpTo3cXEpvOdXCzOF2wMbvrB3OxrLP7rhVu",
	"a6jHxJWGDKyRJl6IW91o5YYCbZlSXnGi15MeOtLWu1714208YZWKe+HudanEd7CFnerwHXGOkhHa0uAr",
	"+ci2Ynm8DoXaXeTeGnnoeEfkIQlWvQqvau219r3Wvtfa91p7NeVRpKJeT1fV9qr5DqjmCUKUMp+m6req",
	"vde4NzyNtex9r1Y/5umoU6RVvb3uvNednwUqxzW0Zq8g7xXkJyeVJFHUVLysCp04ie+mQlKtoxSHlG2i",
	"m2yofibT2T8Y7fnBqI0f/eheLuZWKF8O6naqfdkjtU3oVvp+EKXL9darc/Lq2L2iSTnxq9XJHExqWSlL",
	"YQESmO1RygqOaT2DaVst62lxj7fljJQqZs4udaKZdbdVnWlmXZL9siHa0M3ySHa/1Qgd1xGd3cXjbZZb",
	"jrdYbmmgr7X7FHRdlWuXL/vc4d+bnLljjMKAgzFl2dARQ2Mk/CmY0wCF6WMGHQsaBgEQU8qRrGmg0zkN",
	"D0vuBHVnDnxYoLk6D4jEcxu7JGakF5Aq9ZREQVdfTgsgY3D5wJvMXpXRfhXRJjpoP/pnVzS8Pfr9WDpn",
	"v9hQSLIba5ldaZh8+5TLBnplZzplW8u51SyjD125d0pfrSJ3qx7zZ6UZd6wVt64R96UN946yVUow30lM",
	"3TaZ6Xh7ZKY5ElAuVbmWe2FqrBOAN4gofoTwu08w0FJRS/W/tS5P94q1LSVZ+JVhSyIvdaxbl7RV9Pnx",
	"w1fJs9qPQp7QjQp9PCEcnarjcpC22Ura54NYiumlVxU8G7OnvS/iJLXKd4IYLeveAb2lQEKxPbq3c8oq",
	"uXPbmnfbi7ntPKVL8t77qS7VuxNs60Tt7uT8dqZ2d8F48l23oW4nyHO/ZQgaVxDDncTLbZCEjrdCEiJI",
	"LCibeSH16yJZXeqq75OazzqocGFLM7OnrO/2opoV7nTnCLqCihX6Wh7CTvW2/GBtU67C/h9ExQp67FW3",
	"Kx6/b+SpJHO1ml9+Di1rgAlEIAVpe1TB4pPciKm0rRv2uMzHW3Z8SjWrPHidaFjdblxnqlbXvKJqmDZU",
	"sCLUu98FVI8bEKfdxvBdEYOOt1gMokI7EFdoeVRkj/YaaXf2fPp72Ym5B32B79BGYWow9+aQBFBQtty0",
	"A47JJKwffn+L+1S0Whuzuz+JyVGr0mINRN1qr2aQ1sm13e/DyHTWU79aqjNuX8hQSI7rtVEDa9taqIRg",
	"y16Yuievksm1rm12v5zHzxz9y7VKA0432mQnG9OdFtkRzS7qvhWt0UKl+21E2biCiOwmpm6bWHG8XWIF",
	"r9bw1ri8g7GYFsfsqVU7zLnIGspdhML8MhBYaSVNQ+IGWHimSXs9omCzYLoBFhsuCiKCLTtSlPfxcw8i",
	"hu/yaPc40WflOetP1+RFNCBVK8oJQRciMH8m0m9/O1Mp9fLORF7+bKTdDiXdVqXcPiTcXtGyTLLlO4eN",
	"XaBhO/iXIUW/UuxjcS48xvXeaHa1fX77LX0+1W8wkrJs/3LoJ3F/kcP4Po5nNmT1RUZWr+vbDAui9ql1",
	"rvOHkm2nu/uOLzPcwfrFjFIC3uRmI6ve/vVG1vdW3XDkjmU9i+xAz2t9abePG3WswT7mia9SabOKXam2",
	"3RzrLlXc7thW6RgtKb11TGybUDquo6M7i8lbJnkdb6HkReEvBipbb3aB+RAhchLhX4CuqHiqQsWTq/Mj",
	"8FpdpwAfEjBCgKMQ+QIF4A5DYNYKEDShAqvhj76QL2QA/nFy8f43YC/gHQmOKMRHNEIERlhW+n344bKy",
	"0o9q1Q9zZ+8D/GWoAC2XXwojs+hrIfucJEzcDLOE87CAg1dFNS3sDo4PDg8gU/8Mgm/y/8oWAeWfIwnu",
	"SDYcyTFHstqIHxwe+FD+o/6SgwTyM5CVAz46ODxAofyHqH8GMNb/n6hfqPyHq38GaljEB74uHMy/6v8T",
	"rP+vVkuZAJDsYwzVi3H5j2w4liNPZNlEUpiJHHMqW0xllamsMlXQTGXjqayNZW1Fj7CcFJbjYgmMMnPc",
	"yl9n+h/ZbjaT/8zlP3IqM1l7JrsJ5a+hbBLeHRwezGW9uRx+LuvN5chztfayHpEgEfkrUejBFQbIf2RZ",
	"pOw+YqCWlskRmISWyy65rMD/kv8o/Z0NQiiUj6oclS8O5KGS/6g7QzkhRXaFbCtkC6FEvUDOIJaFsSyM",
	"5cbeySX6Nh1MIeHpX0WP7x8sAcIgwPInGF4xeTQEVv1koiYdFebRyZ2uTjr9sT1w1XHcsKcuCO7hv2ya",
	"S+EvLqVNssvCCHvchySfTb/UbGlSJZ9EeOhD4mZM3lsxn04qVY7YHfaRN0NL76dNbuvtDn5+aAe/bNKB",
	"oDR08fIJGDET/L86X8H/fkyaNSe3wshZdXQ7tXlWrFnrqmTNUA/TKCs779X1uxaUx0XBNThNrX21Cm1b",
	"NrdmsALsAQUtcMDdHhNsEzKytgDQto328fbjeFdOaqkVtGqfOzGK9rrZnRlK++R1zUZsw4hag8T3O31+",
	"4jWp5P7Y7GXDHT4xBbLhhNE4qjc6vFHVmlsZVLfepu+z9yaK53S1rfbaSeXBaIge7nBViz59Wh3UAejX",
	"zKCPZr1VQZ/NPswIaqSOeEPWdxvMIOntMSwD1ti9okk5dW+q6GtM6kizBwqY7VPjrWNaz0G7UtNbXdzt",
	"ZTg9WBse6/TXWRM0/nVqPuj0hP/t+NcncMKrNE69ws9lafdCwjpCwvEWCwlzJLWneh3wQtfbXzVv/YMZ",
	"xU7bejezqRVAjv6kVECN//3qgOZs1iuB5nD2oQXqoTqi8FbnbZD4tLvHUATtwftFlgoq31QXNAjVlTKo",
	"wdk+bdA+sA2YaWf6YKvru7Wcqwd98PGIQJ1GaFCwW5Ww03P+iDqhs8xx7Tl/Nqu7lxrWlBqOt1pqkEjS",
	"9I7wZhmh/T3hXr9saLbV0edauyxUmPqU1MX0OPSrMVontl5rzI5sH4pjOlpHXMDtvw1GYPf4GBpkbvz+",
	"8aeGJTRVJjM860qfVFBt6xVj/kw348Kd6Zbtr/WWs64e1MxHpxR12maGl90qnN0TgkfUOleWPG5CCJ7X",
	"Su/Fj03Fj+OdET+aXlnKCeyvLXfi2tLhya3dXTbSKp/LBWZ2Gh5BJW18k2md2b6U0k5tk7kB2uILj3qz",
	"mQfgEbCojjWso5p2fNepBaVtvfFcOd0NGXLH6ukuXoBuyAN7Uk8fmWA0UVB7uRLtgRw8tora9HbUWvNn",
	"tth7eeQB8sjx7sgjzXTUNbRTX8nEQWuZjHyGBfZh6FWEPKpPabuZhjRDy8bD7nPhPn9VXecDw9/UGUis",
	"PIcH6SHaWF2PFfPY4FD0rX73r3g31Lh707U75Gqt8rNH1Kz7R5BS5rWOFt2p/rydenMzhblbVXlHVOSH",
	"856e1ORHYQ+1mnEPOvFzCjLVYYbldhlaUZ/391uMyTXWBr67CLytMtjxLshgE0QkRiOPoYgyoWSyeqH+",
	"jWl1rRqlIv6uob6efrIYH6IuQpyVjvGgw1DSa6cU3B3zKRyEeiPaGga0UcwxQZx7ieVLzmGDGNlFhjgj",
	"bP50+PPhL4d/O/z18N8O/z2TLEmcWF1Lcp5bi7wBQOirQIzA0INxgBHx0Zo2tQuFqCHSB56DOVzqTB5y",
	"UQUKwGgJfDqfQ2WjQl+jkAbo4LcxDDk6bGIWTGXy/LnPi9qHB1wswyQZx0Gp1ZHICSPhQd9HnONRiDay",
	"XoZ4jPylH65p23suNshLKsANnADZUqVigVhlnijsnQpPwMl6A5xKpJB4gjSehEbzQ1+hL4A85oBQIZU+",
	"jogAlIDM6NsEjQxQvBKZytS2AlzKZbVhAVJNmwFDq9XMQQl5GWTkYlB0UAfqrAyKUXpgY+jAYMCAMjzB",
	"klIMohAKNTv5N6OBR+I5Ytj3Jgyq1DC61NwOZx+el/SVPgaDBE5UytJ8keeNMeOirIXnhdD6laE7RGL1",
	"p0Bwbvdrf+c7dX9zehTInxJ1UaFQWCHPauFqhysV3F71smf244Hy2mLIpyyQCFeyndluFm2mTnNTuJX2",
	"Thog0n20trFwF+1NXN3D1S2s3sHKDcz2L7d9FbtXvnlFe1e3dTU7pzcu2zdn2+qNObVU4UlkIUkxY21Z",
	"wEKlNQj58zLZrR4IF/0ZmsShiX1bgMd5lGx2+9S1yFR48NsRoXoB3ezG84HYxZnnAbeL2d0J2BkXWCEi",
	"ti6To5wNRc0OxMyGy9edLNn+VufI1vPAzyJ+/0wg71hlLXJUaG406Hr2Odm3hWXo07+iV9+KBm4VvbhU",
	"dGTKb82M/0huFL3iQZHBsqnjREdOE1vnLlHvKdGVl8TeP+JxlK0e3C365haVXhadelg8J9+Kbv0q2vap",
	"6Mmfom9UrXCj4LuIodskbR1vp7S1totEH+4Re8eIvWNEu0hvSVrlbhHXWaXmnhEP9D94gnEznuMjnl5M",
	"Jhl+9GM1sdWDcsOJhbWd2k6ycdondk7PDyRxVl+9GlHyI/eHGSV0rtaaYmFOywaVDIztsankT2MdC2nb",
	"stLDmh5vwWEotRhYW9OJ0aCb/enMbtAdOS8eoA3rgYtV99uKv3E1YdlNtN1O8eN428QPPJfq3oD7kDi2",
	"BBeca1OPA6hSwANtfZC4SgEkAH3FXCgURVwcfSFfyMslOD/77QsZAC3kAgiMQQJ8TxmIOXLaGS3wB7sB",
	"Aa/IBE7QHBE5EscBUuqHqSurniuockBBEoAxJoGqjAOpesm/bhBXba4YvdNdYQ6w1mj+lHD/CdIDamZw",
	"CeeI9zcJA79WuRY4DIGfDJsH/s/kckIe+j+dX1A6XvajNh3A8LesmpyxJ7AIZY0v5JzoBeE+IpBhCs7Q",
	"GPkCnNFbqmEJKZ2BOErXEoyWyUxkjwEIkIA45EdfyPkYEOoMAbSxSFU8VM1CKH9WCGOvSwa9HnWEgD+l",
	"HBEwghwFgBK11+qORiHa5ykiIOZy/eV0OVjSGEhsCJHQGKCWFzEAY0HnUPm3hstkabPd4YfJ5uobKPPh",
	"qTdGX8hoaUb5U/bj6ebqqgd9Ff91w2L0pyTIeS6gR1eJ8uuVvQeSsvN0rP51qfzY3ZIzi2rlCBoNq6LR",
	"XMufn3WQ1L2xp8zYQ8OeAo8oHCtCu1SBL8e91pVMGqLnoF7SED3KxnBKIPsrHiEPcx5XkYZhUvNcVWyV",
	"SJSEhXpqL7Ge4OMALqCI+SaG+hUf7UeJiuRiVT/0KY/zFbboHNJ3ao92x2pbKSzo/UHS1Ep/vcpTRaP3",
	"jDJVRLTWUp3Dq5at1Rk8QAG0PTbrwqPbhF21LVf0tsTH23RmSm3Zud3qxJ7d5ZZ1ZtXulimUD9KGdXsV",
	"4e63Hr3jelK0y1i9/TLO8dbLOIJBwnGN61EK/E1Wu7nKOMYkwGTiba7d7NP3NNIe3S1/YB8P0EUzJHlq",
	"KmmGv30rp/aiNNBQrYPWo5qajdotMc+N0yJZd3p+RCU2D8djIFktvW+u2Fro2LF264EMwm3UdPN0oDG/",
	"7Vrn7WXhj7f4uNWrw9Zu9qITd7WlPenH3XGjJsO1rzO7SHq/a4cjbkjo9mdiL5pt+3GwRTMRjzyjIlep",
	"4CIevTa11nj+o09SSQaV5hmFtu8Z0VPU39EdYhtGrlV+Z09A286wtCcF2z49VYq1dXy6Vaizgcw4bZPr",
	"wgEeRqcLuuxXdy4GoE/EKaXI9UqyhVptK8cSEmBA2SJteOXQ1rK81rXfXlb2uIsT8ihEtUSztXaoG422",
	"q23qToV1NqoTrTU3QiuKqote91uMyXENpdlZBO4Qc1tF2RUE6lGRfEzctSWUJRdo7nEkRF5rdCF6KTtX",
	"UVsZDQG9QwwMVVswNG2PwEeOwHc4+A78pAKWXX28OQRXJzenb//f/yc9JXzlrYfuJumlWCPdJZ2uH/Vq",
	"ddG7R0MX16oRMRWWU4HhcfCxG2FETxYks30e8oizLl2JJKuDtCKV5LvtVjBZGa3vg5VKJ49zaHb5tHR7",
	"TNo+H7t2MCyOo+KO0pBOcNXzphur1tOQTbY275MKZ/sksj49CSN+lgZrLVl1pxIslMWp32jB7xDjdddS",
	"vQjnJ1F0QmC45LgnydwmhRVXHzYt7PTqw1qAthlovusHcU+3s14vOlaG7hE/ypho7QWHjUAtX3DAKPIA",
	"NCuyPRccKyezVkhp+36jn4U93oqDUXq9YW9QJxaFznapM3NChzS+ZIQ2DAk57LrfXkSOa+jMzuLv1gon",
	"x9snnHDhmQBsVRo+FzoK0zp5whkk/rSJVlycZRyHgVfsy1abWZzO51h4U8indc1TbUwflYoXddyD4zHy",
	"88nH2kvGtvVueE86fU/RLsvD0TCtaXEWP76ZWcM6lMmdpAd9lVfI/L8o/93B6cHhweXB4cH1weHBRwk3",
	"icMQjsIUu5u6N1YMX5S033FzHQg8X8PXtWos8/28DRUZ6ezLTpER9Eo7RUrROzVTZOO0LQjken6QHOD0",
	"dd+lTcIdqVdUKOP6DUwSKa60bJFQcJgomttkkMgdwTqZqm17RAfLus3su0s+8IjnvcLSkmJeJ4aWrk51",
	"Z3aW7phU8QBtWFnqWNa2oHBcTTp3FXO3Q6463ka5SqJAjS1Fxf3eJleJLXT/TPapR7VNYU6N0qZQp3OV",
	"TY7SBWFJ+30wWTE99Xqh7I7bGzoUE5jqiOApqnSjW6gUCU//ovORNqxS8la70qHc3fbWdCp1d0Fnirpv",
	"S+JOkOl+K5E2riIku4mr28YMj7eMGdYI2mtcV0JfxDD0zPVFwe3GehcbMMKeyibkUzLGk1gDtpE4/iwu",
	"UouaZwmX1rwbbOAYbTlFZ17ATXxrrRxWXpLpSvlJe96K3tOat/R6E3LWbd05de07/OTDy6zvVb8eAhEq",
	"vKeKRLmJrY1I+bl1935g/7jCWZwGfiiECsQ78j35wALE9F17k9nT6suYQSnzGzi8bGDxpoHLawaZo8HA",
	"weJBiKAqFZBNkMRW+4sLyFStVGZQHyZe0yBWMqxqkDkIlALrwGqB6kKaAerAacB0oMwBacOYgJhBmABY",
	"f4H1TN7qIOZLmiJFSXXPvH+0sx7jdVCpJe8bFyFbdOkpS5FV7/tUG1vtOXj89Gc0rrMXd28r7ibyWq7n",
	"B6vIjxNrLT9yH9iwoiE3cvDpwrVnu1x6anx5OrG0PxMbe6+krty03p1Z/dkY1Ds0prdqSO/DiN4rVpbZ",
	"zvmuIWMXWNgO+mU40a+V/LFZP/R9FAmPYT7T5vIKafFE1b2WVVPBcYsQN1XJKp9mqTVAgVyFotce62J2",
	"O4PWon4bw7QuHDcCSgKjAYPER8VgPd7xGeOwzp+Lv8Yh2mUB8IaqFXgiKq+C5XmSr4c9Zw2CS7SQs/8Q",
	"PUZWLjnyY5/WCSLKkOcxFFEm6vjdG1P9WtXeRpZXSXjVrJM1SJGmVdmtdIwHoXpJr53qFO6Yj43o6jqo",
	"hi1dyjo7zZbUCjwRtqRg2TUSo3mSnHo35KWw/xa4qNNjr1xUjvw4xIXS0L0EraIvlIanTt01XK1iMZWI",
	"rJdn9a4ouUc+uTo/ODy4gpwvKJPoPBy+fcC79ifoufIcX1+UXdxJ7Nn42i9m4RO4ucvjdE/XeKvnroqV",
	"rBy8bm/48sO1btsrHOBhhr6CLvu99isGoH8kqqHu9TeDK8jW9jWhhAo4YG3RrWHJwW7IUFsX3Htc6+Pt",
	"O0vlV48rO9fNPWS329fdtWTXHKRynFYuLItQ8H5HcD5uRKt2HNV3SEo63n4pKfHoL0r5tHoQrnTt6uxM",
	"e330qeYGKNVlH/5wK0GmW+SLDV9gPRm9uAjL+zmu+dNYoxvnAO1cOc6N1wXhLxriwaR/tdPeVeRCEB4D",
	"n2oZQCNFOTedTjTlBLJOMj09AW258LA3Zb3dKMz9Lfnxdp6uSsU5B2WHmnOn+9ip9twxi6kZqS0NugAf",
	"73foCMTNaNge83dPqjreDamqLjAepWFFYLwi7cie1QbK1V4Bf0bh+Ax29Kh41objSxC2cx2zkwhEdr8P",
	"pnuPEo7PGbc3dCgma400RIUtneiFnQbkexxVMDt+1eyiG63vuUQ4fJwzUKnSdRjhsJOt6VR36zLCYWsU",
	"fLXDzlWzx0HauIqQ7Caubpt8cbxF8kXMEfNUwBtfeJiMaYX69JEjdqqrnsuaayRqC6k/89BX5MdlmtSI",
	"0hBBUhEpEIWhR5R6tIkmNqbMR15kPH09hkqUjlo4JlhM45EnF26DhO/bnoGt8J50SglquHVPOgWMSmq+",
	"ebY2HkJ/phBnw6varIMmmNdq7COxwEIg9qDB63PC96Ln58hYP+r+Kp2tUPvzhLZT7T83WNtMuqj7B/Hq",
	"1Q57NQkUDt875lRz8FpLQR7BWjYYSJCAAQlIkLbHblByjhvJS22bEbpa5m1hw11yk6dBBkqNJHnU68RW",
	"0ukx78xk0jG/qxilDQNKAd7d7wKaxw3o605j906IccdbLsZFjI5xiKpNMFe6kiVNdLpKZrieVsiswOra",
	"1Nil1jBGoTnE4UYmJMy48DbVfhu4AhQ24ypb+R3ayFiFucfjCLEy1bu2gxA2nPLeznXQyDbSm4mjP7tG",
	"nSmje/tFF9yuHRb3GOaJ/nZ9hUY3sjx0YW7YLgtDjVGhE0vCM3BF6Be5K5Xr7jTqZ6NEd6g5t6ou96Ej",
	"94qVZbow3zVk3AbW/1zx8P7+/v8LAAD///VaeWN5PAYA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
