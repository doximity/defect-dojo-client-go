// Package defectDojoAPIV2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package defectDojoAPIV2

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"gopkg.in/yaml.v2"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BasicAuthScopes  = "basicAuth.Scopes"
	CookieAuthScopes = "cookieAuth.Scopes"
	TokenAuthScopes  = "tokenAuth.Scopes"
)

// Defines values for CredentialAuthentication.
const (
	CredentialAuthenticationForm CredentialAuthentication = "Form"
	CredentialAuthenticationSSO  CredentialAuthentication = "SSO"
)

// Defines values for CredentialHttpAuthentication.
const (
	CredentialHttpAuthenticationBasic CredentialHttpAuthentication = "Basic"
	CredentialHttpAuthenticationEmpty CredentialHttpAuthentication = ""
	CredentialHttpAuthenticationNTLM  CredentialHttpAuthentication = "NTLM"
	CredentialHttpAuthenticationNil   CredentialHttpAuthentication = "<nil>"
)

// Defines values for CredentialRequestAuthentication.
const (
	CredentialRequestAuthenticationForm CredentialRequestAuthentication = "Form"
	CredentialRequestAuthenticationSSO  CredentialRequestAuthentication = "SSO"
)

// Defines values for CredentialRequestHttpAuthentication.
const (
	CredentialRequestHttpAuthenticationBasic CredentialRequestHttpAuthentication = "Basic"
	CredentialRequestHttpAuthenticationEmpty CredentialRequestHttpAuthentication = ""
	CredentialRequestHttpAuthenticationNTLM  CredentialRequestHttpAuthentication = "NTLM"
	CredentialRequestHttpAuthenticationNil   CredentialRequestHttpAuthentication = "<nil>"
)

// Defines values for DojoGroupSocialProvider.
const (
	DojoGroupSocialProviderAzureAD DojoGroupSocialProvider = "AzureAD"
	DojoGroupSocialProviderEmpty   DojoGroupSocialProvider = ""
	DojoGroupSocialProviderNil     DojoGroupSocialProvider = "<nil>"
)

// Defines values for DojoGroupRequestSocialProvider.
const (
	DojoGroupRequestSocialProviderAzureAD DojoGroupRequestSocialProvider = "AzureAD"
	DojoGroupRequestSocialProviderEmpty   DojoGroupRequestSocialProvider = ""
	DojoGroupRequestSocialProviderNil     DojoGroupRequestSocialProvider = "<nil>"
)

// Defines values for EngagementEngagementType.
const (
	EngagementEngagementTypeCICD        EngagementEngagementType = "CI/CD"
	EngagementEngagementTypeInteractive EngagementEngagementType = "Interactive"
	EngagementEngagementTypeNil         EngagementEngagementType = "<nil>"
)

// Defines values for EngagementStatus.
const (
	EngagementStatusBlocked            EngagementStatus = "Blocked"
	EngagementStatusCancelled          EngagementStatus = "Cancelled"
	EngagementStatusCompleted          EngagementStatus = "Completed"
	EngagementStatusInProgress         EngagementStatus = "In Progress"
	EngagementStatusNil                EngagementStatus = "<nil>"
	EngagementStatusNotStarted         EngagementStatus = "Not Started"
	EngagementStatusOnHold             EngagementStatus = "On Hold"
	EngagementStatusWaitingForResource EngagementStatus = "Waiting for Resource"
)

// Defines values for EngagementRequestEngagementType.
const (
	EngagementRequestEngagementTypeCICD        EngagementRequestEngagementType = "CI/CD"
	EngagementRequestEngagementTypeInteractive EngagementRequestEngagementType = "Interactive"
	EngagementRequestEngagementTypeNil         EngagementRequestEngagementType = "<nil>"
)

// Defines values for EngagementRequestStatus.
const (
	EngagementRequestStatusBlocked            EngagementRequestStatus = "Blocked"
	EngagementRequestStatusCancelled          EngagementRequestStatus = "Cancelled"
	EngagementRequestStatusCompleted          EngagementRequestStatus = "Completed"
	EngagementRequestStatusInProgress         EngagementRequestStatus = "In Progress"
	EngagementRequestStatusNil                EngagementRequestStatus = "<nil>"
	EngagementRequestStatusNotStarted         EngagementRequestStatus = "Not Started"
	EngagementRequestStatusOnHold             EngagementRequestStatus = "On Hold"
	EngagementRequestStatusWaitingForResource EngagementRequestStatus = "Waiting for Resource"
)

// Defines values for FindingEngagementEngagementType.
const (
	FindingEngagementEngagementTypeCICD        FindingEngagementEngagementType = "CI/CD"
	FindingEngagementEngagementTypeInteractive FindingEngagementEngagementType = "Interactive"
	FindingEngagementEngagementTypeNil         FindingEngagementEngagementType = "<nil>"
)

// Defines values for ImportScanGroupBy.
const (
	ImportScanGroupByComponentName                 ImportScanGroupBy = "component_name"
	ImportScanGroupByComponentNameComponentVersion ImportScanGroupBy = "component_name+component_version"
	ImportScanGroupByFilePath                      ImportScanGroupBy = "file_path"
	ImportScanGroupByFindingTitle                  ImportScanGroupBy = "finding_title"
)

// Defines values for ImportScanMinimumSeverity.
const (
	ImportScanMinimumSeverityCritical ImportScanMinimumSeverity = "Critical"
	ImportScanMinimumSeverityHigh     ImportScanMinimumSeverity = "High"
	ImportScanMinimumSeverityInfo     ImportScanMinimumSeverity = "Info"
	ImportScanMinimumSeverityLow      ImportScanMinimumSeverity = "Low"
	ImportScanMinimumSeverityMedium   ImportScanMinimumSeverity = "Medium"
)

// Defines values for ImportScanScanType.
const (
	ImportScanScanTypeAWSProwlerScan                                 ImportScanScanType = "AWS Prowler Scan"
	ImportScanScanTypeAWSProwlerV3                                   ImportScanScanType = "AWS Prowler V3"
	ImportScanScanTypeAWSScout2Scan                                  ImportScanScanType = "AWS Scout2 Scan"
	ImportScanScanTypeAWSSecurityFindingFormatASFFScan               ImportScanScanType = "AWS Security Finding Format (ASFF) Scan"
	ImportScanScanTypeAWSSecurityHubScan                             ImportScanScanType = "AWS Security Hub Scan"
	ImportScanScanTypeAcunetix360Scan                                ImportScanScanType = "Acunetix360 Scan"
	ImportScanScanTypeAcunetixScan                                   ImportScanScanType = "Acunetix Scan"
	ImportScanScanTypeAnchoreCTLPoliciesReport                       ImportScanScanType = "AnchoreCTL Policies Report"
	ImportScanScanTypeAnchoreCTLVulnReport                           ImportScanScanType = "AnchoreCTL Vuln Report"
	ImportScanScanTypeAnchoreEngineScan                              ImportScanScanType = "Anchore Engine Scan"
	ImportScanScanTypeAnchoreEnterprisePolicyCheck                   ImportScanScanType = "Anchore Enterprise Policy Check"
	ImportScanScanTypeAnchoreGrype                                   ImportScanScanType = "Anchore Grype"
	ImportScanScanTypeAppSpiderScan                                  ImportScanScanType = "AppSpider Scan"
	ImportScanScanTypeAquaScan                                       ImportScanScanType = "Aqua Scan"
	ImportScanScanTypeArachniScan                                    ImportScanScanType = "Arachni Scan"
	ImportScanScanTypeAuditJSScan                                    ImportScanScanType = "AuditJS Scan"
	ImportScanScanTypeAzureSecurityCenterRecommendationsScan         ImportScanScanType = "Azure Security Center Recommendations Scan"
	ImportScanScanTypeBanditScan                                     ImportScanScanType = "Bandit Scan"
	ImportScanScanTypeBlackDuckAPI                                   ImportScanScanType = "BlackDuck API"
	ImportScanScanTypeBlackduckComponentRisk                         ImportScanScanType = "Blackduck Component Risk"
	ImportScanScanTypeBlackduckHubScan                               ImportScanScanType = "Blackduck Hub Scan"
	ImportScanScanTypeBrakemanScan                                   ImportScanScanType = "Brakeman Scan"
	ImportScanScanTypeBugCrowdScan                                   ImportScanScanType = "BugCrowd Scan"
	ImportScanScanTypeBugcrowdAPIImport                              ImportScanScanType = "Bugcrowd API Import"
	ImportScanScanTypeBundlerAuditScan                               ImportScanScanType = "Bundler-Audit Scan"
	ImportScanScanTypeBurpEnterpriseScan                             ImportScanScanType = "Burp Enterprise Scan"
	ImportScanScanTypeBurpGraphQLAPI                                 ImportScanScanType = "Burp GraphQL API"
	ImportScanScanTypeBurpRESTAPI                                    ImportScanScanType = "Burp REST API"
	ImportScanScanTypeBurpScan                                       ImportScanScanType = "Burp Scan"
	ImportScanScanTypeCargoAuditScan                                 ImportScanScanType = "CargoAudit Scan"
	ImportScanScanTypeCheckmarxOSA                                   ImportScanScanType = "Checkmarx OSA"
	ImportScanScanTypeCheckmarxScan                                  ImportScanScanType = "Checkmarx Scan"
	ImportScanScanTypeCheckmarxScanDetailed                          ImportScanScanType = "Checkmarx Scan detailed"
	ImportScanScanTypeCheckovScan                                    ImportScanScanType = "Checkov Scan"
	ImportScanScanTypeClairKlarScan                                  ImportScanScanType = "Clair Klar Scan"
	ImportScanScanTypeClairScan                                      ImportScanScanType = "Clair Scan"
	ImportScanScanTypeCloudsploitScan                                ImportScanScanType = "Cloudsploit Scan"
	ImportScanScanTypeCobaltIoAPIImport                              ImportScanScanType = "Cobalt.io API Import"
	ImportScanScanTypeCobaltIoScan                                   ImportScanScanType = "Cobalt.io Scan"
	ImportScanScanTypeCodecheckerReportNative                        ImportScanScanType = "Codechecker Report native"
	ImportScanScanTypeContrastScan                                   ImportScanScanType = "Contrast Scan"
	ImportScanScanTypeCoverityAPI                                    ImportScanScanType = "Coverity API"
	ImportScanScanTypeCrashtestSecurityJSONFile                      ImportScanScanType = "Crashtest Security JSON File"
	ImportScanScanTypeCrashtestSecurityXMLFile                       ImportScanScanType = "Crashtest Security XML File"
	ImportScanScanTypeCredScanScan                                   ImportScanScanType = "CredScan Scan"
	ImportScanScanTypeCycloneDXScan                                  ImportScanScanType = "CycloneDX Scan"
	ImportScanScanTypeDSOPScan                                       ImportScanScanType = "DSOP Scan"
	ImportScanScanTypeDawnScannerScan                                ImportScanScanType = "DawnScanner Scan"
	ImportScanScanTypeDependencyCheckScan                            ImportScanScanType = "Dependency Check Scan"
	ImportScanScanTypeDependencyTrackFindingPackagingFormatFPFExport ImportScanScanType = "Dependency Track Finding Packaging Format (FPF) Export"
	ImportScanScanTypeDetectSecretsScan                              ImportScanScanType = "Detect-secrets Scan"
	ImportScanScanTypeDockerBenchSecurityScan                        ImportScanScanType = "docker-bench-security Scan"
	ImportScanScanTypeDockleScan                                     ImportScanScanType = "Dockle Scan"
	ImportScanScanTypeDrHeaderJSONImporter                           ImportScanScanType = "DrHeader JSON Importer"
	ImportScanScanTypeESLintScan                                     ImportScanScanType = "ESLint Scan"
	ImportScanScanTypeEdgescanScan                                   ImportScanScanType = "Edgescan Scan"
	ImportScanScanTypeFortifyScan                                    ImportScanScanType = "Fortify Scan"
	ImportScanScanTypeGenericFindingsImport                          ImportScanScanType = "Generic Findings Import"
	ImportScanScanTypeGgshieldScan                                   ImportScanScanType = "Ggshield Scan"
	ImportScanScanTypeGitLabAPIFuzzingReportScan                     ImportScanScanType = "GitLab API Fuzzing Report Scan"
	ImportScanScanTypeGitLabContainerScan                            ImportScanScanType = "GitLab Container Scan"
	ImportScanScanTypeGitLabDASTReport                               ImportScanScanType = "GitLab DAST Report"
	ImportScanScanTypeGitLabDependencyScanningReport                 ImportScanScanType = "GitLab Dependency Scanning Report"
	ImportScanScanTypeGitLabSASTReport                               ImportScanScanType = "GitLab SAST Report"
	ImportScanScanTypeGitLabSecretDetectionReport                    ImportScanScanType = "GitLab Secret Detection Report"
	ImportScanScanTypeGithubVulnerabilityScan                        ImportScanScanType = "Github Vulnerability Scan"
	ImportScanScanTypeGitleaksScan                                   ImportScanScanType = "Gitleaks Scan"
	ImportScanScanTypeGosecScanner                                   ImportScanScanType = "Gosec Scanner"
	ImportScanScanTypeGovulncheckScanner                             ImportScanScanType = "Govulncheck Scanner"
	ImportScanScanTypeHackerOneCases                                 ImportScanScanType = "HackerOne Cases"
	ImportScanScanTypeHadolintDockerfileCheck                        ImportScanScanType = "Hadolint Dockerfile check"
	ImportScanScanTypeHarborVulnerabilityScan                        ImportScanScanType = "Harbor Vulnerability Scan"
	ImportScanScanTypeHorusecScan                                    ImportScanScanType = "Horusec Scan"
	ImportScanScanTypeHuskyCIReport                                  ImportScanScanType = "HuskyCI Report"
	ImportScanScanTypeHydraScan                                      ImportScanScanType = "Hydra Scan"
	ImportScanScanTypeIBMAppScanDAST                                 ImportScanScanType = "IBM AppScan DAST"
	ImportScanScanTypeImmuniwebScan                                  ImportScanScanType = "Immuniweb Scan"
	ImportScanScanTypeIntSightsReport                                ImportScanScanType = "IntSights Report"
	ImportScanScanTypeJFrogXrayAPISummaryArtifactScan                ImportScanScanType = "JFrog Xray API Summary Artifact Scan"
	ImportScanScanTypeJFrogXrayScan                                  ImportScanScanType = "JFrog Xray Scan"
	ImportScanScanTypeJFrogXrayUnifiedScan                           ImportScanScanType = "JFrog Xray Unified Scan"
	ImportScanScanTypeKICSScan                                       ImportScanScanType = "KICS Scan"
	ImportScanScanTypeKiuwanScan                                     ImportScanScanType = "Kiuwan Scan"
	ImportScanScanTypeKubeBenchScan                                  ImportScanScanType = "kube-bench Scan"
	ImportScanScanTypeMeterianScan                                   ImportScanScanType = "Meterian Scan"
	ImportScanScanTypeMicrofocusWebinspectScan                       ImportScanScanType = "Microfocus Webinspect Scan"
	ImportScanScanTypeMobSFScan                                      ImportScanScanType = "MobSF Scan"
	ImportScanScanTypeMobsfscanScan                                  ImportScanScanType = "Mobsfscan Scan"
	ImportScanScanTypeMozillaObservatoryScan                         ImportScanScanType = "Mozilla Observatory Scan"
	ImportScanScanTypeNPMAuditScan                                   ImportScanScanType = "NPM Audit Scan"
	ImportScanScanTypeNetsparkerScan                                 ImportScanScanType = "Netsparker Scan"
	ImportScanScanTypeNeuVectorCompliance                            ImportScanScanType = "NeuVector (compliance)"
	ImportScanScanTypeNeuVectorREST                                  ImportScanScanType = "NeuVector (REST)"
	ImportScanScanTypeNexposeScan                                    ImportScanScanType = "Nexpose Scan"
	ImportScanScanTypeNiktoScan                                      ImportScanScanType = "Nikto Scan"
	ImportScanScanTypeNmapScan                                       ImportScanScanType = "Nmap Scan"
	ImportScanScanTypeNodeSecurityPlatformScan                       ImportScanScanType = "Node Security Platform Scan"
	ImportScanScanTypeNucleiScan                                     ImportScanScanType = "Nuclei Scan"
	ImportScanScanTypeORTEvaluatedModelImporter                      ImportScanScanType = "ORT evaluated model Importer"
	ImportScanScanTypeOpenVASCSV                                     ImportScanScanType = "OpenVAS CSV"
	ImportScanScanTypeOpenscapVulnerabilityScan                      ImportScanScanType = "Openscap Vulnerability Scan"
	ImportScanScanTypeOssIndexDevauditSCAScanImporter                ImportScanScanType = "OssIndex Devaudit SCA Scan Importer"
	ImportScanScanTypeOutpost24Scan                                  ImportScanScanType = "Outpost24 Scan"
	ImportScanScanTypePHPSecurityAuditV2                             ImportScanScanType = "PHP Security Audit v2"
	ImportScanScanTypePHPSymfonySecurityCheck                        ImportScanScanType = "PHP Symfony Security Check"
	ImportScanScanTypePMDScan                                        ImportScanScanType = "PMD Scan"
	ImportScanScanTypePWNSAST                                        ImportScanScanType = "PWN SAST"
	ImportScanScanTypePipAuditScan                                   ImportScanScanType = "pip-audit Scan"
	ImportScanScanTypePopeyeScan                                     ImportScanScanType = "Popeye Scan"
	ImportScanScanTypeQualysInfrastructureScanWebGUIXML              ImportScanScanType = "Qualys Infrastructure Scan (WebGUI XML)"
	ImportScanScanTypeQualysScan                                     ImportScanScanType = "Qualys Scan"
	ImportScanScanTypeQualysWebappScan                               ImportScanScanType = "Qualys Webapp Scan"
	ImportScanScanTypeRetireJsScan                                   ImportScanScanType = "Retire.js Scan"
	ImportScanScanTypeRiskReconAPIImporter                           ImportScanScanType = "Risk Recon API Importer"
	ImportScanScanTypeRubocopScan                                    ImportScanScanType = "Rubocop Scan"
	ImportScanScanTypeRustyHogScan                                   ImportScanScanType = "Rusty Hog Scan"
	ImportScanScanTypeSARIF                                          ImportScanScanType = "SARIF"
	ImportScanScanTypeSKFScan                                        ImportScanScanType = "SKF Scan"
	ImportScanScanTypeSSLLabsScan                                    ImportScanScanType = "SSL Labs Scan"
	ImportScanScanTypeSSLyzeScanJSON                                 ImportScanScanType = "SSLyze Scan (JSON)"
	ImportScanScanTypeScantistScan                                   ImportScanScanType = "Scantist Scan"
	ImportScanScanTypeScoutSuiteScan                                 ImportScanScanType = "Scout Suite Scan"
	ImportScanScanTypeSemgrepJSONReport                              ImportScanScanType = "Semgrep JSON Report"
	ImportScanScanTypeSnykScan                                       ImportScanScanType = "Snyk Scan"
	ImportScanScanTypeSolarAppscreenerScan                           ImportScanScanType = "Solar Appscreener Scan"
	ImportScanScanTypeSonarQubeAPIImport                             ImportScanScanType = "SonarQube API Import"
	ImportScanScanTypeSonarQubeScan                                  ImportScanScanType = "SonarQube Scan"
	ImportScanScanTypeSonarQubeScanDetailed                          ImportScanScanType = "SonarQube Scan detailed"
	ImportScanScanTypeSonatypeApplicationScan                        ImportScanScanType = "Sonatype Application Scan"
	ImportScanScanTypeSpotBugsScan                                   ImportScanScanType = "SpotBugs Scan"
	ImportScanScanTypeSslscan                                        ImportScanScanType = "Sslscan"
	ImportScanScanTypeSslyzeScan                                     ImportScanScanType = "Sslyze Scan"
	ImportScanScanTypeStackHawkHawkScan                              ImportScanScanType = "StackHawk HawkScan"
	ImportScanScanTypeTFSecScan                                      ImportScanScanType = "TFSec Scan"
	ImportScanScanTypeTalismanScan                                   ImportScanScanType = "Talisman Scan"
	ImportScanScanTypeTenableScan                                    ImportScanScanType = "Tenable Scan"
	ImportScanScanTypeTerrascanScan                                  ImportScanScanType = "Terrascan Scan"
	ImportScanScanTypeTestsslScan                                    ImportScanScanType = "Testssl Scan"
	ImportScanScanTypeTrivyOperatorScan                              ImportScanScanType = "Trivy Operator Scan"
	ImportScanScanTypeTrivyScan                                      ImportScanScanType = "Trivy Scan"
	ImportScanScanTypeTrufflehog3Scan                                ImportScanScanType = "Trufflehog3 Scan"
	ImportScanScanTypeTrufflehogScan                                 ImportScanScanType = "Trufflehog Scan"
	ImportScanScanTypeTrustwaveFusionAPIScan                         ImportScanScanType = "Trustwave Fusion API Scan"
	ImportScanScanTypeTrustwaveScanCSV                               ImportScanScanType = "Trustwave Scan (CSV)"
	ImportScanScanTypeTwistlockImageScan                             ImportScanScanType = "Twistlock Image Scan"
	ImportScanScanTypeVCGScan                                        ImportScanScanType = "VCG Scan"
	ImportScanScanTypeVeracodeScan                                   ImportScanScanType = "Veracode Scan"
	ImportScanScanTypeVeracodeSourceClearScan                        ImportScanScanType = "Veracode SourceClear Scan"
	ImportScanScanTypeVulners                                        ImportScanScanType = "Vulners"
	ImportScanScanTypeWFuzzJSONReport                                ImportScanScanType = "WFuzz JSON report"
	ImportScanScanTypeWapitiScan                                     ImportScanScanType = "Wapiti Scan"
	ImportScanScanTypeWazuh                                          ImportScanScanType = "Wazuh"
	ImportScanScanTypeWhispersScan                                   ImportScanScanType = "Whispers Scan"
	ImportScanScanTypeWhiteHatSentinel                               ImportScanScanType = "WhiteHat Sentinel"
	ImportScanScanTypeWhitesourceScan                                ImportScanScanType = "Whitesource Scan"
	ImportScanScanTypeWpscan                                         ImportScanScanType = "Wpscan"
	ImportScanScanTypeXanitizerScan                                  ImportScanScanType = "Xanitizer Scan"
	ImportScanScanTypeYarnAuditScan                                  ImportScanScanType = "Yarn Audit Scan"
	ImportScanScanTypeZAPScan                                        ImportScanScanType = "ZAP Scan"
)

// Defines values for ImportScanRequestGroupBy.
const (
	ImportScanRequestGroupByComponentName                 ImportScanRequestGroupBy = "component_name"
	ImportScanRequestGroupByComponentNameComponentVersion ImportScanRequestGroupBy = "component_name+component_version"
	ImportScanRequestGroupByFilePath                      ImportScanRequestGroupBy = "file_path"
	ImportScanRequestGroupByFindingTitle                  ImportScanRequestGroupBy = "finding_title"
)

// Defines values for ImportScanRequestMinimumSeverity.
const (
	ImportScanRequestMinimumSeverityCritical ImportScanRequestMinimumSeverity = "Critical"
	ImportScanRequestMinimumSeverityHigh     ImportScanRequestMinimumSeverity = "High"
	ImportScanRequestMinimumSeverityInfo     ImportScanRequestMinimumSeverity = "Info"
	ImportScanRequestMinimumSeverityLow      ImportScanRequestMinimumSeverity = "Low"
	ImportScanRequestMinimumSeverityMedium   ImportScanRequestMinimumSeverity = "Medium"
)

// Defines values for ImportScanRequestScanType.
const (
	ImportScanRequestScanTypeAWSProwlerScan                                 ImportScanRequestScanType = "AWS Prowler Scan"
	ImportScanRequestScanTypeAWSProwlerV3                                   ImportScanRequestScanType = "AWS Prowler V3"
	ImportScanRequestScanTypeAWSScout2Scan                                  ImportScanRequestScanType = "AWS Scout2 Scan"
	ImportScanRequestScanTypeAWSSecurityFindingFormatASFFScan               ImportScanRequestScanType = "AWS Security Finding Format (ASFF) Scan"
	ImportScanRequestScanTypeAWSSecurityHubScan                             ImportScanRequestScanType = "AWS Security Hub Scan"
	ImportScanRequestScanTypeAcunetix360Scan                                ImportScanRequestScanType = "Acunetix360 Scan"
	ImportScanRequestScanTypeAcunetixScan                                   ImportScanRequestScanType = "Acunetix Scan"
	ImportScanRequestScanTypeAnchoreCTLPoliciesReport                       ImportScanRequestScanType = "AnchoreCTL Policies Report"
	ImportScanRequestScanTypeAnchoreCTLVulnReport                           ImportScanRequestScanType = "AnchoreCTL Vuln Report"
	ImportScanRequestScanTypeAnchoreEngineScan                              ImportScanRequestScanType = "Anchore Engine Scan"
	ImportScanRequestScanTypeAnchoreEnterprisePolicyCheck                   ImportScanRequestScanType = "Anchore Enterprise Policy Check"
	ImportScanRequestScanTypeAnchoreGrype                                   ImportScanRequestScanType = "Anchore Grype"
	ImportScanRequestScanTypeAppSpiderScan                                  ImportScanRequestScanType = "AppSpider Scan"
	ImportScanRequestScanTypeAquaScan                                       ImportScanRequestScanType = "Aqua Scan"
	ImportScanRequestScanTypeArachniScan                                    ImportScanRequestScanType = "Arachni Scan"
	ImportScanRequestScanTypeAuditJSScan                                    ImportScanRequestScanType = "AuditJS Scan"
	ImportScanRequestScanTypeAzureSecurityCenterRecommendationsScan         ImportScanRequestScanType = "Azure Security Center Recommendations Scan"
	ImportScanRequestScanTypeBanditScan                                     ImportScanRequestScanType = "Bandit Scan"
	ImportScanRequestScanTypeBlackDuckAPI                                   ImportScanRequestScanType = "BlackDuck API"
	ImportScanRequestScanTypeBlackduckComponentRisk                         ImportScanRequestScanType = "Blackduck Component Risk"
	ImportScanRequestScanTypeBlackduckHubScan                               ImportScanRequestScanType = "Blackduck Hub Scan"
	ImportScanRequestScanTypeBrakemanScan                                   ImportScanRequestScanType = "Brakeman Scan"
	ImportScanRequestScanTypeBugCrowdScan                                   ImportScanRequestScanType = "BugCrowd Scan"
	ImportScanRequestScanTypeBugcrowdAPIImport                              ImportScanRequestScanType = "Bugcrowd API Import"
	ImportScanRequestScanTypeBundlerAuditScan                               ImportScanRequestScanType = "Bundler-Audit Scan"
	ImportScanRequestScanTypeBurpEnterpriseScan                             ImportScanRequestScanType = "Burp Enterprise Scan"
	ImportScanRequestScanTypeBurpGraphQLAPI                                 ImportScanRequestScanType = "Burp GraphQL API"
	ImportScanRequestScanTypeBurpRESTAPI                                    ImportScanRequestScanType = "Burp REST API"
	ImportScanRequestScanTypeBurpScan                                       ImportScanRequestScanType = "Burp Scan"
	ImportScanRequestScanTypeCargoAuditScan                                 ImportScanRequestScanType = "CargoAudit Scan"
	ImportScanRequestScanTypeCheckmarxOSA                                   ImportScanRequestScanType = "Checkmarx OSA"
	ImportScanRequestScanTypeCheckmarxScan                                  ImportScanRequestScanType = "Checkmarx Scan"
	ImportScanRequestScanTypeCheckmarxScanDetailed                          ImportScanRequestScanType = "Checkmarx Scan detailed"
	ImportScanRequestScanTypeCheckovScan                                    ImportScanRequestScanType = "Checkov Scan"
	ImportScanRequestScanTypeClairKlarScan                                  ImportScanRequestScanType = "Clair Klar Scan"
	ImportScanRequestScanTypeClairScan                                      ImportScanRequestScanType = "Clair Scan"
	ImportScanRequestScanTypeCloudsploitScan                                ImportScanRequestScanType = "Cloudsploit Scan"
	ImportScanRequestScanTypeCobaltIoAPIImport                              ImportScanRequestScanType = "Cobalt.io API Import"
	ImportScanRequestScanTypeCobaltIoScan                                   ImportScanRequestScanType = "Cobalt.io Scan"
	ImportScanRequestScanTypeCodecheckerReportNative                        ImportScanRequestScanType = "Codechecker Report native"
	ImportScanRequestScanTypeContrastScan                                   ImportScanRequestScanType = "Contrast Scan"
	ImportScanRequestScanTypeCoverityAPI                                    ImportScanRequestScanType = "Coverity API"
	ImportScanRequestScanTypeCrashtestSecurityJSONFile                      ImportScanRequestScanType = "Crashtest Security JSON File"
	ImportScanRequestScanTypeCrashtestSecurityXMLFile                       ImportScanRequestScanType = "Crashtest Security XML File"
	ImportScanRequestScanTypeCredScanScan                                   ImportScanRequestScanType = "CredScan Scan"
	ImportScanRequestScanTypeCycloneDXScan                                  ImportScanRequestScanType = "CycloneDX Scan"
	ImportScanRequestScanTypeDSOPScan                                       ImportScanRequestScanType = "DSOP Scan"
	ImportScanRequestScanTypeDawnScannerScan                                ImportScanRequestScanType = "DawnScanner Scan"
	ImportScanRequestScanTypeDependencyCheckScan                            ImportScanRequestScanType = "Dependency Check Scan"
	ImportScanRequestScanTypeDependencyTrackFindingPackagingFormatFPFExport ImportScanRequestScanType = "Dependency Track Finding Packaging Format (FPF) Export"
	ImportScanRequestScanTypeDetectSecretsScan                              ImportScanRequestScanType = "Detect-secrets Scan"
	ImportScanRequestScanTypeDockerBenchSecurityScan                        ImportScanRequestScanType = "docker-bench-security Scan"
	ImportScanRequestScanTypeDockleScan                                     ImportScanRequestScanType = "Dockle Scan"
	ImportScanRequestScanTypeDrHeaderJSONImporter                           ImportScanRequestScanType = "DrHeader JSON Importer"
	ImportScanRequestScanTypeESLintScan                                     ImportScanRequestScanType = "ESLint Scan"
	ImportScanRequestScanTypeEdgescanScan                                   ImportScanRequestScanType = "Edgescan Scan"
	ImportScanRequestScanTypeFortifyScan                                    ImportScanRequestScanType = "Fortify Scan"
	ImportScanRequestScanTypeGenericFindingsImport                          ImportScanRequestScanType = "Generic Findings Import"
	ImportScanRequestScanTypeGgshieldScan                                   ImportScanRequestScanType = "Ggshield Scan"
	ImportScanRequestScanTypeGitLabAPIFuzzingReportScan                     ImportScanRequestScanType = "GitLab API Fuzzing Report Scan"
	ImportScanRequestScanTypeGitLabContainerScan                            ImportScanRequestScanType = "GitLab Container Scan"
	ImportScanRequestScanTypeGitLabDASTReport                               ImportScanRequestScanType = "GitLab DAST Report"
	ImportScanRequestScanTypeGitLabDependencyScanningReport                 ImportScanRequestScanType = "GitLab Dependency Scanning Report"
	ImportScanRequestScanTypeGitLabSASTReport                               ImportScanRequestScanType = "GitLab SAST Report"
	ImportScanRequestScanTypeGitLabSecretDetectionReport                    ImportScanRequestScanType = "GitLab Secret Detection Report"
	ImportScanRequestScanTypeGithubVulnerabilityScan                        ImportScanRequestScanType = "Github Vulnerability Scan"
	ImportScanRequestScanTypeGitleaksScan                                   ImportScanRequestScanType = "Gitleaks Scan"
	ImportScanRequestScanTypeGosecScanner                                   ImportScanRequestScanType = "Gosec Scanner"
	ImportScanRequestScanTypeGovulncheckScanner                             ImportScanRequestScanType = "Govulncheck Scanner"
	ImportScanRequestScanTypeHackerOneCases                                 ImportScanRequestScanType = "HackerOne Cases"
	ImportScanRequestScanTypeHadolintDockerfileCheck                        ImportScanRequestScanType = "Hadolint Dockerfile check"
	ImportScanRequestScanTypeHarborVulnerabilityScan                        ImportScanRequestScanType = "Harbor Vulnerability Scan"
	ImportScanRequestScanTypeHorusecScan                                    ImportScanRequestScanType = "Horusec Scan"
	ImportScanRequestScanTypeHuskyCIReport                                  ImportScanRequestScanType = "HuskyCI Report"
	ImportScanRequestScanTypeHydraScan                                      ImportScanRequestScanType = "Hydra Scan"
	ImportScanRequestScanTypeIBMAppScanDAST                                 ImportScanRequestScanType = "IBM AppScan DAST"
	ImportScanRequestScanTypeImmuniwebScan                                  ImportScanRequestScanType = "Immuniweb Scan"
	ImportScanRequestScanTypeIntSightsReport                                ImportScanRequestScanType = "IntSights Report"
	ImportScanRequestScanTypeJFrogXrayAPISummaryArtifactScan                ImportScanRequestScanType = "JFrog Xray API Summary Artifact Scan"
	ImportScanRequestScanTypeJFrogXrayScan                                  ImportScanRequestScanType = "JFrog Xray Scan"
	ImportScanRequestScanTypeJFrogXrayUnifiedScan                           ImportScanRequestScanType = "JFrog Xray Unified Scan"
	ImportScanRequestScanTypeKICSScan                                       ImportScanRequestScanType = "KICS Scan"
	ImportScanRequestScanTypeKiuwanScan                                     ImportScanRequestScanType = "Kiuwan Scan"
	ImportScanRequestScanTypeKubeBenchScan                                  ImportScanRequestScanType = "kube-bench Scan"
	ImportScanRequestScanTypeMeterianScan                                   ImportScanRequestScanType = "Meterian Scan"
	ImportScanRequestScanTypeMicrofocusWebinspectScan                       ImportScanRequestScanType = "Microfocus Webinspect Scan"
	ImportScanRequestScanTypeMobSFScan                                      ImportScanRequestScanType = "MobSF Scan"
	ImportScanRequestScanTypeMobsfscanScan                                  ImportScanRequestScanType = "Mobsfscan Scan"
	ImportScanRequestScanTypeMozillaObservatoryScan                         ImportScanRequestScanType = "Mozilla Observatory Scan"
	ImportScanRequestScanTypeNPMAuditScan                                   ImportScanRequestScanType = "NPM Audit Scan"
	ImportScanRequestScanTypeNetsparkerScan                                 ImportScanRequestScanType = "Netsparker Scan"
	ImportScanRequestScanTypeNeuVectorCompliance                            ImportScanRequestScanType = "NeuVector (compliance)"
	ImportScanRequestScanTypeNeuVectorREST                                  ImportScanRequestScanType = "NeuVector (REST)"
	ImportScanRequestScanTypeNexposeScan                                    ImportScanRequestScanType = "Nexpose Scan"
	ImportScanRequestScanTypeNiktoScan                                      ImportScanRequestScanType = "Nikto Scan"
	ImportScanRequestScanTypeNmapScan                                       ImportScanRequestScanType = "Nmap Scan"
	ImportScanRequestScanTypeNodeSecurityPlatformScan                       ImportScanRequestScanType = "Node Security Platform Scan"
	ImportScanRequestScanTypeNucleiScan                                     ImportScanRequestScanType = "Nuclei Scan"
	ImportScanRequestScanTypeORTEvaluatedModelImporter                      ImportScanRequestScanType = "ORT evaluated model Importer"
	ImportScanRequestScanTypeOpenVASCSV                                     ImportScanRequestScanType = "OpenVAS CSV"
	ImportScanRequestScanTypeOpenscapVulnerabilityScan                      ImportScanRequestScanType = "Openscap Vulnerability Scan"
	ImportScanRequestScanTypeOssIndexDevauditSCAScanImporter                ImportScanRequestScanType = "OssIndex Devaudit SCA Scan Importer"
	ImportScanRequestScanTypeOutpost24Scan                                  ImportScanRequestScanType = "Outpost24 Scan"
	ImportScanRequestScanTypePHPSecurityAuditV2                             ImportScanRequestScanType = "PHP Security Audit v2"
	ImportScanRequestScanTypePHPSymfonySecurityCheck                        ImportScanRequestScanType = "PHP Symfony Security Check"
	ImportScanRequestScanTypePMDScan                                        ImportScanRequestScanType = "PMD Scan"
	ImportScanRequestScanTypePWNSAST                                        ImportScanRequestScanType = "PWN SAST"
	ImportScanRequestScanTypePipAuditScan                                   ImportScanRequestScanType = "pip-audit Scan"
	ImportScanRequestScanTypePopeyeScan                                     ImportScanRequestScanType = "Popeye Scan"
	ImportScanRequestScanTypeQualysInfrastructureScanWebGUIXML              ImportScanRequestScanType = "Qualys Infrastructure Scan (WebGUI XML)"
	ImportScanRequestScanTypeQualysScan                                     ImportScanRequestScanType = "Qualys Scan"
	ImportScanRequestScanTypeQualysWebappScan                               ImportScanRequestScanType = "Qualys Webapp Scan"
	ImportScanRequestScanTypeRetireJsScan                                   ImportScanRequestScanType = "Retire.js Scan"
	ImportScanRequestScanTypeRiskReconAPIImporter                           ImportScanRequestScanType = "Risk Recon API Importer"
	ImportScanRequestScanTypeRubocopScan                                    ImportScanRequestScanType = "Rubocop Scan"
	ImportScanRequestScanTypeRustyHogScan                                   ImportScanRequestScanType = "Rusty Hog Scan"
	ImportScanRequestScanTypeSARIF                                          ImportScanRequestScanType = "SARIF"
	ImportScanRequestScanTypeSKFScan                                        ImportScanRequestScanType = "SKF Scan"
	ImportScanRequestScanTypeSSLLabsScan                                    ImportScanRequestScanType = "SSL Labs Scan"
	ImportScanRequestScanTypeSSLyzeScanJSON                                 ImportScanRequestScanType = "SSLyze Scan (JSON)"
	ImportScanRequestScanTypeScantistScan                                   ImportScanRequestScanType = "Scantist Scan"
	ImportScanRequestScanTypeScoutSuiteScan                                 ImportScanRequestScanType = "Scout Suite Scan"
	ImportScanRequestScanTypeSemgrepJSONReport                              ImportScanRequestScanType = "Semgrep JSON Report"
	ImportScanRequestScanTypeSnykScan                                       ImportScanRequestScanType = "Snyk Scan"
	ImportScanRequestScanTypeSolarAppscreenerScan                           ImportScanRequestScanType = "Solar Appscreener Scan"
	ImportScanRequestScanTypeSonarQubeAPIImport                             ImportScanRequestScanType = "SonarQube API Import"
	ImportScanRequestScanTypeSonarQubeScan                                  ImportScanRequestScanType = "SonarQube Scan"
	ImportScanRequestScanTypeSonarQubeScanDetailed                          ImportScanRequestScanType = "SonarQube Scan detailed"
	ImportScanRequestScanTypeSonatypeApplicationScan                        ImportScanRequestScanType = "Sonatype Application Scan"
	ImportScanRequestScanTypeSpotBugsScan                                   ImportScanRequestScanType = "SpotBugs Scan"
	ImportScanRequestScanTypeSslscan                                        ImportScanRequestScanType = "Sslscan"
	ImportScanRequestScanTypeSslyzeScan                                     ImportScanRequestScanType = "Sslyze Scan"
	ImportScanRequestScanTypeStackHawkHawkScan                              ImportScanRequestScanType = "StackHawk HawkScan"
	ImportScanRequestScanTypeTFSecScan                                      ImportScanRequestScanType = "TFSec Scan"
	ImportScanRequestScanTypeTalismanScan                                   ImportScanRequestScanType = "Talisman Scan"
	ImportScanRequestScanTypeTenableScan                                    ImportScanRequestScanType = "Tenable Scan"
	ImportScanRequestScanTypeTerrascanScan                                  ImportScanRequestScanType = "Terrascan Scan"
	ImportScanRequestScanTypeTestsslScan                                    ImportScanRequestScanType = "Testssl Scan"
	ImportScanRequestScanTypeTrivyOperatorScan                              ImportScanRequestScanType = "Trivy Operator Scan"
	ImportScanRequestScanTypeTrivyScan                                      ImportScanRequestScanType = "Trivy Scan"
	ImportScanRequestScanTypeTrufflehog3Scan                                ImportScanRequestScanType = "Trufflehog3 Scan"
	ImportScanRequestScanTypeTrufflehogScan                                 ImportScanRequestScanType = "Trufflehog Scan"
	ImportScanRequestScanTypeTrustwaveFusionAPIScan                         ImportScanRequestScanType = "Trustwave Fusion API Scan"
	ImportScanRequestScanTypeTrustwaveScanCSV                               ImportScanRequestScanType = "Trustwave Scan (CSV)"
	ImportScanRequestScanTypeTwistlockImageScan                             ImportScanRequestScanType = "Twistlock Image Scan"
	ImportScanRequestScanTypeVCGScan                                        ImportScanRequestScanType = "VCG Scan"
	ImportScanRequestScanTypeVeracodeScan                                   ImportScanRequestScanType = "Veracode Scan"
	ImportScanRequestScanTypeVeracodeSourceClearScan                        ImportScanRequestScanType = "Veracode SourceClear Scan"
	ImportScanRequestScanTypeVulners                                        ImportScanRequestScanType = "Vulners"
	ImportScanRequestScanTypeWFuzzJSONReport                                ImportScanRequestScanType = "WFuzz JSON report"
	ImportScanRequestScanTypeWapitiScan                                     ImportScanRequestScanType = "Wapiti Scan"
	ImportScanRequestScanTypeWazuh                                          ImportScanRequestScanType = "Wazuh"
	ImportScanRequestScanTypeWhispersScan                                   ImportScanRequestScanType = "Whispers Scan"
	ImportScanRequestScanTypeWhiteHatSentinel                               ImportScanRequestScanType = "WhiteHat Sentinel"
	ImportScanRequestScanTypeWhitesourceScan                                ImportScanRequestScanType = "Whitesource Scan"
	ImportScanRequestScanTypeWpscan                                         ImportScanRequestScanType = "Wpscan"
	ImportScanRequestScanTypeXanitizerScan                                  ImportScanRequestScanType = "Xanitizer Scan"
	ImportScanRequestScanTypeYarnAuditScan                                  ImportScanRequestScanType = "Yarn Audit Scan"
	ImportScanRequestScanTypeZAPScan                                        ImportScanRequestScanType = "ZAP Scan"
)

// Defines values for JIRAInstanceDefaultIssueType.
const (
	JIRAInstanceDefaultIssueTypeBug      JIRAInstanceDefaultIssueType = "Bug"
	JIRAInstanceDefaultIssueTypeEpic     JIRAInstanceDefaultIssueType = "Epic"
	JIRAInstanceDefaultIssueTypeSecurity JIRAInstanceDefaultIssueType = "Security"
	JIRAInstanceDefaultIssueTypeSpike    JIRAInstanceDefaultIssueType = "Spike"
	JIRAInstanceDefaultIssueTypeStory    JIRAInstanceDefaultIssueType = "Story"
	JIRAInstanceDefaultIssueTypeTask     JIRAInstanceDefaultIssueType = "Task"
)

// Defines values for JIRAInstanceRequestDefaultIssueType.
const (
	JIRAInstanceRequestDefaultIssueTypeBug      JIRAInstanceRequestDefaultIssueType = "Bug"
	JIRAInstanceRequestDefaultIssueTypeEpic     JIRAInstanceRequestDefaultIssueType = "Epic"
	JIRAInstanceRequestDefaultIssueTypeSecurity JIRAInstanceRequestDefaultIssueType = "Security"
	JIRAInstanceRequestDefaultIssueTypeSpike    JIRAInstanceRequestDefaultIssueType = "Spike"
	JIRAInstanceRequestDefaultIssueTypeStory    JIRAInstanceRequestDefaultIssueType = "Story"
	JIRAInstanceRequestDefaultIssueTypeTask     JIRAInstanceRequestDefaultIssueType = "Task"
)

// Defines values for NotificationsAutoCloseEngagement.
const (
	NotificationsAutoCloseEngagementAlert   NotificationsAutoCloseEngagement = "alert"
	NotificationsAutoCloseEngagementMail    NotificationsAutoCloseEngagement = "mail"
	NotificationsAutoCloseEngagementMsteams NotificationsAutoCloseEngagement = "msteams"
	NotificationsAutoCloseEngagementSlack   NotificationsAutoCloseEngagement = "slack"
)

// Defines values for NotificationsCloseEngagement.
const (
	NotificationsCloseEngagementAlert   NotificationsCloseEngagement = "alert"
	NotificationsCloseEngagementMail    NotificationsCloseEngagement = "mail"
	NotificationsCloseEngagementMsteams NotificationsCloseEngagement = "msteams"
	NotificationsCloseEngagementSlack   NotificationsCloseEngagement = "slack"
)

// Defines values for NotificationsCodeReview.
const (
	NotificationsCodeReviewAlert   NotificationsCodeReview = "alert"
	NotificationsCodeReviewMail    NotificationsCodeReview = "mail"
	NotificationsCodeReviewMsteams NotificationsCodeReview = "msteams"
	NotificationsCodeReviewSlack   NotificationsCodeReview = "slack"
)

// Defines values for NotificationsEngagementAdded.
const (
	NotificationsEngagementAddedAlert   NotificationsEngagementAdded = "alert"
	NotificationsEngagementAddedMail    NotificationsEngagementAdded = "mail"
	NotificationsEngagementAddedMsteams NotificationsEngagementAdded = "msteams"
	NotificationsEngagementAddedSlack   NotificationsEngagementAdded = "slack"
)

// Defines values for NotificationsJiraUpdate.
const (
	NotificationsJiraUpdateAlert   NotificationsJiraUpdate = "alert"
	NotificationsJiraUpdateMail    NotificationsJiraUpdate = "mail"
	NotificationsJiraUpdateMsteams NotificationsJiraUpdate = "msteams"
	NotificationsJiraUpdateSlack   NotificationsJiraUpdate = "slack"
)

// Defines values for NotificationsOther.
const (
	NotificationsOtherAlert   NotificationsOther = "alert"
	NotificationsOtherMail    NotificationsOther = "mail"
	NotificationsOtherMsteams NotificationsOther = "msteams"
	NotificationsOtherSlack   NotificationsOther = "slack"
)

// Defines values for NotificationsProductAdded.
const (
	NotificationsProductAddedAlert   NotificationsProductAdded = "alert"
	NotificationsProductAddedMail    NotificationsProductAdded = "mail"
	NotificationsProductAddedMsteams NotificationsProductAdded = "msteams"
	NotificationsProductAddedSlack   NotificationsProductAdded = "slack"
)

// Defines values for NotificationsProductTypeAdded.
const (
	NotificationsProductTypeAddedAlert   NotificationsProductTypeAdded = "alert"
	NotificationsProductTypeAddedMail    NotificationsProductTypeAdded = "mail"
	NotificationsProductTypeAddedMsteams NotificationsProductTypeAdded = "msteams"
	NotificationsProductTypeAddedSlack   NotificationsProductTypeAdded = "slack"
)

// Defines values for NotificationsReviewRequested.
const (
	NotificationsReviewRequestedAlert   NotificationsReviewRequested = "alert"
	NotificationsReviewRequestedMail    NotificationsReviewRequested = "mail"
	NotificationsReviewRequestedMsteams NotificationsReviewRequested = "msteams"
	NotificationsReviewRequestedSlack   NotificationsReviewRequested = "slack"
)

// Defines values for NotificationsRiskAcceptanceExpiration.
const (
	NotificationsRiskAcceptanceExpirationAlert   NotificationsRiskAcceptanceExpiration = "alert"
	NotificationsRiskAcceptanceExpirationMail    NotificationsRiskAcceptanceExpiration = "mail"
	NotificationsRiskAcceptanceExpirationMsteams NotificationsRiskAcceptanceExpiration = "msteams"
	NotificationsRiskAcceptanceExpirationSlack   NotificationsRiskAcceptanceExpiration = "slack"
)

// Defines values for NotificationsScanAdded.
const (
	NotificationsScanAddedAlert   NotificationsScanAdded = "alert"
	NotificationsScanAddedMail    NotificationsScanAdded = "mail"
	NotificationsScanAddedMsteams NotificationsScanAdded = "msteams"
	NotificationsScanAddedSlack   NotificationsScanAdded = "slack"
)

// Defines values for NotificationsSlaBreach.
const (
	NotificationsSlaBreachAlert   NotificationsSlaBreach = "alert"
	NotificationsSlaBreachMail    NotificationsSlaBreach = "mail"
	NotificationsSlaBreachMsteams NotificationsSlaBreach = "msteams"
	NotificationsSlaBreachSlack   NotificationsSlaBreach = "slack"
)

// Defines values for NotificationsStaleEngagement.
const (
	NotificationsStaleEngagementAlert   NotificationsStaleEngagement = "alert"
	NotificationsStaleEngagementMail    NotificationsStaleEngagement = "mail"
	NotificationsStaleEngagementMsteams NotificationsStaleEngagement = "msteams"
	NotificationsStaleEngagementSlack   NotificationsStaleEngagement = "slack"
)

// Defines values for NotificationsTestAdded.
const (
	NotificationsTestAddedAlert   NotificationsTestAdded = "alert"
	NotificationsTestAddedMail    NotificationsTestAdded = "mail"
	NotificationsTestAddedMsteams NotificationsTestAdded = "msteams"
	NotificationsTestAddedSlack   NotificationsTestAdded = "slack"
)

// Defines values for NotificationsUpcomingEngagement.
const (
	NotificationsUpcomingEngagementAlert   NotificationsUpcomingEngagement = "alert"
	NotificationsUpcomingEngagementMail    NotificationsUpcomingEngagement = "mail"
	NotificationsUpcomingEngagementMsteams NotificationsUpcomingEngagement = "msteams"
	NotificationsUpcomingEngagementSlack   NotificationsUpcomingEngagement = "slack"
)

// Defines values for NotificationsUserMentioned.
const (
	NotificationsUserMentionedAlert   NotificationsUserMentioned = "alert"
	NotificationsUserMentionedMail    NotificationsUserMentioned = "mail"
	NotificationsUserMentionedMsteams NotificationsUserMentioned = "msteams"
	NotificationsUserMentionedSlack   NotificationsUserMentioned = "slack"
)

// Defines values for NotificationsRequestAutoCloseEngagement.
const (
	NotificationsRequestAutoCloseEngagementAlert   NotificationsRequestAutoCloseEngagement = "alert"
	NotificationsRequestAutoCloseEngagementMail    NotificationsRequestAutoCloseEngagement = "mail"
	NotificationsRequestAutoCloseEngagementMsteams NotificationsRequestAutoCloseEngagement = "msteams"
	NotificationsRequestAutoCloseEngagementSlack   NotificationsRequestAutoCloseEngagement = "slack"
)

// Defines values for NotificationsRequestCloseEngagement.
const (
	NotificationsRequestCloseEngagementAlert   NotificationsRequestCloseEngagement = "alert"
	NotificationsRequestCloseEngagementMail    NotificationsRequestCloseEngagement = "mail"
	NotificationsRequestCloseEngagementMsteams NotificationsRequestCloseEngagement = "msteams"
	NotificationsRequestCloseEngagementSlack   NotificationsRequestCloseEngagement = "slack"
)

// Defines values for NotificationsRequestCodeReview.
const (
	NotificationsRequestCodeReviewAlert   NotificationsRequestCodeReview = "alert"
	NotificationsRequestCodeReviewMail    NotificationsRequestCodeReview = "mail"
	NotificationsRequestCodeReviewMsteams NotificationsRequestCodeReview = "msteams"
	NotificationsRequestCodeReviewSlack   NotificationsRequestCodeReview = "slack"
)

// Defines values for NotificationsRequestEngagementAdded.
const (
	NotificationsRequestEngagementAddedAlert   NotificationsRequestEngagementAdded = "alert"
	NotificationsRequestEngagementAddedMail    NotificationsRequestEngagementAdded = "mail"
	NotificationsRequestEngagementAddedMsteams NotificationsRequestEngagementAdded = "msteams"
	NotificationsRequestEngagementAddedSlack   NotificationsRequestEngagementAdded = "slack"
)

// Defines values for NotificationsRequestJiraUpdate.
const (
	NotificationsRequestJiraUpdateAlert   NotificationsRequestJiraUpdate = "alert"
	NotificationsRequestJiraUpdateMail    NotificationsRequestJiraUpdate = "mail"
	NotificationsRequestJiraUpdateMsteams NotificationsRequestJiraUpdate = "msteams"
	NotificationsRequestJiraUpdateSlack   NotificationsRequestJiraUpdate = "slack"
)

// Defines values for NotificationsRequestOther.
const (
	NotificationsRequestOtherAlert   NotificationsRequestOther = "alert"
	NotificationsRequestOtherMail    NotificationsRequestOther = "mail"
	NotificationsRequestOtherMsteams NotificationsRequestOther = "msteams"
	NotificationsRequestOtherSlack   NotificationsRequestOther = "slack"
)

// Defines values for NotificationsRequestProductAdded.
const (
	NotificationsRequestProductAddedAlert   NotificationsRequestProductAdded = "alert"
	NotificationsRequestProductAddedMail    NotificationsRequestProductAdded = "mail"
	NotificationsRequestProductAddedMsteams NotificationsRequestProductAdded = "msteams"
	NotificationsRequestProductAddedSlack   NotificationsRequestProductAdded = "slack"
)

// Defines values for NotificationsRequestProductTypeAdded.
const (
	NotificationsRequestProductTypeAddedAlert   NotificationsRequestProductTypeAdded = "alert"
	NotificationsRequestProductTypeAddedMail    NotificationsRequestProductTypeAdded = "mail"
	NotificationsRequestProductTypeAddedMsteams NotificationsRequestProductTypeAdded = "msteams"
	NotificationsRequestProductTypeAddedSlack   NotificationsRequestProductTypeAdded = "slack"
)

// Defines values for NotificationsRequestReviewRequested.
const (
	NotificationsRequestReviewRequestedAlert   NotificationsRequestReviewRequested = "alert"
	NotificationsRequestReviewRequestedMail    NotificationsRequestReviewRequested = "mail"
	NotificationsRequestReviewRequestedMsteams NotificationsRequestReviewRequested = "msteams"
	NotificationsRequestReviewRequestedSlack   NotificationsRequestReviewRequested = "slack"
)

// Defines values for NotificationsRequestRiskAcceptanceExpiration.
const (
	NotificationsRequestRiskAcceptanceExpirationAlert   NotificationsRequestRiskAcceptanceExpiration = "alert"
	NotificationsRequestRiskAcceptanceExpirationMail    NotificationsRequestRiskAcceptanceExpiration = "mail"
	NotificationsRequestRiskAcceptanceExpirationMsteams NotificationsRequestRiskAcceptanceExpiration = "msteams"
	NotificationsRequestRiskAcceptanceExpirationSlack   NotificationsRequestRiskAcceptanceExpiration = "slack"
)

// Defines values for NotificationsRequestScanAdded.
const (
	NotificationsRequestScanAddedAlert   NotificationsRequestScanAdded = "alert"
	NotificationsRequestScanAddedMail    NotificationsRequestScanAdded = "mail"
	NotificationsRequestScanAddedMsteams NotificationsRequestScanAdded = "msteams"
	NotificationsRequestScanAddedSlack   NotificationsRequestScanAdded = "slack"
)

// Defines values for NotificationsRequestSlaBreach.
const (
	NotificationsRequestSlaBreachAlert   NotificationsRequestSlaBreach = "alert"
	NotificationsRequestSlaBreachMail    NotificationsRequestSlaBreach = "mail"
	NotificationsRequestSlaBreachMsteams NotificationsRequestSlaBreach = "msteams"
	NotificationsRequestSlaBreachSlack   NotificationsRequestSlaBreach = "slack"
)

// Defines values for NotificationsRequestStaleEngagement.
const (
	NotificationsRequestStaleEngagementAlert   NotificationsRequestStaleEngagement = "alert"
	NotificationsRequestStaleEngagementMail    NotificationsRequestStaleEngagement = "mail"
	NotificationsRequestStaleEngagementMsteams NotificationsRequestStaleEngagement = "msteams"
	NotificationsRequestStaleEngagementSlack   NotificationsRequestStaleEngagement = "slack"
)

// Defines values for NotificationsRequestTestAdded.
const (
	NotificationsRequestTestAddedAlert   NotificationsRequestTestAdded = "alert"
	NotificationsRequestTestAddedMail    NotificationsRequestTestAdded = "mail"
	NotificationsRequestTestAddedMsteams NotificationsRequestTestAdded = "msteams"
	NotificationsRequestTestAddedSlack   NotificationsRequestTestAdded = "slack"
)

// Defines values for NotificationsRequestUpcomingEngagement.
const (
	NotificationsRequestUpcomingEngagementAlert   NotificationsRequestUpcomingEngagement = "alert"
	NotificationsRequestUpcomingEngagementMail    NotificationsRequestUpcomingEngagement = "mail"
	NotificationsRequestUpcomingEngagementMsteams NotificationsRequestUpcomingEngagement = "msteams"
	NotificationsRequestUpcomingEngagementSlack   NotificationsRequestUpcomingEngagement = "slack"
)

// Defines values for NotificationsRequestUserMentioned.
const (
	NotificationsRequestUserMentionedAlert   NotificationsRequestUserMentioned = "alert"
	NotificationsRequestUserMentionedMail    NotificationsRequestUserMentioned = "mail"
	NotificationsRequestUserMentionedMsteams NotificationsRequestUserMentioned = "msteams"
	NotificationsRequestUserMentionedSlack   NotificationsRequestUserMentioned = "slack"
)

// Defines values for PatchedCredentialRequestAuthentication.
const (
	Form PatchedCredentialRequestAuthentication = "Form"
	SSO  PatchedCredentialRequestAuthentication = "SSO"
)

// Defines values for PatchedCredentialRequestHttpAuthentication.
const (
	PatchedCredentialRequestHttpAuthenticationBasic PatchedCredentialRequestHttpAuthentication = "Basic"
	PatchedCredentialRequestHttpAuthenticationEmpty PatchedCredentialRequestHttpAuthentication = ""
	PatchedCredentialRequestHttpAuthenticationNTLM  PatchedCredentialRequestHttpAuthentication = "NTLM"
	PatchedCredentialRequestHttpAuthenticationNil   PatchedCredentialRequestHttpAuthentication = "<nil>"
)

// Defines values for PatchedDojoGroupRequestSocialProvider.
const (
	PatchedDojoGroupRequestSocialProviderAzureAD PatchedDojoGroupRequestSocialProvider = "AzureAD"
	PatchedDojoGroupRequestSocialProviderEmpty   PatchedDojoGroupRequestSocialProvider = ""
	PatchedDojoGroupRequestSocialProviderNil     PatchedDojoGroupRequestSocialProvider = "<nil>"
)

// Defines values for PatchedEngagementRequestEngagementType.
const (
	PatchedEngagementRequestEngagementTypeCICD        PatchedEngagementRequestEngagementType = "CI/CD"
	PatchedEngagementRequestEngagementTypeInteractive PatchedEngagementRequestEngagementType = "Interactive"
	PatchedEngagementRequestEngagementTypeNil         PatchedEngagementRequestEngagementType = "<nil>"
)

// Defines values for PatchedEngagementRequestStatus.
const (
	PatchedEngagementRequestStatusBlocked            PatchedEngagementRequestStatus = "Blocked"
	PatchedEngagementRequestStatusCancelled          PatchedEngagementRequestStatus = "Cancelled"
	PatchedEngagementRequestStatusCompleted          PatchedEngagementRequestStatus = "Completed"
	PatchedEngagementRequestStatusInProgress         PatchedEngagementRequestStatus = "In Progress"
	PatchedEngagementRequestStatusNil                PatchedEngagementRequestStatus = "<nil>"
	PatchedEngagementRequestStatusNotStarted         PatchedEngagementRequestStatus = "Not Started"
	PatchedEngagementRequestStatusOnHold             PatchedEngagementRequestStatus = "On Hold"
	PatchedEngagementRequestStatusWaitingForResource PatchedEngagementRequestStatus = "Waiting for Resource"
)

// Defines values for PatchedJIRAInstanceRequestDefaultIssueType.
const (
	Bug      PatchedJIRAInstanceRequestDefaultIssueType = "Bug"
	Epic     PatchedJIRAInstanceRequestDefaultIssueType = "Epic"
	Security PatchedJIRAInstanceRequestDefaultIssueType = "Security"
	Spike    PatchedJIRAInstanceRequestDefaultIssueType = "Spike"
	Story    PatchedJIRAInstanceRequestDefaultIssueType = "Story"
	Task     PatchedJIRAInstanceRequestDefaultIssueType = "Task"
)

// Defines values for PatchedNotificationsRequestAutoCloseEngagement.
const (
	PatchedNotificationsRequestAutoCloseEngagementAlert   PatchedNotificationsRequestAutoCloseEngagement = "alert"
	PatchedNotificationsRequestAutoCloseEngagementMail    PatchedNotificationsRequestAutoCloseEngagement = "mail"
	PatchedNotificationsRequestAutoCloseEngagementMsteams PatchedNotificationsRequestAutoCloseEngagement = "msteams"
	PatchedNotificationsRequestAutoCloseEngagementSlack   PatchedNotificationsRequestAutoCloseEngagement = "slack"
)

// Defines values for PatchedNotificationsRequestCloseEngagement.
const (
	PatchedNotificationsRequestCloseEngagementAlert   PatchedNotificationsRequestCloseEngagement = "alert"
	PatchedNotificationsRequestCloseEngagementMail    PatchedNotificationsRequestCloseEngagement = "mail"
	PatchedNotificationsRequestCloseEngagementMsteams PatchedNotificationsRequestCloseEngagement = "msteams"
	PatchedNotificationsRequestCloseEngagementSlack   PatchedNotificationsRequestCloseEngagement = "slack"
)

// Defines values for PatchedNotificationsRequestCodeReview.
const (
	PatchedNotificationsRequestCodeReviewAlert   PatchedNotificationsRequestCodeReview = "alert"
	PatchedNotificationsRequestCodeReviewMail    PatchedNotificationsRequestCodeReview = "mail"
	PatchedNotificationsRequestCodeReviewMsteams PatchedNotificationsRequestCodeReview = "msteams"
	PatchedNotificationsRequestCodeReviewSlack   PatchedNotificationsRequestCodeReview = "slack"
)

// Defines values for PatchedNotificationsRequestEngagementAdded.
const (
	PatchedNotificationsRequestEngagementAddedAlert   PatchedNotificationsRequestEngagementAdded = "alert"
	PatchedNotificationsRequestEngagementAddedMail    PatchedNotificationsRequestEngagementAdded = "mail"
	PatchedNotificationsRequestEngagementAddedMsteams PatchedNotificationsRequestEngagementAdded = "msteams"
	PatchedNotificationsRequestEngagementAddedSlack   PatchedNotificationsRequestEngagementAdded = "slack"
)

// Defines values for PatchedNotificationsRequestJiraUpdate.
const (
	PatchedNotificationsRequestJiraUpdateAlert   PatchedNotificationsRequestJiraUpdate = "alert"
	PatchedNotificationsRequestJiraUpdateMail    PatchedNotificationsRequestJiraUpdate = "mail"
	PatchedNotificationsRequestJiraUpdateMsteams PatchedNotificationsRequestJiraUpdate = "msteams"
	PatchedNotificationsRequestJiraUpdateSlack   PatchedNotificationsRequestJiraUpdate = "slack"
)

// Defines values for PatchedNotificationsRequestOther.
const (
	PatchedNotificationsRequestOtherAlert   PatchedNotificationsRequestOther = "alert"
	PatchedNotificationsRequestOtherMail    PatchedNotificationsRequestOther = "mail"
	PatchedNotificationsRequestOtherMsteams PatchedNotificationsRequestOther = "msteams"
	PatchedNotificationsRequestOtherSlack   PatchedNotificationsRequestOther = "slack"
)

// Defines values for PatchedNotificationsRequestProductAdded.
const (
	PatchedNotificationsRequestProductAddedAlert   PatchedNotificationsRequestProductAdded = "alert"
	PatchedNotificationsRequestProductAddedMail    PatchedNotificationsRequestProductAdded = "mail"
	PatchedNotificationsRequestProductAddedMsteams PatchedNotificationsRequestProductAdded = "msteams"
	PatchedNotificationsRequestProductAddedSlack   PatchedNotificationsRequestProductAdded = "slack"
)

// Defines values for PatchedNotificationsRequestProductTypeAdded.
const (
	PatchedNotificationsRequestProductTypeAddedAlert   PatchedNotificationsRequestProductTypeAdded = "alert"
	PatchedNotificationsRequestProductTypeAddedMail    PatchedNotificationsRequestProductTypeAdded = "mail"
	PatchedNotificationsRequestProductTypeAddedMsteams PatchedNotificationsRequestProductTypeAdded = "msteams"
	PatchedNotificationsRequestProductTypeAddedSlack   PatchedNotificationsRequestProductTypeAdded = "slack"
)

// Defines values for PatchedNotificationsRequestReviewRequested.
const (
	PatchedNotificationsRequestReviewRequestedAlert   PatchedNotificationsRequestReviewRequested = "alert"
	PatchedNotificationsRequestReviewRequestedMail    PatchedNotificationsRequestReviewRequested = "mail"
	PatchedNotificationsRequestReviewRequestedMsteams PatchedNotificationsRequestReviewRequested = "msteams"
	PatchedNotificationsRequestReviewRequestedSlack   PatchedNotificationsRequestReviewRequested = "slack"
)

// Defines values for PatchedNotificationsRequestRiskAcceptanceExpiration.
const (
	PatchedNotificationsRequestRiskAcceptanceExpirationAlert   PatchedNotificationsRequestRiskAcceptanceExpiration = "alert"
	PatchedNotificationsRequestRiskAcceptanceExpirationMail    PatchedNotificationsRequestRiskAcceptanceExpiration = "mail"
	PatchedNotificationsRequestRiskAcceptanceExpirationMsteams PatchedNotificationsRequestRiskAcceptanceExpiration = "msteams"
	PatchedNotificationsRequestRiskAcceptanceExpirationSlack   PatchedNotificationsRequestRiskAcceptanceExpiration = "slack"
)

// Defines values for PatchedNotificationsRequestScanAdded.
const (
	PatchedNotificationsRequestScanAddedAlert   PatchedNotificationsRequestScanAdded = "alert"
	PatchedNotificationsRequestScanAddedMail    PatchedNotificationsRequestScanAdded = "mail"
	PatchedNotificationsRequestScanAddedMsteams PatchedNotificationsRequestScanAdded = "msteams"
	PatchedNotificationsRequestScanAddedSlack   PatchedNotificationsRequestScanAdded = "slack"
)

// Defines values for PatchedNotificationsRequestSlaBreach.
const (
	PatchedNotificationsRequestSlaBreachAlert   PatchedNotificationsRequestSlaBreach = "alert"
	PatchedNotificationsRequestSlaBreachMail    PatchedNotificationsRequestSlaBreach = "mail"
	PatchedNotificationsRequestSlaBreachMsteams PatchedNotificationsRequestSlaBreach = "msteams"
	PatchedNotificationsRequestSlaBreachSlack   PatchedNotificationsRequestSlaBreach = "slack"
)

// Defines values for PatchedNotificationsRequestStaleEngagement.
const (
	PatchedNotificationsRequestStaleEngagementAlert   PatchedNotificationsRequestStaleEngagement = "alert"
	PatchedNotificationsRequestStaleEngagementMail    PatchedNotificationsRequestStaleEngagement = "mail"
	PatchedNotificationsRequestStaleEngagementMsteams PatchedNotificationsRequestStaleEngagement = "msteams"
	PatchedNotificationsRequestStaleEngagementSlack   PatchedNotificationsRequestStaleEngagement = "slack"
)

// Defines values for PatchedNotificationsRequestTestAdded.
const (
	PatchedNotificationsRequestTestAddedAlert   PatchedNotificationsRequestTestAdded = "alert"
	PatchedNotificationsRequestTestAddedMail    PatchedNotificationsRequestTestAdded = "mail"
	PatchedNotificationsRequestTestAddedMsteams PatchedNotificationsRequestTestAdded = "msteams"
	PatchedNotificationsRequestTestAddedSlack   PatchedNotificationsRequestTestAdded = "slack"
)

// Defines values for PatchedNotificationsRequestUpcomingEngagement.
const (
	PatchedNotificationsRequestUpcomingEngagementAlert   PatchedNotificationsRequestUpcomingEngagement = "alert"
	PatchedNotificationsRequestUpcomingEngagementMail    PatchedNotificationsRequestUpcomingEngagement = "mail"
	PatchedNotificationsRequestUpcomingEngagementMsteams PatchedNotificationsRequestUpcomingEngagement = "msteams"
	PatchedNotificationsRequestUpcomingEngagementSlack   PatchedNotificationsRequestUpcomingEngagement = "slack"
)

// Defines values for PatchedNotificationsRequestUserMentioned.
const (
	PatchedNotificationsRequestUserMentionedAlert   PatchedNotificationsRequestUserMentioned = "alert"
	PatchedNotificationsRequestUserMentionedMail    PatchedNotificationsRequestUserMentioned = "mail"
	PatchedNotificationsRequestUserMentionedMsteams PatchedNotificationsRequestUserMentioned = "msteams"
	PatchedNotificationsRequestUserMentionedSlack   PatchedNotificationsRequestUserMentioned = "slack"
)

// Defines values for PatchedProductRequestBusinessCriticality.
const (
	PatchedProductRequestBusinessCriticalityEmpty    PatchedProductRequestBusinessCriticality = ""
	PatchedProductRequestBusinessCriticalityHigh     PatchedProductRequestBusinessCriticality = "high"
	PatchedProductRequestBusinessCriticalityLow      PatchedProductRequestBusinessCriticality = "low"
	PatchedProductRequestBusinessCriticalityMedium   PatchedProductRequestBusinessCriticality = "medium"
	PatchedProductRequestBusinessCriticalityNil      PatchedProductRequestBusinessCriticality = "<nil>"
	PatchedProductRequestBusinessCriticalityNone     PatchedProductRequestBusinessCriticality = "none"
	PatchedProductRequestBusinessCriticalityVeryHigh PatchedProductRequestBusinessCriticality = "very high"
	PatchedProductRequestBusinessCriticalityVeryLow  PatchedProductRequestBusinessCriticality = "very low"
)

// Defines values for PatchedProductRequestLifecycle.
const (
	PatchedProductRequestLifecycleConstruction PatchedProductRequestLifecycle = "construction"
	PatchedProductRequestLifecycleEmpty        PatchedProductRequestLifecycle = ""
	PatchedProductRequestLifecycleNil          PatchedProductRequestLifecycle = "<nil>"
	PatchedProductRequestLifecycleProduction   PatchedProductRequestLifecycle = "production"
	PatchedProductRequestLifecycleRetirement   PatchedProductRequestLifecycle = "retirement"
)

// Defines values for PatchedProductRequestOrigin.
const (
	PatchedProductRequestOriginContractor        PatchedProductRequestOrigin = "contractor"
	PatchedProductRequestOriginEmpty             PatchedProductRequestOrigin = ""
	PatchedProductRequestOriginInternal          PatchedProductRequestOrigin = "internal"
	PatchedProductRequestOriginNil               PatchedProductRequestOrigin = "<nil>"
	PatchedProductRequestOriginOpenSource        PatchedProductRequestOrigin = "open source"
	PatchedProductRequestOriginOutsourced        PatchedProductRequestOrigin = "outsourced"
	PatchedProductRequestOriginPurchased         PatchedProductRequestOrigin = "purchased"
	PatchedProductRequestOriginThirdPartyLibrary PatchedProductRequestOrigin = "third party library"
)

// Defines values for PatchedProductRequestPlatform.
const (
	PatchedProductRequestPlatformDesktop    PatchedProductRequestPlatform = "desktop"
	PatchedProductRequestPlatformEmpty      PatchedProductRequestPlatform = ""
	PatchedProductRequestPlatformIot        PatchedProductRequestPlatform = "iot"
	PatchedProductRequestPlatformMobile     PatchedProductRequestPlatform = "mobile"
	PatchedProductRequestPlatformNil        PatchedProductRequestPlatform = "<nil>"
	PatchedProductRequestPlatformWeb        PatchedProductRequestPlatform = "web"
	PatchedProductRequestPlatformWebService PatchedProductRequestPlatform = "web service"
)

// Defines values for PatchedRegulationRequestCategory.
const (
	PatchedRegulationRequestCategoryCorporate PatchedRegulationRequestCategory = "corporate"
	PatchedRegulationRequestCategoryEducation PatchedRegulationRequestCategory = "education"
	PatchedRegulationRequestCategoryFinance   PatchedRegulationRequestCategory = "finance"
	PatchedRegulationRequestCategoryMedical   PatchedRegulationRequestCategory = "medical"
	PatchedRegulationRequestCategoryOther     PatchedRegulationRequestCategory = "other"
	PatchedRegulationRequestCategoryPrivacy   PatchedRegulationRequestCategory = "privacy"
)

// Defines values for PatchedSystemSettingsRequestJiraMinimumSeverity.
const (
	PatchedSystemSettingsRequestJiraMinimumSeverityCritical PatchedSystemSettingsRequestJiraMinimumSeverity = "Critical"
	PatchedSystemSettingsRequestJiraMinimumSeverityEmpty    PatchedSystemSettingsRequestJiraMinimumSeverity = ""
	PatchedSystemSettingsRequestJiraMinimumSeverityHigh     PatchedSystemSettingsRequestJiraMinimumSeverity = "High"
	PatchedSystemSettingsRequestJiraMinimumSeverityInfo     PatchedSystemSettingsRequestJiraMinimumSeverity = "Info"
	PatchedSystemSettingsRequestJiraMinimumSeverityLow      PatchedSystemSettingsRequestJiraMinimumSeverity = "Low"
	PatchedSystemSettingsRequestJiraMinimumSeverityMedium   PatchedSystemSettingsRequestJiraMinimumSeverity = "Medium"
	PatchedSystemSettingsRequestJiraMinimumSeverityNil      PatchedSystemSettingsRequestJiraMinimumSeverity = "<nil>"
)

// Defines values for PatchedSystemSettingsRequestTimeZone.
const (
	PatchedSystemSettingsRequestTimeZoneAfricaAbidjan                  PatchedSystemSettingsRequestTimeZone = "Africa/Abidjan"
	PatchedSystemSettingsRequestTimeZoneAfricaAccra                    PatchedSystemSettingsRequestTimeZone = "Africa/Accra"
	PatchedSystemSettingsRequestTimeZoneAfricaAddisAbaba               PatchedSystemSettingsRequestTimeZone = "Africa/Addis_Ababa"
	PatchedSystemSettingsRequestTimeZoneAfricaAlgiers                  PatchedSystemSettingsRequestTimeZone = "Africa/Algiers"
	PatchedSystemSettingsRequestTimeZoneAfricaAsmara                   PatchedSystemSettingsRequestTimeZone = "Africa/Asmara"
	PatchedSystemSettingsRequestTimeZoneAfricaAsmera                   PatchedSystemSettingsRequestTimeZone = "Africa/Asmera"
	PatchedSystemSettingsRequestTimeZoneAfricaBamako                   PatchedSystemSettingsRequestTimeZone = "Africa/Bamako"
	PatchedSystemSettingsRequestTimeZoneAfricaBangui                   PatchedSystemSettingsRequestTimeZone = "Africa/Bangui"
	PatchedSystemSettingsRequestTimeZoneAfricaBanjul                   PatchedSystemSettingsRequestTimeZone = "Africa/Banjul"
	PatchedSystemSettingsRequestTimeZoneAfricaBissau                   PatchedSystemSettingsRequestTimeZone = "Africa/Bissau"
	PatchedSystemSettingsRequestTimeZoneAfricaBlantyre                 PatchedSystemSettingsRequestTimeZone = "Africa/Blantyre"
	PatchedSystemSettingsRequestTimeZoneAfricaBrazzaville              PatchedSystemSettingsRequestTimeZone = "Africa/Brazzaville"
	PatchedSystemSettingsRequestTimeZoneAfricaBujumbura                PatchedSystemSettingsRequestTimeZone = "Africa/Bujumbura"
	PatchedSystemSettingsRequestTimeZoneAfricaCairo                    PatchedSystemSettingsRequestTimeZone = "Africa/Cairo"
	PatchedSystemSettingsRequestTimeZoneAfricaCasablanca               PatchedSystemSettingsRequestTimeZone = "Africa/Casablanca"
	PatchedSystemSettingsRequestTimeZoneAfricaCeuta                    PatchedSystemSettingsRequestTimeZone = "Africa/Ceuta"
	PatchedSystemSettingsRequestTimeZoneAfricaConakry                  PatchedSystemSettingsRequestTimeZone = "Africa/Conakry"
	PatchedSystemSettingsRequestTimeZoneAfricaDakar                    PatchedSystemSettingsRequestTimeZone = "Africa/Dakar"
	PatchedSystemSettingsRequestTimeZoneAfricaDarEsSalaam              PatchedSystemSettingsRequestTimeZone = "Africa/Dar_es_Salaam"
	PatchedSystemSettingsRequestTimeZoneAfricaDjibouti                 PatchedSystemSettingsRequestTimeZone = "Africa/Djibouti"
	PatchedSystemSettingsRequestTimeZoneAfricaDouala                   PatchedSystemSettingsRequestTimeZone = "Africa/Douala"
	PatchedSystemSettingsRequestTimeZoneAfricaElAaiun                  PatchedSystemSettingsRequestTimeZone = "Africa/El_Aaiun"
	PatchedSystemSettingsRequestTimeZoneAfricaFreetown                 PatchedSystemSettingsRequestTimeZone = "Africa/Freetown"
	PatchedSystemSettingsRequestTimeZoneAfricaGaborone                 PatchedSystemSettingsRequestTimeZone = "Africa/Gaborone"
	PatchedSystemSettingsRequestTimeZoneAfricaHarare                   PatchedSystemSettingsRequestTimeZone = "Africa/Harare"
	PatchedSystemSettingsRequestTimeZoneAfricaJohannesburg             PatchedSystemSettingsRequestTimeZone = "Africa/Johannesburg"
	PatchedSystemSettingsRequestTimeZoneAfricaJuba                     PatchedSystemSettingsRequestTimeZone = "Africa/Juba"
	PatchedSystemSettingsRequestTimeZoneAfricaKampala                  PatchedSystemSettingsRequestTimeZone = "Africa/Kampala"
	PatchedSystemSettingsRequestTimeZoneAfricaKhartoum                 PatchedSystemSettingsRequestTimeZone = "Africa/Khartoum"
	PatchedSystemSettingsRequestTimeZoneAfricaKigali                   PatchedSystemSettingsRequestTimeZone = "Africa/Kigali"
	PatchedSystemSettingsRequestTimeZoneAfricaKinshasa                 PatchedSystemSettingsRequestTimeZone = "Africa/Kinshasa"
	PatchedSystemSettingsRequestTimeZoneAfricaLagos                    PatchedSystemSettingsRequestTimeZone = "Africa/Lagos"
	PatchedSystemSettingsRequestTimeZoneAfricaLibreville               PatchedSystemSettingsRequestTimeZone = "Africa/Libreville"
	PatchedSystemSettingsRequestTimeZoneAfricaLome                     PatchedSystemSettingsRequestTimeZone = "Africa/Lome"
	PatchedSystemSettingsRequestTimeZoneAfricaLuanda                   PatchedSystemSettingsRequestTimeZone = "Africa/Luanda"
	PatchedSystemSettingsRequestTimeZoneAfricaLubumbashi               PatchedSystemSettingsRequestTimeZone = "Africa/Lubumbashi"
	PatchedSystemSettingsRequestTimeZoneAfricaLusaka                   PatchedSystemSettingsRequestTimeZone = "Africa/Lusaka"
	PatchedSystemSettingsRequestTimeZoneAfricaMalabo                   PatchedSystemSettingsRequestTimeZone = "Africa/Malabo"
	PatchedSystemSettingsRequestTimeZoneAfricaMaputo                   PatchedSystemSettingsRequestTimeZone = "Africa/Maputo"
	PatchedSystemSettingsRequestTimeZoneAfricaMaseru                   PatchedSystemSettingsRequestTimeZone = "Africa/Maseru"
	PatchedSystemSettingsRequestTimeZoneAfricaMbabane                  PatchedSystemSettingsRequestTimeZone = "Africa/Mbabane"
	PatchedSystemSettingsRequestTimeZoneAfricaMogadishu                PatchedSystemSettingsRequestTimeZone = "Africa/Mogadishu"
	PatchedSystemSettingsRequestTimeZoneAfricaMonrovia                 PatchedSystemSettingsRequestTimeZone = "Africa/Monrovia"
	PatchedSystemSettingsRequestTimeZoneAfricaNairobi                  PatchedSystemSettingsRequestTimeZone = "Africa/Nairobi"
	PatchedSystemSettingsRequestTimeZoneAfricaNdjamena                 PatchedSystemSettingsRequestTimeZone = "Africa/Ndjamena"
	PatchedSystemSettingsRequestTimeZoneAfricaNiamey                   PatchedSystemSettingsRequestTimeZone = "Africa/Niamey"
	PatchedSystemSettingsRequestTimeZoneAfricaNouakchott               PatchedSystemSettingsRequestTimeZone = "Africa/Nouakchott"
	PatchedSystemSettingsRequestTimeZoneAfricaOuagadougou              PatchedSystemSettingsRequestTimeZone = "Africa/Ouagadougou"
	PatchedSystemSettingsRequestTimeZoneAfricaPortoNovo                PatchedSystemSettingsRequestTimeZone = "Africa/Porto-Novo"
	PatchedSystemSettingsRequestTimeZoneAfricaSaoTome                  PatchedSystemSettingsRequestTimeZone = "Africa/Sao_Tome"
	PatchedSystemSettingsRequestTimeZoneAfricaTimbuktu                 PatchedSystemSettingsRequestTimeZone = "Africa/Timbuktu"
	PatchedSystemSettingsRequestTimeZoneAfricaTripoli                  PatchedSystemSettingsRequestTimeZone = "Africa/Tripoli"
	PatchedSystemSettingsRequestTimeZoneAfricaTunis                    PatchedSystemSettingsRequestTimeZone = "Africa/Tunis"
	PatchedSystemSettingsRequestTimeZoneAfricaWindhoek                 PatchedSystemSettingsRequestTimeZone = "Africa/Windhoek"
	PatchedSystemSettingsRequestTimeZoneAmericaAdak                    PatchedSystemSettingsRequestTimeZone = "America/Adak"
	PatchedSystemSettingsRequestTimeZoneAmericaAnchorage               PatchedSystemSettingsRequestTimeZone = "America/Anchorage"
	PatchedSystemSettingsRequestTimeZoneAmericaAnguilla                PatchedSystemSettingsRequestTimeZone = "America/Anguilla"
	PatchedSystemSettingsRequestTimeZoneAmericaAntigua                 PatchedSystemSettingsRequestTimeZone = "America/Antigua"
	PatchedSystemSettingsRequestTimeZoneAmericaAraguaina               PatchedSystemSettingsRequestTimeZone = "America/Araguaina"
	PatchedSystemSettingsRequestTimeZoneAmericaArgentinaBuenosAires    PatchedSystemSettingsRequestTimeZone = "America/Argentina/Buenos_Aires"
	PatchedSystemSettingsRequestTimeZoneAmericaArgentinaCatamarca      PatchedSystemSettingsRequestTimeZone = "America/Argentina/Catamarca"
	PatchedSystemSettingsRequestTimeZoneAmericaArgentinaComodRivadavia PatchedSystemSettingsRequestTimeZone = "America/Argentina/ComodRivadavia"
	PatchedSystemSettingsRequestTimeZoneAmericaArgentinaCordoba        PatchedSystemSettingsRequestTimeZone = "America/Argentina/Cordoba"
	PatchedSystemSettingsRequestTimeZoneAmericaArgentinaJujuy          PatchedSystemSettingsRequestTimeZone = "America/Argentina/Jujuy"
	PatchedSystemSettingsRequestTimeZoneAmericaArgentinaLaRioja        PatchedSystemSettingsRequestTimeZone = "America/Argentina/La_Rioja"
	PatchedSystemSettingsRequestTimeZoneAmericaArgentinaMendoza        PatchedSystemSettingsRequestTimeZone = "America/Argentina/Mendoza"
	PatchedSystemSettingsRequestTimeZoneAmericaArgentinaRioGallegos    PatchedSystemSettingsRequestTimeZone = "America/Argentina/Rio_Gallegos"
	PatchedSystemSettingsRequestTimeZoneAmericaArgentinaSalta          PatchedSystemSettingsRequestTimeZone = "America/Argentina/Salta"
	PatchedSystemSettingsRequestTimeZoneAmericaArgentinaSanJuan        PatchedSystemSettingsRequestTimeZone = "America/Argentina/San_Juan"
	PatchedSystemSettingsRequestTimeZoneAmericaArgentinaSanLuis        PatchedSystemSettingsRequestTimeZone = "America/Argentina/San_Luis"
	PatchedSystemSettingsRequestTimeZoneAmericaArgentinaTucuman        PatchedSystemSettingsRequestTimeZone = "America/Argentina/Tucuman"
	PatchedSystemSettingsRequestTimeZoneAmericaArgentinaUshuaia        PatchedSystemSettingsRequestTimeZone = "America/Argentina/Ushuaia"
	PatchedSystemSettingsRequestTimeZoneAmericaAruba                   PatchedSystemSettingsRequestTimeZone = "America/Aruba"
	PatchedSystemSettingsRequestTimeZoneAmericaAsuncion                PatchedSystemSettingsRequestTimeZone = "America/Asuncion"
	PatchedSystemSettingsRequestTimeZoneAmericaAtikokan                PatchedSystemSettingsRequestTimeZone = "America/Atikokan"
	PatchedSystemSettingsRequestTimeZoneAmericaAtka                    PatchedSystemSettingsRequestTimeZone = "America/Atka"
	PatchedSystemSettingsRequestTimeZoneAmericaBahia                   PatchedSystemSettingsRequestTimeZone = "America/Bahia"
	PatchedSystemSettingsRequestTimeZoneAmericaBahiaBanderas           PatchedSystemSettingsRequestTimeZone = "America/Bahia_Banderas"
	PatchedSystemSettingsRequestTimeZoneAmericaBarbados                PatchedSystemSettingsRequestTimeZone = "America/Barbados"
	PatchedSystemSettingsRequestTimeZoneAmericaBelem                   PatchedSystemSettingsRequestTimeZone = "America/Belem"
	PatchedSystemSettingsRequestTimeZoneAmericaBelize                  PatchedSystemSettingsRequestTimeZone = "America/Belize"
	PatchedSystemSettingsRequestTimeZoneAmericaBlancSablon             PatchedSystemSettingsRequestTimeZone = "America/Blanc-Sablon"
	PatchedSystemSettingsRequestTimeZoneAmericaBoaVista                PatchedSystemSettingsRequestTimeZone = "America/Boa_Vista"
	PatchedSystemSettingsRequestTimeZoneAmericaBogota                  PatchedSystemSettingsRequestTimeZone = "America/Bogota"
	PatchedSystemSettingsRequestTimeZoneAmericaBoise                   PatchedSystemSettingsRequestTimeZone = "America/Boise"
	PatchedSystemSettingsRequestTimeZoneAmericaBuenosAires             PatchedSystemSettingsRequestTimeZone = "America/Buenos_Aires"
	PatchedSystemSettingsRequestTimeZoneAmericaCambridgeBay            PatchedSystemSettingsRequestTimeZone = "America/Cambridge_Bay"
	PatchedSystemSettingsRequestTimeZoneAmericaCampoGrande             PatchedSystemSettingsRequestTimeZone = "America/Campo_Grande"
	PatchedSystemSettingsRequestTimeZoneAmericaCancun                  PatchedSystemSettingsRequestTimeZone = "America/Cancun"
	PatchedSystemSettingsRequestTimeZoneAmericaCaracas                 PatchedSystemSettingsRequestTimeZone = "America/Caracas"
	PatchedSystemSettingsRequestTimeZoneAmericaCatamarca               PatchedSystemSettingsRequestTimeZone = "America/Catamarca"
	PatchedSystemSettingsRequestTimeZoneAmericaCayenne                 PatchedSystemSettingsRequestTimeZone = "America/Cayenne"
	PatchedSystemSettingsRequestTimeZoneAmericaCayman                  PatchedSystemSettingsRequestTimeZone = "America/Cayman"
	PatchedSystemSettingsRequestTimeZoneAmericaChicago                 PatchedSystemSettingsRequestTimeZone = "America/Chicago"
	PatchedSystemSettingsRequestTimeZoneAmericaChihuahua               PatchedSystemSettingsRequestTimeZone = "America/Chihuahua"
	PatchedSystemSettingsRequestTimeZoneAmericaCiudadJuarez            PatchedSystemSettingsRequestTimeZone = "America/Ciudad_Juarez"
	PatchedSystemSettingsRequestTimeZoneAmericaCoralHarbour            PatchedSystemSettingsRequestTimeZone = "America/Coral_Harbour"
	PatchedSystemSettingsRequestTimeZoneAmericaCordoba                 PatchedSystemSettingsRequestTimeZone = "America/Cordoba"
	PatchedSystemSettingsRequestTimeZoneAmericaCostaRica               PatchedSystemSettingsRequestTimeZone = "America/Costa_Rica"
	PatchedSystemSettingsRequestTimeZoneAmericaCreston                 PatchedSystemSettingsRequestTimeZone = "America/Creston"
	PatchedSystemSettingsRequestTimeZoneAmericaCuiaba                  PatchedSystemSettingsRequestTimeZone = "America/Cuiaba"
	PatchedSystemSettingsRequestTimeZoneAmericaCuracao                 PatchedSystemSettingsRequestTimeZone = "America/Curacao"
	PatchedSystemSettingsRequestTimeZoneAmericaDanmarkshavn            PatchedSystemSettingsRequestTimeZone = "America/Danmarkshavn"
	PatchedSystemSettingsRequestTimeZoneAmericaDawson                  PatchedSystemSettingsRequestTimeZone = "America/Dawson"
	PatchedSystemSettingsRequestTimeZoneAmericaDawsonCreek             PatchedSystemSettingsRequestTimeZone = "America/Dawson_Creek"
	PatchedSystemSettingsRequestTimeZoneAmericaDenver                  PatchedSystemSettingsRequestTimeZone = "America/Denver"
	PatchedSystemSettingsRequestTimeZoneAmericaDetroit                 PatchedSystemSettingsRequestTimeZone = "America/Detroit"
	PatchedSystemSettingsRequestTimeZoneAmericaDominica                PatchedSystemSettingsRequestTimeZone = "America/Dominica"
	PatchedSystemSettingsRequestTimeZoneAmericaEdmonton                PatchedSystemSettingsRequestTimeZone = "America/Edmonton"
	PatchedSystemSettingsRequestTimeZoneAmericaEirunepe                PatchedSystemSettingsRequestTimeZone = "America/Eirunepe"
	PatchedSystemSettingsRequestTimeZoneAmericaElSalvador              PatchedSystemSettingsRequestTimeZone = "America/El_Salvador"
	PatchedSystemSettingsRequestTimeZoneAmericaEnsenada                PatchedSystemSettingsRequestTimeZone = "America/Ensenada"
	PatchedSystemSettingsRequestTimeZoneAmericaFortNelson              PatchedSystemSettingsRequestTimeZone = "America/Fort_Nelson"
	PatchedSystemSettingsRequestTimeZoneAmericaFortWayne               PatchedSystemSettingsRequestTimeZone = "America/Fort_Wayne"
	PatchedSystemSettingsRequestTimeZoneAmericaFortaleza               PatchedSystemSettingsRequestTimeZone = "America/Fortaleza"
	PatchedSystemSettingsRequestTimeZoneAmericaGlaceBay                PatchedSystemSettingsRequestTimeZone = "America/Glace_Bay"
	PatchedSystemSettingsRequestTimeZoneAmericaGodthab                 PatchedSystemSettingsRequestTimeZone = "America/Godthab"
	PatchedSystemSettingsRequestTimeZoneAmericaGooseBay                PatchedSystemSettingsRequestTimeZone = "America/Goose_Bay"
	PatchedSystemSettingsRequestTimeZoneAmericaGrandTurk               PatchedSystemSettingsRequestTimeZone = "America/Grand_Turk"
	PatchedSystemSettingsRequestTimeZoneAmericaGrenada                 PatchedSystemSettingsRequestTimeZone = "America/Grenada"
	PatchedSystemSettingsRequestTimeZoneAmericaGuadeloupe              PatchedSystemSettingsRequestTimeZone = "America/Guadeloupe"
	PatchedSystemSettingsRequestTimeZoneAmericaGuatemala               PatchedSystemSettingsRequestTimeZone = "America/Guatemala"
	PatchedSystemSettingsRequestTimeZoneAmericaGuayaquil               PatchedSystemSettingsRequestTimeZone = "America/Guayaquil"
	PatchedSystemSettingsRequestTimeZoneAmericaGuyana                  PatchedSystemSettingsRequestTimeZone = "America/Guyana"
	PatchedSystemSettingsRequestTimeZoneAmericaHalifax                 PatchedSystemSettingsRequestTimeZone = "America/Halifax"
	PatchedSystemSettingsRequestTimeZoneAmericaHavana                  PatchedSystemSettingsRequestTimeZone = "America/Havana"
	PatchedSystemSettingsRequestTimeZoneAmericaHermosillo              PatchedSystemSettingsRequestTimeZone = "America/Hermosillo"
	PatchedSystemSettingsRequestTimeZoneAmericaIndianaIndianapolis     PatchedSystemSettingsRequestTimeZone = "America/Indiana/Indianapolis"
	PatchedSystemSettingsRequestTimeZoneAmericaIndianaKnox             PatchedSystemSettingsRequestTimeZone = "America/Indiana/Knox"
	PatchedSystemSettingsRequestTimeZoneAmericaIndianaMarengo          PatchedSystemSettingsRequestTimeZone = "America/Indiana/Marengo"
	PatchedSystemSettingsRequestTimeZoneAmericaIndianaPetersburg       PatchedSystemSettingsRequestTimeZone = "America/Indiana/Petersburg"
	PatchedSystemSettingsRequestTimeZoneAmericaIndianaTellCity         PatchedSystemSettingsRequestTimeZone = "America/Indiana/Tell_City"
	PatchedSystemSettingsRequestTimeZoneAmericaIndianaVevay            PatchedSystemSettingsRequestTimeZone = "America/Indiana/Vevay"
	PatchedSystemSettingsRequestTimeZoneAmericaIndianaVincennes        PatchedSystemSettingsRequestTimeZone = "America/Indiana/Vincennes"
	PatchedSystemSettingsRequestTimeZoneAmericaIndianaWinamac          PatchedSystemSettingsRequestTimeZone = "America/Indiana/Winamac"
	PatchedSystemSettingsRequestTimeZoneAmericaIndianapolis            PatchedSystemSettingsRequestTimeZone = "America/Indianapolis"
	PatchedSystemSettingsRequestTimeZoneAmericaInuvik                  PatchedSystemSettingsRequestTimeZone = "America/Inuvik"
	PatchedSystemSettingsRequestTimeZoneAmericaIqaluit                 PatchedSystemSettingsRequestTimeZone = "America/Iqaluit"
	PatchedSystemSettingsRequestTimeZoneAmericaJamaica                 PatchedSystemSettingsRequestTimeZone = "America/Jamaica"
	PatchedSystemSettingsRequestTimeZoneAmericaJujuy                   PatchedSystemSettingsRequestTimeZone = "America/Jujuy"
	PatchedSystemSettingsRequestTimeZoneAmericaJuneau                  PatchedSystemSettingsRequestTimeZone = "America/Juneau"
	PatchedSystemSettingsRequestTimeZoneAmericaKentuckyLouisville      PatchedSystemSettingsRequestTimeZone = "America/Kentucky/Louisville"
	PatchedSystemSettingsRequestTimeZoneAmericaKentuckyMonticello      PatchedSystemSettingsRequestTimeZone = "America/Kentucky/Monticello"
	PatchedSystemSettingsRequestTimeZoneAmericaKnoxIN                  PatchedSystemSettingsRequestTimeZone = "America/Knox_IN"
	PatchedSystemSettingsRequestTimeZoneAmericaKralendijk              PatchedSystemSettingsRequestTimeZone = "America/Kralendijk"
	PatchedSystemSettingsRequestTimeZoneAmericaLaPaz                   PatchedSystemSettingsRequestTimeZone = "America/La_Paz"
	PatchedSystemSettingsRequestTimeZoneAmericaLima                    PatchedSystemSettingsRequestTimeZone = "America/Lima"
	PatchedSystemSettingsRequestTimeZoneAmericaLosAngeles              PatchedSystemSettingsRequestTimeZone = "America/Los_Angeles"
	PatchedSystemSettingsRequestTimeZoneAmericaLouisville              PatchedSystemSettingsRequestTimeZone = "America/Louisville"
	PatchedSystemSettingsRequestTimeZoneAmericaLowerPrinces            PatchedSystemSettingsRequestTimeZone = "America/Lower_Princes"
	PatchedSystemSettingsRequestTimeZoneAmericaMaceio                  PatchedSystemSettingsRequestTimeZone = "America/Maceio"
	PatchedSystemSettingsRequestTimeZoneAmericaManagua                 PatchedSystemSettingsRequestTimeZone = "America/Managua"
	PatchedSystemSettingsRequestTimeZoneAmericaManaus                  PatchedSystemSettingsRequestTimeZone = "America/Manaus"
	PatchedSystemSettingsRequestTimeZoneAmericaMarigot                 PatchedSystemSettingsRequestTimeZone = "America/Marigot"
	PatchedSystemSettingsRequestTimeZoneAmericaMartinique              PatchedSystemSettingsRequestTimeZone = "America/Martinique"
	PatchedSystemSettingsRequestTimeZoneAmericaMatamoros               PatchedSystemSettingsRequestTimeZone = "America/Matamoros"
	PatchedSystemSettingsRequestTimeZoneAmericaMazatlan                PatchedSystemSettingsRequestTimeZone = "America/Mazatlan"
	PatchedSystemSettingsRequestTimeZoneAmericaMendoza                 PatchedSystemSettingsRequestTimeZone = "America/Mendoza"
	PatchedSystemSettingsRequestTimeZoneAmericaMenominee               PatchedSystemSettingsRequestTimeZone = "America/Menominee"
	PatchedSystemSettingsRequestTimeZoneAmericaMerida                  PatchedSystemSettingsRequestTimeZone = "America/Merida"
	PatchedSystemSettingsRequestTimeZoneAmericaMetlakatla              PatchedSystemSettingsRequestTimeZone = "America/Metlakatla"
	PatchedSystemSettingsRequestTimeZoneAmericaMexicoCity              PatchedSystemSettingsRequestTimeZone = "America/Mexico_City"
	PatchedSystemSettingsRequestTimeZoneAmericaMiquelon                PatchedSystemSettingsRequestTimeZone = "America/Miquelon"
	PatchedSystemSettingsRequestTimeZoneAmericaMoncton                 PatchedSystemSettingsRequestTimeZone = "America/Moncton"
	PatchedSystemSettingsRequestTimeZoneAmericaMonterrey               PatchedSystemSettingsRequestTimeZone = "America/Monterrey"
	PatchedSystemSettingsRequestTimeZoneAmericaMontevideo              PatchedSystemSettingsRequestTimeZone = "America/Montevideo"
	PatchedSystemSettingsRequestTimeZoneAmericaMontreal                PatchedSystemSettingsRequestTimeZone = "America/Montreal"
	PatchedSystemSettingsRequestTimeZoneAmericaMontserrat              PatchedSystemSettingsRequestTimeZone = "America/Montserrat"
	PatchedSystemSettingsRequestTimeZoneAmericaNassau                  PatchedSystemSettingsRequestTimeZone = "America/Nassau"
	PatchedSystemSettingsRequestTimeZoneAmericaNewYork                 PatchedSystemSettingsRequestTimeZone = "America/New_York"
	PatchedSystemSettingsRequestTimeZoneAmericaNipigon                 PatchedSystemSettingsRequestTimeZone = "America/Nipigon"
	PatchedSystemSettingsRequestTimeZoneAmericaNome                    PatchedSystemSettingsRequestTimeZone = "America/Nome"
	PatchedSystemSettingsRequestTimeZoneAmericaNoronha                 PatchedSystemSettingsRequestTimeZone = "America/Noronha"
	PatchedSystemSettingsRequestTimeZoneAmericaNorthDakotaBeulah       PatchedSystemSettingsRequestTimeZone = "America/North_Dakota/Beulah"
	PatchedSystemSettingsRequestTimeZoneAmericaNorthDakotaCenter       PatchedSystemSettingsRequestTimeZone = "America/North_Dakota/Center"
	PatchedSystemSettingsRequestTimeZoneAmericaNorthDakotaNewSalem     PatchedSystemSettingsRequestTimeZone = "America/North_Dakota/New_Salem"
	PatchedSystemSettingsRequestTimeZoneAmericaNuuk                    PatchedSystemSettingsRequestTimeZone = "America/Nuuk"
	PatchedSystemSettingsRequestTimeZoneAmericaOjinaga                 PatchedSystemSettingsRequestTimeZone = "America/Ojinaga"
	PatchedSystemSettingsRequestTimeZoneAmericaPanama                  PatchedSystemSettingsRequestTimeZone = "America/Panama"
	PatchedSystemSettingsRequestTimeZoneAmericaPangnirtung             PatchedSystemSettingsRequestTimeZone = "America/Pangnirtung"
	PatchedSystemSettingsRequestTimeZoneAmericaParamaribo              PatchedSystemSettingsRequestTimeZone = "America/Paramaribo"
	PatchedSystemSettingsRequestTimeZoneAmericaPhoenix                 PatchedSystemSettingsRequestTimeZone = "America/Phoenix"
	PatchedSystemSettingsRequestTimeZoneAmericaPortAuPrince            PatchedSystemSettingsRequestTimeZone = "America/Port-au-Prince"
	PatchedSystemSettingsRequestTimeZoneAmericaPortOfSpain             PatchedSystemSettingsRequestTimeZone = "America/Port_of_Spain"
	PatchedSystemSettingsRequestTimeZoneAmericaPortoAcre               PatchedSystemSettingsRequestTimeZone = "America/Porto_Acre"
	PatchedSystemSettingsRequestTimeZoneAmericaPortoVelho              PatchedSystemSettingsRequestTimeZone = "America/Porto_Velho"
	PatchedSystemSettingsRequestTimeZoneAmericaPuertoRico              PatchedSystemSettingsRequestTimeZone = "America/Puerto_Rico"
	PatchedSystemSettingsRequestTimeZoneAmericaPuntaArenas             PatchedSystemSettingsRequestTimeZone = "America/Punta_Arenas"
	PatchedSystemSettingsRequestTimeZoneAmericaRainyRiver              PatchedSystemSettingsRequestTimeZone = "America/Rainy_River"
	PatchedSystemSettingsRequestTimeZoneAmericaRankinInlet             PatchedSystemSettingsRequestTimeZone = "America/Rankin_Inlet"
	PatchedSystemSettingsRequestTimeZoneAmericaRecife                  PatchedSystemSettingsRequestTimeZone = "America/Recife"
	PatchedSystemSettingsRequestTimeZoneAmericaRegina                  PatchedSystemSettingsRequestTimeZone = "America/Regina"
	PatchedSystemSettingsRequestTimeZoneAmericaResolute                PatchedSystemSettingsRequestTimeZone = "America/Resolute"
	PatchedSystemSettingsRequestTimeZoneAmericaRioBranco               PatchedSystemSettingsRequestTimeZone = "America/Rio_Branco"
	PatchedSystemSettingsRequestTimeZoneAmericaRosario                 PatchedSystemSettingsRequestTimeZone = "America/Rosario"
	PatchedSystemSettingsRequestTimeZoneAmericaSantaIsabel             PatchedSystemSettingsRequestTimeZone = "America/Santa_Isabel"
	PatchedSystemSettingsRequestTimeZoneAmericaSantarem                PatchedSystemSettingsRequestTimeZone = "America/Santarem"
	PatchedSystemSettingsRequestTimeZoneAmericaSantiago                PatchedSystemSettingsRequestTimeZone = "America/Santiago"
	PatchedSystemSettingsRequestTimeZoneAmericaSantoDomingo            PatchedSystemSettingsRequestTimeZone = "America/Santo_Domingo"
	PatchedSystemSettingsRequestTimeZoneAmericaSaoPaulo                PatchedSystemSettingsRequestTimeZone = "America/Sao_Paulo"
	PatchedSystemSettingsRequestTimeZoneAmericaScoresbysund            PatchedSystemSettingsRequestTimeZone = "America/Scoresbysund"
	PatchedSystemSettingsRequestTimeZoneAmericaShiprock                PatchedSystemSettingsRequestTimeZone = "America/Shiprock"
	PatchedSystemSettingsRequestTimeZoneAmericaSitka                   PatchedSystemSettingsRequestTimeZone = "America/Sitka"
	PatchedSystemSettingsRequestTimeZoneAmericaStBarthelemy            PatchedSystemSettingsRequestTimeZone = "America/St_Barthelemy"
	PatchedSystemSettingsRequestTimeZoneAmericaStJohns                 PatchedSystemSettingsRequestTimeZone = "America/St_Johns"
	PatchedSystemSettingsRequestTimeZoneAmericaStKitts                 PatchedSystemSettingsRequestTimeZone = "America/St_Kitts"
	PatchedSystemSettingsRequestTimeZoneAmericaStLucia                 PatchedSystemSettingsRequestTimeZone = "America/St_Lucia"
	PatchedSystemSettingsRequestTimeZoneAmericaStThomas                PatchedSystemSettingsRequestTimeZone = "America/St_Thomas"
	PatchedSystemSettingsRequestTimeZoneAmericaStVincent               PatchedSystemSettingsRequestTimeZone = "America/St_Vincent"
	PatchedSystemSettingsRequestTimeZoneAmericaSwiftCurrent            PatchedSystemSettingsRequestTimeZone = "America/Swift_Current"
	PatchedSystemSettingsRequestTimeZoneAmericaTegucigalpa             PatchedSystemSettingsRequestTimeZone = "America/Tegucigalpa"
	PatchedSystemSettingsRequestTimeZoneAmericaThule                   PatchedSystemSettingsRequestTimeZone = "America/Thule"
	PatchedSystemSettingsRequestTimeZoneAmericaThunderBay              PatchedSystemSettingsRequestTimeZone = "America/Thunder_Bay"
	PatchedSystemSettingsRequestTimeZoneAmericaTijuana                 PatchedSystemSettingsRequestTimeZone = "America/Tijuana"
	PatchedSystemSettingsRequestTimeZoneAmericaToronto                 PatchedSystemSettingsRequestTimeZone = "America/Toronto"
	PatchedSystemSettingsRequestTimeZoneAmericaTortola                 PatchedSystemSettingsRequestTimeZone = "America/Tortola"
	PatchedSystemSettingsRequestTimeZoneAmericaVancouver               PatchedSystemSettingsRequestTimeZone = "America/Vancouver"
	PatchedSystemSettingsRequestTimeZoneAmericaVirgin                  PatchedSystemSettingsRequestTimeZone = "America/Virgin"
	PatchedSystemSettingsRequestTimeZoneAmericaWhitehorse              PatchedSystemSettingsRequestTimeZone = "America/Whitehorse"
	PatchedSystemSettingsRequestTimeZoneAmericaWinnipeg                PatchedSystemSettingsRequestTimeZone = "America/Winnipeg"
	PatchedSystemSettingsRequestTimeZoneAmericaYakutat                 PatchedSystemSettingsRequestTimeZone = "America/Yakutat"
	PatchedSystemSettingsRequestTimeZoneAmericaYellowknife             PatchedSystemSettingsRequestTimeZone = "America/Yellowknife"
	PatchedSystemSettingsRequestTimeZoneAntarcticaCasey                PatchedSystemSettingsRequestTimeZone = "Antarctica/Casey"
	PatchedSystemSettingsRequestTimeZoneAntarcticaDavis                PatchedSystemSettingsRequestTimeZone = "Antarctica/Davis"
	PatchedSystemSettingsRequestTimeZoneAntarcticaDumontDUrville       PatchedSystemSettingsRequestTimeZone = "Antarctica/DumontDUrville"
	PatchedSystemSettingsRequestTimeZoneAntarcticaMacquarie            PatchedSystemSettingsRequestTimeZone = "Antarctica/Macquarie"
	PatchedSystemSettingsRequestTimeZoneAntarcticaMawson               PatchedSystemSettingsRequestTimeZone = "Antarctica/Mawson"
	PatchedSystemSettingsRequestTimeZoneAntarcticaMcMurdo              PatchedSystemSettingsRequestTimeZone = "Antarctica/McMurdo"
	PatchedSystemSettingsRequestTimeZoneAntarcticaPalmer               PatchedSystemSettingsRequestTimeZone = "Antarctica/Palmer"
	PatchedSystemSettingsRequestTimeZoneAntarcticaRothera              PatchedSystemSettingsRequestTimeZone = "Antarctica/Rothera"
	PatchedSystemSettingsRequestTimeZoneAntarcticaSouthPole            PatchedSystemSettingsRequestTimeZone = "Antarctica/South_Pole"
	PatchedSystemSettingsRequestTimeZoneAntarcticaSyowa                PatchedSystemSettingsRequestTimeZone = "Antarctica/Syowa"
	PatchedSystemSettingsRequestTimeZoneAntarcticaTroll                PatchedSystemSettingsRequestTimeZone = "Antarctica/Troll"
	PatchedSystemSettingsRequestTimeZoneAntarcticaVostok               PatchedSystemSettingsRequestTimeZone = "Antarctica/Vostok"
	PatchedSystemSettingsRequestTimeZoneArcticLongyearbyen             PatchedSystemSettingsRequestTimeZone = "Arctic/Longyearbyen"
	PatchedSystemSettingsRequestTimeZoneAsiaAden                       PatchedSystemSettingsRequestTimeZone = "Asia/Aden"
	PatchedSystemSettingsRequestTimeZoneAsiaAlmaty                     PatchedSystemSettingsRequestTimeZone = "Asia/Almaty"
	PatchedSystemSettingsRequestTimeZoneAsiaAmman                      PatchedSystemSettingsRequestTimeZone = "Asia/Amman"
	PatchedSystemSettingsRequestTimeZoneAsiaAnadyr                     PatchedSystemSettingsRequestTimeZone = "Asia/Anadyr"
	PatchedSystemSettingsRequestTimeZoneAsiaAqtau                      PatchedSystemSettingsRequestTimeZone = "Asia/Aqtau"
	PatchedSystemSettingsRequestTimeZoneAsiaAqtobe                     PatchedSystemSettingsRequestTimeZone = "Asia/Aqtobe"
	PatchedSystemSettingsRequestTimeZoneAsiaAshgabat                   PatchedSystemSettingsRequestTimeZone = "Asia/Ashgabat"
	PatchedSystemSettingsRequestTimeZoneAsiaAshkhabad                  PatchedSystemSettingsRequestTimeZone = "Asia/Ashkhabad"
	PatchedSystemSettingsRequestTimeZoneAsiaAtyrau                     PatchedSystemSettingsRequestTimeZone = "Asia/Atyrau"
	PatchedSystemSettingsRequestTimeZoneAsiaBaghdad                    PatchedSystemSettingsRequestTimeZone = "Asia/Baghdad"
	PatchedSystemSettingsRequestTimeZoneAsiaBahrain                    PatchedSystemSettingsRequestTimeZone = "Asia/Bahrain"
	PatchedSystemSettingsRequestTimeZoneAsiaBaku                       PatchedSystemSettingsRequestTimeZone = "Asia/Baku"
	PatchedSystemSettingsRequestTimeZoneAsiaBangkok                    PatchedSystemSettingsRequestTimeZone = "Asia/Bangkok"
	PatchedSystemSettingsRequestTimeZoneAsiaBarnaul                    PatchedSystemSettingsRequestTimeZone = "Asia/Barnaul"
	PatchedSystemSettingsRequestTimeZoneAsiaBeirut                     PatchedSystemSettingsRequestTimeZone = "Asia/Beirut"
	PatchedSystemSettingsRequestTimeZoneAsiaBishkek                    PatchedSystemSettingsRequestTimeZone = "Asia/Bishkek"
	PatchedSystemSettingsRequestTimeZoneAsiaBrunei                     PatchedSystemSettingsRequestTimeZone = "Asia/Brunei"
	PatchedSystemSettingsRequestTimeZoneAsiaCalcutta                   PatchedSystemSettingsRequestTimeZone = "Asia/Calcutta"
	PatchedSystemSettingsRequestTimeZoneAsiaChita                      PatchedSystemSettingsRequestTimeZone = "Asia/Chita"
	PatchedSystemSettingsRequestTimeZoneAsiaChoibalsan                 PatchedSystemSettingsRequestTimeZone = "Asia/Choibalsan"
	PatchedSystemSettingsRequestTimeZoneAsiaChongqing                  PatchedSystemSettingsRequestTimeZone = "Asia/Chongqing"
	PatchedSystemSettingsRequestTimeZoneAsiaChungking                  PatchedSystemSettingsRequestTimeZone = "Asia/Chungking"
	PatchedSystemSettingsRequestTimeZoneAsiaColombo                    PatchedSystemSettingsRequestTimeZone = "Asia/Colombo"
	PatchedSystemSettingsRequestTimeZoneAsiaDacca                      PatchedSystemSettingsRequestTimeZone = "Asia/Dacca"
	PatchedSystemSettingsRequestTimeZoneAsiaDamascus                   PatchedSystemSettingsRequestTimeZone = "Asia/Damascus"
	PatchedSystemSettingsRequestTimeZoneAsiaDhaka                      PatchedSystemSettingsRequestTimeZone = "Asia/Dhaka"
	PatchedSystemSettingsRequestTimeZoneAsiaDili                       PatchedSystemSettingsRequestTimeZone = "Asia/Dili"
	PatchedSystemSettingsRequestTimeZoneAsiaDubai                      PatchedSystemSettingsRequestTimeZone = "Asia/Dubai"
	PatchedSystemSettingsRequestTimeZoneAsiaDushanbe                   PatchedSystemSettingsRequestTimeZone = "Asia/Dushanbe"
	PatchedSystemSettingsRequestTimeZoneAsiaFamagusta                  PatchedSystemSettingsRequestTimeZone = "Asia/Famagusta"
	PatchedSystemSettingsRequestTimeZoneAsiaGaza                       PatchedSystemSettingsRequestTimeZone = "Asia/Gaza"
	PatchedSystemSettingsRequestTimeZoneAsiaHarbin                     PatchedSystemSettingsRequestTimeZone = "Asia/Harbin"
	PatchedSystemSettingsRequestTimeZoneAsiaHebron                     PatchedSystemSettingsRequestTimeZone = "Asia/Hebron"
	PatchedSystemSettingsRequestTimeZoneAsiaHoChiMinh                  PatchedSystemSettingsRequestTimeZone = "Asia/Ho_Chi_Minh"
	PatchedSystemSettingsRequestTimeZoneAsiaHongKong                   PatchedSystemSettingsRequestTimeZone = "Asia/Hong_Kong"
	PatchedSystemSettingsRequestTimeZoneAsiaHovd                       PatchedSystemSettingsRequestTimeZone = "Asia/Hovd"
	PatchedSystemSettingsRequestTimeZoneAsiaIrkutsk                    PatchedSystemSettingsRequestTimeZone = "Asia/Irkutsk"
	PatchedSystemSettingsRequestTimeZoneAsiaIstanbul                   PatchedSystemSettingsRequestTimeZone = "Asia/Istanbul"
	PatchedSystemSettingsRequestTimeZoneAsiaJakarta                    PatchedSystemSettingsRequestTimeZone = "Asia/Jakarta"
	PatchedSystemSettingsRequestTimeZoneAsiaJayapura                   PatchedSystemSettingsRequestTimeZone = "Asia/Jayapura"
	PatchedSystemSettingsRequestTimeZoneAsiaJerusalem                  PatchedSystemSettingsRequestTimeZone = "Asia/Jerusalem"
	PatchedSystemSettingsRequestTimeZoneAsiaKabul                      PatchedSystemSettingsRequestTimeZone = "Asia/Kabul"
	PatchedSystemSettingsRequestTimeZoneAsiaKamchatka                  PatchedSystemSettingsRequestTimeZone = "Asia/Kamchatka"
	PatchedSystemSettingsRequestTimeZoneAsiaKarachi                    PatchedSystemSettingsRequestTimeZone = "Asia/Karachi"
	PatchedSystemSettingsRequestTimeZoneAsiaKashgar                    PatchedSystemSettingsRequestTimeZone = "Asia/Kashgar"
	PatchedSystemSettingsRequestTimeZoneAsiaKathmandu                  PatchedSystemSettingsRequestTimeZone = "Asia/Kathmandu"
	PatchedSystemSettingsRequestTimeZoneAsiaKatmandu                   PatchedSystemSettingsRequestTimeZone = "Asia/Katmandu"
	PatchedSystemSettingsRequestTimeZoneAsiaKhandyga                   PatchedSystemSettingsRequestTimeZone = "Asia/Khandyga"
	PatchedSystemSettingsRequestTimeZoneAsiaKolkata                    PatchedSystemSettingsRequestTimeZone = "Asia/Kolkata"
	PatchedSystemSettingsRequestTimeZoneAsiaKrasnoyarsk                PatchedSystemSettingsRequestTimeZone = "Asia/Krasnoyarsk"
	PatchedSystemSettingsRequestTimeZoneAsiaKualaLumpur                PatchedSystemSettingsRequestTimeZone = "Asia/Kuala_Lumpur"
	PatchedSystemSettingsRequestTimeZoneAsiaKuching                    PatchedSystemSettingsRequestTimeZone = "Asia/Kuching"
	PatchedSystemSettingsRequestTimeZoneAsiaKuwait                     PatchedSystemSettingsRequestTimeZone = "Asia/Kuwait"
	PatchedSystemSettingsRequestTimeZoneAsiaMacao                      PatchedSystemSettingsRequestTimeZone = "Asia/Macao"
	PatchedSystemSettingsRequestTimeZoneAsiaMacau                      PatchedSystemSettingsRequestTimeZone = "Asia/Macau"
	PatchedSystemSettingsRequestTimeZoneAsiaMagadan                    PatchedSystemSettingsRequestTimeZone = "Asia/Magadan"
	PatchedSystemSettingsRequestTimeZoneAsiaMakassar                   PatchedSystemSettingsRequestTimeZone = "Asia/Makassar"
	PatchedSystemSettingsRequestTimeZoneAsiaManila                     PatchedSystemSettingsRequestTimeZone = "Asia/Manila"
	PatchedSystemSettingsRequestTimeZoneAsiaMuscat                     PatchedSystemSettingsRequestTimeZone = "Asia/Muscat"
	PatchedSystemSettingsRequestTimeZoneAsiaNicosia                    PatchedSystemSettingsRequestTimeZone = "Asia/Nicosia"
	PatchedSystemSettingsRequestTimeZoneAsiaNovokuznetsk               PatchedSystemSettingsRequestTimeZone = "Asia/Novokuznetsk"
	PatchedSystemSettingsRequestTimeZoneAsiaNovosibirsk                PatchedSystemSettingsRequestTimeZone = "Asia/Novosibirsk"
	PatchedSystemSettingsRequestTimeZoneAsiaOmsk                       PatchedSystemSettingsRequestTimeZone = "Asia/Omsk"
	PatchedSystemSettingsRequestTimeZoneAsiaOral                       PatchedSystemSettingsRequestTimeZone = "Asia/Oral"
	PatchedSystemSettingsRequestTimeZoneAsiaPhnomPenh                  PatchedSystemSettingsRequestTimeZone = "Asia/Phnom_Penh"
	PatchedSystemSettingsRequestTimeZoneAsiaPontianak                  PatchedSystemSettingsRequestTimeZone = "Asia/Pontianak"
	PatchedSystemSettingsRequestTimeZoneAsiaPyongyang                  PatchedSystemSettingsRequestTimeZone = "Asia/Pyongyang"
	PatchedSystemSettingsRequestTimeZoneAsiaQatar                      PatchedSystemSettingsRequestTimeZone = "Asia/Qatar"
	PatchedSystemSettingsRequestTimeZoneAsiaQostanay                   PatchedSystemSettingsRequestTimeZone = "Asia/Qostanay"
	PatchedSystemSettingsRequestTimeZoneAsiaQyzylorda                  PatchedSystemSettingsRequestTimeZone = "Asia/Qyzylorda"
	PatchedSystemSettingsRequestTimeZoneAsiaRangoon                    PatchedSystemSettingsRequestTimeZone = "Asia/Rangoon"
	PatchedSystemSettingsRequestTimeZoneAsiaRiyadh                     PatchedSystemSettingsRequestTimeZone = "Asia/Riyadh"
	PatchedSystemSettingsRequestTimeZoneAsiaSaigon                     PatchedSystemSettingsRequestTimeZone = "Asia/Saigon"
	PatchedSystemSettingsRequestTimeZoneAsiaSakhalin                   PatchedSystemSettingsRequestTimeZone = "Asia/Sakhalin"
	PatchedSystemSettingsRequestTimeZoneAsiaSamarkand                  PatchedSystemSettingsRequestTimeZone = "Asia/Samarkand"
	PatchedSystemSettingsRequestTimeZoneAsiaSeoul                      PatchedSystemSettingsRequestTimeZone = "Asia/Seoul"
	PatchedSystemSettingsRequestTimeZoneAsiaShanghai                   PatchedSystemSettingsRequestTimeZone = "Asia/Shanghai"
	PatchedSystemSettingsRequestTimeZoneAsiaSingapore                  PatchedSystemSettingsRequestTimeZone = "Asia/Singapore"
	PatchedSystemSettingsRequestTimeZoneAsiaSrednekolymsk              PatchedSystemSettingsRequestTimeZone = "Asia/Srednekolymsk"
	PatchedSystemSettingsRequestTimeZoneAsiaTaipei                     PatchedSystemSettingsRequestTimeZone = "Asia/Taipei"
	PatchedSystemSettingsRequestTimeZoneAsiaTashkent                   PatchedSystemSettingsRequestTimeZone = "Asia/Tashkent"
	PatchedSystemSettingsRequestTimeZoneAsiaTbilisi                    PatchedSystemSettingsRequestTimeZone = "Asia/Tbilisi"
	PatchedSystemSettingsRequestTimeZoneAsiaTehran                     PatchedSystemSettingsRequestTimeZone = "Asia/Tehran"
	PatchedSystemSettingsRequestTimeZoneAsiaTelAviv                    PatchedSystemSettingsRequestTimeZone = "Asia/Tel_Aviv"
	PatchedSystemSettingsRequestTimeZoneAsiaThimbu                     PatchedSystemSettingsRequestTimeZone = "Asia/Thimbu"
	PatchedSystemSettingsRequestTimeZoneAsiaThimphu                    PatchedSystemSettingsRequestTimeZone = "Asia/Thimphu"
	PatchedSystemSettingsRequestTimeZoneAsiaTokyo                      PatchedSystemSettingsRequestTimeZone = "Asia/Tokyo"
	PatchedSystemSettingsRequestTimeZoneAsiaTomsk                      PatchedSystemSettingsRequestTimeZone = "Asia/Tomsk"
	PatchedSystemSettingsRequestTimeZoneAsiaUjungPandang               PatchedSystemSettingsRequestTimeZone = "Asia/Ujung_Pandang"
	PatchedSystemSettingsRequestTimeZoneAsiaUlaanbaatar                PatchedSystemSettingsRequestTimeZone = "Asia/Ulaanbaatar"
	PatchedSystemSettingsRequestTimeZoneAsiaUlanBator                  PatchedSystemSettingsRequestTimeZone = "Asia/Ulan_Bator"
	PatchedSystemSettingsRequestTimeZoneAsiaUrumqi                     PatchedSystemSettingsRequestTimeZone = "Asia/Urumqi"
	PatchedSystemSettingsRequestTimeZoneAsiaUstNera                    PatchedSystemSettingsRequestTimeZone = "Asia/Ust-Nera"
	PatchedSystemSettingsRequestTimeZoneAsiaVientiane                  PatchedSystemSettingsRequestTimeZone = "Asia/Vientiane"
	PatchedSystemSettingsRequestTimeZoneAsiaVladivostok                PatchedSystemSettingsRequestTimeZone = "Asia/Vladivostok"
	PatchedSystemSettingsRequestTimeZoneAsiaYakutsk                    PatchedSystemSettingsRequestTimeZone = "Asia/Yakutsk"
	PatchedSystemSettingsRequestTimeZoneAsiaYangon                     PatchedSystemSettingsRequestTimeZone = "Asia/Yangon"
	PatchedSystemSettingsRequestTimeZoneAsiaYekaterinburg              PatchedSystemSettingsRequestTimeZone = "Asia/Yekaterinburg"
	PatchedSystemSettingsRequestTimeZoneAsiaYerevan                    PatchedSystemSettingsRequestTimeZone = "Asia/Yerevan"
	PatchedSystemSettingsRequestTimeZoneAtlanticAzores                 PatchedSystemSettingsRequestTimeZone = "Atlantic/Azores"
	PatchedSystemSettingsRequestTimeZoneAtlanticBermuda                PatchedSystemSettingsRequestTimeZone = "Atlantic/Bermuda"
	PatchedSystemSettingsRequestTimeZoneAtlanticCanary                 PatchedSystemSettingsRequestTimeZone = "Atlantic/Canary"
	PatchedSystemSettingsRequestTimeZoneAtlanticCapeVerde              PatchedSystemSettingsRequestTimeZone = "Atlantic/Cape_Verde"
	PatchedSystemSettingsRequestTimeZoneAtlanticFaeroe                 PatchedSystemSettingsRequestTimeZone = "Atlantic/Faeroe"
	PatchedSystemSettingsRequestTimeZoneAtlanticFaroe                  PatchedSystemSettingsRequestTimeZone = "Atlantic/Faroe"
	PatchedSystemSettingsRequestTimeZoneAtlanticJanMayen               PatchedSystemSettingsRequestTimeZone = "Atlantic/Jan_Mayen"
	PatchedSystemSettingsRequestTimeZoneAtlanticMadeira                PatchedSystemSettingsRequestTimeZone = "Atlantic/Madeira"
	PatchedSystemSettingsRequestTimeZoneAtlanticReykjavik              PatchedSystemSettingsRequestTimeZone = "Atlantic/Reykjavik"
	PatchedSystemSettingsRequestTimeZoneAtlanticSouthGeorgia           PatchedSystemSettingsRequestTimeZone = "Atlantic/South_Georgia"
	PatchedSystemSettingsRequestTimeZoneAtlanticStHelena               PatchedSystemSettingsRequestTimeZone = "Atlantic/St_Helena"
	PatchedSystemSettingsRequestTimeZoneAtlanticStanley                PatchedSystemSettingsRequestTimeZone = "Atlantic/Stanley"
	PatchedSystemSettingsRequestTimeZoneAustraliaACT                   PatchedSystemSettingsRequestTimeZone = "Australia/ACT"
	PatchedSystemSettingsRequestTimeZoneAustraliaAdelaide              PatchedSystemSettingsRequestTimeZone = "Australia/Adelaide"
	PatchedSystemSettingsRequestTimeZoneAustraliaBrisbane              PatchedSystemSettingsRequestTimeZone = "Australia/Brisbane"
	PatchedSystemSettingsRequestTimeZoneAustraliaBrokenHill            PatchedSystemSettingsRequestTimeZone = "Australia/Broken_Hill"
	PatchedSystemSettingsRequestTimeZoneAustraliaCanberra              PatchedSystemSettingsRequestTimeZone = "Australia/Canberra"
	PatchedSystemSettingsRequestTimeZoneAustraliaCurrie                PatchedSystemSettingsRequestTimeZone = "Australia/Currie"
	PatchedSystemSettingsRequestTimeZoneAustraliaDarwin                PatchedSystemSettingsRequestTimeZone = "Australia/Darwin"
	PatchedSystemSettingsRequestTimeZoneAustraliaEucla                 PatchedSystemSettingsRequestTimeZone = "Australia/Eucla"
	PatchedSystemSettingsRequestTimeZoneAustraliaHobart                PatchedSystemSettingsRequestTimeZone = "Australia/Hobart"
	PatchedSystemSettingsRequestTimeZoneAustraliaLHI                   PatchedSystemSettingsRequestTimeZone = "Australia/LHI"
	PatchedSystemSettingsRequestTimeZoneAustraliaLindeman              PatchedSystemSettingsRequestTimeZone = "Australia/Lindeman"
	PatchedSystemSettingsRequestTimeZoneAustraliaLordHowe              PatchedSystemSettingsRequestTimeZone = "Australia/Lord_Howe"
	PatchedSystemSettingsRequestTimeZoneAustraliaMelbourne             PatchedSystemSettingsRequestTimeZone = "Australia/Melbourne"
	PatchedSystemSettingsRequestTimeZoneAustraliaNSW                   PatchedSystemSettingsRequestTimeZone = "Australia/NSW"
	PatchedSystemSettingsRequestTimeZoneAustraliaNorth                 PatchedSystemSettingsRequestTimeZone = "Australia/North"
	PatchedSystemSettingsRequestTimeZoneAustraliaPerth                 PatchedSystemSettingsRequestTimeZone = "Australia/Perth"
	PatchedSystemSettingsRequestTimeZoneAustraliaQueensland            PatchedSystemSettingsRequestTimeZone = "Australia/Queensland"
	PatchedSystemSettingsRequestTimeZoneAustraliaSouth                 PatchedSystemSettingsRequestTimeZone = "Australia/South"
	PatchedSystemSettingsRequestTimeZoneAustraliaSydney                PatchedSystemSettingsRequestTimeZone = "Australia/Sydney"
	PatchedSystemSettingsRequestTimeZoneAustraliaTasmania              PatchedSystemSettingsRequestTimeZone = "Australia/Tasmania"
	PatchedSystemSettingsRequestTimeZoneAustraliaVictoria              PatchedSystemSettingsRequestTimeZone = "Australia/Victoria"
	PatchedSystemSettingsRequestTimeZoneAustraliaWest                  PatchedSystemSettingsRequestTimeZone = "Australia/West"
	PatchedSystemSettingsRequestTimeZoneAustraliaYancowinna            PatchedSystemSettingsRequestTimeZone = "Australia/Yancowinna"
	PatchedSystemSettingsRequestTimeZoneBrazilAcre                     PatchedSystemSettingsRequestTimeZone = "Brazil/Acre"
	PatchedSystemSettingsRequestTimeZoneBrazilDeNoronha                PatchedSystemSettingsRequestTimeZone = "Brazil/DeNoronha"
	PatchedSystemSettingsRequestTimeZoneBrazilEast                     PatchedSystemSettingsRequestTimeZone = "Brazil/East"
	PatchedSystemSettingsRequestTimeZoneBrazilWest                     PatchedSystemSettingsRequestTimeZone = "Brazil/West"
	PatchedSystemSettingsRequestTimeZoneCET                            PatchedSystemSettingsRequestTimeZone = "CET"
	PatchedSystemSettingsRequestTimeZoneCST6CDT                        PatchedSystemSettingsRequestTimeZone = "CST6CDT"
	PatchedSystemSettingsRequestTimeZoneCanadaAtlantic                 PatchedSystemSettingsRequestTimeZone = "Canada/Atlantic"
	PatchedSystemSettingsRequestTimeZoneCanadaCentral                  PatchedSystemSettingsRequestTimeZone = "Canada/Central"
	PatchedSystemSettingsRequestTimeZoneCanadaEastern                  PatchedSystemSettingsRequestTimeZone = "Canada/Eastern"
	PatchedSystemSettingsRequestTimeZoneCanadaMountain                 PatchedSystemSettingsRequestTimeZone = "Canada/Mountain"
	PatchedSystemSettingsRequestTimeZoneCanadaNewfoundland             PatchedSystemSettingsRequestTimeZone = "Canada/Newfoundland"
	PatchedSystemSettingsRequestTimeZoneCanadaPacific                  PatchedSystemSettingsRequestTimeZone = "Canada/Pacific"
	PatchedSystemSettingsRequestTimeZoneCanadaSaskatchewan             PatchedSystemSettingsRequestTimeZone = "Canada/Saskatchewan"
	PatchedSystemSettingsRequestTimeZoneCanadaYukon                    PatchedSystemSettingsRequestTimeZone = "Canada/Yukon"
	PatchedSystemSettingsRequestTimeZoneChileContinental               PatchedSystemSettingsRequestTimeZone = "Chile/Continental"
	PatchedSystemSettingsRequestTimeZoneChileEasterIsland              PatchedSystemSettingsRequestTimeZone = "Chile/EasterIsland"
	PatchedSystemSettingsRequestTimeZoneCuba                           PatchedSystemSettingsRequestTimeZone = "Cuba"
	PatchedSystemSettingsRequestTimeZoneEET                            PatchedSystemSettingsRequestTimeZone = "EET"
	PatchedSystemSettingsRequestTimeZoneEST                            PatchedSystemSettingsRequestTimeZone = "EST"
	PatchedSystemSettingsRequestTimeZoneEST5EDT                        PatchedSystemSettingsRequestTimeZone = "EST5EDT"
	PatchedSystemSettingsRequestTimeZoneEgypt                          PatchedSystemSettingsRequestTimeZone = "Egypt"
	PatchedSystemSettingsRequestTimeZoneEire                           PatchedSystemSettingsRequestTimeZone = "Eire"
	PatchedSystemSettingsRequestTimeZoneEtcGMT                         PatchedSystemSettingsRequestTimeZone = "Etc/GMT"
	PatchedSystemSettingsRequestTimeZoneEtcGMT0                        PatchedSystemSettingsRequestTimeZone = "Etc/GMT+0"
	PatchedSystemSettingsRequestTimeZoneEtcGMT01                       PatchedSystemSettingsRequestTimeZone = "Etc/GMT-0"
	PatchedSystemSettingsRequestTimeZoneEtcGMT02                       PatchedSystemSettingsRequestTimeZone = "Etc/GMT0"
	PatchedSystemSettingsRequestTimeZoneEtcGMT1                        PatchedSystemSettingsRequestTimeZone = "Etc/GMT+1"
	PatchedSystemSettingsRequestTimeZoneEtcGMT10                       PatchedSystemSettingsRequestTimeZone = "Etc/GMT+10"
	PatchedSystemSettingsRequestTimeZoneEtcGMT101                      PatchedSystemSettingsRequestTimeZone = "Etc/GMT-10"
	PatchedSystemSettingsRequestTimeZoneEtcGMT11                       PatchedSystemSettingsRequestTimeZone = "Etc/GMT-1"
	PatchedSystemSettingsRequestTimeZoneEtcGMT111                      PatchedSystemSettingsRequestTimeZone = "Etc/GMT-11"
	PatchedSystemSettingsRequestTimeZoneEtcGMT12                       PatchedSystemSettingsRequestTimeZone = "Etc/GMT+12"
	PatchedSystemSettingsRequestTimeZoneEtcGMT121                      PatchedSystemSettingsRequestTimeZone = "Etc/GMT-12"
	PatchedSystemSettingsRequestTimeZoneEtcGMT13                       PatchedSystemSettingsRequestTimeZone = "Etc/GMT-13"
	PatchedSystemSettingsRequestTimeZoneEtcGMT14                       PatchedSystemSettingsRequestTimeZone = "Etc/GMT-14"
	PatchedSystemSettingsRequestTimeZoneEtcGMT2                        PatchedSystemSettingsRequestTimeZone = "Etc/GMT+2"
	PatchedSystemSettingsRequestTimeZoneEtcGMT21                       PatchedSystemSettingsRequestTimeZone = "Etc/GMT-2"
	PatchedSystemSettingsRequestTimeZoneEtcGMT3                        PatchedSystemSettingsRequestTimeZone = "Etc/GMT+3"
	PatchedSystemSettingsRequestTimeZoneEtcGMT31                       PatchedSystemSettingsRequestTimeZone = "Etc/GMT-3"
	PatchedSystemSettingsRequestTimeZoneEtcGMT4                        PatchedSystemSettingsRequestTimeZone = "Etc/GMT+4"
	PatchedSystemSettingsRequestTimeZoneEtcGMT41                       PatchedSystemSettingsRequestTimeZone = "Etc/GMT-4"
	PatchedSystemSettingsRequestTimeZoneEtcGMT5                        PatchedSystemSettingsRequestTimeZone = "Etc/GMT+5"
	PatchedSystemSettingsRequestTimeZoneEtcGMT51                       PatchedSystemSettingsRequestTimeZone = "Etc/GMT-5"
	PatchedSystemSettingsRequestTimeZoneEtcGMT6                        PatchedSystemSettingsRequestTimeZone = "Etc/GMT+6"
	PatchedSystemSettingsRequestTimeZoneEtcGMT61                       PatchedSystemSettingsRequestTimeZone = "Etc/GMT-6"
	PatchedSystemSettingsRequestTimeZoneEtcGMT7                        PatchedSystemSettingsRequestTimeZone = "Etc/GMT+7"
	PatchedSystemSettingsRequestTimeZoneEtcGMT71                       PatchedSystemSettingsRequestTimeZone = "Etc/GMT-7"
	PatchedSystemSettingsRequestTimeZoneEtcGMT8                        PatchedSystemSettingsRequestTimeZone = "Etc/GMT+8"
	PatchedSystemSettingsRequestTimeZoneEtcGMT81                       PatchedSystemSettingsRequestTimeZone = "Etc/GMT-8"
	PatchedSystemSettingsRequestTimeZoneEtcGMT9                        PatchedSystemSettingsRequestTimeZone = "Etc/GMT+9"
	PatchedSystemSettingsRequestTimeZoneEtcGMT91                       PatchedSystemSettingsRequestTimeZone = "Etc/GMT-9"
	PatchedSystemSettingsRequestTimeZoneEtcGreenwich                   PatchedSystemSettingsRequestTimeZone = "Etc/Greenwich"
	PatchedSystemSettingsRequestTimeZoneEtcUCT                         PatchedSystemSettingsRequestTimeZone = "Etc/UCT"
	PatchedSystemSettingsRequestTimeZoneEtcUTC                         PatchedSystemSettingsRequestTimeZone = "Etc/UTC"
	PatchedSystemSettingsRequestTimeZoneEtcUniversal                   PatchedSystemSettingsRequestTimeZone = "Etc/Universal"
	PatchedSystemSettingsRequestTimeZoneEtcZulu                        PatchedSystemSettingsRequestTimeZone = "Etc/Zulu"
	PatchedSystemSettingsRequestTimeZoneEuropeAmsterdam                PatchedSystemSettingsRequestTimeZone = "Europe/Amsterdam"
	PatchedSystemSettingsRequestTimeZoneEuropeAndorra                  PatchedSystemSettingsRequestTimeZone = "Europe/Andorra"
	PatchedSystemSettingsRequestTimeZoneEuropeAstrakhan                PatchedSystemSettingsRequestTimeZone = "Europe/Astrakhan"
	PatchedSystemSettingsRequestTimeZoneEuropeAthens                   PatchedSystemSettingsRequestTimeZone = "Europe/Athens"
	PatchedSystemSettingsRequestTimeZoneEuropeBelfast                  PatchedSystemSettingsRequestTimeZone = "Europe/Belfast"
	PatchedSystemSettingsRequestTimeZoneEuropeBelgrade                 PatchedSystemSettingsRequestTimeZone = "Europe/Belgrade"
	PatchedSystemSettingsRequestTimeZoneEuropeBerlin                   PatchedSystemSettingsRequestTimeZone = "Europe/Berlin"
	PatchedSystemSettingsRequestTimeZoneEuropeBratislava               PatchedSystemSettingsRequestTimeZone = "Europe/Bratislava"
	PatchedSystemSettingsRequestTimeZoneEuropeBrussels                 PatchedSystemSettingsRequestTimeZone = "Europe/Brussels"
	PatchedSystemSettingsRequestTimeZoneEuropeBucharest                PatchedSystemSettingsRequestTimeZone = "Europe/Bucharest"
	PatchedSystemSettingsRequestTimeZoneEuropeBudapest                 PatchedSystemSettingsRequestTimeZone = "Europe/Budapest"
	PatchedSystemSettingsRequestTimeZoneEuropeBusingen                 PatchedSystemSettingsRequestTimeZone = "Europe/Busingen"
	PatchedSystemSettingsRequestTimeZoneEuropeChisinau                 PatchedSystemSettingsRequestTimeZone = "Europe/Chisinau"
	PatchedSystemSettingsRequestTimeZoneEuropeCopenhagen               PatchedSystemSettingsRequestTimeZone = "Europe/Copenhagen"
	PatchedSystemSettingsRequestTimeZoneEuropeDublin                   PatchedSystemSettingsRequestTimeZone = "Europe/Dublin"
	PatchedSystemSettingsRequestTimeZoneEuropeGibraltar                PatchedSystemSettingsRequestTimeZone = "Europe/Gibraltar"
	PatchedSystemSettingsRequestTimeZoneEuropeGuernsey                 PatchedSystemSettingsRequestTimeZone = "Europe/Guernsey"
	PatchedSystemSettingsRequestTimeZoneEuropeHelsinki                 PatchedSystemSettingsRequestTimeZone = "Europe/Helsinki"
	PatchedSystemSettingsRequestTimeZoneEuropeIsleOfMan                PatchedSystemSettingsRequestTimeZone = "Europe/Isle_of_Man"
	PatchedSystemSettingsRequestTimeZoneEuropeIstanbul                 PatchedSystemSettingsRequestTimeZone = "Europe/Istanbul"
	PatchedSystemSettingsRequestTimeZoneEuropeJersey                   PatchedSystemSettingsRequestTimeZone = "Europe/Jersey"
	PatchedSystemSettingsRequestTimeZoneEuropeKaliningrad              PatchedSystemSettingsRequestTimeZone = "Europe/Kaliningrad"
	PatchedSystemSettingsRequestTimeZoneEuropeKiev                     PatchedSystemSettingsRequestTimeZone = "Europe/Kiev"
	PatchedSystemSettingsRequestTimeZoneEuropeKirov                    PatchedSystemSettingsRequestTimeZone = "Europe/Kirov"
	PatchedSystemSettingsRequestTimeZoneEuropeKyiv                     PatchedSystemSettingsRequestTimeZone = "Europe/Kyiv"
	PatchedSystemSettingsRequestTimeZoneEuropeLisbon                   PatchedSystemSettingsRequestTimeZone = "Europe/Lisbon"
	PatchedSystemSettingsRequestTimeZoneEuropeLjubljana                PatchedSystemSettingsRequestTimeZone = "Europe/Ljubljana"
	PatchedSystemSettingsRequestTimeZoneEuropeLondon                   PatchedSystemSettingsRequestTimeZone = "Europe/London"
	PatchedSystemSettingsRequestTimeZoneEuropeLuxembourg               PatchedSystemSettingsRequestTimeZone = "Europe/Luxembourg"
	PatchedSystemSettingsRequestTimeZoneEuropeMadrid                   PatchedSystemSettingsRequestTimeZone = "Europe/Madrid"
	PatchedSystemSettingsRequestTimeZoneEuropeMalta                    PatchedSystemSettingsRequestTimeZone = "Europe/Malta"
	PatchedSystemSettingsRequestTimeZoneEuropeMariehamn                PatchedSystemSettingsRequestTimeZone = "Europe/Mariehamn"
	PatchedSystemSettingsRequestTimeZoneEuropeMinsk                    PatchedSystemSettingsRequestTimeZone = "Europe/Minsk"
	PatchedSystemSettingsRequestTimeZoneEuropeMonaco                   PatchedSystemSettingsRequestTimeZone = "Europe/Monaco"
	PatchedSystemSettingsRequestTimeZoneEuropeMoscow                   PatchedSystemSettingsRequestTimeZone = "Europe/Moscow"
	PatchedSystemSettingsRequestTimeZoneEuropeNicosia                  PatchedSystemSettingsRequestTimeZone = "Europe/Nicosia"
	PatchedSystemSettingsRequestTimeZoneEuropeOslo                     PatchedSystemSettingsRequestTimeZone = "Europe/Oslo"
	PatchedSystemSettingsRequestTimeZoneEuropeParis                    PatchedSystemSettingsRequestTimeZone = "Europe/Paris"
	PatchedSystemSettingsRequestTimeZoneEuropePodgorica                PatchedSystemSettingsRequestTimeZone = "Europe/Podgorica"
	PatchedSystemSettingsRequestTimeZoneEuropePrague                   PatchedSystemSettingsRequestTimeZone = "Europe/Prague"
	PatchedSystemSettingsRequestTimeZoneEuropeRiga                     PatchedSystemSettingsRequestTimeZone = "Europe/Riga"
	PatchedSystemSettingsRequestTimeZoneEuropeRome                     PatchedSystemSettingsRequestTimeZone = "Europe/Rome"
	PatchedSystemSettingsRequestTimeZoneEuropeSamara                   PatchedSystemSettingsRequestTimeZone = "Europe/Samara"
	PatchedSystemSettingsRequestTimeZoneEuropeSanMarino                PatchedSystemSettingsRequestTimeZone = "Europe/San_Marino"
	PatchedSystemSettingsRequestTimeZoneEuropeSarajevo                 PatchedSystemSettingsRequestTimeZone = "Europe/Sarajevo"
	PatchedSystemSettingsRequestTimeZoneEuropeSaratov                  PatchedSystemSettingsRequestTimeZone = "Europe/Saratov"
	PatchedSystemSettingsRequestTimeZoneEuropeSimferopol               PatchedSystemSettingsRequestTimeZone = "Europe/Simferopol"
	PatchedSystemSettingsRequestTimeZoneEuropeSkopje                   PatchedSystemSettingsRequestTimeZone = "Europe/Skopje"
	PatchedSystemSettingsRequestTimeZoneEuropeSofia                    PatchedSystemSettingsRequestTimeZone = "Europe/Sofia"
	PatchedSystemSettingsRequestTimeZoneEuropeStockholm                PatchedSystemSettingsRequestTimeZone = "Europe/Stockholm"
	PatchedSystemSettingsRequestTimeZoneEuropeTallinn                  PatchedSystemSettingsRequestTimeZone = "Europe/Tallinn"
	PatchedSystemSettingsRequestTimeZoneEuropeTirane                   PatchedSystemSettingsRequestTimeZone = "Europe/Tirane"
	PatchedSystemSettingsRequestTimeZoneEuropeTiraspol                 PatchedSystemSettingsRequestTimeZone = "Europe/Tiraspol"
	PatchedSystemSettingsRequestTimeZoneEuropeUlyanovsk                PatchedSystemSettingsRequestTimeZone = "Europe/Ulyanovsk"
	PatchedSystemSettingsRequestTimeZoneEuropeUzhgorod                 PatchedSystemSettingsRequestTimeZone = "Europe/Uzhgorod"
	PatchedSystemSettingsRequestTimeZoneEuropeVaduz                    PatchedSystemSettingsRequestTimeZone = "Europe/Vaduz"
	PatchedSystemSettingsRequestTimeZoneEuropeVatican                  PatchedSystemSettingsRequestTimeZone = "Europe/Vatican"
	PatchedSystemSettingsRequestTimeZoneEuropeVienna                   PatchedSystemSettingsRequestTimeZone = "Europe/Vienna"
	PatchedSystemSettingsRequestTimeZoneEuropeVilnius                  PatchedSystemSettingsRequestTimeZone = "Europe/Vilnius"
	PatchedSystemSettingsRequestTimeZoneEuropeVolgograd                PatchedSystemSettingsRequestTimeZone = "Europe/Volgograd"
	PatchedSystemSettingsRequestTimeZoneEuropeWarsaw                   PatchedSystemSettingsRequestTimeZone = "Europe/Warsaw"
	PatchedSystemSettingsRequestTimeZoneEuropeZagreb                   PatchedSystemSettingsRequestTimeZone = "Europe/Zagreb"
	PatchedSystemSettingsRequestTimeZoneEuropeZaporozhye               PatchedSystemSettingsRequestTimeZone = "Europe/Zaporozhye"
	PatchedSystemSettingsRequestTimeZoneEuropeZurich                   PatchedSystemSettingsRequestTimeZone = "Europe/Zurich"
	PatchedSystemSettingsRequestTimeZoneGB                             PatchedSystemSettingsRequestTimeZone = "GB"
	PatchedSystemSettingsRequestTimeZoneGBEire                         PatchedSystemSettingsRequestTimeZone = "GB-Eire"
	PatchedSystemSettingsRequestTimeZoneGMT                            PatchedSystemSettingsRequestTimeZone = "GMT"
	PatchedSystemSettingsRequestTimeZoneGMT0                           PatchedSystemSettingsRequestTimeZone = "GMT+0"
	PatchedSystemSettingsRequestTimeZoneGMT01                          PatchedSystemSettingsRequestTimeZone = "GMT-0"
	PatchedSystemSettingsRequestTimeZoneGMT02                          PatchedSystemSettingsRequestTimeZone = "GMT0"
	PatchedSystemSettingsRequestTimeZoneGreenwich                      PatchedSystemSettingsRequestTimeZone = "Greenwich"
	PatchedSystemSettingsRequestTimeZoneHST                            PatchedSystemSettingsRequestTimeZone = "HST"
	PatchedSystemSettingsRequestTimeZoneHongkong                       PatchedSystemSettingsRequestTimeZone = "Hongkong"
	PatchedSystemSettingsRequestTimeZoneIceland                        PatchedSystemSettingsRequestTimeZone = "Iceland"
	PatchedSystemSettingsRequestTimeZoneIndianAntananarivo             PatchedSystemSettingsRequestTimeZone = "Indian/Antananarivo"
	PatchedSystemSettingsRequestTimeZoneIndianChagos                   PatchedSystemSettingsRequestTimeZone = "Indian/Chagos"
	PatchedSystemSettingsRequestTimeZoneIndianChristmas                PatchedSystemSettingsRequestTimeZone = "Indian/Christmas"
	PatchedSystemSettingsRequestTimeZoneIndianCocos                    PatchedSystemSettingsRequestTimeZone = "Indian/Cocos"
	PatchedSystemSettingsRequestTimeZoneIndianComoro                   PatchedSystemSettingsRequestTimeZone = "Indian/Comoro"
	PatchedSystemSettingsRequestTimeZoneIndianKerguelen                PatchedSystemSettingsRequestTimeZone = "Indian/Kerguelen"
	PatchedSystemSettingsRequestTimeZoneIndianMahe                     PatchedSystemSettingsRequestTimeZone = "Indian/Mahe"
	PatchedSystemSettingsRequestTimeZoneIndianMaldives                 PatchedSystemSettingsRequestTimeZone = "Indian/Maldives"
	PatchedSystemSettingsRequestTimeZoneIndianMauritius                PatchedSystemSettingsRequestTimeZone = "Indian/Mauritius"
	PatchedSystemSettingsRequestTimeZoneIndianMayotte                  PatchedSystemSettingsRequestTimeZone = "Indian/Mayotte"
	PatchedSystemSettingsRequestTimeZoneIndianReunion                  PatchedSystemSettingsRequestTimeZone = "Indian/Reunion"
	PatchedSystemSettingsRequestTimeZoneIran                           PatchedSystemSettingsRequestTimeZone = "Iran"
	PatchedSystemSettingsRequestTimeZoneIsrael                         PatchedSystemSettingsRequestTimeZone = "Israel"
	PatchedSystemSettingsRequestTimeZoneJamaica                        PatchedSystemSettingsRequestTimeZone = "Jamaica"
	PatchedSystemSettingsRequestTimeZoneJapan                          PatchedSystemSettingsRequestTimeZone = "Japan"
	PatchedSystemSettingsRequestTimeZoneKwajalein                      PatchedSystemSettingsRequestTimeZone = "Kwajalein"
	PatchedSystemSettingsRequestTimeZoneLibya                          PatchedSystemSettingsRequestTimeZone = "Libya"
	PatchedSystemSettingsRequestTimeZoneMET                            PatchedSystemSettingsRequestTimeZone = "MET"
	PatchedSystemSettingsRequestTimeZoneMST                            PatchedSystemSettingsRequestTimeZone = "MST"
	PatchedSystemSettingsRequestTimeZoneMST7MDT                        PatchedSystemSettingsRequestTimeZone = "MST7MDT"
	PatchedSystemSettingsRequestTimeZoneMexicoBajaNorte                PatchedSystemSettingsRequestTimeZone = "Mexico/BajaNorte"
	PatchedSystemSettingsRequestTimeZoneMexicoBajaSur                  PatchedSystemSettingsRequestTimeZone = "Mexico/BajaSur"
	PatchedSystemSettingsRequestTimeZoneMexicoGeneral                  PatchedSystemSettingsRequestTimeZone = "Mexico/General"
	PatchedSystemSettingsRequestTimeZoneNZ                             PatchedSystemSettingsRequestTimeZone = "NZ"
	PatchedSystemSettingsRequestTimeZoneNZCHAT                         PatchedSystemSettingsRequestTimeZone = "NZ-CHAT"
	PatchedSystemSettingsRequestTimeZoneNavajo                         PatchedSystemSettingsRequestTimeZone = "Navajo"
	PatchedSystemSettingsRequestTimeZonePRC                            PatchedSystemSettingsRequestTimeZone = "PRC"
	PatchedSystemSettingsRequestTimeZonePST8PDT                        PatchedSystemSettingsRequestTimeZone = "PST8PDT"
	PatchedSystemSettingsRequestTimeZonePacificApia                    PatchedSystemSettingsRequestTimeZone = "Pacific/Apia"
	PatchedSystemSettingsRequestTimeZonePacificAuckland                PatchedSystemSettingsRequestTimeZone = "Pacific/Auckland"
	PatchedSystemSettingsRequestTimeZonePacificBougainville            PatchedSystemSettingsRequestTimeZone = "Pacific/Bougainville"
	PatchedSystemSettingsRequestTimeZonePacificChatham                 PatchedSystemSettingsRequestTimeZone = "Pacific/Chatham"
	PatchedSystemSettingsRequestTimeZonePacificChuuk                   PatchedSystemSettingsRequestTimeZone = "Pacific/Chuuk"
	PatchedSystemSettingsRequestTimeZonePacificEaster                  PatchedSystemSettingsRequestTimeZone = "Pacific/Easter"
	PatchedSystemSettingsRequestTimeZonePacificEfate                   PatchedSystemSettingsRequestTimeZone = "Pacific/Efate"
	PatchedSystemSettingsRequestTimeZonePacificEnderbury               PatchedSystemSettingsRequestTimeZone = "Pacific/Enderbury"
	PatchedSystemSettingsRequestTimeZonePacificFakaofo                 PatchedSystemSettingsRequestTimeZone = "Pacific/Fakaofo"
	PatchedSystemSettingsRequestTimeZonePacificFiji                    PatchedSystemSettingsRequestTimeZone = "Pacific/Fiji"
	PatchedSystemSettingsRequestTimeZonePacificFunafuti                PatchedSystemSettingsRequestTimeZone = "Pacific/Funafuti"
	PatchedSystemSettingsRequestTimeZonePacificGalapagos               PatchedSystemSettingsRequestTimeZone = "Pacific/Galapagos"
	PatchedSystemSettingsRequestTimeZonePacificGambier                 PatchedSystemSettingsRequestTimeZone = "Pacific/Gambier"
	PatchedSystemSettingsRequestTimeZonePacificGuadalcanal             PatchedSystemSettingsRequestTimeZone = "Pacific/Guadalcanal"
	PatchedSystemSettingsRequestTimeZonePacificGuam                    PatchedSystemSettingsRequestTimeZone = "Pacific/Guam"
	PatchedSystemSettingsRequestTimeZonePacificHonolulu                PatchedSystemSettingsRequestTimeZone = "Pacific/Honolulu"
	PatchedSystemSettingsRequestTimeZonePacificJohnston                PatchedSystemSettingsRequestTimeZone = "Pacific/Johnston"
	PatchedSystemSettingsRequestTimeZonePacificKanton                  PatchedSystemSettingsRequestTimeZone = "Pacific/Kanton"
	PatchedSystemSettingsRequestTimeZonePacificKiritimati              PatchedSystemSettingsRequestTimeZone = "Pacific/Kiritimati"
	PatchedSystemSettingsRequestTimeZonePacificKosrae                  PatchedSystemSettingsRequestTimeZone = "Pacific/Kosrae"
	PatchedSystemSettingsRequestTimeZonePacificKwajalein               PatchedSystemSettingsRequestTimeZone = "Pacific/Kwajalein"
	PatchedSystemSettingsRequestTimeZonePacificMajuro                  PatchedSystemSettingsRequestTimeZone = "Pacific/Majuro"
	PatchedSystemSettingsRequestTimeZonePacificMarquesas               PatchedSystemSettingsRequestTimeZone = "Pacific/Marquesas"
	PatchedSystemSettingsRequestTimeZonePacificMidway                  PatchedSystemSettingsRequestTimeZone = "Pacific/Midway"
	PatchedSystemSettingsRequestTimeZonePacificNauru                   PatchedSystemSettingsRequestTimeZone = "Pacific/Nauru"
	PatchedSystemSettingsRequestTimeZonePacificNiue                    PatchedSystemSettingsRequestTimeZone = "Pacific/Niue"
	PatchedSystemSettingsRequestTimeZonePacificNorfolk                 PatchedSystemSettingsRequestTimeZone = "Pacific/Norfolk"
	PatchedSystemSettingsRequestTimeZonePacificNoumea                  PatchedSystemSettingsRequestTimeZone = "Pacific/Noumea"
	PatchedSystemSettingsRequestTimeZonePacificPagoPago                PatchedSystemSettingsRequestTimeZone = "Pacific/Pago_Pago"
	PatchedSystemSettingsRequestTimeZonePacificPalau                   PatchedSystemSettingsRequestTimeZone = "Pacific/Palau"
	PatchedSystemSettingsRequestTimeZonePacificPitcairn                PatchedSystemSettingsRequestTimeZone = "Pacific/Pitcairn"
	PatchedSystemSettingsRequestTimeZonePacificPohnpei                 PatchedSystemSettingsRequestTimeZone = "Pacific/Pohnpei"
	PatchedSystemSettingsRequestTimeZonePacificPonape                  PatchedSystemSettingsRequestTimeZone = "Pacific/Ponape"
	PatchedSystemSettingsRequestTimeZonePacificPortMoresby             PatchedSystemSettingsRequestTimeZone = "Pacific/Port_Moresby"
	PatchedSystemSettingsRequestTimeZonePacificRarotonga               PatchedSystemSettingsRequestTimeZone = "Pacific/Rarotonga"
	PatchedSystemSettingsRequestTimeZonePacificSaipan                  PatchedSystemSettingsRequestTimeZone = "Pacific/Saipan"
	PatchedSystemSettingsRequestTimeZonePacificSamoa                   PatchedSystemSettingsRequestTimeZone = "Pacific/Samoa"
	PatchedSystemSettingsRequestTimeZonePacificTahiti                  PatchedSystemSettingsRequestTimeZone = "Pacific/Tahiti"
	PatchedSystemSettingsRequestTimeZonePacificTarawa                  PatchedSystemSettingsRequestTimeZone = "Pacific/Tarawa"
	PatchedSystemSettingsRequestTimeZonePacificTongatapu               PatchedSystemSettingsRequestTimeZone = "Pacific/Tongatapu"
	PatchedSystemSettingsRequestTimeZonePacificTruk                    PatchedSystemSettingsRequestTimeZone = "Pacific/Truk"
	PatchedSystemSettingsRequestTimeZonePacificWake                    PatchedSystemSettingsRequestTimeZone = "Pacific/Wake"
	PatchedSystemSettingsRequestTimeZonePacificWallis                  PatchedSystemSettingsRequestTimeZone = "Pacific/Wallis"
	PatchedSystemSettingsRequestTimeZonePacificYap                     PatchedSystemSettingsRequestTimeZone = "Pacific/Yap"
	PatchedSystemSettingsRequestTimeZonePoland                         PatchedSystemSettingsRequestTimeZone = "Poland"
	PatchedSystemSettingsRequestTimeZonePortugal                       PatchedSystemSettingsRequestTimeZone = "Portugal"
	PatchedSystemSettingsRequestTimeZoneROC                            PatchedSystemSettingsRequestTimeZone = "ROC"
	PatchedSystemSettingsRequestTimeZoneROK                            PatchedSystemSettingsRequestTimeZone = "ROK"
	PatchedSystemSettingsRequestTimeZoneSingapore                      PatchedSystemSettingsRequestTimeZone = "Singapore"
	PatchedSystemSettingsRequestTimeZoneTurkey                         PatchedSystemSettingsRequestTimeZone = "Turkey"
	PatchedSystemSettingsRequestTimeZoneUCT                            PatchedSystemSettingsRequestTimeZone = "UCT"
	PatchedSystemSettingsRequestTimeZoneUSAlaska                       PatchedSystemSettingsRequestTimeZone = "US/Alaska"
	PatchedSystemSettingsRequestTimeZoneUSAleutian                     PatchedSystemSettingsRequestTimeZone = "US/Aleutian"
	PatchedSystemSettingsRequestTimeZoneUSArizona                      PatchedSystemSettingsRequestTimeZone = "US/Arizona"
	PatchedSystemSettingsRequestTimeZoneUSCentral                      PatchedSystemSettingsRequestTimeZone = "US/Central"
	PatchedSystemSettingsRequestTimeZoneUSEastIndiana                  PatchedSystemSettingsRequestTimeZone = "US/East-Indiana"
	PatchedSystemSettingsRequestTimeZoneUSEastern                      PatchedSystemSettingsRequestTimeZone = "US/Eastern"
	PatchedSystemSettingsRequestTimeZoneUSHawaii                       PatchedSystemSettingsRequestTimeZone = "US/Hawaii"
	PatchedSystemSettingsRequestTimeZoneUSIndianaStarke                PatchedSystemSettingsRequestTimeZone = "US/Indiana-Starke"
	PatchedSystemSettingsRequestTimeZoneUSMichigan                     PatchedSystemSettingsRequestTimeZone = "US/Michigan"
	PatchedSystemSettingsRequestTimeZoneUSMountain                     PatchedSystemSettingsRequestTimeZone = "US/Mountain"
	PatchedSystemSettingsRequestTimeZoneUSPacific                      PatchedSystemSettingsRequestTimeZone = "US/Pacific"
	PatchedSystemSettingsRequestTimeZoneUSSamoa                        PatchedSystemSettingsRequestTimeZone = "US/Samoa"
	PatchedSystemSettingsRequestTimeZoneUTC                            PatchedSystemSettingsRequestTimeZone = "UTC"
	PatchedSystemSettingsRequestTimeZoneUniversal                      PatchedSystemSettingsRequestTimeZone = "Universal"
	PatchedSystemSettingsRequestTimeZoneWET                            PatchedSystemSettingsRequestTimeZone = "WET"
	PatchedSystemSettingsRequestTimeZoneWSU                            PatchedSystemSettingsRequestTimeZone = "W-SU"
	PatchedSystemSettingsRequestTimeZoneZulu                           PatchedSystemSettingsRequestTimeZone = "Zulu"
)

// Defines values for PatchedToolConfigurationRequestAuthenticationType.
const (
	PatchedToolConfigurationRequestAuthenticationTypeAPI      PatchedToolConfigurationRequestAuthenticationType = "API"
	PatchedToolConfigurationRequestAuthenticationTypeEmpty    PatchedToolConfigurationRequestAuthenticationType = ""
	PatchedToolConfigurationRequestAuthenticationTypeNil      PatchedToolConfigurationRequestAuthenticationType = "<nil>"
	PatchedToolConfigurationRequestAuthenticationTypePassword PatchedToolConfigurationRequestAuthenticationType = "Password"
	PatchedToolConfigurationRequestAuthenticationTypeSSH      PatchedToolConfigurationRequestAuthenticationType = "SSH"
)

// Defines values for ProductBusinessCriticality.
const (
	ProductBusinessCriticalityEmpty    ProductBusinessCriticality = ""
	ProductBusinessCriticalityHigh     ProductBusinessCriticality = "high"
	ProductBusinessCriticalityLow      ProductBusinessCriticality = "low"
	ProductBusinessCriticalityMedium   ProductBusinessCriticality = "medium"
	ProductBusinessCriticalityNil      ProductBusinessCriticality = "<nil>"
	ProductBusinessCriticalityNone     ProductBusinessCriticality = "none"
	ProductBusinessCriticalityVeryHigh ProductBusinessCriticality = "very high"
	ProductBusinessCriticalityVeryLow  ProductBusinessCriticality = "very low"
)

// Defines values for ProductLifecycle.
const (
	ProductLifecycleConstruction ProductLifecycle = "construction"
	ProductLifecycleEmpty        ProductLifecycle = ""
	ProductLifecycleNil          ProductLifecycle = "<nil>"
	ProductLifecycleProduction   ProductLifecycle = "production"
	ProductLifecycleRetirement   ProductLifecycle = "retirement"
)

// Defines values for ProductOrigin.
const (
	ProductOriginContractor        ProductOrigin = "contractor"
	ProductOriginEmpty             ProductOrigin = ""
	ProductOriginInternal          ProductOrigin = "internal"
	ProductOriginNil               ProductOrigin = "<nil>"
	ProductOriginOpenSource        ProductOrigin = "open source"
	ProductOriginOutsourced        ProductOrigin = "outsourced"
	ProductOriginPurchased         ProductOrigin = "purchased"
	ProductOriginThirdPartyLibrary ProductOrigin = "third party library"
)

// Defines values for ProductPlatform.
const (
	ProductPlatformDesktop    ProductPlatform = "desktop"
	ProductPlatformEmpty      ProductPlatform = ""
	ProductPlatformIot        ProductPlatform = "iot"
	ProductPlatformMobile     ProductPlatform = "mobile"
	ProductPlatformNil        ProductPlatform = "<nil>"
	ProductPlatformWeb        ProductPlatform = "web"
	ProductPlatformWebService ProductPlatform = "web service"
)

// Defines values for ProductRequestBusinessCriticality.
const (
	ProductRequestBusinessCriticalityEmpty    ProductRequestBusinessCriticality = ""
	ProductRequestBusinessCriticalityHigh     ProductRequestBusinessCriticality = "high"
	ProductRequestBusinessCriticalityLow      ProductRequestBusinessCriticality = "low"
	ProductRequestBusinessCriticalityMedium   ProductRequestBusinessCriticality = "medium"
	ProductRequestBusinessCriticalityNil      ProductRequestBusinessCriticality = "<nil>"
	ProductRequestBusinessCriticalityNone     ProductRequestBusinessCriticality = "none"
	ProductRequestBusinessCriticalityVeryHigh ProductRequestBusinessCriticality = "very high"
	ProductRequestBusinessCriticalityVeryLow  ProductRequestBusinessCriticality = "very low"
)

// Defines values for ProductRequestLifecycle.
const (
	ProductRequestLifecycleConstruction ProductRequestLifecycle = "construction"
	ProductRequestLifecycleEmpty        ProductRequestLifecycle = ""
	ProductRequestLifecycleNil          ProductRequestLifecycle = "<nil>"
	ProductRequestLifecycleProduction   ProductRequestLifecycle = "production"
	ProductRequestLifecycleRetirement   ProductRequestLifecycle = "retirement"
)

// Defines values for ProductRequestOrigin.
const (
	ProductRequestOriginContractor        ProductRequestOrigin = "contractor"
	ProductRequestOriginEmpty             ProductRequestOrigin = ""
	ProductRequestOriginInternal          ProductRequestOrigin = "internal"
	ProductRequestOriginNil               ProductRequestOrigin = "<nil>"
	ProductRequestOriginOpenSource        ProductRequestOrigin = "open source"
	ProductRequestOriginOutsourced        ProductRequestOrigin = "outsourced"
	ProductRequestOriginPurchased         ProductRequestOrigin = "purchased"
	ProductRequestOriginThirdPartyLibrary ProductRequestOrigin = "third party library"
)

// Defines values for ProductRequestPlatform.
const (
	ProductRequestPlatformDesktop    ProductRequestPlatform = "desktop"
	ProductRequestPlatformEmpty      ProductRequestPlatform = ""
	ProductRequestPlatformIot        ProductRequestPlatform = "iot"
	ProductRequestPlatformMobile     ProductRequestPlatform = "mobile"
	ProductRequestPlatformNil        ProductRequestPlatform = "<nil>"
	ProductRequestPlatformWeb        ProductRequestPlatform = "web"
	ProductRequestPlatformWebService ProductRequestPlatform = "web service"
)

// Defines values for ReImportScanGroupBy.
const (
	ReImportScanGroupByComponentName                 ReImportScanGroupBy = "component_name"
	ReImportScanGroupByComponentNameComponentVersion ReImportScanGroupBy = "component_name+component_version"
	ReImportScanGroupByFilePath                      ReImportScanGroupBy = "file_path"
	ReImportScanGroupByFindingTitle                  ReImportScanGroupBy = "finding_title"
)

// Defines values for ReImportScanMinimumSeverity.
const (
	ReImportScanMinimumSeverityCritical ReImportScanMinimumSeverity = "Critical"
	ReImportScanMinimumSeverityHigh     ReImportScanMinimumSeverity = "High"
	ReImportScanMinimumSeverityInfo     ReImportScanMinimumSeverity = "Info"
	ReImportScanMinimumSeverityLow      ReImportScanMinimumSeverity = "Low"
	ReImportScanMinimumSeverityMedium   ReImportScanMinimumSeverity = "Medium"
)

// Defines values for ReImportScanScanType.
const (
	ReImportScanScanTypeAWSProwlerScan                                 ReImportScanScanType = "AWS Prowler Scan"
	ReImportScanScanTypeAWSProwlerV3                                   ReImportScanScanType = "AWS Prowler V3"
	ReImportScanScanTypeAWSScout2Scan                                  ReImportScanScanType = "AWS Scout2 Scan"
	ReImportScanScanTypeAWSSecurityFindingFormatASFFScan               ReImportScanScanType = "AWS Security Finding Format (ASFF) Scan"
	ReImportScanScanTypeAWSSecurityHubScan                             ReImportScanScanType = "AWS Security Hub Scan"
	ReImportScanScanTypeAcunetix360Scan                                ReImportScanScanType = "Acunetix360 Scan"
	ReImportScanScanTypeAcunetixScan                                   ReImportScanScanType = "Acunetix Scan"
	ReImportScanScanTypeAnchoreCTLPoliciesReport                       ReImportScanScanType = "AnchoreCTL Policies Report"
	ReImportScanScanTypeAnchoreCTLVulnReport                           ReImportScanScanType = "AnchoreCTL Vuln Report"
	ReImportScanScanTypeAnchoreEngineScan                              ReImportScanScanType = "Anchore Engine Scan"
	ReImportScanScanTypeAnchoreEnterprisePolicyCheck                   ReImportScanScanType = "Anchore Enterprise Policy Check"
	ReImportScanScanTypeAnchoreGrype                                   ReImportScanScanType = "Anchore Grype"
	ReImportScanScanTypeAppSpiderScan                                  ReImportScanScanType = "AppSpider Scan"
	ReImportScanScanTypeAquaScan                                       ReImportScanScanType = "Aqua Scan"
	ReImportScanScanTypeArachniScan                                    ReImportScanScanType = "Arachni Scan"
	ReImportScanScanTypeAuditJSScan                                    ReImportScanScanType = "AuditJS Scan"
	ReImportScanScanTypeAzureSecurityCenterRecommendationsScan         ReImportScanScanType = "Azure Security Center Recommendations Scan"
	ReImportScanScanTypeBanditScan                                     ReImportScanScanType = "Bandit Scan"
	ReImportScanScanTypeBlackDuckAPI                                   ReImportScanScanType = "BlackDuck API"
	ReImportScanScanTypeBlackduckComponentRisk                         ReImportScanScanType = "Blackduck Component Risk"
	ReImportScanScanTypeBlackduckHubScan                               ReImportScanScanType = "Blackduck Hub Scan"
	ReImportScanScanTypeBrakemanScan                                   ReImportScanScanType = "Brakeman Scan"
	ReImportScanScanTypeBugCrowdScan                                   ReImportScanScanType = "BugCrowd Scan"
	ReImportScanScanTypeBugcrowdAPIImport                              ReImportScanScanType = "Bugcrowd API Import"
	ReImportScanScanTypeBundlerAuditScan                               ReImportScanScanType = "Bundler-Audit Scan"
	ReImportScanScanTypeBurpEnterpriseScan                             ReImportScanScanType = "Burp Enterprise Scan"
	ReImportScanScanTypeBurpGraphQLAPI                                 ReImportScanScanType = "Burp GraphQL API"
	ReImportScanScanTypeBurpRESTAPI                                    ReImportScanScanType = "Burp REST API"
	ReImportScanScanTypeBurpScan                                       ReImportScanScanType = "Burp Scan"
	ReImportScanScanTypeCargoAuditScan                                 ReImportScanScanType = "CargoAudit Scan"
	ReImportScanScanTypeCheckmarxOSA                                   ReImportScanScanType = "Checkmarx OSA"
	ReImportScanScanTypeCheckmarxScan                                  ReImportScanScanType = "Checkmarx Scan"
	ReImportScanScanTypeCheckmarxScanDetailed                          ReImportScanScanType = "Checkmarx Scan detailed"
	ReImportScanScanTypeCheckovScan                                    ReImportScanScanType = "Checkov Scan"
	ReImportScanScanTypeClairKlarScan                                  ReImportScanScanType = "Clair Klar Scan"
	ReImportScanScanTypeClairScan                                      ReImportScanScanType = "Clair Scan"
	ReImportScanScanTypeCloudsploitScan                                ReImportScanScanType = "Cloudsploit Scan"
	ReImportScanScanTypeCobaltIoAPIImport                              ReImportScanScanType = "Cobalt.io API Import"
	ReImportScanScanTypeCobaltIoScan                                   ReImportScanScanType = "Cobalt.io Scan"
	ReImportScanScanTypeCodecheckerReportNative                        ReImportScanScanType = "Codechecker Report native"
	ReImportScanScanTypeContrastScan                                   ReImportScanScanType = "Contrast Scan"
	ReImportScanScanTypeCoverityAPI                                    ReImportScanScanType = "Coverity API"
	ReImportScanScanTypeCrashtestSecurityJSONFile                      ReImportScanScanType = "Crashtest Security JSON File"
	ReImportScanScanTypeCrashtestSecurityXMLFile                       ReImportScanScanType = "Crashtest Security XML File"
	ReImportScanScanTypeCredScanScan                                   ReImportScanScanType = "CredScan Scan"
	ReImportScanScanTypeCycloneDXScan                                  ReImportScanScanType = "CycloneDX Scan"
	ReImportScanScanTypeDSOPScan                                       ReImportScanScanType = "DSOP Scan"
	ReImportScanScanTypeDawnScannerScan                                ReImportScanScanType = "DawnScanner Scan"
	ReImportScanScanTypeDependencyCheckScan                            ReImportScanScanType = "Dependency Check Scan"
	ReImportScanScanTypeDependencyTrackFindingPackagingFormatFPFExport ReImportScanScanType = "Dependency Track Finding Packaging Format (FPF) Export"
	ReImportScanScanTypeDetectSecretsScan                              ReImportScanScanType = "Detect-secrets Scan"
	ReImportScanScanTypeDockerBenchSecurityScan                        ReImportScanScanType = "docker-bench-security Scan"
	ReImportScanScanTypeDockleScan                                     ReImportScanScanType = "Dockle Scan"
	ReImportScanScanTypeDrHeaderJSONImporter                           ReImportScanScanType = "DrHeader JSON Importer"
	ReImportScanScanTypeESLintScan                                     ReImportScanScanType = "ESLint Scan"
	ReImportScanScanTypeEdgescanScan                                   ReImportScanScanType = "Edgescan Scan"
	ReImportScanScanTypeFortifyScan                                    ReImportScanScanType = "Fortify Scan"
	ReImportScanScanTypeGenericFindingsImport                          ReImportScanScanType = "Generic Findings Import"
	ReImportScanScanTypeGgshieldScan                                   ReImportScanScanType = "Ggshield Scan"
	ReImportScanScanTypeGitLabAPIFuzzingReportScan                     ReImportScanScanType = "GitLab API Fuzzing Report Scan"
	ReImportScanScanTypeGitLabContainerScan                            ReImportScanScanType = "GitLab Container Scan"
	ReImportScanScanTypeGitLabDASTReport                               ReImportScanScanType = "GitLab DAST Report"
	ReImportScanScanTypeGitLabDependencyScanningReport                 ReImportScanScanType = "GitLab Dependency Scanning Report"
	ReImportScanScanTypeGitLabSASTReport                               ReImportScanScanType = "GitLab SAST Report"
	ReImportScanScanTypeGitLabSecretDetectionReport                    ReImportScanScanType = "GitLab Secret Detection Report"
	ReImportScanScanTypeGithubVulnerabilityScan                        ReImportScanScanType = "Github Vulnerability Scan"
	ReImportScanScanTypeGitleaksScan                                   ReImportScanScanType = "Gitleaks Scan"
	ReImportScanScanTypeGosecScanner                                   ReImportScanScanType = "Gosec Scanner"
	ReImportScanScanTypeGovulncheckScanner                             ReImportScanScanType = "Govulncheck Scanner"
	ReImportScanScanTypeHackerOneCases                                 ReImportScanScanType = "HackerOne Cases"
	ReImportScanScanTypeHadolintDockerfileCheck                        ReImportScanScanType = "Hadolint Dockerfile check"
	ReImportScanScanTypeHarborVulnerabilityScan                        ReImportScanScanType = "Harbor Vulnerability Scan"
	ReImportScanScanTypeHorusecScan                                    ReImportScanScanType = "Horusec Scan"
	ReImportScanScanTypeHuskyCIReport                                  ReImportScanScanType = "HuskyCI Report"
	ReImportScanScanTypeHydraScan                                      ReImportScanScanType = "Hydra Scan"
	ReImportScanScanTypeIBMAppScanDAST                                 ReImportScanScanType = "IBM AppScan DAST"
	ReImportScanScanTypeImmuniwebScan                                  ReImportScanScanType = "Immuniweb Scan"
	ReImportScanScanTypeIntSightsReport                                ReImportScanScanType = "IntSights Report"
	ReImportScanScanTypeJFrogXrayAPISummaryArtifactScan                ReImportScanScanType = "JFrog Xray API Summary Artifact Scan"
	ReImportScanScanTypeJFrogXrayScan                                  ReImportScanScanType = "JFrog Xray Scan"
	ReImportScanScanTypeJFrogXrayUnifiedScan                           ReImportScanScanType = "JFrog Xray Unified Scan"
	ReImportScanScanTypeKICSScan                                       ReImportScanScanType = "KICS Scan"
	ReImportScanScanTypeKiuwanScan                                     ReImportScanScanType = "Kiuwan Scan"
	ReImportScanScanTypeKubeBenchScan                                  ReImportScanScanType = "kube-bench Scan"
	ReImportScanScanTypeMeterianScan                                   ReImportScanScanType = "Meterian Scan"
	ReImportScanScanTypeMicrofocusWebinspectScan                       ReImportScanScanType = "Microfocus Webinspect Scan"
	ReImportScanScanTypeMobSFScan                                      ReImportScanScanType = "MobSF Scan"
	ReImportScanScanTypeMobsfscanScan                                  ReImportScanScanType = "Mobsfscan Scan"
	ReImportScanScanTypeMozillaObservatoryScan                         ReImportScanScanType = "Mozilla Observatory Scan"
	ReImportScanScanTypeNPMAuditScan                                   ReImportScanScanType = "NPM Audit Scan"
	ReImportScanScanTypeNetsparkerScan                                 ReImportScanScanType = "Netsparker Scan"
	ReImportScanScanTypeNeuVectorCompliance                            ReImportScanScanType = "NeuVector (compliance)"
	ReImportScanScanTypeNeuVectorREST                                  ReImportScanScanType = "NeuVector (REST)"
	ReImportScanScanTypeNexposeScan                                    ReImportScanScanType = "Nexpose Scan"
	ReImportScanScanTypeNiktoScan                                      ReImportScanScanType = "Nikto Scan"
	ReImportScanScanTypeNmapScan                                       ReImportScanScanType = "Nmap Scan"
	ReImportScanScanTypeNodeSecurityPlatformScan                       ReImportScanScanType = "Node Security Platform Scan"
	ReImportScanScanTypeNucleiScan                                     ReImportScanScanType = "Nuclei Scan"
	ReImportScanScanTypeORTEvaluatedModelImporter                      ReImportScanScanType = "ORT evaluated model Importer"
	ReImportScanScanTypeOpenVASCSV                                     ReImportScanScanType = "OpenVAS CSV"
	ReImportScanScanTypeOpenscapVulnerabilityScan                      ReImportScanScanType = "Openscap Vulnerability Scan"
	ReImportScanScanTypeOssIndexDevauditSCAScanImporter                ReImportScanScanType = "OssIndex Devaudit SCA Scan Importer"
	ReImportScanScanTypeOutpost24Scan                                  ReImportScanScanType = "Outpost24 Scan"
	ReImportScanScanTypePHPSecurityAuditV2                             ReImportScanScanType = "PHP Security Audit v2"
	ReImportScanScanTypePHPSymfonySecurityCheck                        ReImportScanScanType = "PHP Symfony Security Check"
	ReImportScanScanTypePMDScan                                        ReImportScanScanType = "PMD Scan"
	ReImportScanScanTypePWNSAST                                        ReImportScanScanType = "PWN SAST"
	ReImportScanScanTypePipAuditScan                                   ReImportScanScanType = "pip-audit Scan"
	ReImportScanScanTypePopeyeScan                                     ReImportScanScanType = "Popeye Scan"
	ReImportScanScanTypeQualysInfrastructureScanWebGUIXML              ReImportScanScanType = "Qualys Infrastructure Scan (WebGUI XML)"
	ReImportScanScanTypeQualysScan                                     ReImportScanScanType = "Qualys Scan"
	ReImportScanScanTypeQualysWebappScan                               ReImportScanScanType = "Qualys Webapp Scan"
	ReImportScanScanTypeRetireJsScan                                   ReImportScanScanType = "Retire.js Scan"
	ReImportScanScanTypeRiskReconAPIImporter                           ReImportScanScanType = "Risk Recon API Importer"
	ReImportScanScanTypeRubocopScan                                    ReImportScanScanType = "Rubocop Scan"
	ReImportScanScanTypeRustyHogScan                                   ReImportScanScanType = "Rusty Hog Scan"
	ReImportScanScanTypeSARIF                                          ReImportScanScanType = "SARIF"
	ReImportScanScanTypeSKFScan                                        ReImportScanScanType = "SKF Scan"
	ReImportScanScanTypeSSLLabsScan                                    ReImportScanScanType = "SSL Labs Scan"
	ReImportScanScanTypeSSLyzeScanJSON                                 ReImportScanScanType = "SSLyze Scan (JSON)"
	ReImportScanScanTypeScantistScan                                   ReImportScanScanType = "Scantist Scan"
	ReImportScanScanTypeScoutSuiteScan                                 ReImportScanScanType = "Scout Suite Scan"
	ReImportScanScanTypeSemgrepJSONReport                              ReImportScanScanType = "Semgrep JSON Report"
	ReImportScanScanTypeSnykScan                                       ReImportScanScanType = "Snyk Scan"
	ReImportScanScanTypeSolarAppscreenerScan                           ReImportScanScanType = "Solar Appscreener Scan"
	ReImportScanScanTypeSonarQubeAPIImport                             ReImportScanScanType = "SonarQube API Import"
	ReImportScanScanTypeSonarQubeScan                                  ReImportScanScanType = "SonarQube Scan"
	ReImportScanScanTypeSonarQubeScanDetailed                          ReImportScanScanType = "SonarQube Scan detailed"
	ReImportScanScanTypeSonatypeApplicationScan                        ReImportScanScanType = "Sonatype Application Scan"
	ReImportScanScanTypeSpotBugsScan                                   ReImportScanScanType = "SpotBugs Scan"
	ReImportScanScanTypeSslscan                                        ReImportScanScanType = "Sslscan"
	ReImportScanScanTypeSslyzeScan                                     ReImportScanScanType = "Sslyze Scan"
	ReImportScanScanTypeStackHawkHawkScan                              ReImportScanScanType = "StackHawk HawkScan"
	ReImportScanScanTypeTFSecScan                                      ReImportScanScanType = "TFSec Scan"
	ReImportScanScanTypeTalismanScan                                   ReImportScanScanType = "Talisman Scan"
	ReImportScanScanTypeTenableScan                                    ReImportScanScanType = "Tenable Scan"
	ReImportScanScanTypeTerrascanScan                                  ReImportScanScanType = "Terrascan Scan"
	ReImportScanScanTypeTestsslScan                                    ReImportScanScanType = "Testssl Scan"
	ReImportScanScanTypeTrivyOperatorScan                              ReImportScanScanType = "Trivy Operator Scan"
	ReImportScanScanTypeTrivyScan                                      ReImportScanScanType = "Trivy Scan"
	ReImportScanScanTypeTrufflehog3Scan                                ReImportScanScanType = "Trufflehog3 Scan"
	ReImportScanScanTypeTrufflehogScan                                 ReImportScanScanType = "Trufflehog Scan"
	ReImportScanScanTypeTrustwaveFusionAPIScan                         ReImportScanScanType = "Trustwave Fusion API Scan"
	ReImportScanScanTypeTrustwaveScanCSV                               ReImportScanScanType = "Trustwave Scan (CSV)"
	ReImportScanScanTypeTwistlockImageScan                             ReImportScanScanType = "Twistlock Image Scan"
	ReImportScanScanTypeVCGScan                                        ReImportScanScanType = "VCG Scan"
	ReImportScanScanTypeVeracodeScan                                   ReImportScanScanType = "Veracode Scan"
	ReImportScanScanTypeVeracodeSourceClearScan                        ReImportScanScanType = "Veracode SourceClear Scan"
	ReImportScanScanTypeVulners                                        ReImportScanScanType = "Vulners"
	ReImportScanScanTypeWFuzzJSONReport                                ReImportScanScanType = "WFuzz JSON report"
	ReImportScanScanTypeWapitiScan                                     ReImportScanScanType = "Wapiti Scan"
	ReImportScanScanTypeWazuh                                          ReImportScanScanType = "Wazuh"
	ReImportScanScanTypeWhispersScan                                   ReImportScanScanType = "Whispers Scan"
	ReImportScanScanTypeWhiteHatSentinel                               ReImportScanScanType = "WhiteHat Sentinel"
	ReImportScanScanTypeWhitesourceScan                                ReImportScanScanType = "Whitesource Scan"
	ReImportScanScanTypeWpscan                                         ReImportScanScanType = "Wpscan"
	ReImportScanScanTypeXanitizerScan                                  ReImportScanScanType = "Xanitizer Scan"
	ReImportScanScanTypeYarnAuditScan                                  ReImportScanScanType = "Yarn Audit Scan"
	ReImportScanScanTypeZAPScan                                        ReImportScanScanType = "ZAP Scan"
)

// Defines values for ReImportScanRequestGroupBy.
const (
	ReImportScanRequestGroupByComponentName                 ReImportScanRequestGroupBy = "component_name"
	ReImportScanRequestGroupByComponentNameComponentVersion ReImportScanRequestGroupBy = "component_name+component_version"
	ReImportScanRequestGroupByFilePath                      ReImportScanRequestGroupBy = "file_path"
	ReImportScanRequestGroupByFindingTitle                  ReImportScanRequestGroupBy = "finding_title"
)

// Defines values for ReImportScanRequestMinimumSeverity.
const (
	ReImportScanRequestMinimumSeverityCritical ReImportScanRequestMinimumSeverity = "Critical"
	ReImportScanRequestMinimumSeverityHigh     ReImportScanRequestMinimumSeverity = "High"
	ReImportScanRequestMinimumSeverityInfo     ReImportScanRequestMinimumSeverity = "Info"
	ReImportScanRequestMinimumSeverityLow      ReImportScanRequestMinimumSeverity = "Low"
	ReImportScanRequestMinimumSeverityMedium   ReImportScanRequestMinimumSeverity = "Medium"
)

// Defines values for ReImportScanRequestScanType.
const (
	ReImportScanRequestScanTypeAWSProwlerScan                                 ReImportScanRequestScanType = "AWS Prowler Scan"
	ReImportScanRequestScanTypeAWSProwlerV3                                   ReImportScanRequestScanType = "AWS Prowler V3"
	ReImportScanRequestScanTypeAWSScout2Scan                                  ReImportScanRequestScanType = "AWS Scout2 Scan"
	ReImportScanRequestScanTypeAWSSecurityFindingFormatASFFScan               ReImportScanRequestScanType = "AWS Security Finding Format (ASFF) Scan"
	ReImportScanRequestScanTypeAWSSecurityHubScan                             ReImportScanRequestScanType = "AWS Security Hub Scan"
	ReImportScanRequestScanTypeAcunetix360Scan                                ReImportScanRequestScanType = "Acunetix360 Scan"
	ReImportScanRequestScanTypeAcunetixScan                                   ReImportScanRequestScanType = "Acunetix Scan"
	ReImportScanRequestScanTypeAnchoreCTLPoliciesReport                       ReImportScanRequestScanType = "AnchoreCTL Policies Report"
	ReImportScanRequestScanTypeAnchoreCTLVulnReport                           ReImportScanRequestScanType = "AnchoreCTL Vuln Report"
	ReImportScanRequestScanTypeAnchoreEngineScan                              ReImportScanRequestScanType = "Anchore Engine Scan"
	ReImportScanRequestScanTypeAnchoreEnterprisePolicyCheck                   ReImportScanRequestScanType = "Anchore Enterprise Policy Check"
	ReImportScanRequestScanTypeAnchoreGrype                                   ReImportScanRequestScanType = "Anchore Grype"
	ReImportScanRequestScanTypeAppSpiderScan                                  ReImportScanRequestScanType = "AppSpider Scan"
	ReImportScanRequestScanTypeAquaScan                                       ReImportScanRequestScanType = "Aqua Scan"
	ReImportScanRequestScanTypeArachniScan                                    ReImportScanRequestScanType = "Arachni Scan"
	ReImportScanRequestScanTypeAuditJSScan                                    ReImportScanRequestScanType = "AuditJS Scan"
	ReImportScanRequestScanTypeAzureSecurityCenterRecommendationsScan         ReImportScanRequestScanType = "Azure Security Center Recommendations Scan"
	ReImportScanRequestScanTypeBanditScan                                     ReImportScanRequestScanType = "Bandit Scan"
	ReImportScanRequestScanTypeBlackDuckAPI                                   ReImportScanRequestScanType = "BlackDuck API"
	ReImportScanRequestScanTypeBlackduckComponentRisk                         ReImportScanRequestScanType = "Blackduck Component Risk"
	ReImportScanRequestScanTypeBlackduckHubScan                               ReImportScanRequestScanType = "Blackduck Hub Scan"
	ReImportScanRequestScanTypeBrakemanScan                                   ReImportScanRequestScanType = "Brakeman Scan"
	ReImportScanRequestScanTypeBugCrowdScan                                   ReImportScanRequestScanType = "BugCrowd Scan"
	ReImportScanRequestScanTypeBugcrowdAPIImport                              ReImportScanRequestScanType = "Bugcrowd API Import"
	ReImportScanRequestScanTypeBundlerAuditScan                               ReImportScanRequestScanType = "Bundler-Audit Scan"
	ReImportScanRequestScanTypeBurpEnterpriseScan                             ReImportScanRequestScanType = "Burp Enterprise Scan"
	ReImportScanRequestScanTypeBurpGraphQLAPI                                 ReImportScanRequestScanType = "Burp GraphQL API"
	ReImportScanRequestScanTypeBurpRESTAPI                                    ReImportScanRequestScanType = "Burp REST API"
	ReImportScanRequestScanTypeBurpScan                                       ReImportScanRequestScanType = "Burp Scan"
	ReImportScanRequestScanTypeCargoAuditScan                                 ReImportScanRequestScanType = "CargoAudit Scan"
	ReImportScanRequestScanTypeCheckmarxOSA                                   ReImportScanRequestScanType = "Checkmarx OSA"
	ReImportScanRequestScanTypeCheckmarxScan                                  ReImportScanRequestScanType = "Checkmarx Scan"
	ReImportScanRequestScanTypeCheckmarxScanDetailed                          ReImportScanRequestScanType = "Checkmarx Scan detailed"
	ReImportScanRequestScanTypeCheckovScan                                    ReImportScanRequestScanType = "Checkov Scan"
	ReImportScanRequestScanTypeClairKlarScan                                  ReImportScanRequestScanType = "Clair Klar Scan"
	ReImportScanRequestScanTypeClairScan                                      ReImportScanRequestScanType = "Clair Scan"
	ReImportScanRequestScanTypeCloudsploitScan                                ReImportScanRequestScanType = "Cloudsploit Scan"
	ReImportScanRequestScanTypeCobaltIoAPIImport                              ReImportScanRequestScanType = "Cobalt.io API Import"
	ReImportScanRequestScanTypeCobaltIoScan                                   ReImportScanRequestScanType = "Cobalt.io Scan"
	ReImportScanRequestScanTypeCodecheckerReportNative                        ReImportScanRequestScanType = "Codechecker Report native"
	ReImportScanRequestScanTypeContrastScan                                   ReImportScanRequestScanType = "Contrast Scan"
	ReImportScanRequestScanTypeCoverityAPI                                    ReImportScanRequestScanType = "Coverity API"
	ReImportScanRequestScanTypeCrashtestSecurityJSONFile                      ReImportScanRequestScanType = "Crashtest Security JSON File"
	ReImportScanRequestScanTypeCrashtestSecurityXMLFile                       ReImportScanRequestScanType = "Crashtest Security XML File"
	ReImportScanRequestScanTypeCredScanScan                                   ReImportScanRequestScanType = "CredScan Scan"
	ReImportScanRequestScanTypeCycloneDXScan                                  ReImportScanRequestScanType = "CycloneDX Scan"
	ReImportScanRequestScanTypeDSOPScan                                       ReImportScanRequestScanType = "DSOP Scan"
	ReImportScanRequestScanTypeDawnScannerScan                                ReImportScanRequestScanType = "DawnScanner Scan"
	ReImportScanRequestScanTypeDependencyCheckScan                            ReImportScanRequestScanType = "Dependency Check Scan"
	ReImportScanRequestScanTypeDependencyTrackFindingPackagingFormatFPFExport ReImportScanRequestScanType = "Dependency Track Finding Packaging Format (FPF) Export"
	ReImportScanRequestScanTypeDetectSecretsScan                              ReImportScanRequestScanType = "Detect-secrets Scan"
	ReImportScanRequestScanTypeDockerBenchSecurityScan                        ReImportScanRequestScanType = "docker-bench-security Scan"
	ReImportScanRequestScanTypeDockleScan                                     ReImportScanRequestScanType = "Dockle Scan"
	ReImportScanRequestScanTypeDrHeaderJSONImporter                           ReImportScanRequestScanType = "DrHeader JSON Importer"
	ReImportScanRequestScanTypeESLintScan                                     ReImportScanRequestScanType = "ESLint Scan"
	ReImportScanRequestScanTypeEdgescanScan                                   ReImportScanRequestScanType = "Edgescan Scan"
	ReImportScanRequestScanTypeFortifyScan                                    ReImportScanRequestScanType = "Fortify Scan"
	ReImportScanRequestScanTypeGenericFindingsImport                          ReImportScanRequestScanType = "Generic Findings Import"
	ReImportScanRequestScanTypeGgshieldScan                                   ReImportScanRequestScanType = "Ggshield Scan"
	ReImportScanRequestScanTypeGitLabAPIFuzzingReportScan                     ReImportScanRequestScanType = "GitLab API Fuzzing Report Scan"
	ReImportScanRequestScanTypeGitLabContainerScan                            ReImportScanRequestScanType = "GitLab Container Scan"
	ReImportScanRequestScanTypeGitLabDASTReport                               ReImportScanRequestScanType = "GitLab DAST Report"
	ReImportScanRequestScanTypeGitLabDependencyScanningReport                 ReImportScanRequestScanType = "GitLab Dependency Scanning Report"
	ReImportScanRequestScanTypeGitLabSASTReport                               ReImportScanRequestScanType = "GitLab SAST Report"
	ReImportScanRequestScanTypeGitLabSecretDetectionReport                    ReImportScanRequestScanType = "GitLab Secret Detection Report"
	ReImportScanRequestScanTypeGithubVulnerabilityScan                        ReImportScanRequestScanType = "Github Vulnerability Scan"
	ReImportScanRequestScanTypeGitleaksScan                                   ReImportScanRequestScanType = "Gitleaks Scan"
	ReImportScanRequestScanTypeGosecScanner                                   ReImportScanRequestScanType = "Gosec Scanner"
	ReImportScanRequestScanTypeGovulncheckScanner                             ReImportScanRequestScanType = "Govulncheck Scanner"
	ReImportScanRequestScanTypeHackerOneCases                                 ReImportScanRequestScanType = "HackerOne Cases"
	ReImportScanRequestScanTypeHadolintDockerfileCheck                        ReImportScanRequestScanType = "Hadolint Dockerfile check"
	ReImportScanRequestScanTypeHarborVulnerabilityScan                        ReImportScanRequestScanType = "Harbor Vulnerability Scan"
	ReImportScanRequestScanTypeHorusecScan                                    ReImportScanRequestScanType = "Horusec Scan"
	ReImportScanRequestScanTypeHuskyCIReport                                  ReImportScanRequestScanType = "HuskyCI Report"
	ReImportScanRequestScanTypeHydraScan                                      ReImportScanRequestScanType = "Hydra Scan"
	ReImportScanRequestScanTypeIBMAppScanDAST                                 ReImportScanRequestScanType = "IBM AppScan DAST"
	ReImportScanRequestScanTypeImmuniwebScan                                  ReImportScanRequestScanType = "Immuniweb Scan"
	ReImportScanRequestScanTypeIntSightsReport                                ReImportScanRequestScanType = "IntSights Report"
	ReImportScanRequestScanTypeJFrogXrayAPISummaryArtifactScan                ReImportScanRequestScanType = "JFrog Xray API Summary Artifact Scan"
	ReImportScanRequestScanTypeJFrogXrayScan                                  ReImportScanRequestScanType = "JFrog Xray Scan"
	ReImportScanRequestScanTypeJFrogXrayUnifiedScan                           ReImportScanRequestScanType = "JFrog Xray Unified Scan"
	ReImportScanRequestScanTypeKICSScan                                       ReImportScanRequestScanType = "KICS Scan"
	ReImportScanRequestScanTypeKiuwanScan                                     ReImportScanRequestScanType = "Kiuwan Scan"
	ReImportScanRequestScanTypeKubeBenchScan                                  ReImportScanRequestScanType = "kube-bench Scan"
	ReImportScanRequestScanTypeMeterianScan                                   ReImportScanRequestScanType = "Meterian Scan"
	ReImportScanRequestScanTypeMicrofocusWebinspectScan                       ReImportScanRequestScanType = "Microfocus Webinspect Scan"
	ReImportScanRequestScanTypeMobSFScan                                      ReImportScanRequestScanType = "MobSF Scan"
	ReImportScanRequestScanTypeMobsfscanScan                                  ReImportScanRequestScanType = "Mobsfscan Scan"
	ReImportScanRequestScanTypeMozillaObservatoryScan                         ReImportScanRequestScanType = "Mozilla Observatory Scan"
	ReImportScanRequestScanTypeNPMAuditScan                                   ReImportScanRequestScanType = "NPM Audit Scan"
	ReImportScanRequestScanTypeNetsparkerScan                                 ReImportScanRequestScanType = "Netsparker Scan"
	ReImportScanRequestScanTypeNeuVectorCompliance                            ReImportScanRequestScanType = "NeuVector (compliance)"
	ReImportScanRequestScanTypeNeuVectorREST                                  ReImportScanRequestScanType = "NeuVector (REST)"
	ReImportScanRequestScanTypeNexposeScan                                    ReImportScanRequestScanType = "Nexpose Scan"
	ReImportScanRequestScanTypeNiktoScan                                      ReImportScanRequestScanType = "Nikto Scan"
	ReImportScanRequestScanTypeNmapScan                                       ReImportScanRequestScanType = "Nmap Scan"
	ReImportScanRequestScanTypeNodeSecurityPlatformScan                       ReImportScanRequestScanType = "Node Security Platform Scan"
	ReImportScanRequestScanTypeNucleiScan                                     ReImportScanRequestScanType = "Nuclei Scan"
	ReImportScanRequestScanTypeORTEvaluatedModelImporter                      ReImportScanRequestScanType = "ORT evaluated model Importer"
	ReImportScanRequestScanTypeOpenVASCSV                                     ReImportScanRequestScanType = "OpenVAS CSV"
	ReImportScanRequestScanTypeOpenscapVulnerabilityScan                      ReImportScanRequestScanType = "Openscap Vulnerability Scan"
	ReImportScanRequestScanTypeOssIndexDevauditSCAScanImporter                ReImportScanRequestScanType = "OssIndex Devaudit SCA Scan Importer"
	ReImportScanRequestScanTypeOutpost24Scan                                  ReImportScanRequestScanType = "Outpost24 Scan"
	ReImportScanRequestScanTypePHPSecurityAuditV2                             ReImportScanRequestScanType = "PHP Security Audit v2"
	ReImportScanRequestScanTypePHPSymfonySecurityCheck                        ReImportScanRequestScanType = "PHP Symfony Security Check"
	ReImportScanRequestScanTypePMDScan                                        ReImportScanRequestScanType = "PMD Scan"
	ReImportScanRequestScanTypePWNSAST                                        ReImportScanRequestScanType = "PWN SAST"
	ReImportScanRequestScanTypePipAuditScan                                   ReImportScanRequestScanType = "pip-audit Scan"
	ReImportScanRequestScanTypePopeyeScan                                     ReImportScanRequestScanType = "Popeye Scan"
	ReImportScanRequestScanTypeQualysInfrastructureScanWebGUIXML              ReImportScanRequestScanType = "Qualys Infrastructure Scan (WebGUI XML)"
	ReImportScanRequestScanTypeQualysScan                                     ReImportScanRequestScanType = "Qualys Scan"
	ReImportScanRequestScanTypeQualysWebappScan                               ReImportScanRequestScanType = "Qualys Webapp Scan"
	ReImportScanRequestScanTypeRetireJsScan                                   ReImportScanRequestScanType = "Retire.js Scan"
	ReImportScanRequestScanTypeRiskReconAPIImporter                           ReImportScanRequestScanType = "Risk Recon API Importer"
	ReImportScanRequestScanTypeRubocopScan                                    ReImportScanRequestScanType = "Rubocop Scan"
	ReImportScanRequestScanTypeRustyHogScan                                   ReImportScanRequestScanType = "Rusty Hog Scan"
	ReImportScanRequestScanTypeSARIF                                          ReImportScanRequestScanType = "SARIF"
	ReImportScanRequestScanTypeSKFScan                                        ReImportScanRequestScanType = "SKF Scan"
	ReImportScanRequestScanTypeSSLLabsScan                                    ReImportScanRequestScanType = "SSL Labs Scan"
	ReImportScanRequestScanTypeSSLyzeScanJSON                                 ReImportScanRequestScanType = "SSLyze Scan (JSON)"
	ReImportScanRequestScanTypeScantistScan                                   ReImportScanRequestScanType = "Scantist Scan"
	ReImportScanRequestScanTypeScoutSuiteScan                                 ReImportScanRequestScanType = "Scout Suite Scan"
	ReImportScanRequestScanTypeSemgrepJSONReport                              ReImportScanRequestScanType = "Semgrep JSON Report"
	ReImportScanRequestScanTypeSnykScan                                       ReImportScanRequestScanType = "Snyk Scan"
	ReImportScanRequestScanTypeSolarAppscreenerScan                           ReImportScanRequestScanType = "Solar Appscreener Scan"
	ReImportScanRequestScanTypeSonarQubeAPIImport                             ReImportScanRequestScanType = "SonarQube API Import"
	ReImportScanRequestScanTypeSonarQubeScan                                  ReImportScanRequestScanType = "SonarQube Scan"
	ReImportScanRequestScanTypeSonarQubeScanDetailed                          ReImportScanRequestScanType = "SonarQube Scan detailed"
	ReImportScanRequestScanTypeSonatypeApplicationScan                        ReImportScanRequestScanType = "Sonatype Application Scan"
	ReImportScanRequestScanTypeSpotBugsScan                                   ReImportScanRequestScanType = "SpotBugs Scan"
	ReImportScanRequestScanTypeSslscan                                        ReImportScanRequestScanType = "Sslscan"
	ReImportScanRequestScanTypeSslyzeScan                                     ReImportScanRequestScanType = "Sslyze Scan"
	ReImportScanRequestScanTypeStackHawkHawkScan                              ReImportScanRequestScanType = "StackHawk HawkScan"
	ReImportScanRequestScanTypeTFSecScan                                      ReImportScanRequestScanType = "TFSec Scan"
	ReImportScanRequestScanTypeTalismanScan                                   ReImportScanRequestScanType = "Talisman Scan"
	ReImportScanRequestScanTypeTenableScan                                    ReImportScanRequestScanType = "Tenable Scan"
	ReImportScanRequestScanTypeTerrascanScan                                  ReImportScanRequestScanType = "Terrascan Scan"
	ReImportScanRequestScanTypeTestsslScan                                    ReImportScanRequestScanType = "Testssl Scan"
	ReImportScanRequestScanTypeTrivyOperatorScan                              ReImportScanRequestScanType = "Trivy Operator Scan"
	ReImportScanRequestScanTypeTrivyScan                                      ReImportScanRequestScanType = "Trivy Scan"
	ReImportScanRequestScanTypeTrufflehog3Scan                                ReImportScanRequestScanType = "Trufflehog3 Scan"
	ReImportScanRequestScanTypeTrufflehogScan                                 ReImportScanRequestScanType = "Trufflehog Scan"
	ReImportScanRequestScanTypeTrustwaveFusionAPIScan                         ReImportScanRequestScanType = "Trustwave Fusion API Scan"
	ReImportScanRequestScanTypeTrustwaveScanCSV                               ReImportScanRequestScanType = "Trustwave Scan (CSV)"
	ReImportScanRequestScanTypeTwistlockImageScan                             ReImportScanRequestScanType = "Twistlock Image Scan"
	ReImportScanRequestScanTypeVCGScan                                        ReImportScanRequestScanType = "VCG Scan"
	ReImportScanRequestScanTypeVeracodeScan                                   ReImportScanRequestScanType = "Veracode Scan"
	ReImportScanRequestScanTypeVeracodeSourceClearScan                        ReImportScanRequestScanType = "Veracode SourceClear Scan"
	ReImportScanRequestScanTypeVulners                                        ReImportScanRequestScanType = "Vulners"
	ReImportScanRequestScanTypeWFuzzJSONReport                                ReImportScanRequestScanType = "WFuzz JSON report"
	ReImportScanRequestScanTypeWapitiScan                                     ReImportScanRequestScanType = "Wapiti Scan"
	ReImportScanRequestScanTypeWazuh                                          ReImportScanRequestScanType = "Wazuh"
	ReImportScanRequestScanTypeWhispersScan                                   ReImportScanRequestScanType = "Whispers Scan"
	ReImportScanRequestScanTypeWhiteHatSentinel                               ReImportScanRequestScanType = "WhiteHat Sentinel"
	ReImportScanRequestScanTypeWhitesourceScan                                ReImportScanRequestScanType = "Whitesource Scan"
	ReImportScanRequestScanTypeWpscan                                         ReImportScanRequestScanType = "Wpscan"
	ReImportScanRequestScanTypeXanitizerScan                                  ReImportScanRequestScanType = "Xanitizer Scan"
	ReImportScanRequestScanTypeYarnAuditScan                                  ReImportScanRequestScanType = "Yarn Audit Scan"
	ReImportScanRequestScanTypeZAPScan                                        ReImportScanRequestScanType = "ZAP Scan"
)

// Defines values for RegulationCategory.
const (
	RegulationCategoryCorporate RegulationCategory = "corporate"
	RegulationCategoryEducation RegulationCategory = "education"
	RegulationCategoryFinance   RegulationCategory = "finance"
	RegulationCategoryMedical   RegulationCategory = "medical"
	RegulationCategoryOther     RegulationCategory = "other"
	RegulationCategoryPrivacy   RegulationCategory = "privacy"
)

// Defines values for RegulationRequestCategory.
const (
	Corporate RegulationRequestCategory = "corporate"
	Education RegulationRequestCategory = "education"
	Finance   RegulationRequestCategory = "finance"
	Medical   RegulationRequestCategory = "medical"
	Other     RegulationRequestCategory = "other"
	Privacy   RegulationRequestCategory = "privacy"
)

// Defines values for SystemSettingsJiraMinimumSeverity.
const (
	SystemSettingsJiraMinimumSeverityCritical SystemSettingsJiraMinimumSeverity = "Critical"
	SystemSettingsJiraMinimumSeverityEmpty    SystemSettingsJiraMinimumSeverity = ""
	SystemSettingsJiraMinimumSeverityHigh     SystemSettingsJiraMinimumSeverity = "High"
	SystemSettingsJiraMinimumSeverityInfo     SystemSettingsJiraMinimumSeverity = "Info"
	SystemSettingsJiraMinimumSeverityLow      SystemSettingsJiraMinimumSeverity = "Low"
	SystemSettingsJiraMinimumSeverityMedium   SystemSettingsJiraMinimumSeverity = "Medium"
	SystemSettingsJiraMinimumSeverityNil      SystemSettingsJiraMinimumSeverity = "<nil>"
)

// Defines values for SystemSettingsTimeZone.
const (
	SystemSettingsTimeZoneAfricaAbidjan                  SystemSettingsTimeZone = "Africa/Abidjan"
	SystemSettingsTimeZoneAfricaAccra                    SystemSettingsTimeZone = "Africa/Accra"
	SystemSettingsTimeZoneAfricaAddisAbaba               SystemSettingsTimeZone = "Africa/Addis_Ababa"
	SystemSettingsTimeZoneAfricaAlgiers                  SystemSettingsTimeZone = "Africa/Algiers"
	SystemSettingsTimeZoneAfricaAsmara                   SystemSettingsTimeZone = "Africa/Asmara"
	SystemSettingsTimeZoneAfricaAsmera                   SystemSettingsTimeZone = "Africa/Asmera"
	SystemSettingsTimeZoneAfricaBamako                   SystemSettingsTimeZone = "Africa/Bamako"
	SystemSettingsTimeZoneAfricaBangui                   SystemSettingsTimeZone = "Africa/Bangui"
	SystemSettingsTimeZoneAfricaBanjul                   SystemSettingsTimeZone = "Africa/Banjul"
	SystemSettingsTimeZoneAfricaBissau                   SystemSettingsTimeZone = "Africa/Bissau"
	SystemSettingsTimeZoneAfricaBlantyre                 SystemSettingsTimeZone = "Africa/Blantyre"
	SystemSettingsTimeZoneAfricaBrazzaville              SystemSettingsTimeZone = "Africa/Brazzaville"
	SystemSettingsTimeZoneAfricaBujumbura                SystemSettingsTimeZone = "Africa/Bujumbura"
	SystemSettingsTimeZoneAfricaCairo                    SystemSettingsTimeZone = "Africa/Cairo"
	SystemSettingsTimeZoneAfricaCasablanca               SystemSettingsTimeZone = "Africa/Casablanca"
	SystemSettingsTimeZoneAfricaCeuta                    SystemSettingsTimeZone = "Africa/Ceuta"
	SystemSettingsTimeZoneAfricaConakry                  SystemSettingsTimeZone = "Africa/Conakry"
	SystemSettingsTimeZoneAfricaDakar                    SystemSettingsTimeZone = "Africa/Dakar"
	SystemSettingsTimeZoneAfricaDarEsSalaam              SystemSettingsTimeZone = "Africa/Dar_es_Salaam"
	SystemSettingsTimeZoneAfricaDjibouti                 SystemSettingsTimeZone = "Africa/Djibouti"
	SystemSettingsTimeZoneAfricaDouala                   SystemSettingsTimeZone = "Africa/Douala"
	SystemSettingsTimeZoneAfricaElAaiun                  SystemSettingsTimeZone = "Africa/El_Aaiun"
	SystemSettingsTimeZoneAfricaFreetown                 SystemSettingsTimeZone = "Africa/Freetown"
	SystemSettingsTimeZoneAfricaGaborone                 SystemSettingsTimeZone = "Africa/Gaborone"
	SystemSettingsTimeZoneAfricaHarare                   SystemSettingsTimeZone = "Africa/Harare"
	SystemSettingsTimeZoneAfricaJohannesburg             SystemSettingsTimeZone = "Africa/Johannesburg"
	SystemSettingsTimeZoneAfricaJuba                     SystemSettingsTimeZone = "Africa/Juba"
	SystemSettingsTimeZoneAfricaKampala                  SystemSettingsTimeZone = "Africa/Kampala"
	SystemSettingsTimeZoneAfricaKhartoum                 SystemSettingsTimeZone = "Africa/Khartoum"
	SystemSettingsTimeZoneAfricaKigali                   SystemSettingsTimeZone = "Africa/Kigali"
	SystemSettingsTimeZoneAfricaKinshasa                 SystemSettingsTimeZone = "Africa/Kinshasa"
	SystemSettingsTimeZoneAfricaLagos                    SystemSettingsTimeZone = "Africa/Lagos"
	SystemSettingsTimeZoneAfricaLibreville               SystemSettingsTimeZone = "Africa/Libreville"
	SystemSettingsTimeZoneAfricaLome                     SystemSettingsTimeZone = "Africa/Lome"
	SystemSettingsTimeZoneAfricaLuanda                   SystemSettingsTimeZone = "Africa/Luanda"
	SystemSettingsTimeZoneAfricaLubumbashi               SystemSettingsTimeZone = "Africa/Lubumbashi"
	SystemSettingsTimeZoneAfricaLusaka                   SystemSettingsTimeZone = "Africa/Lusaka"
	SystemSettingsTimeZoneAfricaMalabo                   SystemSettingsTimeZone = "Africa/Malabo"
	SystemSettingsTimeZoneAfricaMaputo                   SystemSettingsTimeZone = "Africa/Maputo"
	SystemSettingsTimeZoneAfricaMaseru                   SystemSettingsTimeZone = "Africa/Maseru"
	SystemSettingsTimeZoneAfricaMbabane                  SystemSettingsTimeZone = "Africa/Mbabane"
	SystemSettingsTimeZoneAfricaMogadishu                SystemSettingsTimeZone = "Africa/Mogadishu"
	SystemSettingsTimeZoneAfricaMonrovia                 SystemSettingsTimeZone = "Africa/Monrovia"
	SystemSettingsTimeZoneAfricaNairobi                  SystemSettingsTimeZone = "Africa/Nairobi"
	SystemSettingsTimeZoneAfricaNdjamena                 SystemSettingsTimeZone = "Africa/Ndjamena"
	SystemSettingsTimeZoneAfricaNiamey                   SystemSettingsTimeZone = "Africa/Niamey"
	SystemSettingsTimeZoneAfricaNouakchott               SystemSettingsTimeZone = "Africa/Nouakchott"
	SystemSettingsTimeZoneAfricaOuagadougou              SystemSettingsTimeZone = "Africa/Ouagadougou"
	SystemSettingsTimeZoneAfricaPortoNovo                SystemSettingsTimeZone = "Africa/Porto-Novo"
	SystemSettingsTimeZoneAfricaSaoTome                  SystemSettingsTimeZone = "Africa/Sao_Tome"
	SystemSettingsTimeZoneAfricaTimbuktu                 SystemSettingsTimeZone = "Africa/Timbuktu"
	SystemSettingsTimeZoneAfricaTripoli                  SystemSettingsTimeZone = "Africa/Tripoli"
	SystemSettingsTimeZoneAfricaTunis                    SystemSettingsTimeZone = "Africa/Tunis"
	SystemSettingsTimeZoneAfricaWindhoek                 SystemSettingsTimeZone = "Africa/Windhoek"
	SystemSettingsTimeZoneAmericaAdak                    SystemSettingsTimeZone = "America/Adak"
	SystemSettingsTimeZoneAmericaAnchorage               SystemSettingsTimeZone = "America/Anchorage"
	SystemSettingsTimeZoneAmericaAnguilla                SystemSettingsTimeZone = "America/Anguilla"
	SystemSettingsTimeZoneAmericaAntigua                 SystemSettingsTimeZone = "America/Antigua"
	SystemSettingsTimeZoneAmericaAraguaina               SystemSettingsTimeZone = "America/Araguaina"
	SystemSettingsTimeZoneAmericaArgentinaBuenosAires    SystemSettingsTimeZone = "America/Argentina/Buenos_Aires"
	SystemSettingsTimeZoneAmericaArgentinaCatamarca      SystemSettingsTimeZone = "America/Argentina/Catamarca"
	SystemSettingsTimeZoneAmericaArgentinaComodRivadavia SystemSettingsTimeZone = "America/Argentina/ComodRivadavia"
	SystemSettingsTimeZoneAmericaArgentinaCordoba        SystemSettingsTimeZone = "America/Argentina/Cordoba"
	SystemSettingsTimeZoneAmericaArgentinaJujuy          SystemSettingsTimeZone = "America/Argentina/Jujuy"
	SystemSettingsTimeZoneAmericaArgentinaLaRioja        SystemSettingsTimeZone = "America/Argentina/La_Rioja"
	SystemSettingsTimeZoneAmericaArgentinaMendoza        SystemSettingsTimeZone = "America/Argentina/Mendoza"
	SystemSettingsTimeZoneAmericaArgentinaRioGallegos    SystemSettingsTimeZone = "America/Argentina/Rio_Gallegos"
	SystemSettingsTimeZoneAmericaArgentinaSalta          SystemSettingsTimeZone = "America/Argentina/Salta"
	SystemSettingsTimeZoneAmericaArgentinaSanJuan        SystemSettingsTimeZone = "America/Argentina/San_Juan"
	SystemSettingsTimeZoneAmericaArgentinaSanLuis        SystemSettingsTimeZone = "America/Argentina/San_Luis"
	SystemSettingsTimeZoneAmericaArgentinaTucuman        SystemSettingsTimeZone = "America/Argentina/Tucuman"
	SystemSettingsTimeZoneAmericaArgentinaUshuaia        SystemSettingsTimeZone = "America/Argentina/Ushuaia"
	SystemSettingsTimeZoneAmericaAruba                   SystemSettingsTimeZone = "America/Aruba"
	SystemSettingsTimeZoneAmericaAsuncion                SystemSettingsTimeZone = "America/Asuncion"
	SystemSettingsTimeZoneAmericaAtikokan                SystemSettingsTimeZone = "America/Atikokan"
	SystemSettingsTimeZoneAmericaAtka                    SystemSettingsTimeZone = "America/Atka"
	SystemSettingsTimeZoneAmericaBahia                   SystemSettingsTimeZone = "America/Bahia"
	SystemSettingsTimeZoneAmericaBahiaBanderas           SystemSettingsTimeZone = "America/Bahia_Banderas"
	SystemSettingsTimeZoneAmericaBarbados                SystemSettingsTimeZone = "America/Barbados"
	SystemSettingsTimeZoneAmericaBelem                   SystemSettingsTimeZone = "America/Belem"
	SystemSettingsTimeZoneAmericaBelize                  SystemSettingsTimeZone = "America/Belize"
	SystemSettingsTimeZoneAmericaBlancSablon             SystemSettingsTimeZone = "America/Blanc-Sablon"
	SystemSettingsTimeZoneAmericaBoaVista                SystemSettingsTimeZone = "America/Boa_Vista"
	SystemSettingsTimeZoneAmericaBogota                  SystemSettingsTimeZone = "America/Bogota"
	SystemSettingsTimeZoneAmericaBoise                   SystemSettingsTimeZone = "America/Boise"
	SystemSettingsTimeZoneAmericaBuenosAires             SystemSettingsTimeZone = "America/Buenos_Aires"
	SystemSettingsTimeZoneAmericaCambridgeBay            SystemSettingsTimeZone = "America/Cambridge_Bay"
	SystemSettingsTimeZoneAmericaCampoGrande             SystemSettingsTimeZone = "America/Campo_Grande"
	SystemSettingsTimeZoneAmericaCancun                  SystemSettingsTimeZone = "America/Cancun"
	SystemSettingsTimeZoneAmericaCaracas                 SystemSettingsTimeZone = "America/Caracas"
	SystemSettingsTimeZoneAmericaCatamarca               SystemSettingsTimeZone = "America/Catamarca"
	SystemSettingsTimeZoneAmericaCayenne                 SystemSettingsTimeZone = "America/Cayenne"
	SystemSettingsTimeZoneAmericaCayman                  SystemSettingsTimeZone = "America/Cayman"
	SystemSettingsTimeZoneAmericaChicago                 SystemSettingsTimeZone = "America/Chicago"
	SystemSettingsTimeZoneAmericaChihuahua               SystemSettingsTimeZone = "America/Chihuahua"
	SystemSettingsTimeZoneAmericaCiudadJuarez            SystemSettingsTimeZone = "America/Ciudad_Juarez"
	SystemSettingsTimeZoneAmericaCoralHarbour            SystemSettingsTimeZone = "America/Coral_Harbour"
	SystemSettingsTimeZoneAmericaCordoba                 SystemSettingsTimeZone = "America/Cordoba"
	SystemSettingsTimeZoneAmericaCostaRica               SystemSettingsTimeZone = "America/Costa_Rica"
	SystemSettingsTimeZoneAmericaCreston                 SystemSettingsTimeZone = "America/Creston"
	SystemSettingsTimeZoneAmericaCuiaba                  SystemSettingsTimeZone = "America/Cuiaba"
	SystemSettingsTimeZoneAmericaCuracao                 SystemSettingsTimeZone = "America/Curacao"
	SystemSettingsTimeZoneAmericaDanmarkshavn            SystemSettingsTimeZone = "America/Danmarkshavn"
	SystemSettingsTimeZoneAmericaDawson                  SystemSettingsTimeZone = "America/Dawson"
	SystemSettingsTimeZoneAmericaDawsonCreek             SystemSettingsTimeZone = "America/Dawson_Creek"
	SystemSettingsTimeZoneAmericaDenver                  SystemSettingsTimeZone = "America/Denver"
	SystemSettingsTimeZoneAmericaDetroit                 SystemSettingsTimeZone = "America/Detroit"
	SystemSettingsTimeZoneAmericaDominica                SystemSettingsTimeZone = "America/Dominica"
	SystemSettingsTimeZoneAmericaEdmonton                SystemSettingsTimeZone = "America/Edmonton"
	SystemSettingsTimeZoneAmericaEirunepe                SystemSettingsTimeZone = "America/Eirunepe"
	SystemSettingsTimeZoneAmericaElSalvador              SystemSettingsTimeZone = "America/El_Salvador"
	SystemSettingsTimeZoneAmericaEnsenada                SystemSettingsTimeZone = "America/Ensenada"
	SystemSettingsTimeZoneAmericaFortNelson              SystemSettingsTimeZone = "America/Fort_Nelson"
	SystemSettingsTimeZoneAmericaFortWayne               SystemSettingsTimeZone = "America/Fort_Wayne"
	SystemSettingsTimeZoneAmericaFortaleza               SystemSettingsTimeZone = "America/Fortaleza"
	SystemSettingsTimeZoneAmericaGlaceBay                SystemSettingsTimeZone = "America/Glace_Bay"
	SystemSettingsTimeZoneAmericaGodthab                 SystemSettingsTimeZone = "America/Godthab"
	SystemSettingsTimeZoneAmericaGooseBay                SystemSettingsTimeZone = "America/Goose_Bay"
	SystemSettingsTimeZoneAmericaGrandTurk               SystemSettingsTimeZone = "America/Grand_Turk"
	SystemSettingsTimeZoneAmericaGrenada                 SystemSettingsTimeZone = "America/Grenada"
	SystemSettingsTimeZoneAmericaGuadeloupe              SystemSettingsTimeZone = "America/Guadeloupe"
	SystemSettingsTimeZoneAmericaGuatemala               SystemSettingsTimeZone = "America/Guatemala"
	SystemSettingsTimeZoneAmericaGuayaquil               SystemSettingsTimeZone = "America/Guayaquil"
	SystemSettingsTimeZoneAmericaGuyana                  SystemSettingsTimeZone = "America/Guyana"
	SystemSettingsTimeZoneAmericaHalifax                 SystemSettingsTimeZone = "America/Halifax"
	SystemSettingsTimeZoneAmericaHavana                  SystemSettingsTimeZone = "America/Havana"
	SystemSettingsTimeZoneAmericaHermosillo              SystemSettingsTimeZone = "America/Hermosillo"
	SystemSettingsTimeZoneAmericaIndianaIndianapolis     SystemSettingsTimeZone = "America/Indiana/Indianapolis"
	SystemSettingsTimeZoneAmericaIndianaKnox             SystemSettingsTimeZone = "America/Indiana/Knox"
	SystemSettingsTimeZoneAmericaIndianaMarengo          SystemSettingsTimeZone = "America/Indiana/Marengo"
	SystemSettingsTimeZoneAmericaIndianaPetersburg       SystemSettingsTimeZone = "America/Indiana/Petersburg"
	SystemSettingsTimeZoneAmericaIndianaTellCity         SystemSettingsTimeZone = "America/Indiana/Tell_City"
	SystemSettingsTimeZoneAmericaIndianaVevay            SystemSettingsTimeZone = "America/Indiana/Vevay"
	SystemSettingsTimeZoneAmericaIndianaVincennes        SystemSettingsTimeZone = "America/Indiana/Vincennes"
	SystemSettingsTimeZoneAmericaIndianaWinamac          SystemSettingsTimeZone = "America/Indiana/Winamac"
	SystemSettingsTimeZoneAmericaIndianapolis            SystemSettingsTimeZone = "America/Indianapolis"
	SystemSettingsTimeZoneAmericaInuvik                  SystemSettingsTimeZone = "America/Inuvik"
	SystemSettingsTimeZoneAmericaIqaluit                 SystemSettingsTimeZone = "America/Iqaluit"
	SystemSettingsTimeZoneAmericaJamaica                 SystemSettingsTimeZone = "America/Jamaica"
	SystemSettingsTimeZoneAmericaJujuy                   SystemSettingsTimeZone = "America/Jujuy"
	SystemSettingsTimeZoneAmericaJuneau                  SystemSettingsTimeZone = "America/Juneau"
	SystemSettingsTimeZoneAmericaKentuckyLouisville      SystemSettingsTimeZone = "America/Kentucky/Louisville"
	SystemSettingsTimeZoneAmericaKentuckyMonticello      SystemSettingsTimeZone = "America/Kentucky/Monticello"
	SystemSettingsTimeZoneAmericaKnoxIN                  SystemSettingsTimeZone = "America/Knox_IN"
	SystemSettingsTimeZoneAmericaKralendijk              SystemSettingsTimeZone = "America/Kralendijk"
	SystemSettingsTimeZoneAmericaLaPaz                   SystemSettingsTimeZone = "America/La_Paz"
	SystemSettingsTimeZoneAmericaLima                    SystemSettingsTimeZone = "America/Lima"
	SystemSettingsTimeZoneAmericaLosAngeles              SystemSettingsTimeZone = "America/Los_Angeles"
	SystemSettingsTimeZoneAmericaLouisville              SystemSettingsTimeZone = "America/Louisville"
	SystemSettingsTimeZoneAmericaLowerPrinces            SystemSettingsTimeZone = "America/Lower_Princes"
	SystemSettingsTimeZoneAmericaMaceio                  SystemSettingsTimeZone = "America/Maceio"
	SystemSettingsTimeZoneAmericaManagua                 SystemSettingsTimeZone = "America/Managua"
	SystemSettingsTimeZoneAmericaManaus                  SystemSettingsTimeZone = "America/Manaus"
	SystemSettingsTimeZoneAmericaMarigot                 SystemSettingsTimeZone = "America/Marigot"
	SystemSettingsTimeZoneAmericaMartinique              SystemSettingsTimeZone = "America/Martinique"
	SystemSettingsTimeZoneAmericaMatamoros               SystemSettingsTimeZone = "America/Matamoros"
	SystemSettingsTimeZoneAmericaMazatlan                SystemSettingsTimeZone = "America/Mazatlan"
	SystemSettingsTimeZoneAmericaMendoza                 SystemSettingsTimeZone = "America/Mendoza"
	SystemSettingsTimeZoneAmericaMenominee               SystemSettingsTimeZone = "America/Menominee"
	SystemSettingsTimeZoneAmericaMerida                  SystemSettingsTimeZone = "America/Merida"
	SystemSettingsTimeZoneAmericaMetlakatla              SystemSettingsTimeZone = "America/Metlakatla"
	SystemSettingsTimeZoneAmericaMexicoCity              SystemSettingsTimeZone = "America/Mexico_City"
	SystemSettingsTimeZoneAmericaMiquelon                SystemSettingsTimeZone = "America/Miquelon"
	SystemSettingsTimeZoneAmericaMoncton                 SystemSettingsTimeZone = "America/Moncton"
	SystemSettingsTimeZoneAmericaMonterrey               SystemSettingsTimeZone = "America/Monterrey"
	SystemSettingsTimeZoneAmericaMontevideo              SystemSettingsTimeZone = "America/Montevideo"
	SystemSettingsTimeZoneAmericaMontreal                SystemSettingsTimeZone = "America/Montreal"
	SystemSettingsTimeZoneAmericaMontserrat              SystemSettingsTimeZone = "America/Montserrat"
	SystemSettingsTimeZoneAmericaNassau                  SystemSettingsTimeZone = "America/Nassau"
	SystemSettingsTimeZoneAmericaNewYork                 SystemSettingsTimeZone = "America/New_York"
	SystemSettingsTimeZoneAmericaNipigon                 SystemSettingsTimeZone = "America/Nipigon"
	SystemSettingsTimeZoneAmericaNome                    SystemSettingsTimeZone = "America/Nome"
	SystemSettingsTimeZoneAmericaNoronha                 SystemSettingsTimeZone = "America/Noronha"
	SystemSettingsTimeZoneAmericaNorthDakotaBeulah       SystemSettingsTimeZone = "America/North_Dakota/Beulah"
	SystemSettingsTimeZoneAmericaNorthDakotaCenter       SystemSettingsTimeZone = "America/North_Dakota/Center"
	SystemSettingsTimeZoneAmericaNorthDakotaNewSalem     SystemSettingsTimeZone = "America/North_Dakota/New_Salem"
	SystemSettingsTimeZoneAmericaNuuk                    SystemSettingsTimeZone = "America/Nuuk"
	SystemSettingsTimeZoneAmericaOjinaga                 SystemSettingsTimeZone = "America/Ojinaga"
	SystemSettingsTimeZoneAmericaPanama                  SystemSettingsTimeZone = "America/Panama"
	SystemSettingsTimeZoneAmericaPangnirtung             SystemSettingsTimeZone = "America/Pangnirtung"
	SystemSettingsTimeZoneAmericaParamaribo              SystemSettingsTimeZone = "America/Paramaribo"
	SystemSettingsTimeZoneAmericaPhoenix                 SystemSettingsTimeZone = "America/Phoenix"
	SystemSettingsTimeZoneAmericaPortAuPrince            SystemSettingsTimeZone = "America/Port-au-Prince"
	SystemSettingsTimeZoneAmericaPortOfSpain             SystemSettingsTimeZone = "America/Port_of_Spain"
	SystemSettingsTimeZoneAmericaPortoAcre               SystemSettingsTimeZone = "America/Porto_Acre"
	SystemSettingsTimeZoneAmericaPortoVelho              SystemSettingsTimeZone = "America/Porto_Velho"
	SystemSettingsTimeZoneAmericaPuertoRico              SystemSettingsTimeZone = "America/Puerto_Rico"
	SystemSettingsTimeZoneAmericaPuntaArenas             SystemSettingsTimeZone = "America/Punta_Arenas"
	SystemSettingsTimeZoneAmericaRainyRiver              SystemSettingsTimeZone = "America/Rainy_River"
	SystemSettingsTimeZoneAmericaRankinInlet             SystemSettingsTimeZone = "America/Rankin_Inlet"
	SystemSettingsTimeZoneAmericaRecife                  SystemSettingsTimeZone = "America/Recife"
	SystemSettingsTimeZoneAmericaRegina                  SystemSettingsTimeZone = "America/Regina"
	SystemSettingsTimeZoneAmericaResolute                SystemSettingsTimeZone = "America/Resolute"
	SystemSettingsTimeZoneAmericaRioBranco               SystemSettingsTimeZone = "America/Rio_Branco"
	SystemSettingsTimeZoneAmericaRosario                 SystemSettingsTimeZone = "America/Rosario"
	SystemSettingsTimeZoneAmericaSantaIsabel             SystemSettingsTimeZone = "America/Santa_Isabel"
	SystemSettingsTimeZoneAmericaSantarem                SystemSettingsTimeZone = "America/Santarem"
	SystemSettingsTimeZoneAmericaSantiago                SystemSettingsTimeZone = "America/Santiago"
	SystemSettingsTimeZoneAmericaSantoDomingo            SystemSettingsTimeZone = "America/Santo_Domingo"
	SystemSettingsTimeZoneAmericaSaoPaulo                SystemSettingsTimeZone = "America/Sao_Paulo"
	SystemSettingsTimeZoneAmericaScoresbysund            SystemSettingsTimeZone = "America/Scoresbysund"
	SystemSettingsTimeZoneAmericaShiprock                SystemSettingsTimeZone = "America/Shiprock"
	SystemSettingsTimeZoneAmericaSitka                   SystemSettingsTimeZone = "America/Sitka"
	SystemSettingsTimeZoneAmericaStBarthelemy            SystemSettingsTimeZone = "America/St_Barthelemy"
	SystemSettingsTimeZoneAmericaStJohns                 SystemSettingsTimeZone = "America/St_Johns"
	SystemSettingsTimeZoneAmericaStKitts                 SystemSettingsTimeZone = "America/St_Kitts"
	SystemSettingsTimeZoneAmericaStLucia                 SystemSettingsTimeZone = "America/St_Lucia"
	SystemSettingsTimeZoneAmericaStThomas                SystemSettingsTimeZone = "America/St_Thomas"
	SystemSettingsTimeZoneAmericaStVincent               SystemSettingsTimeZone = "America/St_Vincent"
	SystemSettingsTimeZoneAmericaSwiftCurrent            SystemSettingsTimeZone = "America/Swift_Current"
	SystemSettingsTimeZoneAmericaTegucigalpa             SystemSettingsTimeZone = "America/Tegucigalpa"
	SystemSettingsTimeZoneAmericaThule                   SystemSettingsTimeZone = "America/Thule"
	SystemSettingsTimeZoneAmericaThunderBay              SystemSettingsTimeZone = "America/Thunder_Bay"
	SystemSettingsTimeZoneAmericaTijuana                 SystemSettingsTimeZone = "America/Tijuana"
	SystemSettingsTimeZoneAmericaToronto                 SystemSettingsTimeZone = "America/Toronto"
	SystemSettingsTimeZoneAmericaTortola                 SystemSettingsTimeZone = "America/Tortola"
	SystemSettingsTimeZoneAmericaVancouver               SystemSettingsTimeZone = "America/Vancouver"
	SystemSettingsTimeZoneAmericaVirgin                  SystemSettingsTimeZone = "America/Virgin"
	SystemSettingsTimeZoneAmericaWhitehorse              SystemSettingsTimeZone = "America/Whitehorse"
	SystemSettingsTimeZoneAmericaWinnipeg                SystemSettingsTimeZone = "America/Winnipeg"
	SystemSettingsTimeZoneAmericaYakutat                 SystemSettingsTimeZone = "America/Yakutat"
	SystemSettingsTimeZoneAmericaYellowknife             SystemSettingsTimeZone = "America/Yellowknife"
	SystemSettingsTimeZoneAntarcticaCasey                SystemSettingsTimeZone = "Antarctica/Casey"
	SystemSettingsTimeZoneAntarcticaDavis                SystemSettingsTimeZone = "Antarctica/Davis"
	SystemSettingsTimeZoneAntarcticaDumontDUrville       SystemSettingsTimeZone = "Antarctica/DumontDUrville"
	SystemSettingsTimeZoneAntarcticaMacquarie            SystemSettingsTimeZone = "Antarctica/Macquarie"
	SystemSettingsTimeZoneAntarcticaMawson               SystemSettingsTimeZone = "Antarctica/Mawson"
	SystemSettingsTimeZoneAntarcticaMcMurdo              SystemSettingsTimeZone = "Antarctica/McMurdo"
	SystemSettingsTimeZoneAntarcticaPalmer               SystemSettingsTimeZone = "Antarctica/Palmer"
	SystemSettingsTimeZoneAntarcticaRothera              SystemSettingsTimeZone = "Antarctica/Rothera"
	SystemSettingsTimeZoneAntarcticaSouthPole            SystemSettingsTimeZone = "Antarctica/South_Pole"
	SystemSettingsTimeZoneAntarcticaSyowa                SystemSettingsTimeZone = "Antarctica/Syowa"
	SystemSettingsTimeZoneAntarcticaTroll                SystemSettingsTimeZone = "Antarctica/Troll"
	SystemSettingsTimeZoneAntarcticaVostok               SystemSettingsTimeZone = "Antarctica/Vostok"
	SystemSettingsTimeZoneArcticLongyearbyen             SystemSettingsTimeZone = "Arctic/Longyearbyen"
	SystemSettingsTimeZoneAsiaAden                       SystemSettingsTimeZone = "Asia/Aden"
	SystemSettingsTimeZoneAsiaAlmaty                     SystemSettingsTimeZone = "Asia/Almaty"
	SystemSettingsTimeZoneAsiaAmman                      SystemSettingsTimeZone = "Asia/Amman"
	SystemSettingsTimeZoneAsiaAnadyr                     SystemSettingsTimeZone = "Asia/Anadyr"
	SystemSettingsTimeZoneAsiaAqtau                      SystemSettingsTimeZone = "Asia/Aqtau"
	SystemSettingsTimeZoneAsiaAqtobe                     SystemSettingsTimeZone = "Asia/Aqtobe"
	SystemSettingsTimeZoneAsiaAshgabat                   SystemSettingsTimeZone = "Asia/Ashgabat"
	SystemSettingsTimeZoneAsiaAshkhabad                  SystemSettingsTimeZone = "Asia/Ashkhabad"
	SystemSettingsTimeZoneAsiaAtyrau                     SystemSettingsTimeZone = "Asia/Atyrau"
	SystemSettingsTimeZoneAsiaBaghdad                    SystemSettingsTimeZone = "Asia/Baghdad"
	SystemSettingsTimeZoneAsiaBahrain                    SystemSettingsTimeZone = "Asia/Bahrain"
	SystemSettingsTimeZoneAsiaBaku                       SystemSettingsTimeZone = "Asia/Baku"
	SystemSettingsTimeZoneAsiaBangkok                    SystemSettingsTimeZone = "Asia/Bangkok"
	SystemSettingsTimeZoneAsiaBarnaul                    SystemSettingsTimeZone = "Asia/Barnaul"
	SystemSettingsTimeZoneAsiaBeirut                     SystemSettingsTimeZone = "Asia/Beirut"
	SystemSettingsTimeZoneAsiaBishkek                    SystemSettingsTimeZone = "Asia/Bishkek"
	SystemSettingsTimeZoneAsiaBrunei                     SystemSettingsTimeZone = "Asia/Brunei"
	SystemSettingsTimeZoneAsiaCalcutta                   SystemSettingsTimeZone = "Asia/Calcutta"
	SystemSettingsTimeZoneAsiaChita                      SystemSettingsTimeZone = "Asia/Chita"
	SystemSettingsTimeZoneAsiaChoibalsan                 SystemSettingsTimeZone = "Asia/Choibalsan"
	SystemSettingsTimeZoneAsiaChongqing                  SystemSettingsTimeZone = "Asia/Chongqing"
	SystemSettingsTimeZoneAsiaChungking                  SystemSettingsTimeZone = "Asia/Chungking"
	SystemSettingsTimeZoneAsiaColombo                    SystemSettingsTimeZone = "Asia/Colombo"
	SystemSettingsTimeZoneAsiaDacca                      SystemSettingsTimeZone = "Asia/Dacca"
	SystemSettingsTimeZoneAsiaDamascus                   SystemSettingsTimeZone = "Asia/Damascus"
	SystemSettingsTimeZoneAsiaDhaka                      SystemSettingsTimeZone = "Asia/Dhaka"
	SystemSettingsTimeZoneAsiaDili                       SystemSettingsTimeZone = "Asia/Dili"
	SystemSettingsTimeZoneAsiaDubai                      SystemSettingsTimeZone = "Asia/Dubai"
	SystemSettingsTimeZoneAsiaDushanbe                   SystemSettingsTimeZone = "Asia/Dushanbe"
	SystemSettingsTimeZoneAsiaFamagusta                  SystemSettingsTimeZone = "Asia/Famagusta"
	SystemSettingsTimeZoneAsiaGaza                       SystemSettingsTimeZone = "Asia/Gaza"
	SystemSettingsTimeZoneAsiaHarbin                     SystemSettingsTimeZone = "Asia/Harbin"
	SystemSettingsTimeZoneAsiaHebron                     SystemSettingsTimeZone = "Asia/Hebron"
	SystemSettingsTimeZoneAsiaHoChiMinh                  SystemSettingsTimeZone = "Asia/Ho_Chi_Minh"
	SystemSettingsTimeZoneAsiaHongKong                   SystemSettingsTimeZone = "Asia/Hong_Kong"
	SystemSettingsTimeZoneAsiaHovd                       SystemSettingsTimeZone = "Asia/Hovd"
	SystemSettingsTimeZoneAsiaIrkutsk                    SystemSettingsTimeZone = "Asia/Irkutsk"
	SystemSettingsTimeZoneAsiaIstanbul                   SystemSettingsTimeZone = "Asia/Istanbul"
	SystemSettingsTimeZoneAsiaJakarta                    SystemSettingsTimeZone = "Asia/Jakarta"
	SystemSettingsTimeZoneAsiaJayapura                   SystemSettingsTimeZone = "Asia/Jayapura"
	SystemSettingsTimeZoneAsiaJerusalem                  SystemSettingsTimeZone = "Asia/Jerusalem"
	SystemSettingsTimeZoneAsiaKabul                      SystemSettingsTimeZone = "Asia/Kabul"
	SystemSettingsTimeZoneAsiaKamchatka                  SystemSettingsTimeZone = "Asia/Kamchatka"
	SystemSettingsTimeZoneAsiaKarachi                    SystemSettingsTimeZone = "Asia/Karachi"
	SystemSettingsTimeZoneAsiaKashgar                    SystemSettingsTimeZone = "Asia/Kashgar"
	SystemSettingsTimeZoneAsiaKathmandu                  SystemSettingsTimeZone = "Asia/Kathmandu"
	SystemSettingsTimeZoneAsiaKatmandu                   SystemSettingsTimeZone = "Asia/Katmandu"
	SystemSettingsTimeZoneAsiaKhandyga                   SystemSettingsTimeZone = "Asia/Khandyga"
	SystemSettingsTimeZoneAsiaKolkata                    SystemSettingsTimeZone = "Asia/Kolkata"
	SystemSettingsTimeZoneAsiaKrasnoyarsk                SystemSettingsTimeZone = "Asia/Krasnoyarsk"
	SystemSettingsTimeZoneAsiaKualaLumpur                SystemSettingsTimeZone = "Asia/Kuala_Lumpur"
	SystemSettingsTimeZoneAsiaKuching                    SystemSettingsTimeZone = "Asia/Kuching"
	SystemSettingsTimeZoneAsiaKuwait                     SystemSettingsTimeZone = "Asia/Kuwait"
	SystemSettingsTimeZoneAsiaMacao                      SystemSettingsTimeZone = "Asia/Macao"
	SystemSettingsTimeZoneAsiaMacau                      SystemSettingsTimeZone = "Asia/Macau"
	SystemSettingsTimeZoneAsiaMagadan                    SystemSettingsTimeZone = "Asia/Magadan"
	SystemSettingsTimeZoneAsiaMakassar                   SystemSettingsTimeZone = "Asia/Makassar"
	SystemSettingsTimeZoneAsiaManila                     SystemSettingsTimeZone = "Asia/Manila"
	SystemSettingsTimeZoneAsiaMuscat                     SystemSettingsTimeZone = "Asia/Muscat"
	SystemSettingsTimeZoneAsiaNicosia                    SystemSettingsTimeZone = "Asia/Nicosia"
	SystemSettingsTimeZoneAsiaNovokuznetsk               SystemSettingsTimeZone = "Asia/Novokuznetsk"
	SystemSettingsTimeZoneAsiaNovosibirsk                SystemSettingsTimeZone = "Asia/Novosibirsk"
	SystemSettingsTimeZoneAsiaOmsk                       SystemSettingsTimeZone = "Asia/Omsk"
	SystemSettingsTimeZoneAsiaOral                       SystemSettingsTimeZone = "Asia/Oral"
	SystemSettingsTimeZoneAsiaPhnomPenh                  SystemSettingsTimeZone = "Asia/Phnom_Penh"
	SystemSettingsTimeZoneAsiaPontianak                  SystemSettingsTimeZone = "Asia/Pontianak"
	SystemSettingsTimeZoneAsiaPyongyang                  SystemSettingsTimeZone = "Asia/Pyongyang"
	SystemSettingsTimeZoneAsiaQatar                      SystemSettingsTimeZone = "Asia/Qatar"
	SystemSettingsTimeZoneAsiaQostanay                   SystemSettingsTimeZone = "Asia/Qostanay"
	SystemSettingsTimeZoneAsiaQyzylorda                  SystemSettingsTimeZone = "Asia/Qyzylorda"
	SystemSettingsTimeZoneAsiaRangoon                    SystemSettingsTimeZone = "Asia/Rangoon"
	SystemSettingsTimeZoneAsiaRiyadh                     SystemSettingsTimeZone = "Asia/Riyadh"
	SystemSettingsTimeZoneAsiaSaigon                     SystemSettingsTimeZone = "Asia/Saigon"
	SystemSettingsTimeZoneAsiaSakhalin                   SystemSettingsTimeZone = "Asia/Sakhalin"
	SystemSettingsTimeZoneAsiaSamarkand                  SystemSettingsTimeZone = "Asia/Samarkand"
	SystemSettingsTimeZoneAsiaSeoul                      SystemSettingsTimeZone = "Asia/Seoul"
	SystemSettingsTimeZoneAsiaShanghai                   SystemSettingsTimeZone = "Asia/Shanghai"
	SystemSettingsTimeZoneAsiaSingapore                  SystemSettingsTimeZone = "Asia/Singapore"
	SystemSettingsTimeZoneAsiaSrednekolymsk              SystemSettingsTimeZone = "Asia/Srednekolymsk"
	SystemSettingsTimeZoneAsiaTaipei                     SystemSettingsTimeZone = "Asia/Taipei"
	SystemSettingsTimeZoneAsiaTashkent                   SystemSettingsTimeZone = "Asia/Tashkent"
	SystemSettingsTimeZoneAsiaTbilisi                    SystemSettingsTimeZone = "Asia/Tbilisi"
	SystemSettingsTimeZoneAsiaTehran                     SystemSettingsTimeZone = "Asia/Tehran"
	SystemSettingsTimeZoneAsiaTelAviv                    SystemSettingsTimeZone = "Asia/Tel_Aviv"
	SystemSettingsTimeZoneAsiaThimbu                     SystemSettingsTimeZone = "Asia/Thimbu"
	SystemSettingsTimeZoneAsiaThimphu                    SystemSettingsTimeZone = "Asia/Thimphu"
	SystemSettingsTimeZoneAsiaTokyo                      SystemSettingsTimeZone = "Asia/Tokyo"
	SystemSettingsTimeZoneAsiaTomsk                      SystemSettingsTimeZone = "Asia/Tomsk"
	SystemSettingsTimeZoneAsiaUjungPandang               SystemSettingsTimeZone = "Asia/Ujung_Pandang"
	SystemSettingsTimeZoneAsiaUlaanbaatar                SystemSettingsTimeZone = "Asia/Ulaanbaatar"
	SystemSettingsTimeZoneAsiaUlanBator                  SystemSettingsTimeZone = "Asia/Ulan_Bator"
	SystemSettingsTimeZoneAsiaUrumqi                     SystemSettingsTimeZone = "Asia/Urumqi"
	SystemSettingsTimeZoneAsiaUstNera                    SystemSettingsTimeZone = "Asia/Ust-Nera"
	SystemSettingsTimeZoneAsiaVientiane                  SystemSettingsTimeZone = "Asia/Vientiane"
	SystemSettingsTimeZoneAsiaVladivostok                SystemSettingsTimeZone = "Asia/Vladivostok"
	SystemSettingsTimeZoneAsiaYakutsk                    SystemSettingsTimeZone = "Asia/Yakutsk"
	SystemSettingsTimeZoneAsiaYangon                     SystemSettingsTimeZone = "Asia/Yangon"
	SystemSettingsTimeZoneAsiaYekaterinburg              SystemSettingsTimeZone = "Asia/Yekaterinburg"
	SystemSettingsTimeZoneAsiaYerevan                    SystemSettingsTimeZone = "Asia/Yerevan"
	SystemSettingsTimeZoneAtlanticAzores                 SystemSettingsTimeZone = "Atlantic/Azores"
	SystemSettingsTimeZoneAtlanticBermuda                SystemSettingsTimeZone = "Atlantic/Bermuda"
	SystemSettingsTimeZoneAtlanticCanary                 SystemSettingsTimeZone = "Atlantic/Canary"
	SystemSettingsTimeZoneAtlanticCapeVerde              SystemSettingsTimeZone = "Atlantic/Cape_Verde"
	SystemSettingsTimeZoneAtlanticFaeroe                 SystemSettingsTimeZone = "Atlantic/Faeroe"
	SystemSettingsTimeZoneAtlanticFaroe                  SystemSettingsTimeZone = "Atlantic/Faroe"
	SystemSettingsTimeZoneAtlanticJanMayen               SystemSettingsTimeZone = "Atlantic/Jan_Mayen"
	SystemSettingsTimeZoneAtlanticMadeira                SystemSettingsTimeZone = "Atlantic/Madeira"
	SystemSettingsTimeZoneAtlanticReykjavik              SystemSettingsTimeZone = "Atlantic/Reykjavik"
	SystemSettingsTimeZoneAtlanticSouthGeorgia           SystemSettingsTimeZone = "Atlantic/South_Georgia"
	SystemSettingsTimeZoneAtlanticStHelena               SystemSettingsTimeZone = "Atlantic/St_Helena"
	SystemSettingsTimeZoneAtlanticStanley                SystemSettingsTimeZone = "Atlantic/Stanley"
	SystemSettingsTimeZoneAustraliaACT                   SystemSettingsTimeZone = "Australia/ACT"
	SystemSettingsTimeZoneAustraliaAdelaide              SystemSettingsTimeZone = "Australia/Adelaide"
	SystemSettingsTimeZoneAustraliaBrisbane              SystemSettingsTimeZone = "Australia/Brisbane"
	SystemSettingsTimeZoneAustraliaBrokenHill            SystemSettingsTimeZone = "Australia/Broken_Hill"
	SystemSettingsTimeZoneAustraliaCanberra              SystemSettingsTimeZone = "Australia/Canberra"
	SystemSettingsTimeZoneAustraliaCurrie                SystemSettingsTimeZone = "Australia/Currie"
	SystemSettingsTimeZoneAustraliaDarwin                SystemSettingsTimeZone = "Australia/Darwin"
	SystemSettingsTimeZoneAustraliaEucla                 SystemSettingsTimeZone = "Australia/Eucla"
	SystemSettingsTimeZoneAustraliaHobart                SystemSettingsTimeZone = "Australia/Hobart"
	SystemSettingsTimeZoneAustraliaLHI                   SystemSettingsTimeZone = "Australia/LHI"
	SystemSettingsTimeZoneAustraliaLindeman              SystemSettingsTimeZone = "Australia/Lindeman"
	SystemSettingsTimeZoneAustraliaLordHowe              SystemSettingsTimeZone = "Australia/Lord_Howe"
	SystemSettingsTimeZoneAustraliaMelbourne             SystemSettingsTimeZone = "Australia/Melbourne"
	SystemSettingsTimeZoneAustraliaNSW                   SystemSettingsTimeZone = "Australia/NSW"
	SystemSettingsTimeZoneAustraliaNorth                 SystemSettingsTimeZone = "Australia/North"
	SystemSettingsTimeZoneAustraliaPerth                 SystemSettingsTimeZone = "Australia/Perth"
	SystemSettingsTimeZoneAustraliaQueensland            SystemSettingsTimeZone = "Australia/Queensland"
	SystemSettingsTimeZoneAustraliaSouth                 SystemSettingsTimeZone = "Australia/South"
	SystemSettingsTimeZoneAustraliaSydney                SystemSettingsTimeZone = "Australia/Sydney"
	SystemSettingsTimeZoneAustraliaTasmania              SystemSettingsTimeZone = "Australia/Tasmania"
	SystemSettingsTimeZoneAustraliaVictoria              SystemSettingsTimeZone = "Australia/Victoria"
	SystemSettingsTimeZoneAustraliaWest                  SystemSettingsTimeZone = "Australia/West"
	SystemSettingsTimeZoneAustraliaYancowinna            SystemSettingsTimeZone = "Australia/Yancowinna"
	SystemSettingsTimeZoneBrazilAcre                     SystemSettingsTimeZone = "Brazil/Acre"
	SystemSettingsTimeZoneBrazilDeNoronha                SystemSettingsTimeZone = "Brazil/DeNoronha"
	SystemSettingsTimeZoneBrazilEast                     SystemSettingsTimeZone = "Brazil/East"
	SystemSettingsTimeZoneBrazilWest                     SystemSettingsTimeZone = "Brazil/West"
	SystemSettingsTimeZoneCET                            SystemSettingsTimeZone = "CET"
	SystemSettingsTimeZoneCST6CDT                        SystemSettingsTimeZone = "CST6CDT"
	SystemSettingsTimeZoneCanadaAtlantic                 SystemSettingsTimeZone = "Canada/Atlantic"
	SystemSettingsTimeZoneCanadaCentral                  SystemSettingsTimeZone = "Canada/Central"
	SystemSettingsTimeZoneCanadaEastern                  SystemSettingsTimeZone = "Canada/Eastern"
	SystemSettingsTimeZoneCanadaMountain                 SystemSettingsTimeZone = "Canada/Mountain"
	SystemSettingsTimeZoneCanadaNewfoundland             SystemSettingsTimeZone = "Canada/Newfoundland"
	SystemSettingsTimeZoneCanadaPacific                  SystemSettingsTimeZone = "Canada/Pacific"
	SystemSettingsTimeZoneCanadaSaskatchewan             SystemSettingsTimeZone = "Canada/Saskatchewan"
	SystemSettingsTimeZoneCanadaYukon                    SystemSettingsTimeZone = "Canada/Yukon"
	SystemSettingsTimeZoneChileContinental               SystemSettingsTimeZone = "Chile/Continental"
	SystemSettingsTimeZoneChileEasterIsland              SystemSettingsTimeZone = "Chile/EasterIsland"
	SystemSettingsTimeZoneCuba                           SystemSettingsTimeZone = "Cuba"
	SystemSettingsTimeZoneEET                            SystemSettingsTimeZone = "EET"
	SystemSettingsTimeZoneEST                            SystemSettingsTimeZone = "EST"
	SystemSettingsTimeZoneEST5EDT                        SystemSettingsTimeZone = "EST5EDT"
	SystemSettingsTimeZoneEgypt                          SystemSettingsTimeZone = "Egypt"
	SystemSettingsTimeZoneEire                           SystemSettingsTimeZone = "Eire"
	SystemSettingsTimeZoneEtcGMT                         SystemSettingsTimeZone = "Etc/GMT"
	SystemSettingsTimeZoneEtcGMT0                        SystemSettingsTimeZone = "Etc/GMT+0"
	SystemSettingsTimeZoneEtcGMT01                       SystemSettingsTimeZone = "Etc/GMT-0"
	SystemSettingsTimeZoneEtcGMT02                       SystemSettingsTimeZone = "Etc/GMT0"
	SystemSettingsTimeZoneEtcGMT1                        SystemSettingsTimeZone = "Etc/GMT+1"
	SystemSettingsTimeZoneEtcGMT10                       SystemSettingsTimeZone = "Etc/GMT+10"
	SystemSettingsTimeZoneEtcGMT101                      SystemSettingsTimeZone = "Etc/GMT-10"
	SystemSettingsTimeZoneEtcGMT11                       SystemSettingsTimeZone = "Etc/GMT-1"
	SystemSettingsTimeZoneEtcGMT111                      SystemSettingsTimeZone = "Etc/GMT-11"
	SystemSettingsTimeZoneEtcGMT12                       SystemSettingsTimeZone = "Etc/GMT+12"
	SystemSettingsTimeZoneEtcGMT121                      SystemSettingsTimeZone = "Etc/GMT-12"
	SystemSettingsTimeZoneEtcGMT13                       SystemSettingsTimeZone = "Etc/GMT-13"
	SystemSettingsTimeZoneEtcGMT14                       SystemSettingsTimeZone = "Etc/GMT-14"
	SystemSettingsTimeZoneEtcGMT2                        SystemSettingsTimeZone = "Etc/GMT+2"
	SystemSettingsTimeZoneEtcGMT21                       SystemSettingsTimeZone = "Etc/GMT-2"
	SystemSettingsTimeZoneEtcGMT3                        SystemSettingsTimeZone = "Etc/GMT+3"
	SystemSettingsTimeZoneEtcGMT31                       SystemSettingsTimeZone = "Etc/GMT-3"
	SystemSettingsTimeZoneEtcGMT4                        SystemSettingsTimeZone = "Etc/GMT+4"
	SystemSettingsTimeZoneEtcGMT41                       SystemSettingsTimeZone = "Etc/GMT-4"
	SystemSettingsTimeZoneEtcGMT5                        SystemSettingsTimeZone = "Etc/GMT+5"
	SystemSettingsTimeZoneEtcGMT51                       SystemSettingsTimeZone = "Etc/GMT-5"
	SystemSettingsTimeZoneEtcGMT6                        SystemSettingsTimeZone = "Etc/GMT+6"
	SystemSettingsTimeZoneEtcGMT61                       SystemSettingsTimeZone = "Etc/GMT-6"
	SystemSettingsTimeZoneEtcGMT7                        SystemSettingsTimeZone = "Etc/GMT+7"
	SystemSettingsTimeZoneEtcGMT71                       SystemSettingsTimeZone = "Etc/GMT-7"
	SystemSettingsTimeZoneEtcGMT8                        SystemSettingsTimeZone = "Etc/GMT+8"
	SystemSettingsTimeZoneEtcGMT81                       SystemSettingsTimeZone = "Etc/GMT-8"
	SystemSettingsTimeZoneEtcGMT9                        SystemSettingsTimeZone = "Etc/GMT+9"
	SystemSettingsTimeZoneEtcGMT91                       SystemSettingsTimeZone = "Etc/GMT-9"
	SystemSettingsTimeZoneEtcGreenwich                   SystemSettingsTimeZone = "Etc/Greenwich"
	SystemSettingsTimeZoneEtcUCT                         SystemSettingsTimeZone = "Etc/UCT"
	SystemSettingsTimeZoneEtcUTC                         SystemSettingsTimeZone = "Etc/UTC"
	SystemSettingsTimeZoneEtcUniversal                   SystemSettingsTimeZone = "Etc/Universal"
	SystemSettingsTimeZoneEtcZulu                        SystemSettingsTimeZone = "Etc/Zulu"
	SystemSettingsTimeZoneEuropeAmsterdam                SystemSettingsTimeZone = "Europe/Amsterdam"
	SystemSettingsTimeZoneEuropeAndorra                  SystemSettingsTimeZone = "Europe/Andorra"
	SystemSettingsTimeZoneEuropeAstrakhan                SystemSettingsTimeZone = "Europe/Astrakhan"
	SystemSettingsTimeZoneEuropeAthens                   SystemSettingsTimeZone = "Europe/Athens"
	SystemSettingsTimeZoneEuropeBelfast                  SystemSettingsTimeZone = "Europe/Belfast"
	SystemSettingsTimeZoneEuropeBelgrade                 SystemSettingsTimeZone = "Europe/Belgrade"
	SystemSettingsTimeZoneEuropeBerlin                   SystemSettingsTimeZone = "Europe/Berlin"
	SystemSettingsTimeZoneEuropeBratislava               SystemSettingsTimeZone = "Europe/Bratislava"
	SystemSettingsTimeZoneEuropeBrussels                 SystemSettingsTimeZone = "Europe/Brussels"
	SystemSettingsTimeZoneEuropeBucharest                SystemSettingsTimeZone = "Europe/Bucharest"
	SystemSettingsTimeZoneEuropeBudapest                 SystemSettingsTimeZone = "Europe/Budapest"
	SystemSettingsTimeZoneEuropeBusingen                 SystemSettingsTimeZone = "Europe/Busingen"
	SystemSettingsTimeZoneEuropeChisinau                 SystemSettingsTimeZone = "Europe/Chisinau"
	SystemSettingsTimeZoneEuropeCopenhagen               SystemSettingsTimeZone = "Europe/Copenhagen"
	SystemSettingsTimeZoneEuropeDublin                   SystemSettingsTimeZone = "Europe/Dublin"
	SystemSettingsTimeZoneEuropeGibraltar                SystemSettingsTimeZone = "Europe/Gibraltar"
	SystemSettingsTimeZoneEuropeGuernsey                 SystemSettingsTimeZone = "Europe/Guernsey"
	SystemSettingsTimeZoneEuropeHelsinki                 SystemSettingsTimeZone = "Europe/Helsinki"
	SystemSettingsTimeZoneEuropeIsleOfMan                SystemSettingsTimeZone = "Europe/Isle_of_Man"
	SystemSettingsTimeZoneEuropeIstanbul                 SystemSettingsTimeZone = "Europe/Istanbul"
	SystemSettingsTimeZoneEuropeJersey                   SystemSettingsTimeZone = "Europe/Jersey"
	SystemSettingsTimeZoneEuropeKaliningrad              SystemSettingsTimeZone = "Europe/Kaliningrad"
	SystemSettingsTimeZoneEuropeKiev                     SystemSettingsTimeZone = "Europe/Kiev"
	SystemSettingsTimeZoneEuropeKirov                    SystemSettingsTimeZone = "Europe/Kirov"
	SystemSettingsTimeZoneEuropeKyiv                     SystemSettingsTimeZone = "Europe/Kyiv"
	SystemSettingsTimeZoneEuropeLisbon                   SystemSettingsTimeZone = "Europe/Lisbon"
	SystemSettingsTimeZoneEuropeLjubljana                SystemSettingsTimeZone = "Europe/Ljubljana"
	SystemSettingsTimeZoneEuropeLondon                   SystemSettingsTimeZone = "Europe/London"
	SystemSettingsTimeZoneEuropeLuxembourg               SystemSettingsTimeZone = "Europe/Luxembourg"
	SystemSettingsTimeZoneEuropeMadrid                   SystemSettingsTimeZone = "Europe/Madrid"
	SystemSettingsTimeZoneEuropeMalta                    SystemSettingsTimeZone = "Europe/Malta"
	SystemSettingsTimeZoneEuropeMariehamn                SystemSettingsTimeZone = "Europe/Mariehamn"
	SystemSettingsTimeZoneEuropeMinsk                    SystemSettingsTimeZone = "Europe/Minsk"
	SystemSettingsTimeZoneEuropeMonaco                   SystemSettingsTimeZone = "Europe/Monaco"
	SystemSettingsTimeZoneEuropeMoscow                   SystemSettingsTimeZone = "Europe/Moscow"
	SystemSettingsTimeZoneEuropeNicosia                  SystemSettingsTimeZone = "Europe/Nicosia"
	SystemSettingsTimeZoneEuropeOslo                     SystemSettingsTimeZone = "Europe/Oslo"
	SystemSettingsTimeZoneEuropeParis                    SystemSettingsTimeZone = "Europe/Paris"
	SystemSettingsTimeZoneEuropePodgorica                SystemSettingsTimeZone = "Europe/Podgorica"
	SystemSettingsTimeZoneEuropePrague                   SystemSettingsTimeZone = "Europe/Prague"
	SystemSettingsTimeZoneEuropeRiga                     SystemSettingsTimeZone = "Europe/Riga"
	SystemSettingsTimeZoneEuropeRome                     SystemSettingsTimeZone = "Europe/Rome"
	SystemSettingsTimeZoneEuropeSamara                   SystemSettingsTimeZone = "Europe/Samara"
	SystemSettingsTimeZoneEuropeSanMarino                SystemSettingsTimeZone = "Europe/San_Marino"
	SystemSettingsTimeZoneEuropeSarajevo                 SystemSettingsTimeZone = "Europe/Sarajevo"
	SystemSettingsTimeZoneEuropeSaratov                  SystemSettingsTimeZone = "Europe/Saratov"
	SystemSettingsTimeZoneEuropeSimferopol               SystemSettingsTimeZone = "Europe/Simferopol"
	SystemSettingsTimeZoneEuropeSkopje                   SystemSettingsTimeZone = "Europe/Skopje"
	SystemSettingsTimeZoneEuropeSofia                    SystemSettingsTimeZone = "Europe/Sofia"
	SystemSettingsTimeZoneEuropeStockholm                SystemSettingsTimeZone = "Europe/Stockholm"
	SystemSettingsTimeZoneEuropeTallinn                  SystemSettingsTimeZone = "Europe/Tallinn"
	SystemSettingsTimeZoneEuropeTirane                   SystemSettingsTimeZone = "Europe/Tirane"
	SystemSettingsTimeZoneEuropeTiraspol                 SystemSettingsTimeZone = "Europe/Tiraspol"
	SystemSettingsTimeZoneEuropeUlyanovsk                SystemSettingsTimeZone = "Europe/Ulyanovsk"
	SystemSettingsTimeZoneEuropeUzhgorod                 SystemSettingsTimeZone = "Europe/Uzhgorod"
	SystemSettingsTimeZoneEuropeVaduz                    SystemSettingsTimeZone = "Europe/Vaduz"
	SystemSettingsTimeZoneEuropeVatican                  SystemSettingsTimeZone = "Europe/Vatican"
	SystemSettingsTimeZoneEuropeVienna                   SystemSettingsTimeZone = "Europe/Vienna"
	SystemSettingsTimeZoneEuropeVilnius                  SystemSettingsTimeZone = "Europe/Vilnius"
	SystemSettingsTimeZoneEuropeVolgograd                SystemSettingsTimeZone = "Europe/Volgograd"
	SystemSettingsTimeZoneEuropeWarsaw                   SystemSettingsTimeZone = "Europe/Warsaw"
	SystemSettingsTimeZoneEuropeZagreb                   SystemSettingsTimeZone = "Europe/Zagreb"
	SystemSettingsTimeZoneEuropeZaporozhye               SystemSettingsTimeZone = "Europe/Zaporozhye"
	SystemSettingsTimeZoneEuropeZurich                   SystemSettingsTimeZone = "Europe/Zurich"
	SystemSettingsTimeZoneGB                             SystemSettingsTimeZone = "GB"
	SystemSettingsTimeZoneGBEire                         SystemSettingsTimeZone = "GB-Eire"
	SystemSettingsTimeZoneGMT                            SystemSettingsTimeZone = "GMT"
	SystemSettingsTimeZoneGMT0                           SystemSettingsTimeZone = "GMT+0"
	SystemSettingsTimeZoneGMT01                          SystemSettingsTimeZone = "GMT-0"
	SystemSettingsTimeZoneGMT02                          SystemSettingsTimeZone = "GMT0"
	SystemSettingsTimeZoneGreenwich                      SystemSettingsTimeZone = "Greenwich"
	SystemSettingsTimeZoneHST                            SystemSettingsTimeZone = "HST"
	SystemSettingsTimeZoneHongkong                       SystemSettingsTimeZone = "Hongkong"
	SystemSettingsTimeZoneIceland                        SystemSettingsTimeZone = "Iceland"
	SystemSettingsTimeZoneIndianAntananarivo             SystemSettingsTimeZone = "Indian/Antananarivo"
	SystemSettingsTimeZoneIndianChagos                   SystemSettingsTimeZone = "Indian/Chagos"
	SystemSettingsTimeZoneIndianChristmas                SystemSettingsTimeZone = "Indian/Christmas"
	SystemSettingsTimeZoneIndianCocos                    SystemSettingsTimeZone = "Indian/Cocos"
	SystemSettingsTimeZoneIndianComoro                   SystemSettingsTimeZone = "Indian/Comoro"
	SystemSettingsTimeZoneIndianKerguelen                SystemSettingsTimeZone = "Indian/Kerguelen"
	SystemSettingsTimeZoneIndianMahe                     SystemSettingsTimeZone = "Indian/Mahe"
	SystemSettingsTimeZoneIndianMaldives                 SystemSettingsTimeZone = "Indian/Maldives"
	SystemSettingsTimeZoneIndianMauritius                SystemSettingsTimeZone = "Indian/Mauritius"
	SystemSettingsTimeZoneIndianMayotte                  SystemSettingsTimeZone = "Indian/Mayotte"
	SystemSettingsTimeZoneIndianReunion                  SystemSettingsTimeZone = "Indian/Reunion"
	SystemSettingsTimeZoneIran                           SystemSettingsTimeZone = "Iran"
	SystemSettingsTimeZoneIsrael                         SystemSettingsTimeZone = "Israel"
	SystemSettingsTimeZoneJamaica                        SystemSettingsTimeZone = "Jamaica"
	SystemSettingsTimeZoneJapan                          SystemSettingsTimeZone = "Japan"
	SystemSettingsTimeZoneKwajalein                      SystemSettingsTimeZone = "Kwajalein"
	SystemSettingsTimeZoneLibya                          SystemSettingsTimeZone = "Libya"
	SystemSettingsTimeZoneMET                            SystemSettingsTimeZone = "MET"
	SystemSettingsTimeZoneMST                            SystemSettingsTimeZone = "MST"
	SystemSettingsTimeZoneMST7MDT                        SystemSettingsTimeZone = "MST7MDT"
	SystemSettingsTimeZoneMexicoBajaNorte                SystemSettingsTimeZone = "Mexico/BajaNorte"
	SystemSettingsTimeZoneMexicoBajaSur                  SystemSettingsTimeZone = "Mexico/BajaSur"
	SystemSettingsTimeZoneMexicoGeneral                  SystemSettingsTimeZone = "Mexico/General"
	SystemSettingsTimeZoneNZ                             SystemSettingsTimeZone = "NZ"
	SystemSettingsTimeZoneNZCHAT                         SystemSettingsTimeZone = "NZ-CHAT"
	SystemSettingsTimeZoneNavajo                         SystemSettingsTimeZone = "Navajo"
	SystemSettingsTimeZonePRC                            SystemSettingsTimeZone = "PRC"
	SystemSettingsTimeZonePST8PDT                        SystemSettingsTimeZone = "PST8PDT"
	SystemSettingsTimeZonePacificApia                    SystemSettingsTimeZone = "Pacific/Apia"
	SystemSettingsTimeZonePacificAuckland                SystemSettingsTimeZone = "Pacific/Auckland"
	SystemSettingsTimeZonePacificBougainville            SystemSettingsTimeZone = "Pacific/Bougainville"
	SystemSettingsTimeZonePacificChatham                 SystemSettingsTimeZone = "Pacific/Chatham"
	SystemSettingsTimeZonePacificChuuk                   SystemSettingsTimeZone = "Pacific/Chuuk"
	SystemSettingsTimeZonePacificEaster                  SystemSettingsTimeZone = "Pacific/Easter"
	SystemSettingsTimeZonePacificEfate                   SystemSettingsTimeZone = "Pacific/Efate"
	SystemSettingsTimeZonePacificEnderbury               SystemSettingsTimeZone = "Pacific/Enderbury"
	SystemSettingsTimeZonePacificFakaofo                 SystemSettingsTimeZone = "Pacific/Fakaofo"
	SystemSettingsTimeZonePacificFiji                    SystemSettingsTimeZone = "Pacific/Fiji"
	SystemSettingsTimeZonePacificFunafuti                SystemSettingsTimeZone = "Pacific/Funafuti"
	SystemSettingsTimeZonePacificGalapagos               SystemSettingsTimeZone = "Pacific/Galapagos"
	SystemSettingsTimeZonePacificGambier                 SystemSettingsTimeZone = "Pacific/Gambier"
	SystemSettingsTimeZonePacificGuadalcanal             SystemSettingsTimeZone = "Pacific/Guadalcanal"
	SystemSettingsTimeZonePacificGuam                    SystemSettingsTimeZone = "Pacific/Guam"
	SystemSettingsTimeZonePacificHonolulu                SystemSettingsTimeZone = "Pacific/Honolulu"
	SystemSettingsTimeZonePacificJohnston                SystemSettingsTimeZone = "Pacific/Johnston"
	SystemSettingsTimeZonePacificKanton                  SystemSettingsTimeZone = "Pacific/Kanton"
	SystemSettingsTimeZonePacificKiritimati              SystemSettingsTimeZone = "Pacific/Kiritimati"
	SystemSettingsTimeZonePacificKosrae                  SystemSettingsTimeZone = "Pacific/Kosrae"
	SystemSettingsTimeZonePacificKwajalein               SystemSettingsTimeZone = "Pacific/Kwajalein"
	SystemSettingsTimeZonePacificMajuro                  SystemSettingsTimeZone = "Pacific/Majuro"
	SystemSettingsTimeZonePacificMarquesas               SystemSettingsTimeZone = "Pacific/Marquesas"
	SystemSettingsTimeZonePacificMidway                  SystemSettingsTimeZone = "Pacific/Midway"
	SystemSettingsTimeZonePacificNauru                   SystemSettingsTimeZone = "Pacific/Nauru"
	SystemSettingsTimeZonePacificNiue                    SystemSettingsTimeZone = "Pacific/Niue"
	SystemSettingsTimeZonePacificNorfolk                 SystemSettingsTimeZone = "Pacific/Norfolk"
	SystemSettingsTimeZonePacificNoumea                  SystemSettingsTimeZone = "Pacific/Noumea"
	SystemSettingsTimeZonePacificPagoPago                SystemSettingsTimeZone = "Pacific/Pago_Pago"
	SystemSettingsTimeZonePacificPalau                   SystemSettingsTimeZone = "Pacific/Palau"
	SystemSettingsTimeZonePacificPitcairn                SystemSettingsTimeZone = "Pacific/Pitcairn"
	SystemSettingsTimeZonePacificPohnpei                 SystemSettingsTimeZone = "Pacific/Pohnpei"
	SystemSettingsTimeZonePacificPonape                  SystemSettingsTimeZone = "Pacific/Ponape"
	SystemSettingsTimeZonePacificPortMoresby             SystemSettingsTimeZone = "Pacific/Port_Moresby"
	SystemSettingsTimeZonePacificRarotonga               SystemSettingsTimeZone = "Pacific/Rarotonga"
	SystemSettingsTimeZonePacificSaipan                  SystemSettingsTimeZone = "Pacific/Saipan"
	SystemSettingsTimeZonePacificSamoa                   SystemSettingsTimeZone = "Pacific/Samoa"
	SystemSettingsTimeZonePacificTahiti                  SystemSettingsTimeZone = "Pacific/Tahiti"
	SystemSettingsTimeZonePacificTarawa                  SystemSettingsTimeZone = "Pacific/Tarawa"
	SystemSettingsTimeZonePacificTongatapu               SystemSettingsTimeZone = "Pacific/Tongatapu"
	SystemSettingsTimeZonePacificTruk                    SystemSettingsTimeZone = "Pacific/Truk"
	SystemSettingsTimeZonePacificWake                    SystemSettingsTimeZone = "Pacific/Wake"
	SystemSettingsTimeZonePacificWallis                  SystemSettingsTimeZone = "Pacific/Wallis"
	SystemSettingsTimeZonePacificYap                     SystemSettingsTimeZone = "Pacific/Yap"
	SystemSettingsTimeZonePoland                         SystemSettingsTimeZone = "Poland"
	SystemSettingsTimeZonePortugal                       SystemSettingsTimeZone = "Portugal"
	SystemSettingsTimeZoneROC                            SystemSettingsTimeZone = "ROC"
	SystemSettingsTimeZoneROK                            SystemSettingsTimeZone = "ROK"
	SystemSettingsTimeZoneSingapore                      SystemSettingsTimeZone = "Singapore"
	SystemSettingsTimeZoneTurkey                         SystemSettingsTimeZone = "Turkey"
	SystemSettingsTimeZoneUCT                            SystemSettingsTimeZone = "UCT"
	SystemSettingsTimeZoneUSAlaska                       SystemSettingsTimeZone = "US/Alaska"
	SystemSettingsTimeZoneUSAleutian                     SystemSettingsTimeZone = "US/Aleutian"
	SystemSettingsTimeZoneUSArizona                      SystemSettingsTimeZone = "US/Arizona"
	SystemSettingsTimeZoneUSCentral                      SystemSettingsTimeZone = "US/Central"
	SystemSettingsTimeZoneUSEastIndiana                  SystemSettingsTimeZone = "US/East-Indiana"
	SystemSettingsTimeZoneUSEastern                      SystemSettingsTimeZone = "US/Eastern"
	SystemSettingsTimeZoneUSHawaii                       SystemSettingsTimeZone = "US/Hawaii"
	SystemSettingsTimeZoneUSIndianaStarke                SystemSettingsTimeZone = "US/Indiana-Starke"
	SystemSettingsTimeZoneUSMichigan                     SystemSettingsTimeZone = "US/Michigan"
	SystemSettingsTimeZoneUSMountain                     SystemSettingsTimeZone = "US/Mountain"
	SystemSettingsTimeZoneUSPacific                      SystemSettingsTimeZone = "US/Pacific"
	SystemSettingsTimeZoneUSSamoa                        SystemSettingsTimeZone = "US/Samoa"
	SystemSettingsTimeZoneUTC                            SystemSettingsTimeZone = "UTC"
	SystemSettingsTimeZoneUniversal                      SystemSettingsTimeZone = "Universal"
	SystemSettingsTimeZoneWET                            SystemSettingsTimeZone = "WET"
	SystemSettingsTimeZoneWSU                            SystemSettingsTimeZone = "W-SU"
	SystemSettingsTimeZoneZulu                           SystemSettingsTimeZone = "Zulu"
)

// Defines values for SystemSettingsRequestJiraMinimumSeverity.
const (
	SystemSettingsRequestJiraMinimumSeverityCritical SystemSettingsRequestJiraMinimumSeverity = "Critical"
	SystemSettingsRequestJiraMinimumSeverityEmpty    SystemSettingsRequestJiraMinimumSeverity = ""
	SystemSettingsRequestJiraMinimumSeverityHigh     SystemSettingsRequestJiraMinimumSeverity = "High"
	SystemSettingsRequestJiraMinimumSeverityInfo     SystemSettingsRequestJiraMinimumSeverity = "Info"
	SystemSettingsRequestJiraMinimumSeverityLow      SystemSettingsRequestJiraMinimumSeverity = "Low"
	SystemSettingsRequestJiraMinimumSeverityMedium   SystemSettingsRequestJiraMinimumSeverity = "Medium"
	SystemSettingsRequestJiraMinimumSeverityNil      SystemSettingsRequestJiraMinimumSeverity = "<nil>"
)

// Defines values for SystemSettingsRequestTimeZone.
const (
	AfricaAbidjan                  SystemSettingsRequestTimeZone = "Africa/Abidjan"
	AfricaAccra                    SystemSettingsRequestTimeZone = "Africa/Accra"
	AfricaAddisAbaba               SystemSettingsRequestTimeZone = "Africa/Addis_Ababa"
	AfricaAlgiers                  SystemSettingsRequestTimeZone = "Africa/Algiers"
	AfricaAsmara                   SystemSettingsRequestTimeZone = "Africa/Asmara"
	AfricaAsmera                   SystemSettingsRequestTimeZone = "Africa/Asmera"
	AfricaBamako                   SystemSettingsRequestTimeZone = "Africa/Bamako"
	AfricaBangui                   SystemSettingsRequestTimeZone = "Africa/Bangui"
	AfricaBanjul                   SystemSettingsRequestTimeZone = "Africa/Banjul"
	AfricaBissau                   SystemSettingsRequestTimeZone = "Africa/Bissau"
	AfricaBlantyre                 SystemSettingsRequestTimeZone = "Africa/Blantyre"
	AfricaBrazzaville              SystemSettingsRequestTimeZone = "Africa/Brazzaville"
	AfricaBujumbura                SystemSettingsRequestTimeZone = "Africa/Bujumbura"
	AfricaCairo                    SystemSettingsRequestTimeZone = "Africa/Cairo"
	AfricaCasablanca               SystemSettingsRequestTimeZone = "Africa/Casablanca"
	AfricaCeuta                    SystemSettingsRequestTimeZone = "Africa/Ceuta"
	AfricaConakry                  SystemSettingsRequestTimeZone = "Africa/Conakry"
	AfricaDakar                    SystemSettingsRequestTimeZone = "Africa/Dakar"
	AfricaDarEsSalaam              SystemSettingsRequestTimeZone = "Africa/Dar_es_Salaam"
	AfricaDjibouti                 SystemSettingsRequestTimeZone = "Africa/Djibouti"
	AfricaDouala                   SystemSettingsRequestTimeZone = "Africa/Douala"
	AfricaElAaiun                  SystemSettingsRequestTimeZone = "Africa/El_Aaiun"
	AfricaFreetown                 SystemSettingsRequestTimeZone = "Africa/Freetown"
	AfricaGaborone                 SystemSettingsRequestTimeZone = "Africa/Gaborone"
	AfricaHarare                   SystemSettingsRequestTimeZone = "Africa/Harare"
	AfricaJohannesburg             SystemSettingsRequestTimeZone = "Africa/Johannesburg"
	AfricaJuba                     SystemSettingsRequestTimeZone = "Africa/Juba"
	AfricaKampala                  SystemSettingsRequestTimeZone = "Africa/Kampala"
	AfricaKhartoum                 SystemSettingsRequestTimeZone = "Africa/Khartoum"
	AfricaKigali                   SystemSettingsRequestTimeZone = "Africa/Kigali"
	AfricaKinshasa                 SystemSettingsRequestTimeZone = "Africa/Kinshasa"
	AfricaLagos                    SystemSettingsRequestTimeZone = "Africa/Lagos"
	AfricaLibreville               SystemSettingsRequestTimeZone = "Africa/Libreville"
	AfricaLome                     SystemSettingsRequestTimeZone = "Africa/Lome"
	AfricaLuanda                   SystemSettingsRequestTimeZone = "Africa/Luanda"
	AfricaLubumbashi               SystemSettingsRequestTimeZone = "Africa/Lubumbashi"
	AfricaLusaka                   SystemSettingsRequestTimeZone = "Africa/Lusaka"
	AfricaMalabo                   SystemSettingsRequestTimeZone = "Africa/Malabo"
	AfricaMaputo                   SystemSettingsRequestTimeZone = "Africa/Maputo"
	AfricaMaseru                   SystemSettingsRequestTimeZone = "Africa/Maseru"
	AfricaMbabane                  SystemSettingsRequestTimeZone = "Africa/Mbabane"
	AfricaMogadishu                SystemSettingsRequestTimeZone = "Africa/Mogadishu"
	AfricaMonrovia                 SystemSettingsRequestTimeZone = "Africa/Monrovia"
	AfricaNairobi                  SystemSettingsRequestTimeZone = "Africa/Nairobi"
	AfricaNdjamena                 SystemSettingsRequestTimeZone = "Africa/Ndjamena"
	AfricaNiamey                   SystemSettingsRequestTimeZone = "Africa/Niamey"
	AfricaNouakchott               SystemSettingsRequestTimeZone = "Africa/Nouakchott"
	AfricaOuagadougou              SystemSettingsRequestTimeZone = "Africa/Ouagadougou"
	AfricaPortoNovo                SystemSettingsRequestTimeZone = "Africa/Porto-Novo"
	AfricaSaoTome                  SystemSettingsRequestTimeZone = "Africa/Sao_Tome"
	AfricaTimbuktu                 SystemSettingsRequestTimeZone = "Africa/Timbuktu"
	AfricaTripoli                  SystemSettingsRequestTimeZone = "Africa/Tripoli"
	AfricaTunis                    SystemSettingsRequestTimeZone = "Africa/Tunis"
	AfricaWindhoek                 SystemSettingsRequestTimeZone = "Africa/Windhoek"
	AmericaAdak                    SystemSettingsRequestTimeZone = "America/Adak"
	AmericaAnchorage               SystemSettingsRequestTimeZone = "America/Anchorage"
	AmericaAnguilla                SystemSettingsRequestTimeZone = "America/Anguilla"
	AmericaAntigua                 SystemSettingsRequestTimeZone = "America/Antigua"
	AmericaAraguaina               SystemSettingsRequestTimeZone = "America/Araguaina"
	AmericaArgentinaBuenosAires    SystemSettingsRequestTimeZone = "America/Argentina/Buenos_Aires"
	AmericaArgentinaCatamarca      SystemSettingsRequestTimeZone = "America/Argentina/Catamarca"
	AmericaArgentinaComodRivadavia SystemSettingsRequestTimeZone = "America/Argentina/ComodRivadavia"
	AmericaArgentinaCordoba        SystemSettingsRequestTimeZone = "America/Argentina/Cordoba"
	AmericaArgentinaJujuy          SystemSettingsRequestTimeZone = "America/Argentina/Jujuy"
	AmericaArgentinaLaRioja        SystemSettingsRequestTimeZone = "America/Argentina/La_Rioja"
	AmericaArgentinaMendoza        SystemSettingsRequestTimeZone = "America/Argentina/Mendoza"
	AmericaArgentinaRioGallegos    SystemSettingsRequestTimeZone = "America/Argentina/Rio_Gallegos"
	AmericaArgentinaSalta          SystemSettingsRequestTimeZone = "America/Argentina/Salta"
	AmericaArgentinaSanJuan        SystemSettingsRequestTimeZone = "America/Argentina/San_Juan"
	AmericaArgentinaSanLuis        SystemSettingsRequestTimeZone = "America/Argentina/San_Luis"
	AmericaArgentinaTucuman        SystemSettingsRequestTimeZone = "America/Argentina/Tucuman"
	AmericaArgentinaUshuaia        SystemSettingsRequestTimeZone = "America/Argentina/Ushuaia"
	AmericaAruba                   SystemSettingsRequestTimeZone = "America/Aruba"
	AmericaAsuncion                SystemSettingsRequestTimeZone = "America/Asuncion"
	AmericaAtikokan                SystemSettingsRequestTimeZone = "America/Atikokan"
	AmericaAtka                    SystemSettingsRequestTimeZone = "America/Atka"
	AmericaBahia                   SystemSettingsRequestTimeZone = "America/Bahia"
	AmericaBahiaBanderas           SystemSettingsRequestTimeZone = "America/Bahia_Banderas"
	AmericaBarbados                SystemSettingsRequestTimeZone = "America/Barbados"
	AmericaBelem                   SystemSettingsRequestTimeZone = "America/Belem"
	AmericaBelize                  SystemSettingsRequestTimeZone = "America/Belize"
	AmericaBlancSablon             SystemSettingsRequestTimeZone = "America/Blanc-Sablon"
	AmericaBoaVista                SystemSettingsRequestTimeZone = "America/Boa_Vista"
	AmericaBogota                  SystemSettingsRequestTimeZone = "America/Bogota"
	AmericaBoise                   SystemSettingsRequestTimeZone = "America/Boise"
	AmericaBuenosAires             SystemSettingsRequestTimeZone = "America/Buenos_Aires"
	AmericaCambridgeBay            SystemSettingsRequestTimeZone = "America/Cambridge_Bay"
	AmericaCampoGrande             SystemSettingsRequestTimeZone = "America/Campo_Grande"
	AmericaCancun                  SystemSettingsRequestTimeZone = "America/Cancun"
	AmericaCaracas                 SystemSettingsRequestTimeZone = "America/Caracas"
	AmericaCatamarca               SystemSettingsRequestTimeZone = "America/Catamarca"
	AmericaCayenne                 SystemSettingsRequestTimeZone = "America/Cayenne"
	AmericaCayman                  SystemSettingsRequestTimeZone = "America/Cayman"
	AmericaChicago                 SystemSettingsRequestTimeZone = "America/Chicago"
	AmericaChihuahua               SystemSettingsRequestTimeZone = "America/Chihuahua"
	AmericaCiudadJuarez            SystemSettingsRequestTimeZone = "America/Ciudad_Juarez"
	AmericaCoralHarbour            SystemSettingsRequestTimeZone = "America/Coral_Harbour"
	AmericaCordoba                 SystemSettingsRequestTimeZone = "America/Cordoba"
	AmericaCostaRica               SystemSettingsRequestTimeZone = "America/Costa_Rica"
	AmericaCreston                 SystemSettingsRequestTimeZone = "America/Creston"
	AmericaCuiaba                  SystemSettingsRequestTimeZone = "America/Cuiaba"
	AmericaCuracao                 SystemSettingsRequestTimeZone = "America/Curacao"
	AmericaDanmarkshavn            SystemSettingsRequestTimeZone = "America/Danmarkshavn"
	AmericaDawson                  SystemSettingsRequestTimeZone = "America/Dawson"
	AmericaDawsonCreek             SystemSettingsRequestTimeZone = "America/Dawson_Creek"
	AmericaDenver                  SystemSettingsRequestTimeZone = "America/Denver"
	AmericaDetroit                 SystemSettingsRequestTimeZone = "America/Detroit"
	AmericaDominica                SystemSettingsRequestTimeZone = "America/Dominica"
	AmericaEdmonton                SystemSettingsRequestTimeZone = "America/Edmonton"
	AmericaEirunepe                SystemSettingsRequestTimeZone = "America/Eirunepe"
	AmericaElSalvador              SystemSettingsRequestTimeZone = "America/El_Salvador"
	AmericaEnsenada                SystemSettingsRequestTimeZone = "America/Ensenada"
	AmericaFortNelson              SystemSettingsRequestTimeZone = "America/Fort_Nelson"
	AmericaFortWayne               SystemSettingsRequestTimeZone = "America/Fort_Wayne"
	AmericaFortaleza               SystemSettingsRequestTimeZone = "America/Fortaleza"
	AmericaGlaceBay                SystemSettingsRequestTimeZone = "America/Glace_Bay"
	AmericaGodthab                 SystemSettingsRequestTimeZone = "America/Godthab"
	AmericaGooseBay                SystemSettingsRequestTimeZone = "America/Goose_Bay"
	AmericaGrandTurk               SystemSettingsRequestTimeZone = "America/Grand_Turk"
	AmericaGrenada                 SystemSettingsRequestTimeZone = "America/Grenada"
	AmericaGuadeloupe              SystemSettingsRequestTimeZone = "America/Guadeloupe"
	AmericaGuatemala               SystemSettingsRequestTimeZone = "America/Guatemala"
	AmericaGuayaquil               SystemSettingsRequestTimeZone = "America/Guayaquil"
	AmericaGuyana                  SystemSettingsRequestTimeZone = "America/Guyana"
	AmericaHalifax                 SystemSettingsRequestTimeZone = "America/Halifax"
	AmericaHavana                  SystemSettingsRequestTimeZone = "America/Havana"
	AmericaHermosillo              SystemSettingsRequestTimeZone = "America/Hermosillo"
	AmericaIndianaIndianapolis     SystemSettingsRequestTimeZone = "America/Indiana/Indianapolis"
	AmericaIndianaKnox             SystemSettingsRequestTimeZone = "America/Indiana/Knox"
	AmericaIndianaMarengo          SystemSettingsRequestTimeZone = "America/Indiana/Marengo"
	AmericaIndianaPetersburg       SystemSettingsRequestTimeZone = "America/Indiana/Petersburg"
	AmericaIndianaTellCity         SystemSettingsRequestTimeZone = "America/Indiana/Tell_City"
	AmericaIndianaVevay            SystemSettingsRequestTimeZone = "America/Indiana/Vevay"
	AmericaIndianaVincennes        SystemSettingsRequestTimeZone = "America/Indiana/Vincennes"
	AmericaIndianaWinamac          SystemSettingsRequestTimeZone = "America/Indiana/Winamac"
	AmericaIndianapolis            SystemSettingsRequestTimeZone = "America/Indianapolis"
	AmericaInuvik                  SystemSettingsRequestTimeZone = "America/Inuvik"
	AmericaIqaluit                 SystemSettingsRequestTimeZone = "America/Iqaluit"
	AmericaJamaica                 SystemSettingsRequestTimeZone = "America/Jamaica"
	AmericaJujuy                   SystemSettingsRequestTimeZone = "America/Jujuy"
	AmericaJuneau                  SystemSettingsRequestTimeZone = "America/Juneau"
	AmericaKentuckyLouisville      SystemSettingsRequestTimeZone = "America/Kentucky/Louisville"
	AmericaKentuckyMonticello      SystemSettingsRequestTimeZone = "America/Kentucky/Monticello"
	AmericaKnoxIN                  SystemSettingsRequestTimeZone = "America/Knox_IN"
	AmericaKralendijk              SystemSettingsRequestTimeZone = "America/Kralendijk"
	AmericaLaPaz                   SystemSettingsRequestTimeZone = "America/La_Paz"
	AmericaLima                    SystemSettingsRequestTimeZone = "America/Lima"
	AmericaLosAngeles              SystemSettingsRequestTimeZone = "America/Los_Angeles"
	AmericaLouisville              SystemSettingsRequestTimeZone = "America/Louisville"
	AmericaLowerPrinces            SystemSettingsRequestTimeZone = "America/Lower_Princes"
	AmericaMaceio                  SystemSettingsRequestTimeZone = "America/Maceio"
	AmericaManagua                 SystemSettingsRequestTimeZone = "America/Managua"
	AmericaManaus                  SystemSettingsRequestTimeZone = "America/Manaus"
	AmericaMarigot                 SystemSettingsRequestTimeZone = "America/Marigot"
	AmericaMartinique              SystemSettingsRequestTimeZone = "America/Martinique"
	AmericaMatamoros               SystemSettingsRequestTimeZone = "America/Matamoros"
	AmericaMazatlan                SystemSettingsRequestTimeZone = "America/Mazatlan"
	AmericaMendoza                 SystemSettingsRequestTimeZone = "America/Mendoza"
	AmericaMenominee               SystemSettingsRequestTimeZone = "America/Menominee"
	AmericaMerida                  SystemSettingsRequestTimeZone = "America/Merida"
	AmericaMetlakatla              SystemSettingsRequestTimeZone = "America/Metlakatla"
	AmericaMexicoCity              SystemSettingsRequestTimeZone = "America/Mexico_City"
	AmericaMiquelon                SystemSettingsRequestTimeZone = "America/Miquelon"
	AmericaMoncton                 SystemSettingsRequestTimeZone = "America/Moncton"
	AmericaMonterrey               SystemSettingsRequestTimeZone = "America/Monterrey"
	AmericaMontevideo              SystemSettingsRequestTimeZone = "America/Montevideo"
	AmericaMontreal                SystemSettingsRequestTimeZone = "America/Montreal"
	AmericaMontserrat              SystemSettingsRequestTimeZone = "America/Montserrat"
	AmericaNassau                  SystemSettingsRequestTimeZone = "America/Nassau"
	AmericaNewYork                 SystemSettingsRequestTimeZone = "America/New_York"
	AmericaNipigon                 SystemSettingsRequestTimeZone = "America/Nipigon"
	AmericaNome                    SystemSettingsRequestTimeZone = "America/Nome"
	AmericaNoronha                 SystemSettingsRequestTimeZone = "America/Noronha"
	AmericaNorthDakotaBeulah       SystemSettingsRequestTimeZone = "America/North_Dakota/Beulah"
	AmericaNorthDakotaCenter       SystemSettingsRequestTimeZone = "America/North_Dakota/Center"
	AmericaNorthDakotaNewSalem     SystemSettingsRequestTimeZone = "America/North_Dakota/New_Salem"
	AmericaNuuk                    SystemSettingsRequestTimeZone = "America/Nuuk"
	AmericaOjinaga                 SystemSettingsRequestTimeZone = "America/Ojinaga"
	AmericaPanama                  SystemSettingsRequestTimeZone = "America/Panama"
	AmericaPangnirtung             SystemSettingsRequestTimeZone = "America/Pangnirtung"
	AmericaParamaribo              SystemSettingsRequestTimeZone = "America/Paramaribo"
	AmericaPhoenix                 SystemSettingsRequestTimeZone = "America/Phoenix"
	AmericaPortAuPrince            SystemSettingsRequestTimeZone = "America/Port-au-Prince"
	AmericaPortOfSpain             SystemSettingsRequestTimeZone = "America/Port_of_Spain"
	AmericaPortoAcre               SystemSettingsRequestTimeZone = "America/Porto_Acre"
	AmericaPortoVelho              SystemSettingsRequestTimeZone = "America/Porto_Velho"
	AmericaPuertoRico              SystemSettingsRequestTimeZone = "America/Puerto_Rico"
	AmericaPuntaArenas             SystemSettingsRequestTimeZone = "America/Punta_Arenas"
	AmericaRainyRiver              SystemSettingsRequestTimeZone = "America/Rainy_River"
	AmericaRankinInlet             SystemSettingsRequestTimeZone = "America/Rankin_Inlet"
	AmericaRecife                  SystemSettingsRequestTimeZone = "America/Recife"
	AmericaRegina                  SystemSettingsRequestTimeZone = "America/Regina"
	AmericaResolute                SystemSettingsRequestTimeZone = "America/Resolute"
	AmericaRioBranco               SystemSettingsRequestTimeZone = "America/Rio_Branco"
	AmericaRosario                 SystemSettingsRequestTimeZone = "America/Rosario"
	AmericaSantaIsabel             SystemSettingsRequestTimeZone = "America/Santa_Isabel"
	AmericaSantarem                SystemSettingsRequestTimeZone = "America/Santarem"
	AmericaSantiago                SystemSettingsRequestTimeZone = "America/Santiago"
	AmericaSantoDomingo            SystemSettingsRequestTimeZone = "America/Santo_Domingo"
	AmericaSaoPaulo                SystemSettingsRequestTimeZone = "America/Sao_Paulo"
	AmericaScoresbysund            SystemSettingsRequestTimeZone = "America/Scoresbysund"
	AmericaShiprock                SystemSettingsRequestTimeZone = "America/Shiprock"
	AmericaSitka                   SystemSettingsRequestTimeZone = "America/Sitka"
	AmericaStBarthelemy            SystemSettingsRequestTimeZone = "America/St_Barthelemy"
	AmericaStJohns                 SystemSettingsRequestTimeZone = "America/St_Johns"
	AmericaStKitts                 SystemSettingsRequestTimeZone = "America/St_Kitts"
	AmericaStLucia                 SystemSettingsRequestTimeZone = "America/St_Lucia"
	AmericaStThomas                SystemSettingsRequestTimeZone = "America/St_Thomas"
	AmericaStVincent               SystemSettingsRequestTimeZone = "America/St_Vincent"
	AmericaSwiftCurrent            SystemSettingsRequestTimeZone = "America/Swift_Current"
	AmericaTegucigalpa             SystemSettingsRequestTimeZone = "America/Tegucigalpa"
	AmericaThule                   SystemSettingsRequestTimeZone = "America/Thule"
	AmericaThunderBay              SystemSettingsRequestTimeZone = "America/Thunder_Bay"
	AmericaTijuana                 SystemSettingsRequestTimeZone = "America/Tijuana"
	AmericaToronto                 SystemSettingsRequestTimeZone = "America/Toronto"
	AmericaTortola                 SystemSettingsRequestTimeZone = "America/Tortola"
	AmericaVancouver               SystemSettingsRequestTimeZone = "America/Vancouver"
	AmericaVirgin                  SystemSettingsRequestTimeZone = "America/Virgin"
	AmericaWhitehorse              SystemSettingsRequestTimeZone = "America/Whitehorse"
	AmericaWinnipeg                SystemSettingsRequestTimeZone = "America/Winnipeg"
	AmericaYakutat                 SystemSettingsRequestTimeZone = "America/Yakutat"
	AmericaYellowknife             SystemSettingsRequestTimeZone = "America/Yellowknife"
	AntarcticaCasey                SystemSettingsRequestTimeZone = "Antarctica/Casey"
	AntarcticaDavis                SystemSettingsRequestTimeZone = "Antarctica/Davis"
	AntarcticaDumontDUrville       SystemSettingsRequestTimeZone = "Antarctica/DumontDUrville"
	AntarcticaMacquarie            SystemSettingsRequestTimeZone = "Antarctica/Macquarie"
	AntarcticaMawson               SystemSettingsRequestTimeZone = "Antarctica/Mawson"
	AntarcticaMcMurdo              SystemSettingsRequestTimeZone = "Antarctica/McMurdo"
	AntarcticaPalmer               SystemSettingsRequestTimeZone = "Antarctica/Palmer"
	AntarcticaRothera              SystemSettingsRequestTimeZone = "Antarctica/Rothera"
	AntarcticaSouthPole            SystemSettingsRequestTimeZone = "Antarctica/South_Pole"
	AntarcticaSyowa                SystemSettingsRequestTimeZone = "Antarctica/Syowa"
	AntarcticaTroll                SystemSettingsRequestTimeZone = "Antarctica/Troll"
	AntarcticaVostok               SystemSettingsRequestTimeZone = "Antarctica/Vostok"
	ArcticLongyearbyen             SystemSettingsRequestTimeZone = "Arctic/Longyearbyen"
	AsiaAden                       SystemSettingsRequestTimeZone = "Asia/Aden"
	AsiaAlmaty                     SystemSettingsRequestTimeZone = "Asia/Almaty"
	AsiaAmman                      SystemSettingsRequestTimeZone = "Asia/Amman"
	AsiaAnadyr                     SystemSettingsRequestTimeZone = "Asia/Anadyr"
	AsiaAqtau                      SystemSettingsRequestTimeZone = "Asia/Aqtau"
	AsiaAqtobe                     SystemSettingsRequestTimeZone = "Asia/Aqtobe"
	AsiaAshgabat                   SystemSettingsRequestTimeZone = "Asia/Ashgabat"
	AsiaAshkhabad                  SystemSettingsRequestTimeZone = "Asia/Ashkhabad"
	AsiaAtyrau                     SystemSettingsRequestTimeZone = "Asia/Atyrau"
	AsiaBaghdad                    SystemSettingsRequestTimeZone = "Asia/Baghdad"
	AsiaBahrain                    SystemSettingsRequestTimeZone = "Asia/Bahrain"
	AsiaBaku                       SystemSettingsRequestTimeZone = "Asia/Baku"
	AsiaBangkok                    SystemSettingsRequestTimeZone = "Asia/Bangkok"
	AsiaBarnaul                    SystemSettingsRequestTimeZone = "Asia/Barnaul"
	AsiaBeirut                     SystemSettingsRequestTimeZone = "Asia/Beirut"
	AsiaBishkek                    SystemSettingsRequestTimeZone = "Asia/Bishkek"
	AsiaBrunei                     SystemSettingsRequestTimeZone = "Asia/Brunei"
	AsiaCalcutta                   SystemSettingsRequestTimeZone = "Asia/Calcutta"
	AsiaChita                      SystemSettingsRequestTimeZone = "Asia/Chita"
	AsiaChoibalsan                 SystemSettingsRequestTimeZone = "Asia/Choibalsan"
	AsiaChongqing                  SystemSettingsRequestTimeZone = "Asia/Chongqing"
	AsiaChungking                  SystemSettingsRequestTimeZone = "Asia/Chungking"
	AsiaColombo                    SystemSettingsRequestTimeZone = "Asia/Colombo"
	AsiaDacca                      SystemSettingsRequestTimeZone = "Asia/Dacca"
	AsiaDamascus                   SystemSettingsRequestTimeZone = "Asia/Damascus"
	AsiaDhaka                      SystemSettingsRequestTimeZone = "Asia/Dhaka"
	AsiaDili                       SystemSettingsRequestTimeZone = "Asia/Dili"
	AsiaDubai                      SystemSettingsRequestTimeZone = "Asia/Dubai"
	AsiaDushanbe                   SystemSettingsRequestTimeZone = "Asia/Dushanbe"
	AsiaFamagusta                  SystemSettingsRequestTimeZone = "Asia/Famagusta"
	AsiaGaza                       SystemSettingsRequestTimeZone = "Asia/Gaza"
	AsiaHarbin                     SystemSettingsRequestTimeZone = "Asia/Harbin"
	AsiaHebron                     SystemSettingsRequestTimeZone = "Asia/Hebron"
	AsiaHoChiMinh                  SystemSettingsRequestTimeZone = "Asia/Ho_Chi_Minh"
	AsiaHongKong                   SystemSettingsRequestTimeZone = "Asia/Hong_Kong"
	AsiaHovd                       SystemSettingsRequestTimeZone = "Asia/Hovd"
	AsiaIrkutsk                    SystemSettingsRequestTimeZone = "Asia/Irkutsk"
	AsiaIstanbul                   SystemSettingsRequestTimeZone = "Asia/Istanbul"
	AsiaJakarta                    SystemSettingsRequestTimeZone = "Asia/Jakarta"
	AsiaJayapura                   SystemSettingsRequestTimeZone = "Asia/Jayapura"
	AsiaJerusalem                  SystemSettingsRequestTimeZone = "Asia/Jerusalem"
	AsiaKabul                      SystemSettingsRequestTimeZone = "Asia/Kabul"
	AsiaKamchatka                  SystemSettingsRequestTimeZone = "Asia/Kamchatka"
	AsiaKarachi                    SystemSettingsRequestTimeZone = "Asia/Karachi"
	AsiaKashgar                    SystemSettingsRequestTimeZone = "Asia/Kashgar"
	AsiaKathmandu                  SystemSettingsRequestTimeZone = "Asia/Kathmandu"
	AsiaKatmandu                   SystemSettingsRequestTimeZone = "Asia/Katmandu"
	AsiaKhandyga                   SystemSettingsRequestTimeZone = "Asia/Khandyga"
	AsiaKolkata                    SystemSettingsRequestTimeZone = "Asia/Kolkata"
	AsiaKrasnoyarsk                SystemSettingsRequestTimeZone = "Asia/Krasnoyarsk"
	AsiaKualaLumpur                SystemSettingsRequestTimeZone = "Asia/Kuala_Lumpur"
	AsiaKuching                    SystemSettingsRequestTimeZone = "Asia/Kuching"
	AsiaKuwait                     SystemSettingsRequestTimeZone = "Asia/Kuwait"
	AsiaMacao                      SystemSettingsRequestTimeZone = "Asia/Macao"
	AsiaMacau                      SystemSettingsRequestTimeZone = "Asia/Macau"
	AsiaMagadan                    SystemSettingsRequestTimeZone = "Asia/Magadan"
	AsiaMakassar                   SystemSettingsRequestTimeZone = "Asia/Makassar"
	AsiaManila                     SystemSettingsRequestTimeZone = "Asia/Manila"
	AsiaMuscat                     SystemSettingsRequestTimeZone = "Asia/Muscat"
	AsiaNicosia                    SystemSettingsRequestTimeZone = "Asia/Nicosia"
	AsiaNovokuznetsk               SystemSettingsRequestTimeZone = "Asia/Novokuznetsk"
	AsiaNovosibirsk                SystemSettingsRequestTimeZone = "Asia/Novosibirsk"
	AsiaOmsk                       SystemSettingsRequestTimeZone = "Asia/Omsk"
	AsiaOral                       SystemSettingsRequestTimeZone = "Asia/Oral"
	AsiaPhnomPenh                  SystemSettingsRequestTimeZone = "Asia/Phnom_Penh"
	AsiaPontianak                  SystemSettingsRequestTimeZone = "Asia/Pontianak"
	AsiaPyongyang                  SystemSettingsRequestTimeZone = "Asia/Pyongyang"
	AsiaQatar                      SystemSettingsRequestTimeZone = "Asia/Qatar"
	AsiaQostanay                   SystemSettingsRequestTimeZone = "Asia/Qostanay"
	AsiaQyzylorda                  SystemSettingsRequestTimeZone = "Asia/Qyzylorda"
	AsiaRangoon                    SystemSettingsRequestTimeZone = "Asia/Rangoon"
	AsiaRiyadh                     SystemSettingsRequestTimeZone = "Asia/Riyadh"
	AsiaSaigon                     SystemSettingsRequestTimeZone = "Asia/Saigon"
	AsiaSakhalin                   SystemSettingsRequestTimeZone = "Asia/Sakhalin"
	AsiaSamarkand                  SystemSettingsRequestTimeZone = "Asia/Samarkand"
	AsiaSeoul                      SystemSettingsRequestTimeZone = "Asia/Seoul"
	AsiaShanghai                   SystemSettingsRequestTimeZone = "Asia/Shanghai"
	AsiaSingapore                  SystemSettingsRequestTimeZone = "Asia/Singapore"
	AsiaSrednekolymsk              SystemSettingsRequestTimeZone = "Asia/Srednekolymsk"
	AsiaTaipei                     SystemSettingsRequestTimeZone = "Asia/Taipei"
	AsiaTashkent                   SystemSettingsRequestTimeZone = "Asia/Tashkent"
	AsiaTbilisi                    SystemSettingsRequestTimeZone = "Asia/Tbilisi"
	AsiaTehran                     SystemSettingsRequestTimeZone = "Asia/Tehran"
	AsiaTelAviv                    SystemSettingsRequestTimeZone = "Asia/Tel_Aviv"
	AsiaThimbu                     SystemSettingsRequestTimeZone = "Asia/Thimbu"
	AsiaThimphu                    SystemSettingsRequestTimeZone = "Asia/Thimphu"
	AsiaTokyo                      SystemSettingsRequestTimeZone = "Asia/Tokyo"
	AsiaTomsk                      SystemSettingsRequestTimeZone = "Asia/Tomsk"
	AsiaUjungPandang               SystemSettingsRequestTimeZone = "Asia/Ujung_Pandang"
	AsiaUlaanbaatar                SystemSettingsRequestTimeZone = "Asia/Ulaanbaatar"
	AsiaUlanBator                  SystemSettingsRequestTimeZone = "Asia/Ulan_Bator"
	AsiaUrumqi                     SystemSettingsRequestTimeZone = "Asia/Urumqi"
	AsiaUstNera                    SystemSettingsRequestTimeZone = "Asia/Ust-Nera"
	AsiaVientiane                  SystemSettingsRequestTimeZone = "Asia/Vientiane"
	AsiaVladivostok                SystemSettingsRequestTimeZone = "Asia/Vladivostok"
	AsiaYakutsk                    SystemSettingsRequestTimeZone = "Asia/Yakutsk"
	AsiaYangon                     SystemSettingsRequestTimeZone = "Asia/Yangon"
	AsiaYekaterinburg              SystemSettingsRequestTimeZone = "Asia/Yekaterinburg"
	AsiaYerevan                    SystemSettingsRequestTimeZone = "Asia/Yerevan"
	AtlanticAzores                 SystemSettingsRequestTimeZone = "Atlantic/Azores"
	AtlanticBermuda                SystemSettingsRequestTimeZone = "Atlantic/Bermuda"
	AtlanticCanary                 SystemSettingsRequestTimeZone = "Atlantic/Canary"
	AtlanticCapeVerde              SystemSettingsRequestTimeZone = "Atlantic/Cape_Verde"
	AtlanticFaeroe                 SystemSettingsRequestTimeZone = "Atlantic/Faeroe"
	AtlanticFaroe                  SystemSettingsRequestTimeZone = "Atlantic/Faroe"
	AtlanticJanMayen               SystemSettingsRequestTimeZone = "Atlantic/Jan_Mayen"
	AtlanticMadeira                SystemSettingsRequestTimeZone = "Atlantic/Madeira"
	AtlanticReykjavik              SystemSettingsRequestTimeZone = "Atlantic/Reykjavik"
	AtlanticSouthGeorgia           SystemSettingsRequestTimeZone = "Atlantic/South_Georgia"
	AtlanticStHelena               SystemSettingsRequestTimeZone = "Atlantic/St_Helena"
	AtlanticStanley                SystemSettingsRequestTimeZone = "Atlantic/Stanley"
	AustraliaACT                   SystemSettingsRequestTimeZone = "Australia/ACT"
	AustraliaAdelaide              SystemSettingsRequestTimeZone = "Australia/Adelaide"
	AustraliaBrisbane              SystemSettingsRequestTimeZone = "Australia/Brisbane"
	AustraliaBrokenHill            SystemSettingsRequestTimeZone = "Australia/Broken_Hill"
	AustraliaCanberra              SystemSettingsRequestTimeZone = "Australia/Canberra"
	AustraliaCurrie                SystemSettingsRequestTimeZone = "Australia/Currie"
	AustraliaDarwin                SystemSettingsRequestTimeZone = "Australia/Darwin"
	AustraliaEucla                 SystemSettingsRequestTimeZone = "Australia/Eucla"
	AustraliaHobart                SystemSettingsRequestTimeZone = "Australia/Hobart"
	AustraliaLHI                   SystemSettingsRequestTimeZone = "Australia/LHI"
	AustraliaLindeman              SystemSettingsRequestTimeZone = "Australia/Lindeman"
	AustraliaLordHowe              SystemSettingsRequestTimeZone = "Australia/Lord_Howe"
	AustraliaMelbourne             SystemSettingsRequestTimeZone = "Australia/Melbourne"
	AustraliaNSW                   SystemSettingsRequestTimeZone = "Australia/NSW"
	AustraliaNorth                 SystemSettingsRequestTimeZone = "Australia/North"
	AustraliaPerth                 SystemSettingsRequestTimeZone = "Australia/Perth"
	AustraliaQueensland            SystemSettingsRequestTimeZone = "Australia/Queensland"
	AustraliaSouth                 SystemSettingsRequestTimeZone = "Australia/South"
	AustraliaSydney                SystemSettingsRequestTimeZone = "Australia/Sydney"
	AustraliaTasmania              SystemSettingsRequestTimeZone = "Australia/Tasmania"
	AustraliaVictoria              SystemSettingsRequestTimeZone = "Australia/Victoria"
	AustraliaWest                  SystemSettingsRequestTimeZone = "Australia/West"
	AustraliaYancowinna            SystemSettingsRequestTimeZone = "Australia/Yancowinna"
	BrazilAcre                     SystemSettingsRequestTimeZone = "Brazil/Acre"
	BrazilDeNoronha                SystemSettingsRequestTimeZone = "Brazil/DeNoronha"
	BrazilEast                     SystemSettingsRequestTimeZone = "Brazil/East"
	BrazilWest                     SystemSettingsRequestTimeZone = "Brazil/West"
	CET                            SystemSettingsRequestTimeZone = "CET"
	CST6CDT                        SystemSettingsRequestTimeZone = "CST6CDT"
	CanadaAtlantic                 SystemSettingsRequestTimeZone = "Canada/Atlantic"
	CanadaCentral                  SystemSettingsRequestTimeZone = "Canada/Central"
	CanadaEastern                  SystemSettingsRequestTimeZone = "Canada/Eastern"
	CanadaMountain                 SystemSettingsRequestTimeZone = "Canada/Mountain"
	CanadaNewfoundland             SystemSettingsRequestTimeZone = "Canada/Newfoundland"
	CanadaPacific                  SystemSettingsRequestTimeZone = "Canada/Pacific"
	CanadaSaskatchewan             SystemSettingsRequestTimeZone = "Canada/Saskatchewan"
	CanadaYukon                    SystemSettingsRequestTimeZone = "Canada/Yukon"
	ChileContinental               SystemSettingsRequestTimeZone = "Chile/Continental"
	ChileEasterIsland              SystemSettingsRequestTimeZone = "Chile/EasterIsland"
	Cuba                           SystemSettingsRequestTimeZone = "Cuba"
	EET                            SystemSettingsRequestTimeZone = "EET"
	EST                            SystemSettingsRequestTimeZone = "EST"
	EST5EDT                        SystemSettingsRequestTimeZone = "EST5EDT"
	Egypt                          SystemSettingsRequestTimeZone = "Egypt"
	Eire                           SystemSettingsRequestTimeZone = "Eire"
	EtcGMT                         SystemSettingsRequestTimeZone = "Etc/GMT"
	EtcGMT0                        SystemSettingsRequestTimeZone = "Etc/GMT+0"
	EtcGMT01                       SystemSettingsRequestTimeZone = "Etc/GMT-0"
	EtcGMT02                       SystemSettingsRequestTimeZone = "Etc/GMT0"
	EtcGMT1                        SystemSettingsRequestTimeZone = "Etc/GMT+1"
	EtcGMT10                       SystemSettingsRequestTimeZone = "Etc/GMT+10"
	EtcGMT101                      SystemSettingsRequestTimeZone = "Etc/GMT-10"
	EtcGMT11                       SystemSettingsRequestTimeZone = "Etc/GMT-1"
	EtcGMT111                      SystemSettingsRequestTimeZone = "Etc/GMT-11"
	EtcGMT12                       SystemSettingsRequestTimeZone = "Etc/GMT+12"
	EtcGMT121                      SystemSettingsRequestTimeZone = "Etc/GMT-12"
	EtcGMT13                       SystemSettingsRequestTimeZone = "Etc/GMT-13"
	EtcGMT14                       SystemSettingsRequestTimeZone = "Etc/GMT-14"
	EtcGMT2                        SystemSettingsRequestTimeZone = "Etc/GMT+2"
	EtcGMT21                       SystemSettingsRequestTimeZone = "Etc/GMT-2"
	EtcGMT3                        SystemSettingsRequestTimeZone = "Etc/GMT+3"
	EtcGMT31                       SystemSettingsRequestTimeZone = "Etc/GMT-3"
	EtcGMT4                        SystemSettingsRequestTimeZone = "Etc/GMT+4"
	EtcGMT41                       SystemSettingsRequestTimeZone = "Etc/GMT-4"
	EtcGMT5                        SystemSettingsRequestTimeZone = "Etc/GMT+5"
	EtcGMT51                       SystemSettingsRequestTimeZone = "Etc/GMT-5"
	EtcGMT6                        SystemSettingsRequestTimeZone = "Etc/GMT+6"
	EtcGMT61                       SystemSettingsRequestTimeZone = "Etc/GMT-6"
	EtcGMT7                        SystemSettingsRequestTimeZone = "Etc/GMT+7"
	EtcGMT71                       SystemSettingsRequestTimeZone = "Etc/GMT-7"
	EtcGMT8                        SystemSettingsRequestTimeZone = "Etc/GMT+8"
	EtcGMT81                       SystemSettingsRequestTimeZone = "Etc/GMT-8"
	EtcGMT9                        SystemSettingsRequestTimeZone = "Etc/GMT+9"
	EtcGMT91                       SystemSettingsRequestTimeZone = "Etc/GMT-9"
	EtcGreenwich                   SystemSettingsRequestTimeZone = "Etc/Greenwich"
	EtcUCT                         SystemSettingsRequestTimeZone = "Etc/UCT"
	EtcUTC                         SystemSettingsRequestTimeZone = "Etc/UTC"
	EtcUniversal                   SystemSettingsRequestTimeZone = "Etc/Universal"
	EtcZulu                        SystemSettingsRequestTimeZone = "Etc/Zulu"
	EuropeAmsterdam                SystemSettingsRequestTimeZone = "Europe/Amsterdam"
	EuropeAndorra                  SystemSettingsRequestTimeZone = "Europe/Andorra"
	EuropeAstrakhan                SystemSettingsRequestTimeZone = "Europe/Astrakhan"
	EuropeAthens                   SystemSettingsRequestTimeZone = "Europe/Athens"
	EuropeBelfast                  SystemSettingsRequestTimeZone = "Europe/Belfast"
	EuropeBelgrade                 SystemSettingsRequestTimeZone = "Europe/Belgrade"
	EuropeBerlin                   SystemSettingsRequestTimeZone = "Europe/Berlin"
	EuropeBratislava               SystemSettingsRequestTimeZone = "Europe/Bratislava"
	EuropeBrussels                 SystemSettingsRequestTimeZone = "Europe/Brussels"
	EuropeBucharest                SystemSettingsRequestTimeZone = "Europe/Bucharest"
	EuropeBudapest                 SystemSettingsRequestTimeZone = "Europe/Budapest"
	EuropeBusingen                 SystemSettingsRequestTimeZone = "Europe/Busingen"
	EuropeChisinau                 SystemSettingsRequestTimeZone = "Europe/Chisinau"
	EuropeCopenhagen               SystemSettingsRequestTimeZone = "Europe/Copenhagen"
	EuropeDublin                   SystemSettingsRequestTimeZone = "Europe/Dublin"
	EuropeGibraltar                SystemSettingsRequestTimeZone = "Europe/Gibraltar"
	EuropeGuernsey                 SystemSettingsRequestTimeZone = "Europe/Guernsey"
	EuropeHelsinki                 SystemSettingsRequestTimeZone = "Europe/Helsinki"
	EuropeIsleOfMan                SystemSettingsRequestTimeZone = "Europe/Isle_of_Man"
	EuropeIstanbul                 SystemSettingsRequestTimeZone = "Europe/Istanbul"
	EuropeJersey                   SystemSettingsRequestTimeZone = "Europe/Jersey"
	EuropeKaliningrad              SystemSettingsRequestTimeZone = "Europe/Kaliningrad"
	EuropeKiev                     SystemSettingsRequestTimeZone = "Europe/Kiev"
	EuropeKirov                    SystemSettingsRequestTimeZone = "Europe/Kirov"
	EuropeKyiv                     SystemSettingsRequestTimeZone = "Europe/Kyiv"
	EuropeLisbon                   SystemSettingsRequestTimeZone = "Europe/Lisbon"
	EuropeLjubljana                SystemSettingsRequestTimeZone = "Europe/Ljubljana"
	EuropeLondon                   SystemSettingsRequestTimeZone = "Europe/London"
	EuropeLuxembourg               SystemSettingsRequestTimeZone = "Europe/Luxembourg"
	EuropeMadrid                   SystemSettingsRequestTimeZone = "Europe/Madrid"
	EuropeMalta                    SystemSettingsRequestTimeZone = "Europe/Malta"
	EuropeMariehamn                SystemSettingsRequestTimeZone = "Europe/Mariehamn"
	EuropeMinsk                    SystemSettingsRequestTimeZone = "Europe/Minsk"
	EuropeMonaco                   SystemSettingsRequestTimeZone = "Europe/Monaco"
	EuropeMoscow                   SystemSettingsRequestTimeZone = "Europe/Moscow"
	EuropeNicosia                  SystemSettingsRequestTimeZone = "Europe/Nicosia"
	EuropeOslo                     SystemSettingsRequestTimeZone = "Europe/Oslo"
	EuropeParis                    SystemSettingsRequestTimeZone = "Europe/Paris"
	EuropePodgorica                SystemSettingsRequestTimeZone = "Europe/Podgorica"
	EuropePrague                   SystemSettingsRequestTimeZone = "Europe/Prague"
	EuropeRiga                     SystemSettingsRequestTimeZone = "Europe/Riga"
	EuropeRome                     SystemSettingsRequestTimeZone = "Europe/Rome"
	EuropeSamara                   SystemSettingsRequestTimeZone = "Europe/Samara"
	EuropeSanMarino                SystemSettingsRequestTimeZone = "Europe/San_Marino"
	EuropeSarajevo                 SystemSettingsRequestTimeZone = "Europe/Sarajevo"
	EuropeSaratov                  SystemSettingsRequestTimeZone = "Europe/Saratov"
	EuropeSimferopol               SystemSettingsRequestTimeZone = "Europe/Simferopol"
	EuropeSkopje                   SystemSettingsRequestTimeZone = "Europe/Skopje"
	EuropeSofia                    SystemSettingsRequestTimeZone = "Europe/Sofia"
	EuropeStockholm                SystemSettingsRequestTimeZone = "Europe/Stockholm"
	EuropeTallinn                  SystemSettingsRequestTimeZone = "Europe/Tallinn"
	EuropeTirane                   SystemSettingsRequestTimeZone = "Europe/Tirane"
	EuropeTiraspol                 SystemSettingsRequestTimeZone = "Europe/Tiraspol"
	EuropeUlyanovsk                SystemSettingsRequestTimeZone = "Europe/Ulyanovsk"
	EuropeUzhgorod                 SystemSettingsRequestTimeZone = "Europe/Uzhgorod"
	EuropeVaduz                    SystemSettingsRequestTimeZone = "Europe/Vaduz"
	EuropeVatican                  SystemSettingsRequestTimeZone = "Europe/Vatican"
	EuropeVienna                   SystemSettingsRequestTimeZone = "Europe/Vienna"
	EuropeVilnius                  SystemSettingsRequestTimeZone = "Europe/Vilnius"
	EuropeVolgograd                SystemSettingsRequestTimeZone = "Europe/Volgograd"
	EuropeWarsaw                   SystemSettingsRequestTimeZone = "Europe/Warsaw"
	EuropeZagreb                   SystemSettingsRequestTimeZone = "Europe/Zagreb"
	EuropeZaporozhye               SystemSettingsRequestTimeZone = "Europe/Zaporozhye"
	EuropeZurich                   SystemSettingsRequestTimeZone = "Europe/Zurich"
	GB                             SystemSettingsRequestTimeZone = "GB"
	GBEire                         SystemSettingsRequestTimeZone = "GB-Eire"
	GMT                            SystemSettingsRequestTimeZone = "GMT"
	GMT0                           SystemSettingsRequestTimeZone = "GMT+0"
	GMT01                          SystemSettingsRequestTimeZone = "GMT-0"
	GMT02                          SystemSettingsRequestTimeZone = "GMT0"
	Greenwich                      SystemSettingsRequestTimeZone = "Greenwich"
	HST                            SystemSettingsRequestTimeZone = "HST"
	Hongkong                       SystemSettingsRequestTimeZone = "Hongkong"
	Iceland                        SystemSettingsRequestTimeZone = "Iceland"
	IndianAntananarivo             SystemSettingsRequestTimeZone = "Indian/Antananarivo"
	IndianChagos                   SystemSettingsRequestTimeZone = "Indian/Chagos"
	IndianChristmas                SystemSettingsRequestTimeZone = "Indian/Christmas"
	IndianCocos                    SystemSettingsRequestTimeZone = "Indian/Cocos"
	IndianComoro                   SystemSettingsRequestTimeZone = "Indian/Comoro"
	IndianKerguelen                SystemSettingsRequestTimeZone = "Indian/Kerguelen"
	IndianMahe                     SystemSettingsRequestTimeZone = "Indian/Mahe"
	IndianMaldives                 SystemSettingsRequestTimeZone = "Indian/Maldives"
	IndianMauritius                SystemSettingsRequestTimeZone = "Indian/Mauritius"
	IndianMayotte                  SystemSettingsRequestTimeZone = "Indian/Mayotte"
	IndianReunion                  SystemSettingsRequestTimeZone = "Indian/Reunion"
	Iran                           SystemSettingsRequestTimeZone = "Iran"
	Israel                         SystemSettingsRequestTimeZone = "Israel"
	Jamaica                        SystemSettingsRequestTimeZone = "Jamaica"
	Japan                          SystemSettingsRequestTimeZone = "Japan"
	Kwajalein                      SystemSettingsRequestTimeZone = "Kwajalein"
	Libya                          SystemSettingsRequestTimeZone = "Libya"
	MET                            SystemSettingsRequestTimeZone = "MET"
	MST                            SystemSettingsRequestTimeZone = "MST"
	MST7MDT                        SystemSettingsRequestTimeZone = "MST7MDT"
	MexicoBajaNorte                SystemSettingsRequestTimeZone = "Mexico/BajaNorte"
	MexicoBajaSur                  SystemSettingsRequestTimeZone = "Mexico/BajaSur"
	MexicoGeneral                  SystemSettingsRequestTimeZone = "Mexico/General"
	NZ                             SystemSettingsRequestTimeZone = "NZ"
	NZCHAT                         SystemSettingsRequestTimeZone = "NZ-CHAT"
	Navajo                         SystemSettingsRequestTimeZone = "Navajo"
	PRC                            SystemSettingsRequestTimeZone = "PRC"
	PST8PDT                        SystemSettingsRequestTimeZone = "PST8PDT"
	PacificApia                    SystemSettingsRequestTimeZone = "Pacific/Apia"
	PacificAuckland                SystemSettingsRequestTimeZone = "Pacific/Auckland"
	PacificBougainville            SystemSettingsRequestTimeZone = "Pacific/Bougainville"
	PacificChatham                 SystemSettingsRequestTimeZone = "Pacific/Chatham"
	PacificChuuk                   SystemSettingsRequestTimeZone = "Pacific/Chuuk"
	PacificEaster                  SystemSettingsRequestTimeZone = "Pacific/Easter"
	PacificEfate                   SystemSettingsRequestTimeZone = "Pacific/Efate"
	PacificEnderbury               SystemSettingsRequestTimeZone = "Pacific/Enderbury"
	PacificFakaofo                 SystemSettingsRequestTimeZone = "Pacific/Fakaofo"
	PacificFiji                    SystemSettingsRequestTimeZone = "Pacific/Fiji"
	PacificFunafuti                SystemSettingsRequestTimeZone = "Pacific/Funafuti"
	PacificGalapagos               SystemSettingsRequestTimeZone = "Pacific/Galapagos"
	PacificGambier                 SystemSettingsRequestTimeZone = "Pacific/Gambier"
	PacificGuadalcanal             SystemSettingsRequestTimeZone = "Pacific/Guadalcanal"
	PacificGuam                    SystemSettingsRequestTimeZone = "Pacific/Guam"
	PacificHonolulu                SystemSettingsRequestTimeZone = "Pacific/Honolulu"
	PacificJohnston                SystemSettingsRequestTimeZone = "Pacific/Johnston"
	PacificKanton                  SystemSettingsRequestTimeZone = "Pacific/Kanton"
	PacificKiritimati              SystemSettingsRequestTimeZone = "Pacific/Kiritimati"
	PacificKosrae                  SystemSettingsRequestTimeZone = "Pacific/Kosrae"
	PacificKwajalein               SystemSettingsRequestTimeZone = "Pacific/Kwajalein"
	PacificMajuro                  SystemSettingsRequestTimeZone = "Pacific/Majuro"
	PacificMarquesas               SystemSettingsRequestTimeZone = "Pacific/Marquesas"
	PacificMidway                  SystemSettingsRequestTimeZone = "Pacific/Midway"
	PacificNauru                   SystemSettingsRequestTimeZone = "Pacific/Nauru"
	PacificNiue                    SystemSettingsRequestTimeZone = "Pacific/Niue"
	PacificNorfolk                 SystemSettingsRequestTimeZone = "Pacific/Norfolk"
	PacificNoumea                  SystemSettingsRequestTimeZone = "Pacific/Noumea"
	PacificPagoPago                SystemSettingsRequestTimeZone = "Pacific/Pago_Pago"
	PacificPalau                   SystemSettingsRequestTimeZone = "Pacific/Palau"
	PacificPitcairn                SystemSettingsRequestTimeZone = "Pacific/Pitcairn"
	PacificPohnpei                 SystemSettingsRequestTimeZone = "Pacific/Pohnpei"
	PacificPonape                  SystemSettingsRequestTimeZone = "Pacific/Ponape"
	PacificPortMoresby             SystemSettingsRequestTimeZone = "Pacific/Port_Moresby"
	PacificRarotonga               SystemSettingsRequestTimeZone = "Pacific/Rarotonga"
	PacificSaipan                  SystemSettingsRequestTimeZone = "Pacific/Saipan"
	PacificSamoa                   SystemSettingsRequestTimeZone = "Pacific/Samoa"
	PacificTahiti                  SystemSettingsRequestTimeZone = "Pacific/Tahiti"
	PacificTarawa                  SystemSettingsRequestTimeZone = "Pacific/Tarawa"
	PacificTongatapu               SystemSettingsRequestTimeZone = "Pacific/Tongatapu"
	PacificTruk                    SystemSettingsRequestTimeZone = "Pacific/Truk"
	PacificWake                    SystemSettingsRequestTimeZone = "Pacific/Wake"
	PacificWallis                  SystemSettingsRequestTimeZone = "Pacific/Wallis"
	PacificYap                     SystemSettingsRequestTimeZone = "Pacific/Yap"
	Poland                         SystemSettingsRequestTimeZone = "Poland"
	Portugal                       SystemSettingsRequestTimeZone = "Portugal"
	ROC                            SystemSettingsRequestTimeZone = "ROC"
	ROK                            SystemSettingsRequestTimeZone = "ROK"
	Singapore                      SystemSettingsRequestTimeZone = "Singapore"
	Turkey                         SystemSettingsRequestTimeZone = "Turkey"
	UCT                            SystemSettingsRequestTimeZone = "UCT"
	USAlaska                       SystemSettingsRequestTimeZone = "US/Alaska"
	USAleutian                     SystemSettingsRequestTimeZone = "US/Aleutian"
	USArizona                      SystemSettingsRequestTimeZone = "US/Arizona"
	USCentral                      SystemSettingsRequestTimeZone = "US/Central"
	USEastIndiana                  SystemSettingsRequestTimeZone = "US/East-Indiana"
	USEastern                      SystemSettingsRequestTimeZone = "US/Eastern"
	USHawaii                       SystemSettingsRequestTimeZone = "US/Hawaii"
	USIndianaStarke                SystemSettingsRequestTimeZone = "US/Indiana-Starke"
	USMichigan                     SystemSettingsRequestTimeZone = "US/Michigan"
	USMountain                     SystemSettingsRequestTimeZone = "US/Mountain"
	USPacific                      SystemSettingsRequestTimeZone = "US/Pacific"
	USSamoa                        SystemSettingsRequestTimeZone = "US/Samoa"
	UTC                            SystemSettingsRequestTimeZone = "UTC"
	Universal                      SystemSettingsRequestTimeZone = "Universal"
	WET                            SystemSettingsRequestTimeZone = "WET"
	WSU                            SystemSettingsRequestTimeZone = "W-SU"
	Zulu                           SystemSettingsRequestTimeZone = "Zulu"
)

// Defines values for TestImportFindingActionAction.
const (
	TestImportFindingActionActionC     TestImportFindingActionAction = "C"
	TestImportFindingActionActionEmpty TestImportFindingActionAction = ""
	TestImportFindingActionActionN     TestImportFindingActionAction = "N"
	TestImportFindingActionActionNil   TestImportFindingActionAction = "<nil>"
	TestImportFindingActionActionR     TestImportFindingActionAction = "R"
	TestImportFindingActionActionU     TestImportFindingActionAction = "U"
)

// Defines values for ToolConfigurationAuthenticationType.
const (
	ToolConfigurationAuthenticationTypeAPI      ToolConfigurationAuthenticationType = "API"
	ToolConfigurationAuthenticationTypeEmpty    ToolConfigurationAuthenticationType = ""
	ToolConfigurationAuthenticationTypeNil      ToolConfigurationAuthenticationType = "<nil>"
	ToolConfigurationAuthenticationTypePassword ToolConfigurationAuthenticationType = "Password"
	ToolConfigurationAuthenticationTypeSSH      ToolConfigurationAuthenticationType = "SSH"
)

// Defines values for ToolConfigurationRequestAuthenticationType.
const (
	ToolConfigurationRequestAuthenticationTypeAPI      ToolConfigurationRequestAuthenticationType = "API"
	ToolConfigurationRequestAuthenticationTypeEmpty    ToolConfigurationRequestAuthenticationType = ""
	ToolConfigurationRequestAuthenticationTypeNil      ToolConfigurationRequestAuthenticationType = "<nil>"
	ToolConfigurationRequestAuthenticationTypePassword ToolConfigurationRequestAuthenticationType = "Password"
	ToolConfigurationRequestAuthenticationTypeSSH      ToolConfigurationRequestAuthenticationType = "SSH"
)

// Defines values for DojoGroupMembersListParamsPrefetch.
const (
	DojoGroupMembersListParamsPrefetchGroup DojoGroupMembersListParamsPrefetch = "group"
	DojoGroupMembersListParamsPrefetchRole  DojoGroupMembersListParamsPrefetch = "role"
	DojoGroupMembersListParamsPrefetchUser  DojoGroupMembersListParamsPrefetch = "user"
)

// Defines values for DojoGroupMembersRetrieveParamsPrefetch.
const (
	DojoGroupMembersRetrieveParamsPrefetchGroup DojoGroupMembersRetrieveParamsPrefetch = "group"
	DojoGroupMembersRetrieveParamsPrefetchRole  DojoGroupMembersRetrieveParamsPrefetch = "role"
	DojoGroupMembersRetrieveParamsPrefetchUser  DojoGroupMembersRetrieveParamsPrefetch = "user"
)

// Defines values for DojoGroupsListParamsPrefetch.
const (
	DojoGroupsListParamsPrefetchProductGroups     DojoGroupsListParamsPrefetch = "product_groups"
	DojoGroupsListParamsPrefetchProductTypeGroups DojoGroupsListParamsPrefetch = "product_type_groups"
	DojoGroupsListParamsPrefetchUsers             DojoGroupsListParamsPrefetch = "users"
)

// Defines values for DojoGroupsListParamsSocialProvider.
const (
	AzureAD DojoGroupsListParamsSocialProvider = "AzureAD"
)

// Defines values for DojoGroupsRetrieveParamsPrefetch.
const (
	DojoGroupsRetrieveParamsPrefetchProductGroups     DojoGroupsRetrieveParamsPrefetch = "product_groups"
	DojoGroupsRetrieveParamsPrefetchProductTypeGroups DojoGroupsRetrieveParamsPrefetch = "product_type_groups"
	DojoGroupsRetrieveParamsPrefetchUsers             DojoGroupsRetrieveParamsPrefetch = "users"
)

// Defines values for EndpointsListParamsO.
const (
	EndpointsListParamsOHost         EndpointsListParamsO = "host"
	EndpointsListParamsOMinusHost    EndpointsListParamsO = "-host"
	EndpointsListParamsOMinusProduct EndpointsListParamsO = "-product"
	EndpointsListParamsOProduct      EndpointsListParamsO = "product"
)

// Defines values for EngagementsListParamsO.
const (
	EngagementsListParamsOCreated          EngagementsListParamsO = "created"
	EngagementsListParamsOLead             EngagementsListParamsO = "lead"
	EngagementsListParamsOMinusCreated     EngagementsListParamsO = "-created"
	EngagementsListParamsOMinusLead        EngagementsListParamsO = "-lead"
	EngagementsListParamsOMinusName        EngagementsListParamsO = "-name"
	EngagementsListParamsOMinusStatus      EngagementsListParamsO = "-status"
	EngagementsListParamsOMinusTargetEnd   EngagementsListParamsO = "-target_end"
	EngagementsListParamsOMinusTargetStart EngagementsListParamsO = "-target_start"
	EngagementsListParamsOMinusUpdated     EngagementsListParamsO = "-updated"
	EngagementsListParamsOMinusVersion     EngagementsListParamsO = "-version"
	EngagementsListParamsOName             EngagementsListParamsO = "name"
	EngagementsListParamsOStatus           EngagementsListParamsO = "status"
	EngagementsListParamsOTargetEnd        EngagementsListParamsO = "target_end"
	EngagementsListParamsOTargetStart      EngagementsListParamsO = "target_start"
	EngagementsListParamsOUpdated          EngagementsListParamsO = "updated"
	EngagementsListParamsOVersion          EngagementsListParamsO = "version"
)

// Defines values for EngagementsListParamsStatus.
const (
	Blocked            EngagementsListParamsStatus = "Blocked"
	Cancelled          EngagementsListParamsStatus = "Cancelled"
	Completed          EngagementsListParamsStatus = "Completed"
	InProgress         EngagementsListParamsStatus = "In Progress"
	NotStarted         EngagementsListParamsStatus = "Not Started"
	OnHold             EngagementsListParamsStatus = "On Hold"
	WaitingForResource EngagementsListParamsStatus = "Waiting for Resource"
)

// Defines values for FindingTemplatesListParamsO.
const (
	FindingTemplatesListParamsOCwe        FindingTemplatesListParamsO = "cwe"
	FindingTemplatesListParamsOMinusCwe   FindingTemplatesListParamsO = "-cwe"
	FindingTemplatesListParamsOMinusTitle FindingTemplatesListParamsO = "-title"
	FindingTemplatesListParamsOTitle      FindingTemplatesListParamsO = "title"
)

// Defines values for FindingsListParamsCreated.
const (
	FindingsListParamsCreatedN1 FindingsListParamsCreated = 1
	FindingsListParamsCreatedN2 FindingsListParamsCreated = 2
	FindingsListParamsCreatedN3 FindingsListParamsCreated = 3
	FindingsListParamsCreatedN4 FindingsListParamsCreated = 4
	FindingsListParamsCreatedN5 FindingsListParamsCreated = 5
	FindingsListParamsCreatedN6 FindingsListParamsCreated = 6
	FindingsListParamsCreatedN7 FindingsListParamsCreated = 7
)

// Defines values for FindingsListParamsDate.
const (
	FindingsListParamsDateN1 FindingsListParamsDate = 1
	FindingsListParamsDateN2 FindingsListParamsDate = 2
	FindingsListParamsDateN3 FindingsListParamsDate = 3
	FindingsListParamsDateN4 FindingsListParamsDate = 4
	FindingsListParamsDateN5 FindingsListParamsDate = 5
	FindingsListParamsDateN6 FindingsListParamsDate = 6
	FindingsListParamsDateN7 FindingsListParamsDate = 7
)

// Defines values for FindingsListParamsJiraChange.
const (
	FindingsListParamsJiraChangeN1 FindingsListParamsJiraChange = 1
	FindingsListParamsJiraChangeN2 FindingsListParamsJiraChange = 2
	FindingsListParamsJiraChangeN3 FindingsListParamsJiraChange = 3
	FindingsListParamsJiraChangeN4 FindingsListParamsJiraChange = 4
	FindingsListParamsJiraChangeN5 FindingsListParamsJiraChange = 5
	FindingsListParamsJiraChangeN6 FindingsListParamsJiraChange = 6
	FindingsListParamsJiraChangeN7 FindingsListParamsJiraChange = 7
)

// Defines values for FindingsListParamsJiraCreation.
const (
	FindingsListParamsJiraCreationN1 FindingsListParamsJiraCreation = 1
	FindingsListParamsJiraCreationN2 FindingsListParamsJiraCreation = 2
	FindingsListParamsJiraCreationN3 FindingsListParamsJiraCreation = 3
	FindingsListParamsJiraCreationN4 FindingsListParamsJiraCreation = 4
	FindingsListParamsJiraCreationN5 FindingsListParamsJiraCreation = 5
	FindingsListParamsJiraCreationN6 FindingsListParamsJiraCreation = 6
	FindingsListParamsJiraCreationN7 FindingsListParamsJiraCreation = 7
)

// Defines values for FindingsListParamsLastReviewed.
const (
	FindingsListParamsLastReviewedN1 FindingsListParamsLastReviewed = 1
	FindingsListParamsLastReviewedN2 FindingsListParamsLastReviewed = 2
	FindingsListParamsLastReviewedN3 FindingsListParamsLastReviewed = 3
	FindingsListParamsLastReviewedN4 FindingsListParamsLastReviewed = 4
	FindingsListParamsLastReviewedN5 FindingsListParamsLastReviewed = 5
	FindingsListParamsLastReviewedN6 FindingsListParamsLastReviewed = 6
	FindingsListParamsLastReviewedN7 FindingsListParamsLastReviewed = 7
)

// Defines values for FindingsListParamsMitigated.
const (
	FindingsListParamsMitigatedN1 FindingsListParamsMitigated = 1
	FindingsListParamsMitigatedN2 FindingsListParamsMitigated = 2
	FindingsListParamsMitigatedN3 FindingsListParamsMitigated = 3
	FindingsListParamsMitigatedN4 FindingsListParamsMitigated = 4
	FindingsListParamsMitigatedN5 FindingsListParamsMitigated = 5
	FindingsListParamsMitigatedN6 FindingsListParamsMitigated = 6
	FindingsListParamsMitigatedN7 FindingsListParamsMitigated = 7
)

// Defines values for FindingsListParamsO.
const (
	FindingsListParamsOActive                         FindingsListParamsO = "active"
	FindingsListParamsOComponentName                  FindingsListParamsO = "component_name"
	FindingsListParamsOComponentVersion               FindingsListParamsO = "component_version"
	FindingsListParamsOCreated                        FindingsListParamsO = "created"
	FindingsListParamsOCwe                            FindingsListParamsO = "cwe"
	FindingsListParamsODate                           FindingsListParamsO = "date"
	FindingsListParamsODuplicate                      FindingsListParamsO = "duplicate"
	FindingsListParamsODynamicFinding                 FindingsListParamsO = "dynamic_finding"
	FindingsListParamsOFalseP                         FindingsListParamsO = "false_p"
	FindingsListParamsOFoundBy                        FindingsListParamsO = "found_by"
	FindingsListParamsOId                             FindingsListParamsO = "id"
	FindingsListParamsOIsMitigated                    FindingsListParamsO = "is_mitigated"
	FindingsListParamsOLastReviewed                   FindingsListParamsO = "last_reviewed"
	FindingsListParamsOLastStatusUpdate               FindingsListParamsO = "last_status_update"
	FindingsListParamsOMinusActive                    FindingsListParamsO = "-active"
	FindingsListParamsOMinusComponentName             FindingsListParamsO = "-component_name"
	FindingsListParamsOMinusComponentVersion          FindingsListParamsO = "-component_version"
	FindingsListParamsOMinusCreated                   FindingsListParamsO = "-created"
	FindingsListParamsOMinusCwe                       FindingsListParamsO = "-cwe"
	FindingsListParamsOMinusDate                      FindingsListParamsO = "-date"
	FindingsListParamsOMinusDuplicate                 FindingsListParamsO = "-duplicate"
	FindingsListParamsOMinusDynamicFinding            FindingsListParamsO = "-dynamic_finding"
	FindingsListParamsOMinusFalseP                    FindingsListParamsO = "-false_p"
	FindingsListParamsOMinusFoundBy                   FindingsListParamsO = "-found_by"
	FindingsListParamsOMinusId                        FindingsListParamsO = "-id"
	FindingsListParamsOMinusIsMitigated               FindingsListParamsO = "-is_mitigated"
	FindingsListParamsOMinusLastReviewed              FindingsListParamsO = "-last_reviewed"
	FindingsListParamsOMinusLastStatusUpdate          FindingsListParamsO = "-last_status_update"
	FindingsListParamsOMinusNumericalSeverity         FindingsListParamsO = "-numerical_severity"
	FindingsListParamsOMinusOutOfScope                FindingsListParamsO = "-out_of_scope"
	FindingsListParamsOMinusReviewers                 FindingsListParamsO = "-reviewers"
	FindingsListParamsOMinusSeverity                  FindingsListParamsO = "-severity"
	FindingsListParamsOMinusStaticFinding             FindingsListParamsO = "-static_finding"
	FindingsListParamsOMinusTestEngagementProductName FindingsListParamsO = "-test__engagement__product__name"
	FindingsListParamsOMinusTitle                     FindingsListParamsO = "-title"
	FindingsListParamsOMinusUnderDefectReview         FindingsListParamsO = "-under_defect_review"
	FindingsListParamsOMinusUnderReview               FindingsListParamsO = "-under_review"
	FindingsListParamsOMinusVerified                  FindingsListParamsO = "-verified"
	FindingsListParamsONumericalSeverity              FindingsListParamsO = "numerical_severity"
	FindingsListParamsOOutOfScope                     FindingsListParamsO = "out_of_scope"
	FindingsListParamsOReviewers                      FindingsListParamsO = "reviewers"
	FindingsListParamsOSeverity                       FindingsListParamsO = "severity"
	FindingsListParamsOStaticFinding                  FindingsListParamsO = "static_finding"
	FindingsListParamsOTestEngagementProductName      FindingsListParamsO = "test__engagement__product__name"
	FindingsListParamsOTitle                          FindingsListParamsO = "title"
	FindingsListParamsOUnderDefectReview              FindingsListParamsO = "under_defect_review"
	FindingsListParamsOUnderReview                    FindingsListParamsO = "under_review"
	FindingsListParamsOVerified                       FindingsListParamsO = "verified"
)

// Defines values for FindingsListParamsPrefetch.
const (
	FindingsListParamsPrefetchAuthIssues              FindingsListParamsPrefetch = "auth_issues"
	FindingsListParamsPrefetchAuthorIssues            FindingsListParamsPrefetch = "author_issues"
	FindingsListParamsPrefetchConfigIssues            FindingsListParamsPrefetch = "config_issues"
	FindingsListParamsPrefetchCryptoIssues            FindingsListParamsPrefetch = "crypto_issues"
	FindingsListParamsPrefetchDataIssues              FindingsListParamsPrefetch = "data_issues"
	FindingsListParamsPrefetchDefectReviewRequestedBy FindingsListParamsPrefetch = "defect_review_requested_by"
	FindingsListParamsPrefetchDuplicateFinding        FindingsListParamsPrefetch = "duplicate_finding"
	FindingsListParamsPrefetchEndpointSet             FindingsListParamsPrefetch = "endpoint_set"
	FindingsListParamsPrefetchEndpoints               FindingsListParamsPrefetch = "endpoints"
	FindingsListParamsPrefetchFiles                   FindingsListParamsPrefetch = "files"
	FindingsListParamsPrefetchFindingGroupSet         FindingsListParamsPrefetch = "finding_group_set"
	FindingsListParamsPrefetchFoundBy                 FindingsListParamsPrefetch = "found_by"
	FindingsListParamsPrefetchLastReviewedBy          FindingsListParamsPrefetch = "last_reviewed_by"
	FindingsListParamsPrefetchMitigatedBy             FindingsListParamsPrefetch = "mitigated_by"
	FindingsListParamsPrefetchNotes                   FindingsListParamsPrefetch = "notes"
	FindingsListParamsPrefetchOtherIssues             FindingsListParamsPrefetch = "other_issues"
	FindingsListParamsPrefetchReporter                FindingsListParamsPrefetch = "reporter"
	FindingsListParamsPrefetchReviewRequestedBy       FindingsListParamsPrefetch = "review_requested_by"
	FindingsListParamsPrefetchReviewers               FindingsListParamsPrefetch = "reviewers"
	FindingsListParamsPrefetchRiskAcceptanceSet       FindingsListParamsPrefetch = "risk_acceptance_set"
	FindingsListParamsPrefetchSensitiveIssues         FindingsListParamsPrefetch = "sensitive_issues"
	FindingsListParamsPrefetchSessionIssues           FindingsListParamsPrefetch = "session_issues"
	FindingsListParamsPrefetchSonarqubeIssue          FindingsListParamsPrefetch = "sonarqube_issue"
	FindingsListParamsPrefetchTest                    FindingsListParamsPrefetch = "test"
	FindingsListParamsPrefetchTestImportSet           FindingsListParamsPrefetch = "test_import_set"
)

// Defines values for FindingsAcceptRisksCreateParamsCreated.
const (
	FindingsAcceptRisksCreateParamsCreatedN1 FindingsAcceptRisksCreateParamsCreated = 1
	FindingsAcceptRisksCreateParamsCreatedN2 FindingsAcceptRisksCreateParamsCreated = 2
	FindingsAcceptRisksCreateParamsCreatedN3 FindingsAcceptRisksCreateParamsCreated = 3
	FindingsAcceptRisksCreateParamsCreatedN4 FindingsAcceptRisksCreateParamsCreated = 4
	FindingsAcceptRisksCreateParamsCreatedN5 FindingsAcceptRisksCreateParamsCreated = 5
	FindingsAcceptRisksCreateParamsCreatedN6 FindingsAcceptRisksCreateParamsCreated = 6
	FindingsAcceptRisksCreateParamsCreatedN7 FindingsAcceptRisksCreateParamsCreated = 7
)

// Defines values for FindingsAcceptRisksCreateParamsDate.
const (
	FindingsAcceptRisksCreateParamsDateN1 FindingsAcceptRisksCreateParamsDate = 1
	FindingsAcceptRisksCreateParamsDateN2 FindingsAcceptRisksCreateParamsDate = 2
	FindingsAcceptRisksCreateParamsDateN3 FindingsAcceptRisksCreateParamsDate = 3
	FindingsAcceptRisksCreateParamsDateN4 FindingsAcceptRisksCreateParamsDate = 4
	FindingsAcceptRisksCreateParamsDateN5 FindingsAcceptRisksCreateParamsDate = 5
	FindingsAcceptRisksCreateParamsDateN6 FindingsAcceptRisksCreateParamsDate = 6
	FindingsAcceptRisksCreateParamsDateN7 FindingsAcceptRisksCreateParamsDate = 7
)

// Defines values for FindingsAcceptRisksCreateParamsJiraChange.
const (
	FindingsAcceptRisksCreateParamsJiraChangeN1 FindingsAcceptRisksCreateParamsJiraChange = 1
	FindingsAcceptRisksCreateParamsJiraChangeN2 FindingsAcceptRisksCreateParamsJiraChange = 2
	FindingsAcceptRisksCreateParamsJiraChangeN3 FindingsAcceptRisksCreateParamsJiraChange = 3
	FindingsAcceptRisksCreateParamsJiraChangeN4 FindingsAcceptRisksCreateParamsJiraChange = 4
	FindingsAcceptRisksCreateParamsJiraChangeN5 FindingsAcceptRisksCreateParamsJiraChange = 5
	FindingsAcceptRisksCreateParamsJiraChangeN6 FindingsAcceptRisksCreateParamsJiraChange = 6
	FindingsAcceptRisksCreateParamsJiraChangeN7 FindingsAcceptRisksCreateParamsJiraChange = 7
)

// Defines values for FindingsAcceptRisksCreateParamsJiraCreation.
const (
	FindingsAcceptRisksCreateParamsJiraCreationN1 FindingsAcceptRisksCreateParamsJiraCreation = 1
	FindingsAcceptRisksCreateParamsJiraCreationN2 FindingsAcceptRisksCreateParamsJiraCreation = 2
	FindingsAcceptRisksCreateParamsJiraCreationN3 FindingsAcceptRisksCreateParamsJiraCreation = 3
	FindingsAcceptRisksCreateParamsJiraCreationN4 FindingsAcceptRisksCreateParamsJiraCreation = 4
	FindingsAcceptRisksCreateParamsJiraCreationN5 FindingsAcceptRisksCreateParamsJiraCreation = 5
	FindingsAcceptRisksCreateParamsJiraCreationN6 FindingsAcceptRisksCreateParamsJiraCreation = 6
	FindingsAcceptRisksCreateParamsJiraCreationN7 FindingsAcceptRisksCreateParamsJiraCreation = 7
)

// Defines values for FindingsAcceptRisksCreateParamsLastReviewed.
const (
	FindingsAcceptRisksCreateParamsLastReviewedN1 FindingsAcceptRisksCreateParamsLastReviewed = 1
	FindingsAcceptRisksCreateParamsLastReviewedN2 FindingsAcceptRisksCreateParamsLastReviewed = 2
	FindingsAcceptRisksCreateParamsLastReviewedN3 FindingsAcceptRisksCreateParamsLastReviewed = 3
	FindingsAcceptRisksCreateParamsLastReviewedN4 FindingsAcceptRisksCreateParamsLastReviewed = 4
	FindingsAcceptRisksCreateParamsLastReviewedN5 FindingsAcceptRisksCreateParamsLastReviewed = 5
	FindingsAcceptRisksCreateParamsLastReviewedN6 FindingsAcceptRisksCreateParamsLastReviewed = 6
	FindingsAcceptRisksCreateParamsLastReviewedN7 FindingsAcceptRisksCreateParamsLastReviewed = 7
)

// Defines values for FindingsAcceptRisksCreateParamsMitigated.
const (
	FindingsAcceptRisksCreateParamsMitigatedN1 FindingsAcceptRisksCreateParamsMitigated = 1
	FindingsAcceptRisksCreateParamsMitigatedN2 FindingsAcceptRisksCreateParamsMitigated = 2
	FindingsAcceptRisksCreateParamsMitigatedN3 FindingsAcceptRisksCreateParamsMitigated = 3
	FindingsAcceptRisksCreateParamsMitigatedN4 FindingsAcceptRisksCreateParamsMitigated = 4
	FindingsAcceptRisksCreateParamsMitigatedN5 FindingsAcceptRisksCreateParamsMitigated = 5
	FindingsAcceptRisksCreateParamsMitigatedN6 FindingsAcceptRisksCreateParamsMitigated = 6
	FindingsAcceptRisksCreateParamsMitigatedN7 FindingsAcceptRisksCreateParamsMitigated = 7
)

// Defines values for FindingsAcceptRisksCreateParamsO.
const (
	FindingsAcceptRisksCreateParamsOActive                         FindingsAcceptRisksCreateParamsO = "active"
	FindingsAcceptRisksCreateParamsOComponentName                  FindingsAcceptRisksCreateParamsO = "component_name"
	FindingsAcceptRisksCreateParamsOComponentVersion               FindingsAcceptRisksCreateParamsO = "component_version"
	FindingsAcceptRisksCreateParamsOCreated                        FindingsAcceptRisksCreateParamsO = "created"
	FindingsAcceptRisksCreateParamsOCwe                            FindingsAcceptRisksCreateParamsO = "cwe"
	FindingsAcceptRisksCreateParamsODate                           FindingsAcceptRisksCreateParamsO = "date"
	FindingsAcceptRisksCreateParamsODuplicate                      FindingsAcceptRisksCreateParamsO = "duplicate"
	FindingsAcceptRisksCreateParamsODynamicFinding                 FindingsAcceptRisksCreateParamsO = "dynamic_finding"
	FindingsAcceptRisksCreateParamsOFalseP                         FindingsAcceptRisksCreateParamsO = "false_p"
	FindingsAcceptRisksCreateParamsOFoundBy                        FindingsAcceptRisksCreateParamsO = "found_by"
	FindingsAcceptRisksCreateParamsOId                             FindingsAcceptRisksCreateParamsO = "id"
	FindingsAcceptRisksCreateParamsOIsMitigated                    FindingsAcceptRisksCreateParamsO = "is_mitigated"
	FindingsAcceptRisksCreateParamsOLastReviewed                   FindingsAcceptRisksCreateParamsO = "last_reviewed"
	FindingsAcceptRisksCreateParamsOLastStatusUpdate               FindingsAcceptRisksCreateParamsO = "last_status_update"
	FindingsAcceptRisksCreateParamsOMinusActive                    FindingsAcceptRisksCreateParamsO = "-active"
	FindingsAcceptRisksCreateParamsOMinusComponentName             FindingsAcceptRisksCreateParamsO = "-component_name"
	FindingsAcceptRisksCreateParamsOMinusComponentVersion          FindingsAcceptRisksCreateParamsO = "-component_version"
	FindingsAcceptRisksCreateParamsOMinusCreated                   FindingsAcceptRisksCreateParamsO = "-created"
	FindingsAcceptRisksCreateParamsOMinusCwe                       FindingsAcceptRisksCreateParamsO = "-cwe"
	FindingsAcceptRisksCreateParamsOMinusDate                      FindingsAcceptRisksCreateParamsO = "-date"
	FindingsAcceptRisksCreateParamsOMinusDuplicate                 FindingsAcceptRisksCreateParamsO = "-duplicate"
	FindingsAcceptRisksCreateParamsOMinusDynamicFinding            FindingsAcceptRisksCreateParamsO = "-dynamic_finding"
	FindingsAcceptRisksCreateParamsOMinusFalseP                    FindingsAcceptRisksCreateParamsO = "-false_p"
	FindingsAcceptRisksCreateParamsOMinusFoundBy                   FindingsAcceptRisksCreateParamsO = "-found_by"
	FindingsAcceptRisksCreateParamsOMinusId                        FindingsAcceptRisksCreateParamsO = "-id"
	FindingsAcceptRisksCreateParamsOMinusIsMitigated               FindingsAcceptRisksCreateParamsO = "-is_mitigated"
	FindingsAcceptRisksCreateParamsOMinusLastReviewed              FindingsAcceptRisksCreateParamsO = "-last_reviewed"
	FindingsAcceptRisksCreateParamsOMinusLastStatusUpdate          FindingsAcceptRisksCreateParamsO = "-last_status_update"
	FindingsAcceptRisksCreateParamsOMinusNumericalSeverity         FindingsAcceptRisksCreateParamsO = "-numerical_severity"
	FindingsAcceptRisksCreateParamsOMinusOutOfScope                FindingsAcceptRisksCreateParamsO = "-out_of_scope"
	FindingsAcceptRisksCreateParamsOMinusReviewers                 FindingsAcceptRisksCreateParamsO = "-reviewers"
	FindingsAcceptRisksCreateParamsOMinusSeverity                  FindingsAcceptRisksCreateParamsO = "-severity"
	FindingsAcceptRisksCreateParamsOMinusStaticFinding             FindingsAcceptRisksCreateParamsO = "-static_finding"
	FindingsAcceptRisksCreateParamsOMinusTestEngagementProductName FindingsAcceptRisksCreateParamsO = "-test__engagement__product__name"
	FindingsAcceptRisksCreateParamsOMinusTitle                     FindingsAcceptRisksCreateParamsO = "-title"
	FindingsAcceptRisksCreateParamsOMinusUnderDefectReview         FindingsAcceptRisksCreateParamsO = "-under_defect_review"
	FindingsAcceptRisksCreateParamsOMinusUnderReview               FindingsAcceptRisksCreateParamsO = "-under_review"
	FindingsAcceptRisksCreateParamsOMinusVerified                  FindingsAcceptRisksCreateParamsO = "-verified"
	FindingsAcceptRisksCreateParamsONumericalSeverity              FindingsAcceptRisksCreateParamsO = "numerical_severity"
	FindingsAcceptRisksCreateParamsOOutOfScope                     FindingsAcceptRisksCreateParamsO = "out_of_scope"
	FindingsAcceptRisksCreateParamsOReviewers                      FindingsAcceptRisksCreateParamsO = "reviewers"
	FindingsAcceptRisksCreateParamsOSeverity                       FindingsAcceptRisksCreateParamsO = "severity"
	FindingsAcceptRisksCreateParamsOStaticFinding                  FindingsAcceptRisksCreateParamsO = "static_finding"
	FindingsAcceptRisksCreateParamsOTestEngagementProductName      FindingsAcceptRisksCreateParamsO = "test__engagement__product__name"
	FindingsAcceptRisksCreateParamsOTitle                          FindingsAcceptRisksCreateParamsO = "title"
	FindingsAcceptRisksCreateParamsOUnderDefectReview              FindingsAcceptRisksCreateParamsO = "under_defect_review"
	FindingsAcceptRisksCreateParamsOUnderReview                    FindingsAcceptRisksCreateParamsO = "under_review"
	FindingsAcceptRisksCreateParamsOVerified                       FindingsAcceptRisksCreateParamsO = "verified"
)

// Defines values for FindingsRetrieveParamsPrefetch.
const (
	FindingsRetrieveParamsPrefetchAuthIssues              FindingsRetrieveParamsPrefetch = "auth_issues"
	FindingsRetrieveParamsPrefetchAuthorIssues            FindingsRetrieveParamsPrefetch = "author_issues"
	FindingsRetrieveParamsPrefetchConfigIssues            FindingsRetrieveParamsPrefetch = "config_issues"
	FindingsRetrieveParamsPrefetchCryptoIssues            FindingsRetrieveParamsPrefetch = "crypto_issues"
	FindingsRetrieveParamsPrefetchDataIssues              FindingsRetrieveParamsPrefetch = "data_issues"
	FindingsRetrieveParamsPrefetchDefectReviewRequestedBy FindingsRetrieveParamsPrefetch = "defect_review_requested_by"
	FindingsRetrieveParamsPrefetchDuplicateFinding        FindingsRetrieveParamsPrefetch = "duplicate_finding"
	FindingsRetrieveParamsPrefetchEndpointSet             FindingsRetrieveParamsPrefetch = "endpoint_set"
	FindingsRetrieveParamsPrefetchEndpoints               FindingsRetrieveParamsPrefetch = "endpoints"
	FindingsRetrieveParamsPrefetchFiles                   FindingsRetrieveParamsPrefetch = "files"
	FindingsRetrieveParamsPrefetchFindingGroupSet         FindingsRetrieveParamsPrefetch = "finding_group_set"
	FindingsRetrieveParamsPrefetchFoundBy                 FindingsRetrieveParamsPrefetch = "found_by"
	FindingsRetrieveParamsPrefetchLastReviewedBy          FindingsRetrieveParamsPrefetch = "last_reviewed_by"
	FindingsRetrieveParamsPrefetchMitigatedBy             FindingsRetrieveParamsPrefetch = "mitigated_by"
	FindingsRetrieveParamsPrefetchNotes                   FindingsRetrieveParamsPrefetch = "notes"
	FindingsRetrieveParamsPrefetchOtherIssues             FindingsRetrieveParamsPrefetch = "other_issues"
	FindingsRetrieveParamsPrefetchReporter                FindingsRetrieveParamsPrefetch = "reporter"
	FindingsRetrieveParamsPrefetchReviewRequestedBy       FindingsRetrieveParamsPrefetch = "review_requested_by"
	FindingsRetrieveParamsPrefetchReviewers               FindingsRetrieveParamsPrefetch = "reviewers"
	FindingsRetrieveParamsPrefetchRiskAcceptanceSet       FindingsRetrieveParamsPrefetch = "risk_acceptance_set"
	FindingsRetrieveParamsPrefetchSensitiveIssues         FindingsRetrieveParamsPrefetch = "sensitive_issues"
	FindingsRetrieveParamsPrefetchSessionIssues           FindingsRetrieveParamsPrefetch = "session_issues"
	FindingsRetrieveParamsPrefetchSonarqubeIssue          FindingsRetrieveParamsPrefetch = "sonarqube_issue"
	FindingsRetrieveParamsPrefetchTest                    FindingsRetrieveParamsPrefetch = "test"
	FindingsRetrieveParamsPrefetchTestImportSet           FindingsRetrieveParamsPrefetch = "test_import_set"
)

// Defines values for LanguagesListParamsPrefetch.
const (
	LanguagesListParamsPrefetchLanguage LanguagesListParamsPrefetch = "language"
	LanguagesListParamsPrefetchProduct  LanguagesListParamsPrefetch = "product"
	LanguagesListParamsPrefetchUser     LanguagesListParamsPrefetch = "user"
)

// Defines values for LanguagesRetrieveParamsPrefetch.
const (
	LanguagesRetrieveParamsPrefetchLanguage LanguagesRetrieveParamsPrefetch = "language"
	LanguagesRetrieveParamsPrefetchProduct  LanguagesRetrieveParamsPrefetch = "product"
	LanguagesRetrieveParamsPrefetchUser     LanguagesRetrieveParamsPrefetch = "user"
)

// Defines values for MetadataListParamsPrefetch.
const (
	MetadataListParamsPrefetchEndpoint MetadataListParamsPrefetch = "endpoint"
	MetadataListParamsPrefetchFinding  MetadataListParamsPrefetch = "finding"
	MetadataListParamsPrefetchProduct  MetadataListParamsPrefetch = "product"
)

// Defines values for MetadataRetrieveParamsPrefetch.
const (
	MetadataRetrieveParamsPrefetchEndpoint MetadataRetrieveParamsPrefetch = "endpoint"
	MetadataRetrieveParamsPrefetchFinding  MetadataRetrieveParamsPrefetch = "finding"
	MetadataRetrieveParamsPrefetchProduct  MetadataRetrieveParamsPrefetch = "product"
)

// Defines values for NotificationsListParamsPrefetch.
const (
	NotificationsListParamsPrefetchProduct NotificationsListParamsPrefetch = "product"
	NotificationsListParamsPrefetchUser    NotificationsListParamsPrefetch = "user"
)

// Defines values for NotificationsRetrieveParamsPrefetch.
const (
	NotificationsRetrieveParamsPrefetchProduct NotificationsRetrieveParamsPrefetch = "product"
	NotificationsRetrieveParamsPrefetchUser    NotificationsRetrieveParamsPrefetch = "user"
)

// Defines values for Oa3SchemaRetrieveParamsFormat.
const (
	Json Oa3SchemaRetrieveParamsFormat = "json"
	Yaml Oa3SchemaRetrieveParamsFormat = "yaml"
)

// Defines values for Oa3SchemaRetrieveParamsLang.
const (
	Oa3SchemaRetrieveParamsLangAf     Oa3SchemaRetrieveParamsLang = "af"
	Oa3SchemaRetrieveParamsLangAr     Oa3SchemaRetrieveParamsLang = "ar"
	Oa3SchemaRetrieveParamsLangArDz   Oa3SchemaRetrieveParamsLang = "ar-dz"
	Oa3SchemaRetrieveParamsLangAst    Oa3SchemaRetrieveParamsLang = "ast"
	Oa3SchemaRetrieveParamsLangAz     Oa3SchemaRetrieveParamsLang = "az"
	Oa3SchemaRetrieveParamsLangBe     Oa3SchemaRetrieveParamsLang = "be"
	Oa3SchemaRetrieveParamsLangBg     Oa3SchemaRetrieveParamsLang = "bg"
	Oa3SchemaRetrieveParamsLangBn     Oa3SchemaRetrieveParamsLang = "bn"
	Oa3SchemaRetrieveParamsLangBr     Oa3SchemaRetrieveParamsLang = "br"
	Oa3SchemaRetrieveParamsLangBs     Oa3SchemaRetrieveParamsLang = "bs"
	Oa3SchemaRetrieveParamsLangCa     Oa3SchemaRetrieveParamsLang = "ca"
	Oa3SchemaRetrieveParamsLangCs     Oa3SchemaRetrieveParamsLang = "cs"
	Oa3SchemaRetrieveParamsLangCy     Oa3SchemaRetrieveParamsLang = "cy"
	Oa3SchemaRetrieveParamsLangDa     Oa3SchemaRetrieveParamsLang = "da"
	Oa3SchemaRetrieveParamsLangDe     Oa3SchemaRetrieveParamsLang = "de"
	Oa3SchemaRetrieveParamsLangDsb    Oa3SchemaRetrieveParamsLang = "dsb"
	Oa3SchemaRetrieveParamsLangEl     Oa3SchemaRetrieveParamsLang = "el"
	Oa3SchemaRetrieveParamsLangEn     Oa3SchemaRetrieveParamsLang = "en"
	Oa3SchemaRetrieveParamsLangEnAu   Oa3SchemaRetrieveParamsLang = "en-au"
	Oa3SchemaRetrieveParamsLangEnGb   Oa3SchemaRetrieveParamsLang = "en-gb"
	Oa3SchemaRetrieveParamsLangEo     Oa3SchemaRetrieveParamsLang = "eo"
	Oa3SchemaRetrieveParamsLangEs     Oa3SchemaRetrieveParamsLang = "es"
	Oa3SchemaRetrieveParamsLangEsAr   Oa3SchemaRetrieveParamsLang = "es-ar"
	Oa3SchemaRetrieveParamsLangEsCo   Oa3SchemaRetrieveParamsLang = "es-co"
	Oa3SchemaRetrieveParamsLangEsMx   Oa3SchemaRetrieveParamsLang = "es-mx"
	Oa3SchemaRetrieveParamsLangEsNi   Oa3SchemaRetrieveParamsLang = "es-ni"
	Oa3SchemaRetrieveParamsLangEsVe   Oa3SchemaRetrieveParamsLang = "es-ve"
	Oa3SchemaRetrieveParamsLangEt     Oa3SchemaRetrieveParamsLang = "et"
	Oa3SchemaRetrieveParamsLangEu     Oa3SchemaRetrieveParamsLang = "eu"
	Oa3SchemaRetrieveParamsLangFa     Oa3SchemaRetrieveParamsLang = "fa"
	Oa3SchemaRetrieveParamsLangFi     Oa3SchemaRetrieveParamsLang = "fi"
	Oa3SchemaRetrieveParamsLangFr     Oa3SchemaRetrieveParamsLang = "fr"
	Oa3SchemaRetrieveParamsLangFy     Oa3SchemaRetrieveParamsLang = "fy"
	Oa3SchemaRetrieveParamsLangGa     Oa3SchemaRetrieveParamsLang = "ga"
	Oa3SchemaRetrieveParamsLangGd     Oa3SchemaRetrieveParamsLang = "gd"
	Oa3SchemaRetrieveParamsLangGl     Oa3SchemaRetrieveParamsLang = "gl"
	Oa3SchemaRetrieveParamsLangHe     Oa3SchemaRetrieveParamsLang = "he"
	Oa3SchemaRetrieveParamsLangHi     Oa3SchemaRetrieveParamsLang = "hi"
	Oa3SchemaRetrieveParamsLangHr     Oa3SchemaRetrieveParamsLang = "hr"
	Oa3SchemaRetrieveParamsLangHsb    Oa3SchemaRetrieveParamsLang = "hsb"
	Oa3SchemaRetrieveParamsLangHu     Oa3SchemaRetrieveParamsLang = "hu"
	Oa3SchemaRetrieveParamsLangHy     Oa3SchemaRetrieveParamsLang = "hy"
	Oa3SchemaRetrieveParamsLangIa     Oa3SchemaRetrieveParamsLang = "ia"
	Oa3SchemaRetrieveParamsLangId     Oa3SchemaRetrieveParamsLang = "id"
	Oa3SchemaRetrieveParamsLangIg     Oa3SchemaRetrieveParamsLang = "ig"
	Oa3SchemaRetrieveParamsLangIo     Oa3SchemaRetrieveParamsLang = "io"
	Oa3SchemaRetrieveParamsLangIs     Oa3SchemaRetrieveParamsLang = "is"
	Oa3SchemaRetrieveParamsLangIt     Oa3SchemaRetrieveParamsLang = "it"
	Oa3SchemaRetrieveParamsLangJa     Oa3SchemaRetrieveParamsLang = "ja"
	Oa3SchemaRetrieveParamsLangKa     Oa3SchemaRetrieveParamsLang = "ka"
	Oa3SchemaRetrieveParamsLangKab    Oa3SchemaRetrieveParamsLang = "kab"
	Oa3SchemaRetrieveParamsLangKk     Oa3SchemaRetrieveParamsLang = "kk"
	Oa3SchemaRetrieveParamsLangKm     Oa3SchemaRetrieveParamsLang = "km"
	Oa3SchemaRetrieveParamsLangKn     Oa3SchemaRetrieveParamsLang = "kn"
	Oa3SchemaRetrieveParamsLangKo     Oa3SchemaRetrieveParamsLang = "ko"
	Oa3SchemaRetrieveParamsLangKy     Oa3SchemaRetrieveParamsLang = "ky"
	Oa3SchemaRetrieveParamsLangLb     Oa3SchemaRetrieveParamsLang = "lb"
	Oa3SchemaRetrieveParamsLangLt     Oa3SchemaRetrieveParamsLang = "lt"
	Oa3SchemaRetrieveParamsLangLv     Oa3SchemaRetrieveParamsLang = "lv"
	Oa3SchemaRetrieveParamsLangMk     Oa3SchemaRetrieveParamsLang = "mk"
	Oa3SchemaRetrieveParamsLangMl     Oa3SchemaRetrieveParamsLang = "ml"
	Oa3SchemaRetrieveParamsLangMn     Oa3SchemaRetrieveParamsLang = "mn"
	Oa3SchemaRetrieveParamsLangMr     Oa3SchemaRetrieveParamsLang = "mr"
	Oa3SchemaRetrieveParamsLangMs     Oa3SchemaRetrieveParamsLang = "ms"
	Oa3SchemaRetrieveParamsLangMy     Oa3SchemaRetrieveParamsLang = "my"
	Oa3SchemaRetrieveParamsLangNb     Oa3SchemaRetrieveParamsLang = "nb"
	Oa3SchemaRetrieveParamsLangNe     Oa3SchemaRetrieveParamsLang = "ne"
	Oa3SchemaRetrieveParamsLangNl     Oa3SchemaRetrieveParamsLang = "nl"
	Oa3SchemaRetrieveParamsLangNn     Oa3SchemaRetrieveParamsLang = "nn"
	Oa3SchemaRetrieveParamsLangOs     Oa3SchemaRetrieveParamsLang = "os"
	Oa3SchemaRetrieveParamsLangPa     Oa3SchemaRetrieveParamsLang = "pa"
	Oa3SchemaRetrieveParamsLangPl     Oa3SchemaRetrieveParamsLang = "pl"
	Oa3SchemaRetrieveParamsLangPt     Oa3SchemaRetrieveParamsLang = "pt"
	Oa3SchemaRetrieveParamsLangPtBr   Oa3SchemaRetrieveParamsLang = "pt-br"
	Oa3SchemaRetrieveParamsLangRo     Oa3SchemaRetrieveParamsLang = "ro"
	Oa3SchemaRetrieveParamsLangRu     Oa3SchemaRetrieveParamsLang = "ru"
	Oa3SchemaRetrieveParamsLangSk     Oa3SchemaRetrieveParamsLang = "sk"
	Oa3SchemaRetrieveParamsLangSl     Oa3SchemaRetrieveParamsLang = "sl"
	Oa3SchemaRetrieveParamsLangSq     Oa3SchemaRetrieveParamsLang = "sq"
	Oa3SchemaRetrieveParamsLangSr     Oa3SchemaRetrieveParamsLang = "sr"
	Oa3SchemaRetrieveParamsLangSrLatn Oa3SchemaRetrieveParamsLang = "sr-latn"
	Oa3SchemaRetrieveParamsLangSv     Oa3SchemaRetrieveParamsLang = "sv"
	Oa3SchemaRetrieveParamsLangSw     Oa3SchemaRetrieveParamsLang = "sw"
	Oa3SchemaRetrieveParamsLangTa     Oa3SchemaRetrieveParamsLang = "ta"
	Oa3SchemaRetrieveParamsLangTe     Oa3SchemaRetrieveParamsLang = "te"
	Oa3SchemaRetrieveParamsLangTg     Oa3SchemaRetrieveParamsLang = "tg"
	Oa3SchemaRetrieveParamsLangTh     Oa3SchemaRetrieveParamsLang = "th"
	Oa3SchemaRetrieveParamsLangTk     Oa3SchemaRetrieveParamsLang = "tk"
	Oa3SchemaRetrieveParamsLangTr     Oa3SchemaRetrieveParamsLang = "tr"
	Oa3SchemaRetrieveParamsLangTt     Oa3SchemaRetrieveParamsLang = "tt"
	Oa3SchemaRetrieveParamsLangUdm    Oa3SchemaRetrieveParamsLang = "udm"
	Oa3SchemaRetrieveParamsLangUk     Oa3SchemaRetrieveParamsLang = "uk"
	Oa3SchemaRetrieveParamsLangUr     Oa3SchemaRetrieveParamsLang = "ur"
	Oa3SchemaRetrieveParamsLangUz     Oa3SchemaRetrieveParamsLang = "uz"
	Oa3SchemaRetrieveParamsLangVi     Oa3SchemaRetrieveParamsLang = "vi"
	Oa3SchemaRetrieveParamsLangZhHans Oa3SchemaRetrieveParamsLang = "zh-hans"
	Oa3SchemaRetrieveParamsLangZhHant Oa3SchemaRetrieveParamsLang = "zh-hant"
)

// Defines values for ProductGroupsListParamsPrefetch.
const (
	ProductGroupsListParamsPrefetchGroup   ProductGroupsListParamsPrefetch = "group"
	ProductGroupsListParamsPrefetchProduct ProductGroupsListParamsPrefetch = "product"
	ProductGroupsListParamsPrefetchRole    ProductGroupsListParamsPrefetch = "role"
)

// Defines values for ProductGroupsRetrieveParamsPrefetch.
const (
	ProductGroupsRetrieveParamsPrefetchGroup   ProductGroupsRetrieveParamsPrefetch = "group"
	ProductGroupsRetrieveParamsPrefetchProduct ProductGroupsRetrieveParamsPrefetch = "product"
	ProductGroupsRetrieveParamsPrefetchRole    ProductGroupsRetrieveParamsPrefetch = "role"
)

// Defines values for ProductMembersListParamsPrefetch.
const (
	ProductMembersListParamsPrefetchProduct ProductMembersListParamsPrefetch = "product"
	ProductMembersListParamsPrefetchRole    ProductMembersListParamsPrefetch = "role"
	ProductMembersListParamsPrefetchUser    ProductMembersListParamsPrefetch = "user"
)

// Defines values for ProductMembersRetrieveParamsPrefetch.
const (
	ProductMembersRetrieveParamsPrefetchProduct ProductMembersRetrieveParamsPrefetch = "product"
	ProductMembersRetrieveParamsPrefetchRole    ProductMembersRetrieveParamsPrefetch = "role"
	ProductMembersRetrieveParamsPrefetchUser    ProductMembersRetrieveParamsPrefetch = "user"
)

// Defines values for ProductTypeGroupsListParamsPrefetch.
const (
	ProductTypeGroupsListParamsPrefetchGroup       ProductTypeGroupsListParamsPrefetch = "group"
	ProductTypeGroupsListParamsPrefetchProductType ProductTypeGroupsListParamsPrefetch = "product_type"
	ProductTypeGroupsListParamsPrefetchRole        ProductTypeGroupsListParamsPrefetch = "role"
)

// Defines values for ProductTypeGroupsRetrieveParamsPrefetch.
const (
	ProductTypeGroupsRetrieveParamsPrefetchGroup       ProductTypeGroupsRetrieveParamsPrefetch = "group"
	ProductTypeGroupsRetrieveParamsPrefetchProductType ProductTypeGroupsRetrieveParamsPrefetch = "product_type"
	ProductTypeGroupsRetrieveParamsPrefetchRole        ProductTypeGroupsRetrieveParamsPrefetch = "role"
)

// Defines values for ProductTypeMembersListParamsPrefetch.
const (
	ProductTypeMembersListParamsPrefetchProductType ProductTypeMembersListParamsPrefetch = "product_type"
	ProductTypeMembersListParamsPrefetchRole        ProductTypeMembersListParamsPrefetch = "role"
	ProductTypeMembersListParamsPrefetchUser        ProductTypeMembersListParamsPrefetch = "user"
)

// Defines values for ProductTypeMembersRetrieveParamsPrefetch.
const (
	ProductTypeMembersRetrieveParamsPrefetchProductType ProductTypeMembersRetrieveParamsPrefetch = "product_type"
	ProductTypeMembersRetrieveParamsPrefetchRole        ProductTypeMembersRetrieveParamsPrefetch = "role"
	ProductTypeMembersRetrieveParamsPrefetchUser        ProductTypeMembersRetrieveParamsPrefetch = "user"
)

// Defines values for ProductTypesListParamsPrefetch.
const (
	ProductTypesListParamsPrefetchAuthorizationGroups ProductTypesListParamsPrefetch = "authorization_groups"
	ProductTypesListParamsPrefetchMembers             ProductTypesListParamsPrefetch = "members"
)

// Defines values for ProductTypesRetrieveParamsPrefetch.
const (
	ProductTypesRetrieveParamsPrefetchAuthorizationGroups ProductTypesRetrieveParamsPrefetch = "authorization_groups"
	ProductTypesRetrieveParamsPrefetchMembers             ProductTypesRetrieveParamsPrefetch = "members"
)

// Defines values for ProductsListParamsCreated.
const (
	ProductsListParamsCreatedN1 ProductsListParamsCreated = 1
	ProductsListParamsCreatedN2 ProductsListParamsCreated = 2
	ProductsListParamsCreatedN3 ProductsListParamsCreated = 3
	ProductsListParamsCreatedN4 ProductsListParamsCreated = 4
	ProductsListParamsCreatedN5 ProductsListParamsCreated = 5
	ProductsListParamsCreatedN6 ProductsListParamsCreated = 6
	ProductsListParamsCreatedN7 ProductsListParamsCreated = 7
)

// Defines values for ProductsListParamsO.
const (
	ProductsListParamsOBusinessCriticality            ProductsListParamsO = "business_criticality"
	ProductsListParamsOCreated                        ProductsListParamsO = "created"
	ProductsListParamsOExternalAudience               ProductsListParamsO = "external_audience"
	ProductsListParamsOId                             ProductsListParamsO = "id"
	ProductsListParamsOInternetAccessible             ProductsListParamsO = "internet_accessible"
	ProductsListParamsOLifecycle                      ProductsListParamsO = "lifecycle"
	ProductsListParamsOMinusBusinessCriticality       ProductsListParamsO = "-business_criticality"
	ProductsListParamsOMinusCreated                   ProductsListParamsO = "-created"
	ProductsListParamsOMinusExternalAudience          ProductsListParamsO = "-external_audience"
	ProductsListParamsOMinusId                        ProductsListParamsO = "-id"
	ProductsListParamsOMinusInternetAccessible        ProductsListParamsO = "-internet_accessible"
	ProductsListParamsOMinusLifecycle                 ProductsListParamsO = "-lifecycle"
	ProductsListParamsOMinusName                      ProductsListParamsO = "-name"
	ProductsListParamsOMinusOrigin                    ProductsListParamsO = "-origin"
	ProductsListParamsOMinusPlatform                  ProductsListParamsO = "-platform"
	ProductsListParamsOMinusProdNumericGrade          ProductsListParamsO = "-prod_numeric_grade"
	ProductsListParamsOMinusProdType                  ProductsListParamsO = "-prod_type"
	ProductsListParamsOMinusProdTypeName              ProductsListParamsO = "-prod_type__name"
	ProductsListParamsOMinusProductManager            ProductsListParamsO = "-product_manager"
	ProductsListParamsOMinusProductManagerFirstName   ProductsListParamsO = "-product_manager__first_name"
	ProductsListParamsOMinusProductManagerLastName    ProductsListParamsO = "-product_manager__last_name"
	ProductsListParamsOMinusRevenue                   ProductsListParamsO = "-revenue"
	ProductsListParamsOMinusTeamManager               ProductsListParamsO = "-team_manager"
	ProductsListParamsOMinusTeamManagerFirstName      ProductsListParamsO = "-team_manager__first_name"
	ProductsListParamsOMinusTeamManagerLastName       ProductsListParamsO = "-team_manager__last_name"
	ProductsListParamsOMinusTechnicalContact          ProductsListParamsO = "-technical_contact"
	ProductsListParamsOMinusTechnicalContactFirstName ProductsListParamsO = "-technical_contact__first_name"
	ProductsListParamsOMinusTechnicalContactLastName  ProductsListParamsO = "-technical_contact__last_name"
	ProductsListParamsOMinusTid                       ProductsListParamsO = "-tid"
	ProductsListParamsOMinusUpdated                   ProductsListParamsO = "-updated"
	ProductsListParamsOMinusUserRecords               ProductsListParamsO = "-user_records"
	ProductsListParamsOName                           ProductsListParamsO = "name"
	ProductsListParamsOOrigin                         ProductsListParamsO = "origin"
	ProductsListParamsOPlatform                       ProductsListParamsO = "platform"
	ProductsListParamsOProdNumericGrade               ProductsListParamsO = "prod_numeric_grade"
	ProductsListParamsOProdType                       ProductsListParamsO = "prod_type"
	ProductsListParamsOProdTypeName                   ProductsListParamsO = "prod_type__name"
	ProductsListParamsOProductManager                 ProductsListParamsO = "product_manager"
	ProductsListParamsOProductManagerFirstName        ProductsListParamsO = "product_manager__first_name"
	ProductsListParamsOProductManagerLastName         ProductsListParamsO = "product_manager__last_name"
	ProductsListParamsORevenue                        ProductsListParamsO = "revenue"
	ProductsListParamsOTeamManager                    ProductsListParamsO = "team_manager"
	ProductsListParamsOTeamManagerFirstName           ProductsListParamsO = "team_manager__first_name"
	ProductsListParamsOTeamManagerLastName            ProductsListParamsO = "team_manager__last_name"
	ProductsListParamsOTechnicalContact               ProductsListParamsO = "technical_contact"
	ProductsListParamsOTechnicalContactFirstName      ProductsListParamsO = "technical_contact__first_name"
	ProductsListParamsOTechnicalContactLastName       ProductsListParamsO = "technical_contact__last_name"
	ProductsListParamsOTid                            ProductsListParamsO = "tid"
	ProductsListParamsOUpdated                        ProductsListParamsO = "updated"
	ProductsListParamsOUserRecords                    ProductsListParamsO = "user_records"
)

// Defines values for ProductsListParamsPrefetch.
const (
	ProductsListParamsPrefetchAuthorizationGroups ProductsListParamsPrefetch = "authorization_groups"
	ProductsListParamsPrefetchMembers             ProductsListParamsPrefetch = "members"
	ProductsListParamsPrefetchProdType            ProductsListParamsPrefetch = "prod_type"
	ProductsListParamsPrefetchProductManager      ProductsListParamsPrefetch = "product_manager"
	ProductsListParamsPrefetchRegulations         ProductsListParamsPrefetch = "regulations"
	ProductsListParamsPrefetchSlaConfiguration    ProductsListParamsPrefetch = "sla_configuration"
	ProductsListParamsPrefetchTeamManager         ProductsListParamsPrefetch = "team_manager"
	ProductsListParamsPrefetchTechnicalContact    ProductsListParamsPrefetch = "technical_contact"
)

// Defines values for ProductsListParamsUpdated.
const (
	ProductsListParamsUpdatedN1 ProductsListParamsUpdated = 1
	ProductsListParamsUpdatedN2 ProductsListParamsUpdated = 2
	ProductsListParamsUpdatedN3 ProductsListParamsUpdated = 3
	ProductsListParamsUpdatedN4 ProductsListParamsUpdated = 4
	ProductsListParamsUpdatedN5 ProductsListParamsUpdated = 5
	ProductsListParamsUpdatedN6 ProductsListParamsUpdated = 6
	ProductsListParamsUpdatedN7 ProductsListParamsUpdated = 7
)

// Defines values for ProductsRetrieveParamsPrefetch.
const (
	ProductsRetrieveParamsPrefetchAuthorizationGroups ProductsRetrieveParamsPrefetch = "authorization_groups"
	ProductsRetrieveParamsPrefetchMembers             ProductsRetrieveParamsPrefetch = "members"
	ProductsRetrieveParamsPrefetchProdType            ProductsRetrieveParamsPrefetch = "prod_type"
	ProductsRetrieveParamsPrefetchProductManager      ProductsRetrieveParamsPrefetch = "product_manager"
	ProductsRetrieveParamsPrefetchRegulations         ProductsRetrieveParamsPrefetch = "regulations"
	ProductsRetrieveParamsPrefetchSlaConfiguration    ProductsRetrieveParamsPrefetch = "sla_configuration"
	ProductsRetrieveParamsPrefetchTeamManager         ProductsRetrieveParamsPrefetch = "team_manager"
	ProductsRetrieveParamsPrefetchTechnicalContact    ProductsRetrieveParamsPrefetch = "technical_contact"
)

// Defines values for RiskAcceptanceListParamsDecision.
const (
	RiskAcceptanceListParamsDecisionA RiskAcceptanceListParamsDecision = "A"
	RiskAcceptanceListParamsDecisionF RiskAcceptanceListParamsDecision = "F"
	RiskAcceptanceListParamsDecisionM RiskAcceptanceListParamsDecision = "M"
	RiskAcceptanceListParamsDecisionT RiskAcceptanceListParamsDecision = "T"
	RiskAcceptanceListParamsDecisionV RiskAcceptanceListParamsDecision = "V"
)

// Defines values for RiskAcceptanceListParamsO.
const (
	MinusName RiskAcceptanceListParamsO = "-name"
	Name      RiskAcceptanceListParamsO = "name"
)

// Defines values for RiskAcceptanceListParamsRecommendation.
const (
	RiskAcceptanceListParamsRecommendationA RiskAcceptanceListParamsRecommendation = "A"
	RiskAcceptanceListParamsRecommendationF RiskAcceptanceListParamsRecommendation = "F"
	RiskAcceptanceListParamsRecommendationM RiskAcceptanceListParamsRecommendation = "M"
	RiskAcceptanceListParamsRecommendationT RiskAcceptanceListParamsRecommendation = "T"
	RiskAcceptanceListParamsRecommendationV RiskAcceptanceListParamsRecommendation = "V"
)

// Defines values for TestImportsListParamsPrefetch.
const (
	TestImportsListParamsPrefetchFindingsAffected TestImportsListParamsPrefetch = "findings_affected"
	TestImportsListParamsPrefetchTest             TestImportsListParamsPrefetch = "test"
)

// Defines values for TestImportsListParamsTestImportFindingActionAction.
const (
	C TestImportsListParamsTestImportFindingActionAction = "C"
	N TestImportsListParamsTestImportFindingActionAction = "N"
	R TestImportsListParamsTestImportFindingActionAction = "R"
	U TestImportsListParamsTestImportFindingActionAction = "U"
)

// Defines values for TestImportsRetrieveParamsPrefetch.
const (
	TestImportsRetrieveParamsPrefetchFindingsAffected TestImportsRetrieveParamsPrefetch = "findings_affected"
	TestImportsRetrieveParamsPrefetchTest             TestImportsRetrieveParamsPrefetch = "test"
)

// Defines values for TestsListParamsO.
const (
	TestsListParamsOApiScanConfiguration      TestsListParamsO = "api_scan_configuration"
	TestsListParamsOBranchTag                 TestsListParamsO = "branch_tag"
	TestsListParamsOBuildId                   TestsListParamsO = "build_id"
	TestsListParamsOCommitHash                TestsListParamsO = "commit_hash"
	TestsListParamsOCreated                   TestsListParamsO = "created"
	TestsListParamsOEngagement                TestsListParamsO = "engagement"
	TestsListParamsOLead                      TestsListParamsO = "lead"
	TestsListParamsOMinusApiScanConfiguration TestsListParamsO = "-api_scan_configuration"
	TestsListParamsOMinusBranchTag            TestsListParamsO = "-branch_tag"
	TestsListParamsOMinusBuildId              TestsListParamsO = "-build_id"
	TestsListParamsOMinusCommitHash           TestsListParamsO = "-commit_hash"
	TestsListParamsOMinusCreated              TestsListParamsO = "-created"
	TestsListParamsOMinusEngagement           TestsListParamsO = "-engagement"
	TestsListParamsOMinusLead                 TestsListParamsO = "-lead"
	TestsListParamsOMinusTargetEnd            TestsListParamsO = "-target_end"
	TestsListParamsOMinusTargetStart          TestsListParamsO = "-target_start"
	TestsListParamsOMinusTestType             TestsListParamsO = "-test_type"
	TestsListParamsOMinusTitle                TestsListParamsO = "-title"
	TestsListParamsOMinusUpdated              TestsListParamsO = "-updated"
	TestsListParamsOMinusVersion              TestsListParamsO = "-version"
	TestsListParamsOTargetEnd                 TestsListParamsO = "target_end"
	TestsListParamsOTargetStart               TestsListParamsO = "target_start"
	TestsListParamsOTestType                  TestsListParamsO = "test_type"
	TestsListParamsOTitle                     TestsListParamsO = "title"
	TestsListParamsOUpdated                   TestsListParamsO = "updated"
	TestsListParamsOVersion                   TestsListParamsO = "version"
)

// Defines values for ToolConfigurationsListParamsAuthenticationType.
const (
	API      ToolConfigurationsListParamsAuthenticationType = "API"
	Password ToolConfigurationsListParamsAuthenticationType = "Password"
	SSH      ToolConfigurationsListParamsAuthenticationType = "SSH"
)

// Defines values for UserContactInfosListParamsPrefetch.
const (
	UserContactInfosListParamsPrefetchUser UserContactInfosListParamsPrefetch = "user"
)

// Defines values for UserContactInfosRetrieveParamsPrefetch.
const (
	UserContactInfosRetrieveParamsPrefetchUser UserContactInfosRetrieveParamsPrefetch = "user"
)

// AcceptedRiskRequest defines model for AcceptedRiskRequest.
type AcceptedRiskRequest struct {
	// AcceptedBy Name or email of person who accepts the risk
	AcceptedBy string `json:"accepted_by"`

	// Justification Justification for accepting findings with this vulnerability id
	Justification string `json:"justification"`

	// VulnerabilityId An id of a vulnerability in a security advisory associated with this finding. Can be a Common Vulnerabilities and Exposure (CVE) or from other sources.
	VulnerabilityId string `json:"vulnerability_id"`
}

// AddNewFileOptionRequest defines model for AddNewFileOptionRequest.
type AddNewFileOptionRequest struct {
	File  openapi_types.File `json:"file"`
	Title string             `json:"title"`
}

// AddNewNoteOptionRequest defines model for AddNewNoteOptionRequest.
type AddNewNoteOptionRequest struct {
	Entry    string `json:"entry"`
	NoteType *int   `json:"note_type"`
	Private  *bool  `json:"private,omitempty"`
}

// AppAnalysis defines model for AppAnalysis.
type AppAnalysis struct {
	Confidence   *int       `json:"confidence"`
	Created      *time.Time `json:"created,omitempty"`
	Icon         *string    `json:"icon"`
	Id           *int       `json:"id,omitempty"`
	Name         string     `json:"name"`
	Product      int        `json:"product"`
	Tags         *[]string  `json:"tags,omitempty"`
	User         int        `json:"user"`
	Version      *string    `json:"version"`
	Website      *string    `json:"website"`
	WebsiteFound *string    `json:"website_found"`
}

// AppAnalysisRequest defines model for AppAnalysisRequest.
type AppAnalysisRequest struct {
	Confidence   *int      `json:"confidence"`
	Icon         *string   `json:"icon"`
	Name         string    `json:"name"`
	Product      int       `json:"product"`
	Tags         *[]string `json:"tags,omitempty"`
	User         int       `json:"user"`
	Version      *string   `json:"version"`
	Website      *string   `json:"website"`
	WebsiteFound *string   `json:"website_found"`
}

// AuthToken defines model for AuthToken.
type AuthToken struct {
	Token *string `json:"token,omitempty"`
}

// AuthTokenRequest defines model for AuthTokenRequest.
type AuthTokenRequest struct {
	Password *string `json:"password,omitempty"`
	Username *string `json:"username,omitempty"`
}

// BurpRawRequestResponse defines model for BurpRawRequestResponse.
type BurpRawRequestResponse struct {
	ReqResp []map[string]string `json:"req_resp"`
}

// BurpRawRequestResponseRequest defines model for BurpRawRequestResponseRequest.
type BurpRawRequestResponseRequest struct {
	ReqResp []map[string]string `json:"req_resp"`
}

// ConfigurationPermission defines model for ConfigurationPermission.
type ConfigurationPermission struct {
	Codename string `json:"codename"`
	Id       *int   `json:"id,omitempty"`
	Name     string `json:"name"`
}

// Credential defines model for Credential.
type Credential struct {
	// Authentication * `Form` - Form Authentication
	// * `SSO` - SSO Redirect
	Authentication *CredentialAuthentication `json:"authentication,omitempty"`
	Description    *string                   `json:"description"`
	Environment    int                       `json:"environment"`

	// HttpAuthentication * `Basic` - Basic
	// * `NTLM` - NTLM
	HttpAuthentication *CredentialHttpAuthentication `json:"http_authentication"`
	Id                 *int                          `json:"id,omitempty"`
	IsValid            *bool                         `json:"is_valid,omitempty"`
	LoginRegex         *string                       `json:"login_regex"`
	LogoutRegex        *string                       `json:"logout_regex"`
	Name               string                        `json:"name"`
	Notes              *[]int                        `json:"notes,omitempty"`
	Role               string                        `json:"role"`
	Url                string                        `json:"url"`
	Username           string                        `json:"username"`
}

// CredentialAuthentication * `Form` - Form Authentication
// * `SSO` - SSO Redirect
type CredentialAuthentication string

// CredentialHttpAuthentication * `Basic` - Basic
// * `NTLM` - NTLM
type CredentialHttpAuthentication string

// CredentialMapping defines model for CredentialMapping.
type CredentialMapping struct {
	CredId          int     `json:"cred_id"`
	Engagement      *int    `json:"engagement"`
	Finding         *int    `json:"finding"`
	Id              *int    `json:"id,omitempty"`
	IsAuthnProvider *bool   `json:"is_authn_provider,omitempty"`
	Product         *int    `json:"product"`
	Test            *int    `json:"test"`
	Url             *string `json:"url"`
}

// CredentialMappingRequest defines model for CredentialMappingRequest.
type CredentialMappingRequest struct {
	CredId          int     `json:"cred_id"`
	Engagement      *int    `json:"engagement"`
	Finding         *int    `json:"finding"`
	IsAuthnProvider *bool   `json:"is_authn_provider,omitempty"`
	Product         *int    `json:"product"`
	Test            *int    `json:"test"`
	Url             *string `json:"url"`
}

// CredentialRequest defines model for CredentialRequest.
type CredentialRequest struct {
	// Authentication * `Form` - Form Authentication
	// * `SSO` - SSO Redirect
	Authentication *CredentialRequestAuthentication `json:"authentication,omitempty"`
	Description    *string                          `json:"description"`
	Environment    int                              `json:"environment"`

	// HttpAuthentication * `Basic` - Basic
	// * `NTLM` - NTLM
	HttpAuthentication *CredentialRequestHttpAuthentication `json:"http_authentication"`
	IsValid            *bool                                `json:"is_valid,omitempty"`
	LoginRegex         *string                              `json:"login_regex"`
	LogoutRegex        *string                              `json:"logout_regex"`
	Name               string                               `json:"name"`
	Role               string                               `json:"role"`
	Url                string                               `json:"url"`
	Username           string                               `json:"username"`
}

// CredentialRequestAuthentication * `Form` - Form Authentication
// * `SSO` - SSO Redirect
type CredentialRequestAuthentication string

// CredentialRequestHttpAuthentication * `Basic` - Basic
// * `NTLM` - NTLM
type CredentialRequestHttpAuthentication string

// DeletePreview defines model for DeletePreview.
type DeletePreview struct {
	Id    *int    `json:"id"`
	Model *string `json:"model,omitempty"`
	Name  *string `json:"name,omitempty"`
}

// DeltaStatistics defines model for DeltaStatistics.
type DeltaStatistics struct {
	Closed        SeverityStatusStatistics `json:"closed"`
	Created       SeverityStatusStatistics `json:"created"`
	LeftUntouched SeverityStatusStatistics `json:"left untouched"`
	Reactivated   SeverityStatusStatistics `json:"reactivated"`
}

// DevelopmentEnvironment defines model for DevelopmentEnvironment.
type DevelopmentEnvironment struct {
	Id   *int   `json:"id,omitempty"`
	Name string `json:"name"`
}

// DevelopmentEnvironmentRequest defines model for DevelopmentEnvironmentRequest.
type DevelopmentEnvironmentRequest struct {
	Name string `json:"name"`
}

// DojoGroup defines model for DojoGroup.
type DojoGroup struct {
	ConfigurationPermissions *[]int  `json:"configuration_permissions,omitempty"`
	Description              *string `json:"description"`
	Id                       *int    `json:"id,omitempty"`
	Name                     string  `json:"name"`
	Prefetch                 *struct {
		ProductGroups     *map[string]Product     `json:"product_groups,omitempty"`
		ProductTypeGroups *map[string]ProductType `json:"product_type_groups,omitempty"`
		Users             *map[string]UserStub    `json:"users,omitempty"`
	} `json:"prefetch,omitempty"`

	// SocialProvider Group imported from a social provider.
	//
	// * `AzureAD` - AzureAD
	SocialProvider *DojoGroupSocialProvider `json:"social_provider"`
	Users          *[]int                   `json:"users,omitempty"`
}

// DojoGroupSocialProvider Group imported from a social provider.
//
// * `AzureAD` - AzureAD
type DojoGroupSocialProvider string

// DojoGroupMember defines model for DojoGroupMember.
type DojoGroupMember struct {
	Group    int  `json:"group"`
	Id       *int `json:"id,omitempty"`
	Prefetch *struct {
		Group *map[string]DojoGroup `json:"group,omitempty"`
		Role  *map[string]Role      `json:"role,omitempty"`
		User  *map[string]UserStub  `json:"user,omitempty"`
	} `json:"prefetch,omitempty"`

	// Role This role determines the permissions of the user to manage the group.
	Role int `json:"role"`
	User int `json:"user"`
}

// DojoGroupMemberRequest defines model for DojoGroupMemberRequest.
type DojoGroupMemberRequest struct {
	Group int `json:"group"`

	// Role This role determines the permissions of the user to manage the group.
	Role int `json:"role"`
	User int `json:"user"`
}

// DojoGroupRequest defines model for DojoGroupRequest.
type DojoGroupRequest struct {
	ConfigurationPermissions *[]int  `json:"configuration_permissions,omitempty"`
	Description              *string `json:"description"`
	Name                     string  `json:"name"`

	// SocialProvider Group imported from a social provider.
	//
	// * `AzureAD` - AzureAD
	SocialProvider *DojoGroupRequestSocialProvider `json:"social_provider"`
}

// DojoGroupRequestSocialProvider Group imported from a social provider.
//
// * `AzureAD` - AzureAD
type DojoGroupRequestSocialProvider string

// Endpoint defines model for Endpoint.
type Endpoint struct {
	EndpointParams *[]int `json:"endpoint_params,omitempty"`
	Findings       *[]int `json:"findings,omitempty"`

	// Fragment The fragment identifier which follows the hash mark. The hash mark should be omitted. For example 'section-13', 'paragraph-2'.
	Fragment *string `json:"fragment"`

	// Host The host name or IP address. It must not include the port number. For example '127.0.0.1', 'localhost', 'yourdomain.com'.
	Host *string `json:"host"`
	Id   *int    `json:"id,omitempty"`

	// Path The location of the resource, it must not start with a '/'. For example endpoint/420/edit
	Path *string `json:"path"`

	// Port The network port associated with the endpoint.
	Port    *int `json:"port"`
	Product *int `json:"product"`

	// Protocol The communication protocol/scheme such as 'http', 'ftp', 'dns', etc.
	Protocol *string `json:"protocol"`

	// Query The query string, the question mark should be omitted.For example 'group=4&team=8'
	Query *string   `json:"query"`
	Tags  *[]string `json:"tags,omitempty"`

	// Userinfo User info as 'alice', 'bob', etc.
	Userinfo *string `json:"userinfo"`
}

// EndpointMetaImporter defines model for EndpointMetaImporter.
type EndpointMetaImporter struct {
	CreateDojoMeta  *bool   `json:"create_dojo_meta,omitempty"`
	CreateEndpoints *bool   `json:"create_endpoints,omitempty"`
	CreateTags      *bool   `json:"create_tags,omitempty"`
	File            string  `json:"file"`
	Product         *int    `json:"product,omitempty"`
	ProductId       *int    `json:"product_id,omitempty"`
	ProductName     *string `json:"product_name,omitempty"`
}

// EndpointMetaImporterRequest defines model for EndpointMetaImporterRequest.
type EndpointMetaImporterRequest struct {
	CreateDojoMeta  *bool              `json:"create_dojo_meta,omitempty"`
	CreateEndpoints *bool              `json:"create_endpoints,omitempty"`
	CreateTags      *bool              `json:"create_tags,omitempty"`
	File            openapi_types.File `json:"file"`
	Product         *int               `json:"product,omitempty"`
	ProductName     *string            `json:"product_name,omitempty"`
}

// EndpointRequest defines model for EndpointRequest.
type EndpointRequest struct {
	// Fragment The fragment identifier which follows the hash mark. The hash mark should be omitted. For example 'section-13', 'paragraph-2'.
	Fragment *string `json:"fragment"`

	// Host The host name or IP address. It must not include the port number. For example '127.0.0.1', 'localhost', 'yourdomain.com'.
	Host *string `json:"host"`

	// Path The location of the resource, it must not start with a '/'. For example endpoint/420/edit
	Path *string `json:"path"`

	// Port The network port associated with the endpoint.
	Port    *int `json:"port"`
	Product *int `json:"product"`

	// Protocol The communication protocol/scheme such as 'http', 'ftp', 'dns', etc.
	Protocol *string `json:"protocol"`

	// Query The query string, the question mark should be omitted.For example 'group=4&team=8'
	Query *string   `json:"query"`
	Tags  *[]string `json:"tags,omitempty"`

	// Userinfo User info as 'alice', 'bob', etc.
	Userinfo *string `json:"userinfo"`
}

// EndpointStatus defines model for EndpointStatus.
type EndpointStatus struct {
	Date          *openapi_types.Date `json:"date,omitempty"`
	Endpoint      int                 `json:"endpoint"`
	FalsePositive *bool               `json:"false_positive,omitempty"`
	Finding       int                 `json:"finding"`
	Id            *int                `json:"id,omitempty"`
	LastModified  *time.Time          `json:"last_modified"`
	Mitigated     *bool               `json:"mitigated,omitempty"`
	MitigatedBy   *int                `json:"mitigated_by"`
	MitigatedTime *time.Time          `json:"mitigated_time"`
	OutOfScope    *bool               `json:"out_of_scope,omitempty"`
	RiskAccepted  *bool               `json:"risk_accepted,omitempty"`
}

// EndpointStatusRequest defines model for EndpointStatusRequest.
type EndpointStatusRequest struct {
	Date          *openapi_types.Date `json:"date,omitempty"`
	Endpoint      int                 `json:"endpoint"`
	FalsePositive *bool               `json:"false_positive,omitempty"`
	Finding       int                 `json:"finding"`
	Mitigated     *bool               `json:"mitigated,omitempty"`
	MitigatedBy   *int                `json:"mitigated_by"`
	OutOfScope    *bool               `json:"out_of_scope,omitempty"`
	RiskAccepted  *bool               `json:"risk_accepted,omitempty"`
}

// Engagement defines model for Engagement.
type Engagement struct {
	Active  *bool `json:"active,omitempty"`
	ApiTest *bool `json:"api_test,omitempty"`

	// BranchTag Tag or branch of the product the engagement tested.
	BranchTag *string `json:"branch_tag"`

	// BuildId Build ID of the product the engagement tested.
	BuildId *string `json:"build_id"`

	// BuildServer Build server responsible for CI/CD test
	BuildServer *int  `json:"build_server"`
	CheckList   *bool `json:"check_list,omitempty"`

	// CommitHash Commit hash from repo
	CommitHash *string    `json:"commit_hash"`
	Created    *time.Time `json:"created"`

	// DeduplicationOnEngagement If enabled deduplication will only mark a finding in this engagement as duplicate of another finding if both findings are in this engagement. If disabled, deduplication is on the product level.
	DeduplicationOnEngagement *bool   `json:"deduplication_on_engagement,omitempty"`
	Description               *string `json:"description"`
	DoneTesting               *bool   `json:"done_testing,omitempty"`

	// EngagementType * `Interactive` - Interactive
	// * `CI/CD` - CI/CD
	EngagementType *EngagementEngagementType `json:"engagement_type"`
	Files          *[]File                   `json:"files,omitempty"`
	FirstContacted *openapi_types.Date       `json:"first_contacted"`
	Id             *int                      `json:"id,omitempty"`
	Lead           *int                      `json:"lead"`
	Name           *string                   `json:"name"`
	Notes          *[]Note                   `json:"notes,omitempty"`

	// OrchestrationEngine Orchestration service responsible for CI/CD test
	OrchestrationEngine *int  `json:"orchestration_engine"`
	PenTest             *bool `json:"pen_test,omitempty"`

	// Preset Settings and notes for performing this engagement.
	Preset         *int    `json:"preset"`
	Product        int     `json:"product"`
	Progress       *string `json:"progress,omitempty"`
	Reason         *string `json:"reason"`
	ReportType     *int    `json:"report_type"`
	Requester      *int    `json:"requester"`
	RiskAcceptance *[]int  `json:"risk_acceptance,omitempty"`

	// SourceCodeManagementServer Source code server for CI/CD test
	SourceCodeManagementServer *int `json:"source_code_management_server"`

	// SourceCodeManagementUri Resource link to source code
	SourceCodeManagementUri *string `json:"source_code_management_uri"`

	// Status * `Not Started` - Not Started
	// * `Blocked` - Blocked
	// * `Cancelled` - Cancelled
	// * `Completed` - Completed
	// * `In Progress` - In Progress
	// * `On Hold` - On Hold
	// * `Waiting for Resource` - Waiting for Resource
	Status       *EngagementStatus  `json:"status"`
	Tags         *[]string          `json:"tags,omitempty"`
	TargetEnd    openapi_types.Date `json:"target_end"`
	TargetStart  openapi_types.Date `json:"target_start"`
	TestStrategy *string            `json:"test_strategy"`
	ThreatModel  *bool              `json:"threat_model,omitempty"`
	TmodelPath   *string            `json:"tmodel_path"`

	// Tracker Link to epic or ticket system with changes to version.
	Tracker *string    `json:"tracker"`
	Updated *time.Time `json:"updated"`

	// Version Version of the product the engagement tested.
	Version *string `json:"version"`
}

// EngagementEngagementType * `Interactive` - Interactive
// * `CI/CD` - CI/CD
type EngagementEngagementType string

// EngagementStatus * `Not Started` - Not Started
// * `Blocked` - Blocked
// * `Cancelled` - Cancelled
// * `Completed` - Completed
// * `In Progress` - In Progress
// * `On Hold` - On Hold
// * `Waiting for Resource` - Waiting for Resource
type EngagementStatus string

// EngagementCheckList defines model for EngagementCheckList.
type EngagementCheckList struct {
	AuthIssues                      *[]int  `json:"auth_issues,omitempty"`
	Authentication                  *string `json:"authentication,omitempty"`
	AuthorIssues                    *[]int  `json:"author_issues,omitempty"`
	AuthorizationAndAccessControl   *string `json:"authorization_and_access_control,omitempty"`
	ConfigIssues                    *[]int  `json:"config_issues,omitempty"`
	ConfigurationManagement         *string `json:"configuration_management,omitempty"`
	CryptoIssues                    *[]int  `json:"crypto_issues,omitempty"`
	DataInputSanitizationValidation *string `json:"data_input_sanitization_validation,omitempty"`
	DataIssues                      *[]int  `json:"data_issues,omitempty"`
	EncryptionCrypto                *string `json:"encryption_crypto,omitempty"`
	Engagement                      *int    `json:"engagement,omitempty"`
	Id                              *int    `json:"id,omitempty"`
	Other                           *string `json:"other,omitempty"`
	OtherIssues                     *[]int  `json:"other_issues,omitempty"`
	SensitiveData                   *string `json:"sensitive_data,omitempty"`
	SensitiveIssues                 *[]int  `json:"sensitive_issues,omitempty"`
	SessionIssues                   *[]int  `json:"session_issues,omitempty"`
	SessionManagement               *string `json:"session_management,omitempty"`
}

// EngagementCheckListRequest defines model for EngagementCheckListRequest.
type EngagementCheckListRequest struct {
	AuthIssues                      *[]int  `json:"auth_issues,omitempty"`
	Authentication                  *string `json:"authentication,omitempty"`
	AuthorIssues                    *[]int  `json:"author_issues,omitempty"`
	AuthorizationAndAccessControl   *string `json:"authorization_and_access_control,omitempty"`
	ConfigIssues                    *[]int  `json:"config_issues,omitempty"`
	ConfigurationManagement         *string `json:"configuration_management,omitempty"`
	CryptoIssues                    *[]int  `json:"crypto_issues,omitempty"`
	DataInputSanitizationValidation *string `json:"data_input_sanitization_validation,omitempty"`
	DataIssues                      *[]int  `json:"data_issues,omitempty"`
	EncryptionCrypto                *string `json:"encryption_crypto,omitempty"`
	Other                           *string `json:"other,omitempty"`
	OtherIssues                     *[]int  `json:"other_issues,omitempty"`
	SensitiveData                   *string `json:"sensitive_data,omitempty"`
	SensitiveIssues                 *[]int  `json:"sensitive_issues,omitempty"`
	SessionIssues                   *[]int  `json:"session_issues,omitempty"`
	SessionManagement               *string `json:"session_management,omitempty"`
}

// EngagementPresets defines model for EngagementPresets.
type EngagementPresets struct {
	Created          *time.Time `json:"created,omitempty"`
	Id               *int       `json:"id,omitempty"`
	NetworkLocations *[]int     `json:"network_locations,omitempty"`

	// Notes Description of what needs to be tested or setting up environment for testing
	Notes   *string `json:"notes"`
	Product int     `json:"product"`

	// Scope Scope of Engagement testing, IP's/Resources/URL's)
	Scope    *string `json:"scope,omitempty"`
	TestType *[]int  `json:"test_type,omitempty"`

	// Title Brief description of preset.
	Title *string `json:"title,omitempty"`
}

// EngagementPresetsRequest defines model for EngagementPresetsRequest.
type EngagementPresetsRequest struct {
	NetworkLocations *[]int `json:"network_locations,omitempty"`

	// Notes Description of what needs to be tested or setting up environment for testing
	Notes   *string `json:"notes"`
	Product int     `json:"product"`

	// Scope Scope of Engagement testing, IP's/Resources/URL's)
	Scope    *string `json:"scope,omitempty"`
	TestType *[]int  `json:"test_type,omitempty"`

	// Title Brief description of preset.
	Title *string `json:"title,omitempty"`
}

// EngagementRequest defines model for EngagementRequest.
type EngagementRequest struct {
	ApiTest *bool `json:"api_test,omitempty"`

	// BranchTag Tag or branch of the product the engagement tested.
	BranchTag *string `json:"branch_tag"`

	// BuildId Build ID of the product the engagement tested.
	BuildId *string `json:"build_id"`

	// BuildServer Build server responsible for CI/CD test
	BuildServer *int  `json:"build_server"`
	CheckList   *bool `json:"check_list,omitempty"`

	// CommitHash Commit hash from repo
	CommitHash *string `json:"commit_hash"`

	// DeduplicationOnEngagement If enabled deduplication will only mark a finding in this engagement as duplicate of another finding if both findings are in this engagement. If disabled, deduplication is on the product level.
	DeduplicationOnEngagement *bool   `json:"deduplication_on_engagement,omitempty"`
	Description               *string `json:"description"`

	// EngagementType * `Interactive` - Interactive
	// * `CI/CD` - CI/CD
	EngagementType *EngagementRequestEngagementType `json:"engagement_type"`
	FirstContacted *openapi_types.Date              `json:"first_contacted"`
	Lead           *int                             `json:"lead"`
	Name           *string                          `json:"name"`

	// OrchestrationEngine Orchestration service responsible for CI/CD test
	OrchestrationEngine *int  `json:"orchestration_engine"`
	PenTest             *bool `json:"pen_test,omitempty"`

	// Preset Settings and notes for performing this engagement.
	Preset     *int    `json:"preset"`
	Product    int     `json:"product"`
	Reason     *string `json:"reason"`
	ReportType *int    `json:"report_type"`
	Requester  *int    `json:"requester"`

	// SourceCodeManagementServer Source code server for CI/CD test
	SourceCodeManagementServer *int `json:"source_code_management_server"`

	// SourceCodeManagementUri Resource link to source code
	SourceCodeManagementUri *string `json:"source_code_management_uri"`

	// Status * `Not Started` - Not Started
	// * `Blocked` - Blocked
	// * `Cancelled` - Cancelled
	// * `Completed` - Completed
	// * `In Progress` - In Progress
	// * `On Hold` - On Hold
	// * `Waiting for Resource` - Waiting for Resource
	Status       *EngagementRequestStatus `json:"status"`
	Tags         *[]string                `json:"tags,omitempty"`
	TargetEnd    openapi_types.Date       `json:"target_end"`
	TargetStart  openapi_types.Date       `json:"target_start"`
	TestStrategy *string                  `json:"test_strategy"`
	ThreatModel  *bool                    `json:"threat_model,omitempty"`

	// Tracker Link to epic or ticket system with changes to version.
	Tracker *string `json:"tracker"`

	// Version Version of the product the engagement tested.
	Version *string `json:"version"`
}

// EngagementRequestEngagementType * `Interactive` - Interactive
// * `CI/CD` - CI/CD
type EngagementRequestEngagementType string

// EngagementRequestStatus * `Not Started` - Not Started
// * `Blocked` - Blocked
// * `Cancelled` - Cancelled
// * `Completed` - Completed
// * `In Progress` - In Progress
// * `On Hold` - On Hold
// * `Waiting for Resource` - Waiting for Resource
type EngagementRequestStatus string

// EngagementToFiles defines model for EngagementToFiles.
type EngagementToFiles struct {
	EngagementId *int   `json:"engagement_id"`
	Files        []File `json:"files"`
}

// EngagementToNotes defines model for EngagementToNotes.
type EngagementToNotes struct {
	EngagementId *int   `json:"engagement_id"`
	Notes        []Note `json:"notes"`
}

// ExecutiveSummary defines model for ExecutiveSummary.
type ExecutiveSummary struct {
	EngagementName        string             `json:"engagement_name"`
	EngagementTargetEnd   openapi_types.Date `json:"engagement_target_end"`
	EngagementTargetStart openapi_types.Date `json:"engagement_target_start"`
	TestEnvironmentName   string             `json:"test_environment_name"`
	TestStrategyRef       string             `json:"test_strategy_ref"`
	TestTargetEnd         time.Time          `json:"test_target_end"`
	TestTargetStart       time.Time          `json:"test_target_start"`
	TestTypeName          string             `json:"test_type_name"`
	TotalFindings         int                `json:"total_findings"`
}

// File defines model for File.
type File struct {
	File  string `json:"file"`
	Id    *int   `json:"id,omitempty"`
	Title string `json:"title"`
}

// Finding defines model for Finding.
type Finding struct {
	AcceptedRisks *[]RiskAcceptance `json:"accepted_risks,omitempty"`

	// Active Denotes if this flaw is active or not.
	Active *bool `json:"active,omitempty"`
	Age    *int  `json:"age,omitempty"`

	// ComponentName Name of the affected component (library name, part of a system, ...).
	ComponentName *string `json:"component_name"`

	// ComponentVersion Version of the affected component.
	ComponentVersion *string `json:"component_version"`

	// Created The date the finding was created inside DefectDojo.
	Created *time.Time `json:"created"`

	// Cvssv3 Common Vulnerability Scoring System version 3 (CVSSv3) score associated with this flaw.
	Cvssv3 *string `json:"cvssv3"`

	// Cvssv3Score Numerical CVSSv3 score for the vulnerability. If the vector is given, the score is updated while saving the finding
	Cvssv3Score *float64 `json:"cvssv3_score"`

	// Cwe The CWE number associated with this flaw.
	Cwe *int `json:"cwe"`

	// Date The date the flaw was discovered.
	Date *openapi_types.Date `json:"date,omitempty"`

	// DefectReviewRequestedBy Documents who requested a defect review for this flaw.
	DefectReviewRequestedBy *int `json:"defect_review_requested_by"`

	// Description Longer more descriptive information about the flaw.
	Description   string  `json:"description"`
	DisplayStatus *string `json:"display_status,omitempty"`

	// Duplicate Denotes if this flaw is a duplicate of other flaws reported.
	Duplicate *bool `json:"duplicate,omitempty"`

	// DuplicateFinding Link to the original finding if this finding is a duplicate.
	DuplicateFinding *int `json:"duplicate_finding"`

	// DynamicFinding Flaw has been detected from a Dynamic Application Security Testing tool (DAST).
	DynamicFinding *bool `json:"dynamic_finding,omitempty"`

	// EffortForFixing Effort for fixing / remediating the vulnerability (Low, Medium, High)
	EffortForFixing *string `json:"effort_for_fixing"`

	// Endpoints The hosts within the product that are susceptible to this flaw. + The status of the endpoint associated with this flaw (Vulnerable, Mitigated, ...).
	Endpoints *[]int `json:"endpoints,omitempty"`

	// FalseP Denotes if this flaw has been deemed a false positive by the tester.
	FalseP *bool `json:"false_p,omitempty"`

	// FilePath Identified file(s) containing the flaw.
	FilePath *string `json:"file_path"`

	// Files Files(s) related to the flaw.
	Files         *[]int          `json:"files,omitempty"`
	FindingGroups *[]FindingGroup `json:"finding_groups,omitempty"`
	FindingMeta   *[]FindingMeta  `json:"finding_meta,omitempty"`

	// FoundBy The name of the scanner that identified the flaw.
	FoundBy *[]int `json:"found_by,omitempty"`

	// HashCode A hash over a configurable set of fields that is used for findings deduplication.
	HashCode *string `json:"hash_code"`
	Id       *int    `json:"id,omitempty"`

	// Impact Text describing the impact this flaw has on systems, products, enterprise, etc.
	Impact *string `json:"impact"`

	// IsMitigated Denotes if this flaw has been fixed.
	IsMitigated  *bool      `json:"is_mitigated,omitempty"`
	JiraChange   *time.Time `json:"jira_change,omitempty"`
	JiraCreation *time.Time `json:"jira_creation,omitempty"`

	// LastReviewed Provides the date the flaw was last 'touched' by a tester.
	LastReviewed *time.Time `json:"last_reviewed"`

	// LastReviewedBy Provides the person who last reviewed the flaw.
	LastReviewedBy *int `json:"last_reviewed_by"`

	// LastStatusUpdate Timestamp of latest status update (change in status related fields).
	LastStatusUpdate *time.Time `json:"last_status_update"`

	// Line Source line number of the attack vector.
	Line *int `json:"line"`

	// Mitigated Denotes if this flaw has been fixed by storing the date it was fixed.
	Mitigated *time.Time `json:"mitigated"`

	// MitigatedBy Documents who has marked this flaw as fixed.
	MitigatedBy *int `json:"mitigated_by"`

	// Mitigation Text describing how to best fix the flaw.
	Mitigation *string `json:"mitigation"`

	// NbOccurences Number of occurences in the source tool when several vulnerabilites were found and aggregated by the scanner.
	NbOccurences *int    `json:"nb_occurences"`
	Notes        *[]Note `json:"notes,omitempty"`

	// NumericalSeverity The numerical representation of the severity (S0, S1, S2, S3, S4).
	NumericalSeverity string `json:"numerical_severity"`

	// OutOfScope Denotes if this flaw falls outside the scope of the test and/or engagement.
	OutOfScope *bool `json:"out_of_scope,omitempty"`

	// Param Parameter used to trigger the issue (DAST).
	Param *string `json:"param"`

	// Payload Payload used to attack the service / application and trigger the bug / problem.
	Payload *string `json:"payload"`

	// PlannedRemediationDate The date the flaw is expected to be remediated.
	PlannedRemediationDate *openapi_types.Date `json:"planned_remediation_date"`

	// PlannedRemediationVersion The target version when the vulnerability should be fixed / remediated
	PlannedRemediationVersion *string `json:"planned_remediation_version"`
	Prefetch                  *struct {
		AuthIssues              *map[string]EngagementCheckList `json:"auth_issues,omitempty"`
		AuthorIssues            *map[string]EngagementCheckList `json:"author_issues,omitempty"`
		ConfigIssues            *map[string]EngagementCheckList `json:"config_issues,omitempty"`
		CryptoIssues            *map[string]EngagementCheckList `json:"crypto_issues,omitempty"`
		DataIssues              *map[string]EngagementCheckList `json:"data_issues,omitempty"`
		DefectReviewRequestedBy *map[string]UserStub            `json:"defect_review_requested_by,omitempty"`
		DuplicateFinding        *map[string]Finding             `json:"duplicate_finding,omitempty"`
		EndpointSet             *map[string]Endpoint            `json:"endpoint_set,omitempty"`
		Endpoints               *map[string]Endpoint            `json:"endpoints,omitempty"`
		Files                   *map[string]RawFile             `json:"files,omitempty"`
		FindingGroupSet         *map[string]FindingGroup        `json:"finding_group_set,omitempty"`
		FoundBy                 *map[string]TestType            `json:"found_by,omitempty"`
		LastReviewedBy          *map[string]UserStub            `json:"last_reviewed_by,omitempty"`
		MitigatedBy             *map[string]UserStub            `json:"mitigated_by,omitempty"`
		Notes                   *map[string]Note                `json:"notes,omitempty"`
		OtherIssues             *map[string]EngagementCheckList `json:"other_issues,omitempty"`
		Reporter                *map[string]UserStub            `json:"reporter,omitempty"`
		ReviewRequestedBy       *map[string]UserStub            `json:"review_requested_by,omitempty"`
		Reviewers               *map[string]UserStub            `json:"reviewers,omitempty"`
		RiskAcceptanceSet       *map[string]RiskAcceptance      `json:"risk_acceptance_set,omitempty"`
		SensitiveIssues         *map[string]EngagementCheckList `json:"sensitive_issues,omitempty"`
		SessionIssues           *map[string]EngagementCheckList `json:"session_issues,omitempty"`
		SonarqubeIssue          *map[string]SonarqubeIssue      `json:"sonarqube_issue,omitempty"`
		Test                    *map[string]Test                `json:"test,omitempty"`
		TestImportSet           *map[string]TestImport          `json:"test_import_set,omitempty"`
	} `json:"prefetch,omitempty"`

	// PublishDate Date when this vulnerability was made publicly available.
	PublishDate *openapi_types.Date `json:"publish_date"`
	PushToJira  *bool               `json:"push_to_jira,omitempty"`

	// References The external documentation available for this flaw.
	References    *string               `json:"references"`
	RelatedFields *FindingRelatedFields `json:"related_fields,omitempty"`

	// Reporter Documents who reported the flaw.
	Reporter        *int                    `json:"reporter,omitempty"`
	RequestResponse *BurpRawRequestResponse `json:"request_response,omitempty"`

	// ReviewRequestedBy Documents who requested a review for this finding.
	ReviewRequestedBy *int `json:"review_requested_by"`

	// Reviewers Documents who reviewed the flaw.
	Reviewers *[]int `json:"reviewers,omitempty"`

	// RiskAccepted Denotes if this finding has been marked as an accepted risk.
	RiskAccepted *bool `json:"risk_accepted,omitempty"`

	// SastSinkObject Sink object (variable, function...) of the attack vector.
	SastSinkObject *string `json:"sast_sink_object"`

	// SastSourceFilePath Source file path of the attack vector.
	SastSourceFilePath *string `json:"sast_source_file_path"`

	// SastSourceLine Source line number of the attack vector.
	SastSourceLine *int `json:"sast_source_line"`

	// SastSourceObject Source object (variable, function...) of the attack vector.
	SastSourceObject *string `json:"sast_source_object"`

	// ScannerConfidence Confidence level of vulnerability which is supplied by the scanner.
	ScannerConfidence *int `json:"scanner_confidence"`

	// Service A service is a self-contained piece of functionality within a Product. This is an optional field which is used in deduplication of findings when set.
	Service *string `json:"service"`

	// Severity The severity level of this flaw (Critical, High, Medium, Low, Informational).
	Severity string `json:"severity"`

	// SeverityJustification Text describing why a certain severity was associated with this flaw.
	SeverityJustification *string `json:"severity_justification"`
	SlaDaysRemaining      *int    `json:"sla_days_remaining,omitempty"`

	// SlaStartDate (readonly)The date used as start date for SLA calculation. Set by expiring risk acceptances. Empty by default, causing a fallback to 'date'.
	SlaStartDate *openapi_types.Date `json:"sla_start_date"`

	// SonarqubeIssue The SonarQube issue associated with this finding.
	SonarqubeIssue *int `json:"sonarqube_issue"`

	// StaticFinding Flaw has been detected from a Static Application Security Testing tool (SAST).
	StaticFinding *bool `json:"static_finding,omitempty"`

	// StepsToReproduce Text describing the steps that must be followed in order to reproduce the flaw / bug.
	StepsToReproduce *string   `json:"steps_to_reproduce"`
	Tags             *[]string `json:"tags,omitempty"`

	// Test The test that is associated with this flaw.
	Test     *int `json:"test,omitempty"`
	ThreadId *int `json:"thread_id,omitempty"`

	// Title A short description of the flaw.
	Title string `json:"title"`

	// UnderDefectReview Denotes if this finding is under defect review.
	UnderDefectReview *bool `json:"under_defect_review,omitempty"`

	// UnderReview Denotes is this flaw is currently being reviewed.
	UnderReview *bool `json:"under_review,omitempty"`

	// UniqueIdFromTool Vulnerability technical id from the source tool. Allows to track unique vulnerabilities.
	UniqueIdFromTool *string `json:"unique_id_from_tool"`

	// Url External reference that provides more information about this flaw.
	Url *string `json:"url"`

	// Verified Denotes if this flaw has been manually verified by the tester.
	Verified *bool `json:"verified,omitempty"`

	// VulnIdFromTool Non-unique technical id from the source tool associated with the vulnerability type.
	VulnIdFromTool   *string            `json:"vuln_id_from_tool"`
	VulnerabilityIds *[]VulnerabilityId `json:"vulnerability_ids,omitempty"`
}

// FindingClose defines model for FindingClose.
type FindingClose struct {
	Duplicate   *bool      `json:"duplicate,omitempty"`
	FalseP      *bool      `json:"false_p,omitempty"`
	IsMitigated *bool      `json:"is_mitigated,omitempty"`
	Mitigated   *time.Time `json:"mitigated,omitempty"`
	OutOfScope  *bool      `json:"out_of_scope,omitempty"`
}

// FindingCloseRequest defines model for FindingCloseRequest.
type FindingCloseRequest struct {
	Duplicate   *bool      `json:"duplicate,omitempty"`
	FalseP      *bool      `json:"false_p,omitempty"`
	IsMitigated *bool      `json:"is_mitigated,omitempty"`
	Mitigated   *time.Time `json:"mitigated,omitempty"`
	OutOfScope  *bool      `json:"out_of_scope,omitempty"`
}

// FindingCreate defines model for FindingCreate.
type FindingCreate struct {
	// Active Denotes if this flaw is active or not.
	Active bool `json:"active"`

	// ComponentName Name of the affected component (library name, part of a system, ...).
	ComponentName *string `json:"component_name"`

	// ComponentVersion Version of the affected component.
	ComponentVersion *string `json:"component_version"`

	// Created The date the finding was created inside DefectDojo.
	Created *time.Time `json:"created"`

	// Cvssv3 Common Vulnerability Scoring System version 3 (CVSSv3) score associated with this flaw.
	Cvssv3 *string `json:"cvssv3"`

	// Cvssv3Score Numerical CVSSv3 score for the vulnerability. If the vector is given, the score is updated while saving the finding
	Cvssv3Score *float64 `json:"cvssv3_score"`

	// Cwe The CWE number associated with this flaw.
	Cwe *int `json:"cwe"`

	// Date The date the flaw was discovered.
	Date *openapi_types.Date `json:"date,omitempty"`

	// DefectReviewRequestedBy Documents who requested a defect review for this flaw.
	DefectReviewRequestedBy *int `json:"defect_review_requested_by"`

	// Description Longer more descriptive information about the flaw.
	Description string `json:"description"`

	// Duplicate Denotes if this flaw is a duplicate of other flaws reported.
	Duplicate *bool `json:"duplicate,omitempty"`

	// DuplicateFinding Link to the original finding if this finding is a duplicate.
	DuplicateFinding *int `json:"duplicate_finding"`

	// DynamicFinding Flaw has been detected from a Dynamic Application Security Testing tool (DAST).
	DynamicFinding *bool `json:"dynamic_finding,omitempty"`

	// EffortForFixing Effort for fixing / remediating the vulnerability (Low, Medium, High)
	EffortForFixing *string `json:"effort_for_fixing"`

	// Endpoints The hosts within the product that are susceptible to this flaw. + The status of the endpoint associated with this flaw (Vulnerable, Mitigated, ...).
	Endpoints *[]int `json:"endpoints,omitempty"`

	// FalseP Denotes if this flaw has been deemed a false positive by the tester.
	FalseP *bool `json:"false_p,omitempty"`

	// FilePath Identified file(s) containing the flaw.
	FilePath *string `json:"file_path"`

	// Files Files(s) related to the flaw.
	Files   *[]int `json:"files,omitempty"`
	FoundBy []int  `json:"found_by"`

	// HashCode A hash over a configurable set of fields that is used for findings deduplication.
	HashCode *string `json:"hash_code"`
	Id       *int    `json:"id,omitempty"`

	// Impact Text describing the impact this flaw has on systems, products, enterprise, etc.
	Impact *string `json:"impact"`

	// IsMitigated Denotes if this flaw has been fixed.
	IsMitigated *bool `json:"is_mitigated,omitempty"`

	// LastReviewed Provides the date the flaw was last 'touched' by a tester.
	LastReviewed *time.Time `json:"last_reviewed"`

	// LastReviewedBy Provides the person who last reviewed the flaw.
	LastReviewedBy *int `json:"last_reviewed_by"`

	// LastStatusUpdate Timestamp of latest status update (change in status related fields).
	LastStatusUpdate *time.Time `json:"last_status_update"`

	// Line Source line number of the attack vector.
	Line *int `json:"line"`

	// Mitigated Denotes if this flaw has been fixed by storing the date it was fixed.
	Mitigated *time.Time `json:"mitigated"`

	// MitigatedBy Documents who has marked this flaw as fixed.
	MitigatedBy *int `json:"mitigated_by"`

	// Mitigation Text describing how to best fix the flaw.
	Mitigation *string `json:"mitigation"`

	// NbOccurences Number of occurences in the source tool when several vulnerabilites were found and aggregated by the scanner.
	NbOccurences *int   `json:"nb_occurences"`
	Notes        *[]int `json:"notes,omitempty"`

	// NumericalSeverity The numerical representation of the severity (S0, S1, S2, S3, S4).
	NumericalSeverity string `json:"numerical_severity"`

	// OutOfScope Denotes if this flaw falls outside the scope of the test and/or engagement.
	OutOfScope *bool `json:"out_of_scope,omitempty"`

	// Param Parameter used to trigger the issue (DAST).
	Param *string `json:"param"`

	// Payload Payload used to attack the service / application and trigger the bug / problem.
	Payload *string `json:"payload"`

	// PlannedRemediationDate The date the flaw is expected to be remediated.
	PlannedRemediationDate *openapi_types.Date `json:"planned_remediation_date"`

	// PlannedRemediationVersion The target version when the vulnerability should be fixed / remediated
	PlannedRemediationVersion *string `json:"planned_remediation_version"`

	// PublishDate Date when this vulnerability was made publicly available.
	PublishDate *openapi_types.Date `json:"publish_date"`
	PushToJira  *bool               `json:"push_to_jira,omitempty"`

	// References The external documentation available for this flaw.
	References *string `json:"references"`
	Reporter   *int    `json:"reporter,omitempty"`

	// ReviewRequestedBy Documents who requested a review for this finding.
	ReviewRequestedBy *int `json:"review_requested_by"`

	// Reviewers Documents who reviewed the flaw.
	Reviewers *[]int `json:"reviewers,omitempty"`

	// RiskAccepted Denotes if this finding has been marked as an accepted risk.
	RiskAccepted *bool `json:"risk_accepted,omitempty"`

	// SastSinkObject Sink object (variable, function...) of the attack vector.
	SastSinkObject *string `json:"sast_sink_object"`

	// SastSourceFilePath Source file path of the attack vector.
	SastSourceFilePath *string `json:"sast_source_file_path"`

	// SastSourceLine Source line number of the attack vector.
	SastSourceLine *int `json:"sast_source_line"`

	// SastSourceObject Source object (variable, function...) of the attack vector.
	SastSourceObject *string `json:"sast_source_object"`

	// ScannerConfidence Confidence level of vulnerability which is supplied by the scanner.
	ScannerConfidence *int `json:"scanner_confidence"`

	// Service A service is a self-contained piece of functionality within a Product. This is an optional field which is used in deduplication of findings when set.
	Service *string `json:"service"`

	// Severity The severity level of this flaw (Critical, High, Medium, Low, Informational).
	Severity string `json:"severity"`

	// SeverityJustification Text describing why a certain severity was associated with this flaw.
	SeverityJustification *string `json:"severity_justification"`

	// SlaStartDate (readonly)The date used as start date for SLA calculation. Set by expiring risk acceptances. Empty by default, causing a fallback to 'date'.
	SlaStartDate *openapi_types.Date `json:"sla_start_date"`

	// SonarqubeIssue The SonarQube issue associated with this finding.
	SonarqubeIssue *int `json:"sonarqube_issue"`

	// StaticFinding Flaw has been detected from a Static Application Security Testing tool (SAST).
	StaticFinding *bool `json:"static_finding,omitempty"`

	// StepsToReproduce Text describing the steps that must be followed in order to reproduce the flaw / bug.
	StepsToReproduce *string   `json:"steps_to_reproduce"`
	Tags             *[]string `json:"tags,omitempty"`
	Test             int       `json:"test"`
	ThreadId         *int      `json:"thread_id,omitempty"`

	// Title A short description of the flaw.
	Title string `json:"title"`

	// UnderDefectReview Denotes if this finding is under defect review.
	UnderDefectReview *bool `json:"under_defect_review,omitempty"`

	// UnderReview Denotes is this flaw is currently being reviewed.
	UnderReview *bool `json:"under_review,omitempty"`

	// UniqueIdFromTool Vulnerability technical id from the source tool. Allows to track unique vulnerabilities.
	UniqueIdFromTool *string `json:"unique_id_from_tool"`
	Url              *string `json:"url"`

	// Verified Denotes if this flaw has been manually verified by the tester.
	Verified bool `json:"verified"`

	// VulnIdFromTool Non-unique technical id from the source tool associated with the vulnerability type.
	VulnIdFromTool   *string            `json:"vuln_id_from_tool"`
	VulnerabilityIds *[]VulnerabilityId `json:"vulnerability_ids,omitempty"`
}

// FindingCreateRequest defines model for FindingCreateRequest.
type FindingCreateRequest struct {
	// Active Denotes if this flaw is active or not.
	Active bool `json:"active"`

	// ComponentName Name of the affected component (library name, part of a system, ...).
	ComponentName *string `json:"component_name"`

	// ComponentVersion Version of the affected component.
	ComponentVersion *string `json:"component_version"`

	// Cvssv3 Common Vulnerability Scoring System version 3 (CVSSv3) score associated with this flaw.
	Cvssv3 *string `json:"cvssv3"`

	// Cvssv3Score Numerical CVSSv3 score for the vulnerability. If the vector is given, the score is updated while saving the finding
	Cvssv3Score *float64 `json:"cvssv3_score"`

	// Cwe The CWE number associated with this flaw.
	Cwe *int `json:"cwe"`

	// Date The date the flaw was discovered.
	Date *openapi_types.Date `json:"date,omitempty"`

	// DefectReviewRequestedBy Documents who requested a defect review for this flaw.
	DefectReviewRequestedBy *int `json:"defect_review_requested_by"`

	// Description Longer more descriptive information about the flaw.
	Description string `json:"description"`

	// Duplicate Denotes if this flaw is a duplicate of other flaws reported.
	Duplicate *bool `json:"duplicate,omitempty"`

	// DynamicFinding Flaw has been detected from a Dynamic Application Security Testing tool (DAST).
	DynamicFinding *bool `json:"dynamic_finding,omitempty"`

	// EffortForFixing Effort for fixing / remediating the vulnerability (Low, Medium, High)
	EffortForFixing *string `json:"effort_for_fixing"`

	// FalseP Denotes if this flaw has been deemed a false positive by the tester.
	FalseP *bool `json:"false_p,omitempty"`

	// FilePath Identified file(s) containing the flaw.
	FilePath *string `json:"file_path"`
	FoundBy  []int   `json:"found_by"`

	// Impact Text describing the impact this flaw has on systems, products, enterprise, etc.
	Impact *string `json:"impact"`

	// IsMitigated Denotes if this flaw has been fixed.
	IsMitigated *bool `json:"is_mitigated,omitempty"`

	// Line Source line number of the attack vector.
	Line *int `json:"line"`

	// Mitigation Text describing how to best fix the flaw.
	Mitigation *string `json:"mitigation"`

	// NbOccurences Number of occurences in the source tool when several vulnerabilites were found and aggregated by the scanner.
	NbOccurences *int `json:"nb_occurences"`

	// NumericalSeverity The numerical representation of the severity (S0, S1, S2, S3, S4).
	NumericalSeverity string `json:"numerical_severity"`

	// OutOfScope Denotes if this flaw falls outside the scope of the test and/or engagement.
	OutOfScope *bool `json:"out_of_scope,omitempty"`

	// PlannedRemediationDate The date the flaw is expected to be remediated.
	PlannedRemediationDate *openapi_types.Date `json:"planned_remediation_date"`

	// PlannedRemediationVersion The target version when the vulnerability should be fixed / remediated
	PlannedRemediationVersion *string `json:"planned_remediation_version"`

	// PublishDate Date when this vulnerability was made publicly available.
	PublishDate *openapi_types.Date `json:"publish_date"`
	PushToJira  *bool               `json:"push_to_jira,omitempty"`

	// References The external documentation available for this flaw.
	References *string `json:"references"`
	Reporter   *int    `json:"reporter,omitempty"`

	// ReviewRequestedBy Documents who requested a review for this finding.
	ReviewRequestedBy *int `json:"review_requested_by"`

	// Reviewers Documents who reviewed the flaw.
	Reviewers *[]int `json:"reviewers,omitempty"`

	// RiskAccepted Denotes if this finding has been marked as an accepted risk.
	RiskAccepted *bool `json:"risk_accepted,omitempty"`

	// SastSinkObject Sink object (variable, function...) of the attack vector.
	SastSinkObject *string `json:"sast_sink_object"`

	// SastSourceFilePath Source file path of the attack vector.
	SastSourceFilePath *string `json:"sast_source_file_path"`

	// SastSourceLine Source line number of the attack vector.
	SastSourceLine *int `json:"sast_source_line"`

	// SastSourceObject Source object (variable, function...) of the attack vector.
	SastSourceObject *string `json:"sast_source_object"`

	// Service A service is a self-contained piece of functionality within a Product. This is an optional field which is used in deduplication of findings when set.
	Service *string `json:"service"`

	// Severity The severity level of this flaw (Critical, High, Medium, Low, Informational).
	Severity string `json:"severity"`

	// SeverityJustification Text describing why a certain severity was associated with this flaw.
	SeverityJustification *string `json:"severity_justification"`

	// SlaStartDate (readonly)The date used as start date for SLA calculation. Set by expiring risk acceptances. Empty by default, causing a fallback to 'date'.
	SlaStartDate *openapi_types.Date `json:"sla_start_date"`

	// SonarqubeIssue The SonarQube issue associated with this finding.
	SonarqubeIssue *int `json:"sonarqube_issue"`

	// StaticFinding Flaw has been detected from a Static Application Security Testing tool (SAST).
	StaticFinding *bool `json:"static_finding,omitempty"`

	// StepsToReproduce Text describing the steps that must be followed in order to reproduce the flaw / bug.
	StepsToReproduce *string   `json:"steps_to_reproduce"`
	Tags             *[]string `json:"tags,omitempty"`
	Test             int       `json:"test"`
	ThreadId         *int      `json:"thread_id,omitempty"`

	// Title A short description of the flaw.
	Title string `json:"title"`

	// UnderDefectReview Denotes if this finding is under defect review.
	UnderDefectReview *bool `json:"under_defect_review,omitempty"`

	// UnderReview Denotes is this flaw is currently being reviewed.
	UnderReview *bool `json:"under_review,omitempty"`

	// UniqueIdFromTool Vulnerability technical id from the source tool. Allows to track unique vulnerabilities.
	UniqueIdFromTool *string `json:"unique_id_from_tool"`
	Url              *string `json:"url"`

	// Verified Denotes if this flaw has been manually verified by the tester.
	Verified bool `json:"verified"`

	// VulnIdFromTool Non-unique technical id from the source tool associated with the vulnerability type.
	VulnIdFromTool   *string                   `json:"vuln_id_from_tool"`
	VulnerabilityIds *[]VulnerabilityIdRequest `json:"vulnerability_ids,omitempty"`
}

// FindingEngagement defines model for FindingEngagement.
type FindingEngagement struct {
	// BranchTag Tag or branch of the product the engagement tested.
	BranchTag *string `json:"branch_tag"`

	// BuildId Build ID of the product the engagement tested.
	BuildId *string `json:"build_id"`

	// CommitHash Commit hash from repo
	CommitHash  *string    `json:"commit_hash"`
	Created     *time.Time `json:"created"`
	Description *string    `json:"description"`

	// EngagementType * `Interactive` - Interactive
	// * `CI/CD` - CI/CD
	EngagementType *FindingEngagementEngagementType `json:"engagement_type"`
	Id             *int                             `json:"id,omitempty"`
	Name           *string                          `json:"name"`
	Product        *FindingProduct                  `json:"product,omitempty"`
	TargetEnd      openapi_types.Date               `json:"target_end"`
	TargetStart    openapi_types.Date               `json:"target_start"`
	Updated        *time.Time                       `json:"updated"`

	// Version Version of the product the engagement tested.
	Version *string `json:"version"`
}

// FindingEngagementEngagementType * `Interactive` - Interactive
// * `CI/CD` - CI/CD
type FindingEngagementEngagementType string

// FindingEnvironment defines model for FindingEnvironment.
type FindingEnvironment struct {
	Id   *int   `json:"id,omitempty"`
	Name string `json:"name"`
}

// FindingGroup defines model for FindingGroup.
type FindingGroup struct {
	Id        *int       `json:"id,omitempty"`
	JiraIssue *JIRAIssue `json:"jira_issue,omitempty"`
	Name      string     `json:"name"`
	Test      int        `json:"test"`
}

// FindingMeta defines model for FindingMeta.
type FindingMeta struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

// FindingMetaRequest defines model for FindingMetaRequest.
type FindingMetaRequest struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

// FindingProdType defines model for FindingProdType.
type FindingProdType struct {
	Id   *int   `json:"id,omitempty"`
	Name string `json:"name"`
}

// FindingProduct defines model for FindingProduct.
type FindingProduct struct {
	Id       *int             `json:"id,omitempty"`
	Name     string           `json:"name"`
	ProdType *FindingProdType `json:"prod_type,omitempty"`
}

// FindingRelatedFields defines model for FindingRelatedFields.
type FindingRelatedFields struct {
	Jira *JIRAIssue   `json:"jira,omitempty"`
	Test *FindingTest `json:"test,omitempty"`
}

// FindingRequest defines model for FindingRequest.
type FindingRequest struct {
	// Active Denotes if this flaw is active or not.
	Active *bool `json:"active,omitempty"`

	// ComponentName Name of the affected component (library name, part of a system, ...).
	ComponentName *string `json:"component_name"`

	// ComponentVersion Version of the affected component.
	ComponentVersion *string `json:"component_version"`

	// Cvssv3 Common Vulnerability Scoring System version 3 (CVSSv3) score associated with this flaw.
	Cvssv3 *string `json:"cvssv3"`

	// Cvssv3Score Numerical CVSSv3 score for the vulnerability. If the vector is given, the score is updated while saving the finding
	Cvssv3Score *float64 `json:"cvssv3_score"`

	// Cwe The CWE number associated with this flaw.
	Cwe *int `json:"cwe"`

	// Date The date the flaw was discovered.
	Date *openapi_types.Date `json:"date,omitempty"`

	// DefectReviewRequestedBy Documents who requested a defect review for this flaw.
	DefectReviewRequestedBy *int `json:"defect_review_requested_by"`

	// Description Longer more descriptive information about the flaw.
	Description string `json:"description"`

	// Duplicate Denotes if this flaw is a duplicate of other flaws reported.
	Duplicate *bool `json:"duplicate,omitempty"`

	// DynamicFinding Flaw has been detected from a Dynamic Application Security Testing tool (DAST).
	DynamicFinding *bool `json:"dynamic_finding,omitempty"`

	// EffortForFixing Effort for fixing / remediating the vulnerability (Low, Medium, High)
	EffortForFixing *string `json:"effort_for_fixing"`

	// FalseP Denotes if this flaw has been deemed a false positive by the tester.
	FalseP *bool `json:"false_p,omitempty"`

	// FilePath Identified file(s) containing the flaw.
	FilePath *string `json:"file_path"`

	// Impact Text describing the impact this flaw has on systems, products, enterprise, etc.
	Impact *string `json:"impact"`

	// IsMitigated Denotes if this flaw has been fixed.
	IsMitigated *bool `json:"is_mitigated,omitempty"`

	// Line Source line number of the attack vector.
	Line *int `json:"line"`

	// Mitigation Text describing how to best fix the flaw.
	Mitigation *string `json:"mitigation"`

	// NbOccurences Number of occurences in the source tool when several vulnerabilites were found and aggregated by the scanner.
	NbOccurences *int `json:"nb_occurences"`

	// NumericalSeverity The numerical representation of the severity (S0, S1, S2, S3, S4).
	NumericalSeverity string `json:"numerical_severity"`

	// OutOfScope Denotes if this flaw falls outside the scope of the test and/or engagement.
	OutOfScope *bool `json:"out_of_scope,omitempty"`

	// PlannedRemediationDate The date the flaw is expected to be remediated.
	PlannedRemediationDate *openapi_types.Date `json:"planned_remediation_date"`

	// PlannedRemediationVersion The target version when the vulnerability should be fixed / remediated
	PlannedRemediationVersion *string `json:"planned_remediation_version"`

	// PublishDate Date when this vulnerability was made publicly available.
	PublishDate *openapi_types.Date `json:"publish_date"`
	PushToJira  *bool               `json:"push_to_jira,omitempty"`

	// References The external documentation available for this flaw.
	References *string `json:"references"`

	// ReviewRequestedBy Documents who requested a review for this finding.
	ReviewRequestedBy *int `json:"review_requested_by"`

	// Reviewers Documents who reviewed the flaw.
	Reviewers *[]int `json:"reviewers,omitempty"`

	// RiskAccepted Denotes if this finding has been marked as an accepted risk.
	RiskAccepted *bool `json:"risk_accepted,omitempty"`

	// SastSinkObject Sink object (variable, function...) of the attack vector.
	SastSinkObject *string `json:"sast_sink_object"`

	// SastSourceFilePath Source file path of the attack vector.
	SastSourceFilePath *string `json:"sast_source_file_path"`

	// SastSourceLine Source line number of the attack vector.
	SastSourceLine *int `json:"sast_source_line"`

	// SastSourceObject Source object (variable, function...) of the attack vector.
	SastSourceObject *string `json:"sast_source_object"`

	// Service A service is a self-contained piece of functionality within a Product. This is an optional field which is used in deduplication of findings when set.
	Service *string `json:"service"`

	// Severity The severity level of this flaw (Critical, High, Medium, Low, Informational).
	Severity string `json:"severity"`

	// SeverityJustification Text describing why a certain severity was associated with this flaw.
	SeverityJustification *string `json:"severity_justification"`

	// SlaStartDate (readonly)The date used as start date for SLA calculation. Set by expiring risk acceptances. Empty by default, causing a fallback to 'date'.
	SlaStartDate *openapi_types.Date `json:"sla_start_date"`

	// SonarqubeIssue The SonarQube issue associated with this finding.
	SonarqubeIssue *int `json:"sonarqube_issue"`

	// StaticFinding Flaw has been detected from a Static Application Security Testing tool (SAST).
	StaticFinding *bool `json:"static_finding,omitempty"`

	// StepsToReproduce Text describing the steps that must be followed in order to reproduce the flaw / bug.
	StepsToReproduce *string   `json:"steps_to_reproduce"`
	Tags             *[]string `json:"tags,omitempty"`

	// Title A short description of the flaw.
	Title string `json:"title"`

	// UnderDefectReview Denotes if this finding is under defect review.
	UnderDefectReview *bool `json:"under_defect_review,omitempty"`

	// UnderReview Denotes is this flaw is currently being reviewed.
	UnderReview *bool `json:"under_review,omitempty"`

	// UniqueIdFromTool Vulnerability technical id from the source tool. Allows to track unique vulnerabilities.
	UniqueIdFromTool *string `json:"unique_id_from_tool"`

	// Verified Denotes if this flaw has been manually verified by the tester.
	Verified *bool `json:"verified,omitempty"`

	// VulnIdFromTool Non-unique technical id from the source tool associated with the vulnerability type.
	VulnIdFromTool   *string                   `json:"vuln_id_from_tool"`
	VulnerabilityIds *[]VulnerabilityIdRequest `json:"vulnerability_ids,omitempty"`
}

// FindingTemplate defines model for FindingTemplate.
type FindingTemplate struct {
	Cvssv3            *string    `json:"cvssv3"`
	Cwe               *int       `json:"cwe"`
	Description       *string    `json:"description"`
	Id                *int       `json:"id,omitempty"`
	Impact            *string    `json:"impact"`
	LastUsed          *time.Time `json:"last_used"`
	Mitigation        *string    `json:"mitigation"`
	NumericalSeverity *string    `json:"numerical_severity"`
	References        *string    `json:"references"`
	Severity          *string    `json:"severity"`
	Tags              *[]string  `json:"tags,omitempty"`

	// TemplateMatch Enables this template for matching remediation advice. Match will be applied to all active, verified findings by CWE.
	TemplateMatch *bool `json:"template_match,omitempty"`

	// TemplateMatchTitle Matches by title text (contains search) and CWE.
	TemplateMatchTitle *bool                      `json:"template_match_title,omitempty"`
	Title              string                     `json:"title"`
	VulnerabilityIds   *[]VulnerabilityIdTemplate `json:"vulnerability_ids,omitempty"`
}

// FindingTemplateRequest defines model for FindingTemplateRequest.
type FindingTemplateRequest struct {
	Cvssv3      *string   `json:"cvssv3"`
	Cwe         *int      `json:"cwe"`
	Description *string   `json:"description"`
	Impact      *string   `json:"impact"`
	Mitigation  *string   `json:"mitigation"`
	References  *string   `json:"references"`
	Severity    *string   `json:"severity"`
	Tags        *[]string `json:"tags,omitempty"`

	// TemplateMatch Enables this template for matching remediation advice. Match will be applied to all active, verified findings by CWE.
	TemplateMatch *bool `json:"template_match,omitempty"`

	// TemplateMatchTitle Matches by title text (contains search) and CWE.
	TemplateMatchTitle *bool                             `json:"template_match_title,omitempty"`
	Title              string                            `json:"title"`
	VulnerabilityIds   *[]VulnerabilityIdTemplateRequest `json:"vulnerability_ids,omitempty"`
}

// FindingTest defines model for FindingTest.
type FindingTest struct {
	// BranchTag Tag or branch that was tested, a reimport may update this field.
	BranchTag *string `json:"branch_tag"`

	// BuildId Build ID that was tested, a reimport may update this field.
	BuildId *string `json:"build_id"`

	// CommitHash Commit hash tested, a reimport may update this field.
	CommitHash  *string             `json:"commit_hash"`
	Engagement  *FindingEngagement  `json:"engagement,omitempty"`
	Environment *FindingEnvironment `json:"environment,omitempty"`
	Id          *int                `json:"id,omitempty"`
	TestType    *FindingTestType    `json:"test_type,omitempty"`
	Title       *string             `json:"title"`
	Version     *string             `json:"version"`
}

// FindingTestType defines model for FindingTestType.
type FindingTestType struct {
	Id   *int   `json:"id,omitempty"`
	Name string `json:"name"`
}

// FindingToFiles defines model for FindingToFiles.
type FindingToFiles struct {
	Files     []File `json:"files"`
	FindingId *int   `json:"finding_id"`
}

// FindingToNotes defines model for FindingToNotes.
type FindingToNotes struct {
	FindingId *int   `json:"finding_id"`
	Notes     []Note `json:"notes"`
}

// GlobalRole defines model for GlobalRole.
type GlobalRole struct {
	Group *int `json:"group"`
	Id    *int `json:"id,omitempty"`

	// Role The global role will be applied to all product types and products.
	Role *int `json:"role"`
	User *int `json:"user"`
}

// GlobalRoleRequest defines model for GlobalRoleRequest.
type GlobalRoleRequest struct {
	Group *int `json:"group"`

	// Role The global role will be applied to all product types and products.
	Role *int `json:"role"`
	User *int `json:"user"`
}

// ImportLanguages defines model for ImportLanguages.
type ImportLanguages struct {
	File    string `json:"file"`
	Product int    `json:"product"`
}

// ImportLanguagesRequest defines model for ImportLanguagesRequest.
type ImportLanguagesRequest struct {
	File    openapi_types.File `json:"file"`
	Product int                `json:"product"`
}

// ImportScan defines model for ImportScan.
type ImportScan struct {
	// Active Override the active setting from the tool.
	Active               bool  `json:"active"`
	ApiScanConfiguration *int  `json:"api_scan_configuration"`
	AutoCreateContext    *bool `json:"auto_create_context,omitempty"`

	// BranchTag Branch or Tag that was scanned.
	BranchTag *string `json:"branch_tag,omitempty"`

	// BuildId ID of the build that was scanned.
	BuildId *string `json:"build_id,omitempty"`

	// CloseOldFindings Select if old findings no longer present in the report get closed as mitigated when importing. If service has been set, only the findings for this service will be closed.
	CloseOldFindings *bool `json:"close_old_findings,omitempty"`

	// CloseOldFindingsProductScope Select if close_old_findings applies to all findings of the same type in the product. By default, it is false meaning that only old findings of the same type in the engagement are in scope.
	CloseOldFindingsProductScope *bool `json:"close_old_findings_product_scope,omitempty"`

	// CommitHash Commit that was scanned.
	CommitHash *string `json:"commit_hash,omitempty"`

	// CreateFindingGroupsForAllFindings If set to false, finding groups will only be created when there is more than one grouped finding
	CreateFindingGroupsForAllFindings *bool `json:"create_finding_groups_for_all_findings,omitempty"`
	DeduplicationOnEngagement         *bool `json:"deduplication_on_engagement,omitempty"`

	// EndpointToAdd The IP address, host name or full URL. It must be valid
	EndpointToAdd *int `json:"endpoint_to_add,omitempty"`
	Engagement    *int `json:"engagement,omitempty"`

	// EngagementEndDate End Date for Engagement. Default is current time + 365 days. Required format year-month-day
	EngagementEndDate *openapi_types.Date `json:"engagement_end_date,omitempty"`
	EngagementId      *int                `json:"engagement_id,omitempty"`
	EngagementName    *string             `json:"engagement_name,omitempty"`
	Environment       *string             `json:"environment,omitempty"`
	File              *string             `json:"file,omitempty"`

	// GroupBy Choose an option to automatically group new findings by the chosen option.
	//
	// * `component_name` - Component Name
	// * `component_name+component_version` - Component Name + Version
	// * `file_path` - File path
	// * `finding_title` - Finding Title
	GroupBy *ImportScanGroupBy `json:"group_by,omitempty"`
	Lead    *int               `json:"lead"`

	// MinimumSeverity Minimum severity level to be imported
	//
	// * `Info` - Info
	// * `Low` - Low
	// * `Medium` - Medium
	// * `High` - High
	// * `Critical` - Critical
	MinimumSeverity *ImportScanMinimumSeverity `json:"minimum_severity,omitempty"`
	ProductId       *int                       `json:"product_id,omitempty"`
	ProductName     *string                    `json:"product_name,omitempty"`
	ProductTypeId   *int                       `json:"product_type_id,omitempty"`
	ProductTypeName *string                    `json:"product_type_name,omitempty"`
	PushToJira      *bool                      `json:"push_to_jira,omitempty"`

	// ScanDate Scan completion date will be used on all findings.
	ScanDate *openapi_types.Date `json:"scan_date,omitempty"`

	// ScanType * `Acunetix Scan` - Acunetix Scan
	// * `Acunetix360 Scan` - Acunetix360 Scan
	// * `Anchore Engine Scan` - Anchore Engine Scan
	// * `Anchore Enterprise Policy Check` - Anchore Enterprise Policy Check
	// * `Anchore Grype` - Anchore Grype
	// * `AnchoreCTL Policies Report` - AnchoreCTL Policies Report
	// * `AnchoreCTL Vuln Report` - AnchoreCTL Vuln Report
	// * `AppSpider Scan` - AppSpider Scan
	// * `Aqua Scan` - Aqua Scan
	// * `Arachni Scan` - Arachni Scan
	// * `AuditJS Scan` - AuditJS Scan
	// * `AWS Prowler Scan` - AWS Prowler Scan
	// * `AWS Prowler V3` - AWS Prowler V3
	// * `AWS Scout2 Scan` - AWS Scout2 Scan
	// * `AWS Security Finding Format (ASFF) Scan` - AWS Security Finding Format (ASFF) Scan
	// * `AWS Security Hub Scan` - AWS Security Hub Scan
	// * `Azure Security Center Recommendations Scan` - Azure Security Center Recommendations Scan
	// * `Bandit Scan` - Bandit Scan
	// * `BlackDuck API` - BlackDuck API
	// * `Blackduck Component Risk` - Blackduck Component Risk
	// * `Blackduck Hub Scan` - Blackduck Hub Scan
	// * `Brakeman Scan` - Brakeman Scan
	// * `Bugcrowd API Import` - Bugcrowd API Import
	// * `BugCrowd Scan` - BugCrowd Scan
	// * `Bundler-Audit Scan` - Bundler-Audit Scan
	// * `Burp Enterprise Scan` - Burp Enterprise Scan
	// * `Burp GraphQL API` - Burp GraphQL API
	// * `Burp REST API` - Burp REST API
	// * `Burp Scan` - Burp Scan
	// * `CargoAudit Scan` - CargoAudit Scan
	// * `Checkmarx OSA` - Checkmarx OSA
	// * `Checkmarx Scan` - Checkmarx Scan
	// * `Checkmarx Scan detailed` - Checkmarx Scan detailed
	// * `Checkov Scan` - Checkov Scan
	// * `Clair Klar Scan` - Clair Klar Scan
	// * `Clair Scan` - Clair Scan
	// * `Cloudsploit Scan` - Cloudsploit Scan
	// * `Cobalt.io API Import` - Cobalt.io API Import
	// * `Cobalt.io Scan` - Cobalt.io Scan
	// * `Codechecker Report native` - Codechecker Report native
	// * `Contrast Scan` - Contrast Scan
	// * `Coverity API` - Coverity API
	// * `Crashtest Security JSON File` - Crashtest Security JSON File
	// * `Crashtest Security XML File` - Crashtest Security XML File
	// * `CredScan Scan` - CredScan Scan
	// * `CycloneDX Scan` - CycloneDX Scan
	// * `DawnScanner Scan` - DawnScanner Scan
	// * `Dependency Check Scan` - Dependency Check Scan
	// * `Dependency Track Finding Packaging Format (FPF) Export` - Dependency Track Finding Packaging Format (FPF) Export
	// * `Detect-secrets Scan` - Detect-secrets Scan
	// * `docker-bench-security Scan` - docker-bench-security Scan
	// * `Dockle Scan` - Dockle Scan
	// * `DrHeader JSON Importer` - DrHeader JSON Importer
	// * `DSOP Scan` - DSOP Scan
	// * `Edgescan Scan` - Edgescan Scan
	// * `ESLint Scan` - ESLint Scan
	// * `Fortify Scan` - Fortify Scan
	// * `Generic Findings Import` - Generic Findings Import
	// * `Ggshield Scan` - Ggshield Scan
	// * `Github Vulnerability Scan` - Github Vulnerability Scan
	// * `GitLab API Fuzzing Report Scan` - GitLab API Fuzzing Report Scan
	// * `GitLab Container Scan` - GitLab Container Scan
	// * `GitLab DAST Report` - GitLab DAST Report
	// * `GitLab Dependency Scanning Report` - GitLab Dependency Scanning Report
	// * `GitLab SAST Report` - GitLab SAST Report
	// * `GitLab Secret Detection Report` - GitLab Secret Detection Report
	// * `Gitleaks Scan` - Gitleaks Scan
	// * `Gosec Scanner` - Gosec Scanner
	// * `Govulncheck Scanner` - Govulncheck Scanner
	// * `HackerOne Cases` - HackerOne Cases
	// * `Hadolint Dockerfile check` - Hadolint Dockerfile check
	// * `Harbor Vulnerability Scan` - Harbor Vulnerability Scan
	// * `Horusec Scan` - Horusec Scan
	// * `HuskyCI Report` - HuskyCI Report
	// * `Hydra Scan` - Hydra Scan
	// * `IBM AppScan DAST` - IBM AppScan DAST
	// * `Immuniweb Scan` - Immuniweb Scan
	// * `IntSights Report` - IntSights Report
	// * `JFrog Xray API Summary Artifact Scan` - JFrog Xray API Summary Artifact Scan
	// * `JFrog Xray Scan` - JFrog Xray Scan
	// * `JFrog Xray Unified Scan` - JFrog Xray Unified Scan
	// * `KICS Scan` - KICS Scan
	// * `Kiuwan Scan` - Kiuwan Scan
	// * `kube-bench Scan` - kube-bench Scan
	// * `Meterian Scan` - Meterian Scan
	// * `Microfocus Webinspect Scan` - Microfocus Webinspect Scan
	// * `MobSF Scan` - MobSF Scan
	// * `Mobsfscan Scan` - Mobsfscan Scan
	// * `Mozilla Observatory Scan` - Mozilla Observatory Scan
	// * `Netsparker Scan` - Netsparker Scan
	// * `NeuVector (compliance)` - NeuVector (compliance)
	// * `NeuVector (REST)` - NeuVector (REST)
	// * `Nexpose Scan` - Nexpose Scan
	// * `Nikto Scan` - Nikto Scan
	// * `Nmap Scan` - Nmap Scan
	// * `Node Security Platform Scan` - Node Security Platform Scan
	// * `NPM Audit Scan` - NPM Audit Scan
	// * `Nuclei Scan` - Nuclei Scan
	// * `Openscap Vulnerability Scan` - Openscap Vulnerability Scan
	// * `OpenVAS CSV` - OpenVAS CSV
	// * `ORT evaluated model Importer` - ORT evaluated model Importer
	// * `OssIndex Devaudit SCA Scan Importer` - OssIndex Devaudit SCA Scan Importer
	// * `Outpost24 Scan` - Outpost24 Scan
	// * `PHP Security Audit v2` - PHP Security Audit v2
	// * `PHP Symfony Security Check` - PHP Symfony Security Check
	// * `pip-audit Scan` - pip-audit Scan
	// * `PMD Scan` - PMD Scan
	// * `Popeye Scan` - Popeye Scan
	// * `PWN SAST` - PWN SAST
	// * `Qualys Infrastructure Scan (WebGUI XML)` - Qualys Infrastructure Scan (WebGUI XML)
	// * `Qualys Scan` - Qualys Scan
	// * `Qualys Webapp Scan` - Qualys Webapp Scan
	// * `Retire.js Scan` - Retire.js Scan
	// * `Risk Recon API Importer` - Risk Recon API Importer
	// * `Rubocop Scan` - Rubocop Scan
	// * `Rusty Hog Scan` - Rusty Hog Scan
	// * `SARIF` - SARIF
	// * `Scantist Scan` - Scantist Scan
	// * `Scout Suite Scan` - Scout Suite Scan
	// * `Semgrep JSON Report` - Semgrep JSON Report
	// * `SKF Scan` - SKF Scan
	// * `Snyk Scan` - Snyk Scan
	// * `Solar Appscreener Scan` - Solar Appscreener Scan
	// * `SonarQube API Import` - SonarQube API Import
	// * `SonarQube Scan` - SonarQube Scan
	// * `SonarQube Scan detailed` - SonarQube Scan detailed
	// * `Sonatype Application Scan` - Sonatype Application Scan
	// * `SpotBugs Scan` - SpotBugs Scan
	// * `SSL Labs Scan` - SSL Labs Scan
	// * `Sslscan` - Sslscan
	// * `Sslyze Scan` - Sslyze Scan
	// * `SSLyze Scan (JSON)` - SSLyze Scan (JSON)
	// * `StackHawk HawkScan` - StackHawk HawkScan
	// * `Talisman Scan` - Talisman Scan
	// * `Tenable Scan` - Tenable Scan
	// * `Terrascan Scan` - Terrascan Scan
	// * `Testssl Scan` - Testssl Scan
	// * `TFSec Scan` - TFSec Scan
	// * `Trivy Operator Scan` - Trivy Operator Scan
	// * `Trivy Scan` - Trivy Scan
	// * `Trufflehog Scan` - Trufflehog Scan
	// * `Trufflehog3 Scan` - Trufflehog3 Scan
	// * `Trustwave Fusion API Scan` - Trustwave Fusion API Scan
	// * `Trustwave Scan (CSV)` - Trustwave Scan (CSV)
	// * `Twistlock Image Scan` - Twistlock Image Scan
	// * `VCG Scan` - VCG Scan
	// * `Veracode Scan` - Veracode Scan
	// * `Veracode SourceClear Scan` - Veracode SourceClear Scan
	// * `Vulners` - Vulners
	// * `Wapiti Scan` - Wapiti Scan
	// * `Wazuh` - Wazuh
	// * `WFuzz JSON report` - WFuzz JSON report
	// * `Whispers Scan` - Whispers Scan
	// * `WhiteHat Sentinel` - WhiteHat Sentinel
	// * `Whitesource Scan` - Whitesource Scan
	// * `Wpscan` - Wpscan
	// * `Xanitizer Scan` - Xanitizer Scan
	// * `Yarn Audit Scan` - Yarn Audit Scan
	// * `ZAP Scan` - ZAP Scan
	ScanType ImportScanScanType `json:"scan_type"`

	// Service A service is a self-contained piece of functionality within a Product. This is an optional field which is used in deduplication and closing of old findings when set. This affects the whole engagement/product depending on your deduplication scope.
	Service *string `json:"service,omitempty"`

	// SourceCodeManagementUri Resource link to source code
	SourceCodeManagementUri *string           `json:"source_code_management_uri,omitempty"`
	Statistics              *ImportStatistics `json:"statistics,omitempty"`

	// Tags Add tags that help describe this scan.
	Tags      *[]string `json:"tags,omitempty"`
	Test      *int      `json:"test,omitempty"`
	TestId    *int      `json:"test_id,omitempty"`
	TestTitle *string   `json:"test_title,omitempty"`

	// Verified Override the verified setting from the tool.
	Verified bool `json:"verified"`

	// Version Version that was scanned.
	Version *string `json:"version,omitempty"`
}

// ImportScanGroupBy Choose an option to automatically group new findings by the chosen option.
//
// * `component_name` - Component Name
// * `component_name+component_version` - Component Name + Version
// * `file_path` - File path
// * `finding_title` - Finding Title
type ImportScanGroupBy string

// ImportScanMinimumSeverity Minimum severity level to be imported
//
// * `Info` - Info
// * `Low` - Low
// * `Medium` - Medium
// * `High` - High
// * `Critical` - Critical
type ImportScanMinimumSeverity string

// ImportScanScanType * `Acunetix Scan` - Acunetix Scan
// * `Acunetix360 Scan` - Acunetix360 Scan
// * `Anchore Engine Scan` - Anchore Engine Scan
// * `Anchore Enterprise Policy Check` - Anchore Enterprise Policy Check
// * `Anchore Grype` - Anchore Grype
// * `AnchoreCTL Policies Report` - AnchoreCTL Policies Report
// * `AnchoreCTL Vuln Report` - AnchoreCTL Vuln Report
// * `AppSpider Scan` - AppSpider Scan
// * `Aqua Scan` - Aqua Scan
// * `Arachni Scan` - Arachni Scan
// * `AuditJS Scan` - AuditJS Scan
// * `AWS Prowler Scan` - AWS Prowler Scan
// * `AWS Prowler V3` - AWS Prowler V3
// * `AWS Scout2 Scan` - AWS Scout2 Scan
// * `AWS Security Finding Format (ASFF) Scan` - AWS Security Finding Format (ASFF) Scan
// * `AWS Security Hub Scan` - AWS Security Hub Scan
// * `Azure Security Center Recommendations Scan` - Azure Security Center Recommendations Scan
// * `Bandit Scan` - Bandit Scan
// * `BlackDuck API` - BlackDuck API
// * `Blackduck Component Risk` - Blackduck Component Risk
// * `Blackduck Hub Scan` - Blackduck Hub Scan
// * `Brakeman Scan` - Brakeman Scan
// * `Bugcrowd API Import` - Bugcrowd API Import
// * `BugCrowd Scan` - BugCrowd Scan
// * `Bundler-Audit Scan` - Bundler-Audit Scan
// * `Burp Enterprise Scan` - Burp Enterprise Scan
// * `Burp GraphQL API` - Burp GraphQL API
// * `Burp REST API` - Burp REST API
// * `Burp Scan` - Burp Scan
// * `CargoAudit Scan` - CargoAudit Scan
// * `Checkmarx OSA` - Checkmarx OSA
// * `Checkmarx Scan` - Checkmarx Scan
// * `Checkmarx Scan detailed` - Checkmarx Scan detailed
// * `Checkov Scan` - Checkov Scan
// * `Clair Klar Scan` - Clair Klar Scan
// * `Clair Scan` - Clair Scan
// * `Cloudsploit Scan` - Cloudsploit Scan
// * `Cobalt.io API Import` - Cobalt.io API Import
// * `Cobalt.io Scan` - Cobalt.io Scan
// * `Codechecker Report native` - Codechecker Report native
// * `Contrast Scan` - Contrast Scan
// * `Coverity API` - Coverity API
// * `Crashtest Security JSON File` - Crashtest Security JSON File
// * `Crashtest Security XML File` - Crashtest Security XML File
// * `CredScan Scan` - CredScan Scan
// * `CycloneDX Scan` - CycloneDX Scan
// * `DawnScanner Scan` - DawnScanner Scan
// * `Dependency Check Scan` - Dependency Check Scan
// * `Dependency Track Finding Packaging Format (FPF) Export` - Dependency Track Finding Packaging Format (FPF) Export
// * `Detect-secrets Scan` - Detect-secrets Scan
// * `docker-bench-security Scan` - docker-bench-security Scan
// * `Dockle Scan` - Dockle Scan
// * `DrHeader JSON Importer` - DrHeader JSON Importer
// * `DSOP Scan` - DSOP Scan
// * `Edgescan Scan` - Edgescan Scan
// * `ESLint Scan` - ESLint Scan
// * `Fortify Scan` - Fortify Scan
// * `Generic Findings Import` - Generic Findings Import
// * `Ggshield Scan` - Ggshield Scan
// * `Github Vulnerability Scan` - Github Vulnerability Scan
// * `GitLab API Fuzzing Report Scan` - GitLab API Fuzzing Report Scan
// * `GitLab Container Scan` - GitLab Container Scan
// * `GitLab DAST Report` - GitLab DAST Report
// * `GitLab Dependency Scanning Report` - GitLab Dependency Scanning Report
// * `GitLab SAST Report` - GitLab SAST Report
// * `GitLab Secret Detection Report` - GitLab Secret Detection Report
// * `Gitleaks Scan` - Gitleaks Scan
// * `Gosec Scanner` - Gosec Scanner
// * `Govulncheck Scanner` - Govulncheck Scanner
// * `HackerOne Cases` - HackerOne Cases
// * `Hadolint Dockerfile check` - Hadolint Dockerfile check
// * `Harbor Vulnerability Scan` - Harbor Vulnerability Scan
// * `Horusec Scan` - Horusec Scan
// * `HuskyCI Report` - HuskyCI Report
// * `Hydra Scan` - Hydra Scan
// * `IBM AppScan DAST` - IBM AppScan DAST
// * `Immuniweb Scan` - Immuniweb Scan
// * `IntSights Report` - IntSights Report
// * `JFrog Xray API Summary Artifact Scan` - JFrog Xray API Summary Artifact Scan
// * `JFrog Xray Scan` - JFrog Xray Scan
// * `JFrog Xray Unified Scan` - JFrog Xray Unified Scan
// * `KICS Scan` - KICS Scan
// * `Kiuwan Scan` - Kiuwan Scan
// * `kube-bench Scan` - kube-bench Scan
// * `Meterian Scan` - Meterian Scan
// * `Microfocus Webinspect Scan` - Microfocus Webinspect Scan
// * `MobSF Scan` - MobSF Scan
// * `Mobsfscan Scan` - Mobsfscan Scan
// * `Mozilla Observatory Scan` - Mozilla Observatory Scan
// * `Netsparker Scan` - Netsparker Scan
// * `NeuVector (compliance)` - NeuVector (compliance)
// * `NeuVector (REST)` - NeuVector (REST)
// * `Nexpose Scan` - Nexpose Scan
// * `Nikto Scan` - Nikto Scan
// * `Nmap Scan` - Nmap Scan
// * `Node Security Platform Scan` - Node Security Platform Scan
// * `NPM Audit Scan` - NPM Audit Scan
// * `Nuclei Scan` - Nuclei Scan
// * `Openscap Vulnerability Scan` - Openscap Vulnerability Scan
// * `OpenVAS CSV` - OpenVAS CSV
// * `ORT evaluated model Importer` - ORT evaluated model Importer
// * `OssIndex Devaudit SCA Scan Importer` - OssIndex Devaudit SCA Scan Importer
// * `Outpost24 Scan` - Outpost24 Scan
// * `PHP Security Audit v2` - PHP Security Audit v2
// * `PHP Symfony Security Check` - PHP Symfony Security Check
// * `pip-audit Scan` - pip-audit Scan
// * `PMD Scan` - PMD Scan
// * `Popeye Scan` - Popeye Scan
// * `PWN SAST` - PWN SAST
// * `Qualys Infrastructure Scan (WebGUI XML)` - Qualys Infrastructure Scan (WebGUI XML)
// * `Qualys Scan` - Qualys Scan
// * `Qualys Webapp Scan` - Qualys Webapp Scan
// * `Retire.js Scan` - Retire.js Scan
// * `Risk Recon API Importer` - Risk Recon API Importer
// * `Rubocop Scan` - Rubocop Scan
// * `Rusty Hog Scan` - Rusty Hog Scan
// * `SARIF` - SARIF
// * `Scantist Scan` - Scantist Scan
// * `Scout Suite Scan` - Scout Suite Scan
// * `Semgrep JSON Report` - Semgrep JSON Report
// * `SKF Scan` - SKF Scan
// * `Snyk Scan` - Snyk Scan
// * `Solar Appscreener Scan` - Solar Appscreener Scan
// * `SonarQube API Import` - SonarQube API Import
// * `SonarQube Scan` - SonarQube Scan
// * `SonarQube Scan detailed` - SonarQube Scan detailed
// * `Sonatype Application Scan` - Sonatype Application Scan
// * `SpotBugs Scan` - SpotBugs Scan
// * `SSL Labs Scan` - SSL Labs Scan
// * `Sslscan` - Sslscan
// * `Sslyze Scan` - Sslyze Scan
// * `SSLyze Scan (JSON)` - SSLyze Scan (JSON)
// * `StackHawk HawkScan` - StackHawk HawkScan
// * `Talisman Scan` - Talisman Scan
// * `Tenable Scan` - Tenable Scan
// * `Terrascan Scan` - Terrascan Scan
// * `Testssl Scan` - Testssl Scan
// * `TFSec Scan` - TFSec Scan
// * `Trivy Operator Scan` - Trivy Operator Scan
// * `Trivy Scan` - Trivy Scan
// * `Trufflehog Scan` - Trufflehog Scan
// * `Trufflehog3 Scan` - Trufflehog3 Scan
// * `Trustwave Fusion API Scan` - Trustwave Fusion API Scan
// * `Trustwave Scan (CSV)` - Trustwave Scan (CSV)
// * `Twistlock Image Scan` - Twistlock Image Scan
// * `VCG Scan` - VCG Scan
// * `Veracode Scan` - Veracode Scan
// * `Veracode SourceClear Scan` - Veracode SourceClear Scan
// * `Vulners` - Vulners
// * `Wapiti Scan` - Wapiti Scan
// * `Wazuh` - Wazuh
// * `WFuzz JSON report` - WFuzz JSON report
// * `Whispers Scan` - Whispers Scan
// * `WhiteHat Sentinel` - WhiteHat Sentinel
// * `Whitesource Scan` - Whitesource Scan
// * `Wpscan` - Wpscan
// * `Xanitizer Scan` - Xanitizer Scan
// * `Yarn Audit Scan` - Yarn Audit Scan
// * `ZAP Scan` - ZAP Scan
type ImportScanScanType string

// ImportScanRequest defines model for ImportScanRequest.
type ImportScanRequest struct {
	// Active Override the active setting from the tool.
	Active               bool  `json:"active"`
	ApiScanConfiguration *int  `json:"api_scan_configuration"`
	AutoCreateContext    *bool `json:"auto_create_context,omitempty"`

	// BranchTag Branch or Tag that was scanned.
	BranchTag *string `json:"branch_tag,omitempty"`

	// BuildId ID of the build that was scanned.
	BuildId *string `json:"build_id,omitempty"`

	// CloseOldFindings Select if old findings no longer present in the report get closed as mitigated when importing. If service has been set, only the findings for this service will be closed.
	CloseOldFindings *bool `json:"close_old_findings,omitempty"`

	// CloseOldFindingsProductScope Select if close_old_findings applies to all findings of the same type in the product. By default, it is false meaning that only old findings of the same type in the engagement are in scope.
	CloseOldFindingsProductScope *bool `json:"close_old_findings_product_scope,omitempty"`

	// CommitHash Commit that was scanned.
	CommitHash *string `json:"commit_hash,omitempty"`

	// CreateFindingGroupsForAllFindings If set to false, finding groups will only be created when there is more than one grouped finding
	CreateFindingGroupsForAllFindings *bool `json:"create_finding_groups_for_all_findings,omitempty"`
	DeduplicationOnEngagement         *bool `json:"deduplication_on_engagement,omitempty"`

	// EndpointToAdd The IP address, host name or full URL. It must be valid
	EndpointToAdd *int `json:"endpoint_to_add,omitempty"`
	Engagement    *int `json:"engagement,omitempty"`

	// EngagementEndDate End Date for Engagement. Default is current time + 365 days. Required format year-month-day
	EngagementEndDate *openapi_types.Date `json:"engagement_end_date,omitempty"`
	EngagementName    *string             `json:"engagement_name,omitempty"`
	Environment       *string             `json:"environment,omitempty"`
	File              *openapi_types.File `json:"file,omitempty"`

	// GroupBy Choose an option to automatically group new findings by the chosen option.
	//
	// * `component_name` - Component Name
	// * `component_name+component_version` - Component Name + Version
	// * `file_path` - File path
	// * `finding_title` - Finding Title
	GroupBy *ImportScanRequestGroupBy `json:"group_by,omitempty"`
	Lead    *int                      `json:"lead"`

	// MinimumSeverity Minimum severity level to be imported
	//
	// * `Info` - Info
	// * `Low` - Low
	// * `Medium` - Medium
	// * `High` - High
	// * `Critical` - Critical
	MinimumSeverity *ImportScanRequestMinimumSeverity `json:"minimum_severity,omitempty"`
	ProductName     *string                           `json:"product_name,omitempty"`
	ProductTypeName *string                           `json:"product_type_name,omitempty"`
	PushToJira      *bool                             `json:"push_to_jira,omitempty"`

	// ScanDate Scan completion date will be used on all findings.
	ScanDate *openapi_types.Date `json:"scan_date,omitempty"`

	// ScanType * `Acunetix Scan` - Acunetix Scan
	// * `Acunetix360 Scan` - Acunetix360 Scan
	// * `Anchore Engine Scan` - Anchore Engine Scan
	// * `Anchore Enterprise Policy Check` - Anchore Enterprise Policy Check
	// * `Anchore Grype` - Anchore Grype
	// * `AnchoreCTL Policies Report` - AnchoreCTL Policies Report
	// * `AnchoreCTL Vuln Report` - AnchoreCTL Vuln Report
	// * `AppSpider Scan` - AppSpider Scan
	// * `Aqua Scan` - Aqua Scan
	// * `Arachni Scan` - Arachni Scan
	// * `AuditJS Scan` - AuditJS Scan
	// * `AWS Prowler Scan` - AWS Prowler Scan
	// * `AWS Prowler V3` - AWS Prowler V3
	// * `AWS Scout2 Scan` - AWS Scout2 Scan
	// * `AWS Security Finding Format (ASFF) Scan` - AWS Security Finding Format (ASFF) Scan
	// * `AWS Security Hub Scan` - AWS Security Hub Scan
	// * `Azure Security Center Recommendations Scan` - Azure Security Center Recommendations Scan
	// * `Bandit Scan` - Bandit Scan
	// * `BlackDuck API` - BlackDuck API
	// * `Blackduck Component Risk` - Blackduck Component Risk
	// * `Blackduck Hub Scan` - Blackduck Hub Scan
	// * `Brakeman Scan` - Brakeman Scan
	// * `Bugcrowd API Import` - Bugcrowd API Import
	// * `BugCrowd Scan` - BugCrowd Scan
	// * `Bundler-Audit Scan` - Bundler-Audit Scan
	// * `Burp Enterprise Scan` - Burp Enterprise Scan
	// * `Burp GraphQL API` - Burp GraphQL API
	// * `Burp REST API` - Burp REST API
	// * `Burp Scan` - Burp Scan
	// * `CargoAudit Scan` - CargoAudit Scan
	// * `Checkmarx OSA` - Checkmarx OSA
	// * `Checkmarx Scan` - Checkmarx Scan
	// * `Checkmarx Scan detailed` - Checkmarx Scan detailed
	// * `Checkov Scan` - Checkov Scan
	// * `Clair Klar Scan` - Clair Klar Scan
	// * `Clair Scan` - Clair Scan
	// * `Cloudsploit Scan` - Cloudsploit Scan
	// * `Cobalt.io API Import` - Cobalt.io API Import
	// * `Cobalt.io Scan` - Cobalt.io Scan
	// * `Codechecker Report native` - Codechecker Report native
	// * `Contrast Scan` - Contrast Scan
	// * `Coverity API` - Coverity API
	// * `Crashtest Security JSON File` - Crashtest Security JSON File
	// * `Crashtest Security XML File` - Crashtest Security XML File
	// * `CredScan Scan` - CredScan Scan
	// * `CycloneDX Scan` - CycloneDX Scan
	// * `DawnScanner Scan` - DawnScanner Scan
	// * `Dependency Check Scan` - Dependency Check Scan
	// * `Dependency Track Finding Packaging Format (FPF) Export` - Dependency Track Finding Packaging Format (FPF) Export
	// * `Detect-secrets Scan` - Detect-secrets Scan
	// * `docker-bench-security Scan` - docker-bench-security Scan
	// * `Dockle Scan` - Dockle Scan
	// * `DrHeader JSON Importer` - DrHeader JSON Importer
	// * `DSOP Scan` - DSOP Scan
	// * `Edgescan Scan` - Edgescan Scan
	// * `ESLint Scan` - ESLint Scan
	// * `Fortify Scan` - Fortify Scan
	// * `Generic Findings Import` - Generic Findings Import
	// * `Ggshield Scan` - Ggshield Scan
	// * `Github Vulnerability Scan` - Github Vulnerability Scan
	// * `GitLab API Fuzzing Report Scan` - GitLab API Fuzzing Report Scan
	// * `GitLab Container Scan` - GitLab Container Scan
	// * `GitLab DAST Report` - GitLab DAST Report
	// * `GitLab Dependency Scanning Report` - GitLab Dependency Scanning Report
	// * `GitLab SAST Report` - GitLab SAST Report
	// * `GitLab Secret Detection Report` - GitLab Secret Detection Report
	// * `Gitleaks Scan` - Gitleaks Scan
	// * `Gosec Scanner` - Gosec Scanner
	// * `Govulncheck Scanner` - Govulncheck Scanner
	// * `HackerOne Cases` - HackerOne Cases
	// * `Hadolint Dockerfile check` - Hadolint Dockerfile check
	// * `Harbor Vulnerability Scan` - Harbor Vulnerability Scan
	// * `Horusec Scan` - Horusec Scan
	// * `HuskyCI Report` - HuskyCI Report
	// * `Hydra Scan` - Hydra Scan
	// * `IBM AppScan DAST` - IBM AppScan DAST
	// * `Immuniweb Scan` - Immuniweb Scan
	// * `IntSights Report` - IntSights Report
	// * `JFrog Xray API Summary Artifact Scan` - JFrog Xray API Summary Artifact Scan
	// * `JFrog Xray Scan` - JFrog Xray Scan
	// * `JFrog Xray Unified Scan` - JFrog Xray Unified Scan
	// * `KICS Scan` - KICS Scan
	// * `Kiuwan Scan` - Kiuwan Scan
	// * `kube-bench Scan` - kube-bench Scan
	// * `Meterian Scan` - Meterian Scan
	// * `Microfocus Webinspect Scan` - Microfocus Webinspect Scan
	// * `MobSF Scan` - MobSF Scan
	// * `Mobsfscan Scan` - Mobsfscan Scan
	// * `Mozilla Observatory Scan` - Mozilla Observatory Scan
	// * `Netsparker Scan` - Netsparker Scan
	// * `NeuVector (compliance)` - NeuVector (compliance)
	// * `NeuVector (REST)` - NeuVector (REST)
	// * `Nexpose Scan` - Nexpose Scan
	// * `Nikto Scan` - Nikto Scan
	// * `Nmap Scan` - Nmap Scan
	// * `Node Security Platform Scan` - Node Security Platform Scan
	// * `NPM Audit Scan` - NPM Audit Scan
	// * `Nuclei Scan` - Nuclei Scan
	// * `Openscap Vulnerability Scan` - Openscap Vulnerability Scan
	// * `OpenVAS CSV` - OpenVAS CSV
	// * `ORT evaluated model Importer` - ORT evaluated model Importer
	// * `OssIndex Devaudit SCA Scan Importer` - OssIndex Devaudit SCA Scan Importer
	// * `Outpost24 Scan` - Outpost24 Scan
	// * `PHP Security Audit v2` - PHP Security Audit v2
	// * `PHP Symfony Security Check` - PHP Symfony Security Check
	// * `pip-audit Scan` - pip-audit Scan
	// * `PMD Scan` - PMD Scan
	// * `Popeye Scan` - Popeye Scan
	// * `PWN SAST` - PWN SAST
	// * `Qualys Infrastructure Scan (WebGUI XML)` - Qualys Infrastructure Scan (WebGUI XML)
	// * `Qualys Scan` - Qualys Scan
	// * `Qualys Webapp Scan` - Qualys Webapp Scan
	// * `Retire.js Scan` - Retire.js Scan
	// * `Risk Recon API Importer` - Risk Recon API Importer
	// * `Rubocop Scan` - Rubocop Scan
	// * `Rusty Hog Scan` - Rusty Hog Scan
	// * `SARIF` - SARIF
	// * `Scantist Scan` - Scantist Scan
	// * `Scout Suite Scan` - Scout Suite Scan
	// * `Semgrep JSON Report` - Semgrep JSON Report
	// * `SKF Scan` - SKF Scan
	// * `Snyk Scan` - Snyk Scan
	// * `Solar Appscreener Scan` - Solar Appscreener Scan
	// * `SonarQube API Import` - SonarQube API Import
	// * `SonarQube Scan` - SonarQube Scan
	// * `SonarQube Scan detailed` - SonarQube Scan detailed
	// * `Sonatype Application Scan` - Sonatype Application Scan
	// * `SpotBugs Scan` - SpotBugs Scan
	// * `SSL Labs Scan` - SSL Labs Scan
	// * `Sslscan` - Sslscan
	// * `Sslyze Scan` - Sslyze Scan
	// * `SSLyze Scan (JSON)` - SSLyze Scan (JSON)
	// * `StackHawk HawkScan` - StackHawk HawkScan
	// * `Talisman Scan` - Talisman Scan
	// * `Tenable Scan` - Tenable Scan
	// * `Terrascan Scan` - Terrascan Scan
	// * `Testssl Scan` - Testssl Scan
	// * `TFSec Scan` - TFSec Scan
	// * `Trivy Operator Scan` - Trivy Operator Scan
	// * `Trivy Scan` - Trivy Scan
	// * `Trufflehog Scan` - Trufflehog Scan
	// * `Trufflehog3 Scan` - Trufflehog3 Scan
	// * `Trustwave Fusion API Scan` - Trustwave Fusion API Scan
	// * `Trustwave Scan (CSV)` - Trustwave Scan (CSV)
	// * `Twistlock Image Scan` - Twistlock Image Scan
	// * `VCG Scan` - VCG Scan
	// * `Veracode Scan` - Veracode Scan
	// * `Veracode SourceClear Scan` - Veracode SourceClear Scan
	// * `Vulners` - Vulners
	// * `Wapiti Scan` - Wapiti Scan
	// * `Wazuh` - Wazuh
	// * `WFuzz JSON report` - WFuzz JSON report
	// * `Whispers Scan` - Whispers Scan
	// * `WhiteHat Sentinel` - WhiteHat Sentinel
	// * `Whitesource Scan` - Whitesource Scan
	// * `Wpscan` - Wpscan
	// * `Xanitizer Scan` - Xanitizer Scan
	// * `Yarn Audit Scan` - Yarn Audit Scan
	// * `ZAP Scan` - ZAP Scan
	ScanType ImportScanRequestScanType `json:"scan_type"`

	// Service A service is a self-contained piece of functionality within a Product. This is an optional field which is used in deduplication and closing of old findings when set. This affects the whole engagement/product depending on your deduplication scope.
	Service *string `json:"service,omitempty"`

	// SourceCodeManagementUri Resource link to source code
	SourceCodeManagementUri *string `json:"source_code_management_uri,omitempty"`

	// Tags Add tags that help describe this scan.
	Tags      *[]string `json:"tags,omitempty"`
	TestTitle *string   `json:"test_title,omitempty"`

	// Verified Override the verified setting from the tool.
	Verified bool `json:"verified"`

	// Version Version that was scanned.
	Version *string `json:"version,omitempty"`
}

// ImportScanRequestGroupBy Choose an option to automatically group new findings by the chosen option.
//
// * `component_name` - Component Name
// * `component_name+component_version` - Component Name + Version
// * `file_path` - File path
// * `finding_title` - Finding Title
type ImportScanRequestGroupBy string

// ImportScanRequestMinimumSeverity Minimum severity level to be imported
//
// * `Info` - Info
// * `Low` - Low
// * `Medium` - Medium
// * `High` - High
// * `Critical` - Critical
type ImportScanRequestMinimumSeverity string

// ImportScanRequestScanType * `Acunetix Scan` - Acunetix Scan
// * `Acunetix360 Scan` - Acunetix360 Scan
// * `Anchore Engine Scan` - Anchore Engine Scan
// * `Anchore Enterprise Policy Check` - Anchore Enterprise Policy Check
// * `Anchore Grype` - Anchore Grype
// * `AnchoreCTL Policies Report` - AnchoreCTL Policies Report
// * `AnchoreCTL Vuln Report` - AnchoreCTL Vuln Report
// * `AppSpider Scan` - AppSpider Scan
// * `Aqua Scan` - Aqua Scan
// * `Arachni Scan` - Arachni Scan
// * `AuditJS Scan` - AuditJS Scan
// * `AWS Prowler Scan` - AWS Prowler Scan
// * `AWS Prowler V3` - AWS Prowler V3
// * `AWS Scout2 Scan` - AWS Scout2 Scan
// * `AWS Security Finding Format (ASFF) Scan` - AWS Security Finding Format (ASFF) Scan
// * `AWS Security Hub Scan` - AWS Security Hub Scan
// * `Azure Security Center Recommendations Scan` - Azure Security Center Recommendations Scan
// * `Bandit Scan` - Bandit Scan
// * `BlackDuck API` - BlackDuck API
// * `Blackduck Component Risk` - Blackduck Component Risk
// * `Blackduck Hub Scan` - Blackduck Hub Scan
// * `Brakeman Scan` - Brakeman Scan
// * `Bugcrowd API Import` - Bugcrowd API Import
// * `BugCrowd Scan` - BugCrowd Scan
// * `Bundler-Audit Scan` - Bundler-Audit Scan
// * `Burp Enterprise Scan` - Burp Enterprise Scan
// * `Burp GraphQL API` - Burp GraphQL API
// * `Burp REST API` - Burp REST API
// * `Burp Scan` - Burp Scan
// * `CargoAudit Scan` - CargoAudit Scan
// * `Checkmarx OSA` - Checkmarx OSA
// * `Checkmarx Scan` - Checkmarx Scan
// * `Checkmarx Scan detailed` - Checkmarx Scan detailed
// * `Checkov Scan` - Checkov Scan
// * `Clair Klar Scan` - Clair Klar Scan
// * `Clair Scan` - Clair Scan
// * `Cloudsploit Scan` - Cloudsploit Scan
// * `Cobalt.io API Import` - Cobalt.io API Import
// * `Cobalt.io Scan` - Cobalt.io Scan
// * `Codechecker Report native` - Codechecker Report native
// * `Contrast Scan` - Contrast Scan
// * `Coverity API` - Coverity API
// * `Crashtest Security JSON File` - Crashtest Security JSON File
// * `Crashtest Security XML File` - Crashtest Security XML File
// * `CredScan Scan` - CredScan Scan
// * `CycloneDX Scan` - CycloneDX Scan
// * `DawnScanner Scan` - DawnScanner Scan
// * `Dependency Check Scan` - Dependency Check Scan
// * `Dependency Track Finding Packaging Format (FPF) Export` - Dependency Track Finding Packaging Format (FPF) Export
// * `Detect-secrets Scan` - Detect-secrets Scan
// * `docker-bench-security Scan` - docker-bench-security Scan
// * `Dockle Scan` - Dockle Scan
// * `DrHeader JSON Importer` - DrHeader JSON Importer
// * `DSOP Scan` - DSOP Scan
// * `Edgescan Scan` - Edgescan Scan
// * `ESLint Scan` - ESLint Scan
// * `Fortify Scan` - Fortify Scan
// * `Generic Findings Import` - Generic Findings Import
// * `Ggshield Scan` - Ggshield Scan
// * `Github Vulnerability Scan` - Github Vulnerability Scan
// * `GitLab API Fuzzing Report Scan` - GitLab API Fuzzing Report Scan
// * `GitLab Container Scan` - GitLab Container Scan
// * `GitLab DAST Report` - GitLab DAST Report
// * `GitLab Dependency Scanning Report` - GitLab Dependency Scanning Report
// * `GitLab SAST Report` - GitLab SAST Report
// * `GitLab Secret Detection Report` - GitLab Secret Detection Report
// * `Gitleaks Scan` - Gitleaks Scan
// * `Gosec Scanner` - Gosec Scanner
// * `Govulncheck Scanner` - Govulncheck Scanner
// * `HackerOne Cases` - HackerOne Cases
// * `Hadolint Dockerfile check` - Hadolint Dockerfile check
// * `Harbor Vulnerability Scan` - Harbor Vulnerability Scan
// * `Horusec Scan` - Horusec Scan
// * `HuskyCI Report` - HuskyCI Report
// * `Hydra Scan` - Hydra Scan
// * `IBM AppScan DAST` - IBM AppScan DAST
// * `Immuniweb Scan` - Immuniweb Scan
// * `IntSights Report` - IntSights Report
// * `JFrog Xray API Summary Artifact Scan` - JFrog Xray API Summary Artifact Scan
// * `JFrog Xray Scan` - JFrog Xray Scan
// * `JFrog Xray Unified Scan` - JFrog Xray Unified Scan
// * `KICS Scan` - KICS Scan
// * `Kiuwan Scan` - Kiuwan Scan
// * `kube-bench Scan` - kube-bench Scan
// * `Meterian Scan` - Meterian Scan
// * `Microfocus Webinspect Scan` - Microfocus Webinspect Scan
// * `MobSF Scan` - MobSF Scan
// * `Mobsfscan Scan` - Mobsfscan Scan
// * `Mozilla Observatory Scan` - Mozilla Observatory Scan
// * `Netsparker Scan` - Netsparker Scan
// * `NeuVector (compliance)` - NeuVector (compliance)
// * `NeuVector (REST)` - NeuVector (REST)
// * `Nexpose Scan` - Nexpose Scan
// * `Nikto Scan` - Nikto Scan
// * `Nmap Scan` - Nmap Scan
// * `Node Security Platform Scan` - Node Security Platform Scan
// * `NPM Audit Scan` - NPM Audit Scan
// * `Nuclei Scan` - Nuclei Scan
// * `Openscap Vulnerability Scan` - Openscap Vulnerability Scan
// * `OpenVAS CSV` - OpenVAS CSV
// * `ORT evaluated model Importer` - ORT evaluated model Importer
// * `OssIndex Devaudit SCA Scan Importer` - OssIndex Devaudit SCA Scan Importer
// * `Outpost24 Scan` - Outpost24 Scan
// * `PHP Security Audit v2` - PHP Security Audit v2
// * `PHP Symfony Security Check` - PHP Symfony Security Check
// * `pip-audit Scan` - pip-audit Scan
// * `PMD Scan` - PMD Scan
// * `Popeye Scan` - Popeye Scan
// * `PWN SAST` - PWN SAST
// * `Qualys Infrastructure Scan (WebGUI XML)` - Qualys Infrastructure Scan (WebGUI XML)
// * `Qualys Scan` - Qualys Scan
// * `Qualys Webapp Scan` - Qualys Webapp Scan
// * `Retire.js Scan` - Retire.js Scan
// * `Risk Recon API Importer` - Risk Recon API Importer
// * `Rubocop Scan` - Rubocop Scan
// * `Rusty Hog Scan` - Rusty Hog Scan
// * `SARIF` - SARIF
// * `Scantist Scan` - Scantist Scan
// * `Scout Suite Scan` - Scout Suite Scan
// * `Semgrep JSON Report` - Semgrep JSON Report
// * `SKF Scan` - SKF Scan
// * `Snyk Scan` - Snyk Scan
// * `Solar Appscreener Scan` - Solar Appscreener Scan
// * `SonarQube API Import` - SonarQube API Import
// * `SonarQube Scan` - SonarQube Scan
// * `SonarQube Scan detailed` - SonarQube Scan detailed
// * `Sonatype Application Scan` - Sonatype Application Scan
// * `SpotBugs Scan` - SpotBugs Scan
// * `SSL Labs Scan` - SSL Labs Scan
// * `Sslscan` - Sslscan
// * `Sslyze Scan` - Sslyze Scan
// * `SSLyze Scan (JSON)` - SSLyze Scan (JSON)
// * `StackHawk HawkScan` - StackHawk HawkScan
// * `Talisman Scan` - Talisman Scan
// * `Tenable Scan` - Tenable Scan
// * `Terrascan Scan` - Terrascan Scan
// * `Testssl Scan` - Testssl Scan
// * `TFSec Scan` - TFSec Scan
// * `Trivy Operator Scan` - Trivy Operator Scan
// * `Trivy Scan` - Trivy Scan
// * `Trufflehog Scan` - Trufflehog Scan
// * `Trufflehog3 Scan` - Trufflehog3 Scan
// * `Trustwave Fusion API Scan` - Trustwave Fusion API Scan
// * `Trustwave Scan (CSV)` - Trustwave Scan (CSV)
// * `Twistlock Image Scan` - Twistlock Image Scan
// * `VCG Scan` - VCG Scan
// * `Veracode Scan` - Veracode Scan
// * `Veracode SourceClear Scan` - Veracode SourceClear Scan
// * `Vulners` - Vulners
// * `Wapiti Scan` - Wapiti Scan
// * `Wazuh` - Wazuh
// * `WFuzz JSON report` - WFuzz JSON report
// * `Whispers Scan` - Whispers Scan
// * `WhiteHat Sentinel` - WhiteHat Sentinel
// * `Whitesource Scan` - Whitesource Scan
// * `Wpscan` - Wpscan
// * `Xanitizer Scan` - Xanitizer Scan
// * `Yarn Audit Scan` - Yarn Audit Scan
// * `ZAP Scan` - ZAP Scan
type ImportScanRequestScanType string

// ImportStatistics defines model for ImportStatistics.
type ImportStatistics struct {
	// After Finding statistics as stored in Defect Dojo after the import
	After SeverityStatusStatistics `json:"after"`

	// Before Finding statistics as stored in Defect Dojo before the import
	Before *SeverityStatusStatistics `json:"before,omitempty"`

	// Delta Finding statistics of modifications made by the reimport. Only available when TRACK_IMPORT_HISTORY hass not disabled.
	Delta *DeltaStatistics `json:"delta,omitempty"`
}

// JIRAInstance defines model for JIRAInstance.
type JIRAInstance struct {
	// AcceptedMappingResolution JIRA resolution names (comma-separated values) that maps to an Accepted Finding
	AcceptedMappingResolution *string `json:"accepted_mapping_resolution"`

	// CloseStatusKey Transition ID to Close JIRA issues, visit https://<YOUR JIRA URL>/rest/api/latest/issue/<ANY VALID ISSUE KEY>/transitions?expand=transitions.fields to find the ID for your JIRA instance
	CloseStatusKey int `json:"close_status_key"`

	// ConfigurationName Enter a name to give to this configuration
	ConfigurationName *string `json:"configuration_name,omitempty"`

	// CriticalMappingSeverity Maps to the 'Priority' field in Jira. For example: Critical
	CriticalMappingSeverity string `json:"critical_mapping_severity"`

	// DefaultIssueType You can define extra issue types in settings.py
	//
	// * `Task` - Task
	// * `Story` - Story
	// * `Epic` - Epic
	// * `Spike` - Spike
	// * `Bug` - Bug
	// * `Security` - Security
	DefaultIssueType *JIRAInstanceDefaultIssueType `json:"default_issue_type,omitempty"`

	// EpicNameId To obtain the 'Epic name id' visit https://<YOUR JIRA URL>/rest/api/2/field and search for Epic Name. Copy the number out of cf[number] and paste it here.
	EpicNameId int `json:"epic_name_id"`

	// FalsePositiveMappingResolution JIRA resolution names (comma-separated values) that maps to a False Positive Finding
	FalsePositiveMappingResolution *string `json:"false_positive_mapping_resolution"`

	// FindingJiraSync If enabled, this will sync changes to a Finding automatically to JIRA
	FindingJiraSync *bool `json:"finding_jira_sync,omitempty"`

	// FindingText Additional text that will be added to the finding in Jira. For example including how the finding was created or who to contact for more information.
	FindingText *string `json:"finding_text"`

	// GlobalJiraSlaNotification This setting can be overidden at the Product level
	GlobalJiraSlaNotification *bool `json:"global_jira_sla_notification,omitempty"`

	// HighMappingSeverity Maps to the 'Priority' field in Jira. For example: High
	HighMappingSeverity string `json:"high_mapping_severity"`
	Id                  *int   `json:"id,omitempty"`

	// InfoMappingSeverity Maps to the 'Priority' field in Jira. For example: Info
	InfoMappingSeverity string `json:"info_mapping_severity"`

	// IssueTemplateDir Choose the folder containing the Django templates used to render the JIRA issue description. These are stored in dojo/templates/issue-trackers. Leave empty to use the default jira_full templates.
	IssueTemplateDir *string `json:"issue_template_dir"`

	// LowMappingSeverity Maps to the 'Priority' field in Jira. For example: Low
	LowMappingSeverity string `json:"low_mapping_severity"`

	// MediumMappingSeverity Maps to the 'Priority' field in Jira. For example: Medium
	MediumMappingSeverity string `json:"medium_mapping_severity"`

	// OpenStatusKey Transition ID to Re-Open JIRA issues, visit https://<YOUR JIRA URL>/rest/api/latest/issue/<ANY VALID ISSUE KEY>/transitions?expand=transitions.fields to find the ID for your JIRA instance
	OpenStatusKey int `json:"open_status_key"`

	// Url For more information how to configure Jira, read the DefectDojo documentation.
	Url      string `json:"url"`
	Username string `json:"username"`
}

// JIRAInstanceDefaultIssueType You can define extra issue types in settings.py
//
// * `Task` - Task
// * `Story` - Story
// * `Epic` - Epic
// * `Spike` - Spike
// * `Bug` - Bug
// * `Security` - Security
type JIRAInstanceDefaultIssueType string

// JIRAInstanceRequest defines model for JIRAInstanceRequest.
type JIRAInstanceRequest struct {
	// AcceptedMappingResolution JIRA resolution names (comma-separated values) that maps to an Accepted Finding
	AcceptedMappingResolution *string `json:"accepted_mapping_resolution"`

	// CloseStatusKey Transition ID to Close JIRA issues, visit https://<YOUR JIRA URL>/rest/api/latest/issue/<ANY VALID ISSUE KEY>/transitions?expand=transitions.fields to find the ID for your JIRA instance
	CloseStatusKey int `json:"close_status_key"`

	// ConfigurationName Enter a name to give to this configuration
	ConfigurationName *string `json:"configuration_name,omitempty"`

	// CriticalMappingSeverity Maps to the 'Priority' field in Jira. For example: Critical
	CriticalMappingSeverity string `json:"critical_mapping_severity"`

	// DefaultIssueType You can define extra issue types in settings.py
	//
	// * `Task` - Task
	// * `Story` - Story
	// * `Epic` - Epic
	// * `Spike` - Spike
	// * `Bug` - Bug
	// * `Security` - Security
	DefaultIssueType *JIRAInstanceRequestDefaultIssueType `json:"default_issue_type,omitempty"`

	// EpicNameId To obtain the 'Epic name id' visit https://<YOUR JIRA URL>/rest/api/2/field and search for Epic Name. Copy the number out of cf[number] and paste it here.
	EpicNameId int `json:"epic_name_id"`

	// FalsePositiveMappingResolution JIRA resolution names (comma-separated values) that maps to a False Positive Finding
	FalsePositiveMappingResolution *string `json:"false_positive_mapping_resolution"`

	// FindingJiraSync If enabled, this will sync changes to a Finding automatically to JIRA
	FindingJiraSync *bool `json:"finding_jira_sync,omitempty"`

	// FindingText Additional text that will be added to the finding in Jira. For example including how the finding was created or who to contact for more information.
	FindingText *string `json:"finding_text"`

	// GlobalJiraSlaNotification This setting can be overidden at the Product level
	GlobalJiraSlaNotification *bool `json:"global_jira_sla_notification,omitempty"`

	// HighMappingSeverity Maps to the 'Priority' field in Jira. For example: High
	HighMappingSeverity string `json:"high_mapping_severity"`

	// InfoMappingSeverity Maps to the 'Priority' field in Jira. For example: Info
	InfoMappingSeverity string `json:"info_mapping_severity"`

	// IssueTemplateDir Choose the folder containing the Django templates used to render the JIRA issue description. These are stored in dojo/templates/issue-trackers. Leave empty to use the default jira_full templates.
	IssueTemplateDir *string `json:"issue_template_dir"`

	// LowMappingSeverity Maps to the 'Priority' field in Jira. For example: Low
	LowMappingSeverity string `json:"low_mapping_severity"`

	// MediumMappingSeverity Maps to the 'Priority' field in Jira. For example: Medium
	MediumMappingSeverity string `json:"medium_mapping_severity"`

	// OpenStatusKey Transition ID to Re-Open JIRA issues, visit https://<YOUR JIRA URL>/rest/api/latest/issue/<ANY VALID ISSUE KEY>/transitions?expand=transitions.fields to find the ID for your JIRA instance
	OpenStatusKey int     `json:"open_status_key"`
	Password      *string `json:"password,omitempty"`

	// Url For more information how to configure Jira, read the DefectDojo documentation.
	Url      string `json:"url"`
	Username string `json:"username"`
}

// JIRAInstanceRequestDefaultIssueType You can define extra issue types in settings.py
//
// * `Task` - Task
// * `Story` - Story
// * `Epic` - Epic
// * `Spike` - Spike
// * `Bug` - Bug
// * `Security` - Security
type JIRAInstanceRequestDefaultIssueType string

// JIRAIssue defines model for JIRAIssue.
type JIRAIssue struct {
	Engagement   *int `json:"engagement"`
	Finding      *int `json:"finding"`
	FindingGroup *int `json:"finding_group"`
	Id           *int `json:"id,omitempty"`

	// JiraChange The date the linked Jira issue was last modified.
	JiraChange *time.Time `json:"jira_change"`

	// JiraCreation The date a Jira issue was created from this finding.
	JiraCreation *time.Time `json:"jira_creation"`
	JiraId       string     `json:"jira_id"`
	JiraKey      string     `json:"jira_key"`
	JiraProject  *int       `json:"jira_project"`
	Url          *string    `json:"url,omitempty"`
}

// JIRAIssueRequest defines model for JIRAIssueRequest.
type JIRAIssueRequest struct {
	Engagement   *int `json:"engagement"`
	Finding      *int `json:"finding"`
	FindingGroup *int `json:"finding_group"`

	// JiraChange The date the linked Jira issue was last modified.
	JiraChange *time.Time `json:"jira_change"`

	// JiraCreation The date a Jira issue was created from this finding.
	JiraCreation *time.Time `json:"jira_creation"`
	JiraId       string     `json:"jira_id"`
	JiraKey      string     `json:"jira_key"`
	JiraProject  *int       `json:"jira_project"`
}

// JIRAProject defines model for JIRAProject.
type JIRAProject struct {
	AddVulnerabilityIdToJiraLabel *bool   `json:"add_vulnerability_id_to_jira_label,omitempty"`
	Component                     *string `json:"component,omitempty"`

	// CustomFields JIRA custom field JSON mapping of Id to value, e.g. {"customfield_10122": [{"name": "8.0.1"}]}
	CustomFields *map[string]interface{} `json:"custom_fields"`

	// DefaultAssignee JIRA default assignee (name). If left blank then it defaults to whatever is configured in JIRA.
	DefaultAssignee             *string `json:"default_assignee"`
	EnableEngagementEpicMapping *bool   `json:"enable_engagement_epic_mapping,omitempty"`
	Engagement                  *int    `json:"engagement"`
	Id                          *int    `json:"id,omitempty"`

	// IssueTemplateDir Choose the folder containing the Django templates used to render the JIRA issue description. These are stored in dojo/templates/issue-trackers. Leave empty to use the default jira_full templates.
	IssueTemplateDir *string `json:"issue_template_dir"`
	JiraInstance     *int    `json:"jira_instance"`

	// JiraLabels JIRA issue labels space seperated
	JiraLabels                 *string `json:"jira_labels"`
	Product                    *int    `json:"product"`
	ProductJiraSlaNotification *bool   `json:"product_jira_sla_notification,omitempty"`
	ProjectKey                 *string `json:"project_key,omitempty"`

	// PushAllIssues Automatically maintain parity with JIRA. Always create and update JIRA tickets for findings in this Product.
	PushAllIssues                        *bool `json:"push_all_issues,omitempty"`
	PushNotes                            *bool `json:"push_notes,omitempty"`
	RiskAcceptanceExpirationNotification *bool `json:"risk_acceptance_expiration_notification,omitempty"`
}

// JIRAProjectRequest defines model for JIRAProjectRequest.
type JIRAProjectRequest struct {
	AddVulnerabilityIdToJiraLabel *bool   `json:"add_vulnerability_id_to_jira_label,omitempty"`
	Component                     *string `json:"component,omitempty"`

	// CustomFields JIRA custom field JSON mapping of Id to value, e.g. {"customfield_10122": [{"name": "8.0.1"}]}
	CustomFields *map[string]interface{} `json:"custom_fields"`

	// DefaultAssignee JIRA default assignee (name). If left blank then it defaults to whatever is configured in JIRA.
	DefaultAssignee             *string `json:"default_assignee"`
	EnableEngagementEpicMapping *bool   `json:"enable_engagement_epic_mapping,omitempty"`
	Engagement                  *int    `json:"engagement"`

	// IssueTemplateDir Choose the folder containing the Django templates used to render the JIRA issue description. These are stored in dojo/templates/issue-trackers. Leave empty to use the default jira_full templates.
	IssueTemplateDir *string `json:"issue_template_dir"`
	JiraInstance     *int    `json:"jira_instance"`

	// JiraLabels JIRA issue labels space seperated
	JiraLabels                 *string `json:"jira_labels"`
	Product                    *int    `json:"product"`
	ProductJiraSlaNotification *bool   `json:"product_jira_sla_notification,omitempty"`
	ProjectKey                 *string `json:"project_key,omitempty"`

	// PushAllIssues Automatically maintain parity with JIRA. Always create and update JIRA tickets for findings in this Product.
	PushAllIssues                        *bool `json:"push_all_issues,omitempty"`
	PushNotes                            *bool `json:"push_notes,omitempty"`
	RiskAcceptanceExpirationNotification *bool `json:"risk_acceptance_expiration_notification,omitempty"`
}

// Language defines model for Language.
type Language struct {
	Blank    *int       `json:"blank"`
	Code     *int       `json:"code"`
	Comment  *int       `json:"comment"`
	Created  *time.Time `json:"created,omitempty"`
	Files    *int       `json:"files"`
	Id       *int       `json:"id,omitempty"`
	Language int        `json:"language"`
	Prefetch *struct {
		Language *map[string]LanguageType `json:"language,omitempty"`
		Product  *map[string]Product      `json:"product,omitempty"`
		User     *map[string]UserStub     `json:"user,omitempty"`
	} `json:"prefetch,omitempty"`
	Product int  `json:"product"`
	User    *int `json:"user"`
}

// LanguageRequest defines model for LanguageRequest.
type LanguageRequest struct {
	Blank    *int `json:"blank"`
	Code     *int `json:"code"`
	Comment  *int `json:"comment"`
	Files    *int `json:"files"`
	Language int  `json:"language"`
	Product  int  `json:"product"`
	User     *int `json:"user"`
}

// LanguageType defines model for LanguageType.
type LanguageType struct {
	Color    *string `json:"color"`
	Id       *int    `json:"id,omitempty"`
	Language string  `json:"language"`
}

// LanguageTypeRequest defines model for LanguageTypeRequest.
type LanguageTypeRequest struct {
	Color    *string `json:"color"`
	Language string  `json:"language"`
}

// Meta defines model for Meta.
type Meta struct {
	Endpoint *int   `json:"endpoint"`
	Finding  *int   `json:"finding"`
	Id       *int   `json:"id,omitempty"`
	Name     string `json:"name"`
	Prefetch *struct {
		Endpoint *map[string]Endpoint `json:"endpoint,omitempty"`
		Finding  *map[string]Finding  `json:"finding,omitempty"`
		Product  *map[string]Product  `json:"product,omitempty"`
	} `json:"prefetch,omitempty"`
	Product *int   `json:"product"`
	Value   string `json:"value"`
}

// MetaRequest defines model for MetaRequest.
type MetaRequest struct {
	Endpoint *int   `json:"endpoint"`
	Finding  *int   `json:"finding"`
	Name     string `json:"name"`
	Product  *int   `json:"product"`
	Value    string `json:"value"`
}

// NetworkLocations defines model for NetworkLocations.
type NetworkLocations struct {
	Id *int `json:"id,omitempty"`

	// Location Location of network testing: Examples: VPN, Internet or Internal.
	Location string `json:"location"`
}

// NetworkLocationsRequest defines model for NetworkLocationsRequest.
type NetworkLocationsRequest struct {
	// Location Location of network testing: Examples: VPN, Internet or Internal.
	Location string `json:"location"`
}

// Note defines model for Note.
type Note struct {
	Author   *UserStub      `json:"author,omitempty"`
	Date     *time.Time     `json:"date,omitempty"`
	EditTime *time.Time     `json:"edit_time"`
	Edited   *bool          `json:"edited,omitempty"`
	Editor   *UserStub      `json:"editor"`
	Entry    string         `json:"entry"`
	History  *[]NoteHistory `json:"history,omitempty"`
	Id       *int           `json:"id,omitempty"`
	NoteType *NoteType      `json:"note_type,omitempty"`
	Private  *bool          `json:"private,omitempty"`
}

// NoteHistory defines model for NoteHistory.
type NoteHistory struct {
	CurrentEditor *UserStub  `json:"current_editor,omitempty"`
	Data          string     `json:"data"`
	Id            *int       `json:"id,omitempty"`
	NoteType      *NoteType  `json:"note_type,omitempty"`
	Time          *time.Time `json:"time"`
}

// NoteRequest defines model for NoteRequest.
type NoteRequest struct {
	Edited  *bool  `json:"edited,omitempty"`
	Entry   string `json:"entry"`
	Private *bool  `json:"private,omitempty"`
}

// NoteType defines model for NoteType.
type NoteType struct {
	Description string `json:"description"`
	Id          *int   `json:"id,omitempty"`
	IsActive    *bool  `json:"is_active,omitempty"`
	IsMandatory *bool  `json:"is_mandatory,omitempty"`
	IsSingle    *bool  `json:"is_single,omitempty"`
	Name        string `json:"name"`
}

// NoteTypeRequest defines model for NoteTypeRequest.
type NoteTypeRequest struct {
	Description string `json:"description"`
	IsActive    *bool  `json:"is_active,omitempty"`
	IsMandatory *bool  `json:"is_mandatory,omitempty"`
	IsSingle    *bool  `json:"is_single,omitempty"`
	Name        string `json:"name"`
}

// Notifications defines model for Notifications.
type Notifications struct {
	AutoCloseEngagement *[]NotificationsAutoCloseEngagement `json:"auto_close_engagement,omitempty"`
	CloseEngagement     *[]NotificationsCloseEngagement     `json:"close_engagement,omitempty"`
	CodeReview          *[]NotificationsCodeReview          `json:"code_review,omitempty"`
	EngagementAdded     *[]NotificationsEngagementAdded     `json:"engagement_added,omitempty"`
	Id                  *int                                `json:"id,omitempty"`
	JiraUpdate          *[]NotificationsJiraUpdate          `json:"jira_update,omitempty"`
	Other               *[]NotificationsOther               `json:"other,omitempty"`
	Prefetch            *struct {
		Product *map[string]Product  `json:"product,omitempty"`
		User    *map[string]UserStub `json:"user,omitempty"`
	} `json:"prefetch,omitempty"`
	Product                  *int                                     `json:"product"`
	ProductAdded             *[]NotificationsProductAdded             `json:"product_added,omitempty"`
	ProductTypeAdded         *[]NotificationsProductTypeAdded         `json:"product_type_added,omitempty"`
	ReviewRequested          *[]NotificationsReviewRequested          `json:"review_requested,omitempty"`
	RiskAcceptanceExpiration *[]NotificationsRiskAcceptanceExpiration `json:"risk_acceptance_expiration,omitempty"`
	ScanAdded                *[]NotificationsScanAdded                `json:"scan_added,omitempty"`
	SlaBreach                *[]NotificationsSlaBreach                `json:"sla_breach,omitempty"`
	StaleEngagement          *[]NotificationsStaleEngagement          `json:"stale_engagement,omitempty"`
	Template                 *bool                                    `json:"template,omitempty"`
	TestAdded                *[]NotificationsTestAdded                `json:"test_added,omitempty"`
	UpcomingEngagement       *[]NotificationsUpcomingEngagement       `json:"upcoming_engagement,omitempty"`
	User                     *int                                     `json:"user"`
	UserMentioned            *[]NotificationsUserMentioned            `json:"user_mentioned,omitempty"`
}

// NotificationsAutoCloseEngagement * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type NotificationsAutoCloseEngagement string

// NotificationsCloseEngagement * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type NotificationsCloseEngagement string

// NotificationsCodeReview * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type NotificationsCodeReview string

// NotificationsEngagementAdded * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type NotificationsEngagementAdded string

// NotificationsJiraUpdate * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type NotificationsJiraUpdate string

// NotificationsOther * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type NotificationsOther string

// NotificationsProductAdded * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type NotificationsProductAdded string

// NotificationsProductTypeAdded * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type NotificationsProductTypeAdded string

// NotificationsReviewRequested * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type NotificationsReviewRequested string

// NotificationsRiskAcceptanceExpiration * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type NotificationsRiskAcceptanceExpiration string

// NotificationsScanAdded * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type NotificationsScanAdded string

// NotificationsSlaBreach * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type NotificationsSlaBreach string

// NotificationsStaleEngagement * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type NotificationsStaleEngagement string

// NotificationsTestAdded * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type NotificationsTestAdded string

// NotificationsUpcomingEngagement * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type NotificationsUpcomingEngagement string

// NotificationsUserMentioned * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type NotificationsUserMentioned string

// NotificationsRequest defines model for NotificationsRequest.
type NotificationsRequest struct {
	AutoCloseEngagement      *[]NotificationsRequestAutoCloseEngagement      `json:"auto_close_engagement,omitempty"`
	CloseEngagement          *[]NotificationsRequestCloseEngagement          `json:"close_engagement,omitempty"`
	CodeReview               *[]NotificationsRequestCodeReview               `json:"code_review,omitempty"`
	EngagementAdded          *[]NotificationsRequestEngagementAdded          `json:"engagement_added,omitempty"`
	JiraUpdate               *[]NotificationsRequestJiraUpdate               `json:"jira_update,omitempty"`
	Other                    *[]NotificationsRequestOther                    `json:"other,omitempty"`
	Product                  *int                                            `json:"product"`
	ProductAdded             *[]NotificationsRequestProductAdded             `json:"product_added,omitempty"`
	ProductTypeAdded         *[]NotificationsRequestProductTypeAdded         `json:"product_type_added,omitempty"`
	ReviewRequested          *[]NotificationsRequestReviewRequested          `json:"review_requested,omitempty"`
	RiskAcceptanceExpiration *[]NotificationsRequestRiskAcceptanceExpiration `json:"risk_acceptance_expiration,omitempty"`
	ScanAdded                *[]NotificationsRequestScanAdded                `json:"scan_added,omitempty"`
	SlaBreach                *[]NotificationsRequestSlaBreach                `json:"sla_breach,omitempty"`
	StaleEngagement          *[]NotificationsRequestStaleEngagement          `json:"stale_engagement,omitempty"`
	Template                 *bool                                           `json:"template,omitempty"`
	TestAdded                *[]NotificationsRequestTestAdded                `json:"test_added,omitempty"`
	UpcomingEngagement       *[]NotificationsRequestUpcomingEngagement       `json:"upcoming_engagement,omitempty"`
	User                     *int                                            `json:"user"`
	UserMentioned            *[]NotificationsRequestUserMentioned            `json:"user_mentioned,omitempty"`
}

// NotificationsRequestAutoCloseEngagement * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type NotificationsRequestAutoCloseEngagement string

// NotificationsRequestCloseEngagement * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type NotificationsRequestCloseEngagement string

// NotificationsRequestCodeReview * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type NotificationsRequestCodeReview string

// NotificationsRequestEngagementAdded * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type NotificationsRequestEngagementAdded string

// NotificationsRequestJiraUpdate * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type NotificationsRequestJiraUpdate string

// NotificationsRequestOther * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type NotificationsRequestOther string

// NotificationsRequestProductAdded * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type NotificationsRequestProductAdded string

// NotificationsRequestProductTypeAdded * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type NotificationsRequestProductTypeAdded string

// NotificationsRequestReviewRequested * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type NotificationsRequestReviewRequested string

// NotificationsRequestRiskAcceptanceExpiration * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type NotificationsRequestRiskAcceptanceExpiration string

// NotificationsRequestScanAdded * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type NotificationsRequestScanAdded string

// NotificationsRequestSlaBreach * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type NotificationsRequestSlaBreach string

// NotificationsRequestStaleEngagement * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type NotificationsRequestStaleEngagement string

// NotificationsRequestTestAdded * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type NotificationsRequestTestAdded string

// NotificationsRequestUpcomingEngagement * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type NotificationsRequestUpcomingEngagement string

// NotificationsRequestUserMentioned * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type NotificationsRequestUserMentioned string

// PaginatedAppAnalysisList defines model for PaginatedAppAnalysisList.
type PaginatedAppAnalysisList struct {
	Count    *int           `json:"count,omitempty"`
	Next     *string        `json:"next"`
	Previous *string        `json:"previous"`
	Results  *[]AppAnalysis `json:"results,omitempty"`
}

// PaginatedConfigurationPermissionList defines model for PaginatedConfigurationPermissionList.
type PaginatedConfigurationPermissionList struct {
	Count    *int                       `json:"count,omitempty"`
	Next     *string                    `json:"next"`
	Previous *string                    `json:"previous"`
	Results  *[]ConfigurationPermission `json:"results,omitempty"`
}

// PaginatedCredentialList defines model for PaginatedCredentialList.
type PaginatedCredentialList struct {
	Count    *int          `json:"count,omitempty"`
	Next     *string       `json:"next"`
	Previous *string       `json:"previous"`
	Results  *[]Credential `json:"results,omitempty"`
}

// PaginatedCredentialMappingList defines model for PaginatedCredentialMappingList.
type PaginatedCredentialMappingList struct {
	Count    *int                 `json:"count,omitempty"`
	Next     *string              `json:"next"`
	Previous *string              `json:"previous"`
	Results  *[]CredentialMapping `json:"results,omitempty"`
}

// PaginatedDeletePreviewList defines model for PaginatedDeletePreviewList.
type PaginatedDeletePreviewList struct {
	Count    *int             `json:"count,omitempty"`
	Next     *string          `json:"next"`
	Previous *string          `json:"previous"`
	Results  *[]DeletePreview `json:"results,omitempty"`
}

// PaginatedDevelopmentEnvironmentList defines model for PaginatedDevelopmentEnvironmentList.
type PaginatedDevelopmentEnvironmentList struct {
	Count    *int                      `json:"count,omitempty"`
	Next     *string                   `json:"next"`
	Previous *string                   `json:"previous"`
	Results  *[]DevelopmentEnvironment `json:"results,omitempty"`
}

// PaginatedDojoGroupList defines model for PaginatedDojoGroupList.
type PaginatedDojoGroupList struct {
	Count    *int    `json:"count,omitempty"`
	Next     *string `json:"next"`
	Prefetch *struct {
		ProductGroups     *map[string]Product     `json:"product_groups,omitempty"`
		ProductTypeGroups *map[string]ProductType `json:"product_type_groups,omitempty"`
		Users             *map[string]UserStub    `json:"users,omitempty"`
	} `json:"prefetch,omitempty"`
	Previous *string      `json:"previous"`
	Results  *[]DojoGroup `json:"results,omitempty"`
}

// PaginatedDojoGroupMemberList defines model for PaginatedDojoGroupMemberList.
type PaginatedDojoGroupMemberList struct {
	Count    *int    `json:"count,omitempty"`
	Next     *string `json:"next"`
	Prefetch *struct {
		Group *map[string]DojoGroup `json:"group,omitempty"`
		Role  *map[string]Role      `json:"role,omitempty"`
		User  *map[string]UserStub  `json:"user,omitempty"`
	} `json:"prefetch,omitempty"`
	Previous *string            `json:"previous"`
	Results  *[]DojoGroupMember `json:"results,omitempty"`
}

// PaginatedEndpointList defines model for PaginatedEndpointList.
type PaginatedEndpointList struct {
	Count    *int        `json:"count,omitempty"`
	Next     *string     `json:"next"`
	Previous *string     `json:"previous"`
	Results  *[]Endpoint `json:"results,omitempty"`
}

// PaginatedEndpointStatusList defines model for PaginatedEndpointStatusList.
type PaginatedEndpointStatusList struct {
	Count    *int              `json:"count,omitempty"`
	Next     *string           `json:"next"`
	Previous *string           `json:"previous"`
	Results  *[]EndpointStatus `json:"results,omitempty"`
}

// PaginatedEngagementList defines model for PaginatedEngagementList.
type PaginatedEngagementList struct {
	Count    *int          `json:"count,omitempty"`
	Next     *string       `json:"next"`
	Previous *string       `json:"previous"`
	Results  *[]Engagement `json:"results,omitempty"`
}

// PaginatedEngagementPresetsList defines model for PaginatedEngagementPresetsList.
type PaginatedEngagementPresetsList struct {
	Count    *int                 `json:"count,omitempty"`
	Next     *string              `json:"next"`
	Previous *string              `json:"previous"`
	Results  *[]EngagementPresets `json:"results,omitempty"`
}

// PaginatedFindingList defines model for PaginatedFindingList.
type PaginatedFindingList struct {
	Count    *int    `json:"count,omitempty"`
	Next     *string `json:"next"`
	Prefetch *struct {
		AuthIssues              *map[string]EngagementCheckList `json:"auth_issues,omitempty"`
		AuthorIssues            *map[string]EngagementCheckList `json:"author_issues,omitempty"`
		ConfigIssues            *map[string]EngagementCheckList `json:"config_issues,omitempty"`
		CryptoIssues            *map[string]EngagementCheckList `json:"crypto_issues,omitempty"`
		DataIssues              *map[string]EngagementCheckList `json:"data_issues,omitempty"`
		DefectReviewRequestedBy *map[string]UserStub            `json:"defect_review_requested_by,omitempty"`
		DuplicateFinding        *map[string]Finding             `json:"duplicate_finding,omitempty"`
		EndpointSet             *map[string]Endpoint            `json:"endpoint_set,omitempty"`
		Endpoints               *map[string]Endpoint            `json:"endpoints,omitempty"`
		Files                   *map[string]RawFile             `json:"files,omitempty"`
		FindingGroupSet         *map[string]FindingGroup        `json:"finding_group_set,omitempty"`
		FoundBy                 *map[string]TestType            `json:"found_by,omitempty"`
		LastReviewedBy          *map[string]UserStub            `json:"last_reviewed_by,omitempty"`
		MitigatedBy             *map[string]UserStub            `json:"mitigated_by,omitempty"`
		Notes                   *map[string]Note                `json:"notes,omitempty"`
		OtherIssues             *map[string]EngagementCheckList `json:"other_issues,omitempty"`
		Reporter                *map[string]UserStub            `json:"reporter,omitempty"`
		ReviewRequestedBy       *map[string]UserStub            `json:"review_requested_by,omitempty"`
		Reviewers               *map[string]UserStub            `json:"reviewers,omitempty"`
		RiskAcceptanceSet       *map[string]RiskAcceptance      `json:"risk_acceptance_set,omitempty"`
		SensitiveIssues         *map[string]EngagementCheckList `json:"sensitive_issues,omitempty"`
		SessionIssues           *map[string]EngagementCheckList `json:"session_issues,omitempty"`
		SonarqubeIssue          *map[string]SonarqubeIssue      `json:"sonarqube_issue,omitempty"`
		Test                    *map[string]Test                `json:"test,omitempty"`
		TestImportSet           *map[string]TestImport          `json:"test_import_set,omitempty"`
	} `json:"prefetch,omitempty"`
	Previous *string    `json:"previous"`
	Results  *[]Finding `json:"results,omitempty"`
}

// PaginatedFindingTemplateList defines model for PaginatedFindingTemplateList.
type PaginatedFindingTemplateList struct {
	Count    *int               `json:"count,omitempty"`
	Next     *string            `json:"next"`
	Previous *string            `json:"previous"`
	Results  *[]FindingTemplate `json:"results,omitempty"`
}

// PaginatedGlobalRoleList defines model for PaginatedGlobalRoleList.
type PaginatedGlobalRoleList struct {
	Count    *int          `json:"count,omitempty"`
	Next     *string       `json:"next"`
	Previous *string       `json:"previous"`
	Results  *[]GlobalRole `json:"results,omitempty"`
}

// PaginatedJIRAInstanceList defines model for PaginatedJIRAInstanceList.
type PaginatedJIRAInstanceList struct {
	Count    *int            `json:"count,omitempty"`
	Next     *string         `json:"next"`
	Previous *string         `json:"previous"`
	Results  *[]JIRAInstance `json:"results,omitempty"`
}

// PaginatedJIRAIssueList defines model for PaginatedJIRAIssueList.
type PaginatedJIRAIssueList struct {
	Count    *int         `json:"count,omitempty"`
	Next     *string      `json:"next"`
	Previous *string      `json:"previous"`
	Results  *[]JIRAIssue `json:"results,omitempty"`
}

// PaginatedJIRAProjectList defines model for PaginatedJIRAProjectList.
type PaginatedJIRAProjectList struct {
	Count    *int           `json:"count,omitempty"`
	Next     *string        `json:"next"`
	Previous *string        `json:"previous"`
	Results  *[]JIRAProject `json:"results,omitempty"`
}

// PaginatedLanguageList defines model for PaginatedLanguageList.
type PaginatedLanguageList struct {
	Count    *int    `json:"count,omitempty"`
	Next     *string `json:"next"`
	Prefetch *struct {
		Language *map[string]LanguageType `json:"language,omitempty"`
		Product  *map[string]Product      `json:"product,omitempty"`
		User     *map[string]UserStub     `json:"user,omitempty"`
	} `json:"prefetch,omitempty"`
	Previous *string     `json:"previous"`
	Results  *[]Language `json:"results,omitempty"`
}

// PaginatedLanguageTypeList defines model for PaginatedLanguageTypeList.
type PaginatedLanguageTypeList struct {
	Count    *int            `json:"count,omitempty"`
	Next     *string         `json:"next"`
	Previous *string         `json:"previous"`
	Results  *[]LanguageType `json:"results,omitempty"`
}

// PaginatedMetaList defines model for PaginatedMetaList.
type PaginatedMetaList struct {
	Count    *int    `json:"count,omitempty"`
	Next     *string `json:"next"`
	Prefetch *struct {
		Endpoint *map[string]Endpoint `json:"endpoint,omitempty"`
		Finding  *map[string]Finding  `json:"finding,omitempty"`
		Product  *map[string]Product  `json:"product,omitempty"`
	} `json:"prefetch,omitempty"`
	Previous *string `json:"previous"`
	Results  *[]Meta `json:"results,omitempty"`
}

// PaginatedNetworkLocationsList defines model for PaginatedNetworkLocationsList.
type PaginatedNetworkLocationsList struct {
	Count    *int                `json:"count,omitempty"`
	Next     *string             `json:"next"`
	Previous *string             `json:"previous"`
	Results  *[]NetworkLocations `json:"results,omitempty"`
}

// PaginatedNoteList defines model for PaginatedNoteList.
type PaginatedNoteList struct {
	Count    *int    `json:"count,omitempty"`
	Next     *string `json:"next"`
	Previous *string `json:"previous"`
	Results  *[]Note `json:"results,omitempty"`
}

// PaginatedNoteTypeList defines model for PaginatedNoteTypeList.
type PaginatedNoteTypeList struct {
	Count    *int        `json:"count,omitempty"`
	Next     *string     `json:"next"`
	Previous *string     `json:"previous"`
	Results  *[]NoteType `json:"results,omitempty"`
}

// PaginatedNotificationsList defines model for PaginatedNotificationsList.
type PaginatedNotificationsList struct {
	Count    *int    `json:"count,omitempty"`
	Next     *string `json:"next"`
	Prefetch *struct {
		Product *map[string]Product  `json:"product,omitempty"`
		User    *map[string]UserStub `json:"user,omitempty"`
	} `json:"prefetch,omitempty"`
	Previous *string          `json:"previous"`
	Results  *[]Notifications `json:"results,omitempty"`
}

// PaginatedProductAPIScanConfigurationList defines model for PaginatedProductAPIScanConfigurationList.
type PaginatedProductAPIScanConfigurationList struct {
	Count    *int                           `json:"count,omitempty"`
	Next     *string                        `json:"next"`
	Previous *string                        `json:"previous"`
	Results  *[]ProductAPIScanConfiguration `json:"results,omitempty"`
}

// PaginatedProductGroupList defines model for PaginatedProductGroupList.
type PaginatedProductGroupList struct {
	Count    *int    `json:"count,omitempty"`
	Next     *string `json:"next"`
	Prefetch *struct {
		Group   *map[string]DojoGroup `json:"group,omitempty"`
		Product *map[string]Product   `json:"product,omitempty"`
		Role    *map[string]Role      `json:"role,omitempty"`
	} `json:"prefetch,omitempty"`
	Previous *string         `json:"previous"`
	Results  *[]ProductGroup `json:"results,omitempty"`
}

// PaginatedProductList defines model for PaginatedProductList.
type PaginatedProductList struct {
	Count    *int    `json:"count,omitempty"`
	Next     *string `json:"next"`
	Prefetch *struct {
		AuthorizationGroups *map[string]DojoGroup        `json:"authorization_groups,omitempty"`
		Members             *map[string]UserStub         `json:"members,omitempty"`
		ProdType            *map[string]ProductType      `json:"prod_type,omitempty"`
		ProductManager      *map[string]UserStub         `json:"product_manager,omitempty"`
		Regulations         *map[string]Regulation       `json:"regulations,omitempty"`
		SlaConfiguration    *map[string]SLAConfiguration `json:"sla_configuration,omitempty"`
		TeamManager         *map[string]UserStub         `json:"team_manager,omitempty"`
		TechnicalContact    *map[string]UserStub         `json:"technical_contact,omitempty"`
	} `json:"prefetch,omitempty"`
	Previous *string    `json:"previous"`
	Results  *[]Product `json:"results,omitempty"`
}

// PaginatedProductMemberList defines model for PaginatedProductMemberList.
type PaginatedProductMemberList struct {
	Count    *int    `json:"count,omitempty"`
	Next     *string `json:"next"`
	Prefetch *struct {
		Product *map[string]Product  `json:"product,omitempty"`
		Role    *map[string]Role     `json:"role,omitempty"`
		User    *map[string]UserStub `json:"user,omitempty"`
	} `json:"prefetch,omitempty"`
	Previous *string          `json:"previous"`
	Results  *[]ProductMember `json:"results,omitempty"`
}

// PaginatedProductTypeGroupList defines model for PaginatedProductTypeGroupList.
type PaginatedProductTypeGroupList struct {
	Count    *int    `json:"count,omitempty"`
	Next     *string `json:"next"`
	Prefetch *struct {
		Group       *map[string]DojoGroup   `json:"group,omitempty"`
		ProductType *map[string]ProductType `json:"product_type,omitempty"`
		Role        *map[string]Role        `json:"role,omitempty"`
	} `json:"prefetch,omitempty"`
	Previous *string             `json:"previous"`
	Results  *[]ProductTypeGroup `json:"results,omitempty"`
}

// PaginatedProductTypeList defines model for PaginatedProductTypeList.
type PaginatedProductTypeList struct {
	Count    *int    `json:"count,omitempty"`
	Next     *string `json:"next"`
	Prefetch *struct {
		AuthorizationGroups *map[string]DojoGroup `json:"authorization_groups,omitempty"`
		Members             *map[string]UserStub  `json:"members,omitempty"`
	} `json:"prefetch,omitempty"`
	Previous *string        `json:"previous"`
	Results  *[]ProductType `json:"results,omitempty"`
}

// PaginatedProductTypeMemberList defines model for PaginatedProductTypeMemberList.
type PaginatedProductTypeMemberList struct {
	Count    *int    `json:"count,omitempty"`
	Next     *string `json:"next"`
	Prefetch *struct {
		ProductType *map[string]ProductType `json:"product_type,omitempty"`
		Role        *map[string]Role        `json:"role,omitempty"`
		User        *map[string]UserStub    `json:"user,omitempty"`
	} `json:"prefetch,omitempty"`
	Previous *string              `json:"previous"`
	Results  *[]ProductTypeMember `json:"results,omitempty"`
}

// PaginatedQuestionnaireAnswerList defines model for PaginatedQuestionnaireAnswerList.
type PaginatedQuestionnaireAnswerList struct {
	Count    *int                   `json:"count,omitempty"`
	Next     *string                `json:"next"`
	Previous *string                `json:"previous"`
	Results  *[]QuestionnaireAnswer `json:"results,omitempty"`
}

// PaginatedQuestionnaireAnsweredSurveyList defines model for PaginatedQuestionnaireAnsweredSurveyList.
type PaginatedQuestionnaireAnsweredSurveyList struct {
	Count    *int                           `json:"count,omitempty"`
	Next     *string                        `json:"next"`
	Previous *string                        `json:"previous"`
	Results  *[]QuestionnaireAnsweredSurvey `json:"results,omitempty"`
}

// PaginatedQuestionnaireEngagementSurveyList defines model for PaginatedQuestionnaireEngagementSurveyList.
type PaginatedQuestionnaireEngagementSurveyList struct {
	Count    *int                             `json:"count,omitempty"`
	Next     *string                          `json:"next"`
	Previous *string                          `json:"previous"`
	Results  *[]QuestionnaireEngagementSurvey `json:"results,omitempty"`
}

// PaginatedQuestionnaireGeneralSurveyList defines model for PaginatedQuestionnaireGeneralSurveyList.
type PaginatedQuestionnaireGeneralSurveyList struct {
	Count    *int                          `json:"count,omitempty"`
	Next     *string                       `json:"next"`
	Previous *string                       `json:"previous"`
	Results  *[]QuestionnaireGeneralSurvey `json:"results,omitempty"`
}

// PaginatedQuestionnaireQuestionList defines model for PaginatedQuestionnaireQuestionList.
type PaginatedQuestionnaireQuestionList struct {
	Count    *int                     `json:"count,omitempty"`
	Next     *string                  `json:"next"`
	Previous *string                  `json:"previous"`
	Results  *[]QuestionnaireQuestion `json:"results,omitempty"`
}

// PaginatedRegulationList defines model for PaginatedRegulationList.
type PaginatedRegulationList struct {
	Count    *int          `json:"count,omitempty"`
	Next     *string       `json:"next"`
	Previous *string       `json:"previous"`
	Results  *[]Regulation `json:"results,omitempty"`
}

// PaginatedRiskAcceptanceList defines model for PaginatedRiskAcceptanceList.
type PaginatedRiskAcceptanceList struct {
	Count    *int              `json:"count,omitempty"`
	Next     *string           `json:"next"`
	Previous *string           `json:"previous"`
	Results  *[]RiskAcceptance `json:"results,omitempty"`
}

// PaginatedRoleList defines model for PaginatedRoleList.
type PaginatedRoleList struct {
	Count    *int    `json:"count,omitempty"`
	Next     *string `json:"next"`
	Previous *string `json:"previous"`
	Results  *[]Role `json:"results,omitempty"`
}

// PaginatedSLAConfigurationList defines model for PaginatedSLAConfigurationList.
type PaginatedSLAConfigurationList struct {
	Count    *int                `json:"count,omitempty"`
	Next     *string             `json:"next"`
	Previous *string             `json:"previous"`
	Results  *[]SLAConfiguration `json:"results,omitempty"`
}

// PaginatedSonarqubeIssueList defines model for PaginatedSonarqubeIssueList.
type PaginatedSonarqubeIssueList struct {
	Count    *int              `json:"count,omitempty"`
	Next     *string           `json:"next"`
	Previous *string           `json:"previous"`
	Results  *[]SonarqubeIssue `json:"results,omitempty"`
}

// PaginatedSonarqubeIssueTransitionList defines model for PaginatedSonarqubeIssueTransitionList.
type PaginatedSonarqubeIssueTransitionList struct {
	Count    *int                        `json:"count,omitempty"`
	Next     *string                     `json:"next"`
	Previous *string                     `json:"previous"`
	Results  *[]SonarqubeIssueTransition `json:"results,omitempty"`
}

// PaginatedStubFindingList defines model for PaginatedStubFindingList.
type PaginatedStubFindingList struct {
	Count    *int           `json:"count,omitempty"`
	Next     *string        `json:"next"`
	Previous *string        `json:"previous"`
	Results  *[]StubFinding `json:"results,omitempty"`
}

// PaginatedSystemSettingsList defines model for PaginatedSystemSettingsList.
type PaginatedSystemSettingsList struct {
	Count    *int              `json:"count,omitempty"`
	Next     *string           `json:"next"`
	Previous *string           `json:"previous"`
	Results  *[]SystemSettings `json:"results,omitempty"`
}

// PaginatedTestImportList defines model for PaginatedTestImportList.
type PaginatedTestImportList struct {
	Count    *int    `json:"count,omitempty"`
	Next     *string `json:"next"`
	Prefetch *struct {
		FindingsAffected *map[string]Finding `json:"findings_affected,omitempty"`
		Test             *map[string]Test    `json:"test,omitempty"`
	} `json:"prefetch,omitempty"`
	Previous *string       `json:"previous"`
	Results  *[]TestImport `json:"results,omitempty"`
}

// PaginatedTestList defines model for PaginatedTestList.
type PaginatedTestList struct {
	Count    *int    `json:"count,omitempty"`
	Next     *string `json:"next"`
	Previous *string `json:"previous"`
	Results  *[]Test `json:"results,omitempty"`
}

// PaginatedTestTypeList defines model for PaginatedTestTypeList.
type PaginatedTestTypeList struct {
	Count    *int        `json:"count,omitempty"`
	Next     *string     `json:"next"`
	Previous *string     `json:"previous"`
	Results  *[]TestType `json:"results,omitempty"`
}

// PaginatedToolConfigurationList defines model for PaginatedToolConfigurationList.
type PaginatedToolConfigurationList struct {
	Count    *int                 `json:"count,omitempty"`
	Next     *string              `json:"next"`
	Previous *string              `json:"previous"`
	Results  *[]ToolConfiguration `json:"results,omitempty"`
}

// PaginatedToolProductSettingsList defines model for PaginatedToolProductSettingsList.
type PaginatedToolProductSettingsList struct {
	Count    *int                   `json:"count,omitempty"`
	Next     *string                `json:"next"`
	Previous *string                `json:"previous"`
	Results  *[]ToolProductSettings `json:"results,omitempty"`
}

// PaginatedToolTypeList defines model for PaginatedToolTypeList.
type PaginatedToolTypeList struct {
	Count    *int        `json:"count,omitempty"`
	Next     *string     `json:"next"`
	Previous *string     `json:"previous"`
	Results  *[]ToolType `json:"results,omitempty"`
}

// PaginatedUserContactInfoList defines model for PaginatedUserContactInfoList.
type PaginatedUserContactInfoList struct {
	Count    *int    `json:"count,omitempty"`
	Next     *string `json:"next"`
	Prefetch *struct {
		User *map[string]UserStub `json:"user,omitempty"`
	} `json:"prefetch,omitempty"`
	Previous *string            `json:"previous"`
	Results  *[]UserContactInfo `json:"results,omitempty"`
}

// PaginatedUserList defines model for PaginatedUserList.
type PaginatedUserList struct {
	Count    *int    `json:"count,omitempty"`
	Next     *string `json:"next"`
	Previous *string `json:"previous"`
	Results  *[]User `json:"results,omitempty"`
}

// PatchedAppAnalysisRequest defines model for PatchedAppAnalysisRequest.
type PatchedAppAnalysisRequest struct {
	Confidence   *int      `json:"confidence"`
	Icon         *string   `json:"icon"`
	Name         *string   `json:"name,omitempty"`
	Product      *int      `json:"product,omitempty"`
	Tags         *[]string `json:"tags,omitempty"`
	User         *int      `json:"user,omitempty"`
	Version      *string   `json:"version"`
	Website      *string   `json:"website"`
	WebsiteFound *string   `json:"website_found"`
}

// PatchedCredentialMappingRequest defines model for PatchedCredentialMappingRequest.
type PatchedCredentialMappingRequest struct {
	CredId          *int    `json:"cred_id,omitempty"`
	Engagement      *int    `json:"engagement"`
	Finding         *int    `json:"finding"`
	IsAuthnProvider *bool   `json:"is_authn_provider,omitempty"`
	Product         *int    `json:"product"`
	Test            *int    `json:"test"`
	Url             *string `json:"url"`
}

// PatchedCredentialRequest defines model for PatchedCredentialRequest.
type PatchedCredentialRequest struct {
	// Authentication * `Form` - Form Authentication
	// * `SSO` - SSO Redirect
	Authentication *PatchedCredentialRequestAuthentication `json:"authentication,omitempty"`
	Description    *string                                 `json:"description"`
	Environment    *int                                    `json:"environment,omitempty"`

	// HttpAuthentication * `Basic` - Basic
	// * `NTLM` - NTLM
	HttpAuthentication *PatchedCredentialRequestHttpAuthentication `json:"http_authentication"`
	IsValid            *bool                                       `json:"is_valid,omitempty"`
	LoginRegex         *string                                     `json:"login_regex"`
	LogoutRegex        *string                                     `json:"logout_regex"`
	Name               *string                                     `json:"name,omitempty"`
	Role               *string                                     `json:"role,omitempty"`
	Url                *string                                     `json:"url,omitempty"`
	Username           *string                                     `json:"username,omitempty"`
}

// PatchedCredentialRequestAuthentication * `Form` - Form Authentication
// * `SSO` - SSO Redirect
type PatchedCredentialRequestAuthentication string

// PatchedCredentialRequestHttpAuthentication * `Basic` - Basic
// * `NTLM` - NTLM
type PatchedCredentialRequestHttpAuthentication string

// PatchedDevelopmentEnvironmentRequest defines model for PatchedDevelopmentEnvironmentRequest.
type PatchedDevelopmentEnvironmentRequest struct {
	Name *string `json:"name,omitempty"`
}

// PatchedDojoGroupMemberRequest defines model for PatchedDojoGroupMemberRequest.
type PatchedDojoGroupMemberRequest struct {
	Group *int `json:"group,omitempty"`

	// Role This role determines the permissions of the user to manage the group.
	Role *int `json:"role,omitempty"`
	User *int `json:"user,omitempty"`
}

// PatchedDojoGroupRequest defines model for PatchedDojoGroupRequest.
type PatchedDojoGroupRequest struct {
	ConfigurationPermissions *[]int  `json:"configuration_permissions,omitempty"`
	Description              *string `json:"description"`
	Name                     *string `json:"name,omitempty"`

	// SocialProvider Group imported from a social provider.
	//
	// * `AzureAD` - AzureAD
	SocialProvider *PatchedDojoGroupRequestSocialProvider `json:"social_provider"`
}

// PatchedDojoGroupRequestSocialProvider Group imported from a social provider.
//
// * `AzureAD` - AzureAD
type PatchedDojoGroupRequestSocialProvider string

// PatchedEndpointRequest defines model for PatchedEndpointRequest.
type PatchedEndpointRequest struct {
	// Fragment The fragment identifier which follows the hash mark. The hash mark should be omitted. For example 'section-13', 'paragraph-2'.
	Fragment *string `json:"fragment"`

	// Host The host name or IP address. It must not include the port number. For example '127.0.0.1', 'localhost', 'yourdomain.com'.
	Host *string `json:"host"`

	// Path The location of the resource, it must not start with a '/'. For example endpoint/420/edit
	Path *string `json:"path"`

	// Port The network port associated with the endpoint.
	Port    *int `json:"port"`
	Product *int `json:"product"`

	// Protocol The communication protocol/scheme such as 'http', 'ftp', 'dns', etc.
	Protocol *string `json:"protocol"`

	// Query The query string, the question mark should be omitted.For example 'group=4&team=8'
	Query *string   `json:"query"`
	Tags  *[]string `json:"tags,omitempty"`

	// Userinfo User info as 'alice', 'bob', etc.
	Userinfo *string `json:"userinfo"`
}

// PatchedEndpointStatusRequest defines model for PatchedEndpointStatusRequest.
type PatchedEndpointStatusRequest struct {
	Date          *openapi_types.Date `json:"date,omitempty"`
	Endpoint      *int                `json:"endpoint,omitempty"`
	FalsePositive *bool               `json:"false_positive,omitempty"`
	Finding       *int                `json:"finding,omitempty"`
	Mitigated     *bool               `json:"mitigated,omitempty"`
	MitigatedBy   *int                `json:"mitigated_by"`
	OutOfScope    *bool               `json:"out_of_scope,omitempty"`
	RiskAccepted  *bool               `json:"risk_accepted,omitempty"`
}

// PatchedEngagementPresetsRequest defines model for PatchedEngagementPresetsRequest.
type PatchedEngagementPresetsRequest struct {
	NetworkLocations *[]int `json:"network_locations,omitempty"`

	// Notes Description of what needs to be tested or setting up environment for testing
	Notes   *string `json:"notes"`
	Product *int    `json:"product,omitempty"`

	// Scope Scope of Engagement testing, IP's/Resources/URL's)
	Scope    *string `json:"scope,omitempty"`
	TestType *[]int  `json:"test_type,omitempty"`

	// Title Brief description of preset.
	Title *string `json:"title,omitempty"`
}

// PatchedEngagementRequest defines model for PatchedEngagementRequest.
type PatchedEngagementRequest struct {
	ApiTest *bool `json:"api_test,omitempty"`

	// BranchTag Tag or branch of the product the engagement tested.
	BranchTag *string `json:"branch_tag"`

	// BuildId Build ID of the product the engagement tested.
	BuildId *string `json:"build_id"`

	// BuildServer Build server responsible for CI/CD test
	BuildServer *int  `json:"build_server"`
	CheckList   *bool `json:"check_list,omitempty"`

	// CommitHash Commit hash from repo
	CommitHash *string `json:"commit_hash"`

	// DeduplicationOnEngagement If enabled deduplication will only mark a finding in this engagement as duplicate of another finding if both findings are in this engagement. If disabled, deduplication is on the product level.
	DeduplicationOnEngagement *bool   `json:"deduplication_on_engagement,omitempty"`
	Description               *string `json:"description"`

	// EngagementType * `Interactive` - Interactive
	// * `CI/CD` - CI/CD
	EngagementType *PatchedEngagementRequestEngagementType `json:"engagement_type"`
	FirstContacted *openapi_types.Date                     `json:"first_contacted"`
	Lead           *int                                    `json:"lead"`
	Name           *string                                 `json:"name"`

	// OrchestrationEngine Orchestration service responsible for CI/CD test
	OrchestrationEngine *int  `json:"orchestration_engine"`
	PenTest             *bool `json:"pen_test,omitempty"`

	// Preset Settings and notes for performing this engagement.
	Preset     *int    `json:"preset"`
	Product    *int    `json:"product,omitempty"`
	Reason     *string `json:"reason"`
	ReportType *int    `json:"report_type"`
	Requester  *int    `json:"requester"`

	// SourceCodeManagementServer Source code server for CI/CD test
	SourceCodeManagementServer *int `json:"source_code_management_server"`

	// SourceCodeManagementUri Resource link to source code
	SourceCodeManagementUri *string `json:"source_code_management_uri"`

	// Status * `Not Started` - Not Started
	// * `Blocked` - Blocked
	// * `Cancelled` - Cancelled
	// * `Completed` - Completed
	// * `In Progress` - In Progress
	// * `On Hold` - On Hold
	// * `Waiting for Resource` - Waiting for Resource
	Status       *PatchedEngagementRequestStatus `json:"status"`
	Tags         *[]string                       `json:"tags,omitempty"`
	TargetEnd    *openapi_types.Date             `json:"target_end,omitempty"`
	TargetStart  *openapi_types.Date             `json:"target_start,omitempty"`
	TestStrategy *string                         `json:"test_strategy"`
	ThreatModel  *bool                           `json:"threat_model,omitempty"`

	// Tracker Link to epic or ticket system with changes to version.
	Tracker *string `json:"tracker"`

	// Version Version of the product the engagement tested.
	Version *string `json:"version"`
}

// PatchedEngagementRequestEngagementType * `Interactive` - Interactive
// * `CI/CD` - CI/CD
type PatchedEngagementRequestEngagementType string

// PatchedEngagementRequestStatus * `Not Started` - Not Started
// * `Blocked` - Blocked
// * `Cancelled` - Cancelled
// * `Completed` - Completed
// * `In Progress` - In Progress
// * `On Hold` - On Hold
// * `Waiting for Resource` - Waiting for Resource
type PatchedEngagementRequestStatus string

// PatchedFindingNoteRequest defines model for PatchedFindingNoteRequest.
type PatchedFindingNoteRequest struct {
	NoteId *int `json:"note_id,omitempty"`
}

// PatchedFindingRequest defines model for PatchedFindingRequest.
type PatchedFindingRequest struct {
	// Active Denotes if this flaw is active or not.
	Active *bool `json:"active,omitempty"`

	// ComponentName Name of the affected component (library name, part of a system, ...).
	ComponentName *string `json:"component_name"`

	// ComponentVersion Version of the affected component.
	ComponentVersion *string `json:"component_version"`

	// Cvssv3 Common Vulnerability Scoring System version 3 (CVSSv3) score associated with this flaw.
	Cvssv3 *string `json:"cvssv3"`

	// Cvssv3Score Numerical CVSSv3 score for the vulnerability. If the vector is given, the score is updated while saving the finding
	Cvssv3Score *float64 `json:"cvssv3_score"`

	// Cwe The CWE number associated with this flaw.
	Cwe *int `json:"cwe"`

	// Date The date the flaw was discovered.
	Date *openapi_types.Date `json:"date,omitempty"`

	// DefectReviewRequestedBy Documents who requested a defect review for this flaw.
	DefectReviewRequestedBy *int `json:"defect_review_requested_by"`

	// Description Longer more descriptive information about the flaw.
	Description *string `json:"description,omitempty"`

	// Duplicate Denotes if this flaw is a duplicate of other flaws reported.
	Duplicate *bool `json:"duplicate,omitempty"`

	// DynamicFinding Flaw has been detected from a Dynamic Application Security Testing tool (DAST).
	DynamicFinding *bool `json:"dynamic_finding,omitempty"`

	// EffortForFixing Effort for fixing / remediating the vulnerability (Low, Medium, High)
	EffortForFixing *string `json:"effort_for_fixing"`

	// FalseP Denotes if this flaw has been deemed a false positive by the tester.
	FalseP *bool `json:"false_p,omitempty"`

	// FilePath Identified file(s) containing the flaw.
	FilePath *string `json:"file_path"`

	// Impact Text describing the impact this flaw has on systems, products, enterprise, etc.
	Impact *string `json:"impact"`

	// IsMitigated Denotes if this flaw has been fixed.
	IsMitigated *bool `json:"is_mitigated,omitempty"`

	// Line Source line number of the attack vector.
	Line *int `json:"line"`

	// Mitigation Text describing how to best fix the flaw.
	Mitigation *string `json:"mitigation"`

	// NbOccurences Number of occurences in the source tool when several vulnerabilites were found and aggregated by the scanner.
	NbOccurences *int `json:"nb_occurences"`

	// NumericalSeverity The numerical representation of the severity (S0, S1, S2, S3, S4).
	NumericalSeverity *string `json:"numerical_severity,omitempty"`

	// OutOfScope Denotes if this flaw falls outside the scope of the test and/or engagement.
	OutOfScope *bool `json:"out_of_scope,omitempty"`

	// PlannedRemediationDate The date the flaw is expected to be remediated.
	PlannedRemediationDate *openapi_types.Date `json:"planned_remediation_date"`

	// PlannedRemediationVersion The target version when the vulnerability should be fixed / remediated
	PlannedRemediationVersion *string `json:"planned_remediation_version"`

	// PublishDate Date when this vulnerability was made publicly available.
	PublishDate *openapi_types.Date `json:"publish_date"`
	PushToJira  *bool               `json:"push_to_jira,omitempty"`

	// References The external documentation available for this flaw.
	References *string `json:"references"`

	// ReviewRequestedBy Documents who requested a review for this finding.
	ReviewRequestedBy *int `json:"review_requested_by"`

	// Reviewers Documents who reviewed the flaw.
	Reviewers *[]int `json:"reviewers,omitempty"`

	// RiskAccepted Denotes if this finding has been marked as an accepted risk.
	RiskAccepted *bool `json:"risk_accepted,omitempty"`

	// SastSinkObject Sink object (variable, function...) of the attack vector.
	SastSinkObject *string `json:"sast_sink_object"`

	// SastSourceFilePath Source file path of the attack vector.
	SastSourceFilePath *string `json:"sast_source_file_path"`

	// SastSourceLine Source line number of the attack vector.
	SastSourceLine *int `json:"sast_source_line"`

	// SastSourceObject Source object (variable, function...) of the attack vector.
	SastSourceObject *string `json:"sast_source_object"`

	// Service A service is a self-contained piece of functionality within a Product. This is an optional field which is used in deduplication of findings when set.
	Service *string `json:"service"`

	// Severity The severity level of this flaw (Critical, High, Medium, Low, Informational).
	Severity *string `json:"severity,omitempty"`

	// SeverityJustification Text describing why a certain severity was associated with this flaw.
	SeverityJustification *string `json:"severity_justification"`

	// SlaStartDate (readonly)The date used as start date for SLA calculation. Set by expiring risk acceptances. Empty by default, causing a fallback to 'date'.
	SlaStartDate *openapi_types.Date `json:"sla_start_date"`

	// SonarqubeIssue The SonarQube issue associated with this finding.
	SonarqubeIssue *int `json:"sonarqube_issue"`

	// StaticFinding Flaw has been detected from a Static Application Security Testing tool (SAST).
	StaticFinding *bool `json:"static_finding,omitempty"`

	// StepsToReproduce Text describing the steps that must be followed in order to reproduce the flaw / bug.
	StepsToReproduce *string   `json:"steps_to_reproduce"`
	Tags             *[]string `json:"tags,omitempty"`

	// Title A short description of the flaw.
	Title *string `json:"title,omitempty"`

	// UnderDefectReview Denotes if this finding is under defect review.
	UnderDefectReview *bool `json:"under_defect_review,omitempty"`

	// UnderReview Denotes is this flaw is currently being reviewed.
	UnderReview *bool `json:"under_review,omitempty"`

	// UniqueIdFromTool Vulnerability technical id from the source tool. Allows to track unique vulnerabilities.
	UniqueIdFromTool *string `json:"unique_id_from_tool"`

	// Verified Denotes if this flaw has been manually verified by the tester.
	Verified *bool `json:"verified,omitempty"`

	// VulnIdFromTool Non-unique technical id from the source tool associated with the vulnerability type.
	VulnIdFromTool   *string                   `json:"vuln_id_from_tool"`
	VulnerabilityIds *[]VulnerabilityIdRequest `json:"vulnerability_ids,omitempty"`
}

// PatchedFindingTemplateRequest defines model for PatchedFindingTemplateRequest.
type PatchedFindingTemplateRequest struct {
	Cvssv3      *string   `json:"cvssv3"`
	Cwe         *int      `json:"cwe"`
	Description *string   `json:"description"`
	Impact      *string   `json:"impact"`
	Mitigation  *string   `json:"mitigation"`
	References  *string   `json:"references"`
	Severity    *string   `json:"severity"`
	Tags        *[]string `json:"tags,omitempty"`

	// TemplateMatch Enables this template for matching remediation advice. Match will be applied to all active, verified findings by CWE.
	TemplateMatch *bool `json:"template_match,omitempty"`

	// TemplateMatchTitle Matches by title text (contains search) and CWE.
	TemplateMatchTitle *bool                             `json:"template_match_title,omitempty"`
	Title              *string                           `json:"title,omitempty"`
	VulnerabilityIds   *[]VulnerabilityIdTemplateRequest `json:"vulnerability_ids,omitempty"`
}

// PatchedGlobalRoleRequest defines model for PatchedGlobalRoleRequest.
type PatchedGlobalRoleRequest struct {
	Group *int `json:"group"`

	// Role The global role will be applied to all product types and products.
	Role *int `json:"role"`
	User *int `json:"user"`
}

// PatchedJIRAInstanceRequest defines model for PatchedJIRAInstanceRequest.
type PatchedJIRAInstanceRequest struct {
	// AcceptedMappingResolution JIRA resolution names (comma-separated values) that maps to an Accepted Finding
	AcceptedMappingResolution *string `json:"accepted_mapping_resolution"`

	// CloseStatusKey Transition ID to Close JIRA issues, visit https://<YOUR JIRA URL>/rest/api/latest/issue/<ANY VALID ISSUE KEY>/transitions?expand=transitions.fields to find the ID for your JIRA instance
	CloseStatusKey *int `json:"close_status_key,omitempty"`

	// ConfigurationName Enter a name to give to this configuration
	ConfigurationName *string `json:"configuration_name,omitempty"`

	// CriticalMappingSeverity Maps to the 'Priority' field in Jira. For example: Critical
	CriticalMappingSeverity *string `json:"critical_mapping_severity,omitempty"`

	// DefaultIssueType You can define extra issue types in settings.py
	//
	// * `Task` - Task
	// * `Story` - Story
	// * `Epic` - Epic
	// * `Spike` - Spike
	// * `Bug` - Bug
	// * `Security` - Security
	DefaultIssueType *PatchedJIRAInstanceRequestDefaultIssueType `json:"default_issue_type,omitempty"`

	// EpicNameId To obtain the 'Epic name id' visit https://<YOUR JIRA URL>/rest/api/2/field and search for Epic Name. Copy the number out of cf[number] and paste it here.
	EpicNameId *int `json:"epic_name_id,omitempty"`

	// FalsePositiveMappingResolution JIRA resolution names (comma-separated values) that maps to a False Positive Finding
	FalsePositiveMappingResolution *string `json:"false_positive_mapping_resolution"`

	// FindingJiraSync If enabled, this will sync changes to a Finding automatically to JIRA
	FindingJiraSync *bool `json:"finding_jira_sync,omitempty"`

	// FindingText Additional text that will be added to the finding in Jira. For example including how the finding was created or who to contact for more information.
	FindingText *string `json:"finding_text"`

	// GlobalJiraSlaNotification This setting can be overidden at the Product level
	GlobalJiraSlaNotification *bool `json:"global_jira_sla_notification,omitempty"`

	// HighMappingSeverity Maps to the 'Priority' field in Jira. For example: High
	HighMappingSeverity *string `json:"high_mapping_severity,omitempty"`

	// InfoMappingSeverity Maps to the 'Priority' field in Jira. For example: Info
	InfoMappingSeverity *string `json:"info_mapping_severity,omitempty"`

	// IssueTemplateDir Choose the folder containing the Django templates used to render the JIRA issue description. These are stored in dojo/templates/issue-trackers. Leave empty to use the default jira_full templates.
	IssueTemplateDir *string `json:"issue_template_dir"`

	// LowMappingSeverity Maps to the 'Priority' field in Jira. For example: Low
	LowMappingSeverity *string `json:"low_mapping_severity,omitempty"`

	// MediumMappingSeverity Maps to the 'Priority' field in Jira. For example: Medium
	MediumMappingSeverity *string `json:"medium_mapping_severity,omitempty"`

	// OpenStatusKey Transition ID to Re-Open JIRA issues, visit https://<YOUR JIRA URL>/rest/api/latest/issue/<ANY VALID ISSUE KEY>/transitions?expand=transitions.fields to find the ID for your JIRA instance
	OpenStatusKey *int    `json:"open_status_key,omitempty"`
	Password      *string `json:"password,omitempty"`

	// Url For more information how to configure Jira, read the DefectDojo documentation.
	Url      *string `json:"url,omitempty"`
	Username *string `json:"username,omitempty"`
}

// PatchedJIRAInstanceRequestDefaultIssueType You can define extra issue types in settings.py
//
// * `Task` - Task
// * `Story` - Story
// * `Epic` - Epic
// * `Spike` - Spike
// * `Bug` - Bug
// * `Security` - Security
type PatchedJIRAInstanceRequestDefaultIssueType string

// PatchedJIRAIssueRequest defines model for PatchedJIRAIssueRequest.
type PatchedJIRAIssueRequest struct {
	Engagement   *int `json:"engagement"`
	Finding      *int `json:"finding"`
	FindingGroup *int `json:"finding_group"`

	// JiraChange The date the linked Jira issue was last modified.
	JiraChange *time.Time `json:"jira_change"`

	// JiraCreation The date a Jira issue was created from this finding.
	JiraCreation *time.Time `json:"jira_creation"`
	JiraId       *string    `json:"jira_id,omitempty"`
	JiraKey      *string    `json:"jira_key,omitempty"`
	JiraProject  *int       `json:"jira_project"`
}

// PatchedJIRAProjectRequest defines model for PatchedJIRAProjectRequest.
type PatchedJIRAProjectRequest struct {
	AddVulnerabilityIdToJiraLabel *bool   `json:"add_vulnerability_id_to_jira_label,omitempty"`
	Component                     *string `json:"component,omitempty"`

	// CustomFields JIRA custom field JSON mapping of Id to value, e.g. {"customfield_10122": [{"name": "8.0.1"}]}
	CustomFields *map[string]interface{} `json:"custom_fields"`

	// DefaultAssignee JIRA default assignee (name). If left blank then it defaults to whatever is configured in JIRA.
	DefaultAssignee             *string `json:"default_assignee"`
	EnableEngagementEpicMapping *bool   `json:"enable_engagement_epic_mapping,omitempty"`
	Engagement                  *int    `json:"engagement"`

	// IssueTemplateDir Choose the folder containing the Django templates used to render the JIRA issue description. These are stored in dojo/templates/issue-trackers. Leave empty to use the default jira_full templates.
	IssueTemplateDir *string `json:"issue_template_dir"`
	JiraInstance     *int    `json:"jira_instance"`

	// JiraLabels JIRA issue labels space seperated
	JiraLabels                 *string `json:"jira_labels"`
	Product                    *int    `json:"product"`
	ProductJiraSlaNotification *bool   `json:"product_jira_sla_notification,omitempty"`
	ProjectKey                 *string `json:"project_key,omitempty"`

	// PushAllIssues Automatically maintain parity with JIRA. Always create and update JIRA tickets for findings in this Product.
	PushAllIssues                        *bool `json:"push_all_issues,omitempty"`
	PushNotes                            *bool `json:"push_notes,omitempty"`
	RiskAcceptanceExpirationNotification *bool `json:"risk_acceptance_expiration_notification,omitempty"`
}

// PatchedLanguageRequest defines model for PatchedLanguageRequest.
type PatchedLanguageRequest struct {
	Blank    *int `json:"blank"`
	Code     *int `json:"code"`
	Comment  *int `json:"comment"`
	Files    *int `json:"files"`
	Language *int `json:"language,omitempty"`
	Product  *int `json:"product,omitempty"`
	User     *int `json:"user"`
}

// PatchedLanguageTypeRequest defines model for PatchedLanguageTypeRequest.
type PatchedLanguageTypeRequest struct {
	Color    *string `json:"color"`
	Language *string `json:"language,omitempty"`
}

// PatchedMetaRequest defines model for PatchedMetaRequest.
type PatchedMetaRequest struct {
	Endpoint *int    `json:"endpoint"`
	Finding  *int    `json:"finding"`
	Name     *string `json:"name,omitempty"`
	Product  *int    `json:"product"`
	Value    *string `json:"value,omitempty"`
}

// PatchedNetworkLocationsRequest defines model for PatchedNetworkLocationsRequest.
type PatchedNetworkLocationsRequest struct {
	// Location Location of network testing: Examples: VPN, Internet or Internal.
	Location *string `json:"location,omitempty"`
}

// PatchedNoteRequest defines model for PatchedNoteRequest.
type PatchedNoteRequest struct {
	Edited  *bool   `json:"edited,omitempty"`
	Entry   *string `json:"entry,omitempty"`
	Private *bool   `json:"private,omitempty"`
}

// PatchedNoteTypeRequest defines model for PatchedNoteTypeRequest.
type PatchedNoteTypeRequest struct {
	Description *string `json:"description,omitempty"`
	IsActive    *bool   `json:"is_active,omitempty"`
	IsMandatory *bool   `json:"is_mandatory,omitempty"`
	IsSingle    *bool   `json:"is_single,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// PatchedNotificationsRequest defines model for PatchedNotificationsRequest.
type PatchedNotificationsRequest struct {
	AutoCloseEngagement      *[]PatchedNotificationsRequestAutoCloseEngagement      `json:"auto_close_engagement,omitempty"`
	CloseEngagement          *[]PatchedNotificationsRequestCloseEngagement          `json:"close_engagement,omitempty"`
	CodeReview               *[]PatchedNotificationsRequestCodeReview               `json:"code_review,omitempty"`
	EngagementAdded          *[]PatchedNotificationsRequestEngagementAdded          `json:"engagement_added,omitempty"`
	JiraUpdate               *[]PatchedNotificationsRequestJiraUpdate               `json:"jira_update,omitempty"`
	Other                    *[]PatchedNotificationsRequestOther                    `json:"other,omitempty"`
	Product                  *int                                                   `json:"product"`
	ProductAdded             *[]PatchedNotificationsRequestProductAdded             `json:"product_added,omitempty"`
	ProductTypeAdded         *[]PatchedNotificationsRequestProductTypeAdded         `json:"product_type_added,omitempty"`
	ReviewRequested          *[]PatchedNotificationsRequestReviewRequested          `json:"review_requested,omitempty"`
	RiskAcceptanceExpiration *[]PatchedNotificationsRequestRiskAcceptanceExpiration `json:"risk_acceptance_expiration,omitempty"`
	ScanAdded                *[]PatchedNotificationsRequestScanAdded                `json:"scan_added,omitempty"`
	SlaBreach                *[]PatchedNotificationsRequestSlaBreach                `json:"sla_breach,omitempty"`
	StaleEngagement          *[]PatchedNotificationsRequestStaleEngagement          `json:"stale_engagement,omitempty"`
	Template                 *bool                                                  `json:"template,omitempty"`
	TestAdded                *[]PatchedNotificationsRequestTestAdded                `json:"test_added,omitempty"`
	UpcomingEngagement       *[]PatchedNotificationsRequestUpcomingEngagement       `json:"upcoming_engagement,omitempty"`
	User                     *int                                                   `json:"user"`
	UserMentioned            *[]PatchedNotificationsRequestUserMentioned            `json:"user_mentioned,omitempty"`
}

// PatchedNotificationsRequestAutoCloseEngagement * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type PatchedNotificationsRequestAutoCloseEngagement string

// PatchedNotificationsRequestCloseEngagement * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type PatchedNotificationsRequestCloseEngagement string

// PatchedNotificationsRequestCodeReview * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type PatchedNotificationsRequestCodeReview string

// PatchedNotificationsRequestEngagementAdded * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type PatchedNotificationsRequestEngagementAdded string

// PatchedNotificationsRequestJiraUpdate * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type PatchedNotificationsRequestJiraUpdate string

// PatchedNotificationsRequestOther * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type PatchedNotificationsRequestOther string

// PatchedNotificationsRequestProductAdded * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type PatchedNotificationsRequestProductAdded string

// PatchedNotificationsRequestProductTypeAdded * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type PatchedNotificationsRequestProductTypeAdded string

// PatchedNotificationsRequestReviewRequested * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type PatchedNotificationsRequestReviewRequested string

// PatchedNotificationsRequestRiskAcceptanceExpiration * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type PatchedNotificationsRequestRiskAcceptanceExpiration string

// PatchedNotificationsRequestScanAdded * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type PatchedNotificationsRequestScanAdded string

// PatchedNotificationsRequestSlaBreach * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type PatchedNotificationsRequestSlaBreach string

// PatchedNotificationsRequestStaleEngagement * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type PatchedNotificationsRequestStaleEngagement string

// PatchedNotificationsRequestTestAdded * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type PatchedNotificationsRequestTestAdded string

// PatchedNotificationsRequestUpcomingEngagement * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type PatchedNotificationsRequestUpcomingEngagement string

// PatchedNotificationsRequestUserMentioned * `slack` - slack
// * `msteams` - msteams
// * `mail` - mail
// * `alert` - alert
type PatchedNotificationsRequestUserMentioned string

// PatchedProductAPIScanConfigurationRequest defines model for PatchedProductAPIScanConfigurationRequest.
type PatchedProductAPIScanConfigurationRequest struct {
	Product           *int    `json:"product,omitempty"`
	ServiceKey1       *string `json:"service_key_1"`
	ServiceKey2       *string `json:"service_key_2"`
	ServiceKey3       *string `json:"service_key_3"`
	ToolConfiguration *int    `json:"tool_configuration,omitempty"`
}

// PatchedProductRequest defines model for PatchedProductRequest.
type PatchedProductRequest struct {
	// BusinessCriticality * `very high` - Very High
	// * `high` - High
	// * `medium` - Medium
	// * `low` - Low
	// * `very low` - Very Low
	// * `none` - None
	BusinessCriticality *PatchedProductRequestBusinessCriticality `json:"business_criticality"`
	Description         *string                                   `json:"description,omitempty"`

	// DisableSlaBreachNotifications Disable SLA breach notifications if configured in the global settings
	DisableSlaBreachNotifications *bool `json:"disable_sla_breach_notifications,omitempty"`

	// EnableFullRiskAcceptance Allows full risk acceptance using a risk acceptance form, expiration date, uploaded proof, etc.
	EnableFullRiskAcceptance *bool `json:"enable_full_risk_acceptance,omitempty"`

	// EnableProductTagInheritance Enables product tag inheritance. Any tags added on a product will automatically be added to all Engagements, Tests, and Findings
	EnableProductTagInheritance *bool `json:"enable_product_tag_inheritance,omitempty"`

	// EnableSimpleRiskAcceptance Allows simple risk acceptance by checking/unchecking a checkbox.
	EnableSimpleRiskAcceptance *bool `json:"enable_simple_risk_acceptance,omitempty"`

	// ExternalAudience Specify if the application is used by people outside the organization.
	ExternalAudience *bool `json:"external_audience,omitempty"`

	// InternetAccessible Specify if the application is accessible from the public internet.
	InternetAccessible *bool `json:"internet_accessible,omitempty"`

	// Lifecycle * `construction` - Construction
	// * `production` - Production
	// * `retirement` - Retirement
	Lifecycle *PatchedProductRequestLifecycle `json:"lifecycle"`
	Name      *string                         `json:"name,omitempty"`

	// Origin * `third party library` - Third Party Library
	// * `purchased` - Purchased
	// * `contractor` - Contractor Developed
	// * `internal` - Internally Developed
	// * `open source` - Open Source
	// * `outsourced` - Outsourced
	Origin *PatchedProductRequestOrigin `json:"origin"`

	// Platform * `web service` - API
	// * `desktop` - Desktop
	// * `iot` - Internet of Things
	// * `mobile` - Mobile
	// * `web` - Web
	Platform         *PatchedProductRequestPlatform `json:"platform"`
	ProdNumericGrade *int                           `json:"prod_numeric_grade"`
	ProdType         *int                           `json:"prod_type,omitempty"`
	ProductManager   *int                           `json:"product_manager"`
	Regulations      *[]int                         `json:"regulations,omitempty"`

	// Revenue Estimate the application's revenue.
	Revenue          *string   `json:"revenue"`
	SlaConfiguration *int      `json:"sla_configuration,omitempty"`
	Tags             *[]string `json:"tags,omitempty"`
	TeamManager      *int      `json:"team_manager"`
	TechnicalContact *int      `json:"technical_contact"`

	// UserRecords Estimate the number of user records within the application.
	UserRecords *int `json:"user_records"`
}

// PatchedProductRequestBusinessCriticality * `very high` - Very High
// * `high` - High
// * `medium` - Medium
// * `low` - Low
// * `very low` - Very Low
// * `none` - None
type PatchedProductRequestBusinessCriticality string

// PatchedProductRequestLifecycle * `construction` - Construction
// * `production` - Production
// * `retirement` - Retirement
type PatchedProductRequestLifecycle string

// PatchedProductRequestOrigin * `third party library` - Third Party Library
// * `purchased` - Purchased
// * `contractor` - Contractor Developed
// * `internal` - Internally Developed
// * `open source` - Open Source
// * `outsourced` - Outsourced
type PatchedProductRequestOrigin string

// PatchedProductRequestPlatform * `web service` - API
// * `desktop` - Desktop
// * `iot` - Internet of Things
// * `mobile` - Mobile
// * `web` - Web
type PatchedProductRequestPlatform string

// PatchedProductTypeRequest defines model for PatchedProductTypeRequest.
type PatchedProductTypeRequest struct {
	CriticalProduct *bool   `json:"critical_product,omitempty"`
	Description     *string `json:"description"`
	KeyProduct      *bool   `json:"key_product,omitempty"`
	Name            *string `json:"name,omitempty"`
}

// PatchedRegulationRequest defines model for PatchedRegulationRequest.
type PatchedRegulationRequest struct {
	// Acronym A shortened representation of the name.
	Acronym *string `json:"acronym,omitempty"`

	// Category The subject of the regulation.
	//
	// * `privacy` - Privacy
	// * `finance` - Finance
	// * `education` - Education
	// * `medical` - Medical
	// * `corporate` - Corporate
	// * `other` - Other
	Category *PatchedRegulationRequestCategory `json:"category,omitempty"`

	// Description Information about the regulation's purpose.
	Description *string `json:"description,omitempty"`

	// Jurisdiction The territory over which the regulation applies.
	Jurisdiction *string `json:"jurisdiction,omitempty"`

	// Name The name of the regulation.
	Name *string `json:"name,omitempty"`

	// Reference An external URL for more information.
	Reference *string `json:"reference,omitempty"`
}

// PatchedRegulationRequestCategory The subject of the regulation.
//
// * `privacy` - Privacy
// * `finance` - Finance
// * `education` - Education
// * `medical` - Medical
// * `corporate` - Corporate
// * `other` - Other
type PatchedRegulationRequestCategory string

// PatchedSLAConfigurationRequest defines model for PatchedSLAConfigurationRequest.
type PatchedSLAConfigurationRequest struct {
	// Critical number of days to remediate a critical finding.
	Critical    *int    `json:"critical,omitempty"`
	Description *string `json:"description"`

	// High number of days to remediate a high finding.
	High *int `json:"high,omitempty"`

	// Low number of days to remediate a low finding.
	Low *int `json:"low,omitempty"`

	// Medium number of days to remediate a medium finding.
	Medium *int `json:"medium,omitempty"`

	// Name A unique name for the set of SLAs.
	Name *string `json:"name,omitempty"`
}

// PatchedSonarqubeIssueRequest defines model for PatchedSonarqubeIssueRequest.
type PatchedSonarqubeIssueRequest struct {
	// Key SonarQube issue key
	Key *string `json:"key,omitempty"`

	// Status SonarQube issue status
	Status *string `json:"status,omitempty"`

	// Type SonarQube issue type
	Type *string `json:"type,omitempty"`
}

// PatchedSonarqubeIssueTransitionRequest defines model for PatchedSonarqubeIssueTransitionRequest.
type PatchedSonarqubeIssueTransitionRequest struct {
	FindingStatus   *string `json:"finding_status,omitempty"`
	SonarqubeIssue  *int    `json:"sonarqube_issue,omitempty"`
	SonarqubeStatus *string `json:"sonarqube_status,omitempty"`
	Transitions     *string `json:"transitions,omitempty"`
}

// PatchedStubFindingRequest defines model for PatchedStubFindingRequest.
type PatchedStubFindingRequest struct {
	Date        *openapi_types.Date `json:"date,omitempty"`
	Description *string             `json:"description"`
	Severity    *string             `json:"severity"`
	Title       *string             `json:"title,omitempty"`
}

// PatchedSystemSettingsRequest defines model for PatchedSystemSettingsRequest.
type PatchedSystemSettingsRequest struct {
	AddVulnerabilityIdToJiraLabel *bool `json:"add_vulnerability_id_to_jira_label,omitempty"`

	// AllowAnonymousSurveyRepsonse Enable anyone with a link to the survey to answer a survey
	AllowAnonymousSurveyRepsonse *bool   `json:"allow_anonymous_survey_repsonse,omitempty"`
	Credentials                  *string `json:"credentials,omitempty"`

	// DefaultGroup New users will be assigned to this group.
	DefaultGroup *int `json:"default_group"`

	// DefaultGroupEmailPattern New users will only be assigned to the default group, when their email address matches this regex pattern. This is optional condition.
	DefaultGroupEmailPattern *string `json:"default_group_email_pattern,omitempty"`

	// DefaultGroupRole New users will be assigned to their default group with this role.
	DefaultGroupRole *int `json:"default_group_role"`

	// DeleteDuplicates Requires next setting: maximum number of duplicates to retain.
	DeleteDuplicates *bool `json:"delete_duplicates,omitempty"`

	// DisableJiraWebhookSecret Allows incoming requests without a secret (discouraged legacy behaviour)
	DisableJiraWebhookSecret *bool `json:"disable_jira_webhook_secret,omitempty"`

	// Disclaimer Include this custom disclaimer on all notifications and generated reports
	Disclaimer *string `json:"disclaimer,omitempty"`
	EmailFrom  *string `json:"email_from,omitempty"`

	// EnableAuditlog With this setting turned on, Dojo maintains an audit log of changes made to entities (Findings, Tests, Engagements, Procuts, ...)If you run big import you may want to disable this because the way django-auditlog currently works, there's a big performance hit. Especially during (re-)imports.
	EnableAuditlog *bool `json:"enable_auditlog,omitempty"`

	// EnableBenchmark Enables Benchmarks such as the OWASP ASVS (Application Security Verification Standard)
	EnableBenchmark *bool `json:"enable_benchmark,omitempty"`

	// EnableCalendar With this setting turned off, the Calendar will be disabled in the user interface.
	EnableCalendar *bool `json:"enable_calendar,omitempty"`

	// EnableChecklists With this setting turned off, checklists will be disabled in the user interface.
	EnableChecklists *bool `json:"enable_checklists,omitempty"`

	// EnableCredentials With this setting turned off, credentials will be disabled in the user interface.
	EnableCredentials *bool `json:"enable_credentials,omitempty"`

	// EnableDeduplication With this setting turned on, Dojo deduplicates findings by comparing endpoints, cwe fields, and titles. If two findings share a URL and have the same CWE or title, Dojo marks the less recent finding as a duplicate. When deduplication is enabled, a list of deduplicated findings is added to the engagement view.
	EnableDeduplication *bool `json:"enable_deduplication,omitempty"`

	// EnableEndpointMetadataImport With this setting turned off, endpoint metadata import will be disabled in the user interface.
	EnableEndpointMetadataImport *bool `json:"enable_endpoint_metadata_import,omitempty"`

	// EnableFindingGroups With this setting turned off, the Finding Groups will be disabled.
	EnableFindingGroups *bool `json:"enable_finding_groups,omitempty"`

	// EnableFindingSla Enables Finding SLA's for time to remediate.
	EnableFindingSla *bool `json:"enable_finding_sla,omitempty"`
	EnableGithub     *bool `json:"enable_github,omitempty"`
	EnableJira       *bool `json:"enable_jira,omitempty"`

	// EnableJiraWebHook Please note: It is strongly recommended to use a secret below and / or IP whitelist the JIRA server using a proxy such as Nginx.
	EnableJiraWebHook          *bool `json:"enable_jira_web_hook,omitempty"`
	EnableMailNotifications    *bool `json:"enable_mail_notifications,omitempty"`
	EnableMsteamsNotifications *bool `json:"enable_msteams_notifications,omitempty"`

	// EnableNotifySlaActive Enables Notify when time to remediate according to Finding SLA's is breached for active Findings.
	EnableNotifySlaActive *bool `json:"enable_notify_sla_active,omitempty"`

	// EnableNotifySlaActiveVerified Enables Notify when time to remediate according to Finding SLA's is breached for active, verified Findings.
	EnableNotifySlaActiveVerified *bool `json:"enable_notify_sla_active_verified,omitempty"`

	// EnableNotifySlaExponentialBackoff Enable an exponential backoff strategy for SLA breach notifications, e.g. 1, 2, 4, 8, etc. Otherwise it alerts every day
	EnableNotifySlaExponentialBackoff *bool `json:"enable_notify_sla_exponential_backoff,omitempty"`

	// EnableNotifySlaJiraOnly Enables Notify when time to remediate according to Finding SLA's is breached for Findings that are linked to JIRA issues. Notification is disabled for Findings not linked to JIRA issues
	EnableNotifySlaJiraOnly *bool `json:"enable_notify_sla_jira_only,omitempty"`

	// EnableProductGrade Displays a grade letter next to a product to show the overall health.
	EnableProductGrade *bool `json:"enable_product_grade,omitempty"`

	// EnableProductTagInheritance Enables product tag inheritance globally for all products. Any tags added on a product will automatically be added to all Engagements, Tests, and Findings
	EnableProductTagInheritance *bool `json:"enable_product_tag_inheritance,omitempty"`

	// EnableProductTrackingFiles With this setting turned off, the product tracking files will be disabled in the user interface.
	EnableProductTrackingFiles *bool `json:"enable_product_tracking_files,omitempty"`

	// EnableQuestionnaires With this setting turned off, questionnaires will be disabled in the user interface.
	EnableQuestionnaires     *bool `json:"enable_questionnaires,omitempty"`
	EnableSlackNotifications *bool `json:"enable_slack_notifications,omitempty"`

	// EnableTemplateMatch Enables global remediation advice and matching on CWE and Title. The text will be replaced for mitigation, impact and references on a finding. Useful for providing consistent impact and remediation advice regardless of the scanner.
	EnableTemplateMatch *bool `json:"enable_template_match,omitempty"`

	// EnableUserProfileEditable When turned on users can edit their profiles
	EnableUserProfileEditable *bool `json:"enable_user_profile_editable,omitempty"`

	// EngagementAutoClose Closes an engagement after 3 days (default) past due date including last update.
	EngagementAutoClose *bool `json:"engagement_auto_close,omitempty"`

	// EngagementAutoCloseDays Closes an engagement after the specified number of days past due date including last update.
	EngagementAutoCloseDays *int `json:"engagement_auto_close_days,omitempty"`

	// FalsePositiveHistory (EXPERIMENTAL) DefectDojo will automatically mark the finding as a false positive if an equal finding (according to its dedupe algorithm) has been previously marked as a false positive on the same product. ATTENTION: Although the deduplication algorithm is used to determine if a finding should be marked as a false positive, this feature will not work if deduplication is enabled since it doesn't make sense to use both.
	FalsePositiveHistory *bool `json:"false_positive_history,omitempty"`

	// JiraLabels JIRA issue labels space seperated
	JiraLabels *string `json:"jira_labels"`

	// JiraMinimumSeverity * `Critical` - Critical
	// * `High` - High
	// * `Medium` - Medium
	// * `Low` - Low
	// * `Info` - Info
	JiraMinimumSeverity *PatchedSystemSettingsRequestJiraMinimumSeverity `json:"jira_minimum_severity"`

	// JiraWebhookSecret Secret needed in URL for incoming JIRA Webhook
	JiraWebhookSecret *string `json:"jira_webhook_secret"`

	// LowercaseCharacterRequired Requires user passwords to contain at least one lowercase letter (a-z).
	LowercaseCharacterRequired *bool   `json:"lowercase_character_required,omitempty"`
	MailNotificationsTo        *string `json:"mail_notifications_to,omitempty"`

	// MaxDupes When enabled, if a single issue reaches the maximum number of duplicates, the oldest will be deleted. Duplicate will not be deleted when left empty. A value of 0 will remove all duplicates.
	MaxDupes *int `json:"max_dupes"`

	// MaximumPasswordLength Requires user to set passwords less than maximum length.
	MaximumPasswordLength *int `json:"maximum_password_length,omitempty"`

	// MinimumPasswordLength Requires user to set passwords greater than minimum length.
	MinimumPasswordLength *int `json:"minimum_password_length,omitempty"`

	// MsteamsUrl The full URL of the incoming webhook
	MsteamsUrl *string `json:"msteams_url,omitempty"`

	// NonCommonPasswordRequired Requires user passwords to not be part of list of common passwords.
	NonCommonPasswordRequired *bool `json:"non_common_password_required,omitempty"`

	// NumberCharacterRequired Requires user passwords to contain at least one digit (0-9).
	NumberCharacterRequired *bool   `json:"number_character_required,omitempty"`
	ProductGrade            *string `json:"product_grade,omitempty"`

	// ProductGradeA Percentage score for an 'A' >=
	ProductGradeA *int `json:"product_grade_a,omitempty"`

	// ProductGradeB Percentage score for a 'B' >=
	ProductGradeB *int `json:"product_grade_b,omitempty"`

	// ProductGradeC Percentage score for a 'C' >=
	ProductGradeC *int `json:"product_grade_c,omitempty"`

	// ProductGradeD Percentage score for a 'D' >=
	ProductGradeD *int `json:"product_grade_d,omitempty"`

	// ProductGradeF Percentage score for an 'F' <=
	ProductGradeF *int `json:"product_grade_f,omitempty"`

	// RetroactiveFalsePositiveHistory (EXPERIMENTAL) FP History will also retroactively mark/unmark all existing equal findings in the same product as a false positives. Only works if the False Positive History feature is also enabled.
	RetroactiveFalsePositiveHistory *bool `json:"retroactive_false_positive_history,omitempty"`

	// RiskAcceptanceFormDefaultDays Default expiry period for risk acceptance form.
	RiskAcceptanceFormDefaultDays *int `json:"risk_acceptance_form_default_days"`

	// RiskAcceptanceNotifyBeforeExpiration Notify X days before risk acceptance expires. Leave empty to disable.
	RiskAcceptanceNotifyBeforeExpiration *int `json:"risk_acceptance_notify_before_expiration"`

	// SlackChannel Optional. Needed if you want to send global notifications.
	SlackChannel *string `json:"slack_channel,omitempty"`

	// SlackToken Token required for interacting with Slack. Get one at https://api.slack.com/tokens
	SlackToken *string `json:"slack_token,omitempty"`

	// SlackUsername Optional. Will take your bot name otherwise.
	SlackUsername *string `json:"slack_username,omitempty"`

	// SpecialCharacterRequired Requires user passwords to contain at least one special character (()[]{}|\`~!@#$%^&*_-+=;:'",<>./?).
	SpecialCharacterRequired *bool   `json:"special_character_required,omitempty"`
	TeamName                 *string `json:"team_name,omitempty"`

	// TimeZone * `Africa/Abidjan` - Africa/Abidjan
	// * `Africa/Accra` - Africa/Accra
	// * `Africa/Addis_Ababa` - Africa/Addis_Ababa
	// * `Africa/Algiers` - Africa/Algiers
	// * `Africa/Asmara` - Africa/Asmara
	// * `Africa/Asmera` - Africa/Asmera
	// * `Africa/Bamako` - Africa/Bamako
	// * `Africa/Bangui` - Africa/Bangui
	// * `Africa/Banjul` - Africa/Banjul
	// * `Africa/Bissau` - Africa/Bissau
	// * `Africa/Blantyre` - Africa/Blantyre
	// * `Africa/Brazzaville` - Africa/Brazzaville
	// * `Africa/Bujumbura` - Africa/Bujumbura
	// * `Africa/Cairo` - Africa/Cairo
	// * `Africa/Casablanca` - Africa/Casablanca
	// * `Africa/Ceuta` - Africa/Ceuta
	// * `Africa/Conakry` - Africa/Conakry
	// * `Africa/Dakar` - Africa/Dakar
	// * `Africa/Dar_es_Salaam` - Africa/Dar_es_Salaam
	// * `Africa/Djibouti` - Africa/Djibouti
	// * `Africa/Douala` - Africa/Douala
	// * `Africa/El_Aaiun` - Africa/El_Aaiun
	// * `Africa/Freetown` - Africa/Freetown
	// * `Africa/Gaborone` - Africa/Gaborone
	// * `Africa/Harare` - Africa/Harare
	// * `Africa/Johannesburg` - Africa/Johannesburg
	// * `Africa/Juba` - Africa/Juba
	// * `Africa/Kampala` - Africa/Kampala
	// * `Africa/Khartoum` - Africa/Khartoum
	// * `Africa/Kigali` - Africa/Kigali
	// * `Africa/Kinshasa` - Africa/Kinshasa
	// * `Africa/Lagos` - Africa/Lagos
	// * `Africa/Libreville` - Africa/Libreville
	// * `Africa/Lome` - Africa/Lome
	// * `Africa/Luanda` - Africa/Luanda
	// * `Africa/Lubumbashi` - Africa/Lubumbashi
	// * `Africa/Lusaka` - Africa/Lusaka
	// * `Africa/Malabo` - Africa/Malabo
	// * `Africa/Maputo` - Africa/Maputo
	// * `Africa/Maseru` - Africa/Maseru
	// * `Africa/Mbabane` - Africa/Mbabane
	// * `Africa/Mogadishu` - Africa/Mogadishu
	// * `Africa/Monrovia` - Africa/Monrovia
	// * `Africa/Nairobi` - Africa/Nairobi
	// * `Africa/Ndjamena` - Africa/Ndjamena
	// * `Africa/Niamey` - Africa/Niamey
	// * `Africa/Nouakchott` - Africa/Nouakchott
	// * `Africa/Ouagadougou` - Africa/Ouagadougou
	// * `Africa/Porto-Novo` - Africa/Porto-Novo
	// * `Africa/Sao_Tome` - Africa/Sao_Tome
	// * `Africa/Timbuktu` - Africa/Timbuktu
	// * `Africa/Tripoli` - Africa/Tripoli
	// * `Africa/Tunis` - Africa/Tunis
	// * `Africa/Windhoek` - Africa/Windhoek
	// * `America/Adak` - America/Adak
	// * `America/Anchorage` - America/Anchorage
	// * `America/Anguilla` - America/Anguilla
	// * `America/Antigua` - America/Antigua
	// * `America/Araguaina` - America/Araguaina
	// * `America/Argentina/Buenos_Aires` - America/Argentina/Buenos_Aires
	// * `America/Argentina/Catamarca` - America/Argentina/Catamarca
	// * `America/Argentina/ComodRivadavia` - America/Argentina/ComodRivadavia
	// * `America/Argentina/Cordoba` - America/Argentina/Cordoba
	// * `America/Argentina/Jujuy` - America/Argentina/Jujuy
	// * `America/Argentina/La_Rioja` - America/Argentina/La_Rioja
	// * `America/Argentina/Mendoza` - America/Argentina/Mendoza
	// * `America/Argentina/Rio_Gallegos` - America/Argentina/Rio_Gallegos
	// * `America/Argentina/Salta` - America/Argentina/Salta
	// * `America/Argentina/San_Juan` - America/Argentina/San_Juan
	// * `America/Argentina/San_Luis` - America/Argentina/San_Luis
	// * `America/Argentina/Tucuman` - America/Argentina/Tucuman
	// * `America/Argentina/Ushuaia` - America/Argentina/Ushuaia
	// * `America/Aruba` - America/Aruba
	// * `America/Asuncion` - America/Asuncion
	// * `America/Atikokan` - America/Atikokan
	// * `America/Atka` - America/Atka
	// * `America/Bahia` - America/Bahia
	// * `America/Bahia_Banderas` - America/Bahia_Banderas
	// * `America/Barbados` - America/Barbados
	// * `America/Belem` - America/Belem
	// * `America/Belize` - America/Belize
	// * `America/Blanc-Sablon` - America/Blanc-Sablon
	// * `America/Boa_Vista` - America/Boa_Vista
	// * `America/Bogota` - America/Bogota
	// * `America/Boise` - America/Boise
	// * `America/Buenos_Aires` - America/Buenos_Aires
	// * `America/Cambridge_Bay` - America/Cambridge_Bay
	// * `America/Campo_Grande` - America/Campo_Grande
	// * `America/Cancun` - America/Cancun
	// * `America/Caracas` - America/Caracas
	// * `America/Catamarca` - America/Catamarca
	// * `America/Cayenne` - America/Cayenne
	// * `America/Cayman` - America/Cayman
	// * `America/Chicago` - America/Chicago
	// * `America/Chihuahua` - America/Chihuahua
	// * `America/Ciudad_Juarez` - America/Ciudad_Juarez
	// * `America/Coral_Harbour` - America/Coral_Harbour
	// * `America/Cordoba` - America/Cordoba
	// * `America/Costa_Rica` - America/Costa_Rica
	// * `America/Creston` - America/Creston
	// * `America/Cuiaba` - America/Cuiaba
	// * `America/Curacao` - America/Curacao
	// * `America/Danmarkshavn` - America/Danmarkshavn
	// * `America/Dawson` - America/Dawson
	// * `America/Dawson_Creek` - America/Dawson_Creek
	// * `America/Denver` - America/Denver
	// * `America/Detroit` - America/Detroit
	// * `America/Dominica` - America/Dominica
	// * `America/Edmonton` - America/Edmonton
	// * `America/Eirunepe` - America/Eirunepe
	// * `America/El_Salvador` - America/El_Salvador
	// * `America/Ensenada` - America/Ensenada
	// * `America/Fort_Nelson` - America/Fort_Nelson
	// * `America/Fort_Wayne` - America/Fort_Wayne
	// * `America/Fortaleza` - America/Fortaleza
	// * `America/Glace_Bay` - America/Glace_Bay
	// * `America/Godthab` - America/Godthab
	// * `America/Goose_Bay` - America/Goose_Bay
	// * `America/Grand_Turk` - America/Grand_Turk
	// * `America/Grenada` - America/Grenada
	// * `America/Guadeloupe` - America/Guadeloupe
	// * `America/Guatemala` - America/Guatemala
	// * `America/Guayaquil` - America/Guayaquil
	// * `America/Guyana` - America/Guyana
	// * `America/Halifax` - America/Halifax
	// * `America/Havana` - America/Havana
	// * `America/Hermosillo` - America/Hermosillo
	// * `America/Indiana/Indianapolis` - America/Indiana/Indianapolis
	// * `America/Indiana/Knox` - America/Indiana/Knox
	// * `America/Indiana/Marengo` - America/Indiana/Marengo
	// * `America/Indiana/Petersburg` - America/Indiana/Petersburg
	// * `America/Indiana/Tell_City` - America/Indiana/Tell_City
	// * `America/Indiana/Vevay` - America/Indiana/Vevay
	// * `America/Indiana/Vincennes` - America/Indiana/Vincennes
	// * `America/Indiana/Winamac` - America/Indiana/Winamac
	// * `America/Indianapolis` - America/Indianapolis
	// * `America/Inuvik` - America/Inuvik
	// * `America/Iqaluit` - America/Iqaluit
	// * `America/Jamaica` - America/Jamaica
	// * `America/Jujuy` - America/Jujuy
	// * `America/Juneau` - America/Juneau
	// * `America/Kentucky/Louisville` - America/Kentucky/Louisville
	// * `America/Kentucky/Monticello` - America/Kentucky/Monticello
	// * `America/Knox_IN` - America/Knox_IN
	// * `America/Kralendijk` - America/Kralendijk
	// * `America/La_Paz` - America/La_Paz
	// * `America/Lima` - America/Lima
	// * `America/Los_Angeles` - America/Los_Angeles
	// * `America/Louisville` - America/Louisville
	// * `America/Lower_Princes` - America/Lower_Princes
	// * `America/Maceio` - America/Maceio
	// * `America/Managua` - America/Managua
	// * `America/Manaus` - America/Manaus
	// * `America/Marigot` - America/Marigot
	// * `America/Martinique` - America/Martinique
	// * `America/Matamoros` - America/Matamoros
	// * `America/Mazatlan` - America/Mazatlan
	// * `America/Mendoza` - America/Mendoza
	// * `America/Menominee` - America/Menominee
	// * `America/Merida` - America/Merida
	// * `America/Metlakatla` - America/Metlakatla
	// * `America/Mexico_City` - America/Mexico_City
	// * `America/Miquelon` - America/Miquelon
	// * `America/Moncton` - America/Moncton
	// * `America/Monterrey` - America/Monterrey
	// * `America/Montevideo` - America/Montevideo
	// * `America/Montreal` - America/Montreal
	// * `America/Montserrat` - America/Montserrat
	// * `America/Nassau` - America/Nassau
	// * `America/New_York` - America/New_York
	// * `America/Nipigon` - America/Nipigon
	// * `America/Nome` - America/Nome
	// * `America/Noronha` - America/Noronha
	// * `America/North_Dakota/Beulah` - America/North_Dakota/Beulah
	// * `America/North_Dakota/Center` - America/North_Dakota/Center
	// * `America/North_Dakota/New_Salem` - America/North_Dakota/New_Salem
	// * `America/Nuuk` - America/Nuuk
	// * `America/Ojinaga` - America/Ojinaga
	// * `America/Panama` - America/Panama
	// * `America/Pangnirtung` - America/Pangnirtung
	// * `America/Paramaribo` - America/Paramaribo
	// * `America/Phoenix` - America/Phoenix
	// * `America/Port-au-Prince` - America/Port-au-Prince
	// * `America/Port_of_Spain` - America/Port_of_Spain
	// * `America/Porto_Acre` - America/Porto_Acre
	// * `America/Porto_Velho` - America/Porto_Velho
	// * `America/Puerto_Rico` - America/Puerto_Rico
	// * `America/Punta_Arenas` - America/Punta_Arenas
	// * `America/Rainy_River` - America/Rainy_River
	// * `America/Rankin_Inlet` - America/Rankin_Inlet
	// * `America/Recife` - America/Recife
	// * `America/Regina` - America/Regina
	// * `America/Resolute` - America/Resolute
	// * `America/Rio_Branco` - America/Rio_Branco
	// * `America/Rosario` - America/Rosario
	// * `America/Santa_Isabel` - America/Santa_Isabel
	// * `America/Santarem` - America/Santarem
	// * `America/Santiago` - America/Santiago
	// * `America/Santo_Domingo` - America/Santo_Domingo
	// * `America/Sao_Paulo` - America/Sao_Paulo
	// * `America/Scoresbysund` - America/Scoresbysund
	// * `America/Shiprock` - America/Shiprock
	// * `America/Sitka` - America/Sitka
	// * `America/St_Barthelemy` - America/St_Barthelemy
	// * `America/St_Johns` - America/St_Johns
	// * `America/St_Kitts` - America/St_Kitts
	// * `America/St_Lucia` - America/St_Lucia
	// * `America/St_Thomas` - America/St_Thomas
	// * `America/St_Vincent` - America/St_Vincent
	// * `America/Swift_Current` - America/Swift_Current
	// * `America/Tegucigalpa` - America/Tegucigalpa
	// * `America/Thule` - America/Thule
	// * `America/Thunder_Bay` - America/Thunder_Bay
	// * `America/Tijuana` - America/Tijuana
	// * `America/Toronto` - America/Toronto
	// * `America/Tortola` - America/Tortola
	// * `America/Vancouver` - America/Vancouver
	// * `America/Virgin` - America/Virgin
	// * `America/Whitehorse` - America/Whitehorse
	// * `America/Winnipeg` - America/Winnipeg
	// * `America/Yakutat` - America/Yakutat
	// * `America/Yellowknife` - America/Yellowknife
	// * `Antarctica/Casey` - Antarctica/Casey
	// * `Antarctica/Davis` - Antarctica/Davis
	// * `Antarctica/DumontDUrville` - Antarctica/DumontDUrville
	// * `Antarctica/Macquarie` - Antarctica/Macquarie
	// * `Antarctica/Mawson` - Antarctica/Mawson
	// * `Antarctica/McMurdo` - Antarctica/McMurdo
	// * `Antarctica/Palmer` - Antarctica/Palmer
	// * `Antarctica/Rothera` - Antarctica/Rothera
	// * `Antarctica/South_Pole` - Antarctica/South_Pole
	// * `Antarctica/Syowa` - Antarctica/Syowa
	// * `Antarctica/Troll` - Antarctica/Troll
	// * `Antarctica/Vostok` - Antarctica/Vostok
	// * `Arctic/Longyearbyen` - Arctic/Longyearbyen
	// * `Asia/Aden` - Asia/Aden
	// * `Asia/Almaty` - Asia/Almaty
	// * `Asia/Amman` - Asia/Amman
	// * `Asia/Anadyr` - Asia/Anadyr
	// * `Asia/Aqtau` - Asia/Aqtau
	// * `Asia/Aqtobe` - Asia/Aqtobe
	// * `Asia/Ashgabat` - Asia/Ashgabat
	// * `Asia/Ashkhabad` - Asia/Ashkhabad
	// * `Asia/Atyrau` - Asia/Atyrau
	// * `Asia/Baghdad` - Asia/Baghdad
	// * `Asia/Bahrain` - Asia/Bahrain
	// * `Asia/Baku` - Asia/Baku
	// * `Asia/Bangkok` - Asia/Bangkok
	// * `Asia/Barnaul` - Asia/Barnaul
	// * `Asia/Beirut` - Asia/Beirut
	// * `Asia/Bishkek` - Asia/Bishkek
	// * `Asia/Brunei` - Asia/Brunei
	// * `Asia/Calcutta` - Asia/Calcutta
	// * `Asia/Chita` - Asia/Chita
	// * `Asia/Choibalsan` - Asia/Choibalsan
	// * `Asia/Chongqing` - Asia/Chongqing
	// * `Asia/Chungking` - Asia/Chungking
	// * `Asia/Colombo` - Asia/Colombo
	// * `Asia/Dacca` - Asia/Dacca
	// * `Asia/Damascus` - Asia/Damascus
	// * `Asia/Dhaka` - Asia/Dhaka
	// * `Asia/Dili` - Asia/Dili
	// * `Asia/Dubai` - Asia/Dubai
	// * `Asia/Dushanbe` - Asia/Dushanbe
	// * `Asia/Famagusta` - Asia/Famagusta
	// * `Asia/Gaza` - Asia/Gaza
	// * `Asia/Harbin` - Asia/Harbin
	// * `Asia/Hebron` - Asia/Hebron
	// * `Asia/Ho_Chi_Minh` - Asia/Ho_Chi_Minh
	// * `Asia/Hong_Kong` - Asia/Hong_Kong
	// * `Asia/Hovd` - Asia/Hovd
	// * `Asia/Irkutsk` - Asia/Irkutsk
	// * `Asia/Istanbul` - Asia/Istanbul
	// * `Asia/Jakarta` - Asia/Jakarta
	// * `Asia/Jayapura` - Asia/Jayapura
	// * `Asia/Jerusalem` - Asia/Jerusalem
	// * `Asia/Kabul` - Asia/Kabul
	// * `Asia/Kamchatka` - Asia/Kamchatka
	// * `Asia/Karachi` - Asia/Karachi
	// * `Asia/Kashgar` - Asia/Kashgar
	// * `Asia/Kathmandu` - Asia/Kathmandu
	// * `Asia/Katmandu` - Asia/Katmandu
	// * `Asia/Khandyga` - Asia/Khandyga
	// * `Asia/Kolkata` - Asia/Kolkata
	// * `Asia/Krasnoyarsk` - Asia/Krasnoyarsk
	// * `Asia/Kuala_Lumpur` - Asia/Kuala_Lumpur
	// * `Asia/Kuching` - Asia/Kuching
	// * `Asia/Kuwait` - Asia/Kuwait
	// * `Asia/Macao` - Asia/Macao
	// * `Asia/Macau` - Asia/Macau
	// * `Asia/Magadan` - Asia/Magadan
	// * `Asia/Makassar` - Asia/Makassar
	// * `Asia/Manila` - Asia/Manila
	// * `Asia/Muscat` - Asia/Muscat
	// * `Asia/Nicosia` - Asia/Nicosia
	// * `Asia/Novokuznetsk` - Asia/Novokuznetsk
	// * `Asia/Novosibirsk` - Asia/Novosibirsk
	// * `Asia/Omsk` - Asia/Omsk
	// * `Asia/Oral` - Asia/Oral
	// * `Asia/Phnom_Penh` - Asia/Phnom_Penh
	// * `Asia/Pontianak` - Asia/Pontianak
	// * `Asia/Pyongyang` - Asia/Pyongyang
	// * `Asia/Qatar` - Asia/Qatar
	// * `Asia/Qostanay` - Asia/Qostanay
	// * `Asia/Qyzylorda` - Asia/Qyzylorda
	// * `Asia/Rangoon` - Asia/Rangoon
	// * `Asia/Riyadh` - Asia/Riyadh
	// * `Asia/Saigon` - Asia/Saigon
	// * `Asia/Sakhalin` - Asia/Sakhalin
	// * `Asia/Samarkand` - Asia/Samarkand
	// * `Asia/Seoul` - Asia/Seoul
	// * `Asia/Shanghai` - Asia/Shanghai
	// * `Asia/Singapore` - Asia/Singapore
	// * `Asia/Srednekolymsk` - Asia/Srednekolymsk
	// * `Asia/Taipei` - Asia/Taipei
	// * `Asia/Tashkent` - Asia/Tashkent
	// * `Asia/Tbilisi` - Asia/Tbilisi
	// * `Asia/Tehran` - Asia/Tehran
	// * `Asia/Tel_Aviv` - Asia/Tel_Aviv
	// * `Asia/Thimbu` - Asia/Thimbu
	// * `Asia/Thimphu` - Asia/Thimphu
	// * `Asia/Tokyo` - Asia/Tokyo
	// * `Asia/Tomsk` - Asia/Tomsk
	// * `Asia/Ujung_Pandang` - Asia/Ujung_Pandang
	// * `Asia/Ulaanbaatar` - Asia/Ulaanbaatar
	// * `Asia/Ulan_Bator` - Asia/Ulan_Bator
	// * `Asia/Urumqi` - Asia/Urumqi
	// * `Asia/Ust-Nera` - Asia/Ust-Nera
	// * `Asia/Vientiane` - Asia/Vientiane
	// * `Asia/Vladivostok` - Asia/Vladivostok
	// * `Asia/Yakutsk` - Asia/Yakutsk
	// * `Asia/Yangon` - Asia/Yangon
	// * `Asia/Yekaterinburg` - Asia/Yekaterinburg
	// * `Asia/Yerevan` - Asia/Yerevan
	// * `Atlantic/Azores` - Atlantic/Azores
	// * `Atlantic/Bermuda` - Atlantic/Bermuda
	// * `Atlantic/Canary` - Atlantic/Canary
	// * `Atlantic/Cape_Verde` - Atlantic/Cape_Verde
	// * `Atlantic/Faeroe` - Atlantic/Faeroe
	// * `Atlantic/Faroe` - Atlantic/Faroe
	// * `Atlantic/Jan_Mayen` - Atlantic/Jan_Mayen
	// * `Atlantic/Madeira` - Atlantic/Madeira
	// * `Atlantic/Reykjavik` - Atlantic/Reykjavik
	// * `Atlantic/South_Georgia` - Atlantic/South_Georgia
	// * `Atlantic/St_Helena` - Atlantic/St_Helena
	// * `Atlantic/Stanley` - Atlantic/Stanley
	// * `Australia/ACT` - Australia/ACT
	// * `Australia/Adelaide` - Australia/Adelaide
	// * `Australia/Brisbane` - Australia/Brisbane
	// * `Australia/Broken_Hill` - Australia/Broken_Hill
	// * `Australia/Canberra` - Australia/Canberra
	// * `Australia/Currie` - Australia/Currie
	// * `Australia/Darwin` - Australia/Darwin
	// * `Australia/Eucla` - Australia/Eucla
	// * `Australia/Hobart` - Australia/Hobart
	// * `Australia/LHI` - Australia/LHI
	// * `Australia/Lindeman` - Australia/Lindeman
	// * `Australia/Lord_Howe` - Australia/Lord_Howe
	// * `Australia/Melbourne` - Australia/Melbourne
	// * `Australia/NSW` - Australia/NSW
	// * `Australia/North` - Australia/North
	// * `Australia/Perth` - Australia/Perth
	// * `Australia/Queensland` - Australia/Queensland
	// * `Australia/South` - Australia/South
	// * `Australia/Sydney` - Australia/Sydney
	// * `Australia/Tasmania` - Australia/Tasmania
	// * `Australia/Victoria` - Australia/Victoria
	// * `Australia/West` - Australia/West
	// * `Australia/Yancowinna` - Australia/Yancowinna
	// * `Brazil/Acre` - Brazil/Acre
	// * `Brazil/DeNoronha` - Brazil/DeNoronha
	// * `Brazil/East` - Brazil/East
	// * `Brazil/West` - Brazil/West
	// * `CET` - CET
	// * `CST6CDT` - CST6CDT
	// * `Canada/Atlantic` - Canada/Atlantic
	// * `Canada/Central` - Canada/Central
	// * `Canada/Eastern` - Canada/Eastern
	// * `Canada/Mountain` - Canada/Mountain
	// * `Canada/Newfoundland` - Canada/Newfoundland
	// * `Canada/Pacific` - Canada/Pacific
	// * `Canada/Saskatchewan` - Canada/Saskatchewan
	// * `Canada/Yukon` - Canada/Yukon
	// * `Chile/Continental` - Chile/Continental
	// * `Chile/EasterIsland` - Chile/EasterIsland
	// * `Cuba` - Cuba
	// * `EET` - EET
	// * `EST` - EST
	// * `EST5EDT` - EST5EDT
	// * `Egypt` - Egypt
	// * `Eire` - Eire
	// * `Etc/GMT` - Etc/GMT
	// * `Etc/GMT+0` - Etc/GMT+0
	// * `Etc/GMT+1` - Etc/GMT+1
	// * `Etc/GMT+10` - Etc/GMT+10
	// * `Etc/GMT+11` - Etc/GMT+11
	// * `Etc/GMT+12` - Etc/GMT+12
	// * `Etc/GMT+2` - Etc/GMT+2
	// * `Etc/GMT+3` - Etc/GMT+3
	// * `Etc/GMT+4` - Etc/GMT+4
	// * `Etc/GMT+5` - Etc/GMT+5
	// * `Etc/GMT+6` - Etc/GMT+6
	// * `Etc/GMT+7` - Etc/GMT+7
	// * `Etc/GMT+8` - Etc/GMT+8
	// * `Etc/GMT+9` - Etc/GMT+9
	// * `Etc/GMT-0` - Etc/GMT-0
	// * `Etc/GMT-1` - Etc/GMT-1
	// * `Etc/GMT-10` - Etc/GMT-10
	// * `Etc/GMT-11` - Etc/GMT-11
	// * `Etc/GMT-12` - Etc/GMT-12
	// * `Etc/GMT-13` - Etc/GMT-13
	// * `Etc/GMT-14` - Etc/GMT-14
	// * `Etc/GMT-2` - Etc/GMT-2
	// * `Etc/GMT-3` - Etc/GMT-3
	// * `Etc/GMT-4` - Etc/GMT-4
	// * `Etc/GMT-5` - Etc/GMT-5
	// * `Etc/GMT-6` - Etc/GMT-6
	// * `Etc/GMT-7` - Etc/GMT-7
	// * `Etc/GMT-8` - Etc/GMT-8
	// * `Etc/GMT-9` - Etc/GMT-9
	// * `Etc/GMT0` - Etc/GMT0
	// * `Etc/Greenwich` - Etc/Greenwich
	// * `Etc/UCT` - Etc/UCT
	// * `Etc/UTC` - Etc/UTC
	// * `Etc/Universal` - Etc/Universal
	// * `Etc/Zulu` - Etc/Zulu
	// * `Europe/Amsterdam` - Europe/Amsterdam
	// * `Europe/Andorra` - Europe/Andorra
	// * `Europe/Astrakhan` - Europe/Astrakhan
	// * `Europe/Athens` - Europe/Athens
	// * `Europe/Belfast` - Europe/Belfast
	// * `Europe/Belgrade` - Europe/Belgrade
	// * `Europe/Berlin` - Europe/Berlin
	// * `Europe/Bratislava` - Europe/Bratislava
	// * `Europe/Brussels` - Europe/Brussels
	// * `Europe/Bucharest` - Europe/Bucharest
	// * `Europe/Budapest` - Europe/Budapest
	// * `Europe/Busingen` - Europe/Busingen
	// * `Europe/Chisinau` - Europe/Chisinau
	// * `Europe/Copenhagen` - Europe/Copenhagen
	// * `Europe/Dublin` - Europe/Dublin
	// * `Europe/Gibraltar` - Europe/Gibraltar
	// * `Europe/Guernsey` - Europe/Guernsey
	// * `Europe/Helsinki` - Europe/Helsinki
	// * `Europe/Isle_of_Man` - Europe/Isle_of_Man
	// * `Europe/Istanbul` - Europe/Istanbul
	// * `Europe/Jersey` - Europe/Jersey
	// * `Europe/Kaliningrad` - Europe/Kaliningrad
	// * `Europe/Kiev` - Europe/Kiev
	// * `Europe/Kirov` - Europe/Kirov
	// * `Europe/Kyiv` - Europe/Kyiv
	// * `Europe/Lisbon` - Europe/Lisbon
	// * `Europe/Ljubljana` - Europe/Ljubljana
	// * `Europe/London` - Europe/London
	// * `Europe/Luxembourg` - Europe/Luxembourg
	// * `Europe/Madrid` - Europe/Madrid
	// * `Europe/Malta` - Europe/Malta
	// * `Europe/Mariehamn` - Europe/Mariehamn
	// * `Europe/Minsk` - Europe/Minsk
	// * `Europe/Monaco` - Europe/Monaco
	// * `Europe/Moscow` - Europe/Moscow
	// * `Europe/Nicosia` - Europe/Nicosia
	// * `Europe/Oslo` - Europe/Oslo
	// * `Europe/Paris` - Europe/Paris
	// * `Europe/Podgorica` - Europe/Podgorica
	// * `Europe/Prague` - Europe/Prague
	// * `Europe/Riga` - Europe/Riga
	// * `Europe/Rome` - Europe/Rome
	// * `Europe/Samara` - Europe/Samara
	// * `Europe/San_Marino` - Europe/San_Marino
	// * `Europe/Sarajevo` - Europe/Sarajevo
	// * `Europe/Saratov` - Europe/Saratov
	// * `Europe/Simferopol` - Europe/Simferopol
	// * `Europe/Skopje` - Europe/Skopje
	// * `Europe/Sofia` - Europe/Sofia
	// * `Europe/Stockholm` - Europe/Stockholm
	// * `Europe/Tallinn` - Europe/Tallinn
	// * `Europe/Tirane` - Europe/Tirane
	// * `Europe/Tiraspol` - Europe/Tiraspol
	// * `Europe/Ulyanovsk` - Europe/Ulyanovsk
	// * `Europe/Uzhgorod` - Europe/Uzhgorod
	// * `Europe/Vaduz` - Europe/Vaduz
	// * `Europe/Vatican` - Europe/Vatican
	// * `Europe/Vienna` - Europe/Vienna
	// * `Europe/Vilnius` - Europe/Vilnius
	// * `Europe/Volgograd` - Europe/Volgograd
	// * `Europe/Warsaw` - Europe/Warsaw
	// * `Europe/Zagreb` - Europe/Zagreb
	// * `Europe/Zaporozhye` - Europe/Zaporozhye
	// * `Europe/Zurich` - Europe/Zurich
	// * `GB` - GB
	// * `GB-Eire` - GB-Eire
	// * `GMT` - GMT
	// * `GMT+0` - GMT+0
	// * `GMT-0` - GMT-0
	// * `GMT0` - GMT0
	// * `Greenwich` - Greenwich
	// * `HST` - HST
	// * `Hongkong` - Hongkong
	// * `Iceland` - Iceland
	// * `Indian/Antananarivo` - Indian/Antananarivo
	// * `Indian/Chagos` - Indian/Chagos
	// * `Indian/Christmas` - Indian/Christmas
	// * `Indian/Cocos` - Indian/Cocos
	// * `Indian/Comoro` - Indian/Comoro
	// * `Indian/Kerguelen` - Indian/Kerguelen
	// * `Indian/Mahe` - Indian/Mahe
	// * `Indian/Maldives` - Indian/Maldives
	// * `Indian/Mauritius` - Indian/Mauritius
	// * `Indian/Mayotte` - Indian/Mayotte
	// * `Indian/Reunion` - Indian/Reunion
	// * `Iran` - Iran
	// * `Israel` - Israel
	// * `Jamaica` - Jamaica
	// * `Japan` - Japan
	// * `Kwajalein` - Kwajalein
	// * `Libya` - Libya
	// * `MET` - MET
	// * `MST` - MST
	// * `MST7MDT` - MST7MDT
	// * `Mexico/BajaNorte` - Mexico/BajaNorte
	// * `Mexico/BajaSur` - Mexico/BajaSur
	// * `Mexico/General` - Mexico/General
	// * `NZ` - NZ
	// * `NZ-CHAT` - NZ-CHAT
	// * `Navajo` - Navajo
	// * `PRC` - PRC
	// * `PST8PDT` - PST8PDT
	// * `Pacific/Apia` - Pacific/Apia
	// * `Pacific/Auckland` - Pacific/Auckland
	// * `Pacific/Bougainville` - Pacific/Bougainville
	// * `Pacific/Chatham` - Pacific/Chatham
	// * `Pacific/Chuuk` - Pacific/Chuuk
	// * `Pacific/Easter` - Pacific/Easter
	// * `Pacific/Efate` - Pacific/Efate
	// * `Pacific/Enderbury` - Pacific/Enderbury
	// * `Pacific/Fakaofo` - Pacific/Fakaofo
	// * `Pacific/Fiji` - Pacific/Fiji
	// * `Pacific/Funafuti` - Pacific/Funafuti
	// * `Pacific/Galapagos` - Pacific/Galapagos
	// * `Pacific/Gambier` - Pacific/Gambier
	// * `Pacific/Guadalcanal` - Pacific/Guadalcanal
	// * `Pacific/Guam` - Pacific/Guam
	// * `Pacific/Honolulu` - Pacific/Honolulu
	// * `Pacific/Johnston` - Pacific/Johnston
	// * `Pacific/Kanton` - Pacific/Kanton
	// * `Pacific/Kiritimati` - Pacific/Kiritimati
	// * `Pacific/Kosrae` - Pacific/Kosrae
	// * `Pacific/Kwajalein` - Pacific/Kwajalein
	// * `Pacific/Majuro` - Pacific/Majuro
	// * `Pacific/Marquesas` - Pacific/Marquesas
	// * `Pacific/Midway` - Pacific/Midway
	// * `Pacific/Nauru` - Pacific/Nauru
	// * `Pacific/Niue` - Pacific/Niue
	// * `Pacific/Norfolk` - Pacific/Norfolk
	// * `Pacific/Noumea` - Pacific/Noumea
	// * `Pacific/Pago_Pago` - Pacific/Pago_Pago
	// * `Pacific/Palau` - Pacific/Palau
	// * `Pacific/Pitcairn` - Pacific/Pitcairn
	// * `Pacific/Pohnpei` - Pacific/Pohnpei
	// * `Pacific/Ponape` - Pacific/Ponape
	// * `Pacific/Port_Moresby` - Pacific/Port_Moresby
	// * `Pacific/Rarotonga` - Pacific/Rarotonga
	// * `Pacific/Saipan` - Pacific/Saipan
	// * `Pacific/Samoa` - Pacific/Samoa
	// * `Pacific/Tahiti` - Pacific/Tahiti
	// * `Pacific/Tarawa` - Pacific/Tarawa
	// * `Pacific/Tongatapu` - Pacific/Tongatapu
	// * `Pacific/Truk` - Pacific/Truk
	// * `Pacific/Wake` - Pacific/Wake
	// * `Pacific/Wallis` - Pacific/Wallis
	// * `Pacific/Yap` - Pacific/Yap
	// * `Poland` - Poland
	// * `Portugal` - Portugal
	// * `ROC` - ROC
	// * `ROK` - ROK
	// * `Singapore` - Singapore
	// * `Turkey` - Turkey
	// * `UCT` - UCT
	// * `US/Alaska` - US/Alaska
	// * `US/Aleutian` - US/Aleutian
	// * `US/Arizona` - US/Arizona
	// * `US/Central` - US/Central
	// * `US/East-Indiana` - US/East-Indiana
	// * `US/Eastern` - US/Eastern
	// * `US/Hawaii` - US/Hawaii
	// * `US/Indiana-Starke` - US/Indiana-Starke
	// * `US/Michigan` - US/Michigan
	// * `US/Mountain` - US/Mountain
	// * `US/Pacific` - US/Pacific
	// * `US/Samoa` - US/Samoa
	// * `UTC` - UTC
	// * `Universal` - Universal
	// * `W-SU` - W-SU
	// * `WET` - WET
	// * `Zulu` - Zulu
	TimeZone *PatchedSystemSettingsRequestTimeZone `json:"time_zone,omitempty"`

	// UppercaseCharacterRequired Requires user passwords to contain at least one uppercase letter (A-Z).
	UppercaseCharacterRequired *bool `json:"uppercase_character_required,omitempty"`

	// UrlPrefix URL prefix if DefectDojo is installed in it's own virtual subdirectory.
	UrlPrefix *string `json:"url_prefix,omitempty"`
}

// PatchedSystemSettingsRequestJiraMinimumSeverity * `Critical` - Critical
// * `High` - High
// * `Medium` - Medium
// * `Low` - Low
// * `Info` - Info
type PatchedSystemSettingsRequestJiraMinimumSeverity string

// PatchedSystemSettingsRequestTimeZone * `Africa/Abidjan` - Africa/Abidjan
// * `Africa/Accra` - Africa/Accra
// * `Africa/Addis_Ababa` - Africa/Addis_Ababa
// * `Africa/Algiers` - Africa/Algiers
// * `Africa/Asmara` - Africa/Asmara
// * `Africa/Asmera` - Africa/Asmera
// * `Africa/Bamako` - Africa/Bamako
// * `Africa/Bangui` - Africa/Bangui
// * `Africa/Banjul` - Africa/Banjul
// * `Africa/Bissau` - Africa/Bissau
// * `Africa/Blantyre` - Africa/Blantyre
// * `Africa/Brazzaville` - Africa/Brazzaville
// * `Africa/Bujumbura` - Africa/Bujumbura
// * `Africa/Cairo` - Africa/Cairo
// * `Africa/Casablanca` - Africa/Casablanca
// * `Africa/Ceuta` - Africa/Ceuta
// * `Africa/Conakry` - Africa/Conakry
// * `Africa/Dakar` - Africa/Dakar
// * `Africa/Dar_es_Salaam` - Africa/Dar_es_Salaam
// * `Africa/Djibouti` - Africa/Djibouti
// * `Africa/Douala` - Africa/Douala
// * `Africa/El_Aaiun` - Africa/El_Aaiun
// * `Africa/Freetown` - Africa/Freetown
// * `Africa/Gaborone` - Africa/Gaborone
// * `Africa/Harare` - Africa/Harare
// * `Africa/Johannesburg` - Africa/Johannesburg
// * `Africa/Juba` - Africa/Juba
// * `Africa/Kampala` - Africa/Kampala
// * `Africa/Khartoum` - Africa/Khartoum
// * `Africa/Kigali` - Africa/Kigali
// * `Africa/Kinshasa` - Africa/Kinshasa
// * `Africa/Lagos` - Africa/Lagos
// * `Africa/Libreville` - Africa/Libreville
// * `Africa/Lome` - Africa/Lome
// * `Africa/Luanda` - Africa/Luanda
// * `Africa/Lubumbashi` - Africa/Lubumbashi
// * `Africa/Lusaka` - Africa/Lusaka
// * `Africa/Malabo` - Africa/Malabo
// * `Africa/Maputo` - Africa/Maputo
// * `Africa/Maseru` - Africa/Maseru
// * `Africa/Mbabane` - Africa/Mbabane
// * `Africa/Mogadishu` - Africa/Mogadishu
// * `Africa/Monrovia` - Africa/Monrovia
// * `Africa/Nairobi` - Africa/Nairobi
// * `Africa/Ndjamena` - Africa/Ndjamena
// * `Africa/Niamey` - Africa/Niamey
// * `Africa/Nouakchott` - Africa/Nouakchott
// * `Africa/Ouagadougou` - Africa/Ouagadougou
// * `Africa/Porto-Novo` - Africa/Porto-Novo
// * `Africa/Sao_Tome` - Africa/Sao_Tome
// * `Africa/Timbuktu` - Africa/Timbuktu
// * `Africa/Tripoli` - Africa/Tripoli
// * `Africa/Tunis` - Africa/Tunis
// * `Africa/Windhoek` - Africa/Windhoek
// * `America/Adak` - America/Adak
// * `America/Anchorage` - America/Anchorage
// * `America/Anguilla` - America/Anguilla
// * `America/Antigua` - America/Antigua
// * `America/Araguaina` - America/Araguaina
// * `America/Argentina/Buenos_Aires` - America/Argentina/Buenos_Aires
// * `America/Argentina/Catamarca` - America/Argentina/Catamarca
// * `America/Argentina/ComodRivadavia` - America/Argentina/ComodRivadavia
// * `America/Argentina/Cordoba` - America/Argentina/Cordoba
// * `America/Argentina/Jujuy` - America/Argentina/Jujuy
// * `America/Argentina/La_Rioja` - America/Argentina/La_Rioja
// * `America/Argentina/Mendoza` - America/Argentina/Mendoza
// * `America/Argentina/Rio_Gallegos` - America/Argentina/Rio_Gallegos
// * `America/Argentina/Salta` - America/Argentina/Salta
// * `America/Argentina/San_Juan` - America/Argentina/San_Juan
// * `America/Argentina/San_Luis` - America/Argentina/San_Luis
// * `America/Argentina/Tucuman` - America/Argentina/Tucuman
// * `America/Argentina/Ushuaia` - America/Argentina/Ushuaia
// * `America/Aruba` - America/Aruba
// * `America/Asuncion` - America/Asuncion
// * `America/Atikokan` - America/Atikokan
// * `America/Atka` - America/Atka
// * `America/Bahia` - America/Bahia
// * `America/Bahia_Banderas` - America/Bahia_Banderas
// * `America/Barbados` - America/Barbados
// * `America/Belem` - America/Belem
// * `America/Belize` - America/Belize
// * `America/Blanc-Sablon` - America/Blanc-Sablon
// * `America/Boa_Vista` - America/Boa_Vista
// * `America/Bogota` - America/Bogota
// * `America/Boise` - America/Boise
// * `America/Buenos_Aires` - America/Buenos_Aires
// * `America/Cambridge_Bay` - America/Cambridge_Bay
// * `America/Campo_Grande` - America/Campo_Grande
// * `America/Cancun` - America/Cancun
// * `America/Caracas` - America/Caracas
// * `America/Catamarca` - America/Catamarca
// * `America/Cayenne` - America/Cayenne
// * `America/Cayman` - America/Cayman
// * `America/Chicago` - America/Chicago
// * `America/Chihuahua` - America/Chihuahua
// * `America/Ciudad_Juarez` - America/Ciudad_Juarez
// * `America/Coral_Harbour` - America/Coral_Harbour
// * `America/Cordoba` - America/Cordoba
// * `America/Costa_Rica` - America/Costa_Rica
// * `America/Creston` - America/Creston
// * `America/Cuiaba` - America/Cuiaba
// * `America/Curacao` - America/Curacao
// * `America/Danmarkshavn` - America/Danmarkshavn
// * `America/Dawson` - America/Dawson
// * `America/Dawson_Creek` - America/Dawson_Creek
// * `America/Denver` - America/Denver
// * `America/Detroit` - America/Detroit
// * `America/Dominica` - America/Dominica
// * `America/Edmonton` - America/Edmonton
// * `America/Eirunepe` - America/Eirunepe
// * `America/El_Salvador` - America/El_Salvador
// * `America/Ensenada` - America/Ensenada
// * `America/Fort_Nelson` - America/Fort_Nelson
// * `America/Fort_Wayne` - America/Fort_Wayne
// * `America/Fortaleza` - America/Fortaleza
// * `America/Glace_Bay` - America/Glace_Bay
// * `America/Godthab` - America/Godthab
// * `America/Goose_Bay` - America/Goose_Bay
// * `America/Grand_Turk` - America/Grand_Turk
// * `America/Grenada` - America/Grenada
// * `America/Guadeloupe` - America/Guadeloupe
// * `America/Guatemala` - America/Guatemala
// * `America/Guayaquil` - America/Guayaquil
// * `America/Guyana` - America/Guyana
// * `America/Halifax` - America/Halifax
// * `America/Havana` - America/Havana
// * `America/Hermosillo` - America/Hermosillo
// * `America/Indiana/Indianapolis` - America/Indiana/Indianapolis
// * `America/Indiana/Knox` - America/Indiana/Knox
// * `America/Indiana/Marengo` - America/Indiana/Marengo
// * `America/Indiana/Petersburg` - America/Indiana/Petersburg
// * `America/Indiana/Tell_City` - America/Indiana/Tell_City
// * `America/Indiana/Vevay` - America/Indiana/Vevay
// * `America/Indiana/Vincennes` - America/Indiana/Vincennes
// * `America/Indiana/Winamac` - America/Indiana/Winamac
// * `America/Indianapolis` - America/Indianapolis
// * `America/Inuvik` - America/Inuvik
// * `America/Iqaluit` - America/Iqaluit
// * `America/Jamaica` - America/Jamaica
// * `America/Jujuy` - America/Jujuy
// * `America/Juneau` - America/Juneau
// * `America/Kentucky/Louisville` - America/Kentucky/Louisville
// * `America/Kentucky/Monticello` - America/Kentucky/Monticello
// * `America/Knox_IN` - America/Knox_IN
// * `America/Kralendijk` - America/Kralendijk
// * `America/La_Paz` - America/La_Paz
// * `America/Lima` - America/Lima
// * `America/Los_Angeles` - America/Los_Angeles
// * `America/Louisville` - America/Louisville
// * `America/Lower_Princes` - America/Lower_Princes
// * `America/Maceio` - America/Maceio
// * `America/Managua` - America/Managua
// * `America/Manaus` - America/Manaus
// * `America/Marigot` - America/Marigot
// * `America/Martinique` - America/Martinique
// * `America/Matamoros` - America/Matamoros
// * `America/Mazatlan` - America/Mazatlan
// * `America/Mendoza` - America/Mendoza
// * `America/Menominee` - America/Menominee
// * `America/Merida` - America/Merida
// * `America/Metlakatla` - America/Metlakatla
// * `America/Mexico_City` - America/Mexico_City
// * `America/Miquelon` - America/Miquelon
// * `America/Moncton` - America/Moncton
// * `America/Monterrey` - America/Monterrey
// * `America/Montevideo` - America/Montevideo
// * `America/Montreal` - America/Montreal
// * `America/Montserrat` - America/Montserrat
// * `America/Nassau` - America/Nassau
// * `America/New_York` - America/New_York
// * `America/Nipigon` - America/Nipigon
// * `America/Nome` - America/Nome
// * `America/Noronha` - America/Noronha
// * `America/North_Dakota/Beulah` - America/North_Dakota/Beulah
// * `America/North_Dakota/Center` - America/North_Dakota/Center
// * `America/North_Dakota/New_Salem` - America/North_Dakota/New_Salem
// * `America/Nuuk` - America/Nuuk
// * `America/Ojinaga` - America/Ojinaga
// * `America/Panama` - America/Panama
// * `America/Pangnirtung` - America/Pangnirtung
// * `America/Paramaribo` - America/Paramaribo
// * `America/Phoenix` - America/Phoenix
// * `America/Port-au-Prince` - America/Port-au-Prince
// * `America/Port_of_Spain` - America/Port_of_Spain
// * `America/Porto_Acre` - America/Porto_Acre
// * `America/Porto_Velho` - America/Porto_Velho
// * `America/Puerto_Rico` - America/Puerto_Rico
// * `America/Punta_Arenas` - America/Punta_Arenas
// * `America/Rainy_River` - America/Rainy_River
// * `America/Rankin_Inlet` - America/Rankin_Inlet
// * `America/Recife` - America/Recife
// * `America/Regina` - America/Regina
// * `America/Resolute` - America/Resolute
// * `America/Rio_Branco` - America/Rio_Branco
// * `America/Rosario` - America/Rosario
// * `America/Santa_Isabel` - America/Santa_Isabel
// * `America/Santarem` - America/Santarem
// * `America/Santiago` - America/Santiago
// * `America/Santo_Domingo` - America/Santo_Domingo
// * `America/Sao_Paulo` - America/Sao_Paulo
// * `America/Scoresbysund` - America/Scoresbysund
// * `America/Shiprock` - America/Shiprock
// * `America/Sitka` - America/Sitka
// * `America/St_Barthelemy` - America/St_Barthelemy
// * `America/St_Johns` - America/St_Johns
// * `America/St_Kitts` - America/St_Kitts
// * `America/St_Lucia` - America/St_Lucia
// * `America/St_Thomas` - America/St_Thomas
// * `America/St_Vincent` - America/St_Vincent
// * `America/Swift_Current` - America/Swift_Current
// * `America/Tegucigalpa` - America/Tegucigalpa
// * `America/Thule` - America/Thule
// * `America/Thunder_Bay` - America/Thunder_Bay
// * `America/Tijuana` - America/Tijuana
// * `America/Toronto` - America/Toronto
// * `America/Tortola` - America/Tortola
// * `America/Vancouver` - America/Vancouver
// * `America/Virgin` - America/Virgin
// * `America/Whitehorse` - America/Whitehorse
// * `America/Winnipeg` - America/Winnipeg
// * `America/Yakutat` - America/Yakutat
// * `America/Yellowknife` - America/Yellowknife
// * `Antarctica/Casey` - Antarctica/Casey
// * `Antarctica/Davis` - Antarctica/Davis
// * `Antarctica/DumontDUrville` - Antarctica/DumontDUrville
// * `Antarctica/Macquarie` - Antarctica/Macquarie
// * `Antarctica/Mawson` - Antarctica/Mawson
// * `Antarctica/McMurdo` - Antarctica/McMurdo
// * `Antarctica/Palmer` - Antarctica/Palmer
// * `Antarctica/Rothera` - Antarctica/Rothera
// * `Antarctica/South_Pole` - Antarctica/South_Pole
// * `Antarctica/Syowa` - Antarctica/Syowa
// * `Antarctica/Troll` - Antarctica/Troll
// * `Antarctica/Vostok` - Antarctica/Vostok
// * `Arctic/Longyearbyen` - Arctic/Longyearbyen
// * `Asia/Aden` - Asia/Aden
// * `Asia/Almaty` - Asia/Almaty
// * `Asia/Amman` - Asia/Amman
// * `Asia/Anadyr` - Asia/Anadyr
// * `Asia/Aqtau` - Asia/Aqtau
// * `Asia/Aqtobe` - Asia/Aqtobe
// * `Asia/Ashgabat` - Asia/Ashgabat
// * `Asia/Ashkhabad` - Asia/Ashkhabad
// * `Asia/Atyrau` - Asia/Atyrau
// * `Asia/Baghdad` - Asia/Baghdad
// * `Asia/Bahrain` - Asia/Bahrain
// * `Asia/Baku` - Asia/Baku
// * `Asia/Bangkok` - Asia/Bangkok
// * `Asia/Barnaul` - Asia/Barnaul
// * `Asia/Beirut` - Asia/Beirut
// * `Asia/Bishkek` - Asia/Bishkek
// * `Asia/Brunei` - Asia/Brunei
// * `Asia/Calcutta` - Asia/Calcutta
// * `Asia/Chita` - Asia/Chita
// * `Asia/Choibalsan` - Asia/Choibalsan
// * `Asia/Chongqing` - Asia/Chongqing
// * `Asia/Chungking` - Asia/Chungking
// * `Asia/Colombo` - Asia/Colombo
// * `Asia/Dacca` - Asia/Dacca
// * `Asia/Damascus` - Asia/Damascus
// * `Asia/Dhaka` - Asia/Dhaka
// * `Asia/Dili` - Asia/Dili
// * `Asia/Dubai` - Asia/Dubai
// * `Asia/Dushanbe` - Asia/Dushanbe
// * `Asia/Famagusta` - Asia/Famagusta
// * `Asia/Gaza` - Asia/Gaza
// * `Asia/Harbin` - Asia/Harbin
// * `Asia/Hebron` - Asia/Hebron
// * `Asia/Ho_Chi_Minh` - Asia/Ho_Chi_Minh
// * `Asia/Hong_Kong` - Asia/Hong_Kong
// * `Asia/Hovd` - Asia/Hovd
// * `Asia/Irkutsk` - Asia/Irkutsk
// * `Asia/Istanbul` - Asia/Istanbul
// * `Asia/Jakarta` - Asia/Jakarta
// * `Asia/Jayapura` - Asia/Jayapura
// * `Asia/Jerusalem` - Asia/Jerusalem
// * `Asia/Kabul` - Asia/Kabul
// * `Asia/Kamchatka` - Asia/Kamchatka
// * `Asia/Karachi` - Asia/Karachi
// * `Asia/Kashgar` - Asia/Kashgar
// * `Asia/Kathmandu` - Asia/Kathmandu
// * `Asia/Katmandu` - Asia/Katmandu
// * `Asia/Khandyga` - Asia/Khandyga
// * `Asia/Kolkata` - Asia/Kolkata
// * `Asia/Krasnoyarsk` - Asia/Krasnoyarsk
// * `Asia/Kuala_Lumpur` - Asia/Kuala_Lumpur
// * `Asia/Kuching` - Asia/Kuching
// * `Asia/Kuwait` - Asia/Kuwait
// * `Asia/Macao` - Asia/Macao
// * `Asia/Macau` - Asia/Macau
// * `Asia/Magadan` - Asia/Magadan
// * `Asia/Makassar` - Asia/Makassar
// * `Asia/Manila` - Asia/Manila
// * `Asia/Muscat` - Asia/Muscat
// * `Asia/Nicosia` - Asia/Nicosia
// * `Asia/Novokuznetsk` - Asia/Novokuznetsk
// * `Asia/Novosibirsk` - Asia/Novosibirsk
// * `Asia/Omsk` - Asia/Omsk
// * `Asia/Oral` - Asia/Oral
// * `Asia/Phnom_Penh` - Asia/Phnom_Penh
// * `Asia/Pontianak` - Asia/Pontianak
// * `Asia/Pyongyang` - Asia/Pyongyang
// * `Asia/Qatar` - Asia/Qatar
// * `Asia/Qostanay` - Asia/Qostanay
// * `Asia/Qyzylorda` - Asia/Qyzylorda
// * `Asia/Rangoon` - Asia/Rangoon
// * `Asia/Riyadh` - Asia/Riyadh
// * `Asia/Saigon` - Asia/Saigon
// * `Asia/Sakhalin` - Asia/Sakhalin
// * `Asia/Samarkand` - Asia/Samarkand
// * `Asia/Seoul` - Asia/Seoul
// * `Asia/Shanghai` - Asia/Shanghai
// * `Asia/Singapore` - Asia/Singapore
// * `Asia/Srednekolymsk` - Asia/Srednekolymsk
// * `Asia/Taipei` - Asia/Taipei
// * `Asia/Tashkent` - Asia/Tashkent
// * `Asia/Tbilisi` - Asia/Tbilisi
// * `Asia/Tehran` - Asia/Tehran
// * `Asia/Tel_Aviv` - Asia/Tel_Aviv
// * `Asia/Thimbu` - Asia/Thimbu
// * `Asia/Thimphu` - Asia/Thimphu
// * `Asia/Tokyo` - Asia/Tokyo
// * `Asia/Tomsk` - Asia/Tomsk
// * `Asia/Ujung_Pandang` - Asia/Ujung_Pandang
// * `Asia/Ulaanbaatar` - Asia/Ulaanbaatar
// * `Asia/Ulan_Bator` - Asia/Ulan_Bator
// * `Asia/Urumqi` - Asia/Urumqi
// * `Asia/Ust-Nera` - Asia/Ust-Nera
// * `Asia/Vientiane` - Asia/Vientiane
// * `Asia/Vladivostok` - Asia/Vladivostok
// * `Asia/Yakutsk` - Asia/Yakutsk
// * `Asia/Yangon` - Asia/Yangon
// * `Asia/Yekaterinburg` - Asia/Yekaterinburg
// * `Asia/Yerevan` - Asia/Yerevan
// * `Atlantic/Azores` - Atlantic/Azores
// * `Atlantic/Bermuda` - Atlantic/Bermuda
// * `Atlantic/Canary` - Atlantic/Canary
// * `Atlantic/Cape_Verde` - Atlantic/Cape_Verde
// * `Atlantic/Faeroe` - Atlantic/Faeroe
// * `Atlantic/Faroe` - Atlantic/Faroe
// * `Atlantic/Jan_Mayen` - Atlantic/Jan_Mayen
// * `Atlantic/Madeira` - Atlantic/Madeira
// * `Atlantic/Reykjavik` - Atlantic/Reykjavik
// * `Atlantic/South_Georgia` - Atlantic/South_Georgia
// * `Atlantic/St_Helena` - Atlantic/St_Helena
// * `Atlantic/Stanley` - Atlantic/Stanley
// * `Australia/ACT` - Australia/ACT
// * `Australia/Adelaide` - Australia/Adelaide
// * `Australia/Brisbane` - Australia/Brisbane
// * `Australia/Broken_Hill` - Australia/Broken_Hill
// * `Australia/Canberra` - Australia/Canberra
// * `Australia/Currie` - Australia/Currie
// * `Australia/Darwin` - Australia/Darwin
// * `Australia/Eucla` - Australia/Eucla
// * `Australia/Hobart` - Australia/Hobart
// * `Australia/LHI` - Australia/LHI
// * `Australia/Lindeman` - Australia/Lindeman
// * `Australia/Lord_Howe` - Australia/Lord_Howe
// * `Australia/Melbourne` - Australia/Melbourne
// * `Australia/NSW` - Australia/NSW
// * `Australia/North` - Australia/North
// * `Australia/Perth` - Australia/Perth
// * `Australia/Queensland` - Australia/Queensland
// * `Australia/South` - Australia/South
// * `Australia/Sydney` - Australia/Sydney
// * `Australia/Tasmania` - Australia/Tasmania
// * `Australia/Victoria` - Australia/Victoria
// * `Australia/West` - Australia/West
// * `Australia/Yancowinna` - Australia/Yancowinna
// * `Brazil/Acre` - Brazil/Acre
// * `Brazil/DeNoronha` - Brazil/DeNoronha
// * `Brazil/East` - Brazil/East
// * `Brazil/West` - Brazil/West
// * `CET` - CET
// * `CST6CDT` - CST6CDT
// * `Canada/Atlantic` - Canada/Atlantic
// * `Canada/Central` - Canada/Central
// * `Canada/Eastern` - Canada/Eastern
// * `Canada/Mountain` - Canada/Mountain
// * `Canada/Newfoundland` - Canada/Newfoundland
// * `Canada/Pacific` - Canada/Pacific
// * `Canada/Saskatchewan` - Canada/Saskatchewan
// * `Canada/Yukon` - Canada/Yukon
// * `Chile/Continental` - Chile/Continental
// * `Chile/EasterIsland` - Chile/EasterIsland
// * `Cuba` - Cuba
// * `EET` - EET
// * `EST` - EST
// * `EST5EDT` - EST5EDT
// * `Egypt` - Egypt
// * `Eire` - Eire
// * `Etc/GMT` - Etc/GMT
// * `Etc/GMT+0` - Etc/GMT+0
// * `Etc/GMT+1` - Etc/GMT+1
// * `Etc/GMT+10` - Etc/GMT+10
// * `Etc/GMT+11` - Etc/GMT+11
// * `Etc/GMT+12` - Etc/GMT+12
// * `Etc/GMT+2` - Etc/GMT+2
// * `Etc/GMT+3` - Etc/GMT+3
// * `Etc/GMT+4` - Etc/GMT+4
// * `Etc/GMT+5` - Etc/GMT+5
// * `Etc/GMT+6` - Etc/GMT+6
// * `Etc/GMT+7` - Etc/GMT+7
// * `Etc/GMT+8` - Etc/GMT+8
// * `Etc/GMT+9` - Etc/GMT+9
// * `Etc/GMT-0` - Etc/GMT-0
// * `Etc/GMT-1` - Etc/GMT-1
// * `Etc/GMT-10` - Etc/GMT-10
// * `Etc/GMT-11` - Etc/GMT-11
// * `Etc/GMT-12` - Etc/GMT-12
// * `Etc/GMT-13` - Etc/GMT-13
// * `Etc/GMT-14` - Etc/GMT-14
// * `Etc/GMT-2` - Etc/GMT-2
// * `Etc/GMT-3` - Etc/GMT-3
// * `Etc/GMT-4` - Etc/GMT-4
// * `Etc/GMT-5` - Etc/GMT-5
// * `Etc/GMT-6` - Etc/GMT-6
// * `Etc/GMT-7` - Etc/GMT-7
// * `Etc/GMT-8` - Etc/GMT-8
// * `Etc/GMT-9` - Etc/GMT-9
// * `Etc/GMT0` - Etc/GMT0
// * `Etc/Greenwich` - Etc/Greenwich
// * `Etc/UCT` - Etc/UCT
// * `Etc/UTC` - Etc/UTC
// * `Etc/Universal` - Etc/Universal
// * `Etc/Zulu` - Etc/Zulu
// * `Europe/Amsterdam` - Europe/Amsterdam
// * `Europe/Andorra` - Europe/Andorra
// * `Europe/Astrakhan` - Europe/Astrakhan
// * `Europe/Athens` - Europe/Athens
// * `Europe/Belfast` - Europe/Belfast
// * `Europe/Belgrade` - Europe/Belgrade
// * `Europe/Berlin` - Europe/Berlin
// * `Europe/Bratislava` - Europe/Bratislava
// * `Europe/Brussels` - Europe/Brussels
// * `Europe/Bucharest` - Europe/Bucharest
// * `Europe/Budapest` - Europe/Budapest
// * `Europe/Busingen` - Europe/Busingen
// * `Europe/Chisinau` - Europe/Chisinau
// * `Europe/Copenhagen` - Europe/Copenhagen
// * `Europe/Dublin` - Europe/Dublin
// * `Europe/Gibraltar` - Europe/Gibraltar
// * `Europe/Guernsey` - Europe/Guernsey
// * `Europe/Helsinki` - Europe/Helsinki
// * `Europe/Isle_of_Man` - Europe/Isle_of_Man
// * `Europe/Istanbul` - Europe/Istanbul
// * `Europe/Jersey` - Europe/Jersey
// * `Europe/Kaliningrad` - Europe/Kaliningrad
// * `Europe/Kiev` - Europe/Kiev
// * `Europe/Kirov` - Europe/Kirov
// * `Europe/Kyiv` - Europe/Kyiv
// * `Europe/Lisbon` - Europe/Lisbon
// * `Europe/Ljubljana` - Europe/Ljubljana
// * `Europe/London` - Europe/London
// * `Europe/Luxembourg` - Europe/Luxembourg
// * `Europe/Madrid` - Europe/Madrid
// * `Europe/Malta` - Europe/Malta
// * `Europe/Mariehamn` - Europe/Mariehamn
// * `Europe/Minsk` - Europe/Minsk
// * `Europe/Monaco` - Europe/Monaco
// * `Europe/Moscow` - Europe/Moscow
// * `Europe/Nicosia` - Europe/Nicosia
// * `Europe/Oslo` - Europe/Oslo
// * `Europe/Paris` - Europe/Paris
// * `Europe/Podgorica` - Europe/Podgorica
// * `Europe/Prague` - Europe/Prague
// * `Europe/Riga` - Europe/Riga
// * `Europe/Rome` - Europe/Rome
// * `Europe/Samara` - Europe/Samara
// * `Europe/San_Marino` - Europe/San_Marino
// * `Europe/Sarajevo` - Europe/Sarajevo
// * `Europe/Saratov` - Europe/Saratov
// * `Europe/Simferopol` - Europe/Simferopol
// * `Europe/Skopje` - Europe/Skopje
// * `Europe/Sofia` - Europe/Sofia
// * `Europe/Stockholm` - Europe/Stockholm
// * `Europe/Tallinn` - Europe/Tallinn
// * `Europe/Tirane` - Europe/Tirane
// * `Europe/Tiraspol` - Europe/Tiraspol
// * `Europe/Ulyanovsk` - Europe/Ulyanovsk
// * `Europe/Uzhgorod` - Europe/Uzhgorod
// * `Europe/Vaduz` - Europe/Vaduz
// * `Europe/Vatican` - Europe/Vatican
// * `Europe/Vienna` - Europe/Vienna
// * `Europe/Vilnius` - Europe/Vilnius
// * `Europe/Volgograd` - Europe/Volgograd
// * `Europe/Warsaw` - Europe/Warsaw
// * `Europe/Zagreb` - Europe/Zagreb
// * `Europe/Zaporozhye` - Europe/Zaporozhye
// * `Europe/Zurich` - Europe/Zurich
// * `GB` - GB
// * `GB-Eire` - GB-Eire
// * `GMT` - GMT
// * `GMT+0` - GMT+0
// * `GMT-0` - GMT-0
// * `GMT0` - GMT0
// * `Greenwich` - Greenwich
// * `HST` - HST
// * `Hongkong` - Hongkong
// * `Iceland` - Iceland
// * `Indian/Antananarivo` - Indian/Antananarivo
// * `Indian/Chagos` - Indian/Chagos
// * `Indian/Christmas` - Indian/Christmas
// * `Indian/Cocos` - Indian/Cocos
// * `Indian/Comoro` - Indian/Comoro
// * `Indian/Kerguelen` - Indian/Kerguelen
// * `Indian/Mahe` - Indian/Mahe
// * `Indian/Maldives` - Indian/Maldives
// * `Indian/Mauritius` - Indian/Mauritius
// * `Indian/Mayotte` - Indian/Mayotte
// * `Indian/Reunion` - Indian/Reunion
// * `Iran` - Iran
// * `Israel` - Israel
// * `Jamaica` - Jamaica
// * `Japan` - Japan
// * `Kwajalein` - Kwajalein
// * `Libya` - Libya
// * `MET` - MET
// * `MST` - MST
// * `MST7MDT` - MST7MDT
// * `Mexico/BajaNorte` - Mexico/BajaNorte
// * `Mexico/BajaSur` - Mexico/BajaSur
// * `Mexico/General` - Mexico/General
// * `NZ` - NZ
// * `NZ-CHAT` - NZ-CHAT
// * `Navajo` - Navajo
// * `PRC` - PRC
// * `PST8PDT` - PST8PDT
// * `Pacific/Apia` - Pacific/Apia
// * `Pacific/Auckland` - Pacific/Auckland
// * `Pacific/Bougainville` - Pacific/Bougainville
// * `Pacific/Chatham` - Pacific/Chatham
// * `Pacific/Chuuk` - Pacific/Chuuk
// * `Pacific/Easter` - Pacific/Easter
// * `Pacific/Efate` - Pacific/Efate
// * `Pacific/Enderbury` - Pacific/Enderbury
// * `Pacific/Fakaofo` - Pacific/Fakaofo
// * `Pacific/Fiji` - Pacific/Fiji
// * `Pacific/Funafuti` - Pacific/Funafuti
// * `Pacific/Galapagos` - Pacific/Galapagos
// * `Pacific/Gambier` - Pacific/Gambier
// * `Pacific/Guadalcanal` - Pacific/Guadalcanal
// * `Pacific/Guam` - Pacific/Guam
// * `Pacific/Honolulu` - Pacific/Honolulu
// * `Pacific/Johnston` - Pacific/Johnston
// * `Pacific/Kanton` - Pacific/Kanton
// * `Pacific/Kiritimati` - Pacific/Kiritimati
// * `Pacific/Kosrae` - Pacific/Kosrae
// * `Pacific/Kwajalein` - Pacific/Kwajalein
// * `Pacific/Majuro` - Pacific/Majuro
// * `Pacific/Marquesas` - Pacific/Marquesas
// * `Pacific/Midway` - Pacific/Midway
// * `Pacific/Nauru` - Pacific/Nauru
// * `Pacific/Niue` - Pacific/Niue
// * `Pacific/Norfolk` - Pacific/Norfolk
// * `Pacific/Noumea` - Pacific/Noumea
// * `Pacific/Pago_Pago` - Pacific/Pago_Pago
// * `Pacific/Palau` - Pacific/Palau
// * `Pacific/Pitcairn` - Pacific/Pitcairn
// * `Pacific/Pohnpei` - Pacific/Pohnpei
// * `Pacific/Ponape` - Pacific/Ponape
// * `Pacific/Port_Moresby` - Pacific/Port_Moresby
// * `Pacific/Rarotonga` - Pacific/Rarotonga
// * `Pacific/Saipan` - Pacific/Saipan
// * `Pacific/Samoa` - Pacific/Samoa
// * `Pacific/Tahiti` - Pacific/Tahiti
// * `Pacific/Tarawa` - Pacific/Tarawa
// * `Pacific/Tongatapu` - Pacific/Tongatapu
// * `Pacific/Truk` - Pacific/Truk
// * `Pacific/Wake` - Pacific/Wake
// * `Pacific/Wallis` - Pacific/Wallis
// * `Pacific/Yap` - Pacific/Yap
// * `Poland` - Poland
// * `Portugal` - Portugal
// * `ROC` - ROC
// * `ROK` - ROK
// * `Singapore` - Singapore
// * `Turkey` - Turkey
// * `UCT` - UCT
// * `US/Alaska` - US/Alaska
// * `US/Aleutian` - US/Aleutian
// * `US/Arizona` - US/Arizona
// * `US/Central` - US/Central
// * `US/East-Indiana` - US/East-Indiana
// * `US/Eastern` - US/Eastern
// * `US/Hawaii` - US/Hawaii
// * `US/Indiana-Starke` - US/Indiana-Starke
// * `US/Michigan` - US/Michigan
// * `US/Mountain` - US/Mountain
// * `US/Pacific` - US/Pacific
// * `US/Samoa` - US/Samoa
// * `UTC` - UTC
// * `Universal` - Universal
// * `W-SU` - W-SU
// * `WET` - WET
// * `Zulu` - Zulu
type PatchedSystemSettingsRequestTimeZone string

// PatchedTagRequest defines model for PatchedTagRequest.
type PatchedTagRequest struct {
	Tags *[]string `json:"tags,omitempty"`
}

// PatchedTestImportRequest defines model for PatchedTestImportRequest.
type PatchedTestImportRequest struct {
	// BranchTag Tag or branch that was tested, a reimport may update this field.
	BranchTag *string `json:"branch_tag"`

	// BuildId Build ID that was tested, a reimport may update this field.
	BuildId *string `json:"build_id"`

	// CommitHash Commit hash tested, a reimport may update this field.
	CommitHash     *string                 `json:"commit_hash"`
	ImportSettings *map[string]interface{} `json:"import_settings"`
	Type           *string                 `json:"type,omitempty"`
	Version        *string                 `json:"version"`
}

// PatchedTestRequest defines model for PatchedTestRequest.
type PatchedTestRequest struct {
	ApiScanConfiguration *int `json:"api_scan_configuration"`

	// BranchTag Tag or branch that was tested, a reimport may update this field.
	BranchTag *string `json:"branch_tag"`

	// BuildId Build ID that was tested, a reimport may update this field.
	BuildId *string `json:"build_id"`

	// CommitHash Commit hash tested, a reimport may update this field.
	CommitHash      *string    `json:"commit_hash"`
	Description     *string    `json:"description"`
	Environment     *int       `json:"environment"`
	Lead            *int       `json:"lead"`
	PercentComplete *int       `json:"percent_complete"`
	ScanType        *string    `json:"scan_type"`
	Tags            *[]string  `json:"tags,omitempty"`
	TargetEnd       *time.Time `json:"target_end,omitempty"`
	TargetStart     *time.Time `json:"target_start,omitempty"`
	TestType        *int       `json:"test_type,omitempty"`
	Title           *string    `json:"title"`
	Version         *string    `json:"version"`
}

// PatchedTestTypeRequest defines model for PatchedTestTypeRequest.
type PatchedTestTypeRequest struct {
	Active      *bool     `json:"active,omitempty"`
	DynamicTool *bool     `json:"dynamic_tool,omitempty"`
	Name        *string   `json:"name,omitempty"`
	StaticTool  *bool     `json:"static_tool,omitempty"`
	Tags        *[]string `json:"tags,omitempty"`
}

// PatchedToolConfigurationRequest defines model for PatchedToolConfigurationRequest.
type PatchedToolConfigurationRequest struct {
	ApiKey    *string `json:"api_key"`
	AuthTitle *string `json:"auth_title"`

	// AuthenticationType * `API` - API Key
	// * `Password` - Username/Password
	// * `SSH` - SSH
	AuthenticationType *PatchedToolConfigurationRequestAuthenticationType `json:"authentication_type"`
	Description        *string                                            `json:"description"`

	// Extras Additional definitions that will be consumed by scanner
	Extras   *string `json:"extras"`
	Name     *string `json:"name,omitempty"`
	Password *string `json:"password"`
	Ssh      *string `json:"ssh"`
	ToolType *int    `json:"tool_type,omitempty"`
	Url      *string `json:"url"`
	Username *string `json:"username"`
}

// PatchedToolConfigurationRequestAuthenticationType * `API` - API Key
// * `Password` - Username/Password
// * `SSH` - SSH
type PatchedToolConfigurationRequestAuthenticationType string

// PatchedToolProductSettingsRequest defines model for PatchedToolProductSettingsRequest.
type PatchedToolProductSettingsRequest struct {
	Description       *string `json:"description"`
	Name              *string `json:"name,omitempty"`
	Product           *int    `json:"product,omitempty"`
	SettingUrl        *string `json:"setting_url,omitempty"`
	ToolConfiguration *int    `json:"tool_configuration,omitempty"`
	ToolProjectId     *string `json:"tool_project_id"`
	Url               *string `json:"url"`
}

// PatchedToolTypeRequest defines model for PatchedToolTypeRequest.
type PatchedToolTypeRequest struct {
	Description *string `json:"description"`
	Name        *string `json:"name,omitempty"`
}

// PatchedUserContactInfoRequest defines model for PatchedUserContactInfoRequest.
type PatchedUserContactInfoRequest struct {
	// BlockExecution Instead of async deduping a finding the findings will be deduped synchronously and will 'block' the user until completion.
	BlockExecution *bool `json:"block_execution,omitempty"`

	// CellNumber Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.
	CellNumber *string `json:"cell_number,omitempty"`

	// ForcePasswordReset Forces this user to reset their password on next login.
	ForcePasswordReset *bool   `json:"force_password_reset,omitempty"`
	GithubUsername     *string `json:"github_username"`

	// PhoneNumber Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.
	PhoneNumber *string `json:"phone_number,omitempty"`
	SlackUserId *string `json:"slack_user_id"`

	// SlackUsername Email address associated with your slack account
	SlackUsername   *string `json:"slack_username"`
	Title           *string `json:"title"`
	TwitterUsername *string `json:"twitter_username"`
	User            *int    `json:"user,omitempty"`
}

// PatchedUserRequest defines model for PatchedUserRequest.
type PatchedUserRequest struct {
	ConfigurationPermissions *[]int               `json:"configuration_permissions,omitempty"`
	Email                    *openapi_types.Email `json:"email,omitempty"`
	FirstName                *string              `json:"first_name,omitempty"`

	// IsActive Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
	IsActive *bool `json:"is_active,omitempty"`

	// IsSuperuser Designates that this user has all permissions without explicitly assigning them.
	IsSuperuser *bool   `json:"is_superuser,omitempty"`
	LastName    *string `json:"last_name,omitempty"`
	Password    *string `json:"password,omitempty"`

	// Username Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
	Username *string `json:"username,omitempty"`
}

// Product defines model for Product.
type Product struct {
	AuthorizationGroups *[]int `json:"authorization_groups,omitempty"`

	// BusinessCriticality * `very high` - Very High
	// * `high` - High
	// * `medium` - Medium
	// * `low` - Low
	// * `very low` - Very Low
	// * `none` - None
	BusinessCriticality *ProductBusinessCriticality `json:"business_criticality"`
	Created             *time.Time                  `json:"created"`
	Description         string                      `json:"description"`

	// DisableSlaBreachNotifications Disable SLA breach notifications if configured in the global settings
	DisableSlaBreachNotifications *bool `json:"disable_sla_breach_notifications,omitempty"`

	// EnableFullRiskAcceptance Allows full risk acceptance using a risk acceptance form, expiration date, uploaded proof, etc.
	EnableFullRiskAcceptance *bool `json:"enable_full_risk_acceptance,omitempty"`

	// EnableProductTagInheritance Enables product tag inheritance. Any tags added on a product will automatically be added to all Engagements, Tests, and Findings
	EnableProductTagInheritance *bool `json:"enable_product_tag_inheritance,omitempty"`

	// EnableSimpleRiskAcceptance Allows simple risk acceptance by checking/unchecking a checkbox.
	EnableSimpleRiskAcceptance *bool `json:"enable_simple_risk_acceptance,omitempty"`

	// ExternalAudience Specify if the application is used by people outside the organization.
	ExternalAudience *bool  `json:"external_audience,omitempty"`
	FindingsCount    *int   `json:"findings_count,omitempty"`
	FindingsList     *[]int `json:"findings_list,omitempty"`
	Id               *int   `json:"id,omitempty"`

	// InternetAccessible Specify if the application is accessible from the public internet.
	InternetAccessible *bool `json:"internet_accessible,omitempty"`

	// Lifecycle * `construction` - Construction
	// * `production` - Production
	// * `retirement` - Retirement
	Lifecycle *ProductLifecycle `json:"lifecycle"`
	Members   *[]int            `json:"members,omitempty"`
	Name      string            `json:"name"`

	// Origin * `third party library` - Third Party Library
	// * `purchased` - Purchased
	// * `contractor` - Contractor Developed
	// * `internal` - Internally Developed
	// * `open source` - Open Source
	// * `outsourced` - Outsourced
	Origin *ProductOrigin `json:"origin"`

	// Platform * `web service` - API
	// * `desktop` - Desktop
	// * `iot` - Internet of Things
	// * `mobile` - Mobile
	// * `web` - Web
	Platform *ProductPlatform `json:"platform"`
	Prefetch *struct {
		AuthorizationGroups *map[string]DojoGroup        `json:"authorization_groups,omitempty"`
		Members             *map[string]UserStub         `json:"members,omitempty"`
		ProdType            *map[string]ProductType      `json:"prod_type,omitempty"`
		ProductManager      *map[string]UserStub         `json:"product_manager,omitempty"`
		Regulations         *map[string]Regulation       `json:"regulations,omitempty"`
		SlaConfiguration    *map[string]SLAConfiguration `json:"sla_configuration,omitempty"`
		TeamManager         *map[string]UserStub         `json:"team_manager,omitempty"`
		TechnicalContact    *map[string]UserStub         `json:"technical_contact,omitempty"`
	} `json:"prefetch,omitempty"`
	ProdNumericGrade *int           `json:"prod_numeric_grade"`
	ProdType         int            `json:"prod_type"`
	ProductManager   *int           `json:"product_manager"`
	ProductMeta      *[]ProductMeta `json:"product_meta,omitempty"`
	Regulations      *[]int         `json:"regulations,omitempty"`

	// Revenue Estimate the application's revenue.
	Revenue          *string   `json:"revenue"`
	SlaConfiguration *int      `json:"sla_configuration,omitempty"`
	Tags             *[]string `json:"tags,omitempty"`
	TeamManager      *int      `json:"team_manager"`
	TechnicalContact *int      `json:"technical_contact"`

	// UserRecords Estimate the number of user records within the application.
	UserRecords *int `json:"user_records"`
}

// ProductBusinessCriticality * `very high` - Very High
// * `high` - High
// * `medium` - Medium
// * `low` - Low
// * `very low` - Very Low
// * `none` - None
type ProductBusinessCriticality string

// ProductLifecycle * `construction` - Construction
// * `production` - Production
// * `retirement` - Retirement
type ProductLifecycle string

// ProductOrigin * `third party library` - Third Party Library
// * `purchased` - Purchased
// * `contractor` - Contractor Developed
// * `internal` - Internally Developed
// * `open source` - Open Source
// * `outsourced` - Outsourced
type ProductOrigin string

// ProductPlatform * `web service` - API
// * `desktop` - Desktop
// * `iot` - Internet of Things
// * `mobile` - Mobile
// * `web` - Web
type ProductPlatform string

// ProductAPIScanConfiguration defines model for ProductAPIScanConfiguration.
type ProductAPIScanConfiguration struct {
	Id                *int    `json:"id,omitempty"`
	Product           int     `json:"product"`
	ServiceKey1       *string `json:"service_key_1"`
	ServiceKey2       *string `json:"service_key_2"`
	ServiceKey3       *string `json:"service_key_3"`
	ToolConfiguration int     `json:"tool_configuration"`
}

// ProductAPIScanConfigurationRequest defines model for ProductAPIScanConfigurationRequest.
type ProductAPIScanConfigurationRequest struct {
	Product           int     `json:"product"`
	ServiceKey1       *string `json:"service_key_1"`
	ServiceKey2       *string `json:"service_key_2"`
	ServiceKey3       *string `json:"service_key_3"`
	ToolConfiguration int     `json:"tool_configuration"`
}

// ProductGroup defines model for ProductGroup.
type ProductGroup struct {
	Group    int  `json:"group"`
	Id       *int `json:"id,omitempty"`
	Prefetch *struct {
		Group   *map[string]DojoGroup `json:"group,omitempty"`
		Product *map[string]Product   `json:"product,omitempty"`
		Role    *map[string]Role      `json:"role,omitempty"`
	} `json:"prefetch,omitempty"`
	Product int `json:"product"`
	Role    int `json:"role"`
}

// ProductGroupRequest defines model for ProductGroupRequest.
type ProductGroupRequest struct {
	Group   int `json:"group"`
	Product int `json:"product"`
	Role    int `json:"role"`
}

// ProductMember defines model for ProductMember.
type ProductMember struct {
	Id       *int `json:"id,omitempty"`
	Prefetch *struct {
		Product *map[string]Product  `json:"product,omitempty"`
		Role    *map[string]Role     `json:"role,omitempty"`
		User    *map[string]UserStub `json:"user,omitempty"`
	} `json:"prefetch,omitempty"`
	Product int `json:"product"`
	Role    int `json:"role"`
	User    int `json:"user"`
}

// ProductMemberRequest defines model for ProductMemberRequest.
type ProductMemberRequest struct {
	Product int `json:"product"`
	Role    int `json:"role"`
	User    int `json:"user"`
}

// ProductMeta defines model for ProductMeta.
type ProductMeta struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

// ProductRequest defines model for ProductRequest.
type ProductRequest struct {
	// BusinessCriticality * `very high` - Very High
	// * `high` - High
	// * `medium` - Medium
	// * `low` - Low
	// * `very low` - Very Low
	// * `none` - None
	BusinessCriticality *ProductRequestBusinessCriticality `json:"business_criticality"`
	Description         string                             `json:"description"`

	// DisableSlaBreachNotifications Disable SLA breach notifications if configured in the global settings
	DisableSlaBreachNotifications *bool `json:"disable_sla_breach_notifications,omitempty"`

	// EnableFullRiskAcceptance Allows full risk acceptance using a risk acceptance form, expiration date, uploaded proof, etc.
	EnableFullRiskAcceptance *bool `json:"enable_full_risk_acceptance,omitempty"`

	// EnableProductTagInheritance Enables product tag inheritance. Any tags added on a product will automatically be added to all Engagements, Tests, and Findings
	EnableProductTagInheritance *bool `json:"enable_product_tag_inheritance,omitempty"`

	// EnableSimpleRiskAcceptance Allows simple risk acceptance by checking/unchecking a checkbox.
	EnableSimpleRiskAcceptance *bool `json:"enable_simple_risk_acceptance,omitempty"`

	// ExternalAudience Specify if the application is used by people outside the organization.
	ExternalAudience *bool `json:"external_audience,omitempty"`

	// InternetAccessible Specify if the application is accessible from the public internet.
	InternetAccessible *bool `json:"internet_accessible,omitempty"`

	// Lifecycle * `construction` - Construction
	// * `production` - Production
	// * `retirement` - Retirement
	Lifecycle *ProductRequestLifecycle `json:"lifecycle"`
	Name      string                   `json:"name"`

	// Origin * `third party library` - Third Party Library
	// * `purchased` - Purchased
	// * `contractor` - Contractor Developed
	// * `internal` - Internally Developed
	// * `open source` - Open Source
	// * `outsourced` - Outsourced
	Origin *ProductRequestOrigin `json:"origin"`

	// Platform * `web service` - API
	// * `desktop` - Desktop
	// * `iot` - Internet of Things
	// * `mobile` - Mobile
	// * `web` - Web
	Platform         *ProductRequestPlatform `json:"platform"`
	ProdNumericGrade *int                    `json:"prod_numeric_grade"`
	ProdType         int                     `json:"prod_type"`
	ProductManager   *int                    `json:"product_manager"`
	Regulations      *[]int                  `json:"regulations,omitempty"`

	// Revenue Estimate the application's revenue.
	Revenue          *string   `json:"revenue"`
	SlaConfiguration *int      `json:"sla_configuration,omitempty"`
	Tags             *[]string `json:"tags,omitempty"`
	TeamManager      *int      `json:"team_manager"`
	TechnicalContact *int      `json:"technical_contact"`

	// UserRecords Estimate the number of user records within the application.
	UserRecords *int `json:"user_records"`
}

// ProductRequestBusinessCriticality * `very high` - Very High
// * `high` - High
// * `medium` - Medium
// * `low` - Low
// * `very low` - Very Low
// * `none` - None
type ProductRequestBusinessCriticality string

// ProductRequestLifecycle * `construction` - Construction
// * `production` - Production
// * `retirement` - Retirement
type ProductRequestLifecycle string

// ProductRequestOrigin * `third party library` - Third Party Library
// * `purchased` - Purchased
// * `contractor` - Contractor Developed
// * `internal` - Internally Developed
// * `open source` - Open Source
// * `outsourced` - Outsourced
type ProductRequestOrigin string

// ProductRequestPlatform * `web service` - API
// * `desktop` - Desktop
// * `iot` - Internet of Things
// * `mobile` - Mobile
// * `web` - Web
type ProductRequestPlatform string

// ProductType defines model for ProductType.
type ProductType struct {
	AuthorizationGroups *[]int     `json:"authorization_groups,omitempty"`
	Created             *time.Time `json:"created"`
	CriticalProduct     *bool      `json:"critical_product,omitempty"`
	Description         *string    `json:"description"`
	Id                  *int       `json:"id,omitempty"`
	KeyProduct          *bool      `json:"key_product,omitempty"`
	Members             *[]int     `json:"members,omitempty"`
	Name                string     `json:"name"`
	Prefetch            *struct {
		AuthorizationGroups *map[string]DojoGroup `json:"authorization_groups,omitempty"`
		Members             *map[string]UserStub  `json:"members,omitempty"`
	} `json:"prefetch,omitempty"`
	Updated *time.Time `json:"updated"`
}

// ProductTypeGroup defines model for ProductTypeGroup.
type ProductTypeGroup struct {
	Group    int  `json:"group"`
	Id       *int `json:"id,omitempty"`
	Prefetch *struct {
		Group       *map[string]DojoGroup   `json:"group,omitempty"`
		ProductType *map[string]ProductType `json:"product_type,omitempty"`
		Role        *map[string]Role        `json:"role,omitempty"`
	} `json:"prefetch,omitempty"`
	ProductType int `json:"product_type"`
	Role        int `json:"role"`
}

// ProductTypeGroupRequest defines model for ProductTypeGroupRequest.
type ProductTypeGroupRequest struct {
	Group       int `json:"group"`
	ProductType int `json:"product_type"`
	Role        int `json:"role"`
}

// ProductTypeMember defines model for ProductTypeMember.
type ProductTypeMember struct {
	Id       *int `json:"id,omitempty"`
	Prefetch *struct {
		ProductType *map[string]ProductType `json:"product_type,omitempty"`
		Role        *map[string]Role        `json:"role,omitempty"`
		User        *map[string]UserStub    `json:"user,omitempty"`
	} `json:"prefetch,omitempty"`
	ProductType int `json:"product_type"`
	Role        int `json:"role"`
	User        int `json:"user"`
}

// ProductTypeMemberRequest defines model for ProductTypeMemberRequest.
type ProductTypeMemberRequest struct {
	ProductType int `json:"product_type"`
	Role        int `json:"role"`
	User        int `json:"user"`
}

// ProductTypeRequest defines model for ProductTypeRequest.
type ProductTypeRequest struct {
	CriticalProduct *bool   `json:"critical_product,omitempty"`
	Description     *string `json:"description"`
	KeyProduct      *bool   `json:"key_product,omitempty"`
	Name            string  `json:"name"`
}

// QuestionnaireAnswer defines model for QuestionnaireAnswer.
type QuestionnaireAnswer struct {
	AnsweredSurvey int        `json:"answered_survey"`
	Created        *time.Time `json:"created,omitempty"`
	Id             *int       `json:"id,omitempty"`
	Modified       *time.Time `json:"modified,omitempty"`
	Question       int        `json:"question"`
}

// QuestionnaireAnsweredSurvey defines model for QuestionnaireAnsweredSurvey.
type QuestionnaireAnsweredSurvey struct {
	AnsweredOn *openapi_types.Date `json:"answered_on"`
	Assignee   *int                `json:"assignee"`
	Completed  *bool               `json:"completed,omitempty"`
	Engagement *int                `json:"engagement"`
	Id         *int                `json:"id,omitempty"`
	Responder  *int                `json:"responder"`
	Survey     int                 `json:"survey"`
}

// QuestionnaireEngagementSurvey defines model for QuestionnaireEngagementSurvey.
type QuestionnaireEngagementSurvey struct {
	Active      *bool     `json:"active,omitempty"`
	Description *string   `json:"description,omitempty"`
	Id          *int      `json:"id,omitempty"`
	Name        *string   `json:"name,omitempty"`
	Questions   *[]string `json:"questions,omitempty"`
}

// QuestionnaireGeneralSurvey defines model for QuestionnaireGeneralSurvey.
type QuestionnaireGeneralSurvey struct {
	Expiration   time.Time                     `json:"expiration"`
	Generated    *time.Time                    `json:"generated"`
	Id           *int                          `json:"id,omitempty"`
	NumResponses *int                          `json:"num_responses,omitempty"`
	Survey       QuestionnaireEngagementSurvey `json:"survey"`
}

// QuestionnaireQuestion defines model for QuestionnaireQuestion.
type QuestionnaireQuestion struct {
	Created  *time.Time `json:"created,omitempty"`
	Id       *int       `json:"id,omitempty"`
	Modified *time.Time `json:"modified,omitempty"`

	// Optional If selected, user doesn't have to answer this question
	Optional *bool `json:"optional,omitempty"`

	// Order The render order
	Order *int `json:"order,omitempty"`

	// Text The question text
	Text *string `json:"text,omitempty"`
}

// RawFile defines model for RawFile.
type RawFile struct {
	File string `json:"file"`
}

// ReImportScan defines model for ReImportScan.
type ReImportScan struct {
	// Active Override the active setting from the tool.
	Active               bool  `json:"active"`
	ApiScanConfiguration *int  `json:"api_scan_configuration"`
	AutoCreateContext    *bool `json:"auto_create_context,omitempty"`

	// BranchTag Branch or Tag that was scanned.
	BranchTag *string `json:"branch_tag,omitempty"`

	// BuildId ID of the build that was scanned.
	BuildId *string `json:"build_id,omitempty"`

	// CloseOldFindings Select if old findings no longer present in the report get closed as mitigated when importing.
	CloseOldFindings *bool `json:"close_old_findings,omitempty"`

	// CloseOldFindingsProductScope Select if close_old_findings applies to all findings of the same type in the product. By default, it is false meaning that only old findings of the same type in the engagement are in scope. Note that this only applies on the first call to reimport-scan.
	CloseOldFindingsProductScope *bool `json:"close_old_findings_product_scope,omitempty"`

	// CommitHash Commit that was scanned.
	CommitHash *string `json:"commit_hash,omitempty"`

	// CreateFindingGroupsForAllFindings If set to false, finding groups will only be created when there is more than one grouped finding
	CreateFindingGroupsForAllFindings *bool `json:"create_finding_groups_for_all_findings,omitempty"`
	DeduplicationOnEngagement         *bool `json:"deduplication_on_engagement,omitempty"`

	// DoNotReactivate Select if the import should ignore active findings from the report, useful for triage-less scanners. Will keep existing findings closed, without reactivating them. For more information check the docs.
	DoNotReactivate *bool `json:"do_not_reactivate,omitempty"`
	EndpointToAdd   *int  `json:"endpoint_to_add,omitempty"`

	// EngagementEndDate End Date for Engagement. Default is current time + 365 days. Required format year-month-day
	EngagementEndDate *openapi_types.Date `json:"engagement_end_date,omitempty"`
	EngagementId      *int                `json:"engagement_id,omitempty"`
	EngagementName    *string             `json:"engagement_name,omitempty"`
	Environment       *string             `json:"environment,omitempty"`
	File              *string             `json:"file,omitempty"`

	// GroupBy Choose an option to automatically group new findings by the chosen option.
	//
	// * `component_name` - Component Name
	// * `component_name+component_version` - Component Name + Version
	// * `file_path` - File path
	// * `finding_title` - Finding Title
	GroupBy *ReImportScanGroupBy `json:"group_by,omitempty"`
	Lead    *int                 `json:"lead"`

	// MinimumSeverity Minimum severity level to be imported
	//
	// * `Info` - Info
	// * `Low` - Low
	// * `Medium` - Medium
	// * `High` - High
	// * `Critical` - Critical
	MinimumSeverity *ReImportScanMinimumSeverity `json:"minimum_severity,omitempty"`
	ProductId       *int                         `json:"product_id,omitempty"`
	ProductName     *string                      `json:"product_name,omitempty"`
	ProductTypeId   *int                         `json:"product_type_id,omitempty"`
	ProductTypeName *string                      `json:"product_type_name,omitempty"`
	PushToJira      *bool                        `json:"push_to_jira,omitempty"`

	// ScanDate Scan completion date will be used on all findings.
	ScanDate *openapi_types.Date `json:"scan_date,omitempty"`

	// ScanType * `Acunetix Scan` - Acunetix Scan
	// * `Acunetix360 Scan` - Acunetix360 Scan
	// * `Anchore Engine Scan` - Anchore Engine Scan
	// * `Anchore Enterprise Policy Check` - Anchore Enterprise Policy Check
	// * `Anchore Grype` - Anchore Grype
	// * `AnchoreCTL Policies Report` - AnchoreCTL Policies Report
	// * `AnchoreCTL Vuln Report` - AnchoreCTL Vuln Report
	// * `AppSpider Scan` - AppSpider Scan
	// * `Aqua Scan` - Aqua Scan
	// * `Arachni Scan` - Arachni Scan
	// * `AuditJS Scan` - AuditJS Scan
	// * `AWS Prowler Scan` - AWS Prowler Scan
	// * `AWS Prowler V3` - AWS Prowler V3
	// * `AWS Scout2 Scan` - AWS Scout2 Scan
	// * `AWS Security Finding Format (ASFF) Scan` - AWS Security Finding Format (ASFF) Scan
	// * `AWS Security Hub Scan` - AWS Security Hub Scan
	// * `Azure Security Center Recommendations Scan` - Azure Security Center Recommendations Scan
	// * `Bandit Scan` - Bandit Scan
	// * `BlackDuck API` - BlackDuck API
	// * `Blackduck Component Risk` - Blackduck Component Risk
	// * `Blackduck Hub Scan` - Blackduck Hub Scan
	// * `Brakeman Scan` - Brakeman Scan
	// * `Bugcrowd API Import` - Bugcrowd API Import
	// * `BugCrowd Scan` - BugCrowd Scan
	// * `Bundler-Audit Scan` - Bundler-Audit Scan
	// * `Burp Enterprise Scan` - Burp Enterprise Scan
	// * `Burp GraphQL API` - Burp GraphQL API
	// * `Burp REST API` - Burp REST API
	// * `Burp Scan` - Burp Scan
	// * `CargoAudit Scan` - CargoAudit Scan
	// * `Checkmarx OSA` - Checkmarx OSA
	// * `Checkmarx Scan` - Checkmarx Scan
	// * `Checkmarx Scan detailed` - Checkmarx Scan detailed
	// * `Checkov Scan` - Checkov Scan
	// * `Clair Klar Scan` - Clair Klar Scan
	// * `Clair Scan` - Clair Scan
	// * `Cloudsploit Scan` - Cloudsploit Scan
	// * `Cobalt.io API Import` - Cobalt.io API Import
	// * `Cobalt.io Scan` - Cobalt.io Scan
	// * `Codechecker Report native` - Codechecker Report native
	// * `Contrast Scan` - Contrast Scan
	// * `Coverity API` - Coverity API
	// * `Crashtest Security JSON File` - Crashtest Security JSON File
	// * `Crashtest Security XML File` - Crashtest Security XML File
	// * `CredScan Scan` - CredScan Scan
	// * `CycloneDX Scan` - CycloneDX Scan
	// * `DawnScanner Scan` - DawnScanner Scan
	// * `Dependency Check Scan` - Dependency Check Scan
	// * `Dependency Track Finding Packaging Format (FPF) Export` - Dependency Track Finding Packaging Format (FPF) Export
	// * `Detect-secrets Scan` - Detect-secrets Scan
	// * `docker-bench-security Scan` - docker-bench-security Scan
	// * `Dockle Scan` - Dockle Scan
	// * `DrHeader JSON Importer` - DrHeader JSON Importer
	// * `DSOP Scan` - DSOP Scan
	// * `Edgescan Scan` - Edgescan Scan
	// * `ESLint Scan` - ESLint Scan
	// * `Fortify Scan` - Fortify Scan
	// * `Generic Findings Import` - Generic Findings Import
	// * `Ggshield Scan` - Ggshield Scan
	// * `Github Vulnerability Scan` - Github Vulnerability Scan
	// * `GitLab API Fuzzing Report Scan` - GitLab API Fuzzing Report Scan
	// * `GitLab Container Scan` - GitLab Container Scan
	// * `GitLab DAST Report` - GitLab DAST Report
	// * `GitLab Dependency Scanning Report` - GitLab Dependency Scanning Report
	// * `GitLab SAST Report` - GitLab SAST Report
	// * `GitLab Secret Detection Report` - GitLab Secret Detection Report
	// * `Gitleaks Scan` - Gitleaks Scan
	// * `Gosec Scanner` - Gosec Scanner
	// * `Govulncheck Scanner` - Govulncheck Scanner
	// * `HackerOne Cases` - HackerOne Cases
	// * `Hadolint Dockerfile check` - Hadolint Dockerfile check
	// * `Harbor Vulnerability Scan` - Harbor Vulnerability Scan
	// * `Horusec Scan` - Horusec Scan
	// * `HuskyCI Report` - HuskyCI Report
	// * `Hydra Scan` - Hydra Scan
	// * `IBM AppScan DAST` - IBM AppScan DAST
	// * `Immuniweb Scan` - Immuniweb Scan
	// * `IntSights Report` - IntSights Report
	// * `JFrog Xray API Summary Artifact Scan` - JFrog Xray API Summary Artifact Scan
	// * `JFrog Xray Scan` - JFrog Xray Scan
	// * `JFrog Xray Unified Scan` - JFrog Xray Unified Scan
	// * `KICS Scan` - KICS Scan
	// * `Kiuwan Scan` - Kiuwan Scan
	// * `kube-bench Scan` - kube-bench Scan
	// * `Meterian Scan` - Meterian Scan
	// * `Microfocus Webinspect Scan` - Microfocus Webinspect Scan
	// * `MobSF Scan` - MobSF Scan
	// * `Mobsfscan Scan` - Mobsfscan Scan
	// * `Mozilla Observatory Scan` - Mozilla Observatory Scan
	// * `Netsparker Scan` - Netsparker Scan
	// * `NeuVector (compliance)` - NeuVector (compliance)
	// * `NeuVector (REST)` - NeuVector (REST)
	// * `Nexpose Scan` - Nexpose Scan
	// * `Nikto Scan` - Nikto Scan
	// * `Nmap Scan` - Nmap Scan
	// * `Node Security Platform Scan` - Node Security Platform Scan
	// * `NPM Audit Scan` - NPM Audit Scan
	// * `Nuclei Scan` - Nuclei Scan
	// * `Openscap Vulnerability Scan` - Openscap Vulnerability Scan
	// * `OpenVAS CSV` - OpenVAS CSV
	// * `ORT evaluated model Importer` - ORT evaluated model Importer
	// * `OssIndex Devaudit SCA Scan Importer` - OssIndex Devaudit SCA Scan Importer
	// * `Outpost24 Scan` - Outpost24 Scan
	// * `PHP Security Audit v2` - PHP Security Audit v2
	// * `PHP Symfony Security Check` - PHP Symfony Security Check
	// * `pip-audit Scan` - pip-audit Scan
	// * `PMD Scan` - PMD Scan
	// * `Popeye Scan` - Popeye Scan
	// * `PWN SAST` - PWN SAST
	// * `Qualys Infrastructure Scan (WebGUI XML)` - Qualys Infrastructure Scan (WebGUI XML)
	// * `Qualys Scan` - Qualys Scan
	// * `Qualys Webapp Scan` - Qualys Webapp Scan
	// * `Retire.js Scan` - Retire.js Scan
	// * `Risk Recon API Importer` - Risk Recon API Importer
	// * `Rubocop Scan` - Rubocop Scan
	// * `Rusty Hog Scan` - Rusty Hog Scan
	// * `SARIF` - SARIF
	// * `Scantist Scan` - Scantist Scan
	// * `Scout Suite Scan` - Scout Suite Scan
	// * `Semgrep JSON Report` - Semgrep JSON Report
	// * `SKF Scan` - SKF Scan
	// * `Snyk Scan` - Snyk Scan
	// * `Solar Appscreener Scan` - Solar Appscreener Scan
	// * `SonarQube API Import` - SonarQube API Import
	// * `SonarQube Scan` - SonarQube Scan
	// * `SonarQube Scan detailed` - SonarQube Scan detailed
	// * `Sonatype Application Scan` - Sonatype Application Scan
	// * `SpotBugs Scan` - SpotBugs Scan
	// * `SSL Labs Scan` - SSL Labs Scan
	// * `Sslscan` - Sslscan
	// * `Sslyze Scan` - Sslyze Scan
	// * `SSLyze Scan (JSON)` - SSLyze Scan (JSON)
	// * `StackHawk HawkScan` - StackHawk HawkScan
	// * `Talisman Scan` - Talisman Scan
	// * `Tenable Scan` - Tenable Scan
	// * `Terrascan Scan` - Terrascan Scan
	// * `Testssl Scan` - Testssl Scan
	// * `TFSec Scan` - TFSec Scan
	// * `Trivy Operator Scan` - Trivy Operator Scan
	// * `Trivy Scan` - Trivy Scan
	// * `Trufflehog Scan` - Trufflehog Scan
	// * `Trufflehog3 Scan` - Trufflehog3 Scan
	// * `Trustwave Fusion API Scan` - Trustwave Fusion API Scan
	// * `Trustwave Scan (CSV)` - Trustwave Scan (CSV)
	// * `Twistlock Image Scan` - Twistlock Image Scan
	// * `VCG Scan` - VCG Scan
	// * `Veracode Scan` - Veracode Scan
	// * `Veracode SourceClear Scan` - Veracode SourceClear Scan
	// * `Vulners` - Vulners
	// * `Wapiti Scan` - Wapiti Scan
	// * `Wazuh` - Wazuh
	// * `WFuzz JSON report` - WFuzz JSON report
	// * `Whispers Scan` - Whispers Scan
	// * `WhiteHat Sentinel` - WhiteHat Sentinel
	// * `Whitesource Scan` - Whitesource Scan
	// * `Wpscan` - Wpscan
	// * `Xanitizer Scan` - Xanitizer Scan
	// * `Yarn Audit Scan` - Yarn Audit Scan
	// * `ZAP Scan` - ZAP Scan
	ScanType ReImportScanScanType `json:"scan_type"`

	// Service A service is a self-contained piece of functionality within a Product. This is an optional field which is used in deduplication and closing of old findings when set. This affects the whole engagement/product depending on your deduplication scope.
	Service *string `json:"service,omitempty"`

	// SourceCodeManagementUri Resource link to source code
	SourceCodeManagementUri *string           `json:"source_code_management_uri,omitempty"`
	Statistics              *ImportStatistics `json:"statistics,omitempty"`

	// Tags Modify existing tags that help describe this scan. (Existing test tags will be overwritten)
	Tags      *[]string `json:"tags,omitempty"`
	Test      *int      `json:"test,omitempty"`
	TestId    *int      `json:"test_id,omitempty"`
	TestTitle *string   `json:"test_title,omitempty"`

	// Verified Override the verified setting from the tool.
	Verified bool `json:"verified"`

	// Version Version that will be set on existing Test object. Leave empty to leave existing value in place.
	Version *string `json:"version,omitempty"`
}

// ReImportScanGroupBy Choose an option to automatically group new findings by the chosen option.
//
// * `component_name` - Component Name
// * `component_name+component_version` - Component Name + Version
// * `file_path` - File path
// * `finding_title` - Finding Title
type ReImportScanGroupBy string

// ReImportScanMinimumSeverity Minimum severity level to be imported
//
// * `Info` - Info
// * `Low` - Low
// * `Medium` - Medium
// * `High` - High
// * `Critical` - Critical
type ReImportScanMinimumSeverity string

// ReImportScanScanType * `Acunetix Scan` - Acunetix Scan
// * `Acunetix360 Scan` - Acunetix360 Scan
// * `Anchore Engine Scan` - Anchore Engine Scan
// * `Anchore Enterprise Policy Check` - Anchore Enterprise Policy Check
// * `Anchore Grype` - Anchore Grype
// * `AnchoreCTL Policies Report` - AnchoreCTL Policies Report
// * `AnchoreCTL Vuln Report` - AnchoreCTL Vuln Report
// * `AppSpider Scan` - AppSpider Scan
// * `Aqua Scan` - Aqua Scan
// * `Arachni Scan` - Arachni Scan
// * `AuditJS Scan` - AuditJS Scan
// * `AWS Prowler Scan` - AWS Prowler Scan
// * `AWS Prowler V3` - AWS Prowler V3
// * `AWS Scout2 Scan` - AWS Scout2 Scan
// * `AWS Security Finding Format (ASFF) Scan` - AWS Security Finding Format (ASFF) Scan
// * `AWS Security Hub Scan` - AWS Security Hub Scan
// * `Azure Security Center Recommendations Scan` - Azure Security Center Recommendations Scan
// * `Bandit Scan` - Bandit Scan
// * `BlackDuck API` - BlackDuck API
// * `Blackduck Component Risk` - Blackduck Component Risk
// * `Blackduck Hub Scan` - Blackduck Hub Scan
// * `Brakeman Scan` - Brakeman Scan
// * `Bugcrowd API Import` - Bugcrowd API Import
// * `BugCrowd Scan` - BugCrowd Scan
// * `Bundler-Audit Scan` - Bundler-Audit Scan
// * `Burp Enterprise Scan` - Burp Enterprise Scan
// * `Burp GraphQL API` - Burp GraphQL API
// * `Burp REST API` - Burp REST API
// * `Burp Scan` - Burp Scan
// * `CargoAudit Scan` - CargoAudit Scan
// * `Checkmarx OSA` - Checkmarx OSA
// * `Checkmarx Scan` - Checkmarx Scan
// * `Checkmarx Scan detailed` - Checkmarx Scan detailed
// * `Checkov Scan` - Checkov Scan
// * `Clair Klar Scan` - Clair Klar Scan
// * `Clair Scan` - Clair Scan
// * `Cloudsploit Scan` - Cloudsploit Scan
// * `Cobalt.io API Import` - Cobalt.io API Import
// * `Cobalt.io Scan` - Cobalt.io Scan
// * `Codechecker Report native` - Codechecker Report native
// * `Contrast Scan` - Contrast Scan
// * `Coverity API` - Coverity API
// * `Crashtest Security JSON File` - Crashtest Security JSON File
// * `Crashtest Security XML File` - Crashtest Security XML File
// * `CredScan Scan` - CredScan Scan
// * `CycloneDX Scan` - CycloneDX Scan
// * `DawnScanner Scan` - DawnScanner Scan
// * `Dependency Check Scan` - Dependency Check Scan
// * `Dependency Track Finding Packaging Format (FPF) Export` - Dependency Track Finding Packaging Format (FPF) Export
// * `Detect-secrets Scan` - Detect-secrets Scan
// * `docker-bench-security Scan` - docker-bench-security Scan
// * `Dockle Scan` - Dockle Scan
// * `DrHeader JSON Importer` - DrHeader JSON Importer
// * `DSOP Scan` - DSOP Scan
// * `Edgescan Scan` - Edgescan Scan
// * `ESLint Scan` - ESLint Scan
// * `Fortify Scan` - Fortify Scan
// * `Generic Findings Import` - Generic Findings Import
// * `Ggshield Scan` - Ggshield Scan
// * `Github Vulnerability Scan` - Github Vulnerability Scan
// * `GitLab API Fuzzing Report Scan` - GitLab API Fuzzing Report Scan
// * `GitLab Container Scan` - GitLab Container Scan
// * `GitLab DAST Report` - GitLab DAST Report
// * `GitLab Dependency Scanning Report` - GitLab Dependency Scanning Report
// * `GitLab SAST Report` - GitLab SAST Report
// * `GitLab Secret Detection Report` - GitLab Secret Detection Report
// * `Gitleaks Scan` - Gitleaks Scan
// * `Gosec Scanner` - Gosec Scanner
// * `Govulncheck Scanner` - Govulncheck Scanner
// * `HackerOne Cases` - HackerOne Cases
// * `Hadolint Dockerfile check` - Hadolint Dockerfile check
// * `Harbor Vulnerability Scan` - Harbor Vulnerability Scan
// * `Horusec Scan` - Horusec Scan
// * `HuskyCI Report` - HuskyCI Report
// * `Hydra Scan` - Hydra Scan
// * `IBM AppScan DAST` - IBM AppScan DAST
// * `Immuniweb Scan` - Immuniweb Scan
// * `IntSights Report` - IntSights Report
// * `JFrog Xray API Summary Artifact Scan` - JFrog Xray API Summary Artifact Scan
// * `JFrog Xray Scan` - JFrog Xray Scan
// * `JFrog Xray Unified Scan` - JFrog Xray Unified Scan
// * `KICS Scan` - KICS Scan
// * `Kiuwan Scan` - Kiuwan Scan
// * `kube-bench Scan` - kube-bench Scan
// * `Meterian Scan` - Meterian Scan
// * `Microfocus Webinspect Scan` - Microfocus Webinspect Scan
// * `MobSF Scan` - MobSF Scan
// * `Mobsfscan Scan` - Mobsfscan Scan
// * `Mozilla Observatory Scan` - Mozilla Observatory Scan
// * `Netsparker Scan` - Netsparker Scan
// * `NeuVector (compliance)` - NeuVector (compliance)
// * `NeuVector (REST)` - NeuVector (REST)
// * `Nexpose Scan` - Nexpose Scan
// * `Nikto Scan` - Nikto Scan
// * `Nmap Scan` - Nmap Scan
// * `Node Security Platform Scan` - Node Security Platform Scan
// * `NPM Audit Scan` - NPM Audit Scan
// * `Nuclei Scan` - Nuclei Scan
// * `Openscap Vulnerability Scan` - Openscap Vulnerability Scan
// * `OpenVAS CSV` - OpenVAS CSV
// * `ORT evaluated model Importer` - ORT evaluated model Importer
// * `OssIndex Devaudit SCA Scan Importer` - OssIndex Devaudit SCA Scan Importer
// * `Outpost24 Scan` - Outpost24 Scan
// * `PHP Security Audit v2` - PHP Security Audit v2
// * `PHP Symfony Security Check` - PHP Symfony Security Check
// * `pip-audit Scan` - pip-audit Scan
// * `PMD Scan` - PMD Scan
// * `Popeye Scan` - Popeye Scan
// * `PWN SAST` - PWN SAST
// * `Qualys Infrastructure Scan (WebGUI XML)` - Qualys Infrastructure Scan (WebGUI XML)
// * `Qualys Scan` - Qualys Scan
// * `Qualys Webapp Scan` - Qualys Webapp Scan
// * `Retire.js Scan` - Retire.js Scan
// * `Risk Recon API Importer` - Risk Recon API Importer
// * `Rubocop Scan` - Rubocop Scan
// * `Rusty Hog Scan` - Rusty Hog Scan
// * `SARIF` - SARIF
// * `Scantist Scan` - Scantist Scan
// * `Scout Suite Scan` - Scout Suite Scan
// * `Semgrep JSON Report` - Semgrep JSON Report
// * `SKF Scan` - SKF Scan
// * `Snyk Scan` - Snyk Scan
// * `Solar Appscreener Scan` - Solar Appscreener Scan
// * `SonarQube API Import` - SonarQube API Import
// * `SonarQube Scan` - SonarQube Scan
// * `SonarQube Scan detailed` - SonarQube Scan detailed
// * `Sonatype Application Scan` - Sonatype Application Scan
// * `SpotBugs Scan` - SpotBugs Scan
// * `SSL Labs Scan` - SSL Labs Scan
// * `Sslscan` - Sslscan
// * `Sslyze Scan` - Sslyze Scan
// * `SSLyze Scan (JSON)` - SSLyze Scan (JSON)
// * `StackHawk HawkScan` - StackHawk HawkScan
// * `Talisman Scan` - Talisman Scan
// * `Tenable Scan` - Tenable Scan
// * `Terrascan Scan` - Terrascan Scan
// * `Testssl Scan` - Testssl Scan
// * `TFSec Scan` - TFSec Scan
// * `Trivy Operator Scan` - Trivy Operator Scan
// * `Trivy Scan` - Trivy Scan
// * `Trufflehog Scan` - Trufflehog Scan
// * `Trufflehog3 Scan` - Trufflehog3 Scan
// * `Trustwave Fusion API Scan` - Trustwave Fusion API Scan
// * `Trustwave Scan (CSV)` - Trustwave Scan (CSV)
// * `Twistlock Image Scan` - Twistlock Image Scan
// * `VCG Scan` - VCG Scan
// * `Veracode Scan` - Veracode Scan
// * `Veracode SourceClear Scan` - Veracode SourceClear Scan
// * `Vulners` - Vulners
// * `Wapiti Scan` - Wapiti Scan
// * `Wazuh` - Wazuh
// * `WFuzz JSON report` - WFuzz JSON report
// * `Whispers Scan` - Whispers Scan
// * `WhiteHat Sentinel` - WhiteHat Sentinel
// * `Whitesource Scan` - Whitesource Scan
// * `Wpscan` - Wpscan
// * `Xanitizer Scan` - Xanitizer Scan
// * `Yarn Audit Scan` - Yarn Audit Scan
// * `ZAP Scan` - ZAP Scan
type ReImportScanScanType string

// ReImportScanRequest defines model for ReImportScanRequest.
type ReImportScanRequest struct {
	// Active Override the active setting from the tool.
	Active               bool  `json:"active"`
	ApiScanConfiguration *int  `json:"api_scan_configuration"`
	AutoCreateContext    *bool `json:"auto_create_context,omitempty"`

	// BranchTag Branch or Tag that was scanned.
	BranchTag *string `json:"branch_tag,omitempty"`

	// BuildId ID of the build that was scanned.
	BuildId *string `json:"build_id,omitempty"`

	// CloseOldFindings Select if old findings no longer present in the report get closed as mitigated when importing.
	CloseOldFindings *bool `json:"close_old_findings,omitempty"`

	// CloseOldFindingsProductScope Select if close_old_findings applies to all findings of the same type in the product. By default, it is false meaning that only old findings of the same type in the engagement are in scope. Note that this only applies on the first call to reimport-scan.
	CloseOldFindingsProductScope *bool `json:"close_old_findings_product_scope,omitempty"`

	// CommitHash Commit that was scanned.
	CommitHash *string `json:"commit_hash,omitempty"`

	// CreateFindingGroupsForAllFindings If set to false, finding groups will only be created when there is more than one grouped finding
	CreateFindingGroupsForAllFindings *bool `json:"create_finding_groups_for_all_findings,omitempty"`
	DeduplicationOnEngagement         *bool `json:"deduplication_on_engagement,omitempty"`

	// DoNotReactivate Select if the import should ignore active findings from the report, useful for triage-less scanners. Will keep existing findings closed, without reactivating them. For more information check the docs.
	DoNotReactivate *bool `json:"do_not_reactivate,omitempty"`
	EndpointToAdd   *int  `json:"endpoint_to_add,omitempty"`

	// EngagementEndDate End Date for Engagement. Default is current time + 365 days. Required format year-month-day
	EngagementEndDate *openapi_types.Date `json:"engagement_end_date,omitempty"`
	EngagementName    *string             `json:"engagement_name,omitempty"`
	Environment       *string             `json:"environment,omitempty"`
	File              *openapi_types.File `json:"file,omitempty"`

	// GroupBy Choose an option to automatically group new findings by the chosen option.
	//
	// * `component_name` - Component Name
	// * `component_name+component_version` - Component Name + Version
	// * `file_path` - File path
	// * `finding_title` - Finding Title
	GroupBy *ReImportScanRequestGroupBy `json:"group_by,omitempty"`
	Lead    *int                        `json:"lead"`

	// MinimumSeverity Minimum severity level to be imported
	//
	// * `Info` - Info
	// * `Low` - Low
	// * `Medium` - Medium
	// * `High` - High
	// * `Critical` - Critical
	MinimumSeverity *ReImportScanRequestMinimumSeverity `json:"minimum_severity,omitempty"`
	ProductName     *string                             `json:"product_name,omitempty"`
	ProductTypeName *string                             `json:"product_type_name,omitempty"`
	PushToJira      *bool                               `json:"push_to_jira,omitempty"`

	// ScanDate Scan completion date will be used on all findings.
	ScanDate *openapi_types.Date `json:"scan_date,omitempty"`

	// ScanType * `Acunetix Scan` - Acunetix Scan
	// * `Acunetix360 Scan` - Acunetix360 Scan
	// * `Anchore Engine Scan` - Anchore Engine Scan
	// * `Anchore Enterprise Policy Check` - Anchore Enterprise Policy Check
	// * `Anchore Grype` - Anchore Grype
	// * `AnchoreCTL Policies Report` - AnchoreCTL Policies Report
	// * `AnchoreCTL Vuln Report` - AnchoreCTL Vuln Report
	// * `AppSpider Scan` - AppSpider Scan
	// * `Aqua Scan` - Aqua Scan
	// * `Arachni Scan` - Arachni Scan
	// * `AuditJS Scan` - AuditJS Scan
	// * `AWS Prowler Scan` - AWS Prowler Scan
	// * `AWS Prowler V3` - AWS Prowler V3
	// * `AWS Scout2 Scan` - AWS Scout2 Scan
	// * `AWS Security Finding Format (ASFF) Scan` - AWS Security Finding Format (ASFF) Scan
	// * `AWS Security Hub Scan` - AWS Security Hub Scan
	// * `Azure Security Center Recommendations Scan` - Azure Security Center Recommendations Scan
	// * `Bandit Scan` - Bandit Scan
	// * `BlackDuck API` - BlackDuck API
	// * `Blackduck Component Risk` - Blackduck Component Risk
	// * `Blackduck Hub Scan` - Blackduck Hub Scan
	// * `Brakeman Scan` - Brakeman Scan
	// * `Bugcrowd API Import` - Bugcrowd API Import
	// * `BugCrowd Scan` - BugCrowd Scan
	// * `Bundler-Audit Scan` - Bundler-Audit Scan
	// * `Burp Enterprise Scan` - Burp Enterprise Scan
	// * `Burp GraphQL API` - Burp GraphQL API
	// * `Burp REST API` - Burp REST API
	// * `Burp Scan` - Burp Scan
	// * `CargoAudit Scan` - CargoAudit Scan
	// * `Checkmarx OSA` - Checkmarx OSA
	// * `Checkmarx Scan` - Checkmarx Scan
	// * `Checkmarx Scan detailed` - Checkmarx Scan detailed
	// * `Checkov Scan` - Checkov Scan
	// * `Clair Klar Scan` - Clair Klar Scan
	// * `Clair Scan` - Clair Scan
	// * `Cloudsploit Scan` - Cloudsploit Scan
	// * `Cobalt.io API Import` - Cobalt.io API Import
	// * `Cobalt.io Scan` - Cobalt.io Scan
	// * `Codechecker Report native` - Codechecker Report native
	// * `Contrast Scan` - Contrast Scan
	// * `Coverity API` - Coverity API
	// * `Crashtest Security JSON File` - Crashtest Security JSON File
	// * `Crashtest Security XML File` - Crashtest Security XML File
	// * `CredScan Scan` - CredScan Scan
	// * `CycloneDX Scan` - CycloneDX Scan
	// * `DawnScanner Scan` - DawnScanner Scan
	// * `Dependency Check Scan` - Dependency Check Scan
	// * `Dependency Track Finding Packaging Format (FPF) Export` - Dependency Track Finding Packaging Format (FPF) Export
	// * `Detect-secrets Scan` - Detect-secrets Scan
	// * `docker-bench-security Scan` - docker-bench-security Scan
	// * `Dockle Scan` - Dockle Scan
	// * `DrHeader JSON Importer` - DrHeader JSON Importer
	// * `DSOP Scan` - DSOP Scan
	// * `Edgescan Scan` - Edgescan Scan
	// * `ESLint Scan` - ESLint Scan
	// * `Fortify Scan` - Fortify Scan
	// * `Generic Findings Import` - Generic Findings Import
	// * `Ggshield Scan` - Ggshield Scan
	// * `Github Vulnerability Scan` - Github Vulnerability Scan
	// * `GitLab API Fuzzing Report Scan` - GitLab API Fuzzing Report Scan
	// * `GitLab Container Scan` - GitLab Container Scan
	// * `GitLab DAST Report` - GitLab DAST Report
	// * `GitLab Dependency Scanning Report` - GitLab Dependency Scanning Report
	// * `GitLab SAST Report` - GitLab SAST Report
	// * `GitLab Secret Detection Report` - GitLab Secret Detection Report
	// * `Gitleaks Scan` - Gitleaks Scan
	// * `Gosec Scanner` - Gosec Scanner
	// * `Govulncheck Scanner` - Govulncheck Scanner
	// * `HackerOne Cases` - HackerOne Cases
	// * `Hadolint Dockerfile check` - Hadolint Dockerfile check
	// * `Harbor Vulnerability Scan` - Harbor Vulnerability Scan
	// * `Horusec Scan` - Horusec Scan
	// * `HuskyCI Report` - HuskyCI Report
	// * `Hydra Scan` - Hydra Scan
	// * `IBM AppScan DAST` - IBM AppScan DAST
	// * `Immuniweb Scan` - Immuniweb Scan
	// * `IntSights Report` - IntSights Report
	// * `JFrog Xray API Summary Artifact Scan` - JFrog Xray API Summary Artifact Scan
	// * `JFrog Xray Scan` - JFrog Xray Scan
	// * `JFrog Xray Unified Scan` - JFrog Xray Unified Scan
	// * `KICS Scan` - KICS Scan
	// * `Kiuwan Scan` - Kiuwan Scan
	// * `kube-bench Scan` - kube-bench Scan
	// * `Meterian Scan` - Meterian Scan
	// * `Microfocus Webinspect Scan` - Microfocus Webinspect Scan
	// * `MobSF Scan` - MobSF Scan
	// * `Mobsfscan Scan` - Mobsfscan Scan
	// * `Mozilla Observatory Scan` - Mozilla Observatory Scan
	// * `Netsparker Scan` - Netsparker Scan
	// * `NeuVector (compliance)` - NeuVector (compliance)
	// * `NeuVector (REST)` - NeuVector (REST)
	// * `Nexpose Scan` - Nexpose Scan
	// * `Nikto Scan` - Nikto Scan
	// * `Nmap Scan` - Nmap Scan
	// * `Node Security Platform Scan` - Node Security Platform Scan
	// * `NPM Audit Scan` - NPM Audit Scan
	// * `Nuclei Scan` - Nuclei Scan
	// * `Openscap Vulnerability Scan` - Openscap Vulnerability Scan
	// * `OpenVAS CSV` - OpenVAS CSV
	// * `ORT evaluated model Importer` - ORT evaluated model Importer
	// * `OssIndex Devaudit SCA Scan Importer` - OssIndex Devaudit SCA Scan Importer
	// * `Outpost24 Scan` - Outpost24 Scan
	// * `PHP Security Audit v2` - PHP Security Audit v2
	// * `PHP Symfony Security Check` - PHP Symfony Security Check
	// * `pip-audit Scan` - pip-audit Scan
	// * `PMD Scan` - PMD Scan
	// * `Popeye Scan` - Popeye Scan
	// * `PWN SAST` - PWN SAST
	// * `Qualys Infrastructure Scan (WebGUI XML)` - Qualys Infrastructure Scan (WebGUI XML)
	// * `Qualys Scan` - Qualys Scan
	// * `Qualys Webapp Scan` - Qualys Webapp Scan
	// * `Retire.js Scan` - Retire.js Scan
	// * `Risk Recon API Importer` - Risk Recon API Importer
	// * `Rubocop Scan` - Rubocop Scan
	// * `Rusty Hog Scan` - Rusty Hog Scan
	// * `SARIF` - SARIF
	// * `Scantist Scan` - Scantist Scan
	// * `Scout Suite Scan` - Scout Suite Scan
	// * `Semgrep JSON Report` - Semgrep JSON Report
	// * `SKF Scan` - SKF Scan
	// * `Snyk Scan` - Snyk Scan
	// * `Solar Appscreener Scan` - Solar Appscreener Scan
	// * `SonarQube API Import` - SonarQube API Import
	// * `SonarQube Scan` - SonarQube Scan
	// * `SonarQube Scan detailed` - SonarQube Scan detailed
	// * `Sonatype Application Scan` - Sonatype Application Scan
	// * `SpotBugs Scan` - SpotBugs Scan
	// * `SSL Labs Scan` - SSL Labs Scan
	// * `Sslscan` - Sslscan
	// * `Sslyze Scan` - Sslyze Scan
	// * `SSLyze Scan (JSON)` - SSLyze Scan (JSON)
	// * `StackHawk HawkScan` - StackHawk HawkScan
	// * `Talisman Scan` - Talisman Scan
	// * `Tenable Scan` - Tenable Scan
	// * `Terrascan Scan` - Terrascan Scan
	// * `Testssl Scan` - Testssl Scan
	// * `TFSec Scan` - TFSec Scan
	// * `Trivy Operator Scan` - Trivy Operator Scan
	// * `Trivy Scan` - Trivy Scan
	// * `Trufflehog Scan` - Trufflehog Scan
	// * `Trufflehog3 Scan` - Trufflehog3 Scan
	// * `Trustwave Fusion API Scan` - Trustwave Fusion API Scan
	// * `Trustwave Scan (CSV)` - Trustwave Scan (CSV)
	// * `Twistlock Image Scan` - Twistlock Image Scan
	// * `VCG Scan` - VCG Scan
	// * `Veracode Scan` - Veracode Scan
	// * `Veracode SourceClear Scan` - Veracode SourceClear Scan
	// * `Vulners` - Vulners
	// * `Wapiti Scan` - Wapiti Scan
	// * `Wazuh` - Wazuh
	// * `WFuzz JSON report` - WFuzz JSON report
	// * `Whispers Scan` - Whispers Scan
	// * `WhiteHat Sentinel` - WhiteHat Sentinel
	// * `Whitesource Scan` - Whitesource Scan
	// * `Wpscan` - Wpscan
	// * `Xanitizer Scan` - Xanitizer Scan
	// * `Yarn Audit Scan` - Yarn Audit Scan
	// * `ZAP Scan` - ZAP Scan
	ScanType ReImportScanRequestScanType `json:"scan_type"`

	// Service A service is a self-contained piece of functionality within a Product. This is an optional field which is used in deduplication and closing of old findings when set. This affects the whole engagement/product depending on your deduplication scope.
	Service *string `json:"service,omitempty"`

	// SourceCodeManagementUri Resource link to source code
	SourceCodeManagementUri *string `json:"source_code_management_uri,omitempty"`

	// Tags Modify existing tags that help describe this scan. (Existing test tags will be overwritten)
	Tags      *[]string `json:"tags,omitempty"`
	Test      *int      `json:"test,omitempty"`
	TestTitle *string   `json:"test_title,omitempty"`

	// Verified Override the verified setting from the tool.
	Verified bool `json:"verified"`

	// Version Version that will be set on existing Test object. Leave empty to leave existing value in place.
	Version *string `json:"version,omitempty"`
}

// ReImportScanRequestGroupBy Choose an option to automatically group new findings by the chosen option.
//
// * `component_name` - Component Name
// * `component_name+component_version` - Component Name + Version
// * `file_path` - File path
// * `finding_title` - Finding Title
type ReImportScanRequestGroupBy string

// ReImportScanRequestMinimumSeverity Minimum severity level to be imported
//
// * `Info` - Info
// * `Low` - Low
// * `Medium` - Medium
// * `High` - High
// * `Critical` - Critical
type ReImportScanRequestMinimumSeverity string

// ReImportScanRequestScanType * `Acunetix Scan` - Acunetix Scan
// * `Acunetix360 Scan` - Acunetix360 Scan
// * `Anchore Engine Scan` - Anchore Engine Scan
// * `Anchore Enterprise Policy Check` - Anchore Enterprise Policy Check
// * `Anchore Grype` - Anchore Grype
// * `AnchoreCTL Policies Report` - AnchoreCTL Policies Report
// * `AnchoreCTL Vuln Report` - AnchoreCTL Vuln Report
// * `AppSpider Scan` - AppSpider Scan
// * `Aqua Scan` - Aqua Scan
// * `Arachni Scan` - Arachni Scan
// * `AuditJS Scan` - AuditJS Scan
// * `AWS Prowler Scan` - AWS Prowler Scan
// * `AWS Prowler V3` - AWS Prowler V3
// * `AWS Scout2 Scan` - AWS Scout2 Scan
// * `AWS Security Finding Format (ASFF) Scan` - AWS Security Finding Format (ASFF) Scan
// * `AWS Security Hub Scan` - AWS Security Hub Scan
// * `Azure Security Center Recommendations Scan` - Azure Security Center Recommendations Scan
// * `Bandit Scan` - Bandit Scan
// * `BlackDuck API` - BlackDuck API
// * `Blackduck Component Risk` - Blackduck Component Risk
// * `Blackduck Hub Scan` - Blackduck Hub Scan
// * `Brakeman Scan` - Brakeman Scan
// * `Bugcrowd API Import` - Bugcrowd API Import
// * `BugCrowd Scan` - BugCrowd Scan
// * `Bundler-Audit Scan` - Bundler-Audit Scan
// * `Burp Enterprise Scan` - Burp Enterprise Scan
// * `Burp GraphQL API` - Burp GraphQL API
// * `Burp REST API` - Burp REST API
// * `Burp Scan` - Burp Scan
// * `CargoAudit Scan` - CargoAudit Scan
// * `Checkmarx OSA` - Checkmarx OSA
// * `Checkmarx Scan` - Checkmarx Scan
// * `Checkmarx Scan detailed` - Checkmarx Scan detailed
// * `Checkov Scan` - Checkov Scan
// * `Clair Klar Scan` - Clair Klar Scan
// * `Clair Scan` - Clair Scan
// * `Cloudsploit Scan` - Cloudsploit Scan
// * `Cobalt.io API Import` - Cobalt.io API Import
// * `Cobalt.io Scan` - Cobalt.io Scan
// * `Codechecker Report native` - Codechecker Report native
// * `Contrast Scan` - Contrast Scan
// * `Coverity API` - Coverity API
// * `Crashtest Security JSON File` - Crashtest Security JSON File
// * `Crashtest Security XML File` - Crashtest Security XML File
// * `CredScan Scan` - CredScan Scan
// * `CycloneDX Scan` - CycloneDX Scan
// * `DawnScanner Scan` - DawnScanner Scan
// * `Dependency Check Scan` - Dependency Check Scan
// * `Dependency Track Finding Packaging Format (FPF) Export` - Dependency Track Finding Packaging Format (FPF) Export
// * `Detect-secrets Scan` - Detect-secrets Scan
// * `docker-bench-security Scan` - docker-bench-security Scan
// * `Dockle Scan` - Dockle Scan
// * `DrHeader JSON Importer` - DrHeader JSON Importer
// * `DSOP Scan` - DSOP Scan
// * `Edgescan Scan` - Edgescan Scan
// * `ESLint Scan` - ESLint Scan
// * `Fortify Scan` - Fortify Scan
// * `Generic Findings Import` - Generic Findings Import
// * `Ggshield Scan` - Ggshield Scan
// * `Github Vulnerability Scan` - Github Vulnerability Scan
// * `GitLab API Fuzzing Report Scan` - GitLab API Fuzzing Report Scan
// * `GitLab Container Scan` - GitLab Container Scan
// * `GitLab DAST Report` - GitLab DAST Report
// * `GitLab Dependency Scanning Report` - GitLab Dependency Scanning Report
// * `GitLab SAST Report` - GitLab SAST Report
// * `GitLab Secret Detection Report` - GitLab Secret Detection Report
// * `Gitleaks Scan` - Gitleaks Scan
// * `Gosec Scanner` - Gosec Scanner
// * `Govulncheck Scanner` - Govulncheck Scanner
// * `HackerOne Cases` - HackerOne Cases
// * `Hadolint Dockerfile check` - Hadolint Dockerfile check
// * `Harbor Vulnerability Scan` - Harbor Vulnerability Scan
// * `Horusec Scan` - Horusec Scan
// * `HuskyCI Report` - HuskyCI Report
// * `Hydra Scan` - Hydra Scan
// * `IBM AppScan DAST` - IBM AppScan DAST
// * `Immuniweb Scan` - Immuniweb Scan
// * `IntSights Report` - IntSights Report
// * `JFrog Xray API Summary Artifact Scan` - JFrog Xray API Summary Artifact Scan
// * `JFrog Xray Scan` - JFrog Xray Scan
// * `JFrog Xray Unified Scan` - JFrog Xray Unified Scan
// * `KICS Scan` - KICS Scan
// * `Kiuwan Scan` - Kiuwan Scan
// * `kube-bench Scan` - kube-bench Scan
// * `Meterian Scan` - Meterian Scan
// * `Microfocus Webinspect Scan` - Microfocus Webinspect Scan
// * `MobSF Scan` - MobSF Scan
// * `Mobsfscan Scan` - Mobsfscan Scan
// * `Mozilla Observatory Scan` - Mozilla Observatory Scan
// * `Netsparker Scan` - Netsparker Scan
// * `NeuVector (compliance)` - NeuVector (compliance)
// * `NeuVector (REST)` - NeuVector (REST)
// * `Nexpose Scan` - Nexpose Scan
// * `Nikto Scan` - Nikto Scan
// * `Nmap Scan` - Nmap Scan
// * `Node Security Platform Scan` - Node Security Platform Scan
// * `NPM Audit Scan` - NPM Audit Scan
// * `Nuclei Scan` - Nuclei Scan
// * `Openscap Vulnerability Scan` - Openscap Vulnerability Scan
// * `OpenVAS CSV` - OpenVAS CSV
// * `ORT evaluated model Importer` - ORT evaluated model Importer
// * `OssIndex Devaudit SCA Scan Importer` - OssIndex Devaudit SCA Scan Importer
// * `Outpost24 Scan` - Outpost24 Scan
// * `PHP Security Audit v2` - PHP Security Audit v2
// * `PHP Symfony Security Check` - PHP Symfony Security Check
// * `pip-audit Scan` - pip-audit Scan
// * `PMD Scan` - PMD Scan
// * `Popeye Scan` - Popeye Scan
// * `PWN SAST` - PWN SAST
// * `Qualys Infrastructure Scan (WebGUI XML)` - Qualys Infrastructure Scan (WebGUI XML)
// * `Qualys Scan` - Qualys Scan
// * `Qualys Webapp Scan` - Qualys Webapp Scan
// * `Retire.js Scan` - Retire.js Scan
// * `Risk Recon API Importer` - Risk Recon API Importer
// * `Rubocop Scan` - Rubocop Scan
// * `Rusty Hog Scan` - Rusty Hog Scan
// * `SARIF` - SARIF
// * `Scantist Scan` - Scantist Scan
// * `Scout Suite Scan` - Scout Suite Scan
// * `Semgrep JSON Report` - Semgrep JSON Report
// * `SKF Scan` - SKF Scan
// * `Snyk Scan` - Snyk Scan
// * `Solar Appscreener Scan` - Solar Appscreener Scan
// * `SonarQube API Import` - SonarQube API Import
// * `SonarQube Scan` - SonarQube Scan
// * `SonarQube Scan detailed` - SonarQube Scan detailed
// * `Sonatype Application Scan` - Sonatype Application Scan
// * `SpotBugs Scan` - SpotBugs Scan
// * `SSL Labs Scan` - SSL Labs Scan
// * `Sslscan` - Sslscan
// * `Sslyze Scan` - Sslyze Scan
// * `SSLyze Scan (JSON)` - SSLyze Scan (JSON)
// * `StackHawk HawkScan` - StackHawk HawkScan
// * `Talisman Scan` - Talisman Scan
// * `Tenable Scan` - Tenable Scan
// * `Terrascan Scan` - Terrascan Scan
// * `Testssl Scan` - Testssl Scan
// * `TFSec Scan` - TFSec Scan
// * `Trivy Operator Scan` - Trivy Operator Scan
// * `Trivy Scan` - Trivy Scan
// * `Trufflehog Scan` - Trufflehog Scan
// * `Trufflehog3 Scan` - Trufflehog3 Scan
// * `Trustwave Fusion API Scan` - Trustwave Fusion API Scan
// * `Trustwave Scan (CSV)` - Trustwave Scan (CSV)
// * `Twistlock Image Scan` - Twistlock Image Scan
// * `VCG Scan` - VCG Scan
// * `Veracode Scan` - Veracode Scan
// * `Veracode SourceClear Scan` - Veracode SourceClear Scan
// * `Vulners` - Vulners
// * `Wapiti Scan` - Wapiti Scan
// * `Wazuh` - Wazuh
// * `WFuzz JSON report` - WFuzz JSON report
// * `Whispers Scan` - Whispers Scan
// * `WhiteHat Sentinel` - WhiteHat Sentinel
// * `Whitesource Scan` - Whitesource Scan
// * `Wpscan` - Wpscan
// * `Xanitizer Scan` - Xanitizer Scan
// * `Yarn Audit Scan` - Yarn Audit Scan
// * `ZAP Scan` - ZAP Scan
type ReImportScanRequestScanType string

// Regulation defines model for Regulation.
type Regulation struct {
	// Acronym A shortened representation of the name.
	Acronym string `json:"acronym"`

	// Category The subject of the regulation.
	//
	// * `privacy` - Privacy
	// * `finance` - Finance
	// * `education` - Education
	// * `medical` - Medical
	// * `corporate` - Corporate
	// * `other` - Other
	Category RegulationCategory `json:"category"`

	// Description Information about the regulation's purpose.
	Description *string `json:"description,omitempty"`
	Id          *int    `json:"id,omitempty"`

	// Jurisdiction The territory over which the regulation applies.
	Jurisdiction string `json:"jurisdiction"`

	// Name The name of the regulation.
	Name string `json:"name"`

	// Reference An external URL for more information.
	Reference *string `json:"reference,omitempty"`
}

// RegulationCategory The subject of the regulation.
//
// * `privacy` - Privacy
// * `finance` - Finance
// * `education` - Education
// * `medical` - Medical
// * `corporate` - Corporate
// * `other` - Other
type RegulationCategory string

// RegulationRequest defines model for RegulationRequest.
type RegulationRequest struct {
	// Acronym A shortened representation of the name.
	Acronym string `json:"acronym"`

	// Category The subject of the regulation.
	//
	// * `privacy` - Privacy
	// * `finance` - Finance
	// * `education` - Education
	// * `medical` - Medical
	// * `corporate` - Corporate
	// * `other` - Other
	Category RegulationRequestCategory `json:"category"`

	// Description Information about the regulation's purpose.
	Description *string `json:"description,omitempty"`

	// Jurisdiction The territory over which the regulation applies.
	Jurisdiction string `json:"jurisdiction"`

	// Name The name of the regulation.
	Name string `json:"name"`

	// Reference An external URL for more information.
	Reference *string `json:"reference,omitempty"`
}

// RegulationRequestCategory The subject of the regulation.
//
// * `privacy` - Privacy
// * `finance` - Finance
// * `education` - Education
// * `medical` - Medical
// * `corporate` - Corporate
// * `other` - Other
type RegulationRequestCategory string

// ReportGenerate defines model for ReportGenerate.
type ReportGenerate struct {
	Endpoint         *Endpoint         `json:"endpoint,omitempty"`
	Endpoints        *[]Endpoint       `json:"endpoints,omitempty"`
	Engagement       *Engagement       `json:"engagement,omitempty"`
	ExecutiveSummary *ExecutiveSummary `json:"executive_summary"`
	FindingNotes     *[]FindingToNotes `json:"finding_notes"`
	Findings         *[]Finding        `json:"findings,omitempty"`
	Host             string            `json:"host"`
	Product          *Product          `json:"product,omitempty"`
	ProductType      *ProductType      `json:"product_type,omitempty"`
	ReportInfo       string            `json:"report_info"`
	ReportName       string            `json:"report_name"`
	TeamName         string            `json:"team_name"`
	Test             *Test             `json:"test,omitempty"`
	Title            string            `json:"title"`
	User             *UserStub         `json:"user,omitempty"`
	UserId           int               `json:"user_id"`
}

// ReportGenerateOptionRequest defines model for ReportGenerateOptionRequest.
type ReportGenerateOptionRequest struct {
	IncludeExecutiveSummary *bool `json:"include_executive_summary,omitempty"`
	IncludeFindingImages    *bool `json:"include_finding_images,omitempty"`
	IncludeFindingNotes     *bool `json:"include_finding_notes,omitempty"`
	IncludeTableOfContents  *bool `json:"include_table_of_contents,omitempty"`
}

// RiskAcceptance defines model for RiskAcceptance.
type RiskAcceptance struct {
	// AcceptedBy The person that accepts the risk, can be outside of DefectDojo.
	AcceptedBy       *string    `json:"accepted_by"`
	AcceptedFindings []int      `json:"accepted_findings"`
	Created          *time.Time `json:"created,omitempty"`
	Decision         *string    `json:"decision,omitempty"`

	// DecisionDetails If a compensating control exists to mitigate the finding or reduce risk, then list the compensating control(s).
	DecisionDetails *string `json:"decision_details"`

	// ExpirationDate When the risk acceptance expires, the findings will be reactivated (unless disabled below).
	ExpirationDate *time.Time `json:"expiration_date"`

	// ExpirationDateHandled (readonly) When the risk acceptance expiration was handled (manually or by the daily job).
	ExpirationDateHandled *time.Time `json:"expiration_date_handled"`

	// ExpirationDateWarned (readonly) Date at which notice about the risk acceptance expiration was sent.
	ExpirationDateWarned *time.Time `json:"expiration_date_warned"`
	Id                   *int       `json:"id,omitempty"`

	// Name Descriptive name which in the future may also be used to group risk acceptances together across engagements and products
	Name  string `json:"name"`
	Notes *[]int `json:"notes,omitempty"`

	// Owner User in DefectDojo owning this acceptance. Only the owner and staff users can edit the risk acceptance.
	Owner int     `json:"owner"`
	Path  *string `json:"path,omitempty"`

	// ReactivateExpired Reactivate findings when risk acceptance expires?
	ReactivateExpired *bool   `json:"reactivate_expired,omitempty"`
	Recommendation    *string `json:"recommendation,omitempty"`

	// RecommendationDetails Explanation of security recommendation
	RecommendationDetails *string `json:"recommendation_details"`

	// RestartSlaExpired When enabled, the SLA for findings is restarted when the risk acceptance expires.
	RestartSlaExpired *bool      `json:"restart_sla_expired,omitempty"`
	Updated           *time.Time `json:"updated,omitempty"`
}

// RiskAcceptanceProof defines model for RiskAcceptanceProof.
type RiskAcceptanceProof struct {
	Path string `json:"path"`
}

// Role defines model for Role.
type Role struct {
	Id      *int   `json:"id,omitempty"`
	IsOwner *bool  `json:"is_owner,omitempty"`
	Name    string `json:"name"`
}

// SLAConfiguration defines model for SLAConfiguration.
type SLAConfiguration struct {
	// Critical number of days to remediate a critical finding.
	Critical    *int    `json:"critical,omitempty"`
	Description *string `json:"description"`

	// High number of days to remediate a high finding.
	High *int `json:"high,omitempty"`
	Id   *int `json:"id,omitempty"`

	// Low number of days to remediate a low finding.
	Low *int `json:"low,omitempty"`

	// Medium number of days to remediate a medium finding.
	Medium *int `json:"medium,omitempty"`

	// Name A unique name for the set of SLAs.
	Name string `json:"name"`
}

// SLAConfigurationRequest defines model for SLAConfigurationRequest.
type SLAConfigurationRequest struct {
	// Critical number of days to remediate a critical finding.
	Critical    *int    `json:"critical,omitempty"`
	Description *string `json:"description"`

	// High number of days to remediate a high finding.
	High *int `json:"high,omitempty"`

	// Low number of days to remediate a low finding.
	Low *int `json:"low,omitempty"`

	// Medium number of days to remediate a medium finding.
	Medium *int `json:"medium,omitempty"`

	// Name A unique name for the set of SLAs.
	Name string `json:"name"`
}

// SeverityStatusStatistics defines model for SeverityStatusStatistics.
type SeverityStatusStatistics struct {
	Critical StatusStatistics `json:"critical"`
	High     StatusStatistics `json:"high"`
	Info     StatusStatistics `json:"info"`
	Low      StatusStatistics `json:"low"`
	Medium   StatusStatistics `json:"medium"`
	Total    StatusStatistics `json:"total"`
}

// SonarqubeIssue defines model for SonarqubeIssue.
type SonarqubeIssue struct {
	Id *int `json:"id,omitempty"`

	// Key SonarQube issue key
	Key string `json:"key"`

	// Status SonarQube issue status
	Status string `json:"status"`

	// Type SonarQube issue type
	Type string `json:"type"`
}

// SonarqubeIssueRequest defines model for SonarqubeIssueRequest.
type SonarqubeIssueRequest struct {
	// Key SonarQube issue key
	Key string `json:"key"`

	// Status SonarQube issue status
	Status string `json:"status"`

	// Type SonarQube issue type
	Type string `json:"type"`
}

// SonarqubeIssueTransition defines model for SonarqubeIssueTransition.
type SonarqubeIssueTransition struct {
	Created         *time.Time `json:"created,omitempty"`
	FindingStatus   string     `json:"finding_status"`
	Id              *int       `json:"id,omitempty"`
	SonarqubeIssue  int        `json:"sonarqube_issue"`
	SonarqubeStatus string     `json:"sonarqube_status"`
	Transitions     string     `json:"transitions"`
}

// SonarqubeIssueTransitionRequest defines model for SonarqubeIssueTransitionRequest.
type SonarqubeIssueTransitionRequest struct {
	FindingStatus   string `json:"finding_status"`
	SonarqubeIssue  int    `json:"sonarqube_issue"`
	SonarqubeStatus string `json:"sonarqube_status"`
	Transitions     string `json:"transitions"`
}

// StatusStatistics defines model for StatusStatistics.
type StatusStatistics struct {
	Active       int `json:"active"`
	Duplicate    int `json:"duplicate"`
	FalseP       int `json:"false_p"`
	IsMitigated  int `json:"is_mitigated"`
	OutOfScope   int `json:"out_of_scope"`
	RiskAccepted int `json:"risk_accepted"`
	Total        int `json:"total"`
	Verified     int `json:"verified"`
}

// StubFinding defines model for StubFinding.
type StubFinding struct {
	Date        *openapi_types.Date `json:"date,omitempty"`
	Description *string             `json:"description"`
	Id          *int                `json:"id,omitempty"`
	Reporter    *int                `json:"reporter,omitempty"`
	Severity    *string             `json:"severity"`
	Test        *int                `json:"test,omitempty"`
	Title       string              `json:"title"`
}

// StubFindingCreate defines model for StubFindingCreate.
type StubFindingCreate struct {
	Date        *openapi_types.Date `json:"date,omitempty"`
	Description *string             `json:"description"`
	Id          *int                `json:"id,omitempty"`
	Reporter    *int                `json:"reporter,omitempty"`
	Severity    *string             `json:"severity"`
	Test        int                 `json:"test"`
	Title       string              `json:"title"`
}

// StubFindingCreateRequest defines model for StubFindingCreateRequest.
type StubFindingCreateRequest struct {
	Date        *openapi_types.Date `json:"date,omitempty"`
	Description *string             `json:"description"`
	Severity    *string             `json:"severity"`
	Test        int                 `json:"test"`
	Title       string              `json:"title"`
}

// StubFindingRequest defines model for StubFindingRequest.
type StubFindingRequest struct {
	Date        *openapi_types.Date `json:"date,omitempty"`
	Description *string             `json:"description"`
	Severity    *string             `json:"severity"`
	Title       string              `json:"title"`
}

// SystemSettings defines model for SystemSettings.
type SystemSettings struct {
	AddVulnerabilityIdToJiraLabel *bool `json:"add_vulnerability_id_to_jira_label,omitempty"`

	// AllowAnonymousSurveyRepsonse Enable anyone with a link to the survey to answer a survey
	AllowAnonymousSurveyRepsonse *bool   `json:"allow_anonymous_survey_repsonse,omitempty"`
	Credentials                  *string `json:"credentials,omitempty"`

	// DefaultGroup New users will be assigned to this group.
	DefaultGroup *int `json:"default_group"`

	// DefaultGroupEmailPattern New users will only be assigned to the default group, when their email address matches this regex pattern. This is optional condition.
	DefaultGroupEmailPattern *string `json:"default_group_email_pattern,omitempty"`

	// DefaultGroupRole New users will be assigned to their default group with this role.
	DefaultGroupRole *int `json:"default_group_role"`

	// DeleteDuplicates Requires next setting: maximum number of duplicates to retain.
	DeleteDuplicates *bool `json:"delete_duplicates,omitempty"`

	// DisableJiraWebhookSecret Allows incoming requests without a secret (discouraged legacy behaviour)
	DisableJiraWebhookSecret *bool `json:"disable_jira_webhook_secret,omitempty"`

	// Disclaimer Include this custom disclaimer on all notifications and generated reports
	Disclaimer *string `json:"disclaimer,omitempty"`
	EmailFrom  *string `json:"email_from,omitempty"`

	// EnableAuditlog With this setting turned on, Dojo maintains an audit log of changes made to entities (Findings, Tests, Engagements, Procuts, ...)If you run big import you may want to disable this because the way django-auditlog currently works, there's a big performance hit. Especially during (re-)imports.
	EnableAuditlog *bool `json:"enable_auditlog,omitempty"`

	// EnableBenchmark Enables Benchmarks such as the OWASP ASVS (Application Security Verification Standard)
	EnableBenchmark *bool `json:"enable_benchmark,omitempty"`

	// EnableCalendar With this setting turned off, the Calendar will be disabled in the user interface.
	EnableCalendar *bool `json:"enable_calendar,omitempty"`

	// EnableChecklists With this setting turned off, checklists will be disabled in the user interface.
	EnableChecklists *bool `json:"enable_checklists,omitempty"`

	// EnableCredentials With this setting turned off, credentials will be disabled in the user interface.
	EnableCredentials *bool `json:"enable_credentials,omitempty"`

	// EnableDeduplication With this setting turned on, Dojo deduplicates findings by comparing endpoints, cwe fields, and titles. If two findings share a URL and have the same CWE or title, Dojo marks the less recent finding as a duplicate. When deduplication is enabled, a list of deduplicated findings is added to the engagement view.
	EnableDeduplication *bool `json:"enable_deduplication,omitempty"`

	// EnableEndpointMetadataImport With this setting turned off, endpoint metadata import will be disabled in the user interface.
	EnableEndpointMetadataImport *bool `json:"enable_endpoint_metadata_import,omitempty"`

	// EnableFindingGroups With this setting turned off, the Finding Groups will be disabled.
	EnableFindingGroups *bool `json:"enable_finding_groups,omitempty"`

	// EnableFindingSla Enables Finding SLA's for time to remediate.
	EnableFindingSla *bool `json:"enable_finding_sla,omitempty"`
	EnableGithub     *bool `json:"enable_github,omitempty"`
	EnableJira       *bool `json:"enable_jira,omitempty"`

	// EnableJiraWebHook Please note: It is strongly recommended to use a secret below and / or IP whitelist the JIRA server using a proxy such as Nginx.
	EnableJiraWebHook          *bool `json:"enable_jira_web_hook,omitempty"`
	EnableMailNotifications    *bool `json:"enable_mail_notifications,omitempty"`
	EnableMsteamsNotifications *bool `json:"enable_msteams_notifications,omitempty"`

	// EnableNotifySlaActive Enables Notify when time to remediate according to Finding SLA's is breached for active Findings.
	EnableNotifySlaActive *bool `json:"enable_notify_sla_active,omitempty"`

	// EnableNotifySlaActiveVerified Enables Notify when time to remediate according to Finding SLA's is breached for active, verified Findings.
	EnableNotifySlaActiveVerified *bool `json:"enable_notify_sla_active_verified,omitempty"`

	// EnableNotifySlaExponentialBackoff Enable an exponential backoff strategy for SLA breach notifications, e.g. 1, 2, 4, 8, etc. Otherwise it alerts every day
	EnableNotifySlaExponentialBackoff *bool `json:"enable_notify_sla_exponential_backoff,omitempty"`

	// EnableNotifySlaJiraOnly Enables Notify when time to remediate according to Finding SLA's is breached for Findings that are linked to JIRA issues. Notification is disabled for Findings not linked to JIRA issues
	EnableNotifySlaJiraOnly *bool `json:"enable_notify_sla_jira_only,omitempty"`

	// EnableProductGrade Displays a grade letter next to a product to show the overall health.
	EnableProductGrade *bool `json:"enable_product_grade,omitempty"`

	// EnableProductTagInheritance Enables product tag inheritance globally for all products. Any tags added on a product will automatically be added to all Engagements, Tests, and Findings
	EnableProductTagInheritance *bool `json:"enable_product_tag_inheritance,omitempty"`

	// EnableProductTrackingFiles With this setting turned off, the product tracking files will be disabled in the user interface.
	EnableProductTrackingFiles *bool `json:"enable_product_tracking_files,omitempty"`

	// EnableQuestionnaires With this setting turned off, questionnaires will be disabled in the user interface.
	EnableQuestionnaires     *bool `json:"enable_questionnaires,omitempty"`
	EnableSlackNotifications *bool `json:"enable_slack_notifications,omitempty"`

	// EnableTemplateMatch Enables global remediation advice and matching on CWE and Title. The text will be replaced for mitigation, impact and references on a finding. Useful for providing consistent impact and remediation advice regardless of the scanner.
	EnableTemplateMatch *bool `json:"enable_template_match,omitempty"`

	// EnableUserProfileEditable When turned on users can edit their profiles
	EnableUserProfileEditable *bool `json:"enable_user_profile_editable,omitempty"`

	// EngagementAutoClose Closes an engagement after 3 days (default) past due date including last update.
	EngagementAutoClose *bool `json:"engagement_auto_close,omitempty"`

	// EngagementAutoCloseDays Closes an engagement after the specified number of days past due date including last update.
	EngagementAutoCloseDays *int `json:"engagement_auto_close_days,omitempty"`

	// FalsePositiveHistory (EXPERIMENTAL) DefectDojo will automatically mark the finding as a false positive if an equal finding (according to its dedupe algorithm) has been previously marked as a false positive on the same product. ATTENTION: Although the deduplication algorithm is used to determine if a finding should be marked as a false positive, this feature will not work if deduplication is enabled since it doesn't make sense to use both.
	FalsePositiveHistory *bool `json:"false_positive_history,omitempty"`
	Id                   *int  `json:"id,omitempty"`

	// JiraLabels JIRA issue labels space seperated
	JiraLabels *string `json:"jira_labels"`

	// JiraMinimumSeverity * `Critical` - Critical
	// * `High` - High
	// * `Medium` - Medium
	// * `Low` - Low
	// * `Info` - Info
	JiraMinimumSeverity *SystemSettingsJiraMinimumSeverity `json:"jira_minimum_severity"`

	// JiraWebhookSecret Secret needed in URL for incoming JIRA Webhook
	JiraWebhookSecret *string `json:"jira_webhook_secret"`

	// LowercaseCharacterRequired Requires user passwords to contain at least one lowercase letter (a-z).
	LowercaseCharacterRequired *bool   `json:"lowercase_character_required,omitempty"`
	MailNotificationsTo        *string `json:"mail_notifications_to,omitempty"`

	// MaxDupes When enabled, if a single issue reaches the maximum number of duplicates, the oldest will be deleted. Duplicate will not be deleted when left empty. A value of 0 will remove all duplicates.
	MaxDupes *int `json:"max_dupes"`

	// MaximumPasswordLength Requires user to set passwords less than maximum length.
	MaximumPasswordLength *int `json:"maximum_password_length,omitempty"`

	// MinimumPasswordLength Requires user to set passwords greater than minimum length.
	MinimumPasswordLength *int `json:"minimum_password_length,omitempty"`

	// MsteamsUrl The full URL of the incoming webhook
	MsteamsUrl *string `json:"msteams_url,omitempty"`

	// NonCommonPasswordRequired Requires user passwords to not be part of list of common passwords.
	NonCommonPasswordRequired *bool `json:"non_common_password_required,omitempty"`

	// NumberCharacterRequired Requires user passwords to contain at least one digit (0-9).
	NumberCharacterRequired *bool   `json:"number_character_required,omitempty"`
	ProductGrade            *string `json:"product_grade,omitempty"`

	// ProductGradeA Percentage score for an 'A' >=
	ProductGradeA *int `json:"product_grade_a,omitempty"`

	// ProductGradeB Percentage score for a 'B' >=
	ProductGradeB *int `json:"product_grade_b,omitempty"`

	// ProductGradeC Percentage score for a 'C' >=
	ProductGradeC *int `json:"product_grade_c,omitempty"`

	// ProductGradeD Percentage score for a 'D' >=
	ProductGradeD *int `json:"product_grade_d,omitempty"`

	// ProductGradeF Percentage score for an 'F' <=
	ProductGradeF *int `json:"product_grade_f,omitempty"`

	// RetroactiveFalsePositiveHistory (EXPERIMENTAL) FP History will also retroactively mark/unmark all existing equal findings in the same product as a false positives. Only works if the False Positive History feature is also enabled.
	RetroactiveFalsePositiveHistory *bool `json:"retroactive_false_positive_history,omitempty"`

	// RiskAcceptanceFormDefaultDays Default expiry period for risk acceptance form.
	RiskAcceptanceFormDefaultDays *int `json:"risk_acceptance_form_default_days"`

	// RiskAcceptanceNotifyBeforeExpiration Notify X days before risk acceptance expires. Leave empty to disable.
	RiskAcceptanceNotifyBeforeExpiration *int `json:"risk_acceptance_notify_before_expiration"`

	// SlackChannel Optional. Needed if you want to send global notifications.
	SlackChannel *string `json:"slack_channel,omitempty"`

	// SlackToken Token required for interacting with Slack. Get one at https://api.slack.com/tokens
	SlackToken *string `json:"slack_token,omitempty"`

	// SlackUsername Optional. Will take your bot name otherwise.
	SlackUsername *string `json:"slack_username,omitempty"`

	// SpecialCharacterRequired Requires user passwords to contain at least one special character (()[]{}|\`~!@#$%^&*_-+=;:'",<>./?).
	SpecialCharacterRequired *bool   `json:"special_character_required,omitempty"`
	TeamName                 *string `json:"team_name,omitempty"`

	// TimeZone * `Africa/Abidjan` - Africa/Abidjan
	// * `Africa/Accra` - Africa/Accra
	// * `Africa/Addis_Ababa` - Africa/Addis_Ababa
	// * `Africa/Algiers` - Africa/Algiers
	// * `Africa/Asmara` - Africa/Asmara
	// * `Africa/Asmera` - Africa/Asmera
	// * `Africa/Bamako` - Africa/Bamako
	// * `Africa/Bangui` - Africa/Bangui
	// * `Africa/Banjul` - Africa/Banjul
	// * `Africa/Bissau` - Africa/Bissau
	// * `Africa/Blantyre` - Africa/Blantyre
	// * `Africa/Brazzaville` - Africa/Brazzaville
	// * `Africa/Bujumbura` - Africa/Bujumbura
	// * `Africa/Cairo` - Africa/Cairo
	// * `Africa/Casablanca` - Africa/Casablanca
	// * `Africa/Ceuta` - Africa/Ceuta
	// * `Africa/Conakry` - Africa/Conakry
	// * `Africa/Dakar` - Africa/Dakar
	// * `Africa/Dar_es_Salaam` - Africa/Dar_es_Salaam
	// * `Africa/Djibouti` - Africa/Djibouti
	// * `Africa/Douala` - Africa/Douala
	// * `Africa/El_Aaiun` - Africa/El_Aaiun
	// * `Africa/Freetown` - Africa/Freetown
	// * `Africa/Gaborone` - Africa/Gaborone
	// * `Africa/Harare` - Africa/Harare
	// * `Africa/Johannesburg` - Africa/Johannesburg
	// * `Africa/Juba` - Africa/Juba
	// * `Africa/Kampala` - Africa/Kampala
	// * `Africa/Khartoum` - Africa/Khartoum
	// * `Africa/Kigali` - Africa/Kigali
	// * `Africa/Kinshasa` - Africa/Kinshasa
	// * `Africa/Lagos` - Africa/Lagos
	// * `Africa/Libreville` - Africa/Libreville
	// * `Africa/Lome` - Africa/Lome
	// * `Africa/Luanda` - Africa/Luanda
	// * `Africa/Lubumbashi` - Africa/Lubumbashi
	// * `Africa/Lusaka` - Africa/Lusaka
	// * `Africa/Malabo` - Africa/Malabo
	// * `Africa/Maputo` - Africa/Maputo
	// * `Africa/Maseru` - Africa/Maseru
	// * `Africa/Mbabane` - Africa/Mbabane
	// * `Africa/Mogadishu` - Africa/Mogadishu
	// * `Africa/Monrovia` - Africa/Monrovia
	// * `Africa/Nairobi` - Africa/Nairobi
	// * `Africa/Ndjamena` - Africa/Ndjamena
	// * `Africa/Niamey` - Africa/Niamey
	// * `Africa/Nouakchott` - Africa/Nouakchott
	// * `Africa/Ouagadougou` - Africa/Ouagadougou
	// * `Africa/Porto-Novo` - Africa/Porto-Novo
	// * `Africa/Sao_Tome` - Africa/Sao_Tome
	// * `Africa/Timbuktu` - Africa/Timbuktu
	// * `Africa/Tripoli` - Africa/Tripoli
	// * `Africa/Tunis` - Africa/Tunis
	// * `Africa/Windhoek` - Africa/Windhoek
	// * `America/Adak` - America/Adak
	// * `America/Anchorage` - America/Anchorage
	// * `America/Anguilla` - America/Anguilla
	// * `America/Antigua` - America/Antigua
	// * `America/Araguaina` - America/Araguaina
	// * `America/Argentina/Buenos_Aires` - America/Argentina/Buenos_Aires
	// * `America/Argentina/Catamarca` - America/Argentina/Catamarca
	// * `America/Argentina/ComodRivadavia` - America/Argentina/ComodRivadavia
	// * `America/Argentina/Cordoba` - America/Argentina/Cordoba
	// * `America/Argentina/Jujuy` - America/Argentina/Jujuy
	// * `America/Argentina/La_Rioja` - America/Argentina/La_Rioja
	// * `America/Argentina/Mendoza` - America/Argentina/Mendoza
	// * `America/Argentina/Rio_Gallegos` - America/Argentina/Rio_Gallegos
	// * `America/Argentina/Salta` - America/Argentina/Salta
	// * `America/Argentina/San_Juan` - America/Argentina/San_Juan
	// * `America/Argentina/San_Luis` - America/Argentina/San_Luis
	// * `America/Argentina/Tucuman` - America/Argentina/Tucuman
	// * `America/Argentina/Ushuaia` - America/Argentina/Ushuaia
	// * `America/Aruba` - America/Aruba
	// * `America/Asuncion` - America/Asuncion
	// * `America/Atikokan` - America/Atikokan
	// * `America/Atka` - America/Atka
	// * `America/Bahia` - America/Bahia
	// * `America/Bahia_Banderas` - America/Bahia_Banderas
	// * `America/Barbados` - America/Barbados
	// * `America/Belem` - America/Belem
	// * `America/Belize` - America/Belize
	// * `America/Blanc-Sablon` - America/Blanc-Sablon
	// * `America/Boa_Vista` - America/Boa_Vista
	// * `America/Bogota` - America/Bogota
	// * `America/Boise` - America/Boise
	// * `America/Buenos_Aires` - America/Buenos_Aires
	// * `America/Cambridge_Bay` - America/Cambridge_Bay
	// * `America/Campo_Grande` - America/Campo_Grande
	// * `America/Cancun` - America/Cancun
	// * `America/Caracas` - America/Caracas
	// * `America/Catamarca` - America/Catamarca
	// * `America/Cayenne` - America/Cayenne
	// * `America/Cayman` - America/Cayman
	// * `America/Chicago` - America/Chicago
	// * `America/Chihuahua` - America/Chihuahua
	// * `America/Ciudad_Juarez` - America/Ciudad_Juarez
	// * `America/Coral_Harbour` - America/Coral_Harbour
	// * `America/Cordoba` - America/Cordoba
	// * `America/Costa_Rica` - America/Costa_Rica
	// * `America/Creston` - America/Creston
	// * `America/Cuiaba` - America/Cuiaba
	// * `America/Curacao` - America/Curacao
	// * `America/Danmarkshavn` - America/Danmarkshavn
	// * `America/Dawson` - America/Dawson
	// * `America/Dawson_Creek` - America/Dawson_Creek
	// * `America/Denver` - America/Denver
	// * `America/Detroit` - America/Detroit
	// * `America/Dominica` - America/Dominica
	// * `America/Edmonton` - America/Edmonton
	// * `America/Eirunepe` - America/Eirunepe
	// * `America/El_Salvador` - America/El_Salvador
	// * `America/Ensenada` - America/Ensenada
	// * `America/Fort_Nelson` - America/Fort_Nelson
	// * `America/Fort_Wayne` - America/Fort_Wayne
	// * `America/Fortaleza` - America/Fortaleza
	// * `America/Glace_Bay` - America/Glace_Bay
	// * `America/Godthab` - America/Godthab
	// * `America/Goose_Bay` - America/Goose_Bay
	// * `America/Grand_Turk` - America/Grand_Turk
	// * `America/Grenada` - America/Grenada
	// * `America/Guadeloupe` - America/Guadeloupe
	// * `America/Guatemala` - America/Guatemala
	// * `America/Guayaquil` - America/Guayaquil
	// * `America/Guyana` - America/Guyana
	// * `America/Halifax` - America/Halifax
	// * `America/Havana` - America/Havana
	// * `America/Hermosillo` - America/Hermosillo
	// * `America/Indiana/Indianapolis` - America/Indiana/Indianapolis
	// * `America/Indiana/Knox` - America/Indiana/Knox
	// * `America/Indiana/Marengo` - America/Indiana/Marengo
	// * `America/Indiana/Petersburg` - America/Indiana/Petersburg
	// * `America/Indiana/Tell_City` - America/Indiana/Tell_City
	// * `America/Indiana/Vevay` - America/Indiana/Vevay
	// * `America/Indiana/Vincennes` - America/Indiana/Vincennes
	// * `America/Indiana/Winamac` - America/Indiana/Winamac
	// * `America/Indianapolis` - America/Indianapolis
	// * `America/Inuvik` - America/Inuvik
	// * `America/Iqaluit` - America/Iqaluit
	// * `America/Jamaica` - America/Jamaica
	// * `America/Jujuy` - America/Jujuy
	// * `America/Juneau` - America/Juneau
	// * `America/Kentucky/Louisville` - America/Kentucky/Louisville
	// * `America/Kentucky/Monticello` - America/Kentucky/Monticello
	// * `America/Knox_IN` - America/Knox_IN
	// * `America/Kralendijk` - America/Kralendijk
	// * `America/La_Paz` - America/La_Paz
	// * `America/Lima` - America/Lima
	// * `America/Los_Angeles` - America/Los_Angeles
	// * `America/Louisville` - America/Louisville
	// * `America/Lower_Princes` - America/Lower_Princes
	// * `America/Maceio` - America/Maceio
	// * `America/Managua` - America/Managua
	// * `America/Manaus` - America/Manaus
	// * `America/Marigot` - America/Marigot
	// * `America/Martinique` - America/Martinique
	// * `America/Matamoros` - America/Matamoros
	// * `America/Mazatlan` - America/Mazatlan
	// * `America/Mendoza` - America/Mendoza
	// * `America/Menominee` - America/Menominee
	// * `America/Merida` - America/Merida
	// * `America/Metlakatla` - America/Metlakatla
	// * `America/Mexico_City` - America/Mexico_City
	// * `America/Miquelon` - America/Miquelon
	// * `America/Moncton` - America/Moncton
	// * `America/Monterrey` - America/Monterrey
	// * `America/Montevideo` - America/Montevideo
	// * `America/Montreal` - America/Montreal
	// * `America/Montserrat` - America/Montserrat
	// * `America/Nassau` - America/Nassau
	// * `America/New_York` - America/New_York
	// * `America/Nipigon` - America/Nipigon
	// * `America/Nome` - America/Nome
	// * `America/Noronha` - America/Noronha
	// * `America/North_Dakota/Beulah` - America/North_Dakota/Beulah
	// * `America/North_Dakota/Center` - America/North_Dakota/Center
	// * `America/North_Dakota/New_Salem` - America/North_Dakota/New_Salem
	// * `America/Nuuk` - America/Nuuk
	// * `America/Ojinaga` - America/Ojinaga
	// * `America/Panama` - America/Panama
	// * `America/Pangnirtung` - America/Pangnirtung
	// * `America/Paramaribo` - America/Paramaribo
	// * `America/Phoenix` - America/Phoenix
	// * `America/Port-au-Prince` - America/Port-au-Prince
	// * `America/Port_of_Spain` - America/Port_of_Spain
	// * `America/Porto_Acre` - America/Porto_Acre
	// * `America/Porto_Velho` - America/Porto_Velho
	// * `America/Puerto_Rico` - America/Puerto_Rico
	// * `America/Punta_Arenas` - America/Punta_Arenas
	// * `America/Rainy_River` - America/Rainy_River
	// * `America/Rankin_Inlet` - America/Rankin_Inlet
	// * `America/Recife` - America/Recife
	// * `America/Regina` - America/Regina
	// * `America/Resolute` - America/Resolute
	// * `America/Rio_Branco` - America/Rio_Branco
	// * `America/Rosario` - America/Rosario
	// * `America/Santa_Isabel` - America/Santa_Isabel
	// * `America/Santarem` - America/Santarem
	// * `America/Santiago` - America/Santiago
	// * `America/Santo_Domingo` - America/Santo_Domingo
	// * `America/Sao_Paulo` - America/Sao_Paulo
	// * `America/Scoresbysund` - America/Scoresbysund
	// * `America/Shiprock` - America/Shiprock
	// * `America/Sitka` - America/Sitka
	// * `America/St_Barthelemy` - America/St_Barthelemy
	// * `America/St_Johns` - America/St_Johns
	// * `America/St_Kitts` - America/St_Kitts
	// * `America/St_Lucia` - America/St_Lucia
	// * `America/St_Thomas` - America/St_Thomas
	// * `America/St_Vincent` - America/St_Vincent
	// * `America/Swift_Current` - America/Swift_Current
	// * `America/Tegucigalpa` - America/Tegucigalpa
	// * `America/Thule` - America/Thule
	// * `America/Thunder_Bay` - America/Thunder_Bay
	// * `America/Tijuana` - America/Tijuana
	// * `America/Toronto` - America/Toronto
	// * `America/Tortola` - America/Tortola
	// * `America/Vancouver` - America/Vancouver
	// * `America/Virgin` - America/Virgin
	// * `America/Whitehorse` - America/Whitehorse
	// * `America/Winnipeg` - America/Winnipeg
	// * `America/Yakutat` - America/Yakutat
	// * `America/Yellowknife` - America/Yellowknife
	// * `Antarctica/Casey` - Antarctica/Casey
	// * `Antarctica/Davis` - Antarctica/Davis
	// * `Antarctica/DumontDUrville` - Antarctica/DumontDUrville
	// * `Antarctica/Macquarie` - Antarctica/Macquarie
	// * `Antarctica/Mawson` - Antarctica/Mawson
	// * `Antarctica/McMurdo` - Antarctica/McMurdo
	// * `Antarctica/Palmer` - Antarctica/Palmer
	// * `Antarctica/Rothera` - Antarctica/Rothera
	// * `Antarctica/South_Pole` - Antarctica/South_Pole
	// * `Antarctica/Syowa` - Antarctica/Syowa
	// * `Antarctica/Troll` - Antarctica/Troll
	// * `Antarctica/Vostok` - Antarctica/Vostok
	// * `Arctic/Longyearbyen` - Arctic/Longyearbyen
	// * `Asia/Aden` - Asia/Aden
	// * `Asia/Almaty` - Asia/Almaty
	// * `Asia/Amman` - Asia/Amman
	// * `Asia/Anadyr` - Asia/Anadyr
	// * `Asia/Aqtau` - Asia/Aqtau
	// * `Asia/Aqtobe` - Asia/Aqtobe
	// * `Asia/Ashgabat` - Asia/Ashgabat
	// * `Asia/Ashkhabad` - Asia/Ashkhabad
	// * `Asia/Atyrau` - Asia/Atyrau
	// * `Asia/Baghdad` - Asia/Baghdad
	// * `Asia/Bahrain` - Asia/Bahrain
	// * `Asia/Baku` - Asia/Baku
	// * `Asia/Bangkok` - Asia/Bangkok
	// * `Asia/Barnaul` - Asia/Barnaul
	// * `Asia/Beirut` - Asia/Beirut
	// * `Asia/Bishkek` - Asia/Bishkek
	// * `Asia/Brunei` - Asia/Brunei
	// * `Asia/Calcutta` - Asia/Calcutta
	// * `Asia/Chita` - Asia/Chita
	// * `Asia/Choibalsan` - Asia/Choibalsan
	// * `Asia/Chongqing` - Asia/Chongqing
	// * `Asia/Chungking` - Asia/Chungking
	// * `Asia/Colombo` - Asia/Colombo
	// * `Asia/Dacca` - Asia/Dacca
	// * `Asia/Damascus` - Asia/Damascus
	// * `Asia/Dhaka` - Asia/Dhaka
	// * `Asia/Dili` - Asia/Dili
	// * `Asia/Dubai` - Asia/Dubai
	// * `Asia/Dushanbe` - Asia/Dushanbe
	// * `Asia/Famagusta` - Asia/Famagusta
	// * `Asia/Gaza` - Asia/Gaza
	// * `Asia/Harbin` - Asia/Harbin
	// * `Asia/Hebron` - Asia/Hebron
	// * `Asia/Ho_Chi_Minh` - Asia/Ho_Chi_Minh
	// * `Asia/Hong_Kong` - Asia/Hong_Kong
	// * `Asia/Hovd` - Asia/Hovd
	// * `Asia/Irkutsk` - Asia/Irkutsk
	// * `Asia/Istanbul` - Asia/Istanbul
	// * `Asia/Jakarta` - Asia/Jakarta
	// * `Asia/Jayapura` - Asia/Jayapura
	// * `Asia/Jerusalem` - Asia/Jerusalem
	// * `Asia/Kabul` - Asia/Kabul
	// * `Asia/Kamchatka` - Asia/Kamchatka
	// * `Asia/Karachi` - Asia/Karachi
	// * `Asia/Kashgar` - Asia/Kashgar
	// * `Asia/Kathmandu` - Asia/Kathmandu
	// * `Asia/Katmandu` - Asia/Katmandu
	// * `Asia/Khandyga` - Asia/Khandyga
	// * `Asia/Kolkata` - Asia/Kolkata
	// * `Asia/Krasnoyarsk` - Asia/Krasnoyarsk
	// * `Asia/Kuala_Lumpur` - Asia/Kuala_Lumpur
	// * `Asia/Kuching` - Asia/Kuching
	// * `Asia/Kuwait` - Asia/Kuwait
	// * `Asia/Macao` - Asia/Macao
	// * `Asia/Macau` - Asia/Macau
	// * `Asia/Magadan` - Asia/Magadan
	// * `Asia/Makassar` - Asia/Makassar
	// * `Asia/Manila` - Asia/Manila
	// * `Asia/Muscat` - Asia/Muscat
	// * `Asia/Nicosia` - Asia/Nicosia
	// * `Asia/Novokuznetsk` - Asia/Novokuznetsk
	// * `Asia/Novosibirsk` - Asia/Novosibirsk
	// * `Asia/Omsk` - Asia/Omsk
	// * `Asia/Oral` - Asia/Oral
	// * `Asia/Phnom_Penh` - Asia/Phnom_Penh
	// * `Asia/Pontianak` - Asia/Pontianak
	// * `Asia/Pyongyang` - Asia/Pyongyang
	// * `Asia/Qatar` - Asia/Qatar
	// * `Asia/Qostanay` - Asia/Qostanay
	// * `Asia/Qyzylorda` - Asia/Qyzylorda
	// * `Asia/Rangoon` - Asia/Rangoon
	// * `Asia/Riyadh` - Asia/Riyadh
	// * `Asia/Saigon` - Asia/Saigon
	// * `Asia/Sakhalin` - Asia/Sakhalin
	// * `Asia/Samarkand` - Asia/Samarkand
	// * `Asia/Seoul` - Asia/Seoul
	// * `Asia/Shanghai` - Asia/Shanghai
	// * `Asia/Singapore` - Asia/Singapore
	// * `Asia/Srednekolymsk` - Asia/Srednekolymsk
	// * `Asia/Taipei` - Asia/Taipei
	// * `Asia/Tashkent` - Asia/Tashkent
	// * `Asia/Tbilisi` - Asia/Tbilisi
	// * `Asia/Tehran` - Asia/Tehran
	// * `Asia/Tel_Aviv` - Asia/Tel_Aviv
	// * `Asia/Thimbu` - Asia/Thimbu
	// * `Asia/Thimphu` - Asia/Thimphu
	// * `Asia/Tokyo` - Asia/Tokyo
	// * `Asia/Tomsk` - Asia/Tomsk
	// * `Asia/Ujung_Pandang` - Asia/Ujung_Pandang
	// * `Asia/Ulaanbaatar` - Asia/Ulaanbaatar
	// * `Asia/Ulan_Bator` - Asia/Ulan_Bator
	// * `Asia/Urumqi` - Asia/Urumqi
	// * `Asia/Ust-Nera` - Asia/Ust-Nera
	// * `Asia/Vientiane` - Asia/Vientiane
	// * `Asia/Vladivostok` - Asia/Vladivostok
	// * `Asia/Yakutsk` - Asia/Yakutsk
	// * `Asia/Yangon` - Asia/Yangon
	// * `Asia/Yekaterinburg` - Asia/Yekaterinburg
	// * `Asia/Yerevan` - Asia/Yerevan
	// * `Atlantic/Azores` - Atlantic/Azores
	// * `Atlantic/Bermuda` - Atlantic/Bermuda
	// * `Atlantic/Canary` - Atlantic/Canary
	// * `Atlantic/Cape_Verde` - Atlantic/Cape_Verde
	// * `Atlantic/Faeroe` - Atlantic/Faeroe
	// * `Atlantic/Faroe` - Atlantic/Faroe
	// * `Atlantic/Jan_Mayen` - Atlantic/Jan_Mayen
	// * `Atlantic/Madeira` - Atlantic/Madeira
	// * `Atlantic/Reykjavik` - Atlantic/Reykjavik
	// * `Atlantic/South_Georgia` - Atlantic/South_Georgia
	// * `Atlantic/St_Helena` - Atlantic/St_Helena
	// * `Atlantic/Stanley` - Atlantic/Stanley
	// * `Australia/ACT` - Australia/ACT
	// * `Australia/Adelaide` - Australia/Adelaide
	// * `Australia/Brisbane` - Australia/Brisbane
	// * `Australia/Broken_Hill` - Australia/Broken_Hill
	// * `Australia/Canberra` - Australia/Canberra
	// * `Australia/Currie` - Australia/Currie
	// * `Australia/Darwin` - Australia/Darwin
	// * `Australia/Eucla` - Australia/Eucla
	// * `Australia/Hobart` - Australia/Hobart
	// * `Australia/LHI` - Australia/LHI
	// * `Australia/Lindeman` - Australia/Lindeman
	// * `Australia/Lord_Howe` - Australia/Lord_Howe
	// * `Australia/Melbourne` - Australia/Melbourne
	// * `Australia/NSW` - Australia/NSW
	// * `Australia/North` - Australia/North
	// * `Australia/Perth` - Australia/Perth
	// * `Australia/Queensland` - Australia/Queensland
	// * `Australia/South` - Australia/South
	// * `Australia/Sydney` - Australia/Sydney
	// * `Australia/Tasmania` - Australia/Tasmania
	// * `Australia/Victoria` - Australia/Victoria
	// * `Australia/West` - Australia/West
	// * `Australia/Yancowinna` - Australia/Yancowinna
	// * `Brazil/Acre` - Brazil/Acre
	// * `Brazil/DeNoronha` - Brazil/DeNoronha
	// * `Brazil/East` - Brazil/East
	// * `Brazil/West` - Brazil/West
	// * `CET` - CET
	// * `CST6CDT` - CST6CDT
	// * `Canada/Atlantic` - Canada/Atlantic
	// * `Canada/Central` - Canada/Central
	// * `Canada/Eastern` - Canada/Eastern
	// * `Canada/Mountain` - Canada/Mountain
	// * `Canada/Newfoundland` - Canada/Newfoundland
	// * `Canada/Pacific` - Canada/Pacific
	// * `Canada/Saskatchewan` - Canada/Saskatchewan
	// * `Canada/Yukon` - Canada/Yukon
	// * `Chile/Continental` - Chile/Continental
	// * `Chile/EasterIsland` - Chile/EasterIsland
	// * `Cuba` - Cuba
	// * `EET` - EET
	// * `EST` - EST
	// * `EST5EDT` - EST5EDT
	// * `Egypt` - Egypt
	// * `Eire` - Eire
	// * `Etc/GMT` - Etc/GMT
	// * `Etc/GMT+0` - Etc/GMT+0
	// * `Etc/GMT+1` - Etc/GMT+1
	// * `Etc/GMT+10` - Etc/GMT+10
	// * `Etc/GMT+11` - Etc/GMT+11
	// * `Etc/GMT+12` - Etc/GMT+12
	// * `Etc/GMT+2` - Etc/GMT+2
	// * `Etc/GMT+3` - Etc/GMT+3
	// * `Etc/GMT+4` - Etc/GMT+4
	// * `Etc/GMT+5` - Etc/GMT+5
	// * `Etc/GMT+6` - Etc/GMT+6
	// * `Etc/GMT+7` - Etc/GMT+7
	// * `Etc/GMT+8` - Etc/GMT+8
	// * `Etc/GMT+9` - Etc/GMT+9
	// * `Etc/GMT-0` - Etc/GMT-0
	// * `Etc/GMT-1` - Etc/GMT-1
	// * `Etc/GMT-10` - Etc/GMT-10
	// * `Etc/GMT-11` - Etc/GMT-11
	// * `Etc/GMT-12` - Etc/GMT-12
	// * `Etc/GMT-13` - Etc/GMT-13
	// * `Etc/GMT-14` - Etc/GMT-14
	// * `Etc/GMT-2` - Etc/GMT-2
	// * `Etc/GMT-3` - Etc/GMT-3
	// * `Etc/GMT-4` - Etc/GMT-4
	// * `Etc/GMT-5` - Etc/GMT-5
	// * `Etc/GMT-6` - Etc/GMT-6
	// * `Etc/GMT-7` - Etc/GMT-7
	// * `Etc/GMT-8` - Etc/GMT-8
	// * `Etc/GMT-9` - Etc/GMT-9
	// * `Etc/GMT0` - Etc/GMT0
	// * `Etc/Greenwich` - Etc/Greenwich
	// * `Etc/UCT` - Etc/UCT
	// * `Etc/UTC` - Etc/UTC
	// * `Etc/Universal` - Etc/Universal
	// * `Etc/Zulu` - Etc/Zulu
	// * `Europe/Amsterdam` - Europe/Amsterdam
	// * `Europe/Andorra` - Europe/Andorra
	// * `Europe/Astrakhan` - Europe/Astrakhan
	// * `Europe/Athens` - Europe/Athens
	// * `Europe/Belfast` - Europe/Belfast
	// * `Europe/Belgrade` - Europe/Belgrade
	// * `Europe/Berlin` - Europe/Berlin
	// * `Europe/Bratislava` - Europe/Bratislava
	// * `Europe/Brussels` - Europe/Brussels
	// * `Europe/Bucharest` - Europe/Bucharest
	// * `Europe/Budapest` - Europe/Budapest
	// * `Europe/Busingen` - Europe/Busingen
	// * `Europe/Chisinau` - Europe/Chisinau
	// * `Europe/Copenhagen` - Europe/Copenhagen
	// * `Europe/Dublin` - Europe/Dublin
	// * `Europe/Gibraltar` - Europe/Gibraltar
	// * `Europe/Guernsey` - Europe/Guernsey
	// * `Europe/Helsinki` - Europe/Helsinki
	// * `Europe/Isle_of_Man` - Europe/Isle_of_Man
	// * `Europe/Istanbul` - Europe/Istanbul
	// * `Europe/Jersey` - Europe/Jersey
	// * `Europe/Kaliningrad` - Europe/Kaliningrad
	// * `Europe/Kiev` - Europe/Kiev
	// * `Europe/Kirov` - Europe/Kirov
	// * `Europe/Kyiv` - Europe/Kyiv
	// * `Europe/Lisbon` - Europe/Lisbon
	// * `Europe/Ljubljana` - Europe/Ljubljana
	// * `Europe/London` - Europe/London
	// * `Europe/Luxembourg` - Europe/Luxembourg
	// * `Europe/Madrid` - Europe/Madrid
	// * `Europe/Malta` - Europe/Malta
	// * `Europe/Mariehamn` - Europe/Mariehamn
	// * `Europe/Minsk` - Europe/Minsk
	// * `Europe/Monaco` - Europe/Monaco
	// * `Europe/Moscow` - Europe/Moscow
	// * `Europe/Nicosia` - Europe/Nicosia
	// * `Europe/Oslo` - Europe/Oslo
	// * `Europe/Paris` - Europe/Paris
	// * `Europe/Podgorica` - Europe/Podgorica
	// * `Europe/Prague` - Europe/Prague
	// * `Europe/Riga` - Europe/Riga
	// * `Europe/Rome` - Europe/Rome
	// * `Europe/Samara` - Europe/Samara
	// * `Europe/San_Marino` - Europe/San_Marino
	// * `Europe/Sarajevo` - Europe/Sarajevo
	// * `Europe/Saratov` - Europe/Saratov
	// * `Europe/Simferopol` - Europe/Simferopol
	// * `Europe/Skopje` - Europe/Skopje
	// * `Europe/Sofia` - Europe/Sofia
	// * `Europe/Stockholm` - Europe/Stockholm
	// * `Europe/Tallinn` - Europe/Tallinn
	// * `Europe/Tirane` - Europe/Tirane
	// * `Europe/Tiraspol` - Europe/Tiraspol
	// * `Europe/Ulyanovsk` - Europe/Ulyanovsk
	// * `Europe/Uzhgorod` - Europe/Uzhgorod
	// * `Europe/Vaduz` - Europe/Vaduz
	// * `Europe/Vatican` - Europe/Vatican
	// * `Europe/Vienna` - Europe/Vienna
	// * `Europe/Vilnius` - Europe/Vilnius
	// * `Europe/Volgograd` - Europe/Volgograd
	// * `Europe/Warsaw` - Europe/Warsaw
	// * `Europe/Zagreb` - Europe/Zagreb
	// * `Europe/Zaporozhye` - Europe/Zaporozhye
	// * `Europe/Zurich` - Europe/Zurich
	// * `GB` - GB
	// * `GB-Eire` - GB-Eire
	// * `GMT` - GMT
	// * `GMT+0` - GMT+0
	// * `GMT-0` - GMT-0
	// * `GMT0` - GMT0
	// * `Greenwich` - Greenwich
	// * `HST` - HST
	// * `Hongkong` - Hongkong
	// * `Iceland` - Iceland
	// * `Indian/Antananarivo` - Indian/Antananarivo
	// * `Indian/Chagos` - Indian/Chagos
	// * `Indian/Christmas` - Indian/Christmas
	// * `Indian/Cocos` - Indian/Cocos
	// * `Indian/Comoro` - Indian/Comoro
	// * `Indian/Kerguelen` - Indian/Kerguelen
	// * `Indian/Mahe` - Indian/Mahe
	// * `Indian/Maldives` - Indian/Maldives
	// * `Indian/Mauritius` - Indian/Mauritius
	// * `Indian/Mayotte` - Indian/Mayotte
	// * `Indian/Reunion` - Indian/Reunion
	// * `Iran` - Iran
	// * `Israel` - Israel
	// * `Jamaica` - Jamaica
	// * `Japan` - Japan
	// * `Kwajalein` - Kwajalein
	// * `Libya` - Libya
	// * `MET` - MET
	// * `MST` - MST
	// * `MST7MDT` - MST7MDT
	// * `Mexico/BajaNorte` - Mexico/BajaNorte
	// * `Mexico/BajaSur` - Mexico/BajaSur
	// * `Mexico/General` - Mexico/General
	// * `NZ` - NZ
	// * `NZ-CHAT` - NZ-CHAT
	// * `Navajo` - Navajo
	// * `PRC` - PRC
	// * `PST8PDT` - PST8PDT
	// * `Pacific/Apia` - Pacific/Apia
	// * `Pacific/Auckland` - Pacific/Auckland
	// * `Pacific/Bougainville` - Pacific/Bougainville
	// * `Pacific/Chatham` - Pacific/Chatham
	// * `Pacific/Chuuk` - Pacific/Chuuk
	// * `Pacific/Easter` - Pacific/Easter
	// * `Pacific/Efate` - Pacific/Efate
	// * `Pacific/Enderbury` - Pacific/Enderbury
	// * `Pacific/Fakaofo` - Pacific/Fakaofo
	// * `Pacific/Fiji` - Pacific/Fiji
	// * `Pacific/Funafuti` - Pacific/Funafuti
	// * `Pacific/Galapagos` - Pacific/Galapagos
	// * `Pacific/Gambier` - Pacific/Gambier
	// * `Pacific/Guadalcanal` - Pacific/Guadalcanal
	// * `Pacific/Guam` - Pacific/Guam
	// * `Pacific/Honolulu` - Pacific/Honolulu
	// * `Pacific/Johnston` - Pacific/Johnston
	// * `Pacific/Kanton` - Pacific/Kanton
	// * `Pacific/Kiritimati` - Pacific/Kiritimati
	// * `Pacific/Kosrae` - Pacific/Kosrae
	// * `Pacific/Kwajalein` - Pacific/Kwajalein
	// * `Pacific/Majuro` - Pacific/Majuro
	// * `Pacific/Marquesas` - Pacific/Marquesas
	// * `Pacific/Midway` - Pacific/Midway
	// * `Pacific/Nauru` - Pacific/Nauru
	// * `Pacific/Niue` - Pacific/Niue
	// * `Pacific/Norfolk` - Pacific/Norfolk
	// * `Pacific/Noumea` - Pacific/Noumea
	// * `Pacific/Pago_Pago` - Pacific/Pago_Pago
	// * `Pacific/Palau` - Pacific/Palau
	// * `Pacific/Pitcairn` - Pacific/Pitcairn
	// * `Pacific/Pohnpei` - Pacific/Pohnpei
	// * `Pacific/Ponape` - Pacific/Ponape
	// * `Pacific/Port_Moresby` - Pacific/Port_Moresby
	// * `Pacific/Rarotonga` - Pacific/Rarotonga
	// * `Pacific/Saipan` - Pacific/Saipan
	// * `Pacific/Samoa` - Pacific/Samoa
	// * `Pacific/Tahiti` - Pacific/Tahiti
	// * `Pacific/Tarawa` - Pacific/Tarawa
	// * `Pacific/Tongatapu` - Pacific/Tongatapu
	// * `Pacific/Truk` - Pacific/Truk
	// * `Pacific/Wake` - Pacific/Wake
	// * `Pacific/Wallis` - Pacific/Wallis
	// * `Pacific/Yap` - Pacific/Yap
	// * `Poland` - Poland
	// * `Portugal` - Portugal
	// * `ROC` - ROC
	// * `ROK` - ROK
	// * `Singapore` - Singapore
	// * `Turkey` - Turkey
	// * `UCT` - UCT
	// * `US/Alaska` - US/Alaska
	// * `US/Aleutian` - US/Aleutian
	// * `US/Arizona` - US/Arizona
	// * `US/Central` - US/Central
	// * `US/East-Indiana` - US/East-Indiana
	// * `US/Eastern` - US/Eastern
	// * `US/Hawaii` - US/Hawaii
	// * `US/Indiana-Starke` - US/Indiana-Starke
	// * `US/Michigan` - US/Michigan
	// * `US/Mountain` - US/Mountain
	// * `US/Pacific` - US/Pacific
	// * `US/Samoa` - US/Samoa
	// * `UTC` - UTC
	// * `Universal` - Universal
	// * `W-SU` - W-SU
	// * `WET` - WET
	// * `Zulu` - Zulu
	TimeZone *SystemSettingsTimeZone `json:"time_zone,omitempty"`

	// UppercaseCharacterRequired Requires user passwords to contain at least one uppercase letter (A-Z).
	UppercaseCharacterRequired *bool `json:"uppercase_character_required,omitempty"`

	// UrlPrefix URL prefix if DefectDojo is installed in it's own virtual subdirectory.
	UrlPrefix *string `json:"url_prefix,omitempty"`
}

// SystemSettingsJiraMinimumSeverity * `Critical` - Critical
// * `High` - High
// * `Medium` - Medium
// * `Low` - Low
// * `Info` - Info
type SystemSettingsJiraMinimumSeverity string

// SystemSettingsTimeZone * `Africa/Abidjan` - Africa/Abidjan
// * `Africa/Accra` - Africa/Accra
// * `Africa/Addis_Ababa` - Africa/Addis_Ababa
// * `Africa/Algiers` - Africa/Algiers
// * `Africa/Asmara` - Africa/Asmara
// * `Africa/Asmera` - Africa/Asmera
// * `Africa/Bamako` - Africa/Bamako
// * `Africa/Bangui` - Africa/Bangui
// * `Africa/Banjul` - Africa/Banjul
// * `Africa/Bissau` - Africa/Bissau
// * `Africa/Blantyre` - Africa/Blantyre
// * `Africa/Brazzaville` - Africa/Brazzaville
// * `Africa/Bujumbura` - Africa/Bujumbura
// * `Africa/Cairo` - Africa/Cairo
// * `Africa/Casablanca` - Africa/Casablanca
// * `Africa/Ceuta` - Africa/Ceuta
// * `Africa/Conakry` - Africa/Conakry
// * `Africa/Dakar` - Africa/Dakar
// * `Africa/Dar_es_Salaam` - Africa/Dar_es_Salaam
// * `Africa/Djibouti` - Africa/Djibouti
// * `Africa/Douala` - Africa/Douala
// * `Africa/El_Aaiun` - Africa/El_Aaiun
// * `Africa/Freetown` - Africa/Freetown
// * `Africa/Gaborone` - Africa/Gaborone
// * `Africa/Harare` - Africa/Harare
// * `Africa/Johannesburg` - Africa/Johannesburg
// * `Africa/Juba` - Africa/Juba
// * `Africa/Kampala` - Africa/Kampala
// * `Africa/Khartoum` - Africa/Khartoum
// * `Africa/Kigali` - Africa/Kigali
// * `Africa/Kinshasa` - Africa/Kinshasa
// * `Africa/Lagos` - Africa/Lagos
// * `Africa/Libreville` - Africa/Libreville
// * `Africa/Lome` - Africa/Lome
// * `Africa/Luanda` - Africa/Luanda
// * `Africa/Lubumbashi` - Africa/Lubumbashi
// * `Africa/Lusaka` - Africa/Lusaka
// * `Africa/Malabo` - Africa/Malabo
// * `Africa/Maputo` - Africa/Maputo
// * `Africa/Maseru` - Africa/Maseru
// * `Africa/Mbabane` - Africa/Mbabane
// * `Africa/Mogadishu` - Africa/Mogadishu
// * `Africa/Monrovia` - Africa/Monrovia
// * `Africa/Nairobi` - Africa/Nairobi
// * `Africa/Ndjamena` - Africa/Ndjamena
// * `Africa/Niamey` - Africa/Niamey
// * `Africa/Nouakchott` - Africa/Nouakchott
// * `Africa/Ouagadougou` - Africa/Ouagadougou
// * `Africa/Porto-Novo` - Africa/Porto-Novo
// * `Africa/Sao_Tome` - Africa/Sao_Tome
// * `Africa/Timbuktu` - Africa/Timbuktu
// * `Africa/Tripoli` - Africa/Tripoli
// * `Africa/Tunis` - Africa/Tunis
// * `Africa/Windhoek` - Africa/Windhoek
// * `America/Adak` - America/Adak
// * `America/Anchorage` - America/Anchorage
// * `America/Anguilla` - America/Anguilla
// * `America/Antigua` - America/Antigua
// * `America/Araguaina` - America/Araguaina
// * `America/Argentina/Buenos_Aires` - America/Argentina/Buenos_Aires
// * `America/Argentina/Catamarca` - America/Argentina/Catamarca
// * `America/Argentina/ComodRivadavia` - America/Argentina/ComodRivadavia
// * `America/Argentina/Cordoba` - America/Argentina/Cordoba
// * `America/Argentina/Jujuy` - America/Argentina/Jujuy
// * `America/Argentina/La_Rioja` - America/Argentina/La_Rioja
// * `America/Argentina/Mendoza` - America/Argentina/Mendoza
// * `America/Argentina/Rio_Gallegos` - America/Argentina/Rio_Gallegos
// * `America/Argentina/Salta` - America/Argentina/Salta
// * `America/Argentina/San_Juan` - America/Argentina/San_Juan
// * `America/Argentina/San_Luis` - America/Argentina/San_Luis
// * `America/Argentina/Tucuman` - America/Argentina/Tucuman
// * `America/Argentina/Ushuaia` - America/Argentina/Ushuaia
// * `America/Aruba` - America/Aruba
// * `America/Asuncion` - America/Asuncion
// * `America/Atikokan` - America/Atikokan
// * `America/Atka` - America/Atka
// * `America/Bahia` - America/Bahia
// * `America/Bahia_Banderas` - America/Bahia_Banderas
// * `America/Barbados` - America/Barbados
// * `America/Belem` - America/Belem
// * `America/Belize` - America/Belize
// * `America/Blanc-Sablon` - America/Blanc-Sablon
// * `America/Boa_Vista` - America/Boa_Vista
// * `America/Bogota` - America/Bogota
// * `America/Boise` - America/Boise
// * `America/Buenos_Aires` - America/Buenos_Aires
// * `America/Cambridge_Bay` - America/Cambridge_Bay
// * `America/Campo_Grande` - America/Campo_Grande
// * `America/Cancun` - America/Cancun
// * `America/Caracas` - America/Caracas
// * `America/Catamarca` - America/Catamarca
// * `America/Cayenne` - America/Cayenne
// * `America/Cayman` - America/Cayman
// * `America/Chicago` - America/Chicago
// * `America/Chihuahua` - America/Chihuahua
// * `America/Ciudad_Juarez` - America/Ciudad_Juarez
// * `America/Coral_Harbour` - America/Coral_Harbour
// * `America/Cordoba` - America/Cordoba
// * `America/Costa_Rica` - America/Costa_Rica
// * `America/Creston` - America/Creston
// * `America/Cuiaba` - America/Cuiaba
// * `America/Curacao` - America/Curacao
// * `America/Danmarkshavn` - America/Danmarkshavn
// * `America/Dawson` - America/Dawson
// * `America/Dawson_Creek` - America/Dawson_Creek
// * `America/Denver` - America/Denver
// * `America/Detroit` - America/Detroit
// * `America/Dominica` - America/Dominica
// * `America/Edmonton` - America/Edmonton
// * `America/Eirunepe` - America/Eirunepe
// * `America/El_Salvador` - America/El_Salvador
// * `America/Ensenada` - America/Ensenada
// * `America/Fort_Nelson` - America/Fort_Nelson
// * `America/Fort_Wayne` - America/Fort_Wayne
// * `America/Fortaleza` - America/Fortaleza
// * `America/Glace_Bay` - America/Glace_Bay
// * `America/Godthab` - America/Godthab
// * `America/Goose_Bay` - America/Goose_Bay
// * `America/Grand_Turk` - America/Grand_Turk
// * `America/Grenada` - America/Grenada
// * `America/Guadeloupe` - America/Guadeloupe
// * `America/Guatemala` - America/Guatemala
// * `America/Guayaquil` - America/Guayaquil
// * `America/Guyana` - America/Guyana
// * `America/Halifax` - America/Halifax
// * `America/Havana` - America/Havana
// * `America/Hermosillo` - America/Hermosillo
// * `America/Indiana/Indianapolis` - America/Indiana/Indianapolis
// * `America/Indiana/Knox` - America/Indiana/Knox
// * `America/Indiana/Marengo` - America/Indiana/Marengo
// * `America/Indiana/Petersburg` - America/Indiana/Petersburg
// * `America/Indiana/Tell_City` - America/Indiana/Tell_City
// * `America/Indiana/Vevay` - America/Indiana/Vevay
// * `America/Indiana/Vincennes` - America/Indiana/Vincennes
// * `America/Indiana/Winamac` - America/Indiana/Winamac
// * `America/Indianapolis` - America/Indianapolis
// * `America/Inuvik` - America/Inuvik
// * `America/Iqaluit` - America/Iqaluit
// * `America/Jamaica` - America/Jamaica
// * `America/Jujuy` - America/Jujuy
// * `America/Juneau` - America/Juneau
// * `America/Kentucky/Louisville` - America/Kentucky/Louisville
// * `America/Kentucky/Monticello` - America/Kentucky/Monticello
// * `America/Knox_IN` - America/Knox_IN
// * `America/Kralendijk` - America/Kralendijk
// * `America/La_Paz` - America/La_Paz
// * `America/Lima` - America/Lima
// * `America/Los_Angeles` - America/Los_Angeles
// * `America/Louisville` - America/Louisville
// * `America/Lower_Princes` - America/Lower_Princes
// * `America/Maceio` - America/Maceio
// * `America/Managua` - America/Managua
// * `America/Manaus` - America/Manaus
// * `America/Marigot` - America/Marigot
// * `America/Martinique` - America/Martinique
// * `America/Matamoros` - America/Matamoros
// * `America/Mazatlan` - America/Mazatlan
// * `America/Mendoza` - America/Mendoza
// * `America/Menominee` - America/Menominee
// * `America/Merida` - America/Merida
// * `America/Metlakatla` - America/Metlakatla
// * `America/Mexico_City` - America/Mexico_City
// * `America/Miquelon` - America/Miquelon
// * `America/Moncton` - America/Moncton
// * `America/Monterrey` - America/Monterrey
// * `America/Montevideo` - America/Montevideo
// * `America/Montreal` - America/Montreal
// * `America/Montserrat` - America/Montserrat
// * `America/Nassau` - America/Nassau
// * `America/New_York` - America/New_York
// * `America/Nipigon` - America/Nipigon
// * `America/Nome` - America/Nome
// * `America/Noronha` - America/Noronha
// * `America/North_Dakota/Beulah` - America/North_Dakota/Beulah
// * `America/North_Dakota/Center` - America/North_Dakota/Center
// * `America/North_Dakota/New_Salem` - America/North_Dakota/New_Salem
// * `America/Nuuk` - America/Nuuk
// * `America/Ojinaga` - America/Ojinaga
// * `America/Panama` - America/Panama
// * `America/Pangnirtung` - America/Pangnirtung
// * `America/Paramaribo` - America/Paramaribo
// * `America/Phoenix` - America/Phoenix
// * `America/Port-au-Prince` - America/Port-au-Prince
// * `America/Port_of_Spain` - America/Port_of_Spain
// * `America/Porto_Acre` - America/Porto_Acre
// * `America/Porto_Velho` - America/Porto_Velho
// * `America/Puerto_Rico` - America/Puerto_Rico
// * `America/Punta_Arenas` - America/Punta_Arenas
// * `America/Rainy_River` - America/Rainy_River
// * `America/Rankin_Inlet` - America/Rankin_Inlet
// * `America/Recife` - America/Recife
// * `America/Regina` - America/Regina
// * `America/Resolute` - America/Resolute
// * `America/Rio_Branco` - America/Rio_Branco
// * `America/Rosario` - America/Rosario
// * `America/Santa_Isabel` - America/Santa_Isabel
// * `America/Santarem` - America/Santarem
// * `America/Santiago` - America/Santiago
// * `America/Santo_Domingo` - America/Santo_Domingo
// * `America/Sao_Paulo` - America/Sao_Paulo
// * `America/Scoresbysund` - America/Scoresbysund
// * `America/Shiprock` - America/Shiprock
// * `America/Sitka` - America/Sitka
// * `America/St_Barthelemy` - America/St_Barthelemy
// * `America/St_Johns` - America/St_Johns
// * `America/St_Kitts` - America/St_Kitts
// * `America/St_Lucia` - America/St_Lucia
// * `America/St_Thomas` - America/St_Thomas
// * `America/St_Vincent` - America/St_Vincent
// * `America/Swift_Current` - America/Swift_Current
// * `America/Tegucigalpa` - America/Tegucigalpa
// * `America/Thule` - America/Thule
// * `America/Thunder_Bay` - America/Thunder_Bay
// * `America/Tijuana` - America/Tijuana
// * `America/Toronto` - America/Toronto
// * `America/Tortola` - America/Tortola
// * `America/Vancouver` - America/Vancouver
// * `America/Virgin` - America/Virgin
// * `America/Whitehorse` - America/Whitehorse
// * `America/Winnipeg` - America/Winnipeg
// * `America/Yakutat` - America/Yakutat
// * `America/Yellowknife` - America/Yellowknife
// * `Antarctica/Casey` - Antarctica/Casey
// * `Antarctica/Davis` - Antarctica/Davis
// * `Antarctica/DumontDUrville` - Antarctica/DumontDUrville
// * `Antarctica/Macquarie` - Antarctica/Macquarie
// * `Antarctica/Mawson` - Antarctica/Mawson
// * `Antarctica/McMurdo` - Antarctica/McMurdo
// * `Antarctica/Palmer` - Antarctica/Palmer
// * `Antarctica/Rothera` - Antarctica/Rothera
// * `Antarctica/South_Pole` - Antarctica/South_Pole
// * `Antarctica/Syowa` - Antarctica/Syowa
// * `Antarctica/Troll` - Antarctica/Troll
// * `Antarctica/Vostok` - Antarctica/Vostok
// * `Arctic/Longyearbyen` - Arctic/Longyearbyen
// * `Asia/Aden` - Asia/Aden
// * `Asia/Almaty` - Asia/Almaty
// * `Asia/Amman` - Asia/Amman
// * `Asia/Anadyr` - Asia/Anadyr
// * `Asia/Aqtau` - Asia/Aqtau
// * `Asia/Aqtobe` - Asia/Aqtobe
// * `Asia/Ashgabat` - Asia/Ashgabat
// * `Asia/Ashkhabad` - Asia/Ashkhabad
// * `Asia/Atyrau` - Asia/Atyrau
// * `Asia/Baghdad` - Asia/Baghdad
// * `Asia/Bahrain` - Asia/Bahrain
// * `Asia/Baku` - Asia/Baku
// * `Asia/Bangkok` - Asia/Bangkok
// * `Asia/Barnaul` - Asia/Barnaul
// * `Asia/Beirut` - Asia/Beirut
// * `Asia/Bishkek` - Asia/Bishkek
// * `Asia/Brunei` - Asia/Brunei
// * `Asia/Calcutta` - Asia/Calcutta
// * `Asia/Chita` - Asia/Chita
// * `Asia/Choibalsan` - Asia/Choibalsan
// * `Asia/Chongqing` - Asia/Chongqing
// * `Asia/Chungking` - Asia/Chungking
// * `Asia/Colombo` - Asia/Colombo
// * `Asia/Dacca` - Asia/Dacca
// * `Asia/Damascus` - Asia/Damascus
// * `Asia/Dhaka` - Asia/Dhaka
// * `Asia/Dili` - Asia/Dili
// * `Asia/Dubai` - Asia/Dubai
// * `Asia/Dushanbe` - Asia/Dushanbe
// * `Asia/Famagusta` - Asia/Famagusta
// * `Asia/Gaza` - Asia/Gaza
// * `Asia/Harbin` - Asia/Harbin
// * `Asia/Hebron` - Asia/Hebron
// * `Asia/Ho_Chi_Minh` - Asia/Ho_Chi_Minh
// * `Asia/Hong_Kong` - Asia/Hong_Kong
// * `Asia/Hovd` - Asia/Hovd
// * `Asia/Irkutsk` - Asia/Irkutsk
// * `Asia/Istanbul` - Asia/Istanbul
// * `Asia/Jakarta` - Asia/Jakarta
// * `Asia/Jayapura` - Asia/Jayapura
// * `Asia/Jerusalem` - Asia/Jerusalem
// * `Asia/Kabul` - Asia/Kabul
// * `Asia/Kamchatka` - Asia/Kamchatka
// * `Asia/Karachi` - Asia/Karachi
// * `Asia/Kashgar` - Asia/Kashgar
// * `Asia/Kathmandu` - Asia/Kathmandu
// * `Asia/Katmandu` - Asia/Katmandu
// * `Asia/Khandyga` - Asia/Khandyga
// * `Asia/Kolkata` - Asia/Kolkata
// * `Asia/Krasnoyarsk` - Asia/Krasnoyarsk
// * `Asia/Kuala_Lumpur` - Asia/Kuala_Lumpur
// * `Asia/Kuching` - Asia/Kuching
// * `Asia/Kuwait` - Asia/Kuwait
// * `Asia/Macao` - Asia/Macao
// * `Asia/Macau` - Asia/Macau
// * `Asia/Magadan` - Asia/Magadan
// * `Asia/Makassar` - Asia/Makassar
// * `Asia/Manila` - Asia/Manila
// * `Asia/Muscat` - Asia/Muscat
// * `Asia/Nicosia` - Asia/Nicosia
// * `Asia/Novokuznetsk` - Asia/Novokuznetsk
// * `Asia/Novosibirsk` - Asia/Novosibirsk
// * `Asia/Omsk` - Asia/Omsk
// * `Asia/Oral` - Asia/Oral
// * `Asia/Phnom_Penh` - Asia/Phnom_Penh
// * `Asia/Pontianak` - Asia/Pontianak
// * `Asia/Pyongyang` - Asia/Pyongyang
// * `Asia/Qatar` - Asia/Qatar
// * `Asia/Qostanay` - Asia/Qostanay
// * `Asia/Qyzylorda` - Asia/Qyzylorda
// * `Asia/Rangoon` - Asia/Rangoon
// * `Asia/Riyadh` - Asia/Riyadh
// * `Asia/Saigon` - Asia/Saigon
// * `Asia/Sakhalin` - Asia/Sakhalin
// * `Asia/Samarkand` - Asia/Samarkand
// * `Asia/Seoul` - Asia/Seoul
// * `Asia/Shanghai` - Asia/Shanghai
// * `Asia/Singapore` - Asia/Singapore
// * `Asia/Srednekolymsk` - Asia/Srednekolymsk
// * `Asia/Taipei` - Asia/Taipei
// * `Asia/Tashkent` - Asia/Tashkent
// * `Asia/Tbilisi` - Asia/Tbilisi
// * `Asia/Tehran` - Asia/Tehran
// * `Asia/Tel_Aviv` - Asia/Tel_Aviv
// * `Asia/Thimbu` - Asia/Thimbu
// * `Asia/Thimphu` - Asia/Thimphu
// * `Asia/Tokyo` - Asia/Tokyo
// * `Asia/Tomsk` - Asia/Tomsk
// * `Asia/Ujung_Pandang` - Asia/Ujung_Pandang
// * `Asia/Ulaanbaatar` - Asia/Ulaanbaatar
// * `Asia/Ulan_Bator` - Asia/Ulan_Bator
// * `Asia/Urumqi` - Asia/Urumqi
// * `Asia/Ust-Nera` - Asia/Ust-Nera
// * `Asia/Vientiane` - Asia/Vientiane
// * `Asia/Vladivostok` - Asia/Vladivostok
// * `Asia/Yakutsk` - Asia/Yakutsk
// * `Asia/Yangon` - Asia/Yangon
// * `Asia/Yekaterinburg` - Asia/Yekaterinburg
// * `Asia/Yerevan` - Asia/Yerevan
// * `Atlantic/Azores` - Atlantic/Azores
// * `Atlantic/Bermuda` - Atlantic/Bermuda
// * `Atlantic/Canary` - Atlantic/Canary
// * `Atlantic/Cape_Verde` - Atlantic/Cape_Verde
// * `Atlantic/Faeroe` - Atlantic/Faeroe
// * `Atlantic/Faroe` - Atlantic/Faroe
// * `Atlantic/Jan_Mayen` - Atlantic/Jan_Mayen
// * `Atlantic/Madeira` - Atlantic/Madeira
// * `Atlantic/Reykjavik` - Atlantic/Reykjavik
// * `Atlantic/South_Georgia` - Atlantic/South_Georgia
// * `Atlantic/St_Helena` - Atlantic/St_Helena
// * `Atlantic/Stanley` - Atlantic/Stanley
// * `Australia/ACT` - Australia/ACT
// * `Australia/Adelaide` - Australia/Adelaide
// * `Australia/Brisbane` - Australia/Brisbane
// * `Australia/Broken_Hill` - Australia/Broken_Hill
// * `Australia/Canberra` - Australia/Canberra
// * `Australia/Currie` - Australia/Currie
// * `Australia/Darwin` - Australia/Darwin
// * `Australia/Eucla` - Australia/Eucla
// * `Australia/Hobart` - Australia/Hobart
// * `Australia/LHI` - Australia/LHI
// * `Australia/Lindeman` - Australia/Lindeman
// * `Australia/Lord_Howe` - Australia/Lord_Howe
// * `Australia/Melbourne` - Australia/Melbourne
// * `Australia/NSW` - Australia/NSW
// * `Australia/North` - Australia/North
// * `Australia/Perth` - Australia/Perth
// * `Australia/Queensland` - Australia/Queensland
// * `Australia/South` - Australia/South
// * `Australia/Sydney` - Australia/Sydney
// * `Australia/Tasmania` - Australia/Tasmania
// * `Australia/Victoria` - Australia/Victoria
// * `Australia/West` - Australia/West
// * `Australia/Yancowinna` - Australia/Yancowinna
// * `Brazil/Acre` - Brazil/Acre
// * `Brazil/DeNoronha` - Brazil/DeNoronha
// * `Brazil/East` - Brazil/East
// * `Brazil/West` - Brazil/West
// * `CET` - CET
// * `CST6CDT` - CST6CDT
// * `Canada/Atlantic` - Canada/Atlantic
// * `Canada/Central` - Canada/Central
// * `Canada/Eastern` - Canada/Eastern
// * `Canada/Mountain` - Canada/Mountain
// * `Canada/Newfoundland` - Canada/Newfoundland
// * `Canada/Pacific` - Canada/Pacific
// * `Canada/Saskatchewan` - Canada/Saskatchewan
// * `Canada/Yukon` - Canada/Yukon
// * `Chile/Continental` - Chile/Continental
// * `Chile/EasterIsland` - Chile/EasterIsland
// * `Cuba` - Cuba
// * `EET` - EET
// * `EST` - EST
// * `EST5EDT` - EST5EDT
// * `Egypt` - Egypt
// * `Eire` - Eire
// * `Etc/GMT` - Etc/GMT
// * `Etc/GMT+0` - Etc/GMT+0
// * `Etc/GMT+1` - Etc/GMT+1
// * `Etc/GMT+10` - Etc/GMT+10
// * `Etc/GMT+11` - Etc/GMT+11
// * `Etc/GMT+12` - Etc/GMT+12
// * `Etc/GMT+2` - Etc/GMT+2
// * `Etc/GMT+3` - Etc/GMT+3
// * `Etc/GMT+4` - Etc/GMT+4
// * `Etc/GMT+5` - Etc/GMT+5
// * `Etc/GMT+6` - Etc/GMT+6
// * `Etc/GMT+7` - Etc/GMT+7
// * `Etc/GMT+8` - Etc/GMT+8
// * `Etc/GMT+9` - Etc/GMT+9
// * `Etc/GMT-0` - Etc/GMT-0
// * `Etc/GMT-1` - Etc/GMT-1
// * `Etc/GMT-10` - Etc/GMT-10
// * `Etc/GMT-11` - Etc/GMT-11
// * `Etc/GMT-12` - Etc/GMT-12
// * `Etc/GMT-13` - Etc/GMT-13
// * `Etc/GMT-14` - Etc/GMT-14
// * `Etc/GMT-2` - Etc/GMT-2
// * `Etc/GMT-3` - Etc/GMT-3
// * `Etc/GMT-4` - Etc/GMT-4
// * `Etc/GMT-5` - Etc/GMT-5
// * `Etc/GMT-6` - Etc/GMT-6
// * `Etc/GMT-7` - Etc/GMT-7
// * `Etc/GMT-8` - Etc/GMT-8
// * `Etc/GMT-9` - Etc/GMT-9
// * `Etc/GMT0` - Etc/GMT0
// * `Etc/Greenwich` - Etc/Greenwich
// * `Etc/UCT` - Etc/UCT
// * `Etc/UTC` - Etc/UTC
// * `Etc/Universal` - Etc/Universal
// * `Etc/Zulu` - Etc/Zulu
// * `Europe/Amsterdam` - Europe/Amsterdam
// * `Europe/Andorra` - Europe/Andorra
// * `Europe/Astrakhan` - Europe/Astrakhan
// * `Europe/Athens` - Europe/Athens
// * `Europe/Belfast` - Europe/Belfast
// * `Europe/Belgrade` - Europe/Belgrade
// * `Europe/Berlin` - Europe/Berlin
// * `Europe/Bratislava` - Europe/Bratislava
// * `Europe/Brussels` - Europe/Brussels
// * `Europe/Bucharest` - Europe/Bucharest
// * `Europe/Budapest` - Europe/Budapest
// * `Europe/Busingen` - Europe/Busingen
// * `Europe/Chisinau` - Europe/Chisinau
// * `Europe/Copenhagen` - Europe/Copenhagen
// * `Europe/Dublin` - Europe/Dublin
// * `Europe/Gibraltar` - Europe/Gibraltar
// * `Europe/Guernsey` - Europe/Guernsey
// * `Europe/Helsinki` - Europe/Helsinki
// * `Europe/Isle_of_Man` - Europe/Isle_of_Man
// * `Europe/Istanbul` - Europe/Istanbul
// * `Europe/Jersey` - Europe/Jersey
// * `Europe/Kaliningrad` - Europe/Kaliningrad
// * `Europe/Kiev` - Europe/Kiev
// * `Europe/Kirov` - Europe/Kirov
// * `Europe/Kyiv` - Europe/Kyiv
// * `Europe/Lisbon` - Europe/Lisbon
// * `Europe/Ljubljana` - Europe/Ljubljana
// * `Europe/London` - Europe/London
// * `Europe/Luxembourg` - Europe/Luxembourg
// * `Europe/Madrid` - Europe/Madrid
// * `Europe/Malta` - Europe/Malta
// * `Europe/Mariehamn` - Europe/Mariehamn
// * `Europe/Minsk` - Europe/Minsk
// * `Europe/Monaco` - Europe/Monaco
// * `Europe/Moscow` - Europe/Moscow
// * `Europe/Nicosia` - Europe/Nicosia
// * `Europe/Oslo` - Europe/Oslo
// * `Europe/Paris` - Europe/Paris
// * `Europe/Podgorica` - Europe/Podgorica
// * `Europe/Prague` - Europe/Prague
// * `Europe/Riga` - Europe/Riga
// * `Europe/Rome` - Europe/Rome
// * `Europe/Samara` - Europe/Samara
// * `Europe/San_Marino` - Europe/San_Marino
// * `Europe/Sarajevo` - Europe/Sarajevo
// * `Europe/Saratov` - Europe/Saratov
// * `Europe/Simferopol` - Europe/Simferopol
// * `Europe/Skopje` - Europe/Skopje
// * `Europe/Sofia` - Europe/Sofia
// * `Europe/Stockholm` - Europe/Stockholm
// * `Europe/Tallinn` - Europe/Tallinn
// * `Europe/Tirane` - Europe/Tirane
// * `Europe/Tiraspol` - Europe/Tiraspol
// * `Europe/Ulyanovsk` - Europe/Ulyanovsk
// * `Europe/Uzhgorod` - Europe/Uzhgorod
// * `Europe/Vaduz` - Europe/Vaduz
// * `Europe/Vatican` - Europe/Vatican
// * `Europe/Vienna` - Europe/Vienna
// * `Europe/Vilnius` - Europe/Vilnius
// * `Europe/Volgograd` - Europe/Volgograd
// * `Europe/Warsaw` - Europe/Warsaw
// * `Europe/Zagreb` - Europe/Zagreb
// * `Europe/Zaporozhye` - Europe/Zaporozhye
// * `Europe/Zurich` - Europe/Zurich
// * `GB` - GB
// * `GB-Eire` - GB-Eire
// * `GMT` - GMT
// * `GMT+0` - GMT+0
// * `GMT-0` - GMT-0
// * `GMT0` - GMT0
// * `Greenwich` - Greenwich
// * `HST` - HST
// * `Hongkong` - Hongkong
// * `Iceland` - Iceland
// * `Indian/Antananarivo` - Indian/Antananarivo
// * `Indian/Chagos` - Indian/Chagos
// * `Indian/Christmas` - Indian/Christmas
// * `Indian/Cocos` - Indian/Cocos
// * `Indian/Comoro` - Indian/Comoro
// * `Indian/Kerguelen` - Indian/Kerguelen
// * `Indian/Mahe` - Indian/Mahe
// * `Indian/Maldives` - Indian/Maldives
// * `Indian/Mauritius` - Indian/Mauritius
// * `Indian/Mayotte` - Indian/Mayotte
// * `Indian/Reunion` - Indian/Reunion
// * `Iran` - Iran
// * `Israel` - Israel
// * `Jamaica` - Jamaica
// * `Japan` - Japan
// * `Kwajalein` - Kwajalein
// * `Libya` - Libya
// * `MET` - MET
// * `MST` - MST
// * `MST7MDT` - MST7MDT
// * `Mexico/BajaNorte` - Mexico/BajaNorte
// * `Mexico/BajaSur` - Mexico/BajaSur
// * `Mexico/General` - Mexico/General
// * `NZ` - NZ
// * `NZ-CHAT` - NZ-CHAT
// * `Navajo` - Navajo
// * `PRC` - PRC
// * `PST8PDT` - PST8PDT
// * `Pacific/Apia` - Pacific/Apia
// * `Pacific/Auckland` - Pacific/Auckland
// * `Pacific/Bougainville` - Pacific/Bougainville
// * `Pacific/Chatham` - Pacific/Chatham
// * `Pacific/Chuuk` - Pacific/Chuuk
// * `Pacific/Easter` - Pacific/Easter
// * `Pacific/Efate` - Pacific/Efate
// * `Pacific/Enderbury` - Pacific/Enderbury
// * `Pacific/Fakaofo` - Pacific/Fakaofo
// * `Pacific/Fiji` - Pacific/Fiji
// * `Pacific/Funafuti` - Pacific/Funafuti
// * `Pacific/Galapagos` - Pacific/Galapagos
// * `Pacific/Gambier` - Pacific/Gambier
// * `Pacific/Guadalcanal` - Pacific/Guadalcanal
// * `Pacific/Guam` - Pacific/Guam
// * `Pacific/Honolulu` - Pacific/Honolulu
// * `Pacific/Johnston` - Pacific/Johnston
// * `Pacific/Kanton` - Pacific/Kanton
// * `Pacific/Kiritimati` - Pacific/Kiritimati
// * `Pacific/Kosrae` - Pacific/Kosrae
// * `Pacific/Kwajalein` - Pacific/Kwajalein
// * `Pacific/Majuro` - Pacific/Majuro
// * `Pacific/Marquesas` - Pacific/Marquesas
// * `Pacific/Midway` - Pacific/Midway
// * `Pacific/Nauru` - Pacific/Nauru
// * `Pacific/Niue` - Pacific/Niue
// * `Pacific/Norfolk` - Pacific/Norfolk
// * `Pacific/Noumea` - Pacific/Noumea
// * `Pacific/Pago_Pago` - Pacific/Pago_Pago
// * `Pacific/Palau` - Pacific/Palau
// * `Pacific/Pitcairn` - Pacific/Pitcairn
// * `Pacific/Pohnpei` - Pacific/Pohnpei
// * `Pacific/Ponape` - Pacific/Ponape
// * `Pacific/Port_Moresby` - Pacific/Port_Moresby
// * `Pacific/Rarotonga` - Pacific/Rarotonga
// * `Pacific/Saipan` - Pacific/Saipan
// * `Pacific/Samoa` - Pacific/Samoa
// * `Pacific/Tahiti` - Pacific/Tahiti
// * `Pacific/Tarawa` - Pacific/Tarawa
// * `Pacific/Tongatapu` - Pacific/Tongatapu
// * `Pacific/Truk` - Pacific/Truk
// * `Pacific/Wake` - Pacific/Wake
// * `Pacific/Wallis` - Pacific/Wallis
// * `Pacific/Yap` - Pacific/Yap
// * `Poland` - Poland
// * `Portugal` - Portugal
// * `ROC` - ROC
// * `ROK` - ROK
// * `Singapore` - Singapore
// * `Turkey` - Turkey
// * `UCT` - UCT
// * `US/Alaska` - US/Alaska
// * `US/Aleutian` - US/Aleutian
// * `US/Arizona` - US/Arizona
// * `US/Central` - US/Central
// * `US/East-Indiana` - US/East-Indiana
// * `US/Eastern` - US/Eastern
// * `US/Hawaii` - US/Hawaii
// * `US/Indiana-Starke` - US/Indiana-Starke
// * `US/Michigan` - US/Michigan
// * `US/Mountain` - US/Mountain
// * `US/Pacific` - US/Pacific
// * `US/Samoa` - US/Samoa
// * `UTC` - UTC
// * `Universal` - Universal
// * `W-SU` - W-SU
// * `WET` - WET
// * `Zulu` - Zulu
type SystemSettingsTimeZone string

// SystemSettingsRequest defines model for SystemSettingsRequest.
type SystemSettingsRequest struct {
	AddVulnerabilityIdToJiraLabel *bool `json:"add_vulnerability_id_to_jira_label,omitempty"`

	// AllowAnonymousSurveyRepsonse Enable anyone with a link to the survey to answer a survey
	AllowAnonymousSurveyRepsonse *bool   `json:"allow_anonymous_survey_repsonse,omitempty"`
	Credentials                  *string `json:"credentials,omitempty"`

	// DefaultGroup New users will be assigned to this group.
	DefaultGroup *int `json:"default_group"`

	// DefaultGroupEmailPattern New users will only be assigned to the default group, when their email address matches this regex pattern. This is optional condition.
	DefaultGroupEmailPattern *string `json:"default_group_email_pattern,omitempty"`

	// DefaultGroupRole New users will be assigned to their default group with this role.
	DefaultGroupRole *int `json:"default_group_role"`

	// DeleteDuplicates Requires next setting: maximum number of duplicates to retain.
	DeleteDuplicates *bool `json:"delete_duplicates,omitempty"`

	// DisableJiraWebhookSecret Allows incoming requests without a secret (discouraged legacy behaviour)
	DisableJiraWebhookSecret *bool `json:"disable_jira_webhook_secret,omitempty"`

	// Disclaimer Include this custom disclaimer on all notifications and generated reports
	Disclaimer *string `json:"disclaimer,omitempty"`
	EmailFrom  *string `json:"email_from,omitempty"`

	// EnableAuditlog With this setting turned on, Dojo maintains an audit log of changes made to entities (Findings, Tests, Engagements, Procuts, ...)If you run big import you may want to disable this because the way django-auditlog currently works, there's a big performance hit. Especially during (re-)imports.
	EnableAuditlog *bool `json:"enable_auditlog,omitempty"`

	// EnableBenchmark Enables Benchmarks such as the OWASP ASVS (Application Security Verification Standard)
	EnableBenchmark *bool `json:"enable_benchmark,omitempty"`

	// EnableCalendar With this setting turned off, the Calendar will be disabled in the user interface.
	EnableCalendar *bool `json:"enable_calendar,omitempty"`

	// EnableChecklists With this setting turned off, checklists will be disabled in the user interface.
	EnableChecklists *bool `json:"enable_checklists,omitempty"`

	// EnableCredentials With this setting turned off, credentials will be disabled in the user interface.
	EnableCredentials *bool `json:"enable_credentials,omitempty"`

	// EnableDeduplication With this setting turned on, Dojo deduplicates findings by comparing endpoints, cwe fields, and titles. If two findings share a URL and have the same CWE or title, Dojo marks the less recent finding as a duplicate. When deduplication is enabled, a list of deduplicated findings is added to the engagement view.
	EnableDeduplication *bool `json:"enable_deduplication,omitempty"`

	// EnableEndpointMetadataImport With this setting turned off, endpoint metadata import will be disabled in the user interface.
	EnableEndpointMetadataImport *bool `json:"enable_endpoint_metadata_import,omitempty"`

	// EnableFindingGroups With this setting turned off, the Finding Groups will be disabled.
	EnableFindingGroups *bool `json:"enable_finding_groups,omitempty"`

	// EnableFindingSla Enables Finding SLA's for time to remediate.
	EnableFindingSla *bool `json:"enable_finding_sla,omitempty"`
	EnableGithub     *bool `json:"enable_github,omitempty"`
	EnableJira       *bool `json:"enable_jira,omitempty"`

	// EnableJiraWebHook Please note: It is strongly recommended to use a secret below and / or IP whitelist the JIRA server using a proxy such as Nginx.
	EnableJiraWebHook          *bool `json:"enable_jira_web_hook,omitempty"`
	EnableMailNotifications    *bool `json:"enable_mail_notifications,omitempty"`
	EnableMsteamsNotifications *bool `json:"enable_msteams_notifications,omitempty"`

	// EnableNotifySlaActive Enables Notify when time to remediate according to Finding SLA's is breached for active Findings.
	EnableNotifySlaActive *bool `json:"enable_notify_sla_active,omitempty"`

	// EnableNotifySlaActiveVerified Enables Notify when time to remediate according to Finding SLA's is breached for active, verified Findings.
	EnableNotifySlaActiveVerified *bool `json:"enable_notify_sla_active_verified,omitempty"`

	// EnableNotifySlaExponentialBackoff Enable an exponential backoff strategy for SLA breach notifications, e.g. 1, 2, 4, 8, etc. Otherwise it alerts every day
	EnableNotifySlaExponentialBackoff *bool `json:"enable_notify_sla_exponential_backoff,omitempty"`

	// EnableNotifySlaJiraOnly Enables Notify when time to remediate according to Finding SLA's is breached for Findings that are linked to JIRA issues. Notification is disabled for Findings not linked to JIRA issues
	EnableNotifySlaJiraOnly *bool `json:"enable_notify_sla_jira_only,omitempty"`

	// EnableProductGrade Displays a grade letter next to a product to show the overall health.
	EnableProductGrade *bool `json:"enable_product_grade,omitempty"`

	// EnableProductTagInheritance Enables product tag inheritance globally for all products. Any tags added on a product will automatically be added to all Engagements, Tests, and Findings
	EnableProductTagInheritance *bool `json:"enable_product_tag_inheritance,omitempty"`

	// EnableProductTrackingFiles With this setting turned off, the product tracking files will be disabled in the user interface.
	EnableProductTrackingFiles *bool `json:"enable_product_tracking_files,omitempty"`

	// EnableQuestionnaires With this setting turned off, questionnaires will be disabled in the user interface.
	EnableQuestionnaires     *bool `json:"enable_questionnaires,omitempty"`
	EnableSlackNotifications *bool `json:"enable_slack_notifications,omitempty"`

	// EnableTemplateMatch Enables global remediation advice and matching on CWE and Title. The text will be replaced for mitigation, impact and references on a finding. Useful for providing consistent impact and remediation advice regardless of the scanner.
	EnableTemplateMatch *bool `json:"enable_template_match,omitempty"`

	// EnableUserProfileEditable When turned on users can edit their profiles
	EnableUserProfileEditable *bool `json:"enable_user_profile_editable,omitempty"`

	// EngagementAutoClose Closes an engagement after 3 days (default) past due date including last update.
	EngagementAutoClose *bool `json:"engagement_auto_close,omitempty"`

	// EngagementAutoCloseDays Closes an engagement after the specified number of days past due date including last update.
	EngagementAutoCloseDays *int `json:"engagement_auto_close_days,omitempty"`

	// FalsePositiveHistory (EXPERIMENTAL) DefectDojo will automatically mark the finding as a false positive if an equal finding (according to its dedupe algorithm) has been previously marked as a false positive on the same product. ATTENTION: Although the deduplication algorithm is used to determine if a finding should be marked as a false positive, this feature will not work if deduplication is enabled since it doesn't make sense to use both.
	FalsePositiveHistory *bool `json:"false_positive_history,omitempty"`

	// JiraLabels JIRA issue labels space seperated
	JiraLabels *string `json:"jira_labels"`

	// JiraMinimumSeverity * `Critical` - Critical
	// * `High` - High
	// * `Medium` - Medium
	// * `Low` - Low
	// * `Info` - Info
	JiraMinimumSeverity *SystemSettingsRequestJiraMinimumSeverity `json:"jira_minimum_severity"`

	// JiraWebhookSecret Secret needed in URL for incoming JIRA Webhook
	JiraWebhookSecret *string `json:"jira_webhook_secret"`

	// LowercaseCharacterRequired Requires user passwords to contain at least one lowercase letter (a-z).
	LowercaseCharacterRequired *bool   `json:"lowercase_character_required,omitempty"`
	MailNotificationsTo        *string `json:"mail_notifications_to,omitempty"`

	// MaxDupes When enabled, if a single issue reaches the maximum number of duplicates, the oldest will be deleted. Duplicate will not be deleted when left empty. A value of 0 will remove all duplicates.
	MaxDupes *int `json:"max_dupes"`

	// MaximumPasswordLength Requires user to set passwords less than maximum length.
	MaximumPasswordLength *int `json:"maximum_password_length,omitempty"`

	// MinimumPasswordLength Requires user to set passwords greater than minimum length.
	MinimumPasswordLength *int `json:"minimum_password_length,omitempty"`

	// MsteamsUrl The full URL of the incoming webhook
	MsteamsUrl *string `json:"msteams_url,omitempty"`

	// NonCommonPasswordRequired Requires user passwords to not be part of list of common passwords.
	NonCommonPasswordRequired *bool `json:"non_common_password_required,omitempty"`

	// NumberCharacterRequired Requires user passwords to contain at least one digit (0-9).
	NumberCharacterRequired *bool   `json:"number_character_required,omitempty"`
	ProductGrade            *string `json:"product_grade,omitempty"`

	// ProductGradeA Percentage score for an 'A' >=
	ProductGradeA *int `json:"product_grade_a,omitempty"`

	// ProductGradeB Percentage score for a 'B' >=
	ProductGradeB *int `json:"product_grade_b,omitempty"`

	// ProductGradeC Percentage score for a 'C' >=
	ProductGradeC *int `json:"product_grade_c,omitempty"`

	// ProductGradeD Percentage score for a 'D' >=
	ProductGradeD *int `json:"product_grade_d,omitempty"`

	// ProductGradeF Percentage score for an 'F' <=
	ProductGradeF *int `json:"product_grade_f,omitempty"`

	// RetroactiveFalsePositiveHistory (EXPERIMENTAL) FP History will also retroactively mark/unmark all existing equal findings in the same product as a false positives. Only works if the False Positive History feature is also enabled.
	RetroactiveFalsePositiveHistory *bool `json:"retroactive_false_positive_history,omitempty"`

	// RiskAcceptanceFormDefaultDays Default expiry period for risk acceptance form.
	RiskAcceptanceFormDefaultDays *int `json:"risk_acceptance_form_default_days"`

	// RiskAcceptanceNotifyBeforeExpiration Notify X days before risk acceptance expires. Leave empty to disable.
	RiskAcceptanceNotifyBeforeExpiration *int `json:"risk_acceptance_notify_before_expiration"`

	// SlackChannel Optional. Needed if you want to send global notifications.
	SlackChannel *string `json:"slack_channel,omitempty"`

	// SlackToken Token required for interacting with Slack. Get one at https://api.slack.com/tokens
	SlackToken *string `json:"slack_token,omitempty"`

	// SlackUsername Optional. Will take your bot name otherwise.
	SlackUsername *string `json:"slack_username,omitempty"`

	// SpecialCharacterRequired Requires user passwords to contain at least one special character (()[]{}|\`~!@#$%^&*_-+=;:'",<>./?).
	SpecialCharacterRequired *bool   `json:"special_character_required,omitempty"`
	TeamName                 *string `json:"team_name,omitempty"`

	// TimeZone * `Africa/Abidjan` - Africa/Abidjan
	// * `Africa/Accra` - Africa/Accra
	// * `Africa/Addis_Ababa` - Africa/Addis_Ababa
	// * `Africa/Algiers` - Africa/Algiers
	// * `Africa/Asmara` - Africa/Asmara
	// * `Africa/Asmera` - Africa/Asmera
	// * `Africa/Bamako` - Africa/Bamako
	// * `Africa/Bangui` - Africa/Bangui
	// * `Africa/Banjul` - Africa/Banjul
	// * `Africa/Bissau` - Africa/Bissau
	// * `Africa/Blantyre` - Africa/Blantyre
	// * `Africa/Brazzaville` - Africa/Brazzaville
	// * `Africa/Bujumbura` - Africa/Bujumbura
	// * `Africa/Cairo` - Africa/Cairo
	// * `Africa/Casablanca` - Africa/Casablanca
	// * `Africa/Ceuta` - Africa/Ceuta
	// * `Africa/Conakry` - Africa/Conakry
	// * `Africa/Dakar` - Africa/Dakar
	// * `Africa/Dar_es_Salaam` - Africa/Dar_es_Salaam
	// * `Africa/Djibouti` - Africa/Djibouti
	// * `Africa/Douala` - Africa/Douala
	// * `Africa/El_Aaiun` - Africa/El_Aaiun
	// * `Africa/Freetown` - Africa/Freetown
	// * `Africa/Gaborone` - Africa/Gaborone
	// * `Africa/Harare` - Africa/Harare
	// * `Africa/Johannesburg` - Africa/Johannesburg
	// * `Africa/Juba` - Africa/Juba
	// * `Africa/Kampala` - Africa/Kampala
	// * `Africa/Khartoum` - Africa/Khartoum
	// * `Africa/Kigali` - Africa/Kigali
	// * `Africa/Kinshasa` - Africa/Kinshasa
	// * `Africa/Lagos` - Africa/Lagos
	// * `Africa/Libreville` - Africa/Libreville
	// * `Africa/Lome` - Africa/Lome
	// * `Africa/Luanda` - Africa/Luanda
	// * `Africa/Lubumbashi` - Africa/Lubumbashi
	// * `Africa/Lusaka` - Africa/Lusaka
	// * `Africa/Malabo` - Africa/Malabo
	// * `Africa/Maputo` - Africa/Maputo
	// * `Africa/Maseru` - Africa/Maseru
	// * `Africa/Mbabane` - Africa/Mbabane
	// * `Africa/Mogadishu` - Africa/Mogadishu
	// * `Africa/Monrovia` - Africa/Monrovia
	// * `Africa/Nairobi` - Africa/Nairobi
	// * `Africa/Ndjamena` - Africa/Ndjamena
	// * `Africa/Niamey` - Africa/Niamey
	// * `Africa/Nouakchott` - Africa/Nouakchott
	// * `Africa/Ouagadougou` - Africa/Ouagadougou
	// * `Africa/Porto-Novo` - Africa/Porto-Novo
	// * `Africa/Sao_Tome` - Africa/Sao_Tome
	// * `Africa/Timbuktu` - Africa/Timbuktu
	// * `Africa/Tripoli` - Africa/Tripoli
	// * `Africa/Tunis` - Africa/Tunis
	// * `Africa/Windhoek` - Africa/Windhoek
	// * `America/Adak` - America/Adak
	// * `America/Anchorage` - America/Anchorage
	// * `America/Anguilla` - America/Anguilla
	// * `America/Antigua` - America/Antigua
	// * `America/Araguaina` - America/Araguaina
	// * `America/Argentina/Buenos_Aires` - America/Argentina/Buenos_Aires
	// * `America/Argentina/Catamarca` - America/Argentina/Catamarca
	// * `America/Argentina/ComodRivadavia` - America/Argentina/ComodRivadavia
	// * `America/Argentina/Cordoba` - America/Argentina/Cordoba
	// * `America/Argentina/Jujuy` - America/Argentina/Jujuy
	// * `America/Argentina/La_Rioja` - America/Argentina/La_Rioja
	// * `America/Argentina/Mendoza` - America/Argentina/Mendoza
	// * `America/Argentina/Rio_Gallegos` - America/Argentina/Rio_Gallegos
	// * `America/Argentina/Salta` - America/Argentina/Salta
	// * `America/Argentina/San_Juan` - America/Argentina/San_Juan
	// * `America/Argentina/San_Luis` - America/Argentina/San_Luis
	// * `America/Argentina/Tucuman` - America/Argentina/Tucuman
	// * `America/Argentina/Ushuaia` - America/Argentina/Ushuaia
	// * `America/Aruba` - America/Aruba
	// * `America/Asuncion` - America/Asuncion
	// * `America/Atikokan` - America/Atikokan
	// * `America/Atka` - America/Atka
	// * `America/Bahia` - America/Bahia
	// * `America/Bahia_Banderas` - America/Bahia_Banderas
	// * `America/Barbados` - America/Barbados
	// * `America/Belem` - America/Belem
	// * `America/Belize` - America/Belize
	// * `America/Blanc-Sablon` - America/Blanc-Sablon
	// * `America/Boa_Vista` - America/Boa_Vista
	// * `America/Bogota` - America/Bogota
	// * `America/Boise` - America/Boise
	// * `America/Buenos_Aires` - America/Buenos_Aires
	// * `America/Cambridge_Bay` - America/Cambridge_Bay
	// * `America/Campo_Grande` - America/Campo_Grande
	// * `America/Cancun` - America/Cancun
	// * `America/Caracas` - America/Caracas
	// * `America/Catamarca` - America/Catamarca
	// * `America/Cayenne` - America/Cayenne
	// * `America/Cayman` - America/Cayman
	// * `America/Chicago` - America/Chicago
	// * `America/Chihuahua` - America/Chihuahua
	// * `America/Ciudad_Juarez` - America/Ciudad_Juarez
	// * `America/Coral_Harbour` - America/Coral_Harbour
	// * `America/Cordoba` - America/Cordoba
	// * `America/Costa_Rica` - America/Costa_Rica
	// * `America/Creston` - America/Creston
	// * `America/Cuiaba` - America/Cuiaba
	// * `America/Curacao` - America/Curacao
	// * `America/Danmarkshavn` - America/Danmarkshavn
	// * `America/Dawson` - America/Dawson
	// * `America/Dawson_Creek` - America/Dawson_Creek
	// * `America/Denver` - America/Denver
	// * `America/Detroit` - America/Detroit
	// * `America/Dominica` - America/Dominica
	// * `America/Edmonton` - America/Edmonton
	// * `America/Eirunepe` - America/Eirunepe
	// * `America/El_Salvador` - America/El_Salvador
	// * `America/Ensenada` - America/Ensenada
	// * `America/Fort_Nelson` - America/Fort_Nelson
	// * `America/Fort_Wayne` - America/Fort_Wayne
	// * `America/Fortaleza` - America/Fortaleza
	// * `America/Glace_Bay` - America/Glace_Bay
	// * `America/Godthab` - America/Godthab
	// * `America/Goose_Bay` - America/Goose_Bay
	// * `America/Grand_Turk` - America/Grand_Turk
	// * `America/Grenada` - America/Grenada
	// * `America/Guadeloupe` - America/Guadeloupe
	// * `America/Guatemala` - America/Guatemala
	// * `America/Guayaquil` - America/Guayaquil
	// * `America/Guyana` - America/Guyana
	// * `America/Halifax` - America/Halifax
	// * `America/Havana` - America/Havana
	// * `America/Hermosillo` - America/Hermosillo
	// * `America/Indiana/Indianapolis` - America/Indiana/Indianapolis
	// * `America/Indiana/Knox` - America/Indiana/Knox
	// * `America/Indiana/Marengo` - America/Indiana/Marengo
	// * `America/Indiana/Petersburg` - America/Indiana/Petersburg
	// * `America/Indiana/Tell_City` - America/Indiana/Tell_City
	// * `America/Indiana/Vevay` - America/Indiana/Vevay
	// * `America/Indiana/Vincennes` - America/Indiana/Vincennes
	// * `America/Indiana/Winamac` - America/Indiana/Winamac
	// * `America/Indianapolis` - America/Indianapolis
	// * `America/Inuvik` - America/Inuvik
	// * `America/Iqaluit` - America/Iqaluit
	// * `America/Jamaica` - America/Jamaica
	// * `America/Jujuy` - America/Jujuy
	// * `America/Juneau` - America/Juneau
	// * `America/Kentucky/Louisville` - America/Kentucky/Louisville
	// * `America/Kentucky/Monticello` - America/Kentucky/Monticello
	// * `America/Knox_IN` - America/Knox_IN
	// * `America/Kralendijk` - America/Kralendijk
	// * `America/La_Paz` - America/La_Paz
	// * `America/Lima` - America/Lima
	// * `America/Los_Angeles` - America/Los_Angeles
	// * `America/Louisville` - America/Louisville
	// * `America/Lower_Princes` - America/Lower_Princes
	// * `America/Maceio` - America/Maceio
	// * `America/Managua` - America/Managua
	// * `America/Manaus` - America/Manaus
	// * `America/Marigot` - America/Marigot
	// * `America/Martinique` - America/Martinique
	// * `America/Matamoros` - America/Matamoros
	// * `America/Mazatlan` - America/Mazatlan
	// * `America/Mendoza` - America/Mendoza
	// * `America/Menominee` - America/Menominee
	// * `America/Merida` - America/Merida
	// * `America/Metlakatla` - America/Metlakatla
	// * `America/Mexico_City` - America/Mexico_City
	// * `America/Miquelon` - America/Miquelon
	// * `America/Moncton` - America/Moncton
	// * `America/Monterrey` - America/Monterrey
	// * `America/Montevideo` - America/Montevideo
	// * `America/Montreal` - America/Montreal
	// * `America/Montserrat` - America/Montserrat
	// * `America/Nassau` - America/Nassau
	// * `America/New_York` - America/New_York
	// * `America/Nipigon` - America/Nipigon
	// * `America/Nome` - America/Nome
	// * `America/Noronha` - America/Noronha
	// * `America/North_Dakota/Beulah` - America/North_Dakota/Beulah
	// * `America/North_Dakota/Center` - America/North_Dakota/Center
	// * `America/North_Dakota/New_Salem` - America/North_Dakota/New_Salem
	// * `America/Nuuk` - America/Nuuk
	// * `America/Ojinaga` - America/Ojinaga
	// * `America/Panama` - America/Panama
	// * `America/Pangnirtung` - America/Pangnirtung
	// * `America/Paramaribo` - America/Paramaribo
	// * `America/Phoenix` - America/Phoenix
	// * `America/Port-au-Prince` - America/Port-au-Prince
	// * `America/Port_of_Spain` - America/Port_of_Spain
	// * `America/Porto_Acre` - America/Porto_Acre
	// * `America/Porto_Velho` - America/Porto_Velho
	// * `America/Puerto_Rico` - America/Puerto_Rico
	// * `America/Punta_Arenas` - America/Punta_Arenas
	// * `America/Rainy_River` - America/Rainy_River
	// * `America/Rankin_Inlet` - America/Rankin_Inlet
	// * `America/Recife` - America/Recife
	// * `America/Regina` - America/Regina
	// * `America/Resolute` - America/Resolute
	// * `America/Rio_Branco` - America/Rio_Branco
	// * `America/Rosario` - America/Rosario
	// * `America/Santa_Isabel` - America/Santa_Isabel
	// * `America/Santarem` - America/Santarem
	// * `America/Santiago` - America/Santiago
	// * `America/Santo_Domingo` - America/Santo_Domingo
	// * `America/Sao_Paulo` - America/Sao_Paulo
	// * `America/Scoresbysund` - America/Scoresbysund
	// * `America/Shiprock` - America/Shiprock
	// * `America/Sitka` - America/Sitka
	// * `America/St_Barthelemy` - America/St_Barthelemy
	// * `America/St_Johns` - America/St_Johns
	// * `America/St_Kitts` - America/St_Kitts
	// * `America/St_Lucia` - America/St_Lucia
	// * `America/St_Thomas` - America/St_Thomas
	// * `America/St_Vincent` - America/St_Vincent
	// * `America/Swift_Current` - America/Swift_Current
	// * `America/Tegucigalpa` - America/Tegucigalpa
	// * `America/Thule` - America/Thule
	// * `America/Thunder_Bay` - America/Thunder_Bay
	// * `America/Tijuana` - America/Tijuana
	// * `America/Toronto` - America/Toronto
	// * `America/Tortola` - America/Tortola
	// * `America/Vancouver` - America/Vancouver
	// * `America/Virgin` - America/Virgin
	// * `America/Whitehorse` - America/Whitehorse
	// * `America/Winnipeg` - America/Winnipeg
	// * `America/Yakutat` - America/Yakutat
	// * `America/Yellowknife` - America/Yellowknife
	// * `Antarctica/Casey` - Antarctica/Casey
	// * `Antarctica/Davis` - Antarctica/Davis
	// * `Antarctica/DumontDUrville` - Antarctica/DumontDUrville
	// * `Antarctica/Macquarie` - Antarctica/Macquarie
	// * `Antarctica/Mawson` - Antarctica/Mawson
	// * `Antarctica/McMurdo` - Antarctica/McMurdo
	// * `Antarctica/Palmer` - Antarctica/Palmer
	// * `Antarctica/Rothera` - Antarctica/Rothera
	// * `Antarctica/South_Pole` - Antarctica/South_Pole
	// * `Antarctica/Syowa` - Antarctica/Syowa
	// * `Antarctica/Troll` - Antarctica/Troll
	// * `Antarctica/Vostok` - Antarctica/Vostok
	// * `Arctic/Longyearbyen` - Arctic/Longyearbyen
	// * `Asia/Aden` - Asia/Aden
	// * `Asia/Almaty` - Asia/Almaty
	// * `Asia/Amman` - Asia/Amman
	// * `Asia/Anadyr` - Asia/Anadyr
	// * `Asia/Aqtau` - Asia/Aqtau
	// * `Asia/Aqtobe` - Asia/Aqtobe
	// * `Asia/Ashgabat` - Asia/Ashgabat
	// * `Asia/Ashkhabad` - Asia/Ashkhabad
	// * `Asia/Atyrau` - Asia/Atyrau
	// * `Asia/Baghdad` - Asia/Baghdad
	// * `Asia/Bahrain` - Asia/Bahrain
	// * `Asia/Baku` - Asia/Baku
	// * `Asia/Bangkok` - Asia/Bangkok
	// * `Asia/Barnaul` - Asia/Barnaul
	// * `Asia/Beirut` - Asia/Beirut
	// * `Asia/Bishkek` - Asia/Bishkek
	// * `Asia/Brunei` - Asia/Brunei
	// * `Asia/Calcutta` - Asia/Calcutta
	// * `Asia/Chita` - Asia/Chita
	// * `Asia/Choibalsan` - Asia/Choibalsan
	// * `Asia/Chongqing` - Asia/Chongqing
	// * `Asia/Chungking` - Asia/Chungking
	// * `Asia/Colombo` - Asia/Colombo
	// * `Asia/Dacca` - Asia/Dacca
	// * `Asia/Damascus` - Asia/Damascus
	// * `Asia/Dhaka` - Asia/Dhaka
	// * `Asia/Dili` - Asia/Dili
	// * `Asia/Dubai` - Asia/Dubai
	// * `Asia/Dushanbe` - Asia/Dushanbe
	// * `Asia/Famagusta` - Asia/Famagusta
	// * `Asia/Gaza` - Asia/Gaza
	// * `Asia/Harbin` - Asia/Harbin
	// * `Asia/Hebron` - Asia/Hebron
	// * `Asia/Ho_Chi_Minh` - Asia/Ho_Chi_Minh
	// * `Asia/Hong_Kong` - Asia/Hong_Kong
	// * `Asia/Hovd` - Asia/Hovd
	// * `Asia/Irkutsk` - Asia/Irkutsk
	// * `Asia/Istanbul` - Asia/Istanbul
	// * `Asia/Jakarta` - Asia/Jakarta
	// * `Asia/Jayapura` - Asia/Jayapura
	// * `Asia/Jerusalem` - Asia/Jerusalem
	// * `Asia/Kabul` - Asia/Kabul
	// * `Asia/Kamchatka` - Asia/Kamchatka
	// * `Asia/Karachi` - Asia/Karachi
	// * `Asia/Kashgar` - Asia/Kashgar
	// * `Asia/Kathmandu` - Asia/Kathmandu
	// * `Asia/Katmandu` - Asia/Katmandu
	// * `Asia/Khandyga` - Asia/Khandyga
	// * `Asia/Kolkata` - Asia/Kolkata
	// * `Asia/Krasnoyarsk` - Asia/Krasnoyarsk
	// * `Asia/Kuala_Lumpur` - Asia/Kuala_Lumpur
	// * `Asia/Kuching` - Asia/Kuching
	// * `Asia/Kuwait` - Asia/Kuwait
	// * `Asia/Macao` - Asia/Macao
	// * `Asia/Macau` - Asia/Macau
	// * `Asia/Magadan` - Asia/Magadan
	// * `Asia/Makassar` - Asia/Makassar
	// * `Asia/Manila` - Asia/Manila
	// * `Asia/Muscat` - Asia/Muscat
	// * `Asia/Nicosia` - Asia/Nicosia
	// * `Asia/Novokuznetsk` - Asia/Novokuznetsk
	// * `Asia/Novosibirsk` - Asia/Novosibirsk
	// * `Asia/Omsk` - Asia/Omsk
	// * `Asia/Oral` - Asia/Oral
	// * `Asia/Phnom_Penh` - Asia/Phnom_Penh
	// * `Asia/Pontianak` - Asia/Pontianak
	// * `Asia/Pyongyang` - Asia/Pyongyang
	// * `Asia/Qatar` - Asia/Qatar
	// * `Asia/Qostanay` - Asia/Qostanay
	// * `Asia/Qyzylorda` - Asia/Qyzylorda
	// * `Asia/Rangoon` - Asia/Rangoon
	// * `Asia/Riyadh` - Asia/Riyadh
	// * `Asia/Saigon` - Asia/Saigon
	// * `Asia/Sakhalin` - Asia/Sakhalin
	// * `Asia/Samarkand` - Asia/Samarkand
	// * `Asia/Seoul` - Asia/Seoul
	// * `Asia/Shanghai` - Asia/Shanghai
	// * `Asia/Singapore` - Asia/Singapore
	// * `Asia/Srednekolymsk` - Asia/Srednekolymsk
	// * `Asia/Taipei` - Asia/Taipei
	// * `Asia/Tashkent` - Asia/Tashkent
	// * `Asia/Tbilisi` - Asia/Tbilisi
	// * `Asia/Tehran` - Asia/Tehran
	// * `Asia/Tel_Aviv` - Asia/Tel_Aviv
	// * `Asia/Thimbu` - Asia/Thimbu
	// * `Asia/Thimphu` - Asia/Thimphu
	// * `Asia/Tokyo` - Asia/Tokyo
	// * `Asia/Tomsk` - Asia/Tomsk
	// * `Asia/Ujung_Pandang` - Asia/Ujung_Pandang
	// * `Asia/Ulaanbaatar` - Asia/Ulaanbaatar
	// * `Asia/Ulan_Bator` - Asia/Ulan_Bator
	// * `Asia/Urumqi` - Asia/Urumqi
	// * `Asia/Ust-Nera` - Asia/Ust-Nera
	// * `Asia/Vientiane` - Asia/Vientiane
	// * `Asia/Vladivostok` - Asia/Vladivostok
	// * `Asia/Yakutsk` - Asia/Yakutsk
	// * `Asia/Yangon` - Asia/Yangon
	// * `Asia/Yekaterinburg` - Asia/Yekaterinburg
	// * `Asia/Yerevan` - Asia/Yerevan
	// * `Atlantic/Azores` - Atlantic/Azores
	// * `Atlantic/Bermuda` - Atlantic/Bermuda
	// * `Atlantic/Canary` - Atlantic/Canary
	// * `Atlantic/Cape_Verde` - Atlantic/Cape_Verde
	// * `Atlantic/Faeroe` - Atlantic/Faeroe
	// * `Atlantic/Faroe` - Atlantic/Faroe
	// * `Atlantic/Jan_Mayen` - Atlantic/Jan_Mayen
	// * `Atlantic/Madeira` - Atlantic/Madeira
	// * `Atlantic/Reykjavik` - Atlantic/Reykjavik
	// * `Atlantic/South_Georgia` - Atlantic/South_Georgia
	// * `Atlantic/St_Helena` - Atlantic/St_Helena
	// * `Atlantic/Stanley` - Atlantic/Stanley
	// * `Australia/ACT` - Australia/ACT
	// * `Australia/Adelaide` - Australia/Adelaide
	// * `Australia/Brisbane` - Australia/Brisbane
	// * `Australia/Broken_Hill` - Australia/Broken_Hill
	// * `Australia/Canberra` - Australia/Canberra
	// * `Australia/Currie` - Australia/Currie
	// * `Australia/Darwin` - Australia/Darwin
	// * `Australia/Eucla` - Australia/Eucla
	// * `Australia/Hobart` - Australia/Hobart
	// * `Australia/LHI` - Australia/LHI
	// * `Australia/Lindeman` - Australia/Lindeman
	// * `Australia/Lord_Howe` - Australia/Lord_Howe
	// * `Australia/Melbourne` - Australia/Melbourne
	// * `Australia/NSW` - Australia/NSW
	// * `Australia/North` - Australia/North
	// * `Australia/Perth` - Australia/Perth
	// * `Australia/Queensland` - Australia/Queensland
	// * `Australia/South` - Australia/South
	// * `Australia/Sydney` - Australia/Sydney
	// * `Australia/Tasmania` - Australia/Tasmania
	// * `Australia/Victoria` - Australia/Victoria
	// * `Australia/West` - Australia/West
	// * `Australia/Yancowinna` - Australia/Yancowinna
	// * `Brazil/Acre` - Brazil/Acre
	// * `Brazil/DeNoronha` - Brazil/DeNoronha
	// * `Brazil/East` - Brazil/East
	// * `Brazil/West` - Brazil/West
	// * `CET` - CET
	// * `CST6CDT` - CST6CDT
	// * `Canada/Atlantic` - Canada/Atlantic
	// * `Canada/Central` - Canada/Central
	// * `Canada/Eastern` - Canada/Eastern
	// * `Canada/Mountain` - Canada/Mountain
	// * `Canada/Newfoundland` - Canada/Newfoundland
	// * `Canada/Pacific` - Canada/Pacific
	// * `Canada/Saskatchewan` - Canada/Saskatchewan
	// * `Canada/Yukon` - Canada/Yukon
	// * `Chile/Continental` - Chile/Continental
	// * `Chile/EasterIsland` - Chile/EasterIsland
	// * `Cuba` - Cuba
	// * `EET` - EET
	// * `EST` - EST
	// * `EST5EDT` - EST5EDT
	// * `Egypt` - Egypt
	// * `Eire` - Eire
	// * `Etc/GMT` - Etc/GMT
	// * `Etc/GMT+0` - Etc/GMT+0
	// * `Etc/GMT+1` - Etc/GMT+1
	// * `Etc/GMT+10` - Etc/GMT+10
	// * `Etc/GMT+11` - Etc/GMT+11
	// * `Etc/GMT+12` - Etc/GMT+12
	// * `Etc/GMT+2` - Etc/GMT+2
	// * `Etc/GMT+3` - Etc/GMT+3
	// * `Etc/GMT+4` - Etc/GMT+4
	// * `Etc/GMT+5` - Etc/GMT+5
	// * `Etc/GMT+6` - Etc/GMT+6
	// * `Etc/GMT+7` - Etc/GMT+7
	// * `Etc/GMT+8` - Etc/GMT+8
	// * `Etc/GMT+9` - Etc/GMT+9
	// * `Etc/GMT-0` - Etc/GMT-0
	// * `Etc/GMT-1` - Etc/GMT-1
	// * `Etc/GMT-10` - Etc/GMT-10
	// * `Etc/GMT-11` - Etc/GMT-11
	// * `Etc/GMT-12` - Etc/GMT-12
	// * `Etc/GMT-13` - Etc/GMT-13
	// * `Etc/GMT-14` - Etc/GMT-14
	// * `Etc/GMT-2` - Etc/GMT-2
	// * `Etc/GMT-3` - Etc/GMT-3
	// * `Etc/GMT-4` - Etc/GMT-4
	// * `Etc/GMT-5` - Etc/GMT-5
	// * `Etc/GMT-6` - Etc/GMT-6
	// * `Etc/GMT-7` - Etc/GMT-7
	// * `Etc/GMT-8` - Etc/GMT-8
	// * `Etc/GMT-9` - Etc/GMT-9
	// * `Etc/GMT0` - Etc/GMT0
	// * `Etc/Greenwich` - Etc/Greenwich
	// * `Etc/UCT` - Etc/UCT
	// * `Etc/UTC` - Etc/UTC
	// * `Etc/Universal` - Etc/Universal
	// * `Etc/Zulu` - Etc/Zulu
	// * `Europe/Amsterdam` - Europe/Amsterdam
	// * `Europe/Andorra` - Europe/Andorra
	// * `Europe/Astrakhan` - Europe/Astrakhan
	// * `Europe/Athens` - Europe/Athens
	// * `Europe/Belfast` - Europe/Belfast
	// * `Europe/Belgrade` - Europe/Belgrade
	// * `Europe/Berlin` - Europe/Berlin
	// * `Europe/Bratislava` - Europe/Bratislava
	// * `Europe/Brussels` - Europe/Brussels
	// * `Europe/Bucharest` - Europe/Bucharest
	// * `Europe/Budapest` - Europe/Budapest
	// * `Europe/Busingen` - Europe/Busingen
	// * `Europe/Chisinau` - Europe/Chisinau
	// * `Europe/Copenhagen` - Europe/Copenhagen
	// * `Europe/Dublin` - Europe/Dublin
	// * `Europe/Gibraltar` - Europe/Gibraltar
	// * `Europe/Guernsey` - Europe/Guernsey
	// * `Europe/Helsinki` - Europe/Helsinki
	// * `Europe/Isle_of_Man` - Europe/Isle_of_Man
	// * `Europe/Istanbul` - Europe/Istanbul
	// * `Europe/Jersey` - Europe/Jersey
	// * `Europe/Kaliningrad` - Europe/Kaliningrad
	// * `Europe/Kiev` - Europe/Kiev
	// * `Europe/Kirov` - Europe/Kirov
	// * `Europe/Kyiv` - Europe/Kyiv
	// * `Europe/Lisbon` - Europe/Lisbon
	// * `Europe/Ljubljana` - Europe/Ljubljana
	// * `Europe/London` - Europe/London
	// * `Europe/Luxembourg` - Europe/Luxembourg
	// * `Europe/Madrid` - Europe/Madrid
	// * `Europe/Malta` - Europe/Malta
	// * `Europe/Mariehamn` - Europe/Mariehamn
	// * `Europe/Minsk` - Europe/Minsk
	// * `Europe/Monaco` - Europe/Monaco
	// * `Europe/Moscow` - Europe/Moscow
	// * `Europe/Nicosia` - Europe/Nicosia
	// * `Europe/Oslo` - Europe/Oslo
	// * `Europe/Paris` - Europe/Paris
	// * `Europe/Podgorica` - Europe/Podgorica
	// * `Europe/Prague` - Europe/Prague
	// * `Europe/Riga` - Europe/Riga
	// * `Europe/Rome` - Europe/Rome
	// * `Europe/Samara` - Europe/Samara
	// * `Europe/San_Marino` - Europe/San_Marino
	// * `Europe/Sarajevo` - Europe/Sarajevo
	// * `Europe/Saratov` - Europe/Saratov
	// * `Europe/Simferopol` - Europe/Simferopol
	// * `Europe/Skopje` - Europe/Skopje
	// * `Europe/Sofia` - Europe/Sofia
	// * `Europe/Stockholm` - Europe/Stockholm
	// * `Europe/Tallinn` - Europe/Tallinn
	// * `Europe/Tirane` - Europe/Tirane
	// * `Europe/Tiraspol` - Europe/Tiraspol
	// * `Europe/Ulyanovsk` - Europe/Ulyanovsk
	// * `Europe/Uzhgorod` - Europe/Uzhgorod
	// * `Europe/Vaduz` - Europe/Vaduz
	// * `Europe/Vatican` - Europe/Vatican
	// * `Europe/Vienna` - Europe/Vienna
	// * `Europe/Vilnius` - Europe/Vilnius
	// * `Europe/Volgograd` - Europe/Volgograd
	// * `Europe/Warsaw` - Europe/Warsaw
	// * `Europe/Zagreb` - Europe/Zagreb
	// * `Europe/Zaporozhye` - Europe/Zaporozhye
	// * `Europe/Zurich` - Europe/Zurich
	// * `GB` - GB
	// * `GB-Eire` - GB-Eire
	// * `GMT` - GMT
	// * `GMT+0` - GMT+0
	// * `GMT-0` - GMT-0
	// * `GMT0` - GMT0
	// * `Greenwich` - Greenwich
	// * `HST` - HST
	// * `Hongkong` - Hongkong
	// * `Iceland` - Iceland
	// * `Indian/Antananarivo` - Indian/Antananarivo
	// * `Indian/Chagos` - Indian/Chagos
	// * `Indian/Christmas` - Indian/Christmas
	// * `Indian/Cocos` - Indian/Cocos
	// * `Indian/Comoro` - Indian/Comoro
	// * `Indian/Kerguelen` - Indian/Kerguelen
	// * `Indian/Mahe` - Indian/Mahe
	// * `Indian/Maldives` - Indian/Maldives
	// * `Indian/Mauritius` - Indian/Mauritius
	// * `Indian/Mayotte` - Indian/Mayotte
	// * `Indian/Reunion` - Indian/Reunion
	// * `Iran` - Iran
	// * `Israel` - Israel
	// * `Jamaica` - Jamaica
	// * `Japan` - Japan
	// * `Kwajalein` - Kwajalein
	// * `Libya` - Libya
	// * `MET` - MET
	// * `MST` - MST
	// * `MST7MDT` - MST7MDT
	// * `Mexico/BajaNorte` - Mexico/BajaNorte
	// * `Mexico/BajaSur` - Mexico/BajaSur
	// * `Mexico/General` - Mexico/General
	// * `NZ` - NZ
	// * `NZ-CHAT` - NZ-CHAT
	// * `Navajo` - Navajo
	// * `PRC` - PRC
	// * `PST8PDT` - PST8PDT
	// * `Pacific/Apia` - Pacific/Apia
	// * `Pacific/Auckland` - Pacific/Auckland
	// * `Pacific/Bougainville` - Pacific/Bougainville
	// * `Pacific/Chatham` - Pacific/Chatham
	// * `Pacific/Chuuk` - Pacific/Chuuk
	// * `Pacific/Easter` - Pacific/Easter
	// * `Pacific/Efate` - Pacific/Efate
	// * `Pacific/Enderbury` - Pacific/Enderbury
	// * `Pacific/Fakaofo` - Pacific/Fakaofo
	// * `Pacific/Fiji` - Pacific/Fiji
	// * `Pacific/Funafuti` - Pacific/Funafuti
	// * `Pacific/Galapagos` - Pacific/Galapagos
	// * `Pacific/Gambier` - Pacific/Gambier
	// * `Pacific/Guadalcanal` - Pacific/Guadalcanal
	// * `Pacific/Guam` - Pacific/Guam
	// * `Pacific/Honolulu` - Pacific/Honolulu
	// * `Pacific/Johnston` - Pacific/Johnston
	// * `Pacific/Kanton` - Pacific/Kanton
	// * `Pacific/Kiritimati` - Pacific/Kiritimati
	// * `Pacific/Kosrae` - Pacific/Kosrae
	// * `Pacific/Kwajalein` - Pacific/Kwajalein
	// * `Pacific/Majuro` - Pacific/Majuro
	// * `Pacific/Marquesas` - Pacific/Marquesas
	// * `Pacific/Midway` - Pacific/Midway
	// * `Pacific/Nauru` - Pacific/Nauru
	// * `Pacific/Niue` - Pacific/Niue
	// * `Pacific/Norfolk` - Pacific/Norfolk
	// * `Pacific/Noumea` - Pacific/Noumea
	// * `Pacific/Pago_Pago` - Pacific/Pago_Pago
	// * `Pacific/Palau` - Pacific/Palau
	// * `Pacific/Pitcairn` - Pacific/Pitcairn
	// * `Pacific/Pohnpei` - Pacific/Pohnpei
	// * `Pacific/Ponape` - Pacific/Ponape
	// * `Pacific/Port_Moresby` - Pacific/Port_Moresby
	// * `Pacific/Rarotonga` - Pacific/Rarotonga
	// * `Pacific/Saipan` - Pacific/Saipan
	// * `Pacific/Samoa` - Pacific/Samoa
	// * `Pacific/Tahiti` - Pacific/Tahiti
	// * `Pacific/Tarawa` - Pacific/Tarawa
	// * `Pacific/Tongatapu` - Pacific/Tongatapu
	// * `Pacific/Truk` - Pacific/Truk
	// * `Pacific/Wake` - Pacific/Wake
	// * `Pacific/Wallis` - Pacific/Wallis
	// * `Pacific/Yap` - Pacific/Yap
	// * `Poland` - Poland
	// * `Portugal` - Portugal
	// * `ROC` - ROC
	// * `ROK` - ROK
	// * `Singapore` - Singapore
	// * `Turkey` - Turkey
	// * `UCT` - UCT
	// * `US/Alaska` - US/Alaska
	// * `US/Aleutian` - US/Aleutian
	// * `US/Arizona` - US/Arizona
	// * `US/Central` - US/Central
	// * `US/East-Indiana` - US/East-Indiana
	// * `US/Eastern` - US/Eastern
	// * `US/Hawaii` - US/Hawaii
	// * `US/Indiana-Starke` - US/Indiana-Starke
	// * `US/Michigan` - US/Michigan
	// * `US/Mountain` - US/Mountain
	// * `US/Pacific` - US/Pacific
	// * `US/Samoa` - US/Samoa
	// * `UTC` - UTC
	// * `Universal` - Universal
	// * `W-SU` - W-SU
	// * `WET` - WET
	// * `Zulu` - Zulu
	TimeZone *SystemSettingsRequestTimeZone `json:"time_zone,omitempty"`

	// UppercaseCharacterRequired Requires user passwords to contain at least one uppercase letter (A-Z).
	UppercaseCharacterRequired *bool `json:"uppercase_character_required,omitempty"`

	// UrlPrefix URL prefix if DefectDojo is installed in it's own virtual subdirectory.
	UrlPrefix *string `json:"url_prefix,omitempty"`
}

// SystemSettingsRequestJiraMinimumSeverity * `Critical` - Critical
// * `High` - High
// * `Medium` - Medium
// * `Low` - Low
// * `Info` - Info
type SystemSettingsRequestJiraMinimumSeverity string

// SystemSettingsRequestTimeZone * `Africa/Abidjan` - Africa/Abidjan
// * `Africa/Accra` - Africa/Accra
// * `Africa/Addis_Ababa` - Africa/Addis_Ababa
// * `Africa/Algiers` - Africa/Algiers
// * `Africa/Asmara` - Africa/Asmara
// * `Africa/Asmera` - Africa/Asmera
// * `Africa/Bamako` - Africa/Bamako
// * `Africa/Bangui` - Africa/Bangui
// * `Africa/Banjul` - Africa/Banjul
// * `Africa/Bissau` - Africa/Bissau
// * `Africa/Blantyre` - Africa/Blantyre
// * `Africa/Brazzaville` - Africa/Brazzaville
// * `Africa/Bujumbura` - Africa/Bujumbura
// * `Africa/Cairo` - Africa/Cairo
// * `Africa/Casablanca` - Africa/Casablanca
// * `Africa/Ceuta` - Africa/Ceuta
// * `Africa/Conakry` - Africa/Conakry
// * `Africa/Dakar` - Africa/Dakar
// * `Africa/Dar_es_Salaam` - Africa/Dar_es_Salaam
// * `Africa/Djibouti` - Africa/Djibouti
// * `Africa/Douala` - Africa/Douala
// * `Africa/El_Aaiun` - Africa/El_Aaiun
// * `Africa/Freetown` - Africa/Freetown
// * `Africa/Gaborone` - Africa/Gaborone
// * `Africa/Harare` - Africa/Harare
// * `Africa/Johannesburg` - Africa/Johannesburg
// * `Africa/Juba` - Africa/Juba
// * `Africa/Kampala` - Africa/Kampala
// * `Africa/Khartoum` - Africa/Khartoum
// * `Africa/Kigali` - Africa/Kigali
// * `Africa/Kinshasa` - Africa/Kinshasa
// * `Africa/Lagos` - Africa/Lagos
// * `Africa/Libreville` - Africa/Libreville
// * `Africa/Lome` - Africa/Lome
// * `Africa/Luanda` - Africa/Luanda
// * `Africa/Lubumbashi` - Africa/Lubumbashi
// * `Africa/Lusaka` - Africa/Lusaka
// * `Africa/Malabo` - Africa/Malabo
// * `Africa/Maputo` - Africa/Maputo
// * `Africa/Maseru` - Africa/Maseru
// * `Africa/Mbabane` - Africa/Mbabane
// * `Africa/Mogadishu` - Africa/Mogadishu
// * `Africa/Monrovia` - Africa/Monrovia
// * `Africa/Nairobi` - Africa/Nairobi
// * `Africa/Ndjamena` - Africa/Ndjamena
// * `Africa/Niamey` - Africa/Niamey
// * `Africa/Nouakchott` - Africa/Nouakchott
// * `Africa/Ouagadougou` - Africa/Ouagadougou
// * `Africa/Porto-Novo` - Africa/Porto-Novo
// * `Africa/Sao_Tome` - Africa/Sao_Tome
// * `Africa/Timbuktu` - Africa/Timbuktu
// * `Africa/Tripoli` - Africa/Tripoli
// * `Africa/Tunis` - Africa/Tunis
// * `Africa/Windhoek` - Africa/Windhoek
// * `America/Adak` - America/Adak
// * `America/Anchorage` - America/Anchorage
// * `America/Anguilla` - America/Anguilla
// * `America/Antigua` - America/Antigua
// * `America/Araguaina` - America/Araguaina
// * `America/Argentina/Buenos_Aires` - America/Argentina/Buenos_Aires
// * `America/Argentina/Catamarca` - America/Argentina/Catamarca
// * `America/Argentina/ComodRivadavia` - America/Argentina/ComodRivadavia
// * `America/Argentina/Cordoba` - America/Argentina/Cordoba
// * `America/Argentina/Jujuy` - America/Argentina/Jujuy
// * `America/Argentina/La_Rioja` - America/Argentina/La_Rioja
// * `America/Argentina/Mendoza` - America/Argentina/Mendoza
// * `America/Argentina/Rio_Gallegos` - America/Argentina/Rio_Gallegos
// * `America/Argentina/Salta` - America/Argentina/Salta
// * `America/Argentina/San_Juan` - America/Argentina/San_Juan
// * `America/Argentina/San_Luis` - America/Argentina/San_Luis
// * `America/Argentina/Tucuman` - America/Argentina/Tucuman
// * `America/Argentina/Ushuaia` - America/Argentina/Ushuaia
// * `America/Aruba` - America/Aruba
// * `America/Asuncion` - America/Asuncion
// * `America/Atikokan` - America/Atikokan
// * `America/Atka` - America/Atka
// * `America/Bahia` - America/Bahia
// * `America/Bahia_Banderas` - America/Bahia_Banderas
// * `America/Barbados` - America/Barbados
// * `America/Belem` - America/Belem
// * `America/Belize` - America/Belize
// * `America/Blanc-Sablon` - America/Blanc-Sablon
// * `America/Boa_Vista` - America/Boa_Vista
// * `America/Bogota` - America/Bogota
// * `America/Boise` - America/Boise
// * `America/Buenos_Aires` - America/Buenos_Aires
// * `America/Cambridge_Bay` - America/Cambridge_Bay
// * `America/Campo_Grande` - America/Campo_Grande
// * `America/Cancun` - America/Cancun
// * `America/Caracas` - America/Caracas
// * `America/Catamarca` - America/Catamarca
// * `America/Cayenne` - America/Cayenne
// * `America/Cayman` - America/Cayman
// * `America/Chicago` - America/Chicago
// * `America/Chihuahua` - America/Chihuahua
// * `America/Ciudad_Juarez` - America/Ciudad_Juarez
// * `America/Coral_Harbour` - America/Coral_Harbour
// * `America/Cordoba` - America/Cordoba
// * `America/Costa_Rica` - America/Costa_Rica
// * `America/Creston` - America/Creston
// * `America/Cuiaba` - America/Cuiaba
// * `America/Curacao` - America/Curacao
// * `America/Danmarkshavn` - America/Danmarkshavn
// * `America/Dawson` - America/Dawson
// * `America/Dawson_Creek` - America/Dawson_Creek
// * `America/Denver` - America/Denver
// * `America/Detroit` - America/Detroit
// * `America/Dominica` - America/Dominica
// * `America/Edmonton` - America/Edmonton
// * `America/Eirunepe` - America/Eirunepe
// * `America/El_Salvador` - America/El_Salvador
// * `America/Ensenada` - America/Ensenada
// * `America/Fort_Nelson` - America/Fort_Nelson
// * `America/Fort_Wayne` - America/Fort_Wayne
// * `America/Fortaleza` - America/Fortaleza
// * `America/Glace_Bay` - America/Glace_Bay
// * `America/Godthab` - America/Godthab
// * `America/Goose_Bay` - America/Goose_Bay
// * `America/Grand_Turk` - America/Grand_Turk
// * `America/Grenada` - America/Grenada
// * `America/Guadeloupe` - America/Guadeloupe
// * `America/Guatemala` - America/Guatemala
// * `America/Guayaquil` - America/Guayaquil
// * `America/Guyana` - America/Guyana
// * `America/Halifax` - America/Halifax
// * `America/Havana` - America/Havana
// * `America/Hermosillo` - America/Hermosillo
// * `America/Indiana/Indianapolis` - America/Indiana/Indianapolis
// * `America/Indiana/Knox` - America/Indiana/Knox
// * `America/Indiana/Marengo` - America/Indiana/Marengo
// * `America/Indiana/Petersburg` - America/Indiana/Petersburg
// * `America/Indiana/Tell_City` - America/Indiana/Tell_City
// * `America/Indiana/Vevay` - America/Indiana/Vevay
// * `America/Indiana/Vincennes` - America/Indiana/Vincennes
// * `America/Indiana/Winamac` - America/Indiana/Winamac
// * `America/Indianapolis` - America/Indianapolis
// * `America/Inuvik` - America/Inuvik
// * `America/Iqaluit` - America/Iqaluit
// * `America/Jamaica` - America/Jamaica
// * `America/Jujuy` - America/Jujuy
// * `America/Juneau` - America/Juneau
// * `America/Kentucky/Louisville` - America/Kentucky/Louisville
// * `America/Kentucky/Monticello` - America/Kentucky/Monticello
// * `America/Knox_IN` - America/Knox_IN
// * `America/Kralendijk` - America/Kralendijk
// * `America/La_Paz` - America/La_Paz
// * `America/Lima` - America/Lima
// * `America/Los_Angeles` - America/Los_Angeles
// * `America/Louisville` - America/Louisville
// * `America/Lower_Princes` - America/Lower_Princes
// * `America/Maceio` - America/Maceio
// * `America/Managua` - America/Managua
// * `America/Manaus` - America/Manaus
// * `America/Marigot` - America/Marigot
// * `America/Martinique` - America/Martinique
// * `America/Matamoros` - America/Matamoros
// * `America/Mazatlan` - America/Mazatlan
// * `America/Mendoza` - America/Mendoza
// * `America/Menominee` - America/Menominee
// * `America/Merida` - America/Merida
// * `America/Metlakatla` - America/Metlakatla
// * `America/Mexico_City` - America/Mexico_City
// * `America/Miquelon` - America/Miquelon
// * `America/Moncton` - America/Moncton
// * `America/Monterrey` - America/Monterrey
// * `America/Montevideo` - America/Montevideo
// * `America/Montreal` - America/Montreal
// * `America/Montserrat` - America/Montserrat
// * `America/Nassau` - America/Nassau
// * `America/New_York` - America/New_York
// * `America/Nipigon` - America/Nipigon
// * `America/Nome` - America/Nome
// * `America/Noronha` - America/Noronha
// * `America/North_Dakota/Beulah` - America/North_Dakota/Beulah
// * `America/North_Dakota/Center` - America/North_Dakota/Center
// * `America/North_Dakota/New_Salem` - America/North_Dakota/New_Salem
// * `America/Nuuk` - America/Nuuk
// * `America/Ojinaga` - America/Ojinaga
// * `America/Panama` - America/Panama
// * `America/Pangnirtung` - America/Pangnirtung
// * `America/Paramaribo` - America/Paramaribo
// * `America/Phoenix` - America/Phoenix
// * `America/Port-au-Prince` - America/Port-au-Prince
// * `America/Port_of_Spain` - America/Port_of_Spain
// * `America/Porto_Acre` - America/Porto_Acre
// * `America/Porto_Velho` - America/Porto_Velho
// * `America/Puerto_Rico` - America/Puerto_Rico
// * `America/Punta_Arenas` - America/Punta_Arenas
// * `America/Rainy_River` - America/Rainy_River
// * `America/Rankin_Inlet` - America/Rankin_Inlet
// * `America/Recife` - America/Recife
// * `America/Regina` - America/Regina
// * `America/Resolute` - America/Resolute
// * `America/Rio_Branco` - America/Rio_Branco
// * `America/Rosario` - America/Rosario
// * `America/Santa_Isabel` - America/Santa_Isabel
// * `America/Santarem` - America/Santarem
// * `America/Santiago` - America/Santiago
// * `America/Santo_Domingo` - America/Santo_Domingo
// * `America/Sao_Paulo` - America/Sao_Paulo
// * `America/Scoresbysund` - America/Scoresbysund
// * `America/Shiprock` - America/Shiprock
// * `America/Sitka` - America/Sitka
// * `America/St_Barthelemy` - America/St_Barthelemy
// * `America/St_Johns` - America/St_Johns
// * `America/St_Kitts` - America/St_Kitts
// * `America/St_Lucia` - America/St_Lucia
// * `America/St_Thomas` - America/St_Thomas
// * `America/St_Vincent` - America/St_Vincent
// * `America/Swift_Current` - America/Swift_Current
// * `America/Tegucigalpa` - America/Tegucigalpa
// * `America/Thule` - America/Thule
// * `America/Thunder_Bay` - America/Thunder_Bay
// * `America/Tijuana` - America/Tijuana
// * `America/Toronto` - America/Toronto
// * `America/Tortola` - America/Tortola
// * `America/Vancouver` - America/Vancouver
// * `America/Virgin` - America/Virgin
// * `America/Whitehorse` - America/Whitehorse
// * `America/Winnipeg` - America/Winnipeg
// * `America/Yakutat` - America/Yakutat
// * `America/Yellowknife` - America/Yellowknife
// * `Antarctica/Casey` - Antarctica/Casey
// * `Antarctica/Davis` - Antarctica/Davis
// * `Antarctica/DumontDUrville` - Antarctica/DumontDUrville
// * `Antarctica/Macquarie` - Antarctica/Macquarie
// * `Antarctica/Mawson` - Antarctica/Mawson
// * `Antarctica/McMurdo` - Antarctica/McMurdo
// * `Antarctica/Palmer` - Antarctica/Palmer
// * `Antarctica/Rothera` - Antarctica/Rothera
// * `Antarctica/South_Pole` - Antarctica/South_Pole
// * `Antarctica/Syowa` - Antarctica/Syowa
// * `Antarctica/Troll` - Antarctica/Troll
// * `Antarctica/Vostok` - Antarctica/Vostok
// * `Arctic/Longyearbyen` - Arctic/Longyearbyen
// * `Asia/Aden` - Asia/Aden
// * `Asia/Almaty` - Asia/Almaty
// * `Asia/Amman` - Asia/Amman
// * `Asia/Anadyr` - Asia/Anadyr
// * `Asia/Aqtau` - Asia/Aqtau
// * `Asia/Aqtobe` - Asia/Aqtobe
// * `Asia/Ashgabat` - Asia/Ashgabat
// * `Asia/Ashkhabad` - Asia/Ashkhabad
// * `Asia/Atyrau` - Asia/Atyrau
// * `Asia/Baghdad` - Asia/Baghdad
// * `Asia/Bahrain` - Asia/Bahrain
// * `Asia/Baku` - Asia/Baku
// * `Asia/Bangkok` - Asia/Bangkok
// * `Asia/Barnaul` - Asia/Barnaul
// * `Asia/Beirut` - Asia/Beirut
// * `Asia/Bishkek` - Asia/Bishkek
// * `Asia/Brunei` - Asia/Brunei
// * `Asia/Calcutta` - Asia/Calcutta
// * `Asia/Chita` - Asia/Chita
// * `Asia/Choibalsan` - Asia/Choibalsan
// * `Asia/Chongqing` - Asia/Chongqing
// * `Asia/Chungking` - Asia/Chungking
// * `Asia/Colombo` - Asia/Colombo
// * `Asia/Dacca` - Asia/Dacca
// * `Asia/Damascus` - Asia/Damascus
// * `Asia/Dhaka` - Asia/Dhaka
// * `Asia/Dili` - Asia/Dili
// * `Asia/Dubai` - Asia/Dubai
// * `Asia/Dushanbe` - Asia/Dushanbe
// * `Asia/Famagusta` - Asia/Famagusta
// * `Asia/Gaza` - Asia/Gaza
// * `Asia/Harbin` - Asia/Harbin
// * `Asia/Hebron` - Asia/Hebron
// * `Asia/Ho_Chi_Minh` - Asia/Ho_Chi_Minh
// * `Asia/Hong_Kong` - Asia/Hong_Kong
// * `Asia/Hovd` - Asia/Hovd
// * `Asia/Irkutsk` - Asia/Irkutsk
// * `Asia/Istanbul` - Asia/Istanbul
// * `Asia/Jakarta` - Asia/Jakarta
// * `Asia/Jayapura` - Asia/Jayapura
// * `Asia/Jerusalem` - Asia/Jerusalem
// * `Asia/Kabul` - Asia/Kabul
// * `Asia/Kamchatka` - Asia/Kamchatka
// * `Asia/Karachi` - Asia/Karachi
// * `Asia/Kashgar` - Asia/Kashgar
// * `Asia/Kathmandu` - Asia/Kathmandu
// * `Asia/Katmandu` - Asia/Katmandu
// * `Asia/Khandyga` - Asia/Khandyga
// * `Asia/Kolkata` - Asia/Kolkata
// * `Asia/Krasnoyarsk` - Asia/Krasnoyarsk
// * `Asia/Kuala_Lumpur` - Asia/Kuala_Lumpur
// * `Asia/Kuching` - Asia/Kuching
// * `Asia/Kuwait` - Asia/Kuwait
// * `Asia/Macao` - Asia/Macao
// * `Asia/Macau` - Asia/Macau
// * `Asia/Magadan` - Asia/Magadan
// * `Asia/Makassar` - Asia/Makassar
// * `Asia/Manila` - Asia/Manila
// * `Asia/Muscat` - Asia/Muscat
// * `Asia/Nicosia` - Asia/Nicosia
// * `Asia/Novokuznetsk` - Asia/Novokuznetsk
// * `Asia/Novosibirsk` - Asia/Novosibirsk
// * `Asia/Omsk` - Asia/Omsk
// * `Asia/Oral` - Asia/Oral
// * `Asia/Phnom_Penh` - Asia/Phnom_Penh
// * `Asia/Pontianak` - Asia/Pontianak
// * `Asia/Pyongyang` - Asia/Pyongyang
// * `Asia/Qatar` - Asia/Qatar
// * `Asia/Qostanay` - Asia/Qostanay
// * `Asia/Qyzylorda` - Asia/Qyzylorda
// * `Asia/Rangoon` - Asia/Rangoon
// * `Asia/Riyadh` - Asia/Riyadh
// * `Asia/Saigon` - Asia/Saigon
// * `Asia/Sakhalin` - Asia/Sakhalin
// * `Asia/Samarkand` - Asia/Samarkand
// * `Asia/Seoul` - Asia/Seoul
// * `Asia/Shanghai` - Asia/Shanghai
// * `Asia/Singapore` - Asia/Singapore
// * `Asia/Srednekolymsk` - Asia/Srednekolymsk
// * `Asia/Taipei` - Asia/Taipei
// * `Asia/Tashkent` - Asia/Tashkent
// * `Asia/Tbilisi` - Asia/Tbilisi
// * `Asia/Tehran` - Asia/Tehran
// * `Asia/Tel_Aviv` - Asia/Tel_Aviv
// * `Asia/Thimbu` - Asia/Thimbu
// * `Asia/Thimphu` - Asia/Thimphu
// * `Asia/Tokyo` - Asia/Tokyo
// * `Asia/Tomsk` - Asia/Tomsk
// * `Asia/Ujung_Pandang` - Asia/Ujung_Pandang
// * `Asia/Ulaanbaatar` - Asia/Ulaanbaatar
// * `Asia/Ulan_Bator` - Asia/Ulan_Bator
// * `Asia/Urumqi` - Asia/Urumqi
// * `Asia/Ust-Nera` - Asia/Ust-Nera
// * `Asia/Vientiane` - Asia/Vientiane
// * `Asia/Vladivostok` - Asia/Vladivostok
// * `Asia/Yakutsk` - Asia/Yakutsk
// * `Asia/Yangon` - Asia/Yangon
// * `Asia/Yekaterinburg` - Asia/Yekaterinburg
// * `Asia/Yerevan` - Asia/Yerevan
// * `Atlantic/Azores` - Atlantic/Azores
// * `Atlantic/Bermuda` - Atlantic/Bermuda
// * `Atlantic/Canary` - Atlantic/Canary
// * `Atlantic/Cape_Verde` - Atlantic/Cape_Verde
// * `Atlantic/Faeroe` - Atlantic/Faeroe
// * `Atlantic/Faroe` - Atlantic/Faroe
// * `Atlantic/Jan_Mayen` - Atlantic/Jan_Mayen
// * `Atlantic/Madeira` - Atlantic/Madeira
// * `Atlantic/Reykjavik` - Atlantic/Reykjavik
// * `Atlantic/South_Georgia` - Atlantic/South_Georgia
// * `Atlantic/St_Helena` - Atlantic/St_Helena
// * `Atlantic/Stanley` - Atlantic/Stanley
// * `Australia/ACT` - Australia/ACT
// * `Australia/Adelaide` - Australia/Adelaide
// * `Australia/Brisbane` - Australia/Brisbane
// * `Australia/Broken_Hill` - Australia/Broken_Hill
// * `Australia/Canberra` - Australia/Canberra
// * `Australia/Currie` - Australia/Currie
// * `Australia/Darwin` - Australia/Darwin
// * `Australia/Eucla` - Australia/Eucla
// * `Australia/Hobart` - Australia/Hobart
// * `Australia/LHI` - Australia/LHI
// * `Australia/Lindeman` - Australia/Lindeman
// * `Australia/Lord_Howe` - Australia/Lord_Howe
// * `Australia/Melbourne` - Australia/Melbourne
// * `Australia/NSW` - Australia/NSW
// * `Australia/North` - Australia/North
// * `Australia/Perth` - Australia/Perth
// * `Australia/Queensland` - Australia/Queensland
// * `Australia/South` - Australia/South
// * `Australia/Sydney` - Australia/Sydney
// * `Australia/Tasmania` - Australia/Tasmania
// * `Australia/Victoria` - Australia/Victoria
// * `Australia/West` - Australia/West
// * `Australia/Yancowinna` - Australia/Yancowinna
// * `Brazil/Acre` - Brazil/Acre
// * `Brazil/DeNoronha` - Brazil/DeNoronha
// * `Brazil/East` - Brazil/East
// * `Brazil/West` - Brazil/West
// * `CET` - CET
// * `CST6CDT` - CST6CDT
// * `Canada/Atlantic` - Canada/Atlantic
// * `Canada/Central` - Canada/Central
// * `Canada/Eastern` - Canada/Eastern
// * `Canada/Mountain` - Canada/Mountain
// * `Canada/Newfoundland` - Canada/Newfoundland
// * `Canada/Pacific` - Canada/Pacific
// * `Canada/Saskatchewan` - Canada/Saskatchewan
// * `Canada/Yukon` - Canada/Yukon
// * `Chile/Continental` - Chile/Continental
// * `Chile/EasterIsland` - Chile/EasterIsland
// * `Cuba` - Cuba
// * `EET` - EET
// * `EST` - EST
// * `EST5EDT` - EST5EDT
// * `Egypt` - Egypt
// * `Eire` - Eire
// * `Etc/GMT` - Etc/GMT
// * `Etc/GMT+0` - Etc/GMT+0
// * `Etc/GMT+1` - Etc/GMT+1
// * `Etc/GMT+10` - Etc/GMT+10
// * `Etc/GMT+11` - Etc/GMT+11
// * `Etc/GMT+12` - Etc/GMT+12
// * `Etc/GMT+2` - Etc/GMT+2
// * `Etc/GMT+3` - Etc/GMT+3
// * `Etc/GMT+4` - Etc/GMT+4
// * `Etc/GMT+5` - Etc/GMT+5
// * `Etc/GMT+6` - Etc/GMT+6
// * `Etc/GMT+7` - Etc/GMT+7
// * `Etc/GMT+8` - Etc/GMT+8
// * `Etc/GMT+9` - Etc/GMT+9
// * `Etc/GMT-0` - Etc/GMT-0
// * `Etc/GMT-1` - Etc/GMT-1
// * `Etc/GMT-10` - Etc/GMT-10
// * `Etc/GMT-11` - Etc/GMT-11
// * `Etc/GMT-12` - Etc/GMT-12
// * `Etc/GMT-13` - Etc/GMT-13
// * `Etc/GMT-14` - Etc/GMT-14
// * `Etc/GMT-2` - Etc/GMT-2
// * `Etc/GMT-3` - Etc/GMT-3
// * `Etc/GMT-4` - Etc/GMT-4
// * `Etc/GMT-5` - Etc/GMT-5
// * `Etc/GMT-6` - Etc/GMT-6
// * `Etc/GMT-7` - Etc/GMT-7
// * `Etc/GMT-8` - Etc/GMT-8
// * `Etc/GMT-9` - Etc/GMT-9
// * `Etc/GMT0` - Etc/GMT0
// * `Etc/Greenwich` - Etc/Greenwich
// * `Etc/UCT` - Etc/UCT
// * `Etc/UTC` - Etc/UTC
// * `Etc/Universal` - Etc/Universal
// * `Etc/Zulu` - Etc/Zulu
// * `Europe/Amsterdam` - Europe/Amsterdam
// * `Europe/Andorra` - Europe/Andorra
// * `Europe/Astrakhan` - Europe/Astrakhan
// * `Europe/Athens` - Europe/Athens
// * `Europe/Belfast` - Europe/Belfast
// * `Europe/Belgrade` - Europe/Belgrade
// * `Europe/Berlin` - Europe/Berlin
// * `Europe/Bratislava` - Europe/Bratislava
// * `Europe/Brussels` - Europe/Brussels
// * `Europe/Bucharest` - Europe/Bucharest
// * `Europe/Budapest` - Europe/Budapest
// * `Europe/Busingen` - Europe/Busingen
// * `Europe/Chisinau` - Europe/Chisinau
// * `Europe/Copenhagen` - Europe/Copenhagen
// * `Europe/Dublin` - Europe/Dublin
// * `Europe/Gibraltar` - Europe/Gibraltar
// * `Europe/Guernsey` - Europe/Guernsey
// * `Europe/Helsinki` - Europe/Helsinki
// * `Europe/Isle_of_Man` - Europe/Isle_of_Man
// * `Europe/Istanbul` - Europe/Istanbul
// * `Europe/Jersey` - Europe/Jersey
// * `Europe/Kaliningrad` - Europe/Kaliningrad
// * `Europe/Kiev` - Europe/Kiev
// * `Europe/Kirov` - Europe/Kirov
// * `Europe/Kyiv` - Europe/Kyiv
// * `Europe/Lisbon` - Europe/Lisbon
// * `Europe/Ljubljana` - Europe/Ljubljana
// * `Europe/London` - Europe/London
// * `Europe/Luxembourg` - Europe/Luxembourg
// * `Europe/Madrid` - Europe/Madrid
// * `Europe/Malta` - Europe/Malta
// * `Europe/Mariehamn` - Europe/Mariehamn
// * `Europe/Minsk` - Europe/Minsk
// * `Europe/Monaco` - Europe/Monaco
// * `Europe/Moscow` - Europe/Moscow
// * `Europe/Nicosia` - Europe/Nicosia
// * `Europe/Oslo` - Europe/Oslo
// * `Europe/Paris` - Europe/Paris
// * `Europe/Podgorica` - Europe/Podgorica
// * `Europe/Prague` - Europe/Prague
// * `Europe/Riga` - Europe/Riga
// * `Europe/Rome` - Europe/Rome
// * `Europe/Samara` - Europe/Samara
// * `Europe/San_Marino` - Europe/San_Marino
// * `Europe/Sarajevo` - Europe/Sarajevo
// * `Europe/Saratov` - Europe/Saratov
// * `Europe/Simferopol` - Europe/Simferopol
// * `Europe/Skopje` - Europe/Skopje
// * `Europe/Sofia` - Europe/Sofia
// * `Europe/Stockholm` - Europe/Stockholm
// * `Europe/Tallinn` - Europe/Tallinn
// * `Europe/Tirane` - Europe/Tirane
// * `Europe/Tiraspol` - Europe/Tiraspol
// * `Europe/Ulyanovsk` - Europe/Ulyanovsk
// * `Europe/Uzhgorod` - Europe/Uzhgorod
// * `Europe/Vaduz` - Europe/Vaduz
// * `Europe/Vatican` - Europe/Vatican
// * `Europe/Vienna` - Europe/Vienna
// * `Europe/Vilnius` - Europe/Vilnius
// * `Europe/Volgograd` - Europe/Volgograd
// * `Europe/Warsaw` - Europe/Warsaw
// * `Europe/Zagreb` - Europe/Zagreb
// * `Europe/Zaporozhye` - Europe/Zaporozhye
// * `Europe/Zurich` - Europe/Zurich
// * `GB` - GB
// * `GB-Eire` - GB-Eire
// * `GMT` - GMT
// * `GMT+0` - GMT+0
// * `GMT-0` - GMT-0
// * `GMT0` - GMT0
// * `Greenwich` - Greenwich
// * `HST` - HST
// * `Hongkong` - Hongkong
// * `Iceland` - Iceland
// * `Indian/Antananarivo` - Indian/Antananarivo
// * `Indian/Chagos` - Indian/Chagos
// * `Indian/Christmas` - Indian/Christmas
// * `Indian/Cocos` - Indian/Cocos
// * `Indian/Comoro` - Indian/Comoro
// * `Indian/Kerguelen` - Indian/Kerguelen
// * `Indian/Mahe` - Indian/Mahe
// * `Indian/Maldives` - Indian/Maldives
// * `Indian/Mauritius` - Indian/Mauritius
// * `Indian/Mayotte` - Indian/Mayotte
// * `Indian/Reunion` - Indian/Reunion
// * `Iran` - Iran
// * `Israel` - Israel
// * `Jamaica` - Jamaica
// * `Japan` - Japan
// * `Kwajalein` - Kwajalein
// * `Libya` - Libya
// * `MET` - MET
// * `MST` - MST
// * `MST7MDT` - MST7MDT
// * `Mexico/BajaNorte` - Mexico/BajaNorte
// * `Mexico/BajaSur` - Mexico/BajaSur
// * `Mexico/General` - Mexico/General
// * `NZ` - NZ
// * `NZ-CHAT` - NZ-CHAT
// * `Navajo` - Navajo
// * `PRC` - PRC
// * `PST8PDT` - PST8PDT
// * `Pacific/Apia` - Pacific/Apia
// * `Pacific/Auckland` - Pacific/Auckland
// * `Pacific/Bougainville` - Pacific/Bougainville
// * `Pacific/Chatham` - Pacific/Chatham
// * `Pacific/Chuuk` - Pacific/Chuuk
// * `Pacific/Easter` - Pacific/Easter
// * `Pacific/Efate` - Pacific/Efate
// * `Pacific/Enderbury` - Pacific/Enderbury
// * `Pacific/Fakaofo` - Pacific/Fakaofo
// * `Pacific/Fiji` - Pacific/Fiji
// * `Pacific/Funafuti` - Pacific/Funafuti
// * `Pacific/Galapagos` - Pacific/Galapagos
// * `Pacific/Gambier` - Pacific/Gambier
// * `Pacific/Guadalcanal` - Pacific/Guadalcanal
// * `Pacific/Guam` - Pacific/Guam
// * `Pacific/Honolulu` - Pacific/Honolulu
// * `Pacific/Johnston` - Pacific/Johnston
// * `Pacific/Kanton` - Pacific/Kanton
// * `Pacific/Kiritimati` - Pacific/Kiritimati
// * `Pacific/Kosrae` - Pacific/Kosrae
// * `Pacific/Kwajalein` - Pacific/Kwajalein
// * `Pacific/Majuro` - Pacific/Majuro
// * `Pacific/Marquesas` - Pacific/Marquesas
// * `Pacific/Midway` - Pacific/Midway
// * `Pacific/Nauru` - Pacific/Nauru
// * `Pacific/Niue` - Pacific/Niue
// * `Pacific/Norfolk` - Pacific/Norfolk
// * `Pacific/Noumea` - Pacific/Noumea
// * `Pacific/Pago_Pago` - Pacific/Pago_Pago
// * `Pacific/Palau` - Pacific/Palau
// * `Pacific/Pitcairn` - Pacific/Pitcairn
// * `Pacific/Pohnpei` - Pacific/Pohnpei
// * `Pacific/Ponape` - Pacific/Ponape
// * `Pacific/Port_Moresby` - Pacific/Port_Moresby
// * `Pacific/Rarotonga` - Pacific/Rarotonga
// * `Pacific/Saipan` - Pacific/Saipan
// * `Pacific/Samoa` - Pacific/Samoa
// * `Pacific/Tahiti` - Pacific/Tahiti
// * `Pacific/Tarawa` - Pacific/Tarawa
// * `Pacific/Tongatapu` - Pacific/Tongatapu
// * `Pacific/Truk` - Pacific/Truk
// * `Pacific/Wake` - Pacific/Wake
// * `Pacific/Wallis` - Pacific/Wallis
// * `Pacific/Yap` - Pacific/Yap
// * `Poland` - Poland
// * `Portugal` - Portugal
// * `ROC` - ROC
// * `ROK` - ROK
// * `Singapore` - Singapore
// * `Turkey` - Turkey
// * `UCT` - UCT
// * `US/Alaska` - US/Alaska
// * `US/Aleutian` - US/Aleutian
// * `US/Arizona` - US/Arizona
// * `US/Central` - US/Central
// * `US/East-Indiana` - US/East-Indiana
// * `US/Eastern` - US/Eastern
// * `US/Hawaii` - US/Hawaii
// * `US/Indiana-Starke` - US/Indiana-Starke
// * `US/Michigan` - US/Michigan
// * `US/Mountain` - US/Mountain
// * `US/Pacific` - US/Pacific
// * `US/Samoa` - US/Samoa
// * `UTC` - UTC
// * `Universal` - Universal
// * `W-SU` - W-SU
// * `WET` - WET
// * `Zulu` - Zulu
type SystemSettingsRequestTimeZone string

// Tag defines model for Tag.
type Tag struct {
	Tags []string `json:"tags"`
}

// TagRequest defines model for TagRequest.
type TagRequest struct {
	Tags []string `json:"tags"`
}

// Test defines model for Test.
type Test struct {
	ActualTime           *string `json:"actual_time"`
	ApiScanConfiguration *int    `json:"api_scan_configuration"`

	// BranchTag Tag or branch that was tested, a reimport may update this field.
	BranchTag *string `json:"branch_tag"`

	// BuildId Build ID that was tested, a reimport may update this field.
	BuildId *string `json:"build_id"`

	// CommitHash Commit hash tested, a reimport may update this field.
	CommitHash      *string         `json:"commit_hash"`
	Created         *time.Time      `json:"created"`
	Description     *string         `json:"description"`
	Engagement      *int            `json:"engagement,omitempty"`
	Environment     *int            `json:"environment"`
	EstimatedTime   *string         `json:"estimated_time"`
	Files           *[]File         `json:"files,omitempty"`
	FindingGroups   *[]FindingGroup `json:"finding_groups,omitempty"`
	Id              *int            `json:"id,omitempty"`
	Lead            *int            `json:"lead"`
	Notes           *[]Note         `json:"notes,omitempty"`
	PercentComplete *int            `json:"percent_complete"`
	ScanType        *string         `json:"scan_type"`
	Tags            *[]string       `json:"tags,omitempty"`
	TargetEnd       time.Time       `json:"target_end"`
	TargetStart     time.Time       `json:"target_start"`
	TestType        int             `json:"test_type"`
	TestTypeName    *string         `json:"test_type_name,omitempty"`
	Title           *string         `json:"title"`
	Updated         *time.Time      `json:"updated"`
	Version         *string         `json:"version"`
}

// TestCreate defines model for TestCreate.
type TestCreate struct {
	ActualTime           *string `json:"actual_time"`
	ApiScanConfiguration *int    `json:"api_scan_configuration"`

	// BranchTag Tag or branch that was tested, a reimport may update this field.
	BranchTag *string `json:"branch_tag"`

	// BuildId Build ID that was tested, a reimport may update this field.
	BuildId *string `json:"build_id"`

	// CommitHash Commit hash tested, a reimport may update this field.
	CommitHash      *string    `json:"commit_hash"`
	Created         *time.Time `json:"created"`
	Description     *string    `json:"description"`
	Engagement      int        `json:"engagement"`
	Environment     *int       `json:"environment"`
	EstimatedTime   *string    `json:"estimated_time"`
	Files           *[]int     `json:"files,omitempty"`
	Id              *int       `json:"id,omitempty"`
	Lead            *int       `json:"lead"`
	Notes           *[]int     `json:"notes,omitempty"`
	PercentComplete *int       `json:"percent_complete"`
	ScanType        *string    `json:"scan_type"`
	Tags            *[]string  `json:"tags,omitempty"`
	TargetEnd       time.Time  `json:"target_end"`
	TargetStart     time.Time  `json:"target_start"`
	TestType        int        `json:"test_type"`
	Title           *string    `json:"title"`
	Updated         *time.Time `json:"updated"`
	Version         *string    `json:"version"`
}

// TestCreateRequest defines model for TestCreateRequest.
type TestCreateRequest struct {
	ApiScanConfiguration *int `json:"api_scan_configuration"`

	// BranchTag Tag or branch that was tested, a reimport may update this field.
	BranchTag *string `json:"branch_tag"`

	// BuildId Build ID that was tested, a reimport may update this field.
	BuildId *string `json:"build_id"`

	// CommitHash Commit hash tested, a reimport may update this field.
	CommitHash      *string   `json:"commit_hash"`
	Description     *string   `json:"description"`
	Engagement      int       `json:"engagement"`
	Environment     *int      `json:"environment"`
	Lead            *int      `json:"lead"`
	Notes           *[]int    `json:"notes,omitempty"`
	PercentComplete *int      `json:"percent_complete"`
	ScanType        *string   `json:"scan_type"`
	Tags            *[]string `json:"tags,omitempty"`
	TargetEnd       time.Time `json:"target_end"`
	TargetStart     time.Time `json:"target_start"`
	TestType        int       `json:"test_type"`
	Title           *string   `json:"title"`
	Version         *string   `json:"version"`
}

// TestImport defines model for TestImport.
type TestImport struct {
	// BranchTag Tag or branch that was tested, a reimport may update this field.
	BranchTag *string `json:"branch_tag"`

	// BuildId Build ID that was tested, a reimport may update this field.
	BuildId *string `json:"build_id"`

	// CommitHash Commit hash tested, a reimport may update this field.
	CommitHash       *string                 `json:"commit_hash"`
	Created          *time.Time              `json:"created,omitempty"`
	FindingsAffected *[]int                  `json:"findings_affected,omitempty"`
	Id               *int                    `json:"id,omitempty"`
	ImportSettings   *map[string]interface{} `json:"import_settings"`
	Modified         *time.Time              `json:"modified,omitempty"`
	Prefetch         *struct {
		FindingsAffected *map[string]Finding `json:"findings_affected,omitempty"`
		Test             *map[string]Test    `json:"test,omitempty"`
	} `json:"prefetch,omitempty"`
	Test                       *int                       `json:"test,omitempty"`
	TestImportFindingActionSet *[]TestImportFindingAction `json:"test_import_finding_action_set,omitempty"`
	Type                       *string                    `json:"type,omitempty"`
	Version                    *string                    `json:"version"`
}

// TestImportFindingAction defines model for TestImportFindingAction.
type TestImportFindingAction struct {
	// Action * `N` - created
	// * `C` - closed
	// * `R` - reactivated
	// * `U` - left untouched
	Action     *TestImportFindingActionAction `json:"action"`
	Created    *time.Time                     `json:"created,omitempty"`
	Finding    *int                           `json:"finding,omitempty"`
	Id         *int                           `json:"id,omitempty"`
	Modified   *time.Time                     `json:"modified,omitempty"`
	TestImport *int                           `json:"test_import,omitempty"`
}

// TestImportFindingActionAction * `N` - created
// * `C` - closed
// * `R` - reactivated
// * `U` - left untouched
type TestImportFindingActionAction string

// TestImportRequest defines model for TestImportRequest.
type TestImportRequest struct {
	// BranchTag Tag or branch that was tested, a reimport may update this field.
	BranchTag *string `json:"branch_tag"`

	// BuildId Build ID that was tested, a reimport may update this field.
	BuildId *string `json:"build_id"`

	// CommitHash Commit hash tested, a reimport may update this field.
	CommitHash     *string                 `json:"commit_hash"`
	ImportSettings *map[string]interface{} `json:"import_settings"`
	Type           *string                 `json:"type,omitempty"`
	Version        *string                 `json:"version"`
}

// TestRequest defines model for TestRequest.
type TestRequest struct {
	ApiScanConfiguration *int `json:"api_scan_configuration"`

	// BranchTag Tag or branch that was tested, a reimport may update this field.
	BranchTag *string `json:"branch_tag"`

	// BuildId Build ID that was tested, a reimport may update this field.
	BuildId *string `json:"build_id"`

	// CommitHash Commit hash tested, a reimport may update this field.
	CommitHash      *string   `json:"commit_hash"`
	Description     *string   `json:"description"`
	Environment     *int      `json:"environment"`
	Lead            *int      `json:"lead"`
	PercentComplete *int      `json:"percent_complete"`
	ScanType        *string   `json:"scan_type"`
	Tags            *[]string `json:"tags,omitempty"`
	TargetEnd       time.Time `json:"target_end"`
	TargetStart     time.Time `json:"target_start"`
	TestType        int       `json:"test_type"`
	Title           *string   `json:"title"`
	Version         *string   `json:"version"`
}

// TestToFiles defines model for TestToFiles.
type TestToFiles struct {
	Files  []File `json:"files"`
	TestId *int   `json:"test_id"`
}

// TestToNotes defines model for TestToNotes.
type TestToNotes struct {
	Notes  []Note `json:"notes"`
	TestId *int   `json:"test_id"`
}

// TestType defines model for TestType.
type TestType struct {
	Active      *bool     `json:"active,omitempty"`
	DynamicTool *bool     `json:"dynamic_tool,omitempty"`
	Id          *int      `json:"id,omitempty"`
	Name        string    `json:"name"`
	StaticTool  *bool     `json:"static_tool,omitempty"`
	Tags        *[]string `json:"tags,omitempty"`
}

// TestTypeRequest defines model for TestTypeRequest.
type TestTypeRequest struct {
	Active      *bool     `json:"active,omitempty"`
	DynamicTool *bool     `json:"dynamic_tool,omitempty"`
	Name        string    `json:"name"`
	StaticTool  *bool     `json:"static_tool,omitempty"`
	Tags        *[]string `json:"tags,omitempty"`
}

// ToolConfiguration defines model for ToolConfiguration.
type ToolConfiguration struct {
	AuthTitle *string `json:"auth_title"`

	// AuthenticationType * `API` - API Key
	// * `Password` - Username/Password
	// * `SSH` - SSH
	AuthenticationType *ToolConfigurationAuthenticationType `json:"authentication_type"`
	Description        *string                              `json:"description"`

	// Extras Additional definitions that will be consumed by scanner
	Extras   *string `json:"extras"`
	Id       *int    `json:"id,omitempty"`
	Name     string  `json:"name"`
	ToolType int     `json:"tool_type"`
	Url      *string `json:"url"`
	Username *string `json:"username"`
}

// ToolConfigurationAuthenticationType * `API` - API Key
// * `Password` - Username/Password
// * `SSH` - SSH
type ToolConfigurationAuthenticationType string

// ToolConfigurationRequest defines model for ToolConfigurationRequest.
type ToolConfigurationRequest struct {
	ApiKey    *string `json:"api_key"`
	AuthTitle *string `json:"auth_title"`

	// AuthenticationType * `API` - API Key
	// * `Password` - Username/Password
	// * `SSH` - SSH
	AuthenticationType *ToolConfigurationRequestAuthenticationType `json:"authentication_type"`
	Description        *string                                     `json:"description"`

	// Extras Additional definitions that will be consumed by scanner
	Extras   *string `json:"extras"`
	Name     string  `json:"name"`
	Password *string `json:"password"`
	Ssh      *string `json:"ssh"`
	ToolType int     `json:"tool_type"`
	Url      *string `json:"url"`
	Username *string `json:"username"`
}

// ToolConfigurationRequestAuthenticationType * `API` - API Key
// * `Password` - Username/Password
// * `SSH` - SSH
type ToolConfigurationRequestAuthenticationType string

// ToolProductSettings defines model for ToolProductSettings.
type ToolProductSettings struct {
	Description       *string `json:"description"`
	Id                *int    `json:"id,omitempty"`
	Name              string  `json:"name"`
	Notes             *[]int  `json:"notes,omitempty"`
	Product           int     `json:"product"`
	SettingUrl        string  `json:"setting_url"`
	ToolConfiguration int     `json:"tool_configuration"`
	ToolProjectId     *string `json:"tool_project_id"`
	Url               *string `json:"url"`
}

// ToolProductSettingsRequest defines model for ToolProductSettingsRequest.
type ToolProductSettingsRequest struct {
	Description       *string `json:"description"`
	Name              string  `json:"name"`
	Product           int     `json:"product"`
	SettingUrl        string  `json:"setting_url"`
	ToolConfiguration int     `json:"tool_configuration"`
	ToolProjectId     *string `json:"tool_project_id"`
	Url               *string `json:"url"`
}

// ToolType defines model for ToolType.
type ToolType struct {
	Description *string `json:"description"`
	Id          *int    `json:"id,omitempty"`
	Name        string  `json:"name"`
}

// ToolTypeRequest defines model for ToolTypeRequest.
type ToolTypeRequest struct {
	Description *string `json:"description"`
	Name        string  `json:"name"`
}

// User defines model for User.
type User struct {
	ConfigurationPermissions *[]int               `json:"configuration_permissions,omitempty"`
	Email                    *openapi_types.Email `json:"email,omitempty"`
	FirstName                *string              `json:"first_name,omitempty"`
	Id                       *int                 `json:"id,omitempty"`

	// IsActive Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
	IsActive *bool `json:"is_active,omitempty"`

	// IsSuperuser Designates that this user has all permissions without explicitly assigning them.
	IsSuperuser *bool      `json:"is_superuser,omitempty"`
	LastLogin   *time.Time `json:"last_login,omitempty"`
	LastName    *string    `json:"last_name,omitempty"`

	// Username Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
	Username string `json:"username"`
}

// UserContactInfo defines model for UserContactInfo.
type UserContactInfo struct {
	// BlockExecution Instead of async deduping a finding the findings will be deduped synchronously and will 'block' the user until completion.
	BlockExecution *bool `json:"block_execution,omitempty"`

	// CellNumber Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.
	CellNumber *string `json:"cell_number,omitempty"`

	// ForcePasswordReset Forces this user to reset their password on next login.
	ForcePasswordReset *bool   `json:"force_password_reset,omitempty"`
	GithubUsername     *string `json:"github_username"`
	Id                 *int    `json:"id,omitempty"`

	// PhoneNumber Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.
	PhoneNumber *string `json:"phone_number,omitempty"`
	Prefetch    *struct {
		User *map[string]UserStub `json:"user,omitempty"`
	} `json:"prefetch,omitempty"`
	SlackUserId *string `json:"slack_user_id"`

	// SlackUsername Email address associated with your slack account
	SlackUsername   *string `json:"slack_username"`
	Title           *string `json:"title"`
	TwitterUsername *string `json:"twitter_username"`
	User            int     `json:"user"`
}

// UserContactInfoRequest defines model for UserContactInfoRequest.
type UserContactInfoRequest struct {
	// BlockExecution Instead of async deduping a finding the findings will be deduped synchronously and will 'block' the user until completion.
	BlockExecution *bool `json:"block_execution,omitempty"`

	// CellNumber Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.
	CellNumber *string `json:"cell_number,omitempty"`

	// ForcePasswordReset Forces this user to reset their password on next login.
	ForcePasswordReset *bool   `json:"force_password_reset,omitempty"`
	GithubUsername     *string `json:"github_username"`

	// PhoneNumber Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.
	PhoneNumber *string `json:"phone_number,omitempty"`
	SlackUserId *string `json:"slack_user_id"`

	// SlackUsername Email address associated with your slack account
	SlackUsername   *string `json:"slack_username"`
	Title           *string `json:"title"`
	TwitterUsername *string `json:"twitter_username"`
	User            int     `json:"user"`
}

// UserProfile defines model for UserProfile.
type UserProfile struct {
	DojoGroupMember   []DojoGroupMember   `json:"dojo_group_member"`
	GlobalRole        GlobalRole          `json:"global_role"`
	ProductMember     []ProductMember     `json:"product_member"`
	ProductTypeMember []ProductTypeMember `json:"product_type_member"`
	User              User                `json:"user"`
	UserContactInfo   UserContactInfo     `json:"user_contact_info"`
}

// UserRequest defines model for UserRequest.
type UserRequest struct {
	ConfigurationPermissions *[]int               `json:"configuration_permissions,omitempty"`
	Email                    *openapi_types.Email `json:"email,omitempty"`
	FirstName                *string              `json:"first_name,omitempty"`

	// IsActive Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
	IsActive *bool `json:"is_active,omitempty"`

	// IsSuperuser Designates that this user has all permissions without explicitly assigning them.
	IsSuperuser *bool   `json:"is_superuser,omitempty"`
	LastName    *string `json:"last_name,omitempty"`
	Password    *string `json:"password,omitempty"`

	// Username Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
	Username string `json:"username"`
}

// UserStub defines model for UserStub.
type UserStub struct {
	FirstName *string `json:"first_name,omitempty"`
	Id        *int    `json:"id,omitempty"`
	LastName  *string `json:"last_name,omitempty"`

	// Username Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
	Username string `json:"username"`
}

// VulnerabilityId defines model for VulnerabilityId.
type VulnerabilityId struct {
	VulnerabilityId string `json:"vulnerability_id"`
}

// VulnerabilityIdRequest defines model for VulnerabilityIdRequest.
type VulnerabilityIdRequest struct {
	VulnerabilityId string `json:"vulnerability_id"`
}

// VulnerabilityIdTemplate defines model for VulnerabilityIdTemplate.
type VulnerabilityIdTemplate struct {
	VulnerabilityId string `json:"vulnerability_id"`
}

// VulnerabilityIdTemplateRequest defines model for VulnerabilityIdTemplateRequest.
type VulnerabilityIdTemplateRequest struct {
	VulnerabilityId string `json:"vulnerability_id"`
}

// ConfigurationPermissionsListParams defines parameters for ConfigurationPermissionsList.
type ConfigurationPermissionsListParams struct {
	Codename *string `form:"codename,omitempty" json:"codename,omitempty"`
	Id       *int    `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Name  *string `form:"name,omitempty" json:"name,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// CredentialMappingsListParams defines parameters for CredentialMappingsList.
type CredentialMappingsListParams struct {
	CredId          *int  `form:"cred_id,omitempty" json:"cred_id,omitempty"`
	Engagement      *int  `form:"engagement,omitempty" json:"engagement,omitempty"`
	Finding         *int  `form:"finding,omitempty" json:"finding,omitempty"`
	IsAuthnProvider *bool `form:"is_authn_provider,omitempty" json:"is_authn_provider,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset  *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Product *int    `form:"product,omitempty" json:"product,omitempty"`
	Test    *int    `form:"test,omitempty" json:"test,omitempty"`
	Url     *string `form:"url,omitempty" json:"url,omitempty"`
}

// CredentialMappingsDeletePreviewListParams defines parameters for CredentialMappingsDeletePreviewList.
type CredentialMappingsDeletePreviewListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// CredentialsListParams defines parameters for CredentialsList.
type CredentialsListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// CredentialsDeletePreviewListParams defines parameters for CredentialsDeletePreviewList.
type CredentialsDeletePreviewListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// DevelopmentEnvironmentsListParams defines parameters for DevelopmentEnvironmentsList.
type DevelopmentEnvironmentsListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// DevelopmentEnvironmentsDeletePreviewListParams defines parameters for DevelopmentEnvironmentsDeletePreviewList.
type DevelopmentEnvironmentsDeletePreviewListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// DojoGroupMembersListParams defines parameters for DojoGroupMembersList.
type DojoGroupMembersListParams struct {
	GroupId *int `form:"group_id,omitempty" json:"group_id,omitempty"`
	Id      *int `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch *[]DojoGroupMembersListParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
	UserId   *int                                  `form:"user_id,omitempty" json:"user_id,omitempty"`
}

// DojoGroupMembersListParamsPrefetch defines parameters for DojoGroupMembersList.
type DojoGroupMembersListParamsPrefetch string

// DojoGroupMembersRetrieveParams defines parameters for DojoGroupMembersRetrieve.
type DojoGroupMembersRetrieveParams struct {
	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch *[]DojoGroupMembersRetrieveParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
}

// DojoGroupMembersRetrieveParamsPrefetch defines parameters for DojoGroupMembersRetrieve.
type DojoGroupMembersRetrieveParamsPrefetch string

// DojoGroupMembersDeletePreviewListParams defines parameters for DojoGroupMembersDeletePreviewList.
type DojoGroupMembersDeletePreviewListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// DojoGroupsListParams defines parameters for DojoGroupsList.
type DojoGroupsListParams struct {
	Id *int `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Name  *string `form:"name,omitempty" json:"name,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch *[]DojoGroupsListParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`

	// SocialProvider Group imported from a social provider.
	//
	// * `AzureAD` - AzureAD
	SocialProvider *DojoGroupsListParamsSocialProvider `form:"social_provider,omitempty" json:"social_provider,omitempty"`
}

// DojoGroupsListParamsPrefetch defines parameters for DojoGroupsList.
type DojoGroupsListParamsPrefetch string

// DojoGroupsListParamsSocialProvider defines parameters for DojoGroupsList.
type DojoGroupsListParamsSocialProvider string

// DojoGroupsRetrieveParams defines parameters for DojoGroupsRetrieve.
type DojoGroupsRetrieveParams struct {
	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch *[]DojoGroupsRetrieveParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
}

// DojoGroupsRetrieveParamsPrefetch defines parameters for DojoGroupsRetrieve.
type DojoGroupsRetrieveParamsPrefetch string

// DojoGroupsDeletePreviewListParams defines parameters for DojoGroupsDeletePreviewList.
type DojoGroupsDeletePreviewListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// EndpointStatusListParams defines parameters for EndpointStatusList.
type EndpointStatusListParams struct {
	Endpoint      *int  `form:"endpoint,omitempty" json:"endpoint,omitempty"`
	FalsePositive *bool `form:"false_positive,omitempty" json:"false_positive,omitempty"`
	Finding       *int  `form:"finding,omitempty" json:"finding,omitempty"`

	// Limit Number of results to return per page.
	Limit       *int  `form:"limit,omitempty" json:"limit,omitempty"`
	Mitigated   *bool `form:"mitigated,omitempty" json:"mitigated,omitempty"`
	MitigatedBy *int  `form:"mitigated_by,omitempty" json:"mitigated_by,omitempty"`

	// Offset The initial index from which to return the results.
	Offset       *int  `form:"offset,omitempty" json:"offset,omitempty"`
	OutOfScope   *bool `form:"out_of_scope,omitempty" json:"out_of_scope,omitempty"`
	RiskAccepted *bool `form:"risk_accepted,omitempty" json:"risk_accepted,omitempty"`
}

// EndpointStatusDeletePreviewListParams defines parameters for EndpointStatusDeletePreviewList.
type EndpointStatusDeletePreviewListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// EndpointsListParams defines parameters for EndpointsList.
type EndpointsListParams struct {
	Fragment *string `form:"fragment,omitempty" json:"fragment,omitempty"`
	Host     *string `form:"host,omitempty" json:"host,omitempty"`
	Id       *int    `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// NotTag Not Tag name contains
	NotTag *string `form:"not_tag,omitempty" json:"not_tag,omitempty"`

	// NotTags Comma seperated list of exact tags not present on model
	NotTags *[]string `form:"not_tags,omitempty" json:"not_tags,omitempty"`

	// O Ordering
	//
	// * `host` - Host
	// * `-host` - Host (descending)
	// * `product` - Product
	// * `-product` - Product (descending)
	O *[]EndpointsListParamsO `form:"o,omitempty" json:"o,omitempty"`

	// Offset The initial index from which to return the results.
	Offset   *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Path     *string `form:"path,omitempty" json:"path,omitempty"`
	Port     *int    `form:"port,omitempty" json:"port,omitempty"`
	Product  *int    `form:"product,omitempty" json:"product,omitempty"`
	Protocol *string `form:"protocol,omitempty" json:"protocol,omitempty"`
	Query    *string `form:"query,omitempty" json:"query,omitempty"`

	// Tag Tag name contains
	Tag *string `form:"tag,omitempty" json:"tag,omitempty"`

	// Tags Comma seperated list of exact tags
	Tags     *[]string `form:"tags,omitempty" json:"tags,omitempty"`
	Userinfo *string   `form:"userinfo,omitempty" json:"userinfo,omitempty"`
}

// EndpointsListParamsO defines parameters for EndpointsList.
type EndpointsListParamsO string

// EndpointsDeletePreviewListParams defines parameters for EndpointsDeletePreviewList.
type EndpointsDeletePreviewListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// EngagementPresetsListParams defines parameters for EngagementPresetsList.
type EngagementPresetsListParams struct {
	Id *int `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset  *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Product *int    `form:"product,omitempty" json:"product,omitempty"`
	Title   *string `form:"title,omitempty" json:"title,omitempty"`
}

// EngagementPresetsDeletePreviewListParams defines parameters for EngagementPresetsDeletePreviewList.
type EngagementPresetsDeletePreviewListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// EngagementsListParams defines parameters for EngagementsList.
type EngagementsListParams struct {
	Active  *bool `form:"active,omitempty" json:"active,omitempty"`
	ApiTest *bool `form:"api_test,omitempty" json:"api_test,omitempty"`
	Id      *int  `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Name  *string `form:"name,omitempty" json:"name,omitempty"`

	// NotProductTagsName Comma seperated list of exact tags not present on product
	NotProductTagsName *[]string `form:"not_product__tags__name,omitempty" json:"not_product__tags__name,omitempty"`

	// NotTag Not Tag name contains
	NotTag *string `form:"not_tag,omitempty" json:"not_tag,omitempty"`

	// NotTags Comma seperated list of exact tags not present on model
	NotTags *[]string `form:"not_tags,omitempty" json:"not_tags,omitempty"`

	// O Ordering
	//
	// * `name` - Engagement Name
	// * `-name` - Engagement Name (descending)
	// * `version` - Version
	// * `-version` - Version (descending)
	// * `target_start` - Target start
	// * `-target_start` - Target start (descending)
	// * `target_end` - Target end
	// * `-target_end` - Target end (descending)
	// * `status` - Status
	// * `-status` - Status (descending)
	// * `lead` - Lead
	// * `-lead` - Lead (descending)
	// * `created` - Created
	// * `-created` - Created (descending)
	// * `updated` - Updated
	// * `-updated` - Updated (descending)
	O *[]EngagementsListParamsO `form:"o,omitempty" json:"o,omitempty"`

	// Offset The initial index from which to return the results.
	Offset  *int  `form:"offset,omitempty" json:"offset,omitempty"`
	PenTest *bool `form:"pen_test,omitempty" json:"pen_test,omitempty"`
	Product *int  `form:"product,omitempty" json:"product,omitempty"`

	// ProductProdType Multiple values may be separated by commas.
	ProductProdType *[]int `form:"product__prod_type,omitempty" json:"product__prod_type,omitempty"`

	// ProductTagsName Comma seperated list of exact tags present on product
	ProductTagsName *[]string `form:"product__tags__name,omitempty" json:"product__tags__name,omitempty"`
	ReportType      *int      `form:"report_type,omitempty" json:"report_type,omitempty"`
	Requester       *int      `form:"requester,omitempty" json:"requester,omitempty"`

	// Status * `Not Started` - Not Started
	// * `Blocked` - Blocked
	// * `Cancelled` - Cancelled
	// * `Completed` - Completed
	// * `In Progress` - In Progress
	// * `On Hold` - On Hold
	// * `Waiting for Resource` - Waiting for Resource
	Status *EngagementsListParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// Tag Tag name contains
	Tag *string `form:"tag,omitempty" json:"tag,omitempty"`

	// Tags Comma seperated list of exact tags
	Tags        *[]string           `form:"tags,omitempty" json:"tags,omitempty"`
	TargetEnd   *openapi_types.Date `form:"target_end,omitempty" json:"target_end,omitempty"`
	TargetStart *openapi_types.Date `form:"target_start,omitempty" json:"target_start,omitempty"`
	ThreatModel *bool               `form:"threat_model,omitempty" json:"threat_model,omitempty"`
	Updated     *time.Time          `form:"updated,omitempty" json:"updated,omitempty"`
	Version     *string             `form:"version,omitempty" json:"version,omitempty"`
}

// EngagementsListParamsO defines parameters for EngagementsList.
type EngagementsListParamsO string

// EngagementsListParamsStatus defines parameters for EngagementsList.
type EngagementsListParamsStatus string

// EngagementsAcceptRisksCreateJSONBody defines parameters for EngagementsAcceptRisksCreate.
type EngagementsAcceptRisksCreateJSONBody = []AcceptedRiskRequest

// EngagementsAcceptRisksCreateFormdataBody defines parameters for EngagementsAcceptRisksCreate.
type EngagementsAcceptRisksCreateFormdataBody = struct {
}

// EngagementsAcceptRisksCreateMultipartBody defines parameters for EngagementsAcceptRisksCreate.
type EngagementsAcceptRisksCreateMultipartBody = []AcceptedRiskRequest

// EngagementsDeletePreviewListParams defines parameters for EngagementsDeletePreviewList.
type EngagementsDeletePreviewListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// FindingTemplatesListParams defines parameters for FindingTemplatesList.
type FindingTemplatesListParams struct {
	Cwe         *int    `form:"cwe,omitempty" json:"cwe,omitempty"`
	Description *string `form:"description,omitempty" json:"description,omitempty"`
	Id          *int    `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit      *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Mitigation *string `form:"mitigation,omitempty" json:"mitigation,omitempty"`

	// NotTag Not Tag name contains
	NotTag *string `form:"not_tag,omitempty" json:"not_tag,omitempty"`

	// NotTags Comma seperated list of exact tags not present on model
	NotTags *[]string `form:"not_tags,omitempty" json:"not_tags,omitempty"`

	// O Ordering
	//
	// * `title` - Title
	// * `-title` - Title (descending)
	// * `cwe` - Cwe
	// * `-cwe` - Cwe (descending)
	O *[]FindingTemplatesListParamsO `form:"o,omitempty" json:"o,omitempty"`

	// Offset The initial index from which to return the results.
	Offset   *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Severity *string `form:"severity,omitempty" json:"severity,omitempty"`

	// Tag Tag name contains
	Tag *string `form:"tag,omitempty" json:"tag,omitempty"`

	// Tags Comma seperated list of exact tags
	Tags  *[]string `form:"tags,omitempty" json:"tags,omitempty"`
	Title *string   `form:"title,omitempty" json:"title,omitempty"`
}

// FindingTemplatesListParamsO defines parameters for FindingTemplatesList.
type FindingTemplatesListParamsO string

// FindingTemplatesDeletePreviewListParams defines parameters for FindingTemplatesDeletePreviewList.
type FindingTemplatesDeletePreviewListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// FindingsListParams defines parameters for FindingsList.
type FindingsListParams struct {
	Active           *bool   `form:"active,omitempty" json:"active,omitempty"`
	ComponentName    *string `form:"component_name,omitempty" json:"component_name,omitempty"`
	ComponentVersion *string `form:"component_version,omitempty" json:"component_version,omitempty"`

	// Created The date the finding was created inside DefectDojo.
	//
	// * `` - Any date
	// * `1` - Today
	// * `2` - Past 7 days
	// * `3` - Past 30 days
	// * `4` - Past 90 days
	// * `5` - Current month
	// * `6` - Current year
	// * `7` - Past year
	Created     *FindingsListParamsCreated `form:"created,omitempty" json:"created,omitempty"`
	Cvssv3      *string                    `form:"cvssv3,omitempty" json:"cvssv3,omitempty"`
	Cvssv3Score *float32                   `form:"cvssv3_score,omitempty" json:"cvssv3_score,omitempty"`

	// Cwe Multiple values may be separated by commas.
	Cwe *[]int `form:"cwe,omitempty" json:"cwe,omitempty"`

	// Date The date the flaw was discovered.
	//
	// * `` - Any date
	// * `1` - Today
	// * `2` - Past 7 days
	// * `3` - Past 30 days
	// * `4` - Past 90 days
	// * `5` - Current month
	// * `6` - Current year
	// * `7` - Past year
	Date *FindingsListParamsDate `form:"date,omitempty" json:"date,omitempty"`

	// DefectReviewRequestedBy Multiple values may be separated by commas.
	DefectReviewRequestedBy *[]int  `form:"defect_review_requested_by,omitempty" json:"defect_review_requested_by,omitempty"`
	Description             *string `form:"description,omitempty" json:"description,omitempty"`
	Duplicate               *bool   `form:"duplicate,omitempty" json:"duplicate,omitempty"`
	DuplicateFinding        *int    `form:"duplicate_finding,omitempty" json:"duplicate_finding,omitempty"`
	DynamicFinding          *bool   `form:"dynamic_finding,omitempty" json:"dynamic_finding,omitempty"`
	EffortForFixing         *string `form:"effort_for_fixing,omitempty" json:"effort_for_fixing,omitempty"`

	// Endpoints Multiple values may be separated by commas.
	Endpoints *[]int  `form:"endpoints,omitempty" json:"endpoints,omitempty"`
	FalseP    *bool   `form:"false_p,omitempty" json:"false_p,omitempty"`
	FilePath  *string `form:"file_path,omitempty" json:"file_path,omitempty"`

	// FindingGroup Multiple values may be separated by commas.
	FindingGroup *[]float32 `form:"finding_group,omitempty" json:"finding_group,omitempty"`

	// FoundBy Multiple values may be separated by commas.
	FoundBy  *[]int  `form:"found_by,omitempty" json:"found_by,omitempty"`
	HasJira  *bool   `form:"has_jira,omitempty" json:"has_jira,omitempty"`
	HashCode *string `form:"hash_code,omitempty" json:"hash_code,omitempty"`

	// Id Multiple values may be separated by commas.
	Id     *[]int  `form:"id,omitempty" json:"id,omitempty"`
	Impact *string `form:"impact,omitempty" json:"impact,omitempty"`

	// InheritedTags Internal use tags sepcifically for maintaining parity with product. This field will be present as a subset in the tags field
	InheritedTags *[][]int `form:"inherited_tags,omitempty" json:"inherited_tags,omitempty"`
	IsMitigated   *bool    `form:"is_mitigated,omitempty" json:"is_mitigated,omitempty"`

	// JiraChange The date the linked Jira issue was last modified.
	//
	// * `` - Any date
	// * `1` - Today
	// * `2` - Past 7 days
	// * `3` - Past 30 days
	// * `4` - Past 90 days
	// * `5` - Current month
	// * `6` - Current year
	// * `7` - Past year
	JiraChange *FindingsListParamsJiraChange `form:"jira_change,omitempty" json:"jira_change,omitempty"`

	// JiraCreation The date a Jira issue was created from this finding.
	//
	// * `` - Any date
	// * `1` - Today
	// * `2` - Past 7 days
	// * `3` - Past 30 days
	// * `4` - Past 90 days
	// * `5` - Current month
	// * `6` - Current year
	// * `7` - Past year
	JiraCreation *FindingsListParamsJiraCreation `form:"jira_creation,omitempty" json:"jira_creation,omitempty"`

	// LastReviewed Provides the date the flaw was last 'touched' by a tester.
	//
	// * `` - Any date
	// * `1` - Today
	// * `2` - Past 7 days
	// * `3` - Past 30 days
	// * `4` - Past 90 days
	// * `5` - Current month
	// * `6` - Current year
	// * `7` - Past year
	LastReviewed *FindingsListParamsLastReviewed `form:"last_reviewed,omitempty" json:"last_reviewed,omitempty"`

	// LastReviewedBy Multiple values may be separated by commas.
	LastReviewedBy   *[]int     `form:"last_reviewed_by,omitempty" json:"last_reviewed_by,omitempty"`
	LastStatusUpdate *time.Time `form:"last_status_update,omitempty" json:"last_status_update,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Mitigated Denotes if this flaw has been fixed by storing the date it was fixed.
	//
	// * `` - Any date
	// * `1` - Today
	// * `2` - Past 7 days
	// * `3` - Past 30 days
	// * `4` - Past 90 days
	// * `5` - Current month
	// * `6` - Current year
	// * `7` - Past year
	Mitigated *FindingsListParamsMitigated `form:"mitigated,omitempty" json:"mitigated,omitempty"`

	// MitigatedBy Multiple values may be separated by commas.
	MitigatedBy *[]int  `form:"mitigated_by,omitempty" json:"mitigated_by,omitempty"`
	Mitigation  *string `form:"mitigation,omitempty" json:"mitigation,omitempty"`

	// NbOccurences Multiple values may be separated by commas.
	NbOccurences *[]int `form:"nb_occurences,omitempty" json:"nb_occurences,omitempty"`

	// NotTag Not Tag name contains
	NotTag *string `form:"not_tag,omitempty" json:"not_tag,omitempty"`

	// NotTags Comma seperated list of exact tags not present on model
	NotTags *[]string `form:"not_tags,omitempty" json:"not_tags,omitempty"`

	// NotTestEngagementProductTagsName Comma seperated list of exact tags not present on product
	NotTestEngagementProductTagsName *[]string `form:"not_test__engagement__product__tags__name,omitempty" json:"not_test__engagement__product__tags__name,omitempty"`

	// NotTestEngagementTags Comma seperated list of exact tags not present on engagement
	NotTestEngagementTags *[]string `form:"not_test__engagement__tags,omitempty" json:"not_test__engagement__tags,omitempty"`

	// NotTestTags Comma seperated list of exact tags not present on test
	NotTestTags       *[]string `form:"not_test__tags,omitempty" json:"not_test__tags,omitempty"`
	NumericalSeverity *string   `form:"numerical_severity,omitempty" json:"numerical_severity,omitempty"`

	// O Ordering
	//
	// * `active` - Active
	// * `-active` - Active (descending)
	// * `component_name` - Component name
	// * `-component_name` - Component name (descending)
	// * `component_version` - Component version
	// * `-component_version` - Component version (descending)
	// * `created` - Created
	// * `-created` - Created (descending)
	// * `last_status_update` - Last status update
	// * `-last_status_update` - Last status update (descending)
	// * `last_reviewed` - Last reviewed
	// * `-last_reviewed` - Last reviewed (descending)
	// * `cwe` - Cwe
	// * `-cwe` - Cwe (descending)
	// * `date` - Date
	// * `-date` - Date (descending)
	// * `duplicate` - Duplicate
	// * `-duplicate` - Duplicate (descending)
	// * `dynamic_finding` - Dynamic finding
	// * `-dynamic_finding` - Dynamic finding (descending)
	// * `false_p` - False p
	// * `-false_p` - False p (descending)
	// * `found_by` - Found by
	// * `-found_by` - Found by (descending)
	// * `id` - Id
	// * `-id` - Id (descending)
	// * `is_mitigated` - Is mitigated
	// * `-is_mitigated` - Is mitigated (descending)
	// * `numerical_severity` - Numerical severity
	// * `-numerical_severity` - Numerical severity (descending)
	// * `out_of_scope` - Out of scope
	// * `-out_of_scope` - Out of scope (descending)
	// * `severity` - Severity
	// * `-severity` - Severity (descending)
	// * `reviewers` - Reviewers
	// * `-reviewers` - Reviewers (descending)
	// * `static_finding` - Static finding
	// * `-static_finding` - Static finding (descending)
	// * `test__engagement__product__name` - Test  engagement  product  name
	// * `-test__engagement__product__name` - Test  engagement  product  name (descending)
	// * `title` - Title
	// * `-title` - Title (descending)
	// * `under_defect_review` - Under defect review
	// * `-under_defect_review` - Under defect review (descending)
	// * `under_review` - Under review
	// * `-under_review` - Under review (descending)
	// * `verified` - Verified
	// * `-verified` - Verified (descending)
	O *[]FindingsListParamsO `form:"o,omitempty" json:"o,omitempty"`

	// Offset The initial index from which to return the results.
	Offset                    *int                `form:"offset,omitempty" json:"offset,omitempty"`
	OutOfScope                *bool               `form:"out_of_scope,omitempty" json:"out_of_scope,omitempty"`
	Param                     *string             `form:"param,omitempty" json:"param,omitempty"`
	Payload                   *string             `form:"payload,omitempty" json:"payload,omitempty"`
	PlannedRemediationDate    *openapi_types.Date `form:"planned_remediation_date,omitempty" json:"planned_remediation_date,omitempty"`
	PlannedRemediationVersion *string             `form:"planned_remediation_version,omitempty" json:"planned_remediation_version,omitempty"`

	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch *[]FindingsListParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`

	// ProductName exact product name
	ProductName *string `form:"product_name,omitempty" json:"product_name,omitempty"`

	// ProductNameContains exact product name
	ProductNameContains *string             `form:"product_name_contains,omitempty" json:"product_name_contains,omitempty"`
	PublishDate         *openapi_types.Date `form:"publish_date,omitempty" json:"publish_date,omitempty"`
	References          *string             `form:"references,omitempty" json:"references,omitempty"`

	// RelatedFields Expand finding external relations (engagement, environment, product,                                             product_type, test, test_type)
	RelatedFields *bool `form:"related_fields,omitempty" json:"related_fields,omitempty"`

	// Reporter Multiple values may be separated by commas.
	Reporter *[]int `form:"reporter,omitempty" json:"reporter,omitempty"`

	// ReviewRequestedBy Multiple values may be separated by commas.
	ReviewRequestedBy *[]int `form:"review_requested_by,omitempty" json:"review_requested_by,omitempty"`

	// Reviewers Multiple values may be separated by commas.
	Reviewers          *[]int   `form:"reviewers,omitempty" json:"reviewers,omitempty"`
	RiskAcceptance     *float32 `form:"risk_acceptance,omitempty" json:"risk_acceptance,omitempty"`
	RiskAccepted       *bool    `form:"risk_accepted,omitempty" json:"risk_accepted,omitempty"`
	SastSinkObject     *string  `form:"sast_sink_object,omitempty" json:"sast_sink_object,omitempty"`
	SastSourceFilePath *string  `form:"sast_source_file_path,omitempty" json:"sast_source_file_path,omitempty"`

	// SastSourceLine Multiple values may be separated by commas.
	SastSourceLine   *[]int  `form:"sast_source_line,omitempty" json:"sast_source_line,omitempty"`
	SastSourceObject *string `form:"sast_source_object,omitempty" json:"sast_source_object,omitempty"`

	// ScannerConfidence Multiple values may be separated by commas.
	ScannerConfidence     *[]int              `form:"scanner_confidence,omitempty" json:"scanner_confidence,omitempty"`
	Service               *string             `form:"service,omitempty" json:"service,omitempty"`
	Severity              *string             `form:"severity,omitempty" json:"severity,omitempty"`
	SeverityJustification *string             `form:"severity_justification,omitempty" json:"severity_justification,omitempty"`
	SlaStartDate          *openapi_types.Date `form:"sla_start_date,omitempty" json:"sla_start_date,omitempty"`

	// SonarqubeIssue Multiple values may be separated by commas.
	SonarqubeIssue   *[]int  `form:"sonarqube_issue,omitempty" json:"sonarqube_issue,omitempty"`
	StaticFinding    *bool   `form:"static_finding,omitempty" json:"static_finding,omitempty"`
	StepsToReproduce *string `form:"steps_to_reproduce,omitempty" json:"steps_to_reproduce,omitempty"`

	// Tag Tag name contains
	Tag *string `form:"tag,omitempty" json:"tag,omitempty"`

	// Tags Comma seperated list of exact tags
	Tags *[]string `form:"tags,omitempty" json:"tags,omitempty"`
	Test *int      `form:"test,omitempty" json:"test,omitempty"`

	// TestEngagement Multiple values may be separated by commas.
	TestEngagement *[]int `form:"test__engagement,omitempty" json:"test__engagement,omitempty"`

	// TestEngagementProduct Multiple values may be separated by commas.
	TestEngagementProduct *[]int `form:"test__engagement__product,omitempty" json:"test__engagement__product,omitempty"`

	// TestEngagementProductProdType Multiple values may be separated by commas.
	TestEngagementProductProdType *[]int `form:"test__engagement__product__prod_type,omitempty" json:"test__engagement__product__prod_type,omitempty"`

	// TestEngagementProductTagsName Comma seperated list of exact tags present on product
	TestEngagementProductTagsName *[]string `form:"test__engagement__product__tags__name,omitempty" json:"test__engagement__product__tags__name,omitempty"`

	// TestEngagementTags Comma seperated list of exact tags present on engagement
	TestEngagementTags *[]string `form:"test__engagement__tags,omitempty" json:"test__engagement__tags,omitempty"`

	// TestTags Comma seperated list of exact tags present on test
	TestTags *[]string `form:"test__tags,omitempty" json:"test__tags,omitempty"`

	// TestTestType Multiple values may be separated by commas.
	TestTestType      *[]int  `form:"test__test_type,omitempty" json:"test__test_type,omitempty"`
	Title             *string `form:"title,omitempty" json:"title,omitempty"`
	UnderDefectReview *bool   `form:"under_defect_review,omitempty" json:"under_defect_review,omitempty"`
	UnderReview       *bool   `form:"under_review,omitempty" json:"under_review,omitempty"`
	UniqueIdFromTool  *string `form:"unique_id_from_tool,omitempty" json:"unique_id_from_tool,omitempty"`
	Verified          *bool   `form:"verified,omitempty" json:"verified,omitempty"`
	VulnIdFromTool    *string `form:"vuln_id_from_tool,omitempty" json:"vuln_id_from_tool,omitempty"`
	VulnerabilityId   *string `form:"vulnerability_id,omitempty" json:"vulnerability_id,omitempty"`
}

// FindingsListParamsCreated defines parameters for FindingsList.
type FindingsListParamsCreated float32

// FindingsListParamsDate defines parameters for FindingsList.
type FindingsListParamsDate float32

// FindingsListParamsJiraChange defines parameters for FindingsList.
type FindingsListParamsJiraChange float32

// FindingsListParamsJiraCreation defines parameters for FindingsList.
type FindingsListParamsJiraCreation float32

// FindingsListParamsLastReviewed defines parameters for FindingsList.
type FindingsListParamsLastReviewed float32

// FindingsListParamsMitigated defines parameters for FindingsList.
type FindingsListParamsMitigated float32

// FindingsListParamsO defines parameters for FindingsList.
type FindingsListParamsO string

// FindingsListParamsPrefetch defines parameters for FindingsList.
type FindingsListParamsPrefetch string

// FindingsAcceptRisksCreateJSONBody defines parameters for FindingsAcceptRisksCreate.
type FindingsAcceptRisksCreateJSONBody = []AcceptedRiskRequest

// FindingsAcceptRisksCreateFormdataBody defines parameters for FindingsAcceptRisksCreate.
type FindingsAcceptRisksCreateFormdataBody = struct {
}

// FindingsAcceptRisksCreateMultipartBody defines parameters for FindingsAcceptRisksCreate.
type FindingsAcceptRisksCreateMultipartBody = []AcceptedRiskRequest

// FindingsAcceptRisksCreateParams defines parameters for FindingsAcceptRisksCreate.
type FindingsAcceptRisksCreateParams struct {
	Active           *bool   `form:"active,omitempty" json:"active,omitempty"`
	ComponentName    *string `form:"component_name,omitempty" json:"component_name,omitempty"`
	ComponentVersion *string `form:"component_version,omitempty" json:"component_version,omitempty"`

	// Created The date the finding was created inside DefectDojo.
	//
	// * `` - Any date
	// * `1` - Today
	// * `2` - Past 7 days
	// * `3` - Past 30 days
	// * `4` - Past 90 days
	// * `5` - Current month
	// * `6` - Current year
	// * `7` - Past year
	Created     *FindingsAcceptRisksCreateParamsCreated `form:"created,omitempty" json:"created,omitempty"`
	Cvssv3      *string                                 `form:"cvssv3,omitempty" json:"cvssv3,omitempty"`
	Cvssv3Score *float32                                `form:"cvssv3_score,omitempty" json:"cvssv3_score,omitempty"`

	// Cwe Multiple values may be separated by commas.
	Cwe *[]int `form:"cwe,omitempty" json:"cwe,omitempty"`

	// Date The date the flaw was discovered.
	//
	// * `` - Any date
	// * `1` - Today
	// * `2` - Past 7 days
	// * `3` - Past 30 days
	// * `4` - Past 90 days
	// * `5` - Current month
	// * `6` - Current year
	// * `7` - Past year
	Date *FindingsAcceptRisksCreateParamsDate `form:"date,omitempty" json:"date,omitempty"`

	// DefectReviewRequestedBy Multiple values may be separated by commas.
	DefectReviewRequestedBy *[]int  `form:"defect_review_requested_by,omitempty" json:"defect_review_requested_by,omitempty"`
	Description             *string `form:"description,omitempty" json:"description,omitempty"`
	Duplicate               *bool   `form:"duplicate,omitempty" json:"duplicate,omitempty"`
	DuplicateFinding        *int    `form:"duplicate_finding,omitempty" json:"duplicate_finding,omitempty"`
	DynamicFinding          *bool   `form:"dynamic_finding,omitempty" json:"dynamic_finding,omitempty"`
	EffortForFixing         *string `form:"effort_for_fixing,omitempty" json:"effort_for_fixing,omitempty"`

	// Endpoints Multiple values may be separated by commas.
	Endpoints *[]int  `form:"endpoints,omitempty" json:"endpoints,omitempty"`
	FalseP    *bool   `form:"false_p,omitempty" json:"false_p,omitempty"`
	FilePath  *string `form:"file_path,omitempty" json:"file_path,omitempty"`

	// FindingGroup Multiple values may be separated by commas.
	FindingGroup *[]float32 `form:"finding_group,omitempty" json:"finding_group,omitempty"`

	// FoundBy Multiple values may be separated by commas.
	FoundBy  *[]int  `form:"found_by,omitempty" json:"found_by,omitempty"`
	HasJira  *bool   `form:"has_jira,omitempty" json:"has_jira,omitempty"`
	HashCode *string `form:"hash_code,omitempty" json:"hash_code,omitempty"`

	// Id Multiple values may be separated by commas.
	Id     *[]int  `form:"id,omitempty" json:"id,omitempty"`
	Impact *string `form:"impact,omitempty" json:"impact,omitempty"`

	// InheritedTags Internal use tags sepcifically for maintaining parity with product. This field will be present as a subset in the tags field
	InheritedTags *[][]int `form:"inherited_tags,omitempty" json:"inherited_tags,omitempty"`
	IsMitigated   *bool    `form:"is_mitigated,omitempty" json:"is_mitigated,omitempty"`

	// JiraChange The date the linked Jira issue was last modified.
	//
	// * `` - Any date
	// * `1` - Today
	// * `2` - Past 7 days
	// * `3` - Past 30 days
	// * `4` - Past 90 days
	// * `5` - Current month
	// * `6` - Current year
	// * `7` - Past year
	JiraChange *FindingsAcceptRisksCreateParamsJiraChange `form:"jira_change,omitempty" json:"jira_change,omitempty"`

	// JiraCreation The date a Jira issue was created from this finding.
	//
	// * `` - Any date
	// * `1` - Today
	// * `2` - Past 7 days
	// * `3` - Past 30 days
	// * `4` - Past 90 days
	// * `5` - Current month
	// * `6` - Current year
	// * `7` - Past year
	JiraCreation *FindingsAcceptRisksCreateParamsJiraCreation `form:"jira_creation,omitempty" json:"jira_creation,omitempty"`

	// LastReviewed Provides the date the flaw was last 'touched' by a tester.
	//
	// * `` - Any date
	// * `1` - Today
	// * `2` - Past 7 days
	// * `3` - Past 30 days
	// * `4` - Past 90 days
	// * `5` - Current month
	// * `6` - Current year
	// * `7` - Past year
	LastReviewed *FindingsAcceptRisksCreateParamsLastReviewed `form:"last_reviewed,omitempty" json:"last_reviewed,omitempty"`

	// LastReviewedBy Multiple values may be separated by commas.
	LastReviewedBy   *[]int     `form:"last_reviewed_by,omitempty" json:"last_reviewed_by,omitempty"`
	LastStatusUpdate *time.Time `form:"last_status_update,omitempty" json:"last_status_update,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Mitigated Denotes if this flaw has been fixed by storing the date it was fixed.
	//
	// * `` - Any date
	// * `1` - Today
	// * `2` - Past 7 days
	// * `3` - Past 30 days
	// * `4` - Past 90 days
	// * `5` - Current month
	// * `6` - Current year
	// * `7` - Past year
	Mitigated *FindingsAcceptRisksCreateParamsMitigated `form:"mitigated,omitempty" json:"mitigated,omitempty"`

	// MitigatedBy Multiple values may be separated by commas.
	MitigatedBy *[]int  `form:"mitigated_by,omitempty" json:"mitigated_by,omitempty"`
	Mitigation  *string `form:"mitigation,omitempty" json:"mitigation,omitempty"`

	// NbOccurences Multiple values may be separated by commas.
	NbOccurences *[]int `form:"nb_occurences,omitempty" json:"nb_occurences,omitempty"`

	// NotTag Not Tag name contains
	NotTag *string `form:"not_tag,omitempty" json:"not_tag,omitempty"`

	// NotTags Comma seperated list of exact tags not present on model
	NotTags *[]string `form:"not_tags,omitempty" json:"not_tags,omitempty"`

	// NotTestEngagementProductTagsName Comma seperated list of exact tags not present on product
	NotTestEngagementProductTagsName *[]string `form:"not_test__engagement__product__tags__name,omitempty" json:"not_test__engagement__product__tags__name,omitempty"`

	// NotTestEngagementTags Comma seperated list of exact tags not present on engagement
	NotTestEngagementTags *[]string `form:"not_test__engagement__tags,omitempty" json:"not_test__engagement__tags,omitempty"`

	// NotTestTags Comma seperated list of exact tags not present on test
	NotTestTags       *[]string `form:"not_test__tags,omitempty" json:"not_test__tags,omitempty"`
	NumericalSeverity *string   `form:"numerical_severity,omitempty" json:"numerical_severity,omitempty"`

	// O Ordering
	//
	// * `active` - Active
	// * `-active` - Active (descending)
	// * `component_name` - Component name
	// * `-component_name` - Component name (descending)
	// * `component_version` - Component version
	// * `-component_version` - Component version (descending)
	// * `created` - Created
	// * `-created` - Created (descending)
	// * `last_status_update` - Last status update
	// * `-last_status_update` - Last status update (descending)
	// * `last_reviewed` - Last reviewed
	// * `-last_reviewed` - Last reviewed (descending)
	// * `cwe` - Cwe
	// * `-cwe` - Cwe (descending)
	// * `date` - Date
	// * `-date` - Date (descending)
	// * `duplicate` - Duplicate
	// * `-duplicate` - Duplicate (descending)
	// * `dynamic_finding` - Dynamic finding
	// * `-dynamic_finding` - Dynamic finding (descending)
	// * `false_p` - False p
	// * `-false_p` - False p (descending)
	// * `found_by` - Found by
	// * `-found_by` - Found by (descending)
	// * `id` - Id
	// * `-id` - Id (descending)
	// * `is_mitigated` - Is mitigated
	// * `-is_mitigated` - Is mitigated (descending)
	// * `numerical_severity` - Numerical severity
	// * `-numerical_severity` - Numerical severity (descending)
	// * `out_of_scope` - Out of scope
	// * `-out_of_scope` - Out of scope (descending)
	// * `severity` - Severity
	// * `-severity` - Severity (descending)
	// * `reviewers` - Reviewers
	// * `-reviewers` - Reviewers (descending)
	// * `static_finding` - Static finding
	// * `-static_finding` - Static finding (descending)
	// * `test__engagement__product__name` - Test  engagement  product  name
	// * `-test__engagement__product__name` - Test  engagement  product  name (descending)
	// * `title` - Title
	// * `-title` - Title (descending)
	// * `under_defect_review` - Under defect review
	// * `-under_defect_review` - Under defect review (descending)
	// * `under_review` - Under review
	// * `-under_review` - Under review (descending)
	// * `verified` - Verified
	// * `-verified` - Verified (descending)
	O *[]FindingsAcceptRisksCreateParamsO `form:"o,omitempty" json:"o,omitempty"`

	// Offset The initial index from which to return the results.
	Offset                    *int                `form:"offset,omitempty" json:"offset,omitempty"`
	OutOfScope                *bool               `form:"out_of_scope,omitempty" json:"out_of_scope,omitempty"`
	Param                     *string             `form:"param,omitempty" json:"param,omitempty"`
	Payload                   *string             `form:"payload,omitempty" json:"payload,omitempty"`
	PlannedRemediationDate    *openapi_types.Date `form:"planned_remediation_date,omitempty" json:"planned_remediation_date,omitempty"`
	PlannedRemediationVersion *string             `form:"planned_remediation_version,omitempty" json:"planned_remediation_version,omitempty"`

	// ProductName exact product name
	ProductName *string `form:"product_name,omitempty" json:"product_name,omitempty"`

	// ProductNameContains exact product name
	ProductNameContains *string             `form:"product_name_contains,omitempty" json:"product_name_contains,omitempty"`
	PublishDate         *openapi_types.Date `form:"publish_date,omitempty" json:"publish_date,omitempty"`
	References          *string             `form:"references,omitempty" json:"references,omitempty"`

	// Reporter Multiple values may be separated by commas.
	Reporter *[]int `form:"reporter,omitempty" json:"reporter,omitempty"`

	// ReviewRequestedBy Multiple values may be separated by commas.
	ReviewRequestedBy *[]int `form:"review_requested_by,omitempty" json:"review_requested_by,omitempty"`

	// Reviewers Multiple values may be separated by commas.
	Reviewers          *[]int   `form:"reviewers,omitempty" json:"reviewers,omitempty"`
	RiskAcceptance     *float32 `form:"risk_acceptance,omitempty" json:"risk_acceptance,omitempty"`
	RiskAccepted       *bool    `form:"risk_accepted,omitempty" json:"risk_accepted,omitempty"`
	SastSinkObject     *string  `form:"sast_sink_object,omitempty" json:"sast_sink_object,omitempty"`
	SastSourceFilePath *string  `form:"sast_source_file_path,omitempty" json:"sast_source_file_path,omitempty"`

	// SastSourceLine Multiple values may be separated by commas.
	SastSourceLine   *[]int  `form:"sast_source_line,omitempty" json:"sast_source_line,omitempty"`
	SastSourceObject *string `form:"sast_source_object,omitempty" json:"sast_source_object,omitempty"`

	// ScannerConfidence Multiple values may be separated by commas.
	ScannerConfidence     *[]int              `form:"scanner_confidence,omitempty" json:"scanner_confidence,omitempty"`
	Service               *string             `form:"service,omitempty" json:"service,omitempty"`
	Severity              *string             `form:"severity,omitempty" json:"severity,omitempty"`
	SeverityJustification *string             `form:"severity_justification,omitempty" json:"severity_justification,omitempty"`
	SlaStartDate          *openapi_types.Date `form:"sla_start_date,omitempty" json:"sla_start_date,omitempty"`

	// SonarqubeIssue Multiple values may be separated by commas.
	SonarqubeIssue   *[]int  `form:"sonarqube_issue,omitempty" json:"sonarqube_issue,omitempty"`
	StaticFinding    *bool   `form:"static_finding,omitempty" json:"static_finding,omitempty"`
	StepsToReproduce *string `form:"steps_to_reproduce,omitempty" json:"steps_to_reproduce,omitempty"`

	// Tag Tag name contains
	Tag *string `form:"tag,omitempty" json:"tag,omitempty"`

	// Tags Comma seperated list of exact tags
	Tags *[]string `form:"tags,omitempty" json:"tags,omitempty"`
	Test *int      `form:"test,omitempty" json:"test,omitempty"`

	// TestEngagement Multiple values may be separated by commas.
	TestEngagement *[]int `form:"test__engagement,omitempty" json:"test__engagement,omitempty"`

	// TestEngagementProduct Multiple values may be separated by commas.
	TestEngagementProduct *[]int `form:"test__engagement__product,omitempty" json:"test__engagement__product,omitempty"`

	// TestEngagementProductProdType Multiple values may be separated by commas.
	TestEngagementProductProdType *[]int `form:"test__engagement__product__prod_type,omitempty" json:"test__engagement__product__prod_type,omitempty"`

	// TestEngagementProductTagsName Comma seperated list of exact tags present on product
	TestEngagementProductTagsName *[]string `form:"test__engagement__product__tags__name,omitempty" json:"test__engagement__product__tags__name,omitempty"`

	// TestEngagementTags Comma seperated list of exact tags present on engagement
	TestEngagementTags *[]string `form:"test__engagement__tags,omitempty" json:"test__engagement__tags,omitempty"`

	// TestTags Comma seperated list of exact tags present on test
	TestTags *[]string `form:"test__tags,omitempty" json:"test__tags,omitempty"`

	// TestTestType Multiple values may be separated by commas.
	TestTestType      *[]int  `form:"test__test_type,omitempty" json:"test__test_type,omitempty"`
	Title             *string `form:"title,omitempty" json:"title,omitempty"`
	UnderDefectReview *bool   `form:"under_defect_review,omitempty" json:"under_defect_review,omitempty"`
	UnderReview       *bool   `form:"under_review,omitempty" json:"under_review,omitempty"`
	UniqueIdFromTool  *string `form:"unique_id_from_tool,omitempty" json:"unique_id_from_tool,omitempty"`
	Verified          *bool   `form:"verified,omitempty" json:"verified,omitempty"`
	VulnIdFromTool    *string `form:"vuln_id_from_tool,omitempty" json:"vuln_id_from_tool,omitempty"`
	VulnerabilityId   *string `form:"vulnerability_id,omitempty" json:"vulnerability_id,omitempty"`
}

// FindingsAcceptRisksCreateParamsCreated defines parameters for FindingsAcceptRisksCreate.
type FindingsAcceptRisksCreateParamsCreated float32

// FindingsAcceptRisksCreateParamsDate defines parameters for FindingsAcceptRisksCreate.
type FindingsAcceptRisksCreateParamsDate float32

// FindingsAcceptRisksCreateParamsJiraChange defines parameters for FindingsAcceptRisksCreate.
type FindingsAcceptRisksCreateParamsJiraChange float32

// FindingsAcceptRisksCreateParamsJiraCreation defines parameters for FindingsAcceptRisksCreate.
type FindingsAcceptRisksCreateParamsJiraCreation float32

// FindingsAcceptRisksCreateParamsLastReviewed defines parameters for FindingsAcceptRisksCreate.
type FindingsAcceptRisksCreateParamsLastReviewed float32

// FindingsAcceptRisksCreateParamsMitigated defines parameters for FindingsAcceptRisksCreate.
type FindingsAcceptRisksCreateParamsMitigated float32

// FindingsAcceptRisksCreateParamsO defines parameters for FindingsAcceptRisksCreate.
type FindingsAcceptRisksCreateParamsO string

// FindingsRetrieveParams defines parameters for FindingsRetrieve.
type FindingsRetrieveParams struct {
	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch *[]FindingsRetrieveParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`

	// RelatedFields Expand finding external relations (engagement, environment, product,                                             product_type, test, test_type)
	RelatedFields *bool `form:"related_fields,omitempty" json:"related_fields,omitempty"`
}

// FindingsRetrieveParamsPrefetch defines parameters for FindingsRetrieve.
type FindingsRetrieveParamsPrefetch string

// FindingsDeletePreviewListParams defines parameters for FindingsDeletePreviewList.
type FindingsDeletePreviewListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// FindingsMetadataDestroyParams defines parameters for FindingsMetadataDestroy.
type FindingsMetadataDestroyParams struct {
	// Name name of the metadata to retrieve. If name is empty, return all the                                     metadata associated with the finding
	Name int `form:"name" json:"name"`
}

// GlobalRolesListParams defines parameters for GlobalRolesList.
type GlobalRolesListParams struct {
	Group *int `form:"group,omitempty" json:"group,omitempty"`
	Id    *int `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
	Role   *int `form:"role,omitempty" json:"role,omitempty"`
	User   *int `form:"user,omitempty" json:"user,omitempty"`
}

// GlobalRolesDeletePreviewListParams defines parameters for GlobalRolesDeletePreviewList.
type GlobalRolesDeletePreviewListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// JiraConfigurationsListParams defines parameters for JiraConfigurationsList.
type JiraConfigurationsListParams struct {
	Id *int `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Url    *string `form:"url,omitempty" json:"url,omitempty"`
}

// JiraConfigurationsDeletePreviewListParams defines parameters for JiraConfigurationsDeletePreviewList.
type JiraConfigurationsDeletePreviewListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// JiraFindingMappingsListParams defines parameters for JiraFindingMappingsList.
type JiraFindingMappingsListParams struct {
	Engagement   *int    `form:"engagement,omitempty" json:"engagement,omitempty"`
	Finding      *int    `form:"finding,omitempty" json:"finding,omitempty"`
	FindingGroup *int    `form:"finding_group,omitempty" json:"finding_group,omitempty"`
	Id           *int    `form:"id,omitempty" json:"id,omitempty"`
	JiraId       *string `form:"jira_id,omitempty" json:"jira_id,omitempty"`
	JiraKey      *string `form:"jira_key,omitempty" json:"jira_key,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// JiraFindingMappingsDeletePreviewListParams defines parameters for JiraFindingMappingsDeletePreviewList.
type JiraFindingMappingsDeletePreviewListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// JiraInstancesListParams defines parameters for JiraInstancesList.
type JiraInstancesListParams struct {
	Id *int `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Url    *string `form:"url,omitempty" json:"url,omitempty"`
}

// JiraInstancesDeletePreviewListParams defines parameters for JiraInstancesDeletePreviewList.
type JiraInstancesDeletePreviewListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// JiraProductConfigurationsListParams defines parameters for JiraProductConfigurationsList.
type JiraProductConfigurationsListParams struct {
	Component                   *string `form:"component,omitempty" json:"component,omitempty"`
	EnableEngagementEpicMapping *bool   `form:"enable_engagement_epic_mapping,omitempty" json:"enable_engagement_epic_mapping,omitempty"`
	Engagement                  *int    `form:"engagement,omitempty" json:"engagement,omitempty"`
	Id                          *int    `form:"id,omitempty" json:"id,omitempty"`
	JiraInstance                *int    `form:"jira_instance,omitempty" json:"jira_instance,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset        *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Product       *int    `form:"product,omitempty" json:"product,omitempty"`
	ProjectKey    *string `form:"project_key,omitempty" json:"project_key,omitempty"`
	PushAllIssues *bool   `form:"push_all_issues,omitempty" json:"push_all_issues,omitempty"`
	PushNotes     *bool   `form:"push_notes,omitempty" json:"push_notes,omitempty"`
}

// JiraProductConfigurationsDeletePreviewListParams defines parameters for JiraProductConfigurationsDeletePreviewList.
type JiraProductConfigurationsDeletePreviewListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// JiraProjectsListParams defines parameters for JiraProjectsList.
type JiraProjectsListParams struct {
	Component                   *string `form:"component,omitempty" json:"component,omitempty"`
	EnableEngagementEpicMapping *bool   `form:"enable_engagement_epic_mapping,omitempty" json:"enable_engagement_epic_mapping,omitempty"`
	Engagement                  *int    `form:"engagement,omitempty" json:"engagement,omitempty"`
	Id                          *int    `form:"id,omitempty" json:"id,omitempty"`
	JiraInstance                *int    `form:"jira_instance,omitempty" json:"jira_instance,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset        *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Product       *int    `form:"product,omitempty" json:"product,omitempty"`
	ProjectKey    *string `form:"project_key,omitempty" json:"project_key,omitempty"`
	PushAllIssues *bool   `form:"push_all_issues,omitempty" json:"push_all_issues,omitempty"`
	PushNotes     *bool   `form:"push_notes,omitempty" json:"push_notes,omitempty"`
}

// JiraProjectsDeletePreviewListParams defines parameters for JiraProjectsDeletePreviewList.
type JiraProjectsDeletePreviewListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// LanguageTypesListParams defines parameters for LanguageTypesList.
type LanguageTypesListParams struct {
	Color    *string `form:"color,omitempty" json:"color,omitempty"`
	Id       *int    `form:"id,omitempty" json:"id,omitempty"`
	Language *string `form:"language,omitempty" json:"language,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// LanguageTypesDeletePreviewListParams defines parameters for LanguageTypesDeletePreviewList.
type LanguageTypesDeletePreviewListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// LanguagesListParams defines parameters for LanguagesList.
type LanguagesListParams struct {
	Id       *int `form:"id,omitempty" json:"id,omitempty"`
	Language *int `form:"language,omitempty" json:"language,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch *[]LanguagesListParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
	Product  *int                           `form:"product,omitempty" json:"product,omitempty"`
}

// LanguagesListParamsPrefetch defines parameters for LanguagesList.
type LanguagesListParamsPrefetch string

// LanguagesRetrieveParams defines parameters for LanguagesRetrieve.
type LanguagesRetrieveParams struct {
	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch *[]LanguagesRetrieveParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
}

// LanguagesRetrieveParamsPrefetch defines parameters for LanguagesRetrieve.
type LanguagesRetrieveParamsPrefetch string

// LanguagesDeletePreviewListParams defines parameters for LanguagesDeletePreviewList.
type LanguagesDeletePreviewListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// MetadataListParams defines parameters for MetadataList.
type MetadataListParams struct {
	Endpoint *int `form:"endpoint,omitempty" json:"endpoint,omitempty"`
	Finding  *int `form:"finding,omitempty" json:"finding,omitempty"`
	Id       *int `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Name  *string `form:"name,omitempty" json:"name,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch *[]MetadataListParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
	Product  *int                          `form:"product,omitempty" json:"product,omitempty"`
	Value    *string                       `form:"value,omitempty" json:"value,omitempty"`
}

// MetadataListParamsPrefetch defines parameters for MetadataList.
type MetadataListParamsPrefetch string

// MetadataRetrieveParams defines parameters for MetadataRetrieve.
type MetadataRetrieveParams struct {
	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch *[]MetadataRetrieveParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
}

// MetadataRetrieveParamsPrefetch defines parameters for MetadataRetrieve.
type MetadataRetrieveParamsPrefetch string

// MetadataDeletePreviewListParams defines parameters for MetadataDeletePreviewList.
type MetadataDeletePreviewListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// NetworkLocationsListParams defines parameters for NetworkLocationsList.
type NetworkLocationsListParams struct {
	Id *int `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit    *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Location *string `form:"location,omitempty" json:"location,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// NetworkLocationsDeletePreviewListParams defines parameters for NetworkLocationsDeletePreviewList.
type NetworkLocationsDeletePreviewListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// NoteTypeListParams defines parameters for NoteTypeList.
type NoteTypeListParams struct {
	Description *string `form:"description,omitempty" json:"description,omitempty"`
	Id          *int    `form:"id,omitempty" json:"id,omitempty"`
	IsActive    *bool   `form:"is_active,omitempty" json:"is_active,omitempty"`
	IsMandatory *bool   `form:"is_mandatory,omitempty" json:"is_mandatory,omitempty"`
	IsSingle    *bool   `form:"is_single,omitempty" json:"is_single,omitempty"`

	// Limit Number of results to return per page.
	Limit *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Name  *string `form:"name,omitempty" json:"name,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// NoteTypeDeletePreviewListParams defines parameters for NoteTypeDeletePreviewList.
type NoteTypeDeletePreviewListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// NotesListParams defines parameters for NotesList.
type NotesListParams struct {
	Author   *int       `form:"author,omitempty" json:"author,omitempty"`
	Date     *time.Time `form:"date,omitempty" json:"date,omitempty"`
	EditTime *time.Time `form:"edit_time,omitempty" json:"edit_time,omitempty"`
	Edited   *bool      `form:"edited,omitempty" json:"edited,omitempty"`
	Editor   *int       `form:"editor,omitempty" json:"editor,omitempty"`
	Entry    *string    `form:"entry,omitempty" json:"entry,omitempty"`
	Id       *int       `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset  *int  `form:"offset,omitempty" json:"offset,omitempty"`
	Private *bool `form:"private,omitempty" json:"private,omitempty"`
}

// NotificationsListParams defines parameters for NotificationsList.
type NotificationsListParams struct {
	Id *int `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch *[]NotificationsListParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
	Product  *int                               `form:"product,omitempty" json:"product,omitempty"`
	Template *bool                              `form:"template,omitempty" json:"template,omitempty"`
	User     *int                               `form:"user,omitempty" json:"user,omitempty"`
}

// NotificationsListParamsPrefetch defines parameters for NotificationsList.
type NotificationsListParamsPrefetch string

// NotificationsRetrieveParams defines parameters for NotificationsRetrieve.
type NotificationsRetrieveParams struct {
	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch *[]NotificationsRetrieveParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
}

// NotificationsRetrieveParamsPrefetch defines parameters for NotificationsRetrieve.
type NotificationsRetrieveParamsPrefetch string

// NotificationsDeletePreviewListParams defines parameters for NotificationsDeletePreviewList.
type NotificationsDeletePreviewListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// Oa3SchemaRetrieveParams defines parameters for Oa3SchemaRetrieve.
type Oa3SchemaRetrieveParams struct {
	Format *Oa3SchemaRetrieveParamsFormat `form:"format,omitempty" json:"format,omitempty"`
	Lang   *Oa3SchemaRetrieveParamsLang   `form:"lang,omitempty" json:"lang,omitempty"`
}

// Oa3SchemaRetrieveParamsFormat defines parameters for Oa3SchemaRetrieve.
type Oa3SchemaRetrieveParamsFormat string

// Oa3SchemaRetrieveParamsLang defines parameters for Oa3SchemaRetrieve.
type Oa3SchemaRetrieveParamsLang string

// ProductApiScanConfigurationsListParams defines parameters for ProductApiScanConfigurationsList.
type ProductApiScanConfigurationsListParams struct {
	Id *int `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset            *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Product           *int    `form:"product,omitempty" json:"product,omitempty"`
	ServiceKey1       *string `form:"service_key_1,omitempty" json:"service_key_1,omitempty"`
	ServiceKey2       *string `form:"service_key_2,omitempty" json:"service_key_2,omitempty"`
	ServiceKey3       *string `form:"service_key_3,omitempty" json:"service_key_3,omitempty"`
	ToolConfiguration *int    `form:"tool_configuration,omitempty" json:"tool_configuration,omitempty"`
}

// ProductApiScanConfigurationsDeletePreviewListParams defines parameters for ProductApiScanConfigurationsDeletePreviewList.
type ProductApiScanConfigurationsDeletePreviewListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ProductGroupsListParams defines parameters for ProductGroupsList.
type ProductGroupsListParams struct {
	GroupId *int `form:"group_id,omitempty" json:"group_id,omitempty"`
	Id      *int `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch  *[]ProductGroupsListParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
	ProductId *int                               `form:"product_id,omitempty" json:"product_id,omitempty"`
}

// ProductGroupsListParamsPrefetch defines parameters for ProductGroupsList.
type ProductGroupsListParamsPrefetch string

// ProductGroupsRetrieveParams defines parameters for ProductGroupsRetrieve.
type ProductGroupsRetrieveParams struct {
	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch *[]ProductGroupsRetrieveParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
}

// ProductGroupsRetrieveParamsPrefetch defines parameters for ProductGroupsRetrieve.
type ProductGroupsRetrieveParamsPrefetch string

// ProductGroupsDeletePreviewListParams defines parameters for ProductGroupsDeletePreviewList.
type ProductGroupsDeletePreviewListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ProductMembersListParams defines parameters for ProductMembersList.
type ProductMembersListParams struct {
	Id *int `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch  *[]ProductMembersListParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
	ProductId *int                                `form:"product_id,omitempty" json:"product_id,omitempty"`
	UserId    *int                                `form:"user_id,omitempty" json:"user_id,omitempty"`
}

// ProductMembersListParamsPrefetch defines parameters for ProductMembersList.
type ProductMembersListParamsPrefetch string

// ProductMembersRetrieveParams defines parameters for ProductMembersRetrieve.
type ProductMembersRetrieveParams struct {
	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch *[]ProductMembersRetrieveParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
}

// ProductMembersRetrieveParamsPrefetch defines parameters for ProductMembersRetrieve.
type ProductMembersRetrieveParamsPrefetch string

// ProductMembersDeletePreviewListParams defines parameters for ProductMembersDeletePreviewList.
type ProductMembersDeletePreviewListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ProductTypeGroupsListParams defines parameters for ProductTypeGroupsList.
type ProductTypeGroupsListParams struct {
	GroupId *int `form:"group_id,omitempty" json:"group_id,omitempty"`
	Id      *int `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch      *[]ProductTypeGroupsListParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
	ProductTypeId *int                                   `form:"product_type_id,omitempty" json:"product_type_id,omitempty"`
}

// ProductTypeGroupsListParamsPrefetch defines parameters for ProductTypeGroupsList.
type ProductTypeGroupsListParamsPrefetch string

// ProductTypeGroupsRetrieveParams defines parameters for ProductTypeGroupsRetrieve.
type ProductTypeGroupsRetrieveParams struct {
	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch *[]ProductTypeGroupsRetrieveParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
}

// ProductTypeGroupsRetrieveParamsPrefetch defines parameters for ProductTypeGroupsRetrieve.
type ProductTypeGroupsRetrieveParamsPrefetch string

// ProductTypeGroupsDeletePreviewListParams defines parameters for ProductTypeGroupsDeletePreviewList.
type ProductTypeGroupsDeletePreviewListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ProductTypeMembersListParams defines parameters for ProductTypeMembersList.
type ProductTypeMembersListParams struct {
	Id *int `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch      *[]ProductTypeMembersListParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
	ProductTypeId *int                                    `form:"product_type_id,omitempty" json:"product_type_id,omitempty"`
	UserId        *int                                    `form:"user_id,omitempty" json:"user_id,omitempty"`
}

// ProductTypeMembersListParamsPrefetch defines parameters for ProductTypeMembersList.
type ProductTypeMembersListParamsPrefetch string

// ProductTypeMembersRetrieveParams defines parameters for ProductTypeMembersRetrieve.
type ProductTypeMembersRetrieveParams struct {
	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch *[]ProductTypeMembersRetrieveParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
}

// ProductTypeMembersRetrieveParamsPrefetch defines parameters for ProductTypeMembersRetrieve.
type ProductTypeMembersRetrieveParamsPrefetch string

// ProductTypeMembersDeletePreviewListParams defines parameters for ProductTypeMembersDeletePreviewList.
type ProductTypeMembersDeletePreviewListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ProductTypesListParams defines parameters for ProductTypesList.
type ProductTypesListParams struct {
	Created         *time.Time `form:"created,omitempty" json:"created,omitempty"`
	CriticalProduct *bool      `form:"critical_product,omitempty" json:"critical_product,omitempty"`
	Id              *int       `form:"id,omitempty" json:"id,omitempty"`
	KeyProduct      *bool      `form:"key_product,omitempty" json:"key_product,omitempty"`

	// Limit Number of results to return per page.
	Limit *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Name  *string `form:"name,omitempty" json:"name,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch *[]ProductTypesListParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
	Updated  *time.Time                        `form:"updated,omitempty" json:"updated,omitempty"`
}

// ProductTypesListParamsPrefetch defines parameters for ProductTypesList.
type ProductTypesListParamsPrefetch string

// ProductTypesRetrieveParams defines parameters for ProductTypesRetrieve.
type ProductTypesRetrieveParams struct {
	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch *[]ProductTypesRetrieveParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
}

// ProductTypesRetrieveParamsPrefetch defines parameters for ProductTypesRetrieve.
type ProductTypesRetrieveParamsPrefetch string

// ProductTypesDeletePreviewListParams defines parameters for ProductTypesDeletePreviewList.
type ProductTypesDeletePreviewListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ProductsListParams defines parameters for ProductsList.
type ProductsListParams struct {
	BusinessCriticality *string `form:"business_criticality,omitempty" json:"business_criticality,omitempty"`

	// Created * `` - Any date
	// * `1` - Today
	// * `2` - Past 7 days
	// * `3` - Past 30 days
	// * `4` - Past 90 days
	// * `5` - Current month
	// * `6` - Current year
	// * `7` - Past year
	Created          *ProductsListParamsCreated `form:"created,omitempty" json:"created,omitempty"`
	Description      *string                    `form:"description,omitempty" json:"description,omitempty"`
	ExternalAudience *bool                      `form:"external_audience,omitempty" json:"external_audience,omitempty"`

	// Id Multiple values may be separated by commas.
	Id                 *[]int  `form:"id,omitempty" json:"id,omitempty"`
	InternetAccessible *bool   `form:"internet_accessible,omitempty" json:"internet_accessible,omitempty"`
	Lifecycle          *string `form:"lifecycle,omitempty" json:"lifecycle,omitempty"`

	// Limit Number of results to return per page.
	Limit     *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Name      *string `form:"name,omitempty" json:"name,omitempty"`
	NameExact *string `form:"name_exact,omitempty" json:"name_exact,omitempty"`

	// NotTag Not Tag name contains
	NotTag *string `form:"not_tag,omitempty" json:"not_tag,omitempty"`

	// NotTags Comma seperated list of exact tags not present on product
	NotTags *[]string `form:"not_tags,omitempty" json:"not_tags,omitempty"`

	// O Ordering
	//
	// * `id` - Id
	// * `-id` - Id (descending)
	// * `tid` - Tid
	// * `-tid` - Tid (descending)
	// * `name` - Name
	// * `-name` - Name (descending)
	// * `created` - Created
	// * `-created` - Created (descending)
	// * `prod_numeric_grade` - Prod numeric grade
	// * `-prod_numeric_grade` - Prod numeric grade (descending)
	// * `business_criticality` - Business criticality
	// * `-business_criticality` - Business criticality (descending)
	// * `platform` - Platform
	// * `-platform` - Platform (descending)
	// * `lifecycle` - Lifecycle
	// * `-lifecycle` - Lifecycle (descending)
	// * `origin` - Origin
	// * `-origin` - Origin (descending)
	// * `revenue` - Revenue
	// * `-revenue` - Revenue (descending)
	// * `external_audience` - External audience
	// * `-external_audience` - External audience (descending)
	// * `internet_accessible` - Internet accessible
	// * `-internet_accessible` - Internet accessible (descending)
	// * `product_manager` - Product manager
	// * `-product_manager` - Product manager (descending)
	// * `product_manager__first_name` - Product manager  first name
	// * `-product_manager__first_name` - Product manager  first name (descending)
	// * `product_manager__last_name` - Product manager  last name
	// * `-product_manager__last_name` - Product manager  last name (descending)
	// * `technical_contact` - Technical contact
	// * `-technical_contact` - Technical contact (descending)
	// * `technical_contact__first_name` - Technical contact  first name
	// * `-technical_contact__first_name` - Technical contact  first name (descending)
	// * `technical_contact__last_name` - Technical contact  last name
	// * `-technical_contact__last_name` - Technical contact  last name (descending)
	// * `team_manager` - Team manager
	// * `-team_manager` - Team manager (descending)
	// * `team_manager__first_name` - Team manager  first name
	// * `-team_manager__first_name` - Team manager  first name (descending)
	// * `team_manager__last_name` - Team manager  last name
	// * `-team_manager__last_name` - Team manager  last name (descending)
	// * `prod_type` - Prod type
	// * `-prod_type` - Prod type (descending)
	// * `prod_type__name` - Prod type  name
	// * `-prod_type__name` - Prod type  name (descending)
	// * `updated` - Updated
	// * `-updated` - Updated (descending)
	// * `user_records` - User records
	// * `-user_records` - User records (descending)
	O *[]ProductsListParamsO `form:"o,omitempty" json:"o,omitempty"`

	// Offset The initial index from which to return the results.
	Offset   *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Origin   *string `form:"origin,omitempty" json:"origin,omitempty"`
	Platform *string `form:"platform,omitempty" json:"platform,omitempty"`

	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch *[]ProductsListParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`

	// ProdNumericGrade Multiple values may be separated by commas.
	ProdNumericGrade *[]int `form:"prod_numeric_grade,omitempty" json:"prod_numeric_grade,omitempty"`

	// ProdType Multiple values may be separated by commas.
	ProdType *[]int `form:"prod_type,omitempty" json:"prod_type,omitempty"`

	// ProductManager Multiple values may be separated by commas.
	ProductManager *[]int `form:"product_manager,omitempty" json:"product_manager,omitempty"`

	// Regulations Multiple values may be separated by commas.
	Regulations *[]int   `form:"regulations,omitempty" json:"regulations,omitempty"`
	Revenue     *float32 `form:"revenue,omitempty" json:"revenue,omitempty"`

	// Tag Tag name contains
	Tag *string `form:"tag,omitempty" json:"tag,omitempty"`

	// Tags Comma seperated list of exact tags
	Tags *[]string `form:"tags,omitempty" json:"tags,omitempty"`

	// TeamManager Multiple values may be separated by commas.
	TeamManager *[]int `form:"team_manager,omitempty" json:"team_manager,omitempty"`

	// TechnicalContact Multiple values may be separated by commas.
	TechnicalContact *[]int `form:"technical_contact,omitempty" json:"technical_contact,omitempty"`

	// Tid Multiple values may be separated by commas.
	Tid *[]int `form:"tid,omitempty" json:"tid,omitempty"`

	// Updated * `` - Any date
	// * `1` - Today
	// * `2` - Past 7 days
	// * `3` - Past 30 days
	// * `4` - Past 90 days
	// * `5` - Current month
	// * `6` - Current year
	// * `7` - Past year
	Updated *ProductsListParamsUpdated `form:"updated,omitempty" json:"updated,omitempty"`

	// UserRecords Multiple values may be separated by commas.
	UserRecords *[]int `form:"user_records,omitempty" json:"user_records,omitempty"`
}

// ProductsListParamsCreated defines parameters for ProductsList.
type ProductsListParamsCreated float32

// ProductsListParamsO defines parameters for ProductsList.
type ProductsListParamsO string

// ProductsListParamsPrefetch defines parameters for ProductsList.
type ProductsListParamsPrefetch string

// ProductsListParamsUpdated defines parameters for ProductsList.
type ProductsListParamsUpdated float32

// ProductsRetrieveParams defines parameters for ProductsRetrieve.
type ProductsRetrieveParams struct {
	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch *[]ProductsRetrieveParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
}

// ProductsRetrieveParamsPrefetch defines parameters for ProductsRetrieve.
type ProductsRetrieveParamsPrefetch string

// ProductsDeletePreviewListParams defines parameters for ProductsDeletePreviewList.
type ProductsDeletePreviewListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// QuestionnaireAnsweredQuestionnairesListParams defines parameters for QuestionnaireAnsweredQuestionnairesList.
type QuestionnaireAnsweredQuestionnairesListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// QuestionnaireAnswersListParams defines parameters for QuestionnaireAnswersList.
type QuestionnaireAnswersListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// QuestionnaireEngagementQuestionnairesListParams defines parameters for QuestionnaireEngagementQuestionnairesList.
type QuestionnaireEngagementQuestionnairesListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// QuestionnaireGeneralQuestionnairesListParams defines parameters for QuestionnaireGeneralQuestionnairesList.
type QuestionnaireGeneralQuestionnairesListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// QuestionnaireQuestionsListParams defines parameters for QuestionnaireQuestionsList.
type QuestionnaireQuestionsListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// RegulationsListParams defines parameters for RegulationsList.
type RegulationsListParams struct {
	Description *string `form:"description,omitempty" json:"description,omitempty"`
	Id          *int    `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Name  *string `form:"name,omitempty" json:"name,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// RegulationsDeletePreviewListParams defines parameters for RegulationsDeletePreviewList.
type RegulationsDeletePreviewListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// RiskAcceptanceListParams defines parameters for RiskAcceptanceList.
type RiskAcceptanceListParams struct {
	AcceptedBy       *string `form:"accepted_by,omitempty" json:"accepted_by,omitempty"`
	AcceptedFindings *[]int  `form:"accepted_findings,omitempty" json:"accepted_findings,omitempty"`

	// Decision Risk treatment decision by risk owner
	//
	// * `A` - Accept (The risk is acknowledged, yet remains)
	// * `V` - Avoid (Do not engage with whatever creates the risk)
	// * `M` - Mitigate (The risk still exists, yet compensating controls make it less of a threat)
	// * `F` - Fix (The risk is eradicated)
	// * `T` - Transfer (The risk is transferred to a 3rd party)
	Decision              *RiskAcceptanceListParamsDecision `form:"decision,omitempty" json:"decision,omitempty"`
	DecisionDetails       *string                           `form:"decision_details,omitempty" json:"decision_details,omitempty"`
	ExpirationDate        *time.Time                        `form:"expiration_date,omitempty" json:"expiration_date,omitempty"`
	ExpirationDateHandled *time.Time                        `form:"expiration_date_handled,omitempty" json:"expiration_date_handled,omitempty"`
	ExpirationDateWarned  *time.Time                        `form:"expiration_date_warned,omitempty" json:"expiration_date_warned,omitempty"`

	// Limit Number of results to return per page.
	Limit *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Name  *string `form:"name,omitempty" json:"name,omitempty"`
	Notes *[]int  `form:"notes,omitempty" json:"notes,omitempty"`

	// O Ordering
	//
	// * `name` - Name
	// * `-name` - Name (descending)
	O *[]RiskAcceptanceListParamsO `form:"o,omitempty" json:"o,omitempty"`

	// Offset The initial index from which to return the results.
	Offset            *int  `form:"offset,omitempty" json:"offset,omitempty"`
	Owner             *int  `form:"owner,omitempty" json:"owner,omitempty"`
	ReactivateExpired *bool `form:"reactivate_expired,omitempty" json:"reactivate_expired,omitempty"`

	// Recommendation Recommendation from the security team.
	//
	// * `A` - Accept (The risk is acknowledged, yet remains)
	// * `V` - Avoid (Do not engage with whatever creates the risk)
	// * `M` - Mitigate (The risk still exists, yet compensating controls make it less of a threat)
	// * `F` - Fix (The risk is eradicated)
	// * `T` - Transfer (The risk is transferred to a 3rd party)
	Recommendation        *RiskAcceptanceListParamsRecommendation `form:"recommendation,omitempty" json:"recommendation,omitempty"`
	RecommendationDetails *string                                 `form:"recommendation_details,omitempty" json:"recommendation_details,omitempty"`
	RestartSlaExpired     *bool                                   `form:"restart_sla_expired,omitempty" json:"restart_sla_expired,omitempty"`
}

// RiskAcceptanceListParamsDecision defines parameters for RiskAcceptanceList.
type RiskAcceptanceListParamsDecision string

// RiskAcceptanceListParamsO defines parameters for RiskAcceptanceList.
type RiskAcceptanceListParamsO string

// RiskAcceptanceListParamsRecommendation defines parameters for RiskAcceptanceList.
type RiskAcceptanceListParamsRecommendation string

// RiskAcceptanceDeletePreviewListParams defines parameters for RiskAcceptanceDeletePreviewList.
type RiskAcceptanceDeletePreviewListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// RolesListParams defines parameters for RolesList.
type RolesListParams struct {
	Id *int `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Name  *string `form:"name,omitempty" json:"name,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// SlaConfigurationsListParams defines parameters for SlaConfigurationsList.
type SlaConfigurationsListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// SonarqubeIssuesListParams defines parameters for SonarqubeIssuesList.
type SonarqubeIssuesListParams struct {
	Id  *int    `form:"id,omitempty" json:"id,omitempty"`
	Key *string `form:"key,omitempty" json:"key,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Status *string `form:"status,omitempty" json:"status,omitempty"`
	Type   *string `form:"type,omitempty" json:"type,omitempty"`
}

// SonarqubeIssuesDeletePreviewListParams defines parameters for SonarqubeIssuesDeletePreviewList.
type SonarqubeIssuesDeletePreviewListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// SonarqubeTransitionsListParams defines parameters for SonarqubeTransitionsList.
type SonarqubeTransitionsListParams struct {
	FindingStatus *string `form:"finding_status,omitempty" json:"finding_status,omitempty"`
	Id            *int    `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset          *int    `form:"offset,omitempty" json:"offset,omitempty"`
	SonarqubeIssue  *int    `form:"sonarqube_issue,omitempty" json:"sonarqube_issue,omitempty"`
	SonarqubeStatus *string `form:"sonarqube_status,omitempty" json:"sonarqube_status,omitempty"`
	Transitions     *string `form:"transitions,omitempty" json:"transitions,omitempty"`
}

// SonarqubeTransitionsDeletePreviewListParams defines parameters for SonarqubeTransitionsDeletePreviewList.
type SonarqubeTransitionsDeletePreviewListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// StubFindingsListParams defines parameters for StubFindingsList.
type StubFindingsListParams struct {
	Date        *openapi_types.Date `form:"date,omitempty" json:"date,omitempty"`
	Description *string             `form:"description,omitempty" json:"description,omitempty"`
	Id          *int                `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset   *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Severity *string `form:"severity,omitempty" json:"severity,omitempty"`
	Title    *string `form:"title,omitempty" json:"title,omitempty"`
}

// StubFindingsDeletePreviewListParams defines parameters for StubFindingsDeletePreviewList.
type StubFindingsDeletePreviewListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// SystemSettingsListParams defines parameters for SystemSettingsList.
type SystemSettingsListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// TechnologiesListParams defines parameters for TechnologiesList.
type TechnologiesListParams struct {
	// Limit Number of results to return per page.
	Limit *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Name  *string `form:"name,omitempty" json:"name,omitempty"`

	// NotTag Not Tag name contains
	NotTag *string `form:"not_tag,omitempty" json:"not_tag,omitempty"`

	// NotTags Comma seperated list of exact tags not present on model
	NotTags *[]string `form:"not_tags,omitempty" json:"not_tags,omitempty"`

	// Offset The initial index from which to return the results.
	Offset  *int `form:"offset,omitempty" json:"offset,omitempty"`
	Product *int `form:"product,omitempty" json:"product,omitempty"`

	// Tag Tag name contains
	Tag *string `form:"tag,omitempty" json:"tag,omitempty"`

	// Tags Comma seperated list of exact tags
	Tags    *[]string `form:"tags,omitempty" json:"tags,omitempty"`
	User    *int      `form:"user,omitempty" json:"user,omitempty"`
	Version *string   `form:"version,omitempty" json:"version,omitempty"`
}

// TechnologiesDeletePreviewListParams defines parameters for TechnologiesDeletePreviewList.
type TechnologiesDeletePreviewListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// TestImportsListParams defines parameters for TestImportsList.
type TestImportsListParams struct {
	BranchTag        *string `form:"branch_tag,omitempty" json:"branch_tag,omitempty"`
	BuildId          *string `form:"build_id,omitempty" json:"build_id,omitempty"`
	CommitHash       *string `form:"commit_hash,omitempty" json:"commit_hash,omitempty"`
	FindingsAffected *[]int  `form:"findings_affected,omitempty" json:"findings_affected,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch *[]TestImportsListParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
	Test     *int                             `form:"test,omitempty" json:"test,omitempty"`

	// TestImportFindingActionAction * `N` - created
	// * `C` - closed
	// * `R` - reactivated
	// * `U` - left untouched
	TestImportFindingActionAction  *TestImportsListParamsTestImportFindingActionAction `form:"test_import_finding_action__action,omitempty" json:"test_import_finding_action__action,omitempty"`
	TestImportFindingActionCreated *time.Time                                          `form:"test_import_finding_action__created,omitempty" json:"test_import_finding_action__created,omitempty"`
	TestImportFindingActionFinding *int                                                `form:"test_import_finding_action__finding,omitempty" json:"test_import_finding_action__finding,omitempty"`
	Version                        *string                                             `form:"version,omitempty" json:"version,omitempty"`
}

// TestImportsListParamsPrefetch defines parameters for TestImportsList.
type TestImportsListParamsPrefetch string

// TestImportsListParamsTestImportFindingActionAction defines parameters for TestImportsList.
type TestImportsListParamsTestImportFindingActionAction string

// TestImportsRetrieveParams defines parameters for TestImportsRetrieve.
type TestImportsRetrieveParams struct {
	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch *[]TestImportsRetrieveParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
}

// TestImportsRetrieveParamsPrefetch defines parameters for TestImportsRetrieve.
type TestImportsRetrieveParamsPrefetch string

// TestImportsDeletePreviewListParams defines parameters for TestImportsDeletePreviewList.
type TestImportsDeletePreviewListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// TestTypesListParams defines parameters for TestTypesList.
type TestTypesListParams struct {
	// Limit Number of results to return per page.
	Limit *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Name  *string `form:"name,omitempty" json:"name,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// TestsListParams defines parameters for TestsList.
type TestsListParams struct {
	ActualTime           *string `form:"actual_time,omitempty" json:"actual_time,omitempty"`
	ApiScanConfiguration *int    `form:"api_scan_configuration,omitempty" json:"api_scan_configuration,omitempty"`
	BranchTag            *string `form:"branch_tag,omitempty" json:"branch_tag,omitempty"`
	BuildId              *string `form:"build_id,omitempty" json:"build_id,omitempty"`
	CommitHash           *string `form:"commit_hash,omitempty" json:"commit_hash,omitempty"`
	Engagement           *int    `form:"engagement,omitempty" json:"engagement,omitempty"`

	// EngagementProductTagsName Comma seperated list of exact tags present on product
	EngagementProductTagsName *[]string `form:"engagement__product__tags__name,omitempty" json:"engagement__product__tags__name,omitempty"`

	// EngagementTags Comma seperated list of exact tags present on engagement
	EngagementTags *[]string `form:"engagement__tags,omitempty" json:"engagement__tags,omitempty"`
	Id             *int      `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// NotEngagementProductTagsName Comma seperated list of exact tags not present on product
	NotEngagementProductTagsName *[]string `form:"not_engagement__product__tags__name,omitempty" json:"not_engagement__product__tags__name,omitempty"`

	// NotEngagementTags Comma seperated list of exact tags not present on engagement
	NotEngagementTags *[]string `form:"not_engagement__tags,omitempty" json:"not_engagement__tags,omitempty"`

	// NotTag Not Tag name contains
	NotTag *string `form:"not_tag,omitempty" json:"not_tag,omitempty"`

	// NotTags Comma seperated list of exact tags not present on model
	NotTags *[]string `form:"not_tags,omitempty" json:"not_tags,omitempty"`
	Notes   *[]int    `form:"notes,omitempty" json:"notes,omitempty"`

	// O Ordering
	//
	// * `title` - Title
	// * `-title` - Title (descending)
	// * `version` - Version
	// * `-version` - Version (descending)
	// * `target_start` - Target start
	// * `-target_start` - Target start (descending)
	// * `target_end` - Target end
	// * `-target_end` - Target end (descending)
	// * `test_type` - Test type
	// * `-test_type` - Test type (descending)
	// * `lead` - Lead
	// * `-lead` - Lead (descending)
	// * `branch_tag` - Branch tag
	// * `-branch_tag` - Branch tag (descending)
	// * `build_id` - Build id
	// * `-build_id` - Build id (descending)
	// * `commit_hash` - Commit hash
	// * `-commit_hash` - Commit hash (descending)
	// * `api_scan_configuration` - Api scan configuration
	// * `-api_scan_configuration` - Api scan configuration (descending)
	// * `engagement` - Engagement
	// * `-engagement` - Engagement (descending)
	// * `created` - Created
	// * `-created` - Created (descending)
	// * `updated` - Updated
	// * `-updated` - Updated (descending)
	O *[]TestsListParamsO `form:"o,omitempty" json:"o,omitempty"`

	// Offset The initial index from which to return the results.
	Offset          *int `form:"offset,omitempty" json:"offset,omitempty"`
	PercentComplete *int `form:"percent_complete,omitempty" json:"percent_complete,omitempty"`

	// Tag Tag name contains
	Tag *string `form:"tag,omitempty" json:"tag,omitempty"`

	// Tags Comma seperated list of exact tags
	Tags        *[]string  `form:"tags,omitempty" json:"tags,omitempty"`
	TargetEnd   *time.Time `form:"target_end,omitempty" json:"target_end,omitempty"`
	TargetStart *time.Time `form:"target_start,omitempty" json:"target_start,omitempty"`
	TestType    *int       `form:"test_type,omitempty" json:"test_type,omitempty"`
	Title       *string    `form:"title,omitempty" json:"title,omitempty"`
	Version     *string    `form:"version,omitempty" json:"version,omitempty"`
}

// TestsListParamsO defines parameters for TestsList.
type TestsListParamsO string

// TestsAcceptRisksCreateJSONBody defines parameters for TestsAcceptRisksCreate.
type TestsAcceptRisksCreateJSONBody = []AcceptedRiskRequest

// TestsAcceptRisksCreateFormdataBody defines parameters for TestsAcceptRisksCreate.
type TestsAcceptRisksCreateFormdataBody = struct {
}

// TestsAcceptRisksCreateMultipartBody defines parameters for TestsAcceptRisksCreate.
type TestsAcceptRisksCreateMultipartBody = []AcceptedRiskRequest

// TestsDeletePreviewListParams defines parameters for TestsDeletePreviewList.
type TestsDeletePreviewListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ToolConfigurationsListParams defines parameters for ToolConfigurationsList.
type ToolConfigurationsListParams struct {
	// AuthenticationType * `API` - API Key
	// * `Password` - Username/Password
	// * `SSH` - SSH
	AuthenticationType *ToolConfigurationsListParamsAuthenticationType `form:"authentication_type,omitempty" json:"authentication_type,omitempty"`
	Id                 *int                                            `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Name  *string `form:"name,omitempty" json:"name,omitempty"`

	// Offset The initial index from which to return the results.
	Offset   *int    `form:"offset,omitempty" json:"offset,omitempty"`
	ToolType *int    `form:"tool_type,omitempty" json:"tool_type,omitempty"`
	Url      *string `form:"url,omitempty" json:"url,omitempty"`
}

// ToolConfigurationsListParamsAuthenticationType defines parameters for ToolConfigurationsList.
type ToolConfigurationsListParamsAuthenticationType string

// ToolConfigurationsDeletePreviewListParams defines parameters for ToolConfigurationsDeletePreviewList.
type ToolConfigurationsDeletePreviewListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ToolProductSettingsListParams defines parameters for ToolProductSettingsList.
type ToolProductSettingsListParams struct {
	Id *int `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Name  *string `form:"name,omitempty" json:"name,omitempty"`

	// Offset The initial index from which to return the results.
	Offset            *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Product           *int    `form:"product,omitempty" json:"product,omitempty"`
	ToolConfiguration *int    `form:"tool_configuration,omitempty" json:"tool_configuration,omitempty"`
	ToolProjectId     *string `form:"tool_project_id,omitempty" json:"tool_project_id,omitempty"`
	Url               *string `form:"url,omitempty" json:"url,omitempty"`
}

// ToolProductSettingsDeletePreviewListParams defines parameters for ToolProductSettingsDeletePreviewList.
type ToolProductSettingsDeletePreviewListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ToolTypesListParams defines parameters for ToolTypesList.
type ToolTypesListParams struct {
	Description *string `form:"description,omitempty" json:"description,omitempty"`
	Id          *int    `form:"id,omitempty" json:"id,omitempty"`

	// Limit Number of results to return per page.
	Limit *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Name  *string `form:"name,omitempty" json:"name,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ToolTypesDeletePreviewListParams defines parameters for ToolTypesDeletePreviewList.
type ToolTypesDeletePreviewListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// UserContactInfosListParams defines parameters for UserContactInfosList.
type UserContactInfosListParams struct {
	BlockExecution     *bool   `form:"block_execution,omitempty" json:"block_execution,omitempty"`
	CellNumber         *string `form:"cell_number,omitempty" json:"cell_number,omitempty"`
	ForcePasswordReset *bool   `form:"force_password_reset,omitempty" json:"force_password_reset,omitempty"`
	GithubUsername     *string `form:"github_username,omitempty" json:"github_username,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset      *int    `form:"offset,omitempty" json:"offset,omitempty"`
	PhoneNumber *string `form:"phone_number,omitempty" json:"phone_number,omitempty"`

	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch        *[]UserContactInfosListParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
	SlackUserId     *string                               `form:"slack_user_id,omitempty" json:"slack_user_id,omitempty"`
	SlackUsername   *string                               `form:"slack_username,omitempty" json:"slack_username,omitempty"`
	Title           *string                               `form:"title,omitempty" json:"title,omitempty"`
	TwitterUsername *string                               `form:"twitter_username,omitempty" json:"twitter_username,omitempty"`
	User            *int                                  `form:"user,omitempty" json:"user,omitempty"`
}

// UserContactInfosListParamsPrefetch defines parameters for UserContactInfosList.
type UserContactInfosListParamsPrefetch string

// UserContactInfosRetrieveParams defines parameters for UserContactInfosRetrieve.
type UserContactInfosRetrieveParams struct {
	// Prefetch List of fields for which to prefetch model instances and add those to the response
	Prefetch *[]UserContactInfosRetrieveParamsPrefetch `form:"prefetch,omitempty" json:"prefetch,omitempty"`
}

// UserContactInfosRetrieveParamsPrefetch defines parameters for UserContactInfosRetrieve.
type UserContactInfosRetrieveParamsPrefetch string

// UserContactInfosDeletePreviewListParams defines parameters for UserContactInfosDeletePreviewList.
type UserContactInfosDeletePreviewListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// UsersListParams defines parameters for UsersList.
type UsersListParams struct {
	Email       *string `form:"email,omitempty" json:"email,omitempty"`
	FirstName   *string `form:"first_name,omitempty" json:"first_name,omitempty"`
	Id          *int    `form:"id,omitempty" json:"id,omitempty"`
	IsActive    *bool   `form:"is_active,omitempty" json:"is_active,omitempty"`
	IsSuperuser *bool   `form:"is_superuser,omitempty" json:"is_superuser,omitempty"`
	LastName    *string `form:"last_name,omitempty" json:"last_name,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset   *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Username *string `form:"username,omitempty" json:"username,omitempty"`
}

// UsersDeletePreviewListParams defines parameters for UsersDeletePreviewList.
type UsersDeletePreviewListParams struct {
	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ApiTokenAuthCreateJSONRequestBody defines body for ApiTokenAuthCreate for application/json ContentType.
type ApiTokenAuthCreateJSONRequestBody = AuthTokenRequest

// ApiTokenAuthCreateFormdataRequestBody defines body for ApiTokenAuthCreate for application/x-www-form-urlencoded ContentType.
type ApiTokenAuthCreateFormdataRequestBody = AuthTokenRequest

// ApiTokenAuthCreateMultipartRequestBody defines body for ApiTokenAuthCreate for multipart/form-data ContentType.
type ApiTokenAuthCreateMultipartRequestBody = AuthTokenRequest

// CredentialMappingsCreateJSONRequestBody defines body for CredentialMappingsCreate for application/json ContentType.
type CredentialMappingsCreateJSONRequestBody = CredentialMappingRequest

// CredentialMappingsCreateFormdataRequestBody defines body for CredentialMappingsCreate for application/x-www-form-urlencoded ContentType.
type CredentialMappingsCreateFormdataRequestBody = CredentialMappingRequest

// CredentialMappingsCreateMultipartRequestBody defines body for CredentialMappingsCreate for multipart/form-data ContentType.
type CredentialMappingsCreateMultipartRequestBody = CredentialMappingRequest

// CredentialMappingsPartialUpdateJSONRequestBody defines body for CredentialMappingsPartialUpdate for application/json ContentType.
type CredentialMappingsPartialUpdateJSONRequestBody = PatchedCredentialMappingRequest

// CredentialMappingsPartialUpdateFormdataRequestBody defines body for CredentialMappingsPartialUpdate for application/x-www-form-urlencoded ContentType.
type CredentialMappingsPartialUpdateFormdataRequestBody = PatchedCredentialMappingRequest

// CredentialMappingsPartialUpdateMultipartRequestBody defines body for CredentialMappingsPartialUpdate for multipart/form-data ContentType.
type CredentialMappingsPartialUpdateMultipartRequestBody = PatchedCredentialMappingRequest

// CredentialMappingsUpdateJSONRequestBody defines body for CredentialMappingsUpdate for application/json ContentType.
type CredentialMappingsUpdateJSONRequestBody = CredentialMappingRequest

// CredentialMappingsUpdateFormdataRequestBody defines body for CredentialMappingsUpdate for application/x-www-form-urlencoded ContentType.
type CredentialMappingsUpdateFormdataRequestBody = CredentialMappingRequest

// CredentialMappingsUpdateMultipartRequestBody defines body for CredentialMappingsUpdate for multipart/form-data ContentType.
type CredentialMappingsUpdateMultipartRequestBody = CredentialMappingRequest

// CredentialsCreateJSONRequestBody defines body for CredentialsCreate for application/json ContentType.
type CredentialsCreateJSONRequestBody = CredentialRequest

// CredentialsCreateFormdataRequestBody defines body for CredentialsCreate for application/x-www-form-urlencoded ContentType.
type CredentialsCreateFormdataRequestBody = CredentialRequest

// CredentialsCreateMultipartRequestBody defines body for CredentialsCreate for multipart/form-data ContentType.
type CredentialsCreateMultipartRequestBody = CredentialRequest

// CredentialsPartialUpdateJSONRequestBody defines body for CredentialsPartialUpdate for application/json ContentType.
type CredentialsPartialUpdateJSONRequestBody = PatchedCredentialRequest

// CredentialsPartialUpdateFormdataRequestBody defines body for CredentialsPartialUpdate for application/x-www-form-urlencoded ContentType.
type CredentialsPartialUpdateFormdataRequestBody = PatchedCredentialRequest

// CredentialsPartialUpdateMultipartRequestBody defines body for CredentialsPartialUpdate for multipart/form-data ContentType.
type CredentialsPartialUpdateMultipartRequestBody = PatchedCredentialRequest

// CredentialsUpdateJSONRequestBody defines body for CredentialsUpdate for application/json ContentType.
type CredentialsUpdateJSONRequestBody = CredentialRequest

// CredentialsUpdateFormdataRequestBody defines body for CredentialsUpdate for application/x-www-form-urlencoded ContentType.
type CredentialsUpdateFormdataRequestBody = CredentialRequest

// CredentialsUpdateMultipartRequestBody defines body for CredentialsUpdate for multipart/form-data ContentType.
type CredentialsUpdateMultipartRequestBody = CredentialRequest

// DevelopmentEnvironmentsCreateJSONRequestBody defines body for DevelopmentEnvironmentsCreate for application/json ContentType.
type DevelopmentEnvironmentsCreateJSONRequestBody = DevelopmentEnvironmentRequest

// DevelopmentEnvironmentsCreateFormdataRequestBody defines body for DevelopmentEnvironmentsCreate for application/x-www-form-urlencoded ContentType.
type DevelopmentEnvironmentsCreateFormdataRequestBody = DevelopmentEnvironmentRequest

// DevelopmentEnvironmentsCreateMultipartRequestBody defines body for DevelopmentEnvironmentsCreate for multipart/form-data ContentType.
type DevelopmentEnvironmentsCreateMultipartRequestBody = DevelopmentEnvironmentRequest

// DevelopmentEnvironmentsPartialUpdateJSONRequestBody defines body for DevelopmentEnvironmentsPartialUpdate for application/json ContentType.
type DevelopmentEnvironmentsPartialUpdateJSONRequestBody = PatchedDevelopmentEnvironmentRequest

// DevelopmentEnvironmentsPartialUpdateFormdataRequestBody defines body for DevelopmentEnvironmentsPartialUpdate for application/x-www-form-urlencoded ContentType.
type DevelopmentEnvironmentsPartialUpdateFormdataRequestBody = PatchedDevelopmentEnvironmentRequest

// DevelopmentEnvironmentsPartialUpdateMultipartRequestBody defines body for DevelopmentEnvironmentsPartialUpdate for multipart/form-data ContentType.
type DevelopmentEnvironmentsPartialUpdateMultipartRequestBody = PatchedDevelopmentEnvironmentRequest

// DevelopmentEnvironmentsUpdateJSONRequestBody defines body for DevelopmentEnvironmentsUpdate for application/json ContentType.
type DevelopmentEnvironmentsUpdateJSONRequestBody = DevelopmentEnvironmentRequest

// DevelopmentEnvironmentsUpdateFormdataRequestBody defines body for DevelopmentEnvironmentsUpdate for application/x-www-form-urlencoded ContentType.
type DevelopmentEnvironmentsUpdateFormdataRequestBody = DevelopmentEnvironmentRequest

// DevelopmentEnvironmentsUpdateMultipartRequestBody defines body for DevelopmentEnvironmentsUpdate for multipart/form-data ContentType.
type DevelopmentEnvironmentsUpdateMultipartRequestBody = DevelopmentEnvironmentRequest

// DojoGroupMembersCreateJSONRequestBody defines body for DojoGroupMembersCreate for application/json ContentType.
type DojoGroupMembersCreateJSONRequestBody = DojoGroupMemberRequest

// DojoGroupMembersCreateFormdataRequestBody defines body for DojoGroupMembersCreate for application/x-www-form-urlencoded ContentType.
type DojoGroupMembersCreateFormdataRequestBody = DojoGroupMemberRequest

// DojoGroupMembersCreateMultipartRequestBody defines body for DojoGroupMembersCreate for multipart/form-data ContentType.
type DojoGroupMembersCreateMultipartRequestBody = DojoGroupMemberRequest

// DojoGroupMembersPartialUpdateJSONRequestBody defines body for DojoGroupMembersPartialUpdate for application/json ContentType.
type DojoGroupMembersPartialUpdateJSONRequestBody = PatchedDojoGroupMemberRequest

// DojoGroupMembersPartialUpdateFormdataRequestBody defines body for DojoGroupMembersPartialUpdate for application/x-www-form-urlencoded ContentType.
type DojoGroupMembersPartialUpdateFormdataRequestBody = PatchedDojoGroupMemberRequest

// DojoGroupMembersPartialUpdateMultipartRequestBody defines body for DojoGroupMembersPartialUpdate for multipart/form-data ContentType.
type DojoGroupMembersPartialUpdateMultipartRequestBody = PatchedDojoGroupMemberRequest

// DojoGroupMembersUpdateJSONRequestBody defines body for DojoGroupMembersUpdate for application/json ContentType.
type DojoGroupMembersUpdateJSONRequestBody = DojoGroupMemberRequest

// DojoGroupMembersUpdateFormdataRequestBody defines body for DojoGroupMembersUpdate for application/x-www-form-urlencoded ContentType.
type DojoGroupMembersUpdateFormdataRequestBody = DojoGroupMemberRequest

// DojoGroupMembersUpdateMultipartRequestBody defines body for DojoGroupMembersUpdate for multipart/form-data ContentType.
type DojoGroupMembersUpdateMultipartRequestBody = DojoGroupMemberRequest

// DojoGroupsCreateJSONRequestBody defines body for DojoGroupsCreate for application/json ContentType.
type DojoGroupsCreateJSONRequestBody = DojoGroupRequest

// DojoGroupsCreateFormdataRequestBody defines body for DojoGroupsCreate for application/x-www-form-urlencoded ContentType.
type DojoGroupsCreateFormdataRequestBody = DojoGroupRequest

// DojoGroupsCreateMultipartRequestBody defines body for DojoGroupsCreate for multipart/form-data ContentType.
type DojoGroupsCreateMultipartRequestBody = DojoGroupRequest

// DojoGroupsPartialUpdateJSONRequestBody defines body for DojoGroupsPartialUpdate for application/json ContentType.
type DojoGroupsPartialUpdateJSONRequestBody = PatchedDojoGroupRequest

// DojoGroupsPartialUpdateFormdataRequestBody defines body for DojoGroupsPartialUpdate for application/x-www-form-urlencoded ContentType.
type DojoGroupsPartialUpdateFormdataRequestBody = PatchedDojoGroupRequest

// DojoGroupsPartialUpdateMultipartRequestBody defines body for DojoGroupsPartialUpdate for multipart/form-data ContentType.
type DojoGroupsPartialUpdateMultipartRequestBody = PatchedDojoGroupRequest

// DojoGroupsUpdateJSONRequestBody defines body for DojoGroupsUpdate for application/json ContentType.
type DojoGroupsUpdateJSONRequestBody = DojoGroupRequest

// DojoGroupsUpdateFormdataRequestBody defines body for DojoGroupsUpdate for application/x-www-form-urlencoded ContentType.
type DojoGroupsUpdateFormdataRequestBody = DojoGroupRequest

// DojoGroupsUpdateMultipartRequestBody defines body for DojoGroupsUpdate for multipart/form-data ContentType.
type DojoGroupsUpdateMultipartRequestBody = DojoGroupRequest

// EndpointMetaImportCreateMultipartRequestBody defines body for EndpointMetaImportCreate for multipart/form-data ContentType.
type EndpointMetaImportCreateMultipartRequestBody = EndpointMetaImporterRequest

// EndpointStatusCreateJSONRequestBody defines body for EndpointStatusCreate for application/json ContentType.
type EndpointStatusCreateJSONRequestBody = EndpointStatusRequest

// EndpointStatusCreateFormdataRequestBody defines body for EndpointStatusCreate for application/x-www-form-urlencoded ContentType.
type EndpointStatusCreateFormdataRequestBody = EndpointStatusRequest

// EndpointStatusCreateMultipartRequestBody defines body for EndpointStatusCreate for multipart/form-data ContentType.
type EndpointStatusCreateMultipartRequestBody = EndpointStatusRequest

// EndpointStatusPartialUpdateJSONRequestBody defines body for EndpointStatusPartialUpdate for application/json ContentType.
type EndpointStatusPartialUpdateJSONRequestBody = PatchedEndpointStatusRequest

// EndpointStatusPartialUpdateFormdataRequestBody defines body for EndpointStatusPartialUpdate for application/x-www-form-urlencoded ContentType.
type EndpointStatusPartialUpdateFormdataRequestBody = PatchedEndpointStatusRequest

// EndpointStatusPartialUpdateMultipartRequestBody defines body for EndpointStatusPartialUpdate for multipart/form-data ContentType.
type EndpointStatusPartialUpdateMultipartRequestBody = PatchedEndpointStatusRequest

// EndpointStatusUpdateJSONRequestBody defines body for EndpointStatusUpdate for application/json ContentType.
type EndpointStatusUpdateJSONRequestBody = EndpointStatusRequest

// EndpointStatusUpdateFormdataRequestBody defines body for EndpointStatusUpdate for application/x-www-form-urlencoded ContentType.
type EndpointStatusUpdateFormdataRequestBody = EndpointStatusRequest

// EndpointStatusUpdateMultipartRequestBody defines body for EndpointStatusUpdate for multipart/form-data ContentType.
type EndpointStatusUpdateMultipartRequestBody = EndpointStatusRequest

// EndpointsCreateJSONRequestBody defines body for EndpointsCreate for application/json ContentType.
type EndpointsCreateJSONRequestBody = EndpointRequest

// EndpointsCreateFormdataRequestBody defines body for EndpointsCreate for application/x-www-form-urlencoded ContentType.
type EndpointsCreateFormdataRequestBody = EndpointRequest

// EndpointsCreateMultipartRequestBody defines body for EndpointsCreate for multipart/form-data ContentType.
type EndpointsCreateMultipartRequestBody = EndpointRequest

// EndpointsPartialUpdateJSONRequestBody defines body for EndpointsPartialUpdate for application/json ContentType.
type EndpointsPartialUpdateJSONRequestBody = PatchedEndpointRequest

// EndpointsPartialUpdateFormdataRequestBody defines body for EndpointsPartialUpdate for application/x-www-form-urlencoded ContentType.
type EndpointsPartialUpdateFormdataRequestBody = PatchedEndpointRequest

// EndpointsPartialUpdateMultipartRequestBody defines body for EndpointsPartialUpdate for multipart/form-data ContentType.
type EndpointsPartialUpdateMultipartRequestBody = PatchedEndpointRequest

// EndpointsUpdateJSONRequestBody defines body for EndpointsUpdate for application/json ContentType.
type EndpointsUpdateJSONRequestBody = EndpointRequest

// EndpointsUpdateFormdataRequestBody defines body for EndpointsUpdate for application/x-www-form-urlencoded ContentType.
type EndpointsUpdateFormdataRequestBody = EndpointRequest

// EndpointsUpdateMultipartRequestBody defines body for EndpointsUpdate for multipart/form-data ContentType.
type EndpointsUpdateMultipartRequestBody = EndpointRequest

// EndpointsGenerateReportCreateJSONRequestBody defines body for EndpointsGenerateReportCreate for application/json ContentType.
type EndpointsGenerateReportCreateJSONRequestBody = ReportGenerateOptionRequest

// EndpointsGenerateReportCreateFormdataRequestBody defines body for EndpointsGenerateReportCreate for application/x-www-form-urlencoded ContentType.
type EndpointsGenerateReportCreateFormdataRequestBody = ReportGenerateOptionRequest

// EndpointsGenerateReportCreateMultipartRequestBody defines body for EndpointsGenerateReportCreate for multipart/form-data ContentType.
type EndpointsGenerateReportCreateMultipartRequestBody = ReportGenerateOptionRequest

// EngagementPresetsCreateJSONRequestBody defines body for EngagementPresetsCreate for application/json ContentType.
type EngagementPresetsCreateJSONRequestBody = EngagementPresetsRequest

// EngagementPresetsCreateFormdataRequestBody defines body for EngagementPresetsCreate for application/x-www-form-urlencoded ContentType.
type EngagementPresetsCreateFormdataRequestBody = EngagementPresetsRequest

// EngagementPresetsCreateMultipartRequestBody defines body for EngagementPresetsCreate for multipart/form-data ContentType.
type EngagementPresetsCreateMultipartRequestBody = EngagementPresetsRequest

// EngagementPresetsPartialUpdateJSONRequestBody defines body for EngagementPresetsPartialUpdate for application/json ContentType.
type EngagementPresetsPartialUpdateJSONRequestBody = PatchedEngagementPresetsRequest

// EngagementPresetsPartialUpdateFormdataRequestBody defines body for EngagementPresetsPartialUpdate for application/x-www-form-urlencoded ContentType.
type EngagementPresetsPartialUpdateFormdataRequestBody = PatchedEngagementPresetsRequest

// EngagementPresetsPartialUpdateMultipartRequestBody defines body for EngagementPresetsPartialUpdate for multipart/form-data ContentType.
type EngagementPresetsPartialUpdateMultipartRequestBody = PatchedEngagementPresetsRequest

// EngagementPresetsUpdateJSONRequestBody defines body for EngagementPresetsUpdate for application/json ContentType.
type EngagementPresetsUpdateJSONRequestBody = EngagementPresetsRequest

// EngagementPresetsUpdateFormdataRequestBody defines body for EngagementPresetsUpdate for application/x-www-form-urlencoded ContentType.
type EngagementPresetsUpdateFormdataRequestBody = EngagementPresetsRequest

// EngagementPresetsUpdateMultipartRequestBody defines body for EngagementPresetsUpdate for multipart/form-data ContentType.
type EngagementPresetsUpdateMultipartRequestBody = EngagementPresetsRequest

// EngagementsCreateJSONRequestBody defines body for EngagementsCreate for application/json ContentType.
type EngagementsCreateJSONRequestBody = EngagementRequest

// EngagementsCreateFormdataRequestBody defines body for EngagementsCreate for application/x-www-form-urlencoded ContentType.
type EngagementsCreateFormdataRequestBody = EngagementRequest

// EngagementsCreateMultipartRequestBody defines body for EngagementsCreate for multipart/form-data ContentType.
type EngagementsCreateMultipartRequestBody = EngagementRequest

// EngagementsPartialUpdateJSONRequestBody defines body for EngagementsPartialUpdate for application/json ContentType.
type EngagementsPartialUpdateJSONRequestBody = PatchedEngagementRequest

// EngagementsPartialUpdateFormdataRequestBody defines body for EngagementsPartialUpdate for application/x-www-form-urlencoded ContentType.
type EngagementsPartialUpdateFormdataRequestBody = PatchedEngagementRequest

// EngagementsPartialUpdateMultipartRequestBody defines body for EngagementsPartialUpdate for multipart/form-data ContentType.
type EngagementsPartialUpdateMultipartRequestBody = PatchedEngagementRequest

// EngagementsUpdateJSONRequestBody defines body for EngagementsUpdate for application/json ContentType.
type EngagementsUpdateJSONRequestBody = EngagementRequest

// EngagementsUpdateFormdataRequestBody defines body for EngagementsUpdate for application/x-www-form-urlencoded ContentType.
type EngagementsUpdateFormdataRequestBody = EngagementRequest

// EngagementsUpdateMultipartRequestBody defines body for EngagementsUpdate for multipart/form-data ContentType.
type EngagementsUpdateMultipartRequestBody = EngagementRequest

// EngagementsAcceptRisksCreateJSONRequestBody defines body for EngagementsAcceptRisksCreate for application/json ContentType.
type EngagementsAcceptRisksCreateJSONRequestBody = EngagementsAcceptRisksCreateJSONBody

// EngagementsAcceptRisksCreateFormdataRequestBody defines body for EngagementsAcceptRisksCreate for application/x-www-form-urlencoded ContentType.
type EngagementsAcceptRisksCreateFormdataRequestBody = EngagementsAcceptRisksCreateFormdataBody

// EngagementsAcceptRisksCreateMultipartRequestBody defines body for EngagementsAcceptRisksCreate for multipart/form-data ContentType.
type EngagementsAcceptRisksCreateMultipartRequestBody = EngagementsAcceptRisksCreateMultipartBody

// EngagementsCompleteChecklistCreateJSONRequestBody defines body for EngagementsCompleteChecklistCreate for application/json ContentType.
type EngagementsCompleteChecklistCreateJSONRequestBody = EngagementCheckListRequest

// EngagementsCompleteChecklistCreateFormdataRequestBody defines body for EngagementsCompleteChecklistCreate for application/x-www-form-urlencoded ContentType.
type EngagementsCompleteChecklistCreateFormdataRequestBody = EngagementCheckListRequest

// EngagementsCompleteChecklistCreateMultipartRequestBody defines body for EngagementsCompleteChecklistCreate for multipart/form-data ContentType.
type EngagementsCompleteChecklistCreateMultipartRequestBody = EngagementCheckListRequest

// EngagementsFilesCreateMultipartRequestBody defines body for EngagementsFilesCreate for multipart/form-data ContentType.
type EngagementsFilesCreateMultipartRequestBody = AddNewFileOptionRequest

// EngagementsGenerateReportCreateJSONRequestBody defines body for EngagementsGenerateReportCreate for application/json ContentType.
type EngagementsGenerateReportCreateJSONRequestBody = ReportGenerateOptionRequest

// EngagementsGenerateReportCreateFormdataRequestBody defines body for EngagementsGenerateReportCreate for application/x-www-form-urlencoded ContentType.
type EngagementsGenerateReportCreateFormdataRequestBody = ReportGenerateOptionRequest

// EngagementsGenerateReportCreateMultipartRequestBody defines body for EngagementsGenerateReportCreate for multipart/form-data ContentType.
type EngagementsGenerateReportCreateMultipartRequestBody = ReportGenerateOptionRequest

// EngagementsNotesCreateJSONRequestBody defines body for EngagementsNotesCreate for application/json ContentType.
type EngagementsNotesCreateJSONRequestBody = AddNewNoteOptionRequest

// EngagementsNotesCreateFormdataRequestBody defines body for EngagementsNotesCreate for application/x-www-form-urlencoded ContentType.
type EngagementsNotesCreateFormdataRequestBody = AddNewNoteOptionRequest

// EngagementsNotesCreateMultipartRequestBody defines body for EngagementsNotesCreate for multipart/form-data ContentType.
type EngagementsNotesCreateMultipartRequestBody = AddNewNoteOptionRequest

// FindingTemplatesCreateJSONRequestBody defines body for FindingTemplatesCreate for application/json ContentType.
type FindingTemplatesCreateJSONRequestBody = FindingTemplateRequest

// FindingTemplatesCreateFormdataRequestBody defines body for FindingTemplatesCreate for application/x-www-form-urlencoded ContentType.
type FindingTemplatesCreateFormdataRequestBody = FindingTemplateRequest

// FindingTemplatesCreateMultipartRequestBody defines body for FindingTemplatesCreate for multipart/form-data ContentType.
type FindingTemplatesCreateMultipartRequestBody = FindingTemplateRequest

// FindingTemplatesPartialUpdateJSONRequestBody defines body for FindingTemplatesPartialUpdate for application/json ContentType.
type FindingTemplatesPartialUpdateJSONRequestBody = PatchedFindingTemplateRequest

// FindingTemplatesPartialUpdateFormdataRequestBody defines body for FindingTemplatesPartialUpdate for application/x-www-form-urlencoded ContentType.
type FindingTemplatesPartialUpdateFormdataRequestBody = PatchedFindingTemplateRequest

// FindingTemplatesPartialUpdateMultipartRequestBody defines body for FindingTemplatesPartialUpdate for multipart/form-data ContentType.
type FindingTemplatesPartialUpdateMultipartRequestBody = PatchedFindingTemplateRequest

// FindingTemplatesUpdateJSONRequestBody defines body for FindingTemplatesUpdate for application/json ContentType.
type FindingTemplatesUpdateJSONRequestBody = FindingTemplateRequest

// FindingTemplatesUpdateFormdataRequestBody defines body for FindingTemplatesUpdate for application/x-www-form-urlencoded ContentType.
type FindingTemplatesUpdateFormdataRequestBody = FindingTemplateRequest

// FindingTemplatesUpdateMultipartRequestBody defines body for FindingTemplatesUpdate for multipart/form-data ContentType.
type FindingTemplatesUpdateMultipartRequestBody = FindingTemplateRequest

// FindingsCreateJSONRequestBody defines body for FindingsCreate for application/json ContentType.
type FindingsCreateJSONRequestBody = FindingCreateRequest

// FindingsCreateFormdataRequestBody defines body for FindingsCreate for application/x-www-form-urlencoded ContentType.
type FindingsCreateFormdataRequestBody = FindingCreateRequest

// FindingsCreateMultipartRequestBody defines body for FindingsCreate for multipart/form-data ContentType.
type FindingsCreateMultipartRequestBody = FindingCreateRequest

// FindingsAcceptRisksCreateJSONRequestBody defines body for FindingsAcceptRisksCreate for application/json ContentType.
type FindingsAcceptRisksCreateJSONRequestBody = FindingsAcceptRisksCreateJSONBody

// FindingsAcceptRisksCreateFormdataRequestBody defines body for FindingsAcceptRisksCreate for application/x-www-form-urlencoded ContentType.
type FindingsAcceptRisksCreateFormdataRequestBody = FindingsAcceptRisksCreateFormdataBody

// FindingsAcceptRisksCreateMultipartRequestBody defines body for FindingsAcceptRisksCreate for multipart/form-data ContentType.
type FindingsAcceptRisksCreateMultipartRequestBody = FindingsAcceptRisksCreateMultipartBody

// FindingsGenerateReportCreateJSONRequestBody defines body for FindingsGenerateReportCreate for application/json ContentType.
type FindingsGenerateReportCreateJSONRequestBody = ReportGenerateOptionRequest

// FindingsGenerateReportCreateFormdataRequestBody defines body for FindingsGenerateReportCreate for application/x-www-form-urlencoded ContentType.
type FindingsGenerateReportCreateFormdataRequestBody = ReportGenerateOptionRequest

// FindingsGenerateReportCreateMultipartRequestBody defines body for FindingsGenerateReportCreate for multipart/form-data ContentType.
type FindingsGenerateReportCreateMultipartRequestBody = ReportGenerateOptionRequest

// FindingsPartialUpdateJSONRequestBody defines body for FindingsPartialUpdate for application/json ContentType.
type FindingsPartialUpdateJSONRequestBody = PatchedFindingRequest

// FindingsPartialUpdateFormdataRequestBody defines body for FindingsPartialUpdate for application/x-www-form-urlencoded ContentType.
type FindingsPartialUpdateFormdataRequestBody = PatchedFindingRequest

// FindingsPartialUpdateMultipartRequestBody defines body for FindingsPartialUpdate for multipart/form-data ContentType.
type FindingsPartialUpdateMultipartRequestBody = PatchedFindingRequest

// FindingsUpdateJSONRequestBody defines body for FindingsUpdate for application/json ContentType.
type FindingsUpdateJSONRequestBody = FindingRequest

// FindingsUpdateFormdataRequestBody defines body for FindingsUpdate for application/x-www-form-urlencoded ContentType.
type FindingsUpdateFormdataRequestBody = FindingRequest

// FindingsUpdateMultipartRequestBody defines body for FindingsUpdate for multipart/form-data ContentType.
type FindingsUpdateMultipartRequestBody = FindingRequest

// FindingsCloseCreateJSONRequestBody defines body for FindingsCloseCreate for application/json ContentType.
type FindingsCloseCreateJSONRequestBody = FindingCloseRequest

// FindingsCloseCreateFormdataRequestBody defines body for FindingsCloseCreate for application/x-www-form-urlencoded ContentType.
type FindingsCloseCreateFormdataRequestBody = FindingCloseRequest

// FindingsCloseCreateMultipartRequestBody defines body for FindingsCloseCreate for multipart/form-data ContentType.
type FindingsCloseCreateMultipartRequestBody = FindingCloseRequest

// FindingsFilesCreateMultipartRequestBody defines body for FindingsFilesCreate for multipart/form-data ContentType.
type FindingsFilesCreateMultipartRequestBody = AddNewFileOptionRequest

// FindingsMetadataCreateJSONRequestBody defines body for FindingsMetadataCreate for application/json ContentType.
type FindingsMetadataCreateJSONRequestBody = FindingMetaRequest

// FindingsMetadataCreateFormdataRequestBody defines body for FindingsMetadataCreate for application/x-www-form-urlencoded ContentType.
type FindingsMetadataCreateFormdataRequestBody = FindingMetaRequest

// FindingsMetadataCreateMultipartRequestBody defines body for FindingsMetadataCreate for multipart/form-data ContentType.
type FindingsMetadataCreateMultipartRequestBody = FindingMetaRequest

// FindingsMetadataUpdateJSONRequestBody defines body for FindingsMetadataUpdate for application/json ContentType.
type FindingsMetadataUpdateJSONRequestBody = FindingMetaRequest

// FindingsMetadataUpdateFormdataRequestBody defines body for FindingsMetadataUpdate for application/x-www-form-urlencoded ContentType.
type FindingsMetadataUpdateFormdataRequestBody = FindingMetaRequest

// FindingsMetadataUpdateMultipartRequestBody defines body for FindingsMetadataUpdate for multipart/form-data ContentType.
type FindingsMetadataUpdateMultipartRequestBody = FindingMetaRequest

// FindingsNotesCreateJSONRequestBody defines body for FindingsNotesCreate for application/json ContentType.
type FindingsNotesCreateJSONRequestBody = AddNewNoteOptionRequest

// FindingsNotesCreateFormdataRequestBody defines body for FindingsNotesCreate for application/x-www-form-urlencoded ContentType.
type FindingsNotesCreateFormdataRequestBody = AddNewNoteOptionRequest

// FindingsNotesCreateMultipartRequestBody defines body for FindingsNotesCreate for multipart/form-data ContentType.
type FindingsNotesCreateMultipartRequestBody = AddNewNoteOptionRequest

// FindingsRemoveNotePartialUpdateJSONRequestBody defines body for FindingsRemoveNotePartialUpdate for application/json ContentType.
type FindingsRemoveNotePartialUpdateJSONRequestBody = PatchedFindingNoteRequest

// FindingsRemoveNotePartialUpdateFormdataRequestBody defines body for FindingsRemoveNotePartialUpdate for application/x-www-form-urlencoded ContentType.
type FindingsRemoveNotePartialUpdateFormdataRequestBody = PatchedFindingNoteRequest

// FindingsRemoveNotePartialUpdateMultipartRequestBody defines body for FindingsRemoveNotePartialUpdate for multipart/form-data ContentType.
type FindingsRemoveNotePartialUpdateMultipartRequestBody = PatchedFindingNoteRequest

// FindingsRemoveTagsPartialUpdateJSONRequestBody defines body for FindingsRemoveTagsPartialUpdate for application/json ContentType.
type FindingsRemoveTagsPartialUpdateJSONRequestBody = PatchedTagRequest

// FindingsRemoveTagsPartialUpdateFormdataRequestBody defines body for FindingsRemoveTagsPartialUpdate for application/x-www-form-urlencoded ContentType.
type FindingsRemoveTagsPartialUpdateFormdataRequestBody = PatchedTagRequest

// FindingsRemoveTagsPartialUpdateMultipartRequestBody defines body for FindingsRemoveTagsPartialUpdate for multipart/form-data ContentType.
type FindingsRemoveTagsPartialUpdateMultipartRequestBody = PatchedTagRequest

// FindingsRemoveTagsUpdateJSONRequestBody defines body for FindingsRemoveTagsUpdate for application/json ContentType.
type FindingsRemoveTagsUpdateJSONRequestBody = TagRequest

// FindingsRemoveTagsUpdateFormdataRequestBody defines body for FindingsRemoveTagsUpdate for application/x-www-form-urlencoded ContentType.
type FindingsRemoveTagsUpdateFormdataRequestBody = TagRequest

// FindingsRemoveTagsUpdateMultipartRequestBody defines body for FindingsRemoveTagsUpdate for multipart/form-data ContentType.
type FindingsRemoveTagsUpdateMultipartRequestBody = TagRequest

// FindingsRequestResponseCreateJSONRequestBody defines body for FindingsRequestResponseCreate for application/json ContentType.
type FindingsRequestResponseCreateJSONRequestBody = BurpRawRequestResponseRequest

// FindingsRequestResponseCreateFormdataRequestBody defines body for FindingsRequestResponseCreate for application/x-www-form-urlencoded ContentType.
type FindingsRequestResponseCreateFormdataRequestBody = BurpRawRequestResponseRequest

// FindingsRequestResponseCreateMultipartRequestBody defines body for FindingsRequestResponseCreate for multipart/form-data ContentType.
type FindingsRequestResponseCreateMultipartRequestBody = BurpRawRequestResponseRequest

// FindingsTagsCreateJSONRequestBody defines body for FindingsTagsCreate for application/json ContentType.
type FindingsTagsCreateJSONRequestBody = TagRequest

// FindingsTagsCreateFormdataRequestBody defines body for FindingsTagsCreate for application/x-www-form-urlencoded ContentType.
type FindingsTagsCreateFormdataRequestBody = TagRequest

// FindingsTagsCreateMultipartRequestBody defines body for FindingsTagsCreate for multipart/form-data ContentType.
type FindingsTagsCreateMultipartRequestBody = TagRequest

// GlobalRolesCreateJSONRequestBody defines body for GlobalRolesCreate for application/json ContentType.
type GlobalRolesCreateJSONRequestBody = GlobalRoleRequest

// GlobalRolesCreateFormdataRequestBody defines body for GlobalRolesCreate for application/x-www-form-urlencoded ContentType.
type GlobalRolesCreateFormdataRequestBody = GlobalRoleRequest

// GlobalRolesCreateMultipartRequestBody defines body for GlobalRolesCreate for multipart/form-data ContentType.
type GlobalRolesCreateMultipartRequestBody = GlobalRoleRequest

// GlobalRolesPartialUpdateJSONRequestBody defines body for GlobalRolesPartialUpdate for application/json ContentType.
type GlobalRolesPartialUpdateJSONRequestBody = PatchedGlobalRoleRequest

// GlobalRolesPartialUpdateFormdataRequestBody defines body for GlobalRolesPartialUpdate for application/x-www-form-urlencoded ContentType.
type GlobalRolesPartialUpdateFormdataRequestBody = PatchedGlobalRoleRequest

// GlobalRolesPartialUpdateMultipartRequestBody defines body for GlobalRolesPartialUpdate for multipart/form-data ContentType.
type GlobalRolesPartialUpdateMultipartRequestBody = PatchedGlobalRoleRequest

// GlobalRolesUpdateJSONRequestBody defines body for GlobalRolesUpdate for application/json ContentType.
type GlobalRolesUpdateJSONRequestBody = GlobalRoleRequest

// GlobalRolesUpdateFormdataRequestBody defines body for GlobalRolesUpdate for application/x-www-form-urlencoded ContentType.
type GlobalRolesUpdateFormdataRequestBody = GlobalRoleRequest

// GlobalRolesUpdateMultipartRequestBody defines body for GlobalRolesUpdate for multipart/form-data ContentType.
type GlobalRolesUpdateMultipartRequestBody = GlobalRoleRequest

// ImportLanguagesCreateMultipartRequestBody defines body for ImportLanguagesCreate for multipart/form-data ContentType.
type ImportLanguagesCreateMultipartRequestBody = ImportLanguagesRequest

// ImportScanCreateMultipartRequestBody defines body for ImportScanCreate for multipart/form-data ContentType.
type ImportScanCreateMultipartRequestBody = ImportScanRequest

// JiraConfigurationsCreateJSONRequestBody defines body for JiraConfigurationsCreate for application/json ContentType.
type JiraConfigurationsCreateJSONRequestBody = JIRAInstanceRequest

// JiraConfigurationsCreateFormdataRequestBody defines body for JiraConfigurationsCreate for application/x-www-form-urlencoded ContentType.
type JiraConfigurationsCreateFormdataRequestBody = JIRAInstanceRequest

// JiraConfigurationsCreateMultipartRequestBody defines body for JiraConfigurationsCreate for multipart/form-data ContentType.
type JiraConfigurationsCreateMultipartRequestBody = JIRAInstanceRequest

// JiraConfigurationsPartialUpdateJSONRequestBody defines body for JiraConfigurationsPartialUpdate for application/json ContentType.
type JiraConfigurationsPartialUpdateJSONRequestBody = PatchedJIRAInstanceRequest

// JiraConfigurationsPartialUpdateFormdataRequestBody defines body for JiraConfigurationsPartialUpdate for application/x-www-form-urlencoded ContentType.
type JiraConfigurationsPartialUpdateFormdataRequestBody = PatchedJIRAInstanceRequest

// JiraConfigurationsPartialUpdateMultipartRequestBody defines body for JiraConfigurationsPartialUpdate for multipart/form-data ContentType.
type JiraConfigurationsPartialUpdateMultipartRequestBody = PatchedJIRAInstanceRequest

// JiraConfigurationsUpdateJSONRequestBody defines body for JiraConfigurationsUpdate for application/json ContentType.
type JiraConfigurationsUpdateJSONRequestBody = JIRAInstanceRequest

// JiraConfigurationsUpdateFormdataRequestBody defines body for JiraConfigurationsUpdate for application/x-www-form-urlencoded ContentType.
type JiraConfigurationsUpdateFormdataRequestBody = JIRAInstanceRequest

// JiraConfigurationsUpdateMultipartRequestBody defines body for JiraConfigurationsUpdate for multipart/form-data ContentType.
type JiraConfigurationsUpdateMultipartRequestBody = JIRAInstanceRequest

// JiraFindingMappingsCreateJSONRequestBody defines body for JiraFindingMappingsCreate for application/json ContentType.
type JiraFindingMappingsCreateJSONRequestBody = JIRAIssueRequest

// JiraFindingMappingsCreateFormdataRequestBody defines body for JiraFindingMappingsCreate for application/x-www-form-urlencoded ContentType.
type JiraFindingMappingsCreateFormdataRequestBody = JIRAIssueRequest

// JiraFindingMappingsCreateMultipartRequestBody defines body for JiraFindingMappingsCreate for multipart/form-data ContentType.
type JiraFindingMappingsCreateMultipartRequestBody = JIRAIssueRequest

// JiraFindingMappingsPartialUpdateJSONRequestBody defines body for JiraFindingMappingsPartialUpdate for application/json ContentType.
type JiraFindingMappingsPartialUpdateJSONRequestBody = PatchedJIRAIssueRequest

// JiraFindingMappingsPartialUpdateFormdataRequestBody defines body for JiraFindingMappingsPartialUpdate for application/x-www-form-urlencoded ContentType.
type JiraFindingMappingsPartialUpdateFormdataRequestBody = PatchedJIRAIssueRequest

// JiraFindingMappingsPartialUpdateMultipartRequestBody defines body for JiraFindingMappingsPartialUpdate for multipart/form-data ContentType.
type JiraFindingMappingsPartialUpdateMultipartRequestBody = PatchedJIRAIssueRequest

// JiraFindingMappingsUpdateJSONRequestBody defines body for JiraFindingMappingsUpdate for application/json ContentType.
type JiraFindingMappingsUpdateJSONRequestBody = JIRAIssueRequest

// JiraFindingMappingsUpdateFormdataRequestBody defines body for JiraFindingMappingsUpdate for application/x-www-form-urlencoded ContentType.
type JiraFindingMappingsUpdateFormdataRequestBody = JIRAIssueRequest

// JiraFindingMappingsUpdateMultipartRequestBody defines body for JiraFindingMappingsUpdate for multipart/form-data ContentType.
type JiraFindingMappingsUpdateMultipartRequestBody = JIRAIssueRequest

// JiraInstancesCreateJSONRequestBody defines body for JiraInstancesCreate for application/json ContentType.
type JiraInstancesCreateJSONRequestBody = JIRAInstanceRequest

// JiraInstancesCreateFormdataRequestBody defines body for JiraInstancesCreate for application/x-www-form-urlencoded ContentType.
type JiraInstancesCreateFormdataRequestBody = JIRAInstanceRequest

// JiraInstancesCreateMultipartRequestBody defines body for JiraInstancesCreate for multipart/form-data ContentType.
type JiraInstancesCreateMultipartRequestBody = JIRAInstanceRequest

// JiraInstancesPartialUpdateJSONRequestBody defines body for JiraInstancesPartialUpdate for application/json ContentType.
type JiraInstancesPartialUpdateJSONRequestBody = PatchedJIRAInstanceRequest

// JiraInstancesPartialUpdateFormdataRequestBody defines body for JiraInstancesPartialUpdate for application/x-www-form-urlencoded ContentType.
type JiraInstancesPartialUpdateFormdataRequestBody = PatchedJIRAInstanceRequest

// JiraInstancesPartialUpdateMultipartRequestBody defines body for JiraInstancesPartialUpdate for multipart/form-data ContentType.
type JiraInstancesPartialUpdateMultipartRequestBody = PatchedJIRAInstanceRequest

// JiraInstancesUpdateJSONRequestBody defines body for JiraInstancesUpdate for application/json ContentType.
type JiraInstancesUpdateJSONRequestBody = JIRAInstanceRequest

// JiraInstancesUpdateFormdataRequestBody defines body for JiraInstancesUpdate for application/x-www-form-urlencoded ContentType.
type JiraInstancesUpdateFormdataRequestBody = JIRAInstanceRequest

// JiraInstancesUpdateMultipartRequestBody defines body for JiraInstancesUpdate for multipart/form-data ContentType.
type JiraInstancesUpdateMultipartRequestBody = JIRAInstanceRequest

// JiraProductConfigurationsCreateJSONRequestBody defines body for JiraProductConfigurationsCreate for application/json ContentType.
type JiraProductConfigurationsCreateJSONRequestBody = JIRAProjectRequest

// JiraProductConfigurationsCreateFormdataRequestBody defines body for JiraProductConfigurationsCreate for application/x-www-form-urlencoded ContentType.
type JiraProductConfigurationsCreateFormdataRequestBody = JIRAProjectRequest

// JiraProductConfigurationsCreateMultipartRequestBody defines body for JiraProductConfigurationsCreate for multipart/form-data ContentType.
type JiraProductConfigurationsCreateMultipartRequestBody = JIRAProjectRequest

// JiraProductConfigurationsPartialUpdateJSONRequestBody defines body for JiraProductConfigurationsPartialUpdate for application/json ContentType.
type JiraProductConfigurationsPartialUpdateJSONRequestBody = PatchedJIRAProjectRequest

// JiraProductConfigurationsPartialUpdateFormdataRequestBody defines body for JiraProductConfigurationsPartialUpdate for application/x-www-form-urlencoded ContentType.
type JiraProductConfigurationsPartialUpdateFormdataRequestBody = PatchedJIRAProjectRequest

// JiraProductConfigurationsPartialUpdateMultipartRequestBody defines body for JiraProductConfigurationsPartialUpdate for multipart/form-data ContentType.
type JiraProductConfigurationsPartialUpdateMultipartRequestBody = PatchedJIRAProjectRequest

// JiraProductConfigurationsUpdateJSONRequestBody defines body for JiraProductConfigurationsUpdate for application/json ContentType.
type JiraProductConfigurationsUpdateJSONRequestBody = JIRAProjectRequest

// JiraProductConfigurationsUpdateFormdataRequestBody defines body for JiraProductConfigurationsUpdate for application/x-www-form-urlencoded ContentType.
type JiraProductConfigurationsUpdateFormdataRequestBody = JIRAProjectRequest

// JiraProductConfigurationsUpdateMultipartRequestBody defines body for JiraProductConfigurationsUpdate for multipart/form-data ContentType.
type JiraProductConfigurationsUpdateMultipartRequestBody = JIRAProjectRequest

// JiraProjectsCreateJSONRequestBody defines body for JiraProjectsCreate for application/json ContentType.
type JiraProjectsCreateJSONRequestBody = JIRAProjectRequest

// JiraProjectsCreateFormdataRequestBody defines body for JiraProjectsCreate for application/x-www-form-urlencoded ContentType.
type JiraProjectsCreateFormdataRequestBody = JIRAProjectRequest

// JiraProjectsCreateMultipartRequestBody defines body for JiraProjectsCreate for multipart/form-data ContentType.
type JiraProjectsCreateMultipartRequestBody = JIRAProjectRequest

// JiraProjectsPartialUpdateJSONRequestBody defines body for JiraProjectsPartialUpdate for application/json ContentType.
type JiraProjectsPartialUpdateJSONRequestBody = PatchedJIRAProjectRequest

// JiraProjectsPartialUpdateFormdataRequestBody defines body for JiraProjectsPartialUpdate for application/x-www-form-urlencoded ContentType.
type JiraProjectsPartialUpdateFormdataRequestBody = PatchedJIRAProjectRequest

// JiraProjectsPartialUpdateMultipartRequestBody defines body for JiraProjectsPartialUpdate for multipart/form-data ContentType.
type JiraProjectsPartialUpdateMultipartRequestBody = PatchedJIRAProjectRequest

// JiraProjectsUpdateJSONRequestBody defines body for JiraProjectsUpdate for application/json ContentType.
type JiraProjectsUpdateJSONRequestBody = JIRAProjectRequest

// JiraProjectsUpdateFormdataRequestBody defines body for JiraProjectsUpdate for application/x-www-form-urlencoded ContentType.
type JiraProjectsUpdateFormdataRequestBody = JIRAProjectRequest

// JiraProjectsUpdateMultipartRequestBody defines body for JiraProjectsUpdate for multipart/form-data ContentType.
type JiraProjectsUpdateMultipartRequestBody = JIRAProjectRequest

// LanguageTypesCreateJSONRequestBody defines body for LanguageTypesCreate for application/json ContentType.
type LanguageTypesCreateJSONRequestBody = LanguageTypeRequest

// LanguageTypesCreateFormdataRequestBody defines body for LanguageTypesCreate for application/x-www-form-urlencoded ContentType.
type LanguageTypesCreateFormdataRequestBody = LanguageTypeRequest

// LanguageTypesCreateMultipartRequestBody defines body for LanguageTypesCreate for multipart/form-data ContentType.
type LanguageTypesCreateMultipartRequestBody = LanguageTypeRequest

// LanguageTypesPartialUpdateJSONRequestBody defines body for LanguageTypesPartialUpdate for application/json ContentType.
type LanguageTypesPartialUpdateJSONRequestBody = PatchedLanguageTypeRequest

// LanguageTypesPartialUpdateFormdataRequestBody defines body for LanguageTypesPartialUpdate for application/x-www-form-urlencoded ContentType.
type LanguageTypesPartialUpdateFormdataRequestBody = PatchedLanguageTypeRequest

// LanguageTypesPartialUpdateMultipartRequestBody defines body for LanguageTypesPartialUpdate for multipart/form-data ContentType.
type LanguageTypesPartialUpdateMultipartRequestBody = PatchedLanguageTypeRequest

// LanguageTypesUpdateJSONRequestBody defines body for LanguageTypesUpdate for application/json ContentType.
type LanguageTypesUpdateJSONRequestBody = LanguageTypeRequest

// LanguageTypesUpdateFormdataRequestBody defines body for LanguageTypesUpdate for application/x-www-form-urlencoded ContentType.
type LanguageTypesUpdateFormdataRequestBody = LanguageTypeRequest

// LanguageTypesUpdateMultipartRequestBody defines body for LanguageTypesUpdate for multipart/form-data ContentType.
type LanguageTypesUpdateMultipartRequestBody = LanguageTypeRequest

// LanguagesCreateJSONRequestBody defines body for LanguagesCreate for application/json ContentType.
type LanguagesCreateJSONRequestBody = LanguageRequest

// LanguagesCreateFormdataRequestBody defines body for LanguagesCreate for application/x-www-form-urlencoded ContentType.
type LanguagesCreateFormdataRequestBody = LanguageRequest

// LanguagesCreateMultipartRequestBody defines body for LanguagesCreate for multipart/form-data ContentType.
type LanguagesCreateMultipartRequestBody = LanguageRequest

// LanguagesPartialUpdateJSONRequestBody defines body for LanguagesPartialUpdate for application/json ContentType.
type LanguagesPartialUpdateJSONRequestBody = PatchedLanguageRequest

// LanguagesPartialUpdateFormdataRequestBody defines body for LanguagesPartialUpdate for application/x-www-form-urlencoded ContentType.
type LanguagesPartialUpdateFormdataRequestBody = PatchedLanguageRequest

// LanguagesPartialUpdateMultipartRequestBody defines body for LanguagesPartialUpdate for multipart/form-data ContentType.
type LanguagesPartialUpdateMultipartRequestBody = PatchedLanguageRequest

// LanguagesUpdateJSONRequestBody defines body for LanguagesUpdate for application/json ContentType.
type LanguagesUpdateJSONRequestBody = LanguageRequest

// LanguagesUpdateFormdataRequestBody defines body for LanguagesUpdate for application/x-www-form-urlencoded ContentType.
type LanguagesUpdateFormdataRequestBody = LanguageRequest

// LanguagesUpdateMultipartRequestBody defines body for LanguagesUpdate for multipart/form-data ContentType.
type LanguagesUpdateMultipartRequestBody = LanguageRequest

// MetadataCreateJSONRequestBody defines body for MetadataCreate for application/json ContentType.
type MetadataCreateJSONRequestBody = MetaRequest

// MetadataCreateFormdataRequestBody defines body for MetadataCreate for application/x-www-form-urlencoded ContentType.
type MetadataCreateFormdataRequestBody = MetaRequest

// MetadataCreateMultipartRequestBody defines body for MetadataCreate for multipart/form-data ContentType.
type MetadataCreateMultipartRequestBody = MetaRequest

// MetadataPartialUpdateJSONRequestBody defines body for MetadataPartialUpdate for application/json ContentType.
type MetadataPartialUpdateJSONRequestBody = PatchedMetaRequest

// MetadataPartialUpdateFormdataRequestBody defines body for MetadataPartialUpdate for application/x-www-form-urlencoded ContentType.
type MetadataPartialUpdateFormdataRequestBody = PatchedMetaRequest

// MetadataPartialUpdateMultipartRequestBody defines body for MetadataPartialUpdate for multipart/form-data ContentType.
type MetadataPartialUpdateMultipartRequestBody = PatchedMetaRequest

// MetadataUpdateJSONRequestBody defines body for MetadataUpdate for application/json ContentType.
type MetadataUpdateJSONRequestBody = MetaRequest

// MetadataUpdateFormdataRequestBody defines body for MetadataUpdate for application/x-www-form-urlencoded ContentType.
type MetadataUpdateFormdataRequestBody = MetaRequest

// MetadataUpdateMultipartRequestBody defines body for MetadataUpdate for multipart/form-data ContentType.
type MetadataUpdateMultipartRequestBody = MetaRequest

// NetworkLocationsCreateJSONRequestBody defines body for NetworkLocationsCreate for application/json ContentType.
type NetworkLocationsCreateJSONRequestBody = NetworkLocationsRequest

// NetworkLocationsCreateFormdataRequestBody defines body for NetworkLocationsCreate for application/x-www-form-urlencoded ContentType.
type NetworkLocationsCreateFormdataRequestBody = NetworkLocationsRequest

// NetworkLocationsCreateMultipartRequestBody defines body for NetworkLocationsCreate for multipart/form-data ContentType.
type NetworkLocationsCreateMultipartRequestBody = NetworkLocationsRequest

// NetworkLocationsPartialUpdateJSONRequestBody defines body for NetworkLocationsPartialUpdate for application/json ContentType.
type NetworkLocationsPartialUpdateJSONRequestBody = PatchedNetworkLocationsRequest

// NetworkLocationsPartialUpdateFormdataRequestBody defines body for NetworkLocationsPartialUpdate for application/x-www-form-urlencoded ContentType.
type NetworkLocationsPartialUpdateFormdataRequestBody = PatchedNetworkLocationsRequest

// NetworkLocationsPartialUpdateMultipartRequestBody defines body for NetworkLocationsPartialUpdate for multipart/form-data ContentType.
type NetworkLocationsPartialUpdateMultipartRequestBody = PatchedNetworkLocationsRequest

// NetworkLocationsUpdateJSONRequestBody defines body for NetworkLocationsUpdate for application/json ContentType.
type NetworkLocationsUpdateJSONRequestBody = NetworkLocationsRequest

// NetworkLocationsUpdateFormdataRequestBody defines body for NetworkLocationsUpdate for application/x-www-form-urlencoded ContentType.
type NetworkLocationsUpdateFormdataRequestBody = NetworkLocationsRequest

// NetworkLocationsUpdateMultipartRequestBody defines body for NetworkLocationsUpdate for multipart/form-data ContentType.
type NetworkLocationsUpdateMultipartRequestBody = NetworkLocationsRequest

// NoteTypeCreateJSONRequestBody defines body for NoteTypeCreate for application/json ContentType.
type NoteTypeCreateJSONRequestBody = NoteTypeRequest

// NoteTypeCreateFormdataRequestBody defines body for NoteTypeCreate for application/x-www-form-urlencoded ContentType.
type NoteTypeCreateFormdataRequestBody = NoteTypeRequest

// NoteTypeCreateMultipartRequestBody defines body for NoteTypeCreate for multipart/form-data ContentType.
type NoteTypeCreateMultipartRequestBody = NoteTypeRequest

// NoteTypePartialUpdateJSONRequestBody defines body for NoteTypePartialUpdate for application/json ContentType.
type NoteTypePartialUpdateJSONRequestBody = PatchedNoteTypeRequest

// NoteTypePartialUpdateFormdataRequestBody defines body for NoteTypePartialUpdate for application/x-www-form-urlencoded ContentType.
type NoteTypePartialUpdateFormdataRequestBody = PatchedNoteTypeRequest

// NoteTypePartialUpdateMultipartRequestBody defines body for NoteTypePartialUpdate for multipart/form-data ContentType.
type NoteTypePartialUpdateMultipartRequestBody = PatchedNoteTypeRequest

// NoteTypeUpdateJSONRequestBody defines body for NoteTypeUpdate for application/json ContentType.
type NoteTypeUpdateJSONRequestBody = NoteTypeRequest

// NoteTypeUpdateFormdataRequestBody defines body for NoteTypeUpdate for application/x-www-form-urlencoded ContentType.
type NoteTypeUpdateFormdataRequestBody = NoteTypeRequest

// NoteTypeUpdateMultipartRequestBody defines body for NoteTypeUpdate for multipart/form-data ContentType.
type NoteTypeUpdateMultipartRequestBody = NoteTypeRequest

// NotesPartialUpdateJSONRequestBody defines body for NotesPartialUpdate for application/json ContentType.
type NotesPartialUpdateJSONRequestBody = PatchedNoteRequest

// NotesPartialUpdateFormdataRequestBody defines body for NotesPartialUpdate for application/x-www-form-urlencoded ContentType.
type NotesPartialUpdateFormdataRequestBody = PatchedNoteRequest

// NotesPartialUpdateMultipartRequestBody defines body for NotesPartialUpdate for multipart/form-data ContentType.
type NotesPartialUpdateMultipartRequestBody = PatchedNoteRequest

// NotesUpdateJSONRequestBody defines body for NotesUpdate for application/json ContentType.
type NotesUpdateJSONRequestBody = NoteRequest

// NotesUpdateFormdataRequestBody defines body for NotesUpdate for application/x-www-form-urlencoded ContentType.
type NotesUpdateFormdataRequestBody = NoteRequest

// NotesUpdateMultipartRequestBody defines body for NotesUpdate for multipart/form-data ContentType.
type NotesUpdateMultipartRequestBody = NoteRequest

// NotificationsCreateJSONRequestBody defines body for NotificationsCreate for application/json ContentType.
type NotificationsCreateJSONRequestBody = NotificationsRequest

// NotificationsCreateFormdataRequestBody defines body for NotificationsCreate for application/x-www-form-urlencoded ContentType.
type NotificationsCreateFormdataRequestBody = NotificationsRequest

// NotificationsCreateMultipartRequestBody defines body for NotificationsCreate for multipart/form-data ContentType.
type NotificationsCreateMultipartRequestBody = NotificationsRequest

// NotificationsPartialUpdateJSONRequestBody defines body for NotificationsPartialUpdate for application/json ContentType.
type NotificationsPartialUpdateJSONRequestBody = PatchedNotificationsRequest

// NotificationsPartialUpdateFormdataRequestBody defines body for NotificationsPartialUpdate for application/x-www-form-urlencoded ContentType.
type NotificationsPartialUpdateFormdataRequestBody = PatchedNotificationsRequest

// NotificationsPartialUpdateMultipartRequestBody defines body for NotificationsPartialUpdate for multipart/form-data ContentType.
type NotificationsPartialUpdateMultipartRequestBody = PatchedNotificationsRequest

// NotificationsUpdateJSONRequestBody defines body for NotificationsUpdate for application/json ContentType.
type NotificationsUpdateJSONRequestBody = NotificationsRequest

// NotificationsUpdateFormdataRequestBody defines body for NotificationsUpdate for application/x-www-form-urlencoded ContentType.
type NotificationsUpdateFormdataRequestBody = NotificationsRequest

// NotificationsUpdateMultipartRequestBody defines body for NotificationsUpdate for multipart/form-data ContentType.
type NotificationsUpdateMultipartRequestBody = NotificationsRequest

// ProductApiScanConfigurationsCreateJSONRequestBody defines body for ProductApiScanConfigurationsCreate for application/json ContentType.
type ProductApiScanConfigurationsCreateJSONRequestBody = ProductAPIScanConfigurationRequest

// ProductApiScanConfigurationsCreateFormdataRequestBody defines body for ProductApiScanConfigurationsCreate for application/x-www-form-urlencoded ContentType.
type ProductApiScanConfigurationsCreateFormdataRequestBody = ProductAPIScanConfigurationRequest

// ProductApiScanConfigurationsCreateMultipartRequestBody defines body for ProductApiScanConfigurationsCreate for multipart/form-data ContentType.
type ProductApiScanConfigurationsCreateMultipartRequestBody = ProductAPIScanConfigurationRequest

// ProductApiScanConfigurationsPartialUpdateJSONRequestBody defines body for ProductApiScanConfigurationsPartialUpdate for application/json ContentType.
type ProductApiScanConfigurationsPartialUpdateJSONRequestBody = PatchedProductAPIScanConfigurationRequest

// ProductApiScanConfigurationsPartialUpdateFormdataRequestBody defines body for ProductApiScanConfigurationsPartialUpdate for application/x-www-form-urlencoded ContentType.
type ProductApiScanConfigurationsPartialUpdateFormdataRequestBody = PatchedProductAPIScanConfigurationRequest

// ProductApiScanConfigurationsPartialUpdateMultipartRequestBody defines body for ProductApiScanConfigurationsPartialUpdate for multipart/form-data ContentType.
type ProductApiScanConfigurationsPartialUpdateMultipartRequestBody = PatchedProductAPIScanConfigurationRequest

// ProductApiScanConfigurationsUpdateJSONRequestBody defines body for ProductApiScanConfigurationsUpdate for application/json ContentType.
type ProductApiScanConfigurationsUpdateJSONRequestBody = ProductAPIScanConfigurationRequest

// ProductApiScanConfigurationsUpdateFormdataRequestBody defines body for ProductApiScanConfigurationsUpdate for application/x-www-form-urlencoded ContentType.
type ProductApiScanConfigurationsUpdateFormdataRequestBody = ProductAPIScanConfigurationRequest

// ProductApiScanConfigurationsUpdateMultipartRequestBody defines body for ProductApiScanConfigurationsUpdate for multipart/form-data ContentType.
type ProductApiScanConfigurationsUpdateMultipartRequestBody = ProductAPIScanConfigurationRequest

// ProductGroupsCreateJSONRequestBody defines body for ProductGroupsCreate for application/json ContentType.
type ProductGroupsCreateJSONRequestBody = ProductGroupRequest

// ProductGroupsCreateFormdataRequestBody defines body for ProductGroupsCreate for application/x-www-form-urlencoded ContentType.
type ProductGroupsCreateFormdataRequestBody = ProductGroupRequest

// ProductGroupsCreateMultipartRequestBody defines body for ProductGroupsCreate for multipart/form-data ContentType.
type ProductGroupsCreateMultipartRequestBody = ProductGroupRequest

// ProductGroupsUpdateJSONRequestBody defines body for ProductGroupsUpdate for application/json ContentType.
type ProductGroupsUpdateJSONRequestBody = ProductGroupRequest

// ProductGroupsUpdateFormdataRequestBody defines body for ProductGroupsUpdate for application/x-www-form-urlencoded ContentType.
type ProductGroupsUpdateFormdataRequestBody = ProductGroupRequest

// ProductGroupsUpdateMultipartRequestBody defines body for ProductGroupsUpdate for multipart/form-data ContentType.
type ProductGroupsUpdateMultipartRequestBody = ProductGroupRequest

// ProductMembersCreateJSONRequestBody defines body for ProductMembersCreate for application/json ContentType.
type ProductMembersCreateJSONRequestBody = ProductMemberRequest

// ProductMembersCreateFormdataRequestBody defines body for ProductMembersCreate for application/x-www-form-urlencoded ContentType.
type ProductMembersCreateFormdataRequestBody = ProductMemberRequest

// ProductMembersCreateMultipartRequestBody defines body for ProductMembersCreate for multipart/form-data ContentType.
type ProductMembersCreateMultipartRequestBody = ProductMemberRequest

// ProductMembersUpdateJSONRequestBody defines body for ProductMembersUpdate for application/json ContentType.
type ProductMembersUpdateJSONRequestBody = ProductMemberRequest

// ProductMembersUpdateFormdataRequestBody defines body for ProductMembersUpdate for application/x-www-form-urlencoded ContentType.
type ProductMembersUpdateFormdataRequestBody = ProductMemberRequest

// ProductMembersUpdateMultipartRequestBody defines body for ProductMembersUpdate for multipart/form-data ContentType.
type ProductMembersUpdateMultipartRequestBody = ProductMemberRequest

// ProductTypeGroupsCreateJSONRequestBody defines body for ProductTypeGroupsCreate for application/json ContentType.
type ProductTypeGroupsCreateJSONRequestBody = ProductTypeGroupRequest

// ProductTypeGroupsCreateFormdataRequestBody defines body for ProductTypeGroupsCreate for application/x-www-form-urlencoded ContentType.
type ProductTypeGroupsCreateFormdataRequestBody = ProductTypeGroupRequest

// ProductTypeGroupsCreateMultipartRequestBody defines body for ProductTypeGroupsCreate for multipart/form-data ContentType.
type ProductTypeGroupsCreateMultipartRequestBody = ProductTypeGroupRequest

// ProductTypeGroupsUpdateJSONRequestBody defines body for ProductTypeGroupsUpdate for application/json ContentType.
type ProductTypeGroupsUpdateJSONRequestBody = ProductTypeGroupRequest

// ProductTypeGroupsUpdateFormdataRequestBody defines body for ProductTypeGroupsUpdate for application/x-www-form-urlencoded ContentType.
type ProductTypeGroupsUpdateFormdataRequestBody = ProductTypeGroupRequest

// ProductTypeGroupsUpdateMultipartRequestBody defines body for ProductTypeGroupsUpdate for multipart/form-data ContentType.
type ProductTypeGroupsUpdateMultipartRequestBody = ProductTypeGroupRequest

// ProductTypeMembersCreateJSONRequestBody defines body for ProductTypeMembersCreate for application/json ContentType.
type ProductTypeMembersCreateJSONRequestBody = ProductTypeMemberRequest

// ProductTypeMembersCreateFormdataRequestBody defines body for ProductTypeMembersCreate for application/x-www-form-urlencoded ContentType.
type ProductTypeMembersCreateFormdataRequestBody = ProductTypeMemberRequest

// ProductTypeMembersCreateMultipartRequestBody defines body for ProductTypeMembersCreate for multipart/form-data ContentType.
type ProductTypeMembersCreateMultipartRequestBody = ProductTypeMemberRequest

// ProductTypeMembersUpdateJSONRequestBody defines body for ProductTypeMembersUpdate for application/json ContentType.
type ProductTypeMembersUpdateJSONRequestBody = ProductTypeMemberRequest

// ProductTypeMembersUpdateFormdataRequestBody defines body for ProductTypeMembersUpdate for application/x-www-form-urlencoded ContentType.
type ProductTypeMembersUpdateFormdataRequestBody = ProductTypeMemberRequest

// ProductTypeMembersUpdateMultipartRequestBody defines body for ProductTypeMembersUpdate for multipart/form-data ContentType.
type ProductTypeMembersUpdateMultipartRequestBody = ProductTypeMemberRequest

// ProductTypesCreateJSONRequestBody defines body for ProductTypesCreate for application/json ContentType.
type ProductTypesCreateJSONRequestBody = ProductTypeRequest

// ProductTypesCreateFormdataRequestBody defines body for ProductTypesCreate for application/x-www-form-urlencoded ContentType.
type ProductTypesCreateFormdataRequestBody = ProductTypeRequest

// ProductTypesCreateMultipartRequestBody defines body for ProductTypesCreate for multipart/form-data ContentType.
type ProductTypesCreateMultipartRequestBody = ProductTypeRequest

// ProductTypesPartialUpdateJSONRequestBody defines body for ProductTypesPartialUpdate for application/json ContentType.
type ProductTypesPartialUpdateJSONRequestBody = PatchedProductTypeRequest

// ProductTypesPartialUpdateFormdataRequestBody defines body for ProductTypesPartialUpdate for application/x-www-form-urlencoded ContentType.
type ProductTypesPartialUpdateFormdataRequestBody = PatchedProductTypeRequest

// ProductTypesPartialUpdateMultipartRequestBody defines body for ProductTypesPartialUpdate for multipart/form-data ContentType.
type ProductTypesPartialUpdateMultipartRequestBody = PatchedProductTypeRequest

// ProductTypesUpdateJSONRequestBody defines body for ProductTypesUpdate for application/json ContentType.
type ProductTypesUpdateJSONRequestBody = ProductTypeRequest

// ProductTypesUpdateFormdataRequestBody defines body for ProductTypesUpdate for application/x-www-form-urlencoded ContentType.
type ProductTypesUpdateFormdataRequestBody = ProductTypeRequest

// ProductTypesUpdateMultipartRequestBody defines body for ProductTypesUpdate for multipart/form-data ContentType.
type ProductTypesUpdateMultipartRequestBody = ProductTypeRequest

// ProductTypesGenerateReportCreateJSONRequestBody defines body for ProductTypesGenerateReportCreate for application/json ContentType.
type ProductTypesGenerateReportCreateJSONRequestBody = ReportGenerateOptionRequest

// ProductTypesGenerateReportCreateFormdataRequestBody defines body for ProductTypesGenerateReportCreate for application/x-www-form-urlencoded ContentType.
type ProductTypesGenerateReportCreateFormdataRequestBody = ReportGenerateOptionRequest

// ProductTypesGenerateReportCreateMultipartRequestBody defines body for ProductTypesGenerateReportCreate for multipart/form-data ContentType.
type ProductTypesGenerateReportCreateMultipartRequestBody = ReportGenerateOptionRequest

// ProductsCreateJSONRequestBody defines body for ProductsCreate for application/json ContentType.
type ProductsCreateJSONRequestBody = ProductRequest

// ProductsCreateFormdataRequestBody defines body for ProductsCreate for application/x-www-form-urlencoded ContentType.
type ProductsCreateFormdataRequestBody = ProductRequest

// ProductsCreateMultipartRequestBody defines body for ProductsCreate for multipart/form-data ContentType.
type ProductsCreateMultipartRequestBody = ProductRequest

// ProductsPartialUpdateJSONRequestBody defines body for ProductsPartialUpdate for application/json ContentType.
type ProductsPartialUpdateJSONRequestBody = PatchedProductRequest

// ProductsPartialUpdateFormdataRequestBody defines body for ProductsPartialUpdate for application/x-www-form-urlencoded ContentType.
type ProductsPartialUpdateFormdataRequestBody = PatchedProductRequest

// ProductsPartialUpdateMultipartRequestBody defines body for ProductsPartialUpdate for multipart/form-data ContentType.
type ProductsPartialUpdateMultipartRequestBody = PatchedProductRequest

// ProductsUpdateJSONRequestBody defines body for ProductsUpdate for application/json ContentType.
type ProductsUpdateJSONRequestBody = ProductRequest

// ProductsUpdateFormdataRequestBody defines body for ProductsUpdate for application/x-www-form-urlencoded ContentType.
type ProductsUpdateFormdataRequestBody = ProductRequest

// ProductsUpdateMultipartRequestBody defines body for ProductsUpdate for multipart/form-data ContentType.
type ProductsUpdateMultipartRequestBody = ProductRequest

// ProductsGenerateReportCreateJSONRequestBody defines body for ProductsGenerateReportCreate for application/json ContentType.
type ProductsGenerateReportCreateJSONRequestBody = ReportGenerateOptionRequest

// ProductsGenerateReportCreateFormdataRequestBody defines body for ProductsGenerateReportCreate for application/x-www-form-urlencoded ContentType.
type ProductsGenerateReportCreateFormdataRequestBody = ReportGenerateOptionRequest

// ProductsGenerateReportCreateMultipartRequestBody defines body for ProductsGenerateReportCreate for multipart/form-data ContentType.
type ProductsGenerateReportCreateMultipartRequestBody = ReportGenerateOptionRequest

// RegulationsCreateJSONRequestBody defines body for RegulationsCreate for application/json ContentType.
type RegulationsCreateJSONRequestBody = RegulationRequest

// RegulationsCreateFormdataRequestBody defines body for RegulationsCreate for application/x-www-form-urlencoded ContentType.
type RegulationsCreateFormdataRequestBody = RegulationRequest

// RegulationsCreateMultipartRequestBody defines body for RegulationsCreate for multipart/form-data ContentType.
type RegulationsCreateMultipartRequestBody = RegulationRequest

// RegulationsPartialUpdateJSONRequestBody defines body for RegulationsPartialUpdate for application/json ContentType.
type RegulationsPartialUpdateJSONRequestBody = PatchedRegulationRequest

// RegulationsPartialUpdateFormdataRequestBody defines body for RegulationsPartialUpdate for application/x-www-form-urlencoded ContentType.
type RegulationsPartialUpdateFormdataRequestBody = PatchedRegulationRequest

// RegulationsPartialUpdateMultipartRequestBody defines body for RegulationsPartialUpdate for multipart/form-data ContentType.
type RegulationsPartialUpdateMultipartRequestBody = PatchedRegulationRequest

// RegulationsUpdateJSONRequestBody defines body for RegulationsUpdate for application/json ContentType.
type RegulationsUpdateJSONRequestBody = RegulationRequest

// RegulationsUpdateFormdataRequestBody defines body for RegulationsUpdate for application/x-www-form-urlencoded ContentType.
type RegulationsUpdateFormdataRequestBody = RegulationRequest

// RegulationsUpdateMultipartRequestBody defines body for RegulationsUpdate for multipart/form-data ContentType.
type RegulationsUpdateMultipartRequestBody = RegulationRequest

// ReimportScanCreateMultipartRequestBody defines body for ReimportScanCreate for multipart/form-data ContentType.
type ReimportScanCreateMultipartRequestBody = ReImportScanRequest

// SlaConfigurationsCreateJSONRequestBody defines body for SlaConfigurationsCreate for application/json ContentType.
type SlaConfigurationsCreateJSONRequestBody = SLAConfigurationRequest

// SlaConfigurationsCreateFormdataRequestBody defines body for SlaConfigurationsCreate for application/x-www-form-urlencoded ContentType.
type SlaConfigurationsCreateFormdataRequestBody = SLAConfigurationRequest

// SlaConfigurationsCreateMultipartRequestBody defines body for SlaConfigurationsCreate for multipart/form-data ContentType.
type SlaConfigurationsCreateMultipartRequestBody = SLAConfigurationRequest

// SlaConfigurationsPartialUpdateJSONRequestBody defines body for SlaConfigurationsPartialUpdate for application/json ContentType.
type SlaConfigurationsPartialUpdateJSONRequestBody = PatchedSLAConfigurationRequest

// SlaConfigurationsPartialUpdateFormdataRequestBody defines body for SlaConfigurationsPartialUpdate for application/x-www-form-urlencoded ContentType.
type SlaConfigurationsPartialUpdateFormdataRequestBody = PatchedSLAConfigurationRequest

// SlaConfigurationsPartialUpdateMultipartRequestBody defines body for SlaConfigurationsPartialUpdate for multipart/form-data ContentType.
type SlaConfigurationsPartialUpdateMultipartRequestBody = PatchedSLAConfigurationRequest

// SlaConfigurationsUpdateJSONRequestBody defines body for SlaConfigurationsUpdate for application/json ContentType.
type SlaConfigurationsUpdateJSONRequestBody = SLAConfigurationRequest

// SlaConfigurationsUpdateFormdataRequestBody defines body for SlaConfigurationsUpdate for application/x-www-form-urlencoded ContentType.
type SlaConfigurationsUpdateFormdataRequestBody = SLAConfigurationRequest

// SlaConfigurationsUpdateMultipartRequestBody defines body for SlaConfigurationsUpdate for multipart/form-data ContentType.
type SlaConfigurationsUpdateMultipartRequestBody = SLAConfigurationRequest

// SonarqubeIssuesCreateJSONRequestBody defines body for SonarqubeIssuesCreate for application/json ContentType.
type SonarqubeIssuesCreateJSONRequestBody = SonarqubeIssueRequest

// SonarqubeIssuesCreateFormdataRequestBody defines body for SonarqubeIssuesCreate for application/x-www-form-urlencoded ContentType.
type SonarqubeIssuesCreateFormdataRequestBody = SonarqubeIssueRequest

// SonarqubeIssuesCreateMultipartRequestBody defines body for SonarqubeIssuesCreate for multipart/form-data ContentType.
type SonarqubeIssuesCreateMultipartRequestBody = SonarqubeIssueRequest

// SonarqubeIssuesPartialUpdateJSONRequestBody defines body for SonarqubeIssuesPartialUpdate for application/json ContentType.
type SonarqubeIssuesPartialUpdateJSONRequestBody = PatchedSonarqubeIssueRequest

// SonarqubeIssuesPartialUpdateFormdataRequestBody defines body for SonarqubeIssuesPartialUpdate for application/x-www-form-urlencoded ContentType.
type SonarqubeIssuesPartialUpdateFormdataRequestBody = PatchedSonarqubeIssueRequest

// SonarqubeIssuesPartialUpdateMultipartRequestBody defines body for SonarqubeIssuesPartialUpdate for multipart/form-data ContentType.
type SonarqubeIssuesPartialUpdateMultipartRequestBody = PatchedSonarqubeIssueRequest

// SonarqubeIssuesUpdateJSONRequestBody defines body for SonarqubeIssuesUpdate for application/json ContentType.
type SonarqubeIssuesUpdateJSONRequestBody = SonarqubeIssueRequest

// SonarqubeIssuesUpdateFormdataRequestBody defines body for SonarqubeIssuesUpdate for application/x-www-form-urlencoded ContentType.
type SonarqubeIssuesUpdateFormdataRequestBody = SonarqubeIssueRequest

// SonarqubeIssuesUpdateMultipartRequestBody defines body for SonarqubeIssuesUpdate for multipart/form-data ContentType.
type SonarqubeIssuesUpdateMultipartRequestBody = SonarqubeIssueRequest

// SonarqubeTransitionsCreateJSONRequestBody defines body for SonarqubeTransitionsCreate for application/json ContentType.
type SonarqubeTransitionsCreateJSONRequestBody = SonarqubeIssueTransitionRequest

// SonarqubeTransitionsCreateFormdataRequestBody defines body for SonarqubeTransitionsCreate for application/x-www-form-urlencoded ContentType.
type SonarqubeTransitionsCreateFormdataRequestBody = SonarqubeIssueTransitionRequest

// SonarqubeTransitionsCreateMultipartRequestBody defines body for SonarqubeTransitionsCreate for multipart/form-data ContentType.
type SonarqubeTransitionsCreateMultipartRequestBody = SonarqubeIssueTransitionRequest

// SonarqubeTransitionsPartialUpdateJSONRequestBody defines body for SonarqubeTransitionsPartialUpdate for application/json ContentType.
type SonarqubeTransitionsPartialUpdateJSONRequestBody = PatchedSonarqubeIssueTransitionRequest

// SonarqubeTransitionsPartialUpdateFormdataRequestBody defines body for SonarqubeTransitionsPartialUpdate for application/x-www-form-urlencoded ContentType.
type SonarqubeTransitionsPartialUpdateFormdataRequestBody = PatchedSonarqubeIssueTransitionRequest

// SonarqubeTransitionsPartialUpdateMultipartRequestBody defines body for SonarqubeTransitionsPartialUpdate for multipart/form-data ContentType.
type SonarqubeTransitionsPartialUpdateMultipartRequestBody = PatchedSonarqubeIssueTransitionRequest

// SonarqubeTransitionsUpdateJSONRequestBody defines body for SonarqubeTransitionsUpdate for application/json ContentType.
type SonarqubeTransitionsUpdateJSONRequestBody = SonarqubeIssueTransitionRequest

// SonarqubeTransitionsUpdateFormdataRequestBody defines body for SonarqubeTransitionsUpdate for application/x-www-form-urlencoded ContentType.
type SonarqubeTransitionsUpdateFormdataRequestBody = SonarqubeIssueTransitionRequest

// SonarqubeTransitionsUpdateMultipartRequestBody defines body for SonarqubeTransitionsUpdate for multipart/form-data ContentType.
type SonarqubeTransitionsUpdateMultipartRequestBody = SonarqubeIssueTransitionRequest

// StubFindingsCreateJSONRequestBody defines body for StubFindingsCreate for application/json ContentType.
type StubFindingsCreateJSONRequestBody = StubFindingCreateRequest

// StubFindingsCreateFormdataRequestBody defines body for StubFindingsCreate for application/x-www-form-urlencoded ContentType.
type StubFindingsCreateFormdataRequestBody = StubFindingCreateRequest

// StubFindingsCreateMultipartRequestBody defines body for StubFindingsCreate for multipart/form-data ContentType.
type StubFindingsCreateMultipartRequestBody = StubFindingCreateRequest

// StubFindingsPartialUpdateJSONRequestBody defines body for StubFindingsPartialUpdate for application/json ContentType.
type StubFindingsPartialUpdateJSONRequestBody = PatchedStubFindingRequest

// StubFindingsPartialUpdateFormdataRequestBody defines body for StubFindingsPartialUpdate for application/x-www-form-urlencoded ContentType.
type StubFindingsPartialUpdateFormdataRequestBody = PatchedStubFindingRequest

// StubFindingsPartialUpdateMultipartRequestBody defines body for StubFindingsPartialUpdate for multipart/form-data ContentType.
type StubFindingsPartialUpdateMultipartRequestBody = PatchedStubFindingRequest

// StubFindingsUpdateJSONRequestBody defines body for StubFindingsUpdate for application/json ContentType.
type StubFindingsUpdateJSONRequestBody = StubFindingRequest

// StubFindingsUpdateFormdataRequestBody defines body for StubFindingsUpdate for application/x-www-form-urlencoded ContentType.
type StubFindingsUpdateFormdataRequestBody = StubFindingRequest

// StubFindingsUpdateMultipartRequestBody defines body for StubFindingsUpdate for multipart/form-data ContentType.
type StubFindingsUpdateMultipartRequestBody = StubFindingRequest

// SystemSettingsPartialUpdateJSONRequestBody defines body for SystemSettingsPartialUpdate for application/json ContentType.
type SystemSettingsPartialUpdateJSONRequestBody = PatchedSystemSettingsRequest

// SystemSettingsPartialUpdateFormdataRequestBody defines body for SystemSettingsPartialUpdate for application/x-www-form-urlencoded ContentType.
type SystemSettingsPartialUpdateFormdataRequestBody = PatchedSystemSettingsRequest

// SystemSettingsPartialUpdateMultipartRequestBody defines body for SystemSettingsPartialUpdate for multipart/form-data ContentType.
type SystemSettingsPartialUpdateMultipartRequestBody = PatchedSystemSettingsRequest

// SystemSettingsUpdateJSONRequestBody defines body for SystemSettingsUpdate for application/json ContentType.
type SystemSettingsUpdateJSONRequestBody = SystemSettingsRequest

// SystemSettingsUpdateFormdataRequestBody defines body for SystemSettingsUpdate for application/x-www-form-urlencoded ContentType.
type SystemSettingsUpdateFormdataRequestBody = SystemSettingsRequest

// SystemSettingsUpdateMultipartRequestBody defines body for SystemSettingsUpdate for multipart/form-data ContentType.
type SystemSettingsUpdateMultipartRequestBody = SystemSettingsRequest

// TechnologiesCreateJSONRequestBody defines body for TechnologiesCreate for application/json ContentType.
type TechnologiesCreateJSONRequestBody = AppAnalysisRequest

// TechnologiesCreateFormdataRequestBody defines body for TechnologiesCreate for application/x-www-form-urlencoded ContentType.
type TechnologiesCreateFormdataRequestBody = AppAnalysisRequest

// TechnologiesCreateMultipartRequestBody defines body for TechnologiesCreate for multipart/form-data ContentType.
type TechnologiesCreateMultipartRequestBody = AppAnalysisRequest

// TechnologiesPartialUpdateJSONRequestBody defines body for TechnologiesPartialUpdate for application/json ContentType.
type TechnologiesPartialUpdateJSONRequestBody = PatchedAppAnalysisRequest

// TechnologiesPartialUpdateFormdataRequestBody defines body for TechnologiesPartialUpdate for application/x-www-form-urlencoded ContentType.
type TechnologiesPartialUpdateFormdataRequestBody = PatchedAppAnalysisRequest

// TechnologiesPartialUpdateMultipartRequestBody defines body for TechnologiesPartialUpdate for multipart/form-data ContentType.
type TechnologiesPartialUpdateMultipartRequestBody = PatchedAppAnalysisRequest

// TechnologiesUpdateJSONRequestBody defines body for TechnologiesUpdate for application/json ContentType.
type TechnologiesUpdateJSONRequestBody = AppAnalysisRequest

// TechnologiesUpdateFormdataRequestBody defines body for TechnologiesUpdate for application/x-www-form-urlencoded ContentType.
type TechnologiesUpdateFormdataRequestBody = AppAnalysisRequest

// TechnologiesUpdateMultipartRequestBody defines body for TechnologiesUpdate for multipart/form-data ContentType.
type TechnologiesUpdateMultipartRequestBody = AppAnalysisRequest

// TestImportsCreateJSONRequestBody defines body for TestImportsCreate for application/json ContentType.
type TestImportsCreateJSONRequestBody = TestImportRequest

// TestImportsCreateFormdataRequestBody defines body for TestImportsCreate for application/x-www-form-urlencoded ContentType.
type TestImportsCreateFormdataRequestBody = TestImportRequest

// TestImportsCreateMultipartRequestBody defines body for TestImportsCreate for multipart/form-data ContentType.
type TestImportsCreateMultipartRequestBody = TestImportRequest

// TestImportsPartialUpdateJSONRequestBody defines body for TestImportsPartialUpdate for application/json ContentType.
type TestImportsPartialUpdateJSONRequestBody = PatchedTestImportRequest

// TestImportsPartialUpdateFormdataRequestBody defines body for TestImportsPartialUpdate for application/x-www-form-urlencoded ContentType.
type TestImportsPartialUpdateFormdataRequestBody = PatchedTestImportRequest

// TestImportsPartialUpdateMultipartRequestBody defines body for TestImportsPartialUpdate for multipart/form-data ContentType.
type TestImportsPartialUpdateMultipartRequestBody = PatchedTestImportRequest

// TestImportsUpdateJSONRequestBody defines body for TestImportsUpdate for application/json ContentType.
type TestImportsUpdateJSONRequestBody = TestImportRequest

// TestImportsUpdateFormdataRequestBody defines body for TestImportsUpdate for application/x-www-form-urlencoded ContentType.
type TestImportsUpdateFormdataRequestBody = TestImportRequest

// TestImportsUpdateMultipartRequestBody defines body for TestImportsUpdate for multipart/form-data ContentType.
type TestImportsUpdateMultipartRequestBody = TestImportRequest

// TestTypesCreateJSONRequestBody defines body for TestTypesCreate for application/json ContentType.
type TestTypesCreateJSONRequestBody = TestTypeRequest

// TestTypesCreateFormdataRequestBody defines body for TestTypesCreate for application/x-www-form-urlencoded ContentType.
type TestTypesCreateFormdataRequestBody = TestTypeRequest

// TestTypesCreateMultipartRequestBody defines body for TestTypesCreate for multipart/form-data ContentType.
type TestTypesCreateMultipartRequestBody = TestTypeRequest

// TestTypesPartialUpdateJSONRequestBody defines body for TestTypesPartialUpdate for application/json ContentType.
type TestTypesPartialUpdateJSONRequestBody = PatchedTestTypeRequest

// TestTypesPartialUpdateFormdataRequestBody defines body for TestTypesPartialUpdate for application/x-www-form-urlencoded ContentType.
type TestTypesPartialUpdateFormdataRequestBody = PatchedTestTypeRequest

// TestTypesPartialUpdateMultipartRequestBody defines body for TestTypesPartialUpdate for multipart/form-data ContentType.
type TestTypesPartialUpdateMultipartRequestBody = PatchedTestTypeRequest

// TestTypesUpdateJSONRequestBody defines body for TestTypesUpdate for application/json ContentType.
type TestTypesUpdateJSONRequestBody = TestTypeRequest

// TestTypesUpdateFormdataRequestBody defines body for TestTypesUpdate for application/x-www-form-urlencoded ContentType.
type TestTypesUpdateFormdataRequestBody = TestTypeRequest

// TestTypesUpdateMultipartRequestBody defines body for TestTypesUpdate for multipart/form-data ContentType.
type TestTypesUpdateMultipartRequestBody = TestTypeRequest

// TestsCreateJSONRequestBody defines body for TestsCreate for application/json ContentType.
type TestsCreateJSONRequestBody = TestCreateRequest

// TestsCreateFormdataRequestBody defines body for TestsCreate for application/x-www-form-urlencoded ContentType.
type TestsCreateFormdataRequestBody = TestCreateRequest

// TestsCreateMultipartRequestBody defines body for TestsCreate for multipart/form-data ContentType.
type TestsCreateMultipartRequestBody = TestCreateRequest

// TestsPartialUpdateJSONRequestBody defines body for TestsPartialUpdate for application/json ContentType.
type TestsPartialUpdateJSONRequestBody = PatchedTestRequest

// TestsPartialUpdateFormdataRequestBody defines body for TestsPartialUpdate for application/x-www-form-urlencoded ContentType.
type TestsPartialUpdateFormdataRequestBody = PatchedTestRequest

// TestsPartialUpdateMultipartRequestBody defines body for TestsPartialUpdate for multipart/form-data ContentType.
type TestsPartialUpdateMultipartRequestBody = PatchedTestRequest

// TestsUpdateJSONRequestBody defines body for TestsUpdate for application/json ContentType.
type TestsUpdateJSONRequestBody = TestRequest

// TestsUpdateFormdataRequestBody defines body for TestsUpdate for application/x-www-form-urlencoded ContentType.
type TestsUpdateFormdataRequestBody = TestRequest

// TestsUpdateMultipartRequestBody defines body for TestsUpdate for multipart/form-data ContentType.
type TestsUpdateMultipartRequestBody = TestRequest

// TestsAcceptRisksCreateJSONRequestBody defines body for TestsAcceptRisksCreate for application/json ContentType.
type TestsAcceptRisksCreateJSONRequestBody = TestsAcceptRisksCreateJSONBody

// TestsAcceptRisksCreateFormdataRequestBody defines body for TestsAcceptRisksCreate for application/x-www-form-urlencoded ContentType.
type TestsAcceptRisksCreateFormdataRequestBody = TestsAcceptRisksCreateFormdataBody

// TestsAcceptRisksCreateMultipartRequestBody defines body for TestsAcceptRisksCreate for multipart/form-data ContentType.
type TestsAcceptRisksCreateMultipartRequestBody = TestsAcceptRisksCreateMultipartBody

// TestsFilesCreateMultipartRequestBody defines body for TestsFilesCreate for multipart/form-data ContentType.
type TestsFilesCreateMultipartRequestBody = AddNewFileOptionRequest

// TestsGenerateReportCreateJSONRequestBody defines body for TestsGenerateReportCreate for application/json ContentType.
type TestsGenerateReportCreateJSONRequestBody = ReportGenerateOptionRequest

// TestsGenerateReportCreateFormdataRequestBody defines body for TestsGenerateReportCreate for application/x-www-form-urlencoded ContentType.
type TestsGenerateReportCreateFormdataRequestBody = ReportGenerateOptionRequest

// TestsGenerateReportCreateMultipartRequestBody defines body for TestsGenerateReportCreate for multipart/form-data ContentType.
type TestsGenerateReportCreateMultipartRequestBody = ReportGenerateOptionRequest

// TestsNotesCreateJSONRequestBody defines body for TestsNotesCreate for application/json ContentType.
type TestsNotesCreateJSONRequestBody = AddNewNoteOptionRequest

// TestsNotesCreateFormdataRequestBody defines body for TestsNotesCreate for application/x-www-form-urlencoded ContentType.
type TestsNotesCreateFormdataRequestBody = AddNewNoteOptionRequest

// TestsNotesCreateMultipartRequestBody defines body for TestsNotesCreate for multipart/form-data ContentType.
type TestsNotesCreateMultipartRequestBody = AddNewNoteOptionRequest

// ToolConfigurationsCreateJSONRequestBody defines body for ToolConfigurationsCreate for application/json ContentType.
type ToolConfigurationsCreateJSONRequestBody = ToolConfigurationRequest

// ToolConfigurationsCreateFormdataRequestBody defines body for ToolConfigurationsCreate for application/x-www-form-urlencoded ContentType.
type ToolConfigurationsCreateFormdataRequestBody = ToolConfigurationRequest

// ToolConfigurationsCreateMultipartRequestBody defines body for ToolConfigurationsCreate for multipart/form-data ContentType.
type ToolConfigurationsCreateMultipartRequestBody = ToolConfigurationRequest

// ToolConfigurationsPartialUpdateJSONRequestBody defines body for ToolConfigurationsPartialUpdate for application/json ContentType.
type ToolConfigurationsPartialUpdateJSONRequestBody = PatchedToolConfigurationRequest

// ToolConfigurationsPartialUpdateFormdataRequestBody defines body for ToolConfigurationsPartialUpdate for application/x-www-form-urlencoded ContentType.
type ToolConfigurationsPartialUpdateFormdataRequestBody = PatchedToolConfigurationRequest

// ToolConfigurationsPartialUpdateMultipartRequestBody defines body for ToolConfigurationsPartialUpdate for multipart/form-data ContentType.
type ToolConfigurationsPartialUpdateMultipartRequestBody = PatchedToolConfigurationRequest

// ToolConfigurationsUpdateJSONRequestBody defines body for ToolConfigurationsUpdate for application/json ContentType.
type ToolConfigurationsUpdateJSONRequestBody = ToolConfigurationRequest

// ToolConfigurationsUpdateFormdataRequestBody defines body for ToolConfigurationsUpdate for application/x-www-form-urlencoded ContentType.
type ToolConfigurationsUpdateFormdataRequestBody = ToolConfigurationRequest

// ToolConfigurationsUpdateMultipartRequestBody defines body for ToolConfigurationsUpdate for multipart/form-data ContentType.
type ToolConfigurationsUpdateMultipartRequestBody = ToolConfigurationRequest

// ToolProductSettingsCreateJSONRequestBody defines body for ToolProductSettingsCreate for application/json ContentType.
type ToolProductSettingsCreateJSONRequestBody = ToolProductSettingsRequest

// ToolProductSettingsCreateFormdataRequestBody defines body for ToolProductSettingsCreate for application/x-www-form-urlencoded ContentType.
type ToolProductSettingsCreateFormdataRequestBody = ToolProductSettingsRequest

// ToolProductSettingsCreateMultipartRequestBody defines body for ToolProductSettingsCreate for multipart/form-data ContentType.
type ToolProductSettingsCreateMultipartRequestBody = ToolProductSettingsRequest

// ToolProductSettingsPartialUpdateJSONRequestBody defines body for ToolProductSettingsPartialUpdate for application/json ContentType.
type ToolProductSettingsPartialUpdateJSONRequestBody = PatchedToolProductSettingsRequest

// ToolProductSettingsPartialUpdateFormdataRequestBody defines body for ToolProductSettingsPartialUpdate for application/x-www-form-urlencoded ContentType.
type ToolProductSettingsPartialUpdateFormdataRequestBody = PatchedToolProductSettingsRequest

// ToolProductSettingsPartialUpdateMultipartRequestBody defines body for ToolProductSettingsPartialUpdate for multipart/form-data ContentType.
type ToolProductSettingsPartialUpdateMultipartRequestBody = PatchedToolProductSettingsRequest

// ToolProductSettingsUpdateJSONRequestBody defines body for ToolProductSettingsUpdate for application/json ContentType.
type ToolProductSettingsUpdateJSONRequestBody = ToolProductSettingsRequest

// ToolProductSettingsUpdateFormdataRequestBody defines body for ToolProductSettingsUpdate for application/x-www-form-urlencoded ContentType.
type ToolProductSettingsUpdateFormdataRequestBody = ToolProductSettingsRequest

// ToolProductSettingsUpdateMultipartRequestBody defines body for ToolProductSettingsUpdate for multipart/form-data ContentType.
type ToolProductSettingsUpdateMultipartRequestBody = ToolProductSettingsRequest

// ToolTypesCreateJSONRequestBody defines body for ToolTypesCreate for application/json ContentType.
type ToolTypesCreateJSONRequestBody = ToolTypeRequest

// ToolTypesCreateFormdataRequestBody defines body for ToolTypesCreate for application/x-www-form-urlencoded ContentType.
type ToolTypesCreateFormdataRequestBody = ToolTypeRequest

// ToolTypesCreateMultipartRequestBody defines body for ToolTypesCreate for multipart/form-data ContentType.
type ToolTypesCreateMultipartRequestBody = ToolTypeRequest

// ToolTypesPartialUpdateJSONRequestBody defines body for ToolTypesPartialUpdate for application/json ContentType.
type ToolTypesPartialUpdateJSONRequestBody = PatchedToolTypeRequest

// ToolTypesPartialUpdateFormdataRequestBody defines body for ToolTypesPartialUpdate for application/x-www-form-urlencoded ContentType.
type ToolTypesPartialUpdateFormdataRequestBody = PatchedToolTypeRequest

// ToolTypesPartialUpdateMultipartRequestBody defines body for ToolTypesPartialUpdate for multipart/form-data ContentType.
type ToolTypesPartialUpdateMultipartRequestBody = PatchedToolTypeRequest

// ToolTypesUpdateJSONRequestBody defines body for ToolTypesUpdate for application/json ContentType.
type ToolTypesUpdateJSONRequestBody = ToolTypeRequest

// ToolTypesUpdateFormdataRequestBody defines body for ToolTypesUpdate for application/x-www-form-urlencoded ContentType.
type ToolTypesUpdateFormdataRequestBody = ToolTypeRequest

// ToolTypesUpdateMultipartRequestBody defines body for ToolTypesUpdate for multipart/form-data ContentType.
type ToolTypesUpdateMultipartRequestBody = ToolTypeRequest

// UserContactInfosCreateJSONRequestBody defines body for UserContactInfosCreate for application/json ContentType.
type UserContactInfosCreateJSONRequestBody = UserContactInfoRequest

// UserContactInfosCreateFormdataRequestBody defines body for UserContactInfosCreate for application/x-www-form-urlencoded ContentType.
type UserContactInfosCreateFormdataRequestBody = UserContactInfoRequest

// UserContactInfosCreateMultipartRequestBody defines body for UserContactInfosCreate for multipart/form-data ContentType.
type UserContactInfosCreateMultipartRequestBody = UserContactInfoRequest

// UserContactInfosPartialUpdateJSONRequestBody defines body for UserContactInfosPartialUpdate for application/json ContentType.
type UserContactInfosPartialUpdateJSONRequestBody = PatchedUserContactInfoRequest

// UserContactInfosPartialUpdateFormdataRequestBody defines body for UserContactInfosPartialUpdate for application/x-www-form-urlencoded ContentType.
type UserContactInfosPartialUpdateFormdataRequestBody = PatchedUserContactInfoRequest

// UserContactInfosPartialUpdateMultipartRequestBody defines body for UserContactInfosPartialUpdate for multipart/form-data ContentType.
type UserContactInfosPartialUpdateMultipartRequestBody = PatchedUserContactInfoRequest

// UserContactInfosUpdateJSONRequestBody defines body for UserContactInfosUpdate for application/json ContentType.
type UserContactInfosUpdateJSONRequestBody = UserContactInfoRequest

// UserContactInfosUpdateFormdataRequestBody defines body for UserContactInfosUpdate for application/x-www-form-urlencoded ContentType.
type UserContactInfosUpdateFormdataRequestBody = UserContactInfoRequest

// UserContactInfosUpdateMultipartRequestBody defines body for UserContactInfosUpdate for multipart/form-data ContentType.
type UserContactInfosUpdateMultipartRequestBody = UserContactInfoRequest

// UsersCreateJSONRequestBody defines body for UsersCreate for application/json ContentType.
type UsersCreateJSONRequestBody = UserRequest

// UsersCreateFormdataRequestBody defines body for UsersCreate for application/x-www-form-urlencoded ContentType.
type UsersCreateFormdataRequestBody = UserRequest

// UsersCreateMultipartRequestBody defines body for UsersCreate for multipart/form-data ContentType.
type UsersCreateMultipartRequestBody = UserRequest

// UsersPartialUpdateJSONRequestBody defines body for UsersPartialUpdate for application/json ContentType.
type UsersPartialUpdateJSONRequestBody = PatchedUserRequest

// UsersPartialUpdateFormdataRequestBody defines body for UsersPartialUpdate for application/x-www-form-urlencoded ContentType.
type UsersPartialUpdateFormdataRequestBody = PatchedUserRequest

// UsersPartialUpdateMultipartRequestBody defines body for UsersPartialUpdate for multipart/form-data ContentType.
type UsersPartialUpdateMultipartRequestBody = PatchedUserRequest

// UsersUpdateJSONRequestBody defines body for UsersUpdate for application/json ContentType.
type UsersUpdateJSONRequestBody = UserRequest

// UsersUpdateFormdataRequestBody defines body for UsersUpdate for application/x-www-form-urlencoded ContentType.
type UsersUpdateFormdataRequestBody = UserRequest

// UsersUpdateMultipartRequestBody defines body for UsersUpdate for multipart/form-data ContentType.
type UsersUpdateMultipartRequestBody = UserRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ApiTokenAuthCreate request with any body
	ApiTokenAuthCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApiTokenAuthCreate(ctx context.Context, body ApiTokenAuthCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApiTokenAuthCreateWithFormdataBody(ctx context.Context, body ApiTokenAuthCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConfigurationPermissionsList request
	ConfigurationPermissionsList(ctx context.Context, params *ConfigurationPermissionsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConfigurationPermissionsRetrieve request
	ConfigurationPermissionsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CredentialMappingsList request
	CredentialMappingsList(ctx context.Context, params *CredentialMappingsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CredentialMappingsCreate request with any body
	CredentialMappingsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CredentialMappingsCreate(ctx context.Context, body CredentialMappingsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	CredentialMappingsCreateWithFormdataBody(ctx context.Context, body CredentialMappingsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CredentialMappingsDestroy request
	CredentialMappingsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CredentialMappingsRetrieve request
	CredentialMappingsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CredentialMappingsPartialUpdate request with any body
	CredentialMappingsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CredentialMappingsPartialUpdate(ctx context.Context, id int, body CredentialMappingsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	CredentialMappingsPartialUpdateWithFormdataBody(ctx context.Context, id int, body CredentialMappingsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CredentialMappingsUpdate request with any body
	CredentialMappingsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CredentialMappingsUpdate(ctx context.Context, id int, body CredentialMappingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	CredentialMappingsUpdateWithFormdataBody(ctx context.Context, id int, body CredentialMappingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CredentialMappingsDeletePreviewList request
	CredentialMappingsDeletePreviewList(ctx context.Context, id int, params *CredentialMappingsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CredentialsList request
	CredentialsList(ctx context.Context, params *CredentialsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CredentialsCreate request with any body
	CredentialsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CredentialsCreate(ctx context.Context, body CredentialsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	CredentialsCreateWithFormdataBody(ctx context.Context, body CredentialsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CredentialsDestroy request
	CredentialsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CredentialsRetrieve request
	CredentialsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CredentialsPartialUpdate request with any body
	CredentialsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CredentialsPartialUpdate(ctx context.Context, id int, body CredentialsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	CredentialsPartialUpdateWithFormdataBody(ctx context.Context, id int, body CredentialsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CredentialsUpdate request with any body
	CredentialsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CredentialsUpdate(ctx context.Context, id int, body CredentialsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	CredentialsUpdateWithFormdataBody(ctx context.Context, id int, body CredentialsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CredentialsDeletePreviewList request
	CredentialsDeletePreviewList(ctx context.Context, id int, params *CredentialsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevelopmentEnvironmentsList request
	DevelopmentEnvironmentsList(ctx context.Context, params *DevelopmentEnvironmentsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevelopmentEnvironmentsCreate request with any body
	DevelopmentEnvironmentsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DevelopmentEnvironmentsCreate(ctx context.Context, body DevelopmentEnvironmentsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DevelopmentEnvironmentsCreateWithFormdataBody(ctx context.Context, body DevelopmentEnvironmentsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevelopmentEnvironmentsDestroy request
	DevelopmentEnvironmentsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevelopmentEnvironmentsRetrieve request
	DevelopmentEnvironmentsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevelopmentEnvironmentsPartialUpdate request with any body
	DevelopmentEnvironmentsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DevelopmentEnvironmentsPartialUpdate(ctx context.Context, id int, body DevelopmentEnvironmentsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DevelopmentEnvironmentsPartialUpdateWithFormdataBody(ctx context.Context, id int, body DevelopmentEnvironmentsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevelopmentEnvironmentsUpdate request with any body
	DevelopmentEnvironmentsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DevelopmentEnvironmentsUpdate(ctx context.Context, id int, body DevelopmentEnvironmentsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DevelopmentEnvironmentsUpdateWithFormdataBody(ctx context.Context, id int, body DevelopmentEnvironmentsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevelopmentEnvironmentsDeletePreviewList request
	DevelopmentEnvironmentsDeletePreviewList(ctx context.Context, id int, params *DevelopmentEnvironmentsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DojoGroupMembersList request
	DojoGroupMembersList(ctx context.Context, params *DojoGroupMembersListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DojoGroupMembersCreate request with any body
	DojoGroupMembersCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DojoGroupMembersCreate(ctx context.Context, body DojoGroupMembersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DojoGroupMembersCreateWithFormdataBody(ctx context.Context, body DojoGroupMembersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DojoGroupMembersDestroy request
	DojoGroupMembersDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DojoGroupMembersRetrieve request
	DojoGroupMembersRetrieve(ctx context.Context, id int, params *DojoGroupMembersRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DojoGroupMembersPartialUpdate request with any body
	DojoGroupMembersPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DojoGroupMembersPartialUpdate(ctx context.Context, id int, body DojoGroupMembersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DojoGroupMembersPartialUpdateWithFormdataBody(ctx context.Context, id int, body DojoGroupMembersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DojoGroupMembersUpdate request with any body
	DojoGroupMembersUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DojoGroupMembersUpdate(ctx context.Context, id int, body DojoGroupMembersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DojoGroupMembersUpdateWithFormdataBody(ctx context.Context, id int, body DojoGroupMembersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DojoGroupMembersDeletePreviewList request
	DojoGroupMembersDeletePreviewList(ctx context.Context, id int, params *DojoGroupMembersDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DojoGroupsList request
	DojoGroupsList(ctx context.Context, params *DojoGroupsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DojoGroupsCreate request with any body
	DojoGroupsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DojoGroupsCreate(ctx context.Context, body DojoGroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DojoGroupsCreateWithFormdataBody(ctx context.Context, body DojoGroupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DojoGroupsDestroy request
	DojoGroupsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DojoGroupsRetrieve request
	DojoGroupsRetrieve(ctx context.Context, id int, params *DojoGroupsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DojoGroupsPartialUpdate request with any body
	DojoGroupsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DojoGroupsPartialUpdate(ctx context.Context, id int, body DojoGroupsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DojoGroupsPartialUpdateWithFormdataBody(ctx context.Context, id int, body DojoGroupsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DojoGroupsUpdate request with any body
	DojoGroupsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DojoGroupsUpdate(ctx context.Context, id int, body DojoGroupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DojoGroupsUpdateWithFormdataBody(ctx context.Context, id int, body DojoGroupsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DojoGroupsDeletePreviewList request
	DojoGroupsDeletePreviewList(ctx context.Context, id int, params *DojoGroupsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EndpointMetaImportCreate request with any body
	EndpointMetaImportCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EndpointStatusList request
	EndpointStatusList(ctx context.Context, params *EndpointStatusListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EndpointStatusCreate request with any body
	EndpointStatusCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EndpointStatusCreate(ctx context.Context, body EndpointStatusCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	EndpointStatusCreateWithFormdataBody(ctx context.Context, body EndpointStatusCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EndpointStatusDestroy request
	EndpointStatusDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EndpointStatusRetrieve request
	EndpointStatusRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EndpointStatusPartialUpdate request with any body
	EndpointStatusPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EndpointStatusPartialUpdate(ctx context.Context, id int, body EndpointStatusPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	EndpointStatusPartialUpdateWithFormdataBody(ctx context.Context, id int, body EndpointStatusPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EndpointStatusUpdate request with any body
	EndpointStatusUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EndpointStatusUpdate(ctx context.Context, id int, body EndpointStatusUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	EndpointStatusUpdateWithFormdataBody(ctx context.Context, id int, body EndpointStatusUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EndpointStatusDeletePreviewList request
	EndpointStatusDeletePreviewList(ctx context.Context, id int, params *EndpointStatusDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EndpointsList request
	EndpointsList(ctx context.Context, params *EndpointsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EndpointsCreate request with any body
	EndpointsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EndpointsCreate(ctx context.Context, body EndpointsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	EndpointsCreateWithFormdataBody(ctx context.Context, body EndpointsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EndpointsDestroy request
	EndpointsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EndpointsRetrieve request
	EndpointsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EndpointsPartialUpdate request with any body
	EndpointsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EndpointsPartialUpdate(ctx context.Context, id int, body EndpointsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	EndpointsPartialUpdateWithFormdataBody(ctx context.Context, id int, body EndpointsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EndpointsUpdate request with any body
	EndpointsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EndpointsUpdate(ctx context.Context, id int, body EndpointsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	EndpointsUpdateWithFormdataBody(ctx context.Context, id int, body EndpointsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EndpointsDeletePreviewList request
	EndpointsDeletePreviewList(ctx context.Context, id int, params *EndpointsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EndpointsGenerateReportCreate request with any body
	EndpointsGenerateReportCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EndpointsGenerateReportCreate(ctx context.Context, id int, body EndpointsGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	EndpointsGenerateReportCreateWithFormdataBody(ctx context.Context, id int, body EndpointsGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EngagementPresetsList request
	EngagementPresetsList(ctx context.Context, params *EngagementPresetsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EngagementPresetsCreate request with any body
	EngagementPresetsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EngagementPresetsCreate(ctx context.Context, body EngagementPresetsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	EngagementPresetsCreateWithFormdataBody(ctx context.Context, body EngagementPresetsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EngagementPresetsDestroy request
	EngagementPresetsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EngagementPresetsRetrieve request
	EngagementPresetsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EngagementPresetsPartialUpdate request with any body
	EngagementPresetsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EngagementPresetsPartialUpdate(ctx context.Context, id int, body EngagementPresetsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	EngagementPresetsPartialUpdateWithFormdataBody(ctx context.Context, id int, body EngagementPresetsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EngagementPresetsUpdate request with any body
	EngagementPresetsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EngagementPresetsUpdate(ctx context.Context, id int, body EngagementPresetsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	EngagementPresetsUpdateWithFormdataBody(ctx context.Context, id int, body EngagementPresetsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EngagementPresetsDeletePreviewList request
	EngagementPresetsDeletePreviewList(ctx context.Context, id int, params *EngagementPresetsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EngagementsList request
	EngagementsList(ctx context.Context, params *EngagementsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EngagementsCreate request with any body
	EngagementsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EngagementsCreate(ctx context.Context, body EngagementsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	EngagementsCreateWithFormdataBody(ctx context.Context, body EngagementsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EngagementsDestroy request
	EngagementsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EngagementsRetrieve request
	EngagementsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EngagementsPartialUpdate request with any body
	EngagementsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EngagementsPartialUpdate(ctx context.Context, id int, body EngagementsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	EngagementsPartialUpdateWithFormdataBody(ctx context.Context, id int, body EngagementsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EngagementsUpdate request with any body
	EngagementsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EngagementsUpdate(ctx context.Context, id int, body EngagementsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	EngagementsUpdateWithFormdataBody(ctx context.Context, id int, body EngagementsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EngagementsAcceptRisksCreate request with any body
	EngagementsAcceptRisksCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EngagementsAcceptRisksCreate(ctx context.Context, id int, body EngagementsAcceptRisksCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	EngagementsAcceptRisksCreateWithFormdataBody(ctx context.Context, id int, body EngagementsAcceptRisksCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EngagementsCloseCreate request
	EngagementsCloseCreate(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EngagementsCompleteChecklistRetrieve request
	EngagementsCompleteChecklistRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EngagementsCompleteChecklistCreate request with any body
	EngagementsCompleteChecklistCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EngagementsCompleteChecklistCreate(ctx context.Context, id int, body EngagementsCompleteChecklistCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	EngagementsCompleteChecklistCreateWithFormdataBody(ctx context.Context, id int, body EngagementsCompleteChecklistCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EngagementsDeletePreviewList request
	EngagementsDeletePreviewList(ctx context.Context, id int, params *EngagementsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EngagementsFilesRetrieve request
	EngagementsFilesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EngagementsFilesCreate request with any body
	EngagementsFilesCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EngagementsFilesDownloadRetrieve request
	EngagementsFilesDownloadRetrieve(ctx context.Context, id int, fileId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EngagementsGenerateReportCreate request with any body
	EngagementsGenerateReportCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EngagementsGenerateReportCreate(ctx context.Context, id int, body EngagementsGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	EngagementsGenerateReportCreateWithFormdataBody(ctx context.Context, id int, body EngagementsGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EngagementsNotesRetrieve request
	EngagementsNotesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EngagementsNotesCreate request with any body
	EngagementsNotesCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EngagementsNotesCreate(ctx context.Context, id int, body EngagementsNotesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	EngagementsNotesCreateWithFormdataBody(ctx context.Context, id int, body EngagementsNotesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EngagementsReopenCreate request
	EngagementsReopenCreate(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingTemplatesList request
	FindingTemplatesList(ctx context.Context, params *FindingTemplatesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingTemplatesCreate request with any body
	FindingTemplatesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingTemplatesCreate(ctx context.Context, body FindingTemplatesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingTemplatesCreateWithFormdataBody(ctx context.Context, body FindingTemplatesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingTemplatesDestroy request
	FindingTemplatesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingTemplatesRetrieve request
	FindingTemplatesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingTemplatesPartialUpdate request with any body
	FindingTemplatesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingTemplatesPartialUpdate(ctx context.Context, id int, body FindingTemplatesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingTemplatesPartialUpdateWithFormdataBody(ctx context.Context, id int, body FindingTemplatesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingTemplatesUpdate request with any body
	FindingTemplatesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingTemplatesUpdate(ctx context.Context, id int, body FindingTemplatesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingTemplatesUpdateWithFormdataBody(ctx context.Context, id int, body FindingTemplatesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingTemplatesDeletePreviewList request
	FindingTemplatesDeletePreviewList(ctx context.Context, id int, params *FindingTemplatesDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsList request
	FindingsList(ctx context.Context, params *FindingsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsCreate request with any body
	FindingsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsCreate(ctx context.Context, body FindingsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsCreateWithFormdataBody(ctx context.Context, body FindingsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsAcceptRisksCreate request with any body
	FindingsAcceptRisksCreateWithBody(ctx context.Context, params *FindingsAcceptRisksCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsAcceptRisksCreate(ctx context.Context, params *FindingsAcceptRisksCreateParams, body FindingsAcceptRisksCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsAcceptRisksCreateWithFormdataBody(ctx context.Context, params *FindingsAcceptRisksCreateParams, body FindingsAcceptRisksCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsGenerateReportCreate request with any body
	FindingsGenerateReportCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsGenerateReportCreate(ctx context.Context, body FindingsGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsGenerateReportCreateWithFormdataBody(ctx context.Context, body FindingsGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsDestroy request
	FindingsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsRetrieve request
	FindingsRetrieve(ctx context.Context, id int, params *FindingsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsPartialUpdate request with any body
	FindingsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsPartialUpdate(ctx context.Context, id int, body FindingsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsPartialUpdateWithFormdataBody(ctx context.Context, id int, body FindingsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsUpdate request with any body
	FindingsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsUpdate(ctx context.Context, id int, body FindingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsUpdateWithFormdataBody(ctx context.Context, id int, body FindingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsCloseCreate request with any body
	FindingsCloseCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsCloseCreate(ctx context.Context, id int, body FindingsCloseCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsCloseCreateWithFormdataBody(ctx context.Context, id int, body FindingsCloseCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsDeletePreviewList request
	FindingsDeletePreviewList(ctx context.Context, id int, params *FindingsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsDuplicateList request
	FindingsDuplicateList(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsDuplicateResetCreate request
	FindingsDuplicateResetCreate(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsFilesRetrieve request
	FindingsFilesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsFilesCreate request with any body
	FindingsFilesCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsFilesDownloadRetrieve request
	FindingsFilesDownloadRetrieve(ctx context.Context, id int, fileId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsMetadataDestroy request
	FindingsMetadataDestroy(ctx context.Context, id int, params *FindingsMetadataDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsMetadataList request
	FindingsMetadataList(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsMetadataCreate request with any body
	FindingsMetadataCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsMetadataCreate(ctx context.Context, id int, body FindingsMetadataCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsMetadataCreateWithFormdataBody(ctx context.Context, id int, body FindingsMetadataCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsMetadataUpdate request with any body
	FindingsMetadataUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsMetadataUpdate(ctx context.Context, id int, body FindingsMetadataUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsMetadataUpdateWithFormdataBody(ctx context.Context, id int, body FindingsMetadataUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsNotesRetrieve request
	FindingsNotesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsNotesCreate request with any body
	FindingsNotesCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsNotesCreate(ctx context.Context, id int, body FindingsNotesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsNotesCreateWithFormdataBody(ctx context.Context, id int, body FindingsNotesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsOriginalCreate request
	FindingsOriginalCreate(ctx context.Context, id int, newFid int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsRemoveNotePartialUpdate request with any body
	FindingsRemoveNotePartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsRemoveNotePartialUpdate(ctx context.Context, id int, body FindingsRemoveNotePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsRemoveNotePartialUpdateWithFormdataBody(ctx context.Context, id int, body FindingsRemoveNotePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsRemoveTagsPartialUpdate request with any body
	FindingsRemoveTagsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsRemoveTagsPartialUpdate(ctx context.Context, id int, body FindingsRemoveTagsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsRemoveTagsPartialUpdateWithFormdataBody(ctx context.Context, id int, body FindingsRemoveTagsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsRemoveTagsUpdate request with any body
	FindingsRemoveTagsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsRemoveTagsUpdate(ctx context.Context, id int, body FindingsRemoveTagsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsRemoveTagsUpdateWithFormdataBody(ctx context.Context, id int, body FindingsRemoveTagsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsRequestResponseRetrieve request
	FindingsRequestResponseRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsRequestResponseCreate request with any body
	FindingsRequestResponseCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsRequestResponseCreate(ctx context.Context, id int, body FindingsRequestResponseCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsRequestResponseCreateWithFormdataBody(ctx context.Context, id int, body FindingsRequestResponseCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsTagsRetrieve request
	FindingsTagsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindingsTagsCreate request with any body
	FindingsTagsCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsTagsCreate(ctx context.Context, id int, body FindingsTagsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	FindingsTagsCreateWithFormdataBody(ctx context.Context, id int, body FindingsTagsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GlobalRolesList request
	GlobalRolesList(ctx context.Context, params *GlobalRolesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GlobalRolesCreate request with any body
	GlobalRolesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GlobalRolesCreate(ctx context.Context, body GlobalRolesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	GlobalRolesCreateWithFormdataBody(ctx context.Context, body GlobalRolesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GlobalRolesDestroy request
	GlobalRolesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GlobalRolesRetrieve request
	GlobalRolesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GlobalRolesPartialUpdate request with any body
	GlobalRolesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GlobalRolesPartialUpdate(ctx context.Context, id int, body GlobalRolesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	GlobalRolesPartialUpdateWithFormdataBody(ctx context.Context, id int, body GlobalRolesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GlobalRolesUpdate request with any body
	GlobalRolesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GlobalRolesUpdate(ctx context.Context, id int, body GlobalRolesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	GlobalRolesUpdateWithFormdataBody(ctx context.Context, id int, body GlobalRolesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GlobalRolesDeletePreviewList request
	GlobalRolesDeletePreviewList(ctx context.Context, id int, params *GlobalRolesDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ImportLanguagesCreate request with any body
	ImportLanguagesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ImportScanCreate request with any body
	ImportScanCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraConfigurationsList request
	JiraConfigurationsList(ctx context.Context, params *JiraConfigurationsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraConfigurationsCreate request with any body
	JiraConfigurationsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraConfigurationsCreate(ctx context.Context, body JiraConfigurationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraConfigurationsCreateWithFormdataBody(ctx context.Context, body JiraConfigurationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraConfigurationsDestroy request
	JiraConfigurationsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraConfigurationsRetrieve request
	JiraConfigurationsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraConfigurationsPartialUpdate request with any body
	JiraConfigurationsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraConfigurationsPartialUpdate(ctx context.Context, id int, body JiraConfigurationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraConfigurationsPartialUpdateWithFormdataBody(ctx context.Context, id int, body JiraConfigurationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraConfigurationsUpdate request with any body
	JiraConfigurationsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraConfigurationsUpdate(ctx context.Context, id int, body JiraConfigurationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraConfigurationsUpdateWithFormdataBody(ctx context.Context, id int, body JiraConfigurationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraConfigurationsDeletePreviewList request
	JiraConfigurationsDeletePreviewList(ctx context.Context, id int, params *JiraConfigurationsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraFindingMappingsList request
	JiraFindingMappingsList(ctx context.Context, params *JiraFindingMappingsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraFindingMappingsCreate request with any body
	JiraFindingMappingsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraFindingMappingsCreate(ctx context.Context, body JiraFindingMappingsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraFindingMappingsCreateWithFormdataBody(ctx context.Context, body JiraFindingMappingsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraFindingMappingsDestroy request
	JiraFindingMappingsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraFindingMappingsRetrieve request
	JiraFindingMappingsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraFindingMappingsPartialUpdate request with any body
	JiraFindingMappingsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraFindingMappingsPartialUpdate(ctx context.Context, id int, body JiraFindingMappingsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraFindingMappingsPartialUpdateWithFormdataBody(ctx context.Context, id int, body JiraFindingMappingsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraFindingMappingsUpdate request with any body
	JiraFindingMappingsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraFindingMappingsUpdate(ctx context.Context, id int, body JiraFindingMappingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraFindingMappingsUpdateWithFormdataBody(ctx context.Context, id int, body JiraFindingMappingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraFindingMappingsDeletePreviewList request
	JiraFindingMappingsDeletePreviewList(ctx context.Context, id int, params *JiraFindingMappingsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraInstancesList request
	JiraInstancesList(ctx context.Context, params *JiraInstancesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraInstancesCreate request with any body
	JiraInstancesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraInstancesCreate(ctx context.Context, body JiraInstancesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraInstancesCreateWithFormdataBody(ctx context.Context, body JiraInstancesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraInstancesDestroy request
	JiraInstancesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraInstancesRetrieve request
	JiraInstancesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraInstancesPartialUpdate request with any body
	JiraInstancesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraInstancesPartialUpdate(ctx context.Context, id int, body JiraInstancesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraInstancesPartialUpdateWithFormdataBody(ctx context.Context, id int, body JiraInstancesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraInstancesUpdate request with any body
	JiraInstancesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraInstancesUpdate(ctx context.Context, id int, body JiraInstancesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraInstancesUpdateWithFormdataBody(ctx context.Context, id int, body JiraInstancesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraInstancesDeletePreviewList request
	JiraInstancesDeletePreviewList(ctx context.Context, id int, params *JiraInstancesDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraProductConfigurationsList request
	JiraProductConfigurationsList(ctx context.Context, params *JiraProductConfigurationsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraProductConfigurationsCreate request with any body
	JiraProductConfigurationsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraProductConfigurationsCreate(ctx context.Context, body JiraProductConfigurationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraProductConfigurationsCreateWithFormdataBody(ctx context.Context, body JiraProductConfigurationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraProductConfigurationsDestroy request
	JiraProductConfigurationsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraProductConfigurationsRetrieve request
	JiraProductConfigurationsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraProductConfigurationsPartialUpdate request with any body
	JiraProductConfigurationsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraProductConfigurationsPartialUpdate(ctx context.Context, id int, body JiraProductConfigurationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraProductConfigurationsPartialUpdateWithFormdataBody(ctx context.Context, id int, body JiraProductConfigurationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraProductConfigurationsUpdate request with any body
	JiraProductConfigurationsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraProductConfigurationsUpdate(ctx context.Context, id int, body JiraProductConfigurationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraProductConfigurationsUpdateWithFormdataBody(ctx context.Context, id int, body JiraProductConfigurationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraProductConfigurationsDeletePreviewList request
	JiraProductConfigurationsDeletePreviewList(ctx context.Context, id int, params *JiraProductConfigurationsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraProjectsList request
	JiraProjectsList(ctx context.Context, params *JiraProjectsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraProjectsCreate request with any body
	JiraProjectsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraProjectsCreate(ctx context.Context, body JiraProjectsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraProjectsCreateWithFormdataBody(ctx context.Context, body JiraProjectsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraProjectsDestroy request
	JiraProjectsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraProjectsRetrieve request
	JiraProjectsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraProjectsPartialUpdate request with any body
	JiraProjectsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraProjectsPartialUpdate(ctx context.Context, id int, body JiraProjectsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraProjectsPartialUpdateWithFormdataBody(ctx context.Context, id int, body JiraProjectsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraProjectsUpdate request with any body
	JiraProjectsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraProjectsUpdate(ctx context.Context, id int, body JiraProjectsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	JiraProjectsUpdateWithFormdataBody(ctx context.Context, id int, body JiraProjectsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JiraProjectsDeletePreviewList request
	JiraProjectsDeletePreviewList(ctx context.Context, id int, params *JiraProjectsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LanguageTypesList request
	LanguageTypesList(ctx context.Context, params *LanguageTypesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LanguageTypesCreate request with any body
	LanguageTypesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LanguageTypesCreate(ctx context.Context, body LanguageTypesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	LanguageTypesCreateWithFormdataBody(ctx context.Context, body LanguageTypesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LanguageTypesDestroy request
	LanguageTypesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LanguageTypesRetrieve request
	LanguageTypesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LanguageTypesPartialUpdate request with any body
	LanguageTypesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LanguageTypesPartialUpdate(ctx context.Context, id int, body LanguageTypesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	LanguageTypesPartialUpdateWithFormdataBody(ctx context.Context, id int, body LanguageTypesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LanguageTypesUpdate request with any body
	LanguageTypesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LanguageTypesUpdate(ctx context.Context, id int, body LanguageTypesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	LanguageTypesUpdateWithFormdataBody(ctx context.Context, id int, body LanguageTypesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LanguageTypesDeletePreviewList request
	LanguageTypesDeletePreviewList(ctx context.Context, id int, params *LanguageTypesDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LanguagesList request
	LanguagesList(ctx context.Context, params *LanguagesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LanguagesCreate request with any body
	LanguagesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LanguagesCreate(ctx context.Context, body LanguagesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	LanguagesCreateWithFormdataBody(ctx context.Context, body LanguagesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LanguagesDestroy request
	LanguagesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LanguagesRetrieve request
	LanguagesRetrieve(ctx context.Context, id int, params *LanguagesRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LanguagesPartialUpdate request with any body
	LanguagesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LanguagesPartialUpdate(ctx context.Context, id int, body LanguagesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	LanguagesPartialUpdateWithFormdataBody(ctx context.Context, id int, body LanguagesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LanguagesUpdate request with any body
	LanguagesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LanguagesUpdate(ctx context.Context, id int, body LanguagesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	LanguagesUpdateWithFormdataBody(ctx context.Context, id int, body LanguagesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LanguagesDeletePreviewList request
	LanguagesDeletePreviewList(ctx context.Context, id int, params *LanguagesDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MetadataList request
	MetadataList(ctx context.Context, params *MetadataListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MetadataCreate request with any body
	MetadataCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MetadataCreate(ctx context.Context, body MetadataCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	MetadataCreateWithFormdataBody(ctx context.Context, body MetadataCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MetadataDestroy request
	MetadataDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MetadataRetrieve request
	MetadataRetrieve(ctx context.Context, id int, params *MetadataRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MetadataPartialUpdate request with any body
	MetadataPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MetadataPartialUpdate(ctx context.Context, id int, body MetadataPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	MetadataPartialUpdateWithFormdataBody(ctx context.Context, id int, body MetadataPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MetadataUpdate request with any body
	MetadataUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MetadataUpdate(ctx context.Context, id int, body MetadataUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	MetadataUpdateWithFormdataBody(ctx context.Context, id int, body MetadataUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MetadataDeletePreviewList request
	MetadataDeletePreviewList(ctx context.Context, id int, params *MetadataDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkLocationsList request
	NetworkLocationsList(ctx context.Context, params *NetworkLocationsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkLocationsCreate request with any body
	NetworkLocationsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NetworkLocationsCreate(ctx context.Context, body NetworkLocationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	NetworkLocationsCreateWithFormdataBody(ctx context.Context, body NetworkLocationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkLocationsDestroy request
	NetworkLocationsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkLocationsRetrieve request
	NetworkLocationsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkLocationsPartialUpdate request with any body
	NetworkLocationsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NetworkLocationsPartialUpdate(ctx context.Context, id int, body NetworkLocationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	NetworkLocationsPartialUpdateWithFormdataBody(ctx context.Context, id int, body NetworkLocationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkLocationsUpdate request with any body
	NetworkLocationsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NetworkLocationsUpdate(ctx context.Context, id int, body NetworkLocationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	NetworkLocationsUpdateWithFormdataBody(ctx context.Context, id int, body NetworkLocationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkLocationsDeletePreviewList request
	NetworkLocationsDeletePreviewList(ctx context.Context, id int, params *NetworkLocationsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NoteTypeList request
	NoteTypeList(ctx context.Context, params *NoteTypeListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NoteTypeCreate request with any body
	NoteTypeCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NoteTypeCreate(ctx context.Context, body NoteTypeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	NoteTypeCreateWithFormdataBody(ctx context.Context, body NoteTypeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NoteTypeDestroy request
	NoteTypeDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NoteTypeRetrieve request
	NoteTypeRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NoteTypePartialUpdate request with any body
	NoteTypePartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NoteTypePartialUpdate(ctx context.Context, id int, body NoteTypePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	NoteTypePartialUpdateWithFormdataBody(ctx context.Context, id int, body NoteTypePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NoteTypeUpdate request with any body
	NoteTypeUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NoteTypeUpdate(ctx context.Context, id int, body NoteTypeUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	NoteTypeUpdateWithFormdataBody(ctx context.Context, id int, body NoteTypeUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NoteTypeDeletePreviewList request
	NoteTypeDeletePreviewList(ctx context.Context, id int, params *NoteTypeDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotesList request
	NotesList(ctx context.Context, params *NotesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotesRetrieve request
	NotesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotesPartialUpdate request with any body
	NotesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NotesPartialUpdate(ctx context.Context, id int, body NotesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	NotesPartialUpdateWithFormdataBody(ctx context.Context, id int, body NotesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotesUpdate request with any body
	NotesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NotesUpdate(ctx context.Context, id int, body NotesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	NotesUpdateWithFormdataBody(ctx context.Context, id int, body NotesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotificationsList request
	NotificationsList(ctx context.Context, params *NotificationsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotificationsCreate request with any body
	NotificationsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NotificationsCreate(ctx context.Context, body NotificationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	NotificationsCreateWithFormdataBody(ctx context.Context, body NotificationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotificationsDestroy request
	NotificationsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotificationsRetrieve request
	NotificationsRetrieve(ctx context.Context, id int, params *NotificationsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotificationsPartialUpdate request with any body
	NotificationsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NotificationsPartialUpdate(ctx context.Context, id int, body NotificationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	NotificationsPartialUpdateWithFormdataBody(ctx context.Context, id int, body NotificationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotificationsUpdate request with any body
	NotificationsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NotificationsUpdate(ctx context.Context, id int, body NotificationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	NotificationsUpdateWithFormdataBody(ctx context.Context, id int, body NotificationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotificationsDeletePreviewList request
	NotificationsDeletePreviewList(ctx context.Context, id int, params *NotificationsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Oa3SchemaRetrieve request
	Oa3SchemaRetrieve(ctx context.Context, params *Oa3SchemaRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductApiScanConfigurationsList request
	ProductApiScanConfigurationsList(ctx context.Context, params *ProductApiScanConfigurationsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductApiScanConfigurationsCreate request with any body
	ProductApiScanConfigurationsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductApiScanConfigurationsCreate(ctx context.Context, body ProductApiScanConfigurationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductApiScanConfigurationsCreateWithFormdataBody(ctx context.Context, body ProductApiScanConfigurationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductApiScanConfigurationsDestroy request
	ProductApiScanConfigurationsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductApiScanConfigurationsRetrieve request
	ProductApiScanConfigurationsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductApiScanConfigurationsPartialUpdate request with any body
	ProductApiScanConfigurationsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductApiScanConfigurationsPartialUpdate(ctx context.Context, id int, body ProductApiScanConfigurationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductApiScanConfigurationsPartialUpdateWithFormdataBody(ctx context.Context, id int, body ProductApiScanConfigurationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductApiScanConfigurationsUpdate request with any body
	ProductApiScanConfigurationsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductApiScanConfigurationsUpdate(ctx context.Context, id int, body ProductApiScanConfigurationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductApiScanConfigurationsUpdateWithFormdataBody(ctx context.Context, id int, body ProductApiScanConfigurationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductApiScanConfigurationsDeletePreviewList request
	ProductApiScanConfigurationsDeletePreviewList(ctx context.Context, id int, params *ProductApiScanConfigurationsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductGroupsList request
	ProductGroupsList(ctx context.Context, params *ProductGroupsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductGroupsCreate request with any body
	ProductGroupsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductGroupsCreate(ctx context.Context, body ProductGroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductGroupsCreateWithFormdataBody(ctx context.Context, body ProductGroupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductGroupsDestroy request
	ProductGroupsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductGroupsRetrieve request
	ProductGroupsRetrieve(ctx context.Context, id int, params *ProductGroupsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductGroupsPartialUpdate request
	ProductGroupsPartialUpdate(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductGroupsUpdate request with any body
	ProductGroupsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductGroupsUpdate(ctx context.Context, id int, body ProductGroupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductGroupsUpdateWithFormdataBody(ctx context.Context, id int, body ProductGroupsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductGroupsDeletePreviewList request
	ProductGroupsDeletePreviewList(ctx context.Context, id int, params *ProductGroupsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductMembersList request
	ProductMembersList(ctx context.Context, params *ProductMembersListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductMembersCreate request with any body
	ProductMembersCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductMembersCreate(ctx context.Context, body ProductMembersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductMembersCreateWithFormdataBody(ctx context.Context, body ProductMembersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductMembersDestroy request
	ProductMembersDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductMembersRetrieve request
	ProductMembersRetrieve(ctx context.Context, id int, params *ProductMembersRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductMembersPartialUpdate request
	ProductMembersPartialUpdate(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductMembersUpdate request with any body
	ProductMembersUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductMembersUpdate(ctx context.Context, id int, body ProductMembersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductMembersUpdateWithFormdataBody(ctx context.Context, id int, body ProductMembersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductMembersDeletePreviewList request
	ProductMembersDeletePreviewList(ctx context.Context, id int, params *ProductMembersDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductTypeGroupsList request
	ProductTypeGroupsList(ctx context.Context, params *ProductTypeGroupsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductTypeGroupsCreate request with any body
	ProductTypeGroupsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductTypeGroupsCreate(ctx context.Context, body ProductTypeGroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductTypeGroupsCreateWithFormdataBody(ctx context.Context, body ProductTypeGroupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductTypeGroupsDestroy request
	ProductTypeGroupsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductTypeGroupsRetrieve request
	ProductTypeGroupsRetrieve(ctx context.Context, id int, params *ProductTypeGroupsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductTypeGroupsPartialUpdate request
	ProductTypeGroupsPartialUpdate(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductTypeGroupsUpdate request with any body
	ProductTypeGroupsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductTypeGroupsUpdate(ctx context.Context, id int, body ProductTypeGroupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductTypeGroupsUpdateWithFormdataBody(ctx context.Context, id int, body ProductTypeGroupsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductTypeGroupsDeletePreviewList request
	ProductTypeGroupsDeletePreviewList(ctx context.Context, id int, params *ProductTypeGroupsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductTypeMembersList request
	ProductTypeMembersList(ctx context.Context, params *ProductTypeMembersListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductTypeMembersCreate request with any body
	ProductTypeMembersCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductTypeMembersCreate(ctx context.Context, body ProductTypeMembersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductTypeMembersCreateWithFormdataBody(ctx context.Context, body ProductTypeMembersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductTypeMembersDestroy request
	ProductTypeMembersDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductTypeMembersRetrieve request
	ProductTypeMembersRetrieve(ctx context.Context, id int, params *ProductTypeMembersRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductTypeMembersPartialUpdate request
	ProductTypeMembersPartialUpdate(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductTypeMembersUpdate request with any body
	ProductTypeMembersUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductTypeMembersUpdate(ctx context.Context, id int, body ProductTypeMembersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductTypeMembersUpdateWithFormdataBody(ctx context.Context, id int, body ProductTypeMembersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductTypeMembersDeletePreviewList request
	ProductTypeMembersDeletePreviewList(ctx context.Context, id int, params *ProductTypeMembersDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductTypesList request
	ProductTypesList(ctx context.Context, params *ProductTypesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductTypesCreate request with any body
	ProductTypesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductTypesCreate(ctx context.Context, body ProductTypesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductTypesCreateWithFormdataBody(ctx context.Context, body ProductTypesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductTypesDestroy request
	ProductTypesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductTypesRetrieve request
	ProductTypesRetrieve(ctx context.Context, id int, params *ProductTypesRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductTypesPartialUpdate request with any body
	ProductTypesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductTypesPartialUpdate(ctx context.Context, id int, body ProductTypesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductTypesPartialUpdateWithFormdataBody(ctx context.Context, id int, body ProductTypesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductTypesUpdate request with any body
	ProductTypesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductTypesUpdate(ctx context.Context, id int, body ProductTypesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductTypesUpdateWithFormdataBody(ctx context.Context, id int, body ProductTypesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductTypesDeletePreviewList request
	ProductTypesDeletePreviewList(ctx context.Context, id int, params *ProductTypesDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductTypesGenerateReportCreate request with any body
	ProductTypesGenerateReportCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductTypesGenerateReportCreate(ctx context.Context, id int, body ProductTypesGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductTypesGenerateReportCreateWithFormdataBody(ctx context.Context, id int, body ProductTypesGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductsList request
	ProductsList(ctx context.Context, params *ProductsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductsCreate request with any body
	ProductsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductsCreate(ctx context.Context, body ProductsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductsCreateWithFormdataBody(ctx context.Context, body ProductsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductsDestroy request
	ProductsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductsRetrieve request
	ProductsRetrieve(ctx context.Context, id int, params *ProductsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductsPartialUpdate request with any body
	ProductsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductsPartialUpdate(ctx context.Context, id int, body ProductsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductsPartialUpdateWithFormdataBody(ctx context.Context, id int, body ProductsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductsUpdate request with any body
	ProductsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductsUpdate(ctx context.Context, id int, body ProductsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductsUpdateWithFormdataBody(ctx context.Context, id int, body ProductsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductsDeletePreviewList request
	ProductsDeletePreviewList(ctx context.Context, id int, params *ProductsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductsGenerateReportCreate request with any body
	ProductsGenerateReportCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductsGenerateReportCreate(ctx context.Context, id int, body ProductsGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductsGenerateReportCreateWithFormdataBody(ctx context.Context, id int, body ProductsGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuestionnaireAnsweredQuestionnairesList request
	QuestionnaireAnsweredQuestionnairesList(ctx context.Context, params *QuestionnaireAnsweredQuestionnairesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuestionnaireAnsweredQuestionnairesRetrieve request
	QuestionnaireAnsweredQuestionnairesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuestionnaireAnswersList request
	QuestionnaireAnswersList(ctx context.Context, params *QuestionnaireAnswersListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuestionnaireAnswersRetrieve request
	QuestionnaireAnswersRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuestionnaireEngagementQuestionnairesList request
	QuestionnaireEngagementQuestionnairesList(ctx context.Context, params *QuestionnaireEngagementQuestionnairesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuestionnaireEngagementQuestionnairesRetrieve request
	QuestionnaireEngagementQuestionnairesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuestionnaireGeneralQuestionnairesList request
	QuestionnaireGeneralQuestionnairesList(ctx context.Context, params *QuestionnaireGeneralQuestionnairesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuestionnaireGeneralQuestionnairesRetrieve request
	QuestionnaireGeneralQuestionnairesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuestionnaireQuestionsList request
	QuestionnaireQuestionsList(ctx context.Context, params *QuestionnaireQuestionsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuestionnaireQuestionsRetrieve request
	QuestionnaireQuestionsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegulationsList request
	RegulationsList(ctx context.Context, params *RegulationsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegulationsCreate request with any body
	RegulationsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RegulationsCreate(ctx context.Context, body RegulationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	RegulationsCreateWithFormdataBody(ctx context.Context, body RegulationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegulationsDestroy request
	RegulationsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegulationsRetrieve request
	RegulationsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegulationsPartialUpdate request with any body
	RegulationsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RegulationsPartialUpdate(ctx context.Context, id int, body RegulationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	RegulationsPartialUpdateWithFormdataBody(ctx context.Context, id int, body RegulationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegulationsUpdate request with any body
	RegulationsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RegulationsUpdate(ctx context.Context, id int, body RegulationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	RegulationsUpdateWithFormdataBody(ctx context.Context, id int, body RegulationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegulationsDeletePreviewList request
	RegulationsDeletePreviewList(ctx context.Context, id int, params *RegulationsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReimportScanCreate request with any body
	ReimportScanCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RiskAcceptanceList request
	RiskAcceptanceList(ctx context.Context, params *RiskAcceptanceListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RiskAcceptanceDestroy request
	RiskAcceptanceDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RiskAcceptanceRetrieve request
	RiskAcceptanceRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RiskAcceptanceDeletePreviewList request
	RiskAcceptanceDeletePreviewList(ctx context.Context, id int, params *RiskAcceptanceDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RiskAcceptanceDownloadProofRetrieve request
	RiskAcceptanceDownloadProofRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RolesList request
	RolesList(ctx context.Context, params *RolesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RolesRetrieve request
	RolesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlaConfigurationsList request
	SlaConfigurationsList(ctx context.Context, params *SlaConfigurationsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlaConfigurationsCreate request with any body
	SlaConfigurationsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlaConfigurationsCreate(ctx context.Context, body SlaConfigurationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlaConfigurationsCreateWithFormdataBody(ctx context.Context, body SlaConfigurationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlaConfigurationsDestroy request
	SlaConfigurationsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlaConfigurationsRetrieve request
	SlaConfigurationsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlaConfigurationsPartialUpdate request with any body
	SlaConfigurationsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlaConfigurationsPartialUpdate(ctx context.Context, id int, body SlaConfigurationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlaConfigurationsPartialUpdateWithFormdataBody(ctx context.Context, id int, body SlaConfigurationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SlaConfigurationsUpdate request with any body
	SlaConfigurationsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlaConfigurationsUpdate(ctx context.Context, id int, body SlaConfigurationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	SlaConfigurationsUpdateWithFormdataBody(ctx context.Context, id int, body SlaConfigurationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SonarqubeIssuesList request
	SonarqubeIssuesList(ctx context.Context, params *SonarqubeIssuesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SonarqubeIssuesCreate request with any body
	SonarqubeIssuesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SonarqubeIssuesCreate(ctx context.Context, body SonarqubeIssuesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	SonarqubeIssuesCreateWithFormdataBody(ctx context.Context, body SonarqubeIssuesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SonarqubeIssuesDestroy request
	SonarqubeIssuesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SonarqubeIssuesRetrieve request
	SonarqubeIssuesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SonarqubeIssuesPartialUpdate request with any body
	SonarqubeIssuesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SonarqubeIssuesPartialUpdate(ctx context.Context, id int, body SonarqubeIssuesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	SonarqubeIssuesPartialUpdateWithFormdataBody(ctx context.Context, id int, body SonarqubeIssuesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SonarqubeIssuesUpdate request with any body
	SonarqubeIssuesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SonarqubeIssuesUpdate(ctx context.Context, id int, body SonarqubeIssuesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	SonarqubeIssuesUpdateWithFormdataBody(ctx context.Context, id int, body SonarqubeIssuesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SonarqubeIssuesDeletePreviewList request
	SonarqubeIssuesDeletePreviewList(ctx context.Context, id int, params *SonarqubeIssuesDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SonarqubeTransitionsList request
	SonarqubeTransitionsList(ctx context.Context, params *SonarqubeTransitionsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SonarqubeTransitionsCreate request with any body
	SonarqubeTransitionsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SonarqubeTransitionsCreate(ctx context.Context, body SonarqubeTransitionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	SonarqubeTransitionsCreateWithFormdataBody(ctx context.Context, body SonarqubeTransitionsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SonarqubeTransitionsDestroy request
	SonarqubeTransitionsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SonarqubeTransitionsRetrieve request
	SonarqubeTransitionsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SonarqubeTransitionsPartialUpdate request with any body
	SonarqubeTransitionsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SonarqubeTransitionsPartialUpdate(ctx context.Context, id int, body SonarqubeTransitionsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	SonarqubeTransitionsPartialUpdateWithFormdataBody(ctx context.Context, id int, body SonarqubeTransitionsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SonarqubeTransitionsUpdate request with any body
	SonarqubeTransitionsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SonarqubeTransitionsUpdate(ctx context.Context, id int, body SonarqubeTransitionsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	SonarqubeTransitionsUpdateWithFormdataBody(ctx context.Context, id int, body SonarqubeTransitionsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SonarqubeTransitionsDeletePreviewList request
	SonarqubeTransitionsDeletePreviewList(ctx context.Context, id int, params *SonarqubeTransitionsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StubFindingsList request
	StubFindingsList(ctx context.Context, params *StubFindingsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StubFindingsCreate request with any body
	StubFindingsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StubFindingsCreate(ctx context.Context, body StubFindingsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	StubFindingsCreateWithFormdataBody(ctx context.Context, body StubFindingsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StubFindingsDestroy request
	StubFindingsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StubFindingsRetrieve request
	StubFindingsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StubFindingsPartialUpdate request with any body
	StubFindingsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StubFindingsPartialUpdate(ctx context.Context, id int, body StubFindingsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	StubFindingsPartialUpdateWithFormdataBody(ctx context.Context, id int, body StubFindingsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StubFindingsUpdate request with any body
	StubFindingsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StubFindingsUpdate(ctx context.Context, id int, body StubFindingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	StubFindingsUpdateWithFormdataBody(ctx context.Context, id int, body StubFindingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StubFindingsDeletePreviewList request
	StubFindingsDeletePreviewList(ctx context.Context, id int, params *StubFindingsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SystemSettingsList request
	SystemSettingsList(ctx context.Context, params *SystemSettingsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SystemSettingsPartialUpdate request with any body
	SystemSettingsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SystemSettingsPartialUpdate(ctx context.Context, id int, body SystemSettingsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	SystemSettingsPartialUpdateWithFormdataBody(ctx context.Context, id int, body SystemSettingsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SystemSettingsUpdate request with any body
	SystemSettingsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SystemSettingsUpdate(ctx context.Context, id int, body SystemSettingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	SystemSettingsUpdateWithFormdataBody(ctx context.Context, id int, body SystemSettingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TechnologiesList request
	TechnologiesList(ctx context.Context, params *TechnologiesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TechnologiesCreate request with any body
	TechnologiesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TechnologiesCreate(ctx context.Context, body TechnologiesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TechnologiesCreateWithFormdataBody(ctx context.Context, body TechnologiesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TechnologiesDestroy request
	TechnologiesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TechnologiesRetrieve request
	TechnologiesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TechnologiesPartialUpdate request with any body
	TechnologiesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TechnologiesPartialUpdate(ctx context.Context, id int, body TechnologiesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TechnologiesPartialUpdateWithFormdataBody(ctx context.Context, id int, body TechnologiesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TechnologiesUpdate request with any body
	TechnologiesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TechnologiesUpdate(ctx context.Context, id int, body TechnologiesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TechnologiesUpdateWithFormdataBody(ctx context.Context, id int, body TechnologiesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TechnologiesDeletePreviewList request
	TechnologiesDeletePreviewList(ctx context.Context, id int, params *TechnologiesDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestImportsList request
	TestImportsList(ctx context.Context, params *TestImportsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestImportsCreate request with any body
	TestImportsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestImportsCreate(ctx context.Context, body TestImportsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestImportsCreateWithFormdataBody(ctx context.Context, body TestImportsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestImportsDestroy request
	TestImportsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestImportsRetrieve request
	TestImportsRetrieve(ctx context.Context, id int, params *TestImportsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestImportsPartialUpdate request with any body
	TestImportsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestImportsPartialUpdate(ctx context.Context, id int, body TestImportsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestImportsPartialUpdateWithFormdataBody(ctx context.Context, id int, body TestImportsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestImportsUpdate request with any body
	TestImportsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestImportsUpdate(ctx context.Context, id int, body TestImportsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestImportsUpdateWithFormdataBody(ctx context.Context, id int, body TestImportsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestImportsDeletePreviewList request
	TestImportsDeletePreviewList(ctx context.Context, id int, params *TestImportsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestTypesList request
	TestTypesList(ctx context.Context, params *TestTypesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestTypesCreate request with any body
	TestTypesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestTypesCreate(ctx context.Context, body TestTypesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestTypesCreateWithFormdataBody(ctx context.Context, body TestTypesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestTypesRetrieve request
	TestTypesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestTypesPartialUpdate request with any body
	TestTypesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestTypesPartialUpdate(ctx context.Context, id int, body TestTypesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestTypesPartialUpdateWithFormdataBody(ctx context.Context, id int, body TestTypesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestTypesUpdate request with any body
	TestTypesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestTypesUpdate(ctx context.Context, id int, body TestTypesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestTypesUpdateWithFormdataBody(ctx context.Context, id int, body TestTypesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestsList request
	TestsList(ctx context.Context, params *TestsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestsCreate request with any body
	TestsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestsCreate(ctx context.Context, body TestsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestsCreateWithFormdataBody(ctx context.Context, body TestsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestsDestroy request
	TestsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestsRetrieve request
	TestsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestsPartialUpdate request with any body
	TestsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestsPartialUpdate(ctx context.Context, id int, body TestsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestsPartialUpdateWithFormdataBody(ctx context.Context, id int, body TestsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestsUpdate request with any body
	TestsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestsUpdate(ctx context.Context, id int, body TestsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestsUpdateWithFormdataBody(ctx context.Context, id int, body TestsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestsAcceptRisksCreate request with any body
	TestsAcceptRisksCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestsAcceptRisksCreate(ctx context.Context, id int, body TestsAcceptRisksCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestsAcceptRisksCreateWithFormdataBody(ctx context.Context, id int, body TestsAcceptRisksCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestsDeletePreviewList request
	TestsDeletePreviewList(ctx context.Context, id int, params *TestsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestsFilesRetrieve request
	TestsFilesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestsFilesCreate request with any body
	TestsFilesCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestsFilesDownloadRetrieve request
	TestsFilesDownloadRetrieve(ctx context.Context, id int, fileId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestsGenerateReportCreate request with any body
	TestsGenerateReportCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestsGenerateReportCreate(ctx context.Context, id int, body TestsGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestsGenerateReportCreateWithFormdataBody(ctx context.Context, id int, body TestsGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestsNotesRetrieve request
	TestsNotesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestsNotesCreate request with any body
	TestsNotesCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestsNotesCreate(ctx context.Context, id int, body TestsNotesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestsNotesCreateWithFormdataBody(ctx context.Context, id int, body TestsNotesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToolConfigurationsList request
	ToolConfigurationsList(ctx context.Context, params *ToolConfigurationsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToolConfigurationsCreate request with any body
	ToolConfigurationsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ToolConfigurationsCreate(ctx context.Context, body ToolConfigurationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ToolConfigurationsCreateWithFormdataBody(ctx context.Context, body ToolConfigurationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToolConfigurationsDestroy request
	ToolConfigurationsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToolConfigurationsRetrieve request
	ToolConfigurationsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToolConfigurationsPartialUpdate request with any body
	ToolConfigurationsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ToolConfigurationsPartialUpdate(ctx context.Context, id int, body ToolConfigurationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ToolConfigurationsPartialUpdateWithFormdataBody(ctx context.Context, id int, body ToolConfigurationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToolConfigurationsUpdate request with any body
	ToolConfigurationsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ToolConfigurationsUpdate(ctx context.Context, id int, body ToolConfigurationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ToolConfigurationsUpdateWithFormdataBody(ctx context.Context, id int, body ToolConfigurationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToolConfigurationsDeletePreviewList request
	ToolConfigurationsDeletePreviewList(ctx context.Context, id int, params *ToolConfigurationsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToolProductSettingsList request
	ToolProductSettingsList(ctx context.Context, params *ToolProductSettingsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToolProductSettingsCreate request with any body
	ToolProductSettingsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ToolProductSettingsCreate(ctx context.Context, body ToolProductSettingsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ToolProductSettingsCreateWithFormdataBody(ctx context.Context, body ToolProductSettingsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToolProductSettingsDestroy request
	ToolProductSettingsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToolProductSettingsRetrieve request
	ToolProductSettingsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToolProductSettingsPartialUpdate request with any body
	ToolProductSettingsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ToolProductSettingsPartialUpdate(ctx context.Context, id int, body ToolProductSettingsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ToolProductSettingsPartialUpdateWithFormdataBody(ctx context.Context, id int, body ToolProductSettingsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToolProductSettingsUpdate request with any body
	ToolProductSettingsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ToolProductSettingsUpdate(ctx context.Context, id int, body ToolProductSettingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ToolProductSettingsUpdateWithFormdataBody(ctx context.Context, id int, body ToolProductSettingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToolProductSettingsDeletePreviewList request
	ToolProductSettingsDeletePreviewList(ctx context.Context, id int, params *ToolProductSettingsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToolTypesList request
	ToolTypesList(ctx context.Context, params *ToolTypesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToolTypesCreate request with any body
	ToolTypesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ToolTypesCreate(ctx context.Context, body ToolTypesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ToolTypesCreateWithFormdataBody(ctx context.Context, body ToolTypesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToolTypesDestroy request
	ToolTypesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToolTypesRetrieve request
	ToolTypesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToolTypesPartialUpdate request with any body
	ToolTypesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ToolTypesPartialUpdate(ctx context.Context, id int, body ToolTypesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ToolTypesPartialUpdateWithFormdataBody(ctx context.Context, id int, body ToolTypesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToolTypesUpdate request with any body
	ToolTypesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ToolTypesUpdate(ctx context.Context, id int, body ToolTypesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ToolTypesUpdateWithFormdataBody(ctx context.Context, id int, body ToolTypesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToolTypesDeletePreviewList request
	ToolTypesDeletePreviewList(ctx context.Context, id int, params *ToolTypesDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserContactInfosList request
	UserContactInfosList(ctx context.Context, params *UserContactInfosListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserContactInfosCreate request with any body
	UserContactInfosCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UserContactInfosCreate(ctx context.Context, body UserContactInfosCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	UserContactInfosCreateWithFormdataBody(ctx context.Context, body UserContactInfosCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserContactInfosDestroy request
	UserContactInfosDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserContactInfosRetrieve request
	UserContactInfosRetrieve(ctx context.Context, id int, params *UserContactInfosRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserContactInfosPartialUpdate request with any body
	UserContactInfosPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UserContactInfosPartialUpdate(ctx context.Context, id int, body UserContactInfosPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	UserContactInfosPartialUpdateWithFormdataBody(ctx context.Context, id int, body UserContactInfosPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserContactInfosUpdate request with any body
	UserContactInfosUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UserContactInfosUpdate(ctx context.Context, id int, body UserContactInfosUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	UserContactInfosUpdateWithFormdataBody(ctx context.Context, id int, body UserContactInfosUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserContactInfosDeletePreviewList request
	UserContactInfosDeletePreviewList(ctx context.Context, id int, params *UserContactInfosDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserProfileRetrieve request
	UserProfileRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersList request
	UsersList(ctx context.Context, params *UsersListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersCreate request with any body
	UsersCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersCreate(ctx context.Context, body UsersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersCreateWithFormdataBody(ctx context.Context, body UsersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersDestroy request
	UsersDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersRetrieve request
	UsersRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersPartialUpdate request with any body
	UsersPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersPartialUpdate(ctx context.Context, id int, body UsersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersPartialUpdateWithFormdataBody(ctx context.Context, id int, body UsersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersUpdate request with any body
	UsersUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersUpdate(ctx context.Context, id int, body UsersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersUpdateWithFormdataBody(ctx context.Context, id int, body UsersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersDeletePreviewList request
	UsersDeletePreviewList(ctx context.Context, id int, params *UsersDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ApiTokenAuthCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiTokenAuthCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiTokenAuthCreate(ctx context.Context, body ApiTokenAuthCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiTokenAuthCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiTokenAuthCreateWithFormdataBody(ctx context.Context, body ApiTokenAuthCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiTokenAuthCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConfigurationPermissionsList(ctx context.Context, params *ConfigurationPermissionsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfigurationPermissionsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConfigurationPermissionsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfigurationPermissionsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CredentialMappingsList(ctx context.Context, params *CredentialMappingsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCredentialMappingsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CredentialMappingsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCredentialMappingsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CredentialMappingsCreate(ctx context.Context, body CredentialMappingsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCredentialMappingsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CredentialMappingsCreateWithFormdataBody(ctx context.Context, body CredentialMappingsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCredentialMappingsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CredentialMappingsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCredentialMappingsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CredentialMappingsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCredentialMappingsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CredentialMappingsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCredentialMappingsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CredentialMappingsPartialUpdate(ctx context.Context, id int, body CredentialMappingsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCredentialMappingsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CredentialMappingsPartialUpdateWithFormdataBody(ctx context.Context, id int, body CredentialMappingsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCredentialMappingsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CredentialMappingsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCredentialMappingsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CredentialMappingsUpdate(ctx context.Context, id int, body CredentialMappingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCredentialMappingsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CredentialMappingsUpdateWithFormdataBody(ctx context.Context, id int, body CredentialMappingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCredentialMappingsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CredentialMappingsDeletePreviewList(ctx context.Context, id int, params *CredentialMappingsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCredentialMappingsDeletePreviewListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CredentialsList(ctx context.Context, params *CredentialsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCredentialsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CredentialsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCredentialsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CredentialsCreate(ctx context.Context, body CredentialsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCredentialsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CredentialsCreateWithFormdataBody(ctx context.Context, body CredentialsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCredentialsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CredentialsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCredentialsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CredentialsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCredentialsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CredentialsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCredentialsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CredentialsPartialUpdate(ctx context.Context, id int, body CredentialsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCredentialsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CredentialsPartialUpdateWithFormdataBody(ctx context.Context, id int, body CredentialsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCredentialsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CredentialsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCredentialsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CredentialsUpdate(ctx context.Context, id int, body CredentialsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCredentialsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CredentialsUpdateWithFormdataBody(ctx context.Context, id int, body CredentialsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCredentialsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CredentialsDeletePreviewList(ctx context.Context, id int, params *CredentialsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCredentialsDeletePreviewListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevelopmentEnvironmentsList(ctx context.Context, params *DevelopmentEnvironmentsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevelopmentEnvironmentsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevelopmentEnvironmentsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevelopmentEnvironmentsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevelopmentEnvironmentsCreate(ctx context.Context, body DevelopmentEnvironmentsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevelopmentEnvironmentsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevelopmentEnvironmentsCreateWithFormdataBody(ctx context.Context, body DevelopmentEnvironmentsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevelopmentEnvironmentsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevelopmentEnvironmentsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevelopmentEnvironmentsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevelopmentEnvironmentsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevelopmentEnvironmentsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevelopmentEnvironmentsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevelopmentEnvironmentsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevelopmentEnvironmentsPartialUpdate(ctx context.Context, id int, body DevelopmentEnvironmentsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevelopmentEnvironmentsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevelopmentEnvironmentsPartialUpdateWithFormdataBody(ctx context.Context, id int, body DevelopmentEnvironmentsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevelopmentEnvironmentsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevelopmentEnvironmentsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevelopmentEnvironmentsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevelopmentEnvironmentsUpdate(ctx context.Context, id int, body DevelopmentEnvironmentsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevelopmentEnvironmentsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevelopmentEnvironmentsUpdateWithFormdataBody(ctx context.Context, id int, body DevelopmentEnvironmentsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevelopmentEnvironmentsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevelopmentEnvironmentsDeletePreviewList(ctx context.Context, id int, params *DevelopmentEnvironmentsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevelopmentEnvironmentsDeletePreviewListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupMembersList(ctx context.Context, params *DojoGroupMembersListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupMembersListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupMembersCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupMembersCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupMembersCreate(ctx context.Context, body DojoGroupMembersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupMembersCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupMembersCreateWithFormdataBody(ctx context.Context, body DojoGroupMembersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupMembersCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupMembersDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupMembersDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupMembersRetrieve(ctx context.Context, id int, params *DojoGroupMembersRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupMembersRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupMembersPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupMembersPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupMembersPartialUpdate(ctx context.Context, id int, body DojoGroupMembersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupMembersPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupMembersPartialUpdateWithFormdataBody(ctx context.Context, id int, body DojoGroupMembersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupMembersPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupMembersUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupMembersUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupMembersUpdate(ctx context.Context, id int, body DojoGroupMembersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupMembersUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupMembersUpdateWithFormdataBody(ctx context.Context, id int, body DojoGroupMembersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupMembersUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupMembersDeletePreviewList(ctx context.Context, id int, params *DojoGroupMembersDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupMembersDeletePreviewListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupsList(ctx context.Context, params *DojoGroupsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupsCreate(ctx context.Context, body DojoGroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupsCreateWithFormdataBody(ctx context.Context, body DojoGroupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupsRetrieve(ctx context.Context, id int, params *DojoGroupsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupsRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupsPartialUpdate(ctx context.Context, id int, body DojoGroupsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupsPartialUpdateWithFormdataBody(ctx context.Context, id int, body DojoGroupsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupsUpdate(ctx context.Context, id int, body DojoGroupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupsUpdateWithFormdataBody(ctx context.Context, id int, body DojoGroupsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DojoGroupsDeletePreviewList(ctx context.Context, id int, params *DojoGroupsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDojoGroupsDeletePreviewListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointMetaImportCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointMetaImportCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointStatusList(ctx context.Context, params *EndpointStatusListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointStatusListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointStatusCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointStatusCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointStatusCreate(ctx context.Context, body EndpointStatusCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointStatusCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointStatusCreateWithFormdataBody(ctx context.Context, body EndpointStatusCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointStatusCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointStatusDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointStatusDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointStatusRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointStatusRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointStatusPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointStatusPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointStatusPartialUpdate(ctx context.Context, id int, body EndpointStatusPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointStatusPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointStatusPartialUpdateWithFormdataBody(ctx context.Context, id int, body EndpointStatusPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointStatusPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointStatusUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointStatusUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointStatusUpdate(ctx context.Context, id int, body EndpointStatusUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointStatusUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointStatusUpdateWithFormdataBody(ctx context.Context, id int, body EndpointStatusUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointStatusUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointStatusDeletePreviewList(ctx context.Context, id int, params *EndpointStatusDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointStatusDeletePreviewListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointsList(ctx context.Context, params *EndpointsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointsCreate(ctx context.Context, body EndpointsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointsCreateWithFormdataBody(ctx context.Context, body EndpointsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointsPartialUpdate(ctx context.Context, id int, body EndpointsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointsPartialUpdateWithFormdataBody(ctx context.Context, id int, body EndpointsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointsUpdate(ctx context.Context, id int, body EndpointsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointsUpdateWithFormdataBody(ctx context.Context, id int, body EndpointsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointsDeletePreviewList(ctx context.Context, id int, params *EndpointsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointsDeletePreviewListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointsGenerateReportCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointsGenerateReportCreateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointsGenerateReportCreate(ctx context.Context, id int, body EndpointsGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointsGenerateReportCreateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointsGenerateReportCreateWithFormdataBody(ctx context.Context, id int, body EndpointsGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndpointsGenerateReportCreateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementPresetsList(ctx context.Context, params *EngagementPresetsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementPresetsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementPresetsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementPresetsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementPresetsCreate(ctx context.Context, body EngagementPresetsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementPresetsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementPresetsCreateWithFormdataBody(ctx context.Context, body EngagementPresetsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementPresetsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementPresetsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementPresetsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementPresetsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementPresetsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementPresetsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementPresetsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementPresetsPartialUpdate(ctx context.Context, id int, body EngagementPresetsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementPresetsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementPresetsPartialUpdateWithFormdataBody(ctx context.Context, id int, body EngagementPresetsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementPresetsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementPresetsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementPresetsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementPresetsUpdate(ctx context.Context, id int, body EngagementPresetsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementPresetsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementPresetsUpdateWithFormdataBody(ctx context.Context, id int, body EngagementPresetsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementPresetsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementPresetsDeletePreviewList(ctx context.Context, id int, params *EngagementPresetsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementPresetsDeletePreviewListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsList(ctx context.Context, params *EngagementsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsCreate(ctx context.Context, body EngagementsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsCreateWithFormdataBody(ctx context.Context, body EngagementsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsPartialUpdate(ctx context.Context, id int, body EngagementsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsPartialUpdateWithFormdataBody(ctx context.Context, id int, body EngagementsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsUpdate(ctx context.Context, id int, body EngagementsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsUpdateWithFormdataBody(ctx context.Context, id int, body EngagementsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsAcceptRisksCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsAcceptRisksCreateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsAcceptRisksCreate(ctx context.Context, id int, body EngagementsAcceptRisksCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsAcceptRisksCreateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsAcceptRisksCreateWithFormdataBody(ctx context.Context, id int, body EngagementsAcceptRisksCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsAcceptRisksCreateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsCloseCreate(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsCloseCreateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsCompleteChecklistRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsCompleteChecklistRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsCompleteChecklistCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsCompleteChecklistCreateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsCompleteChecklistCreate(ctx context.Context, id int, body EngagementsCompleteChecklistCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsCompleteChecklistCreateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsCompleteChecklistCreateWithFormdataBody(ctx context.Context, id int, body EngagementsCompleteChecklistCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsCompleteChecklistCreateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsDeletePreviewList(ctx context.Context, id int, params *EngagementsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsDeletePreviewListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsFilesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsFilesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsFilesCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsFilesCreateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsFilesDownloadRetrieve(ctx context.Context, id int, fileId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsFilesDownloadRetrieveRequest(c.Server, id, fileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsGenerateReportCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsGenerateReportCreateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsGenerateReportCreate(ctx context.Context, id int, body EngagementsGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsGenerateReportCreateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsGenerateReportCreateWithFormdataBody(ctx context.Context, id int, body EngagementsGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsGenerateReportCreateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsNotesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsNotesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsNotesCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsNotesCreateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsNotesCreate(ctx context.Context, id int, body EngagementsNotesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsNotesCreateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsNotesCreateWithFormdataBody(ctx context.Context, id int, body EngagementsNotesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsNotesCreateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EngagementsReopenCreate(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEngagementsReopenCreateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingTemplatesList(ctx context.Context, params *FindingTemplatesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingTemplatesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingTemplatesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingTemplatesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingTemplatesCreate(ctx context.Context, body FindingTemplatesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingTemplatesCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingTemplatesCreateWithFormdataBody(ctx context.Context, body FindingTemplatesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingTemplatesCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingTemplatesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingTemplatesDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingTemplatesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingTemplatesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingTemplatesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingTemplatesPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingTemplatesPartialUpdate(ctx context.Context, id int, body FindingTemplatesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingTemplatesPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingTemplatesPartialUpdateWithFormdataBody(ctx context.Context, id int, body FindingTemplatesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingTemplatesPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingTemplatesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingTemplatesUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingTemplatesUpdate(ctx context.Context, id int, body FindingTemplatesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingTemplatesUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingTemplatesUpdateWithFormdataBody(ctx context.Context, id int, body FindingTemplatesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingTemplatesUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingTemplatesDeletePreviewList(ctx context.Context, id int, params *FindingTemplatesDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingTemplatesDeletePreviewListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsList(ctx context.Context, params *FindingsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsCreate(ctx context.Context, body FindingsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsCreateWithFormdataBody(ctx context.Context, body FindingsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsAcceptRisksCreateWithBody(ctx context.Context, params *FindingsAcceptRisksCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsAcceptRisksCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsAcceptRisksCreate(ctx context.Context, params *FindingsAcceptRisksCreateParams, body FindingsAcceptRisksCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsAcceptRisksCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsAcceptRisksCreateWithFormdataBody(ctx context.Context, params *FindingsAcceptRisksCreateParams, body FindingsAcceptRisksCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsAcceptRisksCreateRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsGenerateReportCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsGenerateReportCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsGenerateReportCreate(ctx context.Context, body FindingsGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsGenerateReportCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsGenerateReportCreateWithFormdataBody(ctx context.Context, body FindingsGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsGenerateReportCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsRetrieve(ctx context.Context, id int, params *FindingsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsPartialUpdate(ctx context.Context, id int, body FindingsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsPartialUpdateWithFormdataBody(ctx context.Context, id int, body FindingsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsUpdate(ctx context.Context, id int, body FindingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsUpdateWithFormdataBody(ctx context.Context, id int, body FindingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsCloseCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsCloseCreateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsCloseCreate(ctx context.Context, id int, body FindingsCloseCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsCloseCreateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsCloseCreateWithFormdataBody(ctx context.Context, id int, body FindingsCloseCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsCloseCreateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsDeletePreviewList(ctx context.Context, id int, params *FindingsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsDeletePreviewListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsDuplicateList(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsDuplicateListRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsDuplicateResetCreate(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsDuplicateResetCreateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsFilesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsFilesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsFilesCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsFilesCreateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsFilesDownloadRetrieve(ctx context.Context, id int, fileId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsFilesDownloadRetrieveRequest(c.Server, id, fileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsMetadataDestroy(ctx context.Context, id int, params *FindingsMetadataDestroyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsMetadataDestroyRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsMetadataList(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsMetadataListRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsMetadataCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsMetadataCreateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsMetadataCreate(ctx context.Context, id int, body FindingsMetadataCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsMetadataCreateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsMetadataCreateWithFormdataBody(ctx context.Context, id int, body FindingsMetadataCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsMetadataCreateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsMetadataUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsMetadataUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsMetadataUpdate(ctx context.Context, id int, body FindingsMetadataUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsMetadataUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsMetadataUpdateWithFormdataBody(ctx context.Context, id int, body FindingsMetadataUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsMetadataUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsNotesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsNotesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsNotesCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsNotesCreateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsNotesCreate(ctx context.Context, id int, body FindingsNotesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsNotesCreateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsNotesCreateWithFormdataBody(ctx context.Context, id int, body FindingsNotesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsNotesCreateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsOriginalCreate(ctx context.Context, id int, newFid int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsOriginalCreateRequest(c.Server, id, newFid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsRemoveNotePartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsRemoveNotePartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsRemoveNotePartialUpdate(ctx context.Context, id int, body FindingsRemoveNotePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsRemoveNotePartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsRemoveNotePartialUpdateWithFormdataBody(ctx context.Context, id int, body FindingsRemoveNotePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsRemoveNotePartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsRemoveTagsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsRemoveTagsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsRemoveTagsPartialUpdate(ctx context.Context, id int, body FindingsRemoveTagsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsRemoveTagsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsRemoveTagsPartialUpdateWithFormdataBody(ctx context.Context, id int, body FindingsRemoveTagsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsRemoveTagsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsRemoveTagsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsRemoveTagsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsRemoveTagsUpdate(ctx context.Context, id int, body FindingsRemoveTagsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsRemoveTagsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsRemoveTagsUpdateWithFormdataBody(ctx context.Context, id int, body FindingsRemoveTagsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsRemoveTagsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsRequestResponseRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsRequestResponseRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsRequestResponseCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsRequestResponseCreateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsRequestResponseCreate(ctx context.Context, id int, body FindingsRequestResponseCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsRequestResponseCreateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsRequestResponseCreateWithFormdataBody(ctx context.Context, id int, body FindingsRequestResponseCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsRequestResponseCreateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsTagsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsTagsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsTagsCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsTagsCreateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsTagsCreate(ctx context.Context, id int, body FindingsTagsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsTagsCreateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindingsTagsCreateWithFormdataBody(ctx context.Context, id int, body FindingsTagsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindingsTagsCreateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GlobalRolesList(ctx context.Context, params *GlobalRolesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGlobalRolesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GlobalRolesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGlobalRolesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GlobalRolesCreate(ctx context.Context, body GlobalRolesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGlobalRolesCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GlobalRolesCreateWithFormdataBody(ctx context.Context, body GlobalRolesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGlobalRolesCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GlobalRolesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGlobalRolesDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GlobalRolesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGlobalRolesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GlobalRolesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGlobalRolesPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GlobalRolesPartialUpdate(ctx context.Context, id int, body GlobalRolesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGlobalRolesPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GlobalRolesPartialUpdateWithFormdataBody(ctx context.Context, id int, body GlobalRolesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGlobalRolesPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GlobalRolesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGlobalRolesUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GlobalRolesUpdate(ctx context.Context, id int, body GlobalRolesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGlobalRolesUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GlobalRolesUpdateWithFormdataBody(ctx context.Context, id int, body GlobalRolesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGlobalRolesUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GlobalRolesDeletePreviewList(ctx context.Context, id int, params *GlobalRolesDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGlobalRolesDeletePreviewListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImportLanguagesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImportLanguagesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImportScanCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImportScanCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraConfigurationsList(ctx context.Context, params *JiraConfigurationsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraConfigurationsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraConfigurationsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraConfigurationsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraConfigurationsCreate(ctx context.Context, body JiraConfigurationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraConfigurationsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraConfigurationsCreateWithFormdataBody(ctx context.Context, body JiraConfigurationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraConfigurationsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraConfigurationsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraConfigurationsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraConfigurationsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraConfigurationsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraConfigurationsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraConfigurationsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraConfigurationsPartialUpdate(ctx context.Context, id int, body JiraConfigurationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraConfigurationsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraConfigurationsPartialUpdateWithFormdataBody(ctx context.Context, id int, body JiraConfigurationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraConfigurationsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraConfigurationsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraConfigurationsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraConfigurationsUpdate(ctx context.Context, id int, body JiraConfigurationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraConfigurationsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraConfigurationsUpdateWithFormdataBody(ctx context.Context, id int, body JiraConfigurationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraConfigurationsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraConfigurationsDeletePreviewList(ctx context.Context, id int, params *JiraConfigurationsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraConfigurationsDeletePreviewListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraFindingMappingsList(ctx context.Context, params *JiraFindingMappingsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraFindingMappingsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraFindingMappingsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraFindingMappingsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraFindingMappingsCreate(ctx context.Context, body JiraFindingMappingsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraFindingMappingsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraFindingMappingsCreateWithFormdataBody(ctx context.Context, body JiraFindingMappingsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraFindingMappingsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraFindingMappingsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraFindingMappingsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraFindingMappingsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraFindingMappingsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraFindingMappingsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraFindingMappingsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraFindingMappingsPartialUpdate(ctx context.Context, id int, body JiraFindingMappingsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraFindingMappingsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraFindingMappingsPartialUpdateWithFormdataBody(ctx context.Context, id int, body JiraFindingMappingsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraFindingMappingsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraFindingMappingsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraFindingMappingsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraFindingMappingsUpdate(ctx context.Context, id int, body JiraFindingMappingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraFindingMappingsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraFindingMappingsUpdateWithFormdataBody(ctx context.Context, id int, body JiraFindingMappingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraFindingMappingsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraFindingMappingsDeletePreviewList(ctx context.Context, id int, params *JiraFindingMappingsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraFindingMappingsDeletePreviewListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraInstancesList(ctx context.Context, params *JiraInstancesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraInstancesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraInstancesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraInstancesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraInstancesCreate(ctx context.Context, body JiraInstancesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraInstancesCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraInstancesCreateWithFormdataBody(ctx context.Context, body JiraInstancesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraInstancesCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraInstancesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraInstancesDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraInstancesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraInstancesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraInstancesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraInstancesPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraInstancesPartialUpdate(ctx context.Context, id int, body JiraInstancesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraInstancesPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraInstancesPartialUpdateWithFormdataBody(ctx context.Context, id int, body JiraInstancesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraInstancesPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraInstancesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraInstancesUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraInstancesUpdate(ctx context.Context, id int, body JiraInstancesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraInstancesUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraInstancesUpdateWithFormdataBody(ctx context.Context, id int, body JiraInstancesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraInstancesUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraInstancesDeletePreviewList(ctx context.Context, id int, params *JiraInstancesDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraInstancesDeletePreviewListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProductConfigurationsList(ctx context.Context, params *JiraProductConfigurationsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProductConfigurationsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProductConfigurationsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProductConfigurationsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProductConfigurationsCreate(ctx context.Context, body JiraProductConfigurationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProductConfigurationsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProductConfigurationsCreateWithFormdataBody(ctx context.Context, body JiraProductConfigurationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProductConfigurationsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProductConfigurationsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProductConfigurationsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProductConfigurationsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProductConfigurationsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProductConfigurationsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProductConfigurationsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProductConfigurationsPartialUpdate(ctx context.Context, id int, body JiraProductConfigurationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProductConfigurationsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProductConfigurationsPartialUpdateWithFormdataBody(ctx context.Context, id int, body JiraProductConfigurationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProductConfigurationsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProductConfigurationsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProductConfigurationsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProductConfigurationsUpdate(ctx context.Context, id int, body JiraProductConfigurationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProductConfigurationsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProductConfigurationsUpdateWithFormdataBody(ctx context.Context, id int, body JiraProductConfigurationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProductConfigurationsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProductConfigurationsDeletePreviewList(ctx context.Context, id int, params *JiraProductConfigurationsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProductConfigurationsDeletePreviewListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProjectsList(ctx context.Context, params *JiraProjectsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProjectsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProjectsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProjectsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProjectsCreate(ctx context.Context, body JiraProjectsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProjectsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProjectsCreateWithFormdataBody(ctx context.Context, body JiraProjectsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProjectsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProjectsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProjectsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProjectsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProjectsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProjectsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProjectsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProjectsPartialUpdate(ctx context.Context, id int, body JiraProjectsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProjectsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProjectsPartialUpdateWithFormdataBody(ctx context.Context, id int, body JiraProjectsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProjectsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProjectsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProjectsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProjectsUpdate(ctx context.Context, id int, body JiraProjectsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProjectsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProjectsUpdateWithFormdataBody(ctx context.Context, id int, body JiraProjectsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProjectsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JiraProjectsDeletePreviewList(ctx context.Context, id int, params *JiraProjectsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJiraProjectsDeletePreviewListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguageTypesList(ctx context.Context, params *LanguageTypesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguageTypesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguageTypesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguageTypesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguageTypesCreate(ctx context.Context, body LanguageTypesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguageTypesCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguageTypesCreateWithFormdataBody(ctx context.Context, body LanguageTypesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguageTypesCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguageTypesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguageTypesDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguageTypesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguageTypesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguageTypesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguageTypesPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguageTypesPartialUpdate(ctx context.Context, id int, body LanguageTypesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguageTypesPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguageTypesPartialUpdateWithFormdataBody(ctx context.Context, id int, body LanguageTypesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguageTypesPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguageTypesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguageTypesUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguageTypesUpdate(ctx context.Context, id int, body LanguageTypesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguageTypesUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguageTypesUpdateWithFormdataBody(ctx context.Context, id int, body LanguageTypesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguageTypesUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguageTypesDeletePreviewList(ctx context.Context, id int, params *LanguageTypesDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguageTypesDeletePreviewListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguagesList(ctx context.Context, params *LanguagesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguagesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguagesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguagesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguagesCreate(ctx context.Context, body LanguagesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguagesCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguagesCreateWithFormdataBody(ctx context.Context, body LanguagesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguagesCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguagesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguagesDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguagesRetrieve(ctx context.Context, id int, params *LanguagesRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguagesRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguagesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguagesPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguagesPartialUpdate(ctx context.Context, id int, body LanguagesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguagesPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguagesPartialUpdateWithFormdataBody(ctx context.Context, id int, body LanguagesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguagesPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguagesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguagesUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguagesUpdate(ctx context.Context, id int, body LanguagesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguagesUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguagesUpdateWithFormdataBody(ctx context.Context, id int, body LanguagesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguagesUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LanguagesDeletePreviewList(ctx context.Context, id int, params *LanguagesDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLanguagesDeletePreviewListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MetadataList(ctx context.Context, params *MetadataListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetadataListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MetadataCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetadataCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MetadataCreate(ctx context.Context, body MetadataCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetadataCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MetadataCreateWithFormdataBody(ctx context.Context, body MetadataCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetadataCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MetadataDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetadataDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MetadataRetrieve(ctx context.Context, id int, params *MetadataRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetadataRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MetadataPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetadataPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MetadataPartialUpdate(ctx context.Context, id int, body MetadataPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetadataPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MetadataPartialUpdateWithFormdataBody(ctx context.Context, id int, body MetadataPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetadataPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MetadataUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetadataUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MetadataUpdate(ctx context.Context, id int, body MetadataUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetadataUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MetadataUpdateWithFormdataBody(ctx context.Context, id int, body MetadataUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetadataUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MetadataDeletePreviewList(ctx context.Context, id int, params *MetadataDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetadataDeletePreviewListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkLocationsList(ctx context.Context, params *NetworkLocationsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkLocationsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkLocationsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkLocationsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkLocationsCreate(ctx context.Context, body NetworkLocationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkLocationsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkLocationsCreateWithFormdataBody(ctx context.Context, body NetworkLocationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkLocationsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkLocationsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkLocationsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkLocationsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkLocationsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkLocationsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkLocationsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkLocationsPartialUpdate(ctx context.Context, id int, body NetworkLocationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkLocationsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkLocationsPartialUpdateWithFormdataBody(ctx context.Context, id int, body NetworkLocationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkLocationsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkLocationsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkLocationsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkLocationsUpdate(ctx context.Context, id int, body NetworkLocationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkLocationsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkLocationsUpdateWithFormdataBody(ctx context.Context, id int, body NetworkLocationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkLocationsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkLocationsDeletePreviewList(ctx context.Context, id int, params *NetworkLocationsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkLocationsDeletePreviewListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NoteTypeList(ctx context.Context, params *NoteTypeListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNoteTypeListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NoteTypeCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNoteTypeCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NoteTypeCreate(ctx context.Context, body NoteTypeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNoteTypeCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NoteTypeCreateWithFormdataBody(ctx context.Context, body NoteTypeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNoteTypeCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NoteTypeDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNoteTypeDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NoteTypeRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNoteTypeRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NoteTypePartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNoteTypePartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NoteTypePartialUpdate(ctx context.Context, id int, body NoteTypePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNoteTypePartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NoteTypePartialUpdateWithFormdataBody(ctx context.Context, id int, body NoteTypePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNoteTypePartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NoteTypeUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNoteTypeUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NoteTypeUpdate(ctx context.Context, id int, body NoteTypeUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNoteTypeUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NoteTypeUpdateWithFormdataBody(ctx context.Context, id int, body NoteTypeUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNoteTypeUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NoteTypeDeletePreviewList(ctx context.Context, id int, params *NoteTypeDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNoteTypeDeletePreviewListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotesList(ctx context.Context, params *NotesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotesPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotesPartialUpdate(ctx context.Context, id int, body NotesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotesPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotesPartialUpdateWithFormdataBody(ctx context.Context, id int, body NotesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotesPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotesUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotesUpdate(ctx context.Context, id int, body NotesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotesUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotesUpdateWithFormdataBody(ctx context.Context, id int, body NotesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotesUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationsList(ctx context.Context, params *NotificationsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationsCreate(ctx context.Context, body NotificationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationsCreateWithFormdataBody(ctx context.Context, body NotificationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationsRetrieve(ctx context.Context, id int, params *NotificationsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationsRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationsPartialUpdate(ctx context.Context, id int, body NotificationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationsPartialUpdateWithFormdataBody(ctx context.Context, id int, body NotificationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationsUpdate(ctx context.Context, id int, body NotificationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationsUpdateWithFormdataBody(ctx context.Context, id int, body NotificationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationsDeletePreviewList(ctx context.Context, id int, params *NotificationsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationsDeletePreviewListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Oa3SchemaRetrieve(ctx context.Context, params *Oa3SchemaRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOa3SchemaRetrieveRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductApiScanConfigurationsList(ctx context.Context, params *ProductApiScanConfigurationsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductApiScanConfigurationsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductApiScanConfigurationsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductApiScanConfigurationsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductApiScanConfigurationsCreate(ctx context.Context, body ProductApiScanConfigurationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductApiScanConfigurationsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductApiScanConfigurationsCreateWithFormdataBody(ctx context.Context, body ProductApiScanConfigurationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductApiScanConfigurationsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductApiScanConfigurationsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductApiScanConfigurationsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductApiScanConfigurationsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductApiScanConfigurationsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductApiScanConfigurationsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductApiScanConfigurationsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductApiScanConfigurationsPartialUpdate(ctx context.Context, id int, body ProductApiScanConfigurationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductApiScanConfigurationsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductApiScanConfigurationsPartialUpdateWithFormdataBody(ctx context.Context, id int, body ProductApiScanConfigurationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductApiScanConfigurationsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductApiScanConfigurationsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductApiScanConfigurationsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductApiScanConfigurationsUpdate(ctx context.Context, id int, body ProductApiScanConfigurationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductApiScanConfigurationsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductApiScanConfigurationsUpdateWithFormdataBody(ctx context.Context, id int, body ProductApiScanConfigurationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductApiScanConfigurationsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductApiScanConfigurationsDeletePreviewList(ctx context.Context, id int, params *ProductApiScanConfigurationsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductApiScanConfigurationsDeletePreviewListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductGroupsList(ctx context.Context, params *ProductGroupsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductGroupsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductGroupsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductGroupsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductGroupsCreate(ctx context.Context, body ProductGroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductGroupsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductGroupsCreateWithFormdataBody(ctx context.Context, body ProductGroupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductGroupsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductGroupsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductGroupsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductGroupsRetrieve(ctx context.Context, id int, params *ProductGroupsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductGroupsRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductGroupsPartialUpdate(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductGroupsPartialUpdateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductGroupsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductGroupsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductGroupsUpdate(ctx context.Context, id int, body ProductGroupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductGroupsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductGroupsUpdateWithFormdataBody(ctx context.Context, id int, body ProductGroupsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductGroupsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductGroupsDeletePreviewList(ctx context.Context, id int, params *ProductGroupsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductGroupsDeletePreviewListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductMembersList(ctx context.Context, params *ProductMembersListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductMembersListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductMembersCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductMembersCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductMembersCreate(ctx context.Context, body ProductMembersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductMembersCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductMembersCreateWithFormdataBody(ctx context.Context, body ProductMembersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductMembersCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductMembersDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductMembersDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductMembersRetrieve(ctx context.Context, id int, params *ProductMembersRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductMembersRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductMembersPartialUpdate(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductMembersPartialUpdateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductMembersUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductMembersUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductMembersUpdate(ctx context.Context, id int, body ProductMembersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductMembersUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductMembersUpdateWithFormdataBody(ctx context.Context, id int, body ProductMembersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductMembersUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductMembersDeletePreviewList(ctx context.Context, id int, params *ProductMembersDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductMembersDeletePreviewListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypeGroupsList(ctx context.Context, params *ProductTypeGroupsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypeGroupsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypeGroupsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypeGroupsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypeGroupsCreate(ctx context.Context, body ProductTypeGroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypeGroupsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypeGroupsCreateWithFormdataBody(ctx context.Context, body ProductTypeGroupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypeGroupsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypeGroupsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypeGroupsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypeGroupsRetrieve(ctx context.Context, id int, params *ProductTypeGroupsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypeGroupsRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypeGroupsPartialUpdate(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypeGroupsPartialUpdateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypeGroupsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypeGroupsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypeGroupsUpdate(ctx context.Context, id int, body ProductTypeGroupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypeGroupsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypeGroupsUpdateWithFormdataBody(ctx context.Context, id int, body ProductTypeGroupsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypeGroupsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypeGroupsDeletePreviewList(ctx context.Context, id int, params *ProductTypeGroupsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypeGroupsDeletePreviewListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypeMembersList(ctx context.Context, params *ProductTypeMembersListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypeMembersListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypeMembersCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypeMembersCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypeMembersCreate(ctx context.Context, body ProductTypeMembersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypeMembersCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypeMembersCreateWithFormdataBody(ctx context.Context, body ProductTypeMembersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypeMembersCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypeMembersDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypeMembersDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypeMembersRetrieve(ctx context.Context, id int, params *ProductTypeMembersRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypeMembersRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypeMembersPartialUpdate(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypeMembersPartialUpdateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypeMembersUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypeMembersUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypeMembersUpdate(ctx context.Context, id int, body ProductTypeMembersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypeMembersUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypeMembersUpdateWithFormdataBody(ctx context.Context, id int, body ProductTypeMembersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypeMembersUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypeMembersDeletePreviewList(ctx context.Context, id int, params *ProductTypeMembersDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypeMembersDeletePreviewListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypesList(ctx context.Context, params *ProductTypesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypesCreate(ctx context.Context, body ProductTypesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypesCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypesCreateWithFormdataBody(ctx context.Context, body ProductTypesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypesCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypesDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypesRetrieve(ctx context.Context, id int, params *ProductTypesRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypesRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypesPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypesPartialUpdate(ctx context.Context, id int, body ProductTypesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypesPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypesPartialUpdateWithFormdataBody(ctx context.Context, id int, body ProductTypesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypesPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypesUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypesUpdate(ctx context.Context, id int, body ProductTypesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypesUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypesUpdateWithFormdataBody(ctx context.Context, id int, body ProductTypesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypesUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypesDeletePreviewList(ctx context.Context, id int, params *ProductTypesDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypesDeletePreviewListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypesGenerateReportCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypesGenerateReportCreateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypesGenerateReportCreate(ctx context.Context, id int, body ProductTypesGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypesGenerateReportCreateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductTypesGenerateReportCreateWithFormdataBody(ctx context.Context, id int, body ProductTypesGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductTypesGenerateReportCreateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductsList(ctx context.Context, params *ProductsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductsCreate(ctx context.Context, body ProductsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductsCreateWithFormdataBody(ctx context.Context, body ProductsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductsRetrieve(ctx context.Context, id int, params *ProductsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductsRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductsPartialUpdate(ctx context.Context, id int, body ProductsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductsPartialUpdateWithFormdataBody(ctx context.Context, id int, body ProductsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductsUpdate(ctx context.Context, id int, body ProductsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductsUpdateWithFormdataBody(ctx context.Context, id int, body ProductsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductsDeletePreviewList(ctx context.Context, id int, params *ProductsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductsDeletePreviewListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductsGenerateReportCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductsGenerateReportCreateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductsGenerateReportCreate(ctx context.Context, id int, body ProductsGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductsGenerateReportCreateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductsGenerateReportCreateWithFormdataBody(ctx context.Context, id int, body ProductsGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductsGenerateReportCreateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuestionnaireAnsweredQuestionnairesList(ctx context.Context, params *QuestionnaireAnsweredQuestionnairesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuestionnaireAnsweredQuestionnairesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuestionnaireAnsweredQuestionnairesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuestionnaireAnsweredQuestionnairesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuestionnaireAnswersList(ctx context.Context, params *QuestionnaireAnswersListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuestionnaireAnswersListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuestionnaireAnswersRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuestionnaireAnswersRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuestionnaireEngagementQuestionnairesList(ctx context.Context, params *QuestionnaireEngagementQuestionnairesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuestionnaireEngagementQuestionnairesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuestionnaireEngagementQuestionnairesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuestionnaireEngagementQuestionnairesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuestionnaireGeneralQuestionnairesList(ctx context.Context, params *QuestionnaireGeneralQuestionnairesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuestionnaireGeneralQuestionnairesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuestionnaireGeneralQuestionnairesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuestionnaireGeneralQuestionnairesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuestionnaireQuestionsList(ctx context.Context, params *QuestionnaireQuestionsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuestionnaireQuestionsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuestionnaireQuestionsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuestionnaireQuestionsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegulationsList(ctx context.Context, params *RegulationsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegulationsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegulationsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegulationsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegulationsCreate(ctx context.Context, body RegulationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegulationsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegulationsCreateWithFormdataBody(ctx context.Context, body RegulationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegulationsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegulationsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegulationsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegulationsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegulationsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegulationsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegulationsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegulationsPartialUpdate(ctx context.Context, id int, body RegulationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegulationsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegulationsPartialUpdateWithFormdataBody(ctx context.Context, id int, body RegulationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegulationsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegulationsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegulationsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegulationsUpdate(ctx context.Context, id int, body RegulationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegulationsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegulationsUpdateWithFormdataBody(ctx context.Context, id int, body RegulationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegulationsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegulationsDeletePreviewList(ctx context.Context, id int, params *RegulationsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegulationsDeletePreviewListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReimportScanCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReimportScanCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RiskAcceptanceList(ctx context.Context, params *RiskAcceptanceListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRiskAcceptanceListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RiskAcceptanceDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRiskAcceptanceDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RiskAcceptanceRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRiskAcceptanceRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RiskAcceptanceDeletePreviewList(ctx context.Context, id int, params *RiskAcceptanceDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRiskAcceptanceDeletePreviewListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RiskAcceptanceDownloadProofRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRiskAcceptanceDownloadProofRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RolesList(ctx context.Context, params *RolesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRolesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RolesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRolesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlaConfigurationsList(ctx context.Context, params *SlaConfigurationsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlaConfigurationsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlaConfigurationsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlaConfigurationsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlaConfigurationsCreate(ctx context.Context, body SlaConfigurationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlaConfigurationsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlaConfigurationsCreateWithFormdataBody(ctx context.Context, body SlaConfigurationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlaConfigurationsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlaConfigurationsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlaConfigurationsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlaConfigurationsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlaConfigurationsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlaConfigurationsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlaConfigurationsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlaConfigurationsPartialUpdate(ctx context.Context, id int, body SlaConfigurationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlaConfigurationsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlaConfigurationsPartialUpdateWithFormdataBody(ctx context.Context, id int, body SlaConfigurationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlaConfigurationsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlaConfigurationsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlaConfigurationsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlaConfigurationsUpdate(ctx context.Context, id int, body SlaConfigurationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlaConfigurationsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SlaConfigurationsUpdateWithFormdataBody(ctx context.Context, id int, body SlaConfigurationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSlaConfigurationsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeIssuesList(ctx context.Context, params *SonarqubeIssuesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeIssuesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeIssuesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeIssuesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeIssuesCreate(ctx context.Context, body SonarqubeIssuesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeIssuesCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeIssuesCreateWithFormdataBody(ctx context.Context, body SonarqubeIssuesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeIssuesCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeIssuesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeIssuesDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeIssuesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeIssuesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeIssuesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeIssuesPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeIssuesPartialUpdate(ctx context.Context, id int, body SonarqubeIssuesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeIssuesPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeIssuesPartialUpdateWithFormdataBody(ctx context.Context, id int, body SonarqubeIssuesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeIssuesPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeIssuesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeIssuesUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeIssuesUpdate(ctx context.Context, id int, body SonarqubeIssuesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeIssuesUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeIssuesUpdateWithFormdataBody(ctx context.Context, id int, body SonarqubeIssuesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeIssuesUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeIssuesDeletePreviewList(ctx context.Context, id int, params *SonarqubeIssuesDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeIssuesDeletePreviewListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeTransitionsList(ctx context.Context, params *SonarqubeTransitionsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeTransitionsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeTransitionsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeTransitionsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeTransitionsCreate(ctx context.Context, body SonarqubeTransitionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeTransitionsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeTransitionsCreateWithFormdataBody(ctx context.Context, body SonarqubeTransitionsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeTransitionsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeTransitionsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeTransitionsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeTransitionsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeTransitionsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeTransitionsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeTransitionsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeTransitionsPartialUpdate(ctx context.Context, id int, body SonarqubeTransitionsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeTransitionsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeTransitionsPartialUpdateWithFormdataBody(ctx context.Context, id int, body SonarqubeTransitionsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeTransitionsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeTransitionsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeTransitionsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeTransitionsUpdate(ctx context.Context, id int, body SonarqubeTransitionsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeTransitionsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeTransitionsUpdateWithFormdataBody(ctx context.Context, id int, body SonarqubeTransitionsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeTransitionsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SonarqubeTransitionsDeletePreviewList(ctx context.Context, id int, params *SonarqubeTransitionsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSonarqubeTransitionsDeletePreviewListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StubFindingsList(ctx context.Context, params *StubFindingsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStubFindingsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StubFindingsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStubFindingsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StubFindingsCreate(ctx context.Context, body StubFindingsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStubFindingsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StubFindingsCreateWithFormdataBody(ctx context.Context, body StubFindingsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStubFindingsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StubFindingsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStubFindingsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StubFindingsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStubFindingsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StubFindingsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStubFindingsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StubFindingsPartialUpdate(ctx context.Context, id int, body StubFindingsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStubFindingsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StubFindingsPartialUpdateWithFormdataBody(ctx context.Context, id int, body StubFindingsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStubFindingsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StubFindingsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStubFindingsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StubFindingsUpdate(ctx context.Context, id int, body StubFindingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStubFindingsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StubFindingsUpdateWithFormdataBody(ctx context.Context, id int, body StubFindingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStubFindingsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StubFindingsDeletePreviewList(ctx context.Context, id int, params *StubFindingsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStubFindingsDeletePreviewListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SystemSettingsList(ctx context.Context, params *SystemSettingsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSystemSettingsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SystemSettingsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSystemSettingsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SystemSettingsPartialUpdate(ctx context.Context, id int, body SystemSettingsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSystemSettingsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SystemSettingsPartialUpdateWithFormdataBody(ctx context.Context, id int, body SystemSettingsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSystemSettingsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SystemSettingsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSystemSettingsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SystemSettingsUpdate(ctx context.Context, id int, body SystemSettingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSystemSettingsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SystemSettingsUpdateWithFormdataBody(ctx context.Context, id int, body SystemSettingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSystemSettingsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TechnologiesList(ctx context.Context, params *TechnologiesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTechnologiesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TechnologiesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTechnologiesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TechnologiesCreate(ctx context.Context, body TechnologiesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTechnologiesCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TechnologiesCreateWithFormdataBody(ctx context.Context, body TechnologiesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTechnologiesCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TechnologiesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTechnologiesDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TechnologiesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTechnologiesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TechnologiesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTechnologiesPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TechnologiesPartialUpdate(ctx context.Context, id int, body TechnologiesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTechnologiesPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TechnologiesPartialUpdateWithFormdataBody(ctx context.Context, id int, body TechnologiesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTechnologiesPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TechnologiesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTechnologiesUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TechnologiesUpdate(ctx context.Context, id int, body TechnologiesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTechnologiesUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TechnologiesUpdateWithFormdataBody(ctx context.Context, id int, body TechnologiesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTechnologiesUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TechnologiesDeletePreviewList(ctx context.Context, id int, params *TechnologiesDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTechnologiesDeletePreviewListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestImportsList(ctx context.Context, params *TestImportsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestImportsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestImportsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestImportsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestImportsCreate(ctx context.Context, body TestImportsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestImportsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestImportsCreateWithFormdataBody(ctx context.Context, body TestImportsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestImportsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestImportsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestImportsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestImportsRetrieve(ctx context.Context, id int, params *TestImportsRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestImportsRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestImportsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestImportsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestImportsPartialUpdate(ctx context.Context, id int, body TestImportsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestImportsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestImportsPartialUpdateWithFormdataBody(ctx context.Context, id int, body TestImportsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestImportsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestImportsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestImportsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestImportsUpdate(ctx context.Context, id int, body TestImportsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestImportsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestImportsUpdateWithFormdataBody(ctx context.Context, id int, body TestImportsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestImportsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestImportsDeletePreviewList(ctx context.Context, id int, params *TestImportsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestImportsDeletePreviewListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestTypesList(ctx context.Context, params *TestTypesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestTypesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestTypesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestTypesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestTypesCreate(ctx context.Context, body TestTypesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestTypesCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestTypesCreateWithFormdataBody(ctx context.Context, body TestTypesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestTypesCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestTypesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestTypesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestTypesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestTypesPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestTypesPartialUpdate(ctx context.Context, id int, body TestTypesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestTypesPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestTypesPartialUpdateWithFormdataBody(ctx context.Context, id int, body TestTypesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestTypesPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestTypesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestTypesUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestTypesUpdate(ctx context.Context, id int, body TestTypesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestTypesUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestTypesUpdateWithFormdataBody(ctx context.Context, id int, body TestTypesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestTypesUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsList(ctx context.Context, params *TestsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsCreate(ctx context.Context, body TestsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsCreateWithFormdataBody(ctx context.Context, body TestsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsPartialUpdate(ctx context.Context, id int, body TestsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsPartialUpdateWithFormdataBody(ctx context.Context, id int, body TestsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsUpdate(ctx context.Context, id int, body TestsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsUpdateWithFormdataBody(ctx context.Context, id int, body TestsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsAcceptRisksCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsAcceptRisksCreateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsAcceptRisksCreate(ctx context.Context, id int, body TestsAcceptRisksCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsAcceptRisksCreateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsAcceptRisksCreateWithFormdataBody(ctx context.Context, id int, body TestsAcceptRisksCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsAcceptRisksCreateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsDeletePreviewList(ctx context.Context, id int, params *TestsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsDeletePreviewListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsFilesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsFilesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsFilesCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsFilesCreateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsFilesDownloadRetrieve(ctx context.Context, id int, fileId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsFilesDownloadRetrieveRequest(c.Server, id, fileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsGenerateReportCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsGenerateReportCreateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsGenerateReportCreate(ctx context.Context, id int, body TestsGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsGenerateReportCreateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsGenerateReportCreateWithFormdataBody(ctx context.Context, id int, body TestsGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsGenerateReportCreateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsNotesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsNotesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsNotesCreateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsNotesCreateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsNotesCreate(ctx context.Context, id int, body TestsNotesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsNotesCreateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestsNotesCreateWithFormdataBody(ctx context.Context, id int, body TestsNotesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestsNotesCreateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolConfigurationsList(ctx context.Context, params *ToolConfigurationsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolConfigurationsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolConfigurationsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolConfigurationsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolConfigurationsCreate(ctx context.Context, body ToolConfigurationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolConfigurationsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolConfigurationsCreateWithFormdataBody(ctx context.Context, body ToolConfigurationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolConfigurationsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolConfigurationsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolConfigurationsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolConfigurationsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolConfigurationsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolConfigurationsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolConfigurationsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolConfigurationsPartialUpdate(ctx context.Context, id int, body ToolConfigurationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolConfigurationsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolConfigurationsPartialUpdateWithFormdataBody(ctx context.Context, id int, body ToolConfigurationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolConfigurationsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolConfigurationsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolConfigurationsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolConfigurationsUpdate(ctx context.Context, id int, body ToolConfigurationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolConfigurationsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolConfigurationsUpdateWithFormdataBody(ctx context.Context, id int, body ToolConfigurationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolConfigurationsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolConfigurationsDeletePreviewList(ctx context.Context, id int, params *ToolConfigurationsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolConfigurationsDeletePreviewListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolProductSettingsList(ctx context.Context, params *ToolProductSettingsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolProductSettingsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolProductSettingsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolProductSettingsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolProductSettingsCreate(ctx context.Context, body ToolProductSettingsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolProductSettingsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolProductSettingsCreateWithFormdataBody(ctx context.Context, body ToolProductSettingsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolProductSettingsCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolProductSettingsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolProductSettingsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolProductSettingsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolProductSettingsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolProductSettingsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolProductSettingsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolProductSettingsPartialUpdate(ctx context.Context, id int, body ToolProductSettingsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolProductSettingsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolProductSettingsPartialUpdateWithFormdataBody(ctx context.Context, id int, body ToolProductSettingsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolProductSettingsPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolProductSettingsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolProductSettingsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolProductSettingsUpdate(ctx context.Context, id int, body ToolProductSettingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolProductSettingsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolProductSettingsUpdateWithFormdataBody(ctx context.Context, id int, body ToolProductSettingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolProductSettingsUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolProductSettingsDeletePreviewList(ctx context.Context, id int, params *ToolProductSettingsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolProductSettingsDeletePreviewListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolTypesList(ctx context.Context, params *ToolTypesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolTypesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolTypesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolTypesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolTypesCreate(ctx context.Context, body ToolTypesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolTypesCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolTypesCreateWithFormdataBody(ctx context.Context, body ToolTypesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolTypesCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolTypesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolTypesDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolTypesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolTypesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolTypesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolTypesPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolTypesPartialUpdate(ctx context.Context, id int, body ToolTypesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolTypesPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolTypesPartialUpdateWithFormdataBody(ctx context.Context, id int, body ToolTypesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolTypesPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolTypesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolTypesUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolTypesUpdate(ctx context.Context, id int, body ToolTypesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolTypesUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolTypesUpdateWithFormdataBody(ctx context.Context, id int, body ToolTypesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolTypesUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToolTypesDeletePreviewList(ctx context.Context, id int, params *ToolTypesDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToolTypesDeletePreviewListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserContactInfosList(ctx context.Context, params *UserContactInfosListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserContactInfosListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserContactInfosCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserContactInfosCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserContactInfosCreate(ctx context.Context, body UserContactInfosCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserContactInfosCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserContactInfosCreateWithFormdataBody(ctx context.Context, body UserContactInfosCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserContactInfosCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserContactInfosDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserContactInfosDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserContactInfosRetrieve(ctx context.Context, id int, params *UserContactInfosRetrieveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserContactInfosRetrieveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserContactInfosPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserContactInfosPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserContactInfosPartialUpdate(ctx context.Context, id int, body UserContactInfosPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserContactInfosPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserContactInfosPartialUpdateWithFormdataBody(ctx context.Context, id int, body UserContactInfosPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserContactInfosPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserContactInfosUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserContactInfosUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserContactInfosUpdate(ctx context.Context, id int, body UserContactInfosUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserContactInfosUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserContactInfosUpdateWithFormdataBody(ctx context.Context, id int, body UserContactInfosUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserContactInfosUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserContactInfosDeletePreviewList(ctx context.Context, id int, params *UserContactInfosDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserContactInfosDeletePreviewListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserProfileRetrieve(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserProfileRetrieveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersList(ctx context.Context, params *UsersListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersCreate(ctx context.Context, body UsersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersCreateWithFormdataBody(ctx context.Context, body UsersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersCreateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersPartialUpdate(ctx context.Context, id int, body UsersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersPartialUpdateWithFormdataBody(ctx context.Context, id int, body UsersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersPartialUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUpdate(ctx context.Context, id int, body UsersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUpdateWithFormdataBody(ctx context.Context, id int, body UsersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUpdateRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersDeletePreviewList(ctx context.Context, id int, params *UsersDeletePreviewListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersDeletePreviewListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewApiTokenAuthCreateRequest calls the generic ApiTokenAuthCreate builder with application/json body
func NewApiTokenAuthCreateRequest(server string, body ApiTokenAuthCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApiTokenAuthCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewApiTokenAuthCreateRequestWithFormdataBody calls the generic ApiTokenAuthCreate builder with application/x-www-form-urlencoded body
func NewApiTokenAuthCreateRequestWithFormdataBody(server string, body ApiTokenAuthCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewApiTokenAuthCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewApiTokenAuthCreateRequestWithBody generates requests for ApiTokenAuthCreate with any type of body
func NewApiTokenAuthCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/api-token-auth/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewConfigurationPermissionsListRequest generates requests for ConfigurationPermissionsList
func NewConfigurationPermissionsListRequest(server string, params *ConfigurationPermissionsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/configuration_permissions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Codename != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "codename", runtime.ParamLocationQuery, *params.Codename); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewConfigurationPermissionsRetrieveRequest generates requests for ConfigurationPermissionsRetrieve
func NewConfigurationPermissionsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/configuration_permissions/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCredentialMappingsListRequest generates requests for CredentialMappingsList
func NewCredentialMappingsListRequest(server string, params *CredentialMappingsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/credential_mappings/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CredId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cred_id", runtime.ParamLocationQuery, *params.CredId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Engagement != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "engagement", runtime.ParamLocationQuery, *params.Engagement); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Finding != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "finding", runtime.ParamLocationQuery, *params.Finding); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsAuthnProvider != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_authn_provider", runtime.ParamLocationQuery, *params.IsAuthnProvider); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Product != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product", runtime.ParamLocationQuery, *params.Product); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Test != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "test", runtime.ParamLocationQuery, *params.Test); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Url != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, *params.Url); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCredentialMappingsCreateRequest calls the generic CredentialMappingsCreate builder with application/json body
func NewCredentialMappingsCreateRequest(server string, body CredentialMappingsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCredentialMappingsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewCredentialMappingsCreateRequestWithFormdataBody calls the generic CredentialMappingsCreate builder with application/x-www-form-urlencoded body
func NewCredentialMappingsCreateRequestWithFormdataBody(server string, body CredentialMappingsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewCredentialMappingsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewCredentialMappingsCreateRequestWithBody generates requests for CredentialMappingsCreate with any type of body
func NewCredentialMappingsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/credential_mappings/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCredentialMappingsDestroyRequest generates requests for CredentialMappingsDestroy
func NewCredentialMappingsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/credential_mappings/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCredentialMappingsRetrieveRequest generates requests for CredentialMappingsRetrieve
func NewCredentialMappingsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/credential_mappings/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCredentialMappingsPartialUpdateRequest calls the generic CredentialMappingsPartialUpdate builder with application/json body
func NewCredentialMappingsPartialUpdateRequest(server string, id int, body CredentialMappingsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCredentialMappingsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCredentialMappingsPartialUpdateRequestWithFormdataBody calls the generic CredentialMappingsPartialUpdate builder with application/x-www-form-urlencoded body
func NewCredentialMappingsPartialUpdateRequestWithFormdataBody(server string, id int, body CredentialMappingsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewCredentialMappingsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewCredentialMappingsPartialUpdateRequestWithBody generates requests for CredentialMappingsPartialUpdate with any type of body
func NewCredentialMappingsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/credential_mappings/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCredentialMappingsUpdateRequest calls the generic CredentialMappingsUpdate builder with application/json body
func NewCredentialMappingsUpdateRequest(server string, id int, body CredentialMappingsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCredentialMappingsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCredentialMappingsUpdateRequestWithFormdataBody calls the generic CredentialMappingsUpdate builder with application/x-www-form-urlencoded body
func NewCredentialMappingsUpdateRequestWithFormdataBody(server string, id int, body CredentialMappingsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewCredentialMappingsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewCredentialMappingsUpdateRequestWithBody generates requests for CredentialMappingsUpdate with any type of body
func NewCredentialMappingsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/credential_mappings/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCredentialMappingsDeletePreviewListRequest generates requests for CredentialMappingsDeletePreviewList
func NewCredentialMappingsDeletePreviewListRequest(server string, id int, params *CredentialMappingsDeletePreviewListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/credential_mappings/%s/delete_preview/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCredentialsListRequest generates requests for CredentialsList
func NewCredentialsListRequest(server string, params *CredentialsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/credentials/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCredentialsCreateRequest calls the generic CredentialsCreate builder with application/json body
func NewCredentialsCreateRequest(server string, body CredentialsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCredentialsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewCredentialsCreateRequestWithFormdataBody calls the generic CredentialsCreate builder with application/x-www-form-urlencoded body
func NewCredentialsCreateRequestWithFormdataBody(server string, body CredentialsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewCredentialsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewCredentialsCreateRequestWithBody generates requests for CredentialsCreate with any type of body
func NewCredentialsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/credentials/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCredentialsDestroyRequest generates requests for CredentialsDestroy
func NewCredentialsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/credentials/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCredentialsRetrieveRequest generates requests for CredentialsRetrieve
func NewCredentialsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/credentials/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCredentialsPartialUpdateRequest calls the generic CredentialsPartialUpdate builder with application/json body
func NewCredentialsPartialUpdateRequest(server string, id int, body CredentialsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCredentialsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCredentialsPartialUpdateRequestWithFormdataBody calls the generic CredentialsPartialUpdate builder with application/x-www-form-urlencoded body
func NewCredentialsPartialUpdateRequestWithFormdataBody(server string, id int, body CredentialsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewCredentialsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewCredentialsPartialUpdateRequestWithBody generates requests for CredentialsPartialUpdate with any type of body
func NewCredentialsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/credentials/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCredentialsUpdateRequest calls the generic CredentialsUpdate builder with application/json body
func NewCredentialsUpdateRequest(server string, id int, body CredentialsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCredentialsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCredentialsUpdateRequestWithFormdataBody calls the generic CredentialsUpdate builder with application/x-www-form-urlencoded body
func NewCredentialsUpdateRequestWithFormdataBody(server string, id int, body CredentialsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewCredentialsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewCredentialsUpdateRequestWithBody generates requests for CredentialsUpdate with any type of body
func NewCredentialsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/credentials/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCredentialsDeletePreviewListRequest generates requests for CredentialsDeletePreviewList
func NewCredentialsDeletePreviewListRequest(server string, id int, params *CredentialsDeletePreviewListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/credentials/%s/delete_preview/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDevelopmentEnvironmentsListRequest generates requests for DevelopmentEnvironmentsList
func NewDevelopmentEnvironmentsListRequest(server string, params *DevelopmentEnvironmentsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/development_environments/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDevelopmentEnvironmentsCreateRequest calls the generic DevelopmentEnvironmentsCreate builder with application/json body
func NewDevelopmentEnvironmentsCreateRequest(server string, body DevelopmentEnvironmentsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDevelopmentEnvironmentsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewDevelopmentEnvironmentsCreateRequestWithFormdataBody calls the generic DevelopmentEnvironmentsCreate builder with application/x-www-form-urlencoded body
func NewDevelopmentEnvironmentsCreateRequestWithFormdataBody(server string, body DevelopmentEnvironmentsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDevelopmentEnvironmentsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewDevelopmentEnvironmentsCreateRequestWithBody generates requests for DevelopmentEnvironmentsCreate with any type of body
func NewDevelopmentEnvironmentsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/development_environments/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDevelopmentEnvironmentsDestroyRequest generates requests for DevelopmentEnvironmentsDestroy
func NewDevelopmentEnvironmentsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/development_environments/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDevelopmentEnvironmentsRetrieveRequest generates requests for DevelopmentEnvironmentsRetrieve
func NewDevelopmentEnvironmentsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/development_environments/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDevelopmentEnvironmentsPartialUpdateRequest calls the generic DevelopmentEnvironmentsPartialUpdate builder with application/json body
func NewDevelopmentEnvironmentsPartialUpdateRequest(server string, id int, body DevelopmentEnvironmentsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDevelopmentEnvironmentsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDevelopmentEnvironmentsPartialUpdateRequestWithFormdataBody calls the generic DevelopmentEnvironmentsPartialUpdate builder with application/x-www-form-urlencoded body
func NewDevelopmentEnvironmentsPartialUpdateRequestWithFormdataBody(server string, id int, body DevelopmentEnvironmentsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDevelopmentEnvironmentsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewDevelopmentEnvironmentsPartialUpdateRequestWithBody generates requests for DevelopmentEnvironmentsPartialUpdate with any type of body
func NewDevelopmentEnvironmentsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/development_environments/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDevelopmentEnvironmentsUpdateRequest calls the generic DevelopmentEnvironmentsUpdate builder with application/json body
func NewDevelopmentEnvironmentsUpdateRequest(server string, id int, body DevelopmentEnvironmentsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDevelopmentEnvironmentsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDevelopmentEnvironmentsUpdateRequestWithFormdataBody calls the generic DevelopmentEnvironmentsUpdate builder with application/x-www-form-urlencoded body
func NewDevelopmentEnvironmentsUpdateRequestWithFormdataBody(server string, id int, body DevelopmentEnvironmentsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDevelopmentEnvironmentsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewDevelopmentEnvironmentsUpdateRequestWithBody generates requests for DevelopmentEnvironmentsUpdate with any type of body
func NewDevelopmentEnvironmentsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/development_environments/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDevelopmentEnvironmentsDeletePreviewListRequest generates requests for DevelopmentEnvironmentsDeletePreviewList
func NewDevelopmentEnvironmentsDeletePreviewListRequest(server string, id int, params *DevelopmentEnvironmentsDeletePreviewListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/development_environments/%s/delete_preview/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDojoGroupMembersListRequest generates requests for DojoGroupMembersList
func NewDojoGroupMembersListRequest(server string, params *DojoGroupMembersListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/dojo_group_members/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.GroupId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "group_id", runtime.ParamLocationQuery, *params.GroupId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_id", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDojoGroupMembersCreateRequest calls the generic DojoGroupMembersCreate builder with application/json body
func NewDojoGroupMembersCreateRequest(server string, body DojoGroupMembersCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDojoGroupMembersCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewDojoGroupMembersCreateRequestWithFormdataBody calls the generic DojoGroupMembersCreate builder with application/x-www-form-urlencoded body
func NewDojoGroupMembersCreateRequestWithFormdataBody(server string, body DojoGroupMembersCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDojoGroupMembersCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewDojoGroupMembersCreateRequestWithBody generates requests for DojoGroupMembersCreate with any type of body
func NewDojoGroupMembersCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/dojo_group_members/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDojoGroupMembersDestroyRequest generates requests for DojoGroupMembersDestroy
func NewDojoGroupMembersDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/dojo_group_members/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDojoGroupMembersRetrieveRequest generates requests for DojoGroupMembersRetrieve
func NewDojoGroupMembersRetrieveRequest(server string, id int, params *DojoGroupMembersRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/dojo_group_members/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDojoGroupMembersPartialUpdateRequest calls the generic DojoGroupMembersPartialUpdate builder with application/json body
func NewDojoGroupMembersPartialUpdateRequest(server string, id int, body DojoGroupMembersPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDojoGroupMembersPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDojoGroupMembersPartialUpdateRequestWithFormdataBody calls the generic DojoGroupMembersPartialUpdate builder with application/x-www-form-urlencoded body
func NewDojoGroupMembersPartialUpdateRequestWithFormdataBody(server string, id int, body DojoGroupMembersPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDojoGroupMembersPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewDojoGroupMembersPartialUpdateRequestWithBody generates requests for DojoGroupMembersPartialUpdate with any type of body
func NewDojoGroupMembersPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/dojo_group_members/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDojoGroupMembersUpdateRequest calls the generic DojoGroupMembersUpdate builder with application/json body
func NewDojoGroupMembersUpdateRequest(server string, id int, body DojoGroupMembersUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDojoGroupMembersUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDojoGroupMembersUpdateRequestWithFormdataBody calls the generic DojoGroupMembersUpdate builder with application/x-www-form-urlencoded body
func NewDojoGroupMembersUpdateRequestWithFormdataBody(server string, id int, body DojoGroupMembersUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDojoGroupMembersUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewDojoGroupMembersUpdateRequestWithBody generates requests for DojoGroupMembersUpdate with any type of body
func NewDojoGroupMembersUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/dojo_group_members/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDojoGroupMembersDeletePreviewListRequest generates requests for DojoGroupMembersDeletePreviewList
func NewDojoGroupMembersDeletePreviewListRequest(server string, id int, params *DojoGroupMembersDeletePreviewListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/dojo_group_members/%s/delete_preview/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDojoGroupsListRequest generates requests for DojoGroupsList
func NewDojoGroupsListRequest(server string, params *DojoGroupsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/dojo_groups/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SocialProvider != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "social_provider", runtime.ParamLocationQuery, *params.SocialProvider); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDojoGroupsCreateRequest calls the generic DojoGroupsCreate builder with application/json body
func NewDojoGroupsCreateRequest(server string, body DojoGroupsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDojoGroupsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewDojoGroupsCreateRequestWithFormdataBody calls the generic DojoGroupsCreate builder with application/x-www-form-urlencoded body
func NewDojoGroupsCreateRequestWithFormdataBody(server string, body DojoGroupsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDojoGroupsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewDojoGroupsCreateRequestWithBody generates requests for DojoGroupsCreate with any type of body
func NewDojoGroupsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/dojo_groups/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDojoGroupsDestroyRequest generates requests for DojoGroupsDestroy
func NewDojoGroupsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/dojo_groups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDojoGroupsRetrieveRequest generates requests for DojoGroupsRetrieve
func NewDojoGroupsRetrieveRequest(server string, id int, params *DojoGroupsRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/dojo_groups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDojoGroupsPartialUpdateRequest calls the generic DojoGroupsPartialUpdate builder with application/json body
func NewDojoGroupsPartialUpdateRequest(server string, id int, body DojoGroupsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDojoGroupsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDojoGroupsPartialUpdateRequestWithFormdataBody calls the generic DojoGroupsPartialUpdate builder with application/x-www-form-urlencoded body
func NewDojoGroupsPartialUpdateRequestWithFormdataBody(server string, id int, body DojoGroupsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDojoGroupsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewDojoGroupsPartialUpdateRequestWithBody generates requests for DojoGroupsPartialUpdate with any type of body
func NewDojoGroupsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/dojo_groups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDojoGroupsUpdateRequest calls the generic DojoGroupsUpdate builder with application/json body
func NewDojoGroupsUpdateRequest(server string, id int, body DojoGroupsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDojoGroupsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDojoGroupsUpdateRequestWithFormdataBody calls the generic DojoGroupsUpdate builder with application/x-www-form-urlencoded body
func NewDojoGroupsUpdateRequestWithFormdataBody(server string, id int, body DojoGroupsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewDojoGroupsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewDojoGroupsUpdateRequestWithBody generates requests for DojoGroupsUpdate with any type of body
func NewDojoGroupsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/dojo_groups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDojoGroupsDeletePreviewListRequest generates requests for DojoGroupsDeletePreviewList
func NewDojoGroupsDeletePreviewListRequest(server string, id int, params *DojoGroupsDeletePreviewListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/dojo_groups/%s/delete_preview/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEndpointMetaImportCreateRequestWithBody generates requests for EndpointMetaImportCreate with any type of body
func NewEndpointMetaImportCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/endpoint_meta_import/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEndpointStatusListRequest generates requests for EndpointStatusList
func NewEndpointStatusListRequest(server string, params *EndpointStatusListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/endpoint_status/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Endpoint != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endpoint", runtime.ParamLocationQuery, *params.Endpoint); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FalsePositive != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "false_positive", runtime.ParamLocationQuery, *params.FalsePositive); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Finding != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "finding", runtime.ParamLocationQuery, *params.Finding); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Mitigated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mitigated", runtime.ParamLocationQuery, *params.Mitigated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MitigatedBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mitigated_by", runtime.ParamLocationQuery, *params.MitigatedBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OutOfScope != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "out_of_scope", runtime.ParamLocationQuery, *params.OutOfScope); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RiskAccepted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "risk_accepted", runtime.ParamLocationQuery, *params.RiskAccepted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEndpointStatusCreateRequest calls the generic EndpointStatusCreate builder with application/json body
func NewEndpointStatusCreateRequest(server string, body EndpointStatusCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEndpointStatusCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewEndpointStatusCreateRequestWithFormdataBody calls the generic EndpointStatusCreate builder with application/x-www-form-urlencoded body
func NewEndpointStatusCreateRequestWithFormdataBody(server string, body EndpointStatusCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewEndpointStatusCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewEndpointStatusCreateRequestWithBody generates requests for EndpointStatusCreate with any type of body
func NewEndpointStatusCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/endpoint_status/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEndpointStatusDestroyRequest generates requests for EndpointStatusDestroy
func NewEndpointStatusDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/endpoint_status/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEndpointStatusRetrieveRequest generates requests for EndpointStatusRetrieve
func NewEndpointStatusRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/endpoint_status/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEndpointStatusPartialUpdateRequest calls the generic EndpointStatusPartialUpdate builder with application/json body
func NewEndpointStatusPartialUpdateRequest(server string, id int, body EndpointStatusPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEndpointStatusPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewEndpointStatusPartialUpdateRequestWithFormdataBody calls the generic EndpointStatusPartialUpdate builder with application/x-www-form-urlencoded body
func NewEndpointStatusPartialUpdateRequestWithFormdataBody(server string, id int, body EndpointStatusPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewEndpointStatusPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewEndpointStatusPartialUpdateRequestWithBody generates requests for EndpointStatusPartialUpdate with any type of body
func NewEndpointStatusPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/endpoint_status/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEndpointStatusUpdateRequest calls the generic EndpointStatusUpdate builder with application/json body
func NewEndpointStatusUpdateRequest(server string, id int, body EndpointStatusUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEndpointStatusUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewEndpointStatusUpdateRequestWithFormdataBody calls the generic EndpointStatusUpdate builder with application/x-www-form-urlencoded body
func NewEndpointStatusUpdateRequestWithFormdataBody(server string, id int, body EndpointStatusUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewEndpointStatusUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewEndpointStatusUpdateRequestWithBody generates requests for EndpointStatusUpdate with any type of body
func NewEndpointStatusUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/endpoint_status/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEndpointStatusDeletePreviewListRequest generates requests for EndpointStatusDeletePreviewList
func NewEndpointStatusDeletePreviewListRequest(server string, id int, params *EndpointStatusDeletePreviewListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/endpoint_status/%s/delete_preview/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEndpointsListRequest generates requests for EndpointsList
func NewEndpointsListRequest(server string, params *EndpointsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/endpoints/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fragment != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fragment", runtime.ParamLocationQuery, *params.Fragment); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Host != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "host", runtime.ParamLocationQuery, *params.Host); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotTag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_tag", runtime.ParamLocationQuery, *params.NotTag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_tags", runtime.ParamLocationQuery, *params.NotTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.O != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "o", runtime.ParamLocationQuery, *params.O); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Path != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, *params.Path); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Port != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "port", runtime.ParamLocationQuery, *params.Port); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Product != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product", runtime.ParamLocationQuery, *params.Product); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Protocol != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "protocol", runtime.ParamLocationQuery, *params.Protocol); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Userinfo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userinfo", runtime.ParamLocationQuery, *params.Userinfo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEndpointsCreateRequest calls the generic EndpointsCreate builder with application/json body
func NewEndpointsCreateRequest(server string, body EndpointsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEndpointsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewEndpointsCreateRequestWithFormdataBody calls the generic EndpointsCreate builder with application/x-www-form-urlencoded body
func NewEndpointsCreateRequestWithFormdataBody(server string, body EndpointsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewEndpointsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewEndpointsCreateRequestWithBody generates requests for EndpointsCreate with any type of body
func NewEndpointsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/endpoints/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEndpointsDestroyRequest generates requests for EndpointsDestroy
func NewEndpointsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/endpoints/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEndpointsRetrieveRequest generates requests for EndpointsRetrieve
func NewEndpointsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/endpoints/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEndpointsPartialUpdateRequest calls the generic EndpointsPartialUpdate builder with application/json body
func NewEndpointsPartialUpdateRequest(server string, id int, body EndpointsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEndpointsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewEndpointsPartialUpdateRequestWithFormdataBody calls the generic EndpointsPartialUpdate builder with application/x-www-form-urlencoded body
func NewEndpointsPartialUpdateRequestWithFormdataBody(server string, id int, body EndpointsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewEndpointsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewEndpointsPartialUpdateRequestWithBody generates requests for EndpointsPartialUpdate with any type of body
func NewEndpointsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/endpoints/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEndpointsUpdateRequest calls the generic EndpointsUpdate builder with application/json body
func NewEndpointsUpdateRequest(server string, id int, body EndpointsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEndpointsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewEndpointsUpdateRequestWithFormdataBody calls the generic EndpointsUpdate builder with application/x-www-form-urlencoded body
func NewEndpointsUpdateRequestWithFormdataBody(server string, id int, body EndpointsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewEndpointsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewEndpointsUpdateRequestWithBody generates requests for EndpointsUpdate with any type of body
func NewEndpointsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/endpoints/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEndpointsDeletePreviewListRequest generates requests for EndpointsDeletePreviewList
func NewEndpointsDeletePreviewListRequest(server string, id int, params *EndpointsDeletePreviewListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/endpoints/%s/delete_preview/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEndpointsGenerateReportCreateRequest calls the generic EndpointsGenerateReportCreate builder with application/json body
func NewEndpointsGenerateReportCreateRequest(server string, id int, body EndpointsGenerateReportCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEndpointsGenerateReportCreateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewEndpointsGenerateReportCreateRequestWithFormdataBody calls the generic EndpointsGenerateReportCreate builder with application/x-www-form-urlencoded body
func NewEndpointsGenerateReportCreateRequestWithFormdataBody(server string, id int, body EndpointsGenerateReportCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewEndpointsGenerateReportCreateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewEndpointsGenerateReportCreateRequestWithBody generates requests for EndpointsGenerateReportCreate with any type of body
func NewEndpointsGenerateReportCreateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/endpoints/%s/generate_report/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEngagementPresetsListRequest generates requests for EngagementPresetsList
func NewEngagementPresetsListRequest(server string, params *EngagementPresetsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/engagement_presets/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Product != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product", runtime.ParamLocationQuery, *params.Product); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Title != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "title", runtime.ParamLocationQuery, *params.Title); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEngagementPresetsCreateRequest calls the generic EngagementPresetsCreate builder with application/json body
func NewEngagementPresetsCreateRequest(server string, body EngagementPresetsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEngagementPresetsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewEngagementPresetsCreateRequestWithFormdataBody calls the generic EngagementPresetsCreate builder with application/x-www-form-urlencoded body
func NewEngagementPresetsCreateRequestWithFormdataBody(server string, body EngagementPresetsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewEngagementPresetsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewEngagementPresetsCreateRequestWithBody generates requests for EngagementPresetsCreate with any type of body
func NewEngagementPresetsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/engagement_presets/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEngagementPresetsDestroyRequest generates requests for EngagementPresetsDestroy
func NewEngagementPresetsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/engagement_presets/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEngagementPresetsRetrieveRequest generates requests for EngagementPresetsRetrieve
func NewEngagementPresetsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/engagement_presets/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEngagementPresetsPartialUpdateRequest calls the generic EngagementPresetsPartialUpdate builder with application/json body
func NewEngagementPresetsPartialUpdateRequest(server string, id int, body EngagementPresetsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEngagementPresetsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewEngagementPresetsPartialUpdateRequestWithFormdataBody calls the generic EngagementPresetsPartialUpdate builder with application/x-www-form-urlencoded body
func NewEngagementPresetsPartialUpdateRequestWithFormdataBody(server string, id int, body EngagementPresetsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewEngagementPresetsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewEngagementPresetsPartialUpdateRequestWithBody generates requests for EngagementPresetsPartialUpdate with any type of body
func NewEngagementPresetsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/engagement_presets/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEngagementPresetsUpdateRequest calls the generic EngagementPresetsUpdate builder with application/json body
func NewEngagementPresetsUpdateRequest(server string, id int, body EngagementPresetsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEngagementPresetsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewEngagementPresetsUpdateRequestWithFormdataBody calls the generic EngagementPresetsUpdate builder with application/x-www-form-urlencoded body
func NewEngagementPresetsUpdateRequestWithFormdataBody(server string, id int, body EngagementPresetsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewEngagementPresetsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewEngagementPresetsUpdateRequestWithBody generates requests for EngagementPresetsUpdate with any type of body
func NewEngagementPresetsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/engagement_presets/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEngagementPresetsDeletePreviewListRequest generates requests for EngagementPresetsDeletePreviewList
func NewEngagementPresetsDeletePreviewListRequest(server string, id int, params *EngagementPresetsDeletePreviewListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/engagement_presets/%s/delete_preview/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEngagementsListRequest generates requests for EngagementsList
func NewEngagementsListRequest(server string, params *EngagementsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/engagements/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Active != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "active", runtime.ParamLocationQuery, *params.Active); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApiTest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api_test", runtime.ParamLocationQuery, *params.ApiTest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotProductTagsName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_product__tags__name", runtime.ParamLocationQuery, *params.NotProductTagsName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotTag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_tag", runtime.ParamLocationQuery, *params.NotTag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_tags", runtime.ParamLocationQuery, *params.NotTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.O != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "o", runtime.ParamLocationQuery, *params.O); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PenTest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pen_test", runtime.ParamLocationQuery, *params.PenTest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Product != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product", runtime.ParamLocationQuery, *params.Product); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProductProdType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "product__prod_type", runtime.ParamLocationQuery, *params.ProductProdType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProductTagsName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "product__tags__name", runtime.ParamLocationQuery, *params.ProductTagsName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReportType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "report_type", runtime.ParamLocationQuery, *params.ReportType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Requester != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "requester", runtime.ParamLocationQuery, *params.Requester); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TargetEnd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "target_end", runtime.ParamLocationQuery, *params.TargetEnd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TargetStart != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "target_start", runtime.ParamLocationQuery, *params.TargetStart); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ThreatModel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "threat_model", runtime.ParamLocationQuery, *params.ThreatModel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Updated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated", runtime.ParamLocationQuery, *params.Updated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEngagementsCreateRequest calls the generic EngagementsCreate builder with application/json body
func NewEngagementsCreateRequest(server string, body EngagementsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEngagementsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewEngagementsCreateRequestWithFormdataBody calls the generic EngagementsCreate builder with application/x-www-form-urlencoded body
func NewEngagementsCreateRequestWithFormdataBody(server string, body EngagementsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewEngagementsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewEngagementsCreateRequestWithBody generates requests for EngagementsCreate with any type of body
func NewEngagementsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/engagements/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEngagementsDestroyRequest generates requests for EngagementsDestroy
func NewEngagementsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/engagements/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEngagementsRetrieveRequest generates requests for EngagementsRetrieve
func NewEngagementsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/engagements/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEngagementsPartialUpdateRequest calls the generic EngagementsPartialUpdate builder with application/json body
func NewEngagementsPartialUpdateRequest(server string, id int, body EngagementsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEngagementsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewEngagementsPartialUpdateRequestWithFormdataBody calls the generic EngagementsPartialUpdate builder with application/x-www-form-urlencoded body
func NewEngagementsPartialUpdateRequestWithFormdataBody(server string, id int, body EngagementsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewEngagementsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewEngagementsPartialUpdateRequestWithBody generates requests for EngagementsPartialUpdate with any type of body
func NewEngagementsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/engagements/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEngagementsUpdateRequest calls the generic EngagementsUpdate builder with application/json body
func NewEngagementsUpdateRequest(server string, id int, body EngagementsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEngagementsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewEngagementsUpdateRequestWithFormdataBody calls the generic EngagementsUpdate builder with application/x-www-form-urlencoded body
func NewEngagementsUpdateRequestWithFormdataBody(server string, id int, body EngagementsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewEngagementsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewEngagementsUpdateRequestWithBody generates requests for EngagementsUpdate with any type of body
func NewEngagementsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/engagements/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEngagementsAcceptRisksCreateRequest calls the generic EngagementsAcceptRisksCreate builder with application/json body
func NewEngagementsAcceptRisksCreateRequest(server string, id int, body EngagementsAcceptRisksCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEngagementsAcceptRisksCreateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewEngagementsAcceptRisksCreateRequestWithFormdataBody calls the generic EngagementsAcceptRisksCreate builder with application/x-www-form-urlencoded body
func NewEngagementsAcceptRisksCreateRequestWithFormdataBody(server string, id int, body EngagementsAcceptRisksCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewEngagementsAcceptRisksCreateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewEngagementsAcceptRisksCreateRequestWithBody generates requests for EngagementsAcceptRisksCreate with any type of body
func NewEngagementsAcceptRisksCreateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/engagements/%s/accept_risks/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEngagementsCloseCreateRequest generates requests for EngagementsCloseCreate
func NewEngagementsCloseCreateRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/engagements/%s/close/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEngagementsCompleteChecklistRetrieveRequest generates requests for EngagementsCompleteChecklistRetrieve
func NewEngagementsCompleteChecklistRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/engagements/%s/complete_checklist/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEngagementsCompleteChecklistCreateRequest calls the generic EngagementsCompleteChecklistCreate builder with application/json body
func NewEngagementsCompleteChecklistCreateRequest(server string, id int, body EngagementsCompleteChecklistCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEngagementsCompleteChecklistCreateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewEngagementsCompleteChecklistCreateRequestWithFormdataBody calls the generic EngagementsCompleteChecklistCreate builder with application/x-www-form-urlencoded body
func NewEngagementsCompleteChecklistCreateRequestWithFormdataBody(server string, id int, body EngagementsCompleteChecklistCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewEngagementsCompleteChecklistCreateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewEngagementsCompleteChecklistCreateRequestWithBody generates requests for EngagementsCompleteChecklistCreate with any type of body
func NewEngagementsCompleteChecklistCreateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/engagements/%s/complete_checklist/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEngagementsDeletePreviewListRequest generates requests for EngagementsDeletePreviewList
func NewEngagementsDeletePreviewListRequest(server string, id int, params *EngagementsDeletePreviewListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/engagements/%s/delete_preview/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEngagementsFilesRetrieveRequest generates requests for EngagementsFilesRetrieve
func NewEngagementsFilesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/engagements/%s/files/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEngagementsFilesCreateRequestWithBody generates requests for EngagementsFilesCreate with any type of body
func NewEngagementsFilesCreateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/engagements/%s/files/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEngagementsFilesDownloadRetrieveRequest generates requests for EngagementsFilesDownloadRetrieve
func NewEngagementsFilesDownloadRetrieveRequest(server string, id int, fileId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "file_id", runtime.ParamLocationPath, fileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/engagements/%s/files/download/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEngagementsGenerateReportCreateRequest calls the generic EngagementsGenerateReportCreate builder with application/json body
func NewEngagementsGenerateReportCreateRequest(server string, id int, body EngagementsGenerateReportCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEngagementsGenerateReportCreateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewEngagementsGenerateReportCreateRequestWithFormdataBody calls the generic EngagementsGenerateReportCreate builder with application/x-www-form-urlencoded body
func NewEngagementsGenerateReportCreateRequestWithFormdataBody(server string, id int, body EngagementsGenerateReportCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewEngagementsGenerateReportCreateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewEngagementsGenerateReportCreateRequestWithBody generates requests for EngagementsGenerateReportCreate with any type of body
func NewEngagementsGenerateReportCreateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/engagements/%s/generate_report/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEngagementsNotesRetrieveRequest generates requests for EngagementsNotesRetrieve
func NewEngagementsNotesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/engagements/%s/notes/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEngagementsNotesCreateRequest calls the generic EngagementsNotesCreate builder with application/json body
func NewEngagementsNotesCreateRequest(server string, id int, body EngagementsNotesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEngagementsNotesCreateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewEngagementsNotesCreateRequestWithFormdataBody calls the generic EngagementsNotesCreate builder with application/x-www-form-urlencoded body
func NewEngagementsNotesCreateRequestWithFormdataBody(server string, id int, body EngagementsNotesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewEngagementsNotesCreateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewEngagementsNotesCreateRequestWithBody generates requests for EngagementsNotesCreate with any type of body
func NewEngagementsNotesCreateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/engagements/%s/notes/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEngagementsReopenCreateRequest generates requests for EngagementsReopenCreate
func NewEngagementsReopenCreateRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/engagements/%s/reopen/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindingTemplatesListRequest generates requests for FindingTemplatesList
func NewFindingTemplatesListRequest(server string, params *FindingTemplatesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/finding_templates/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cwe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cwe", runtime.ParamLocationQuery, *params.Cwe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Mitigation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mitigation", runtime.ParamLocationQuery, *params.Mitigation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotTag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_tag", runtime.ParamLocationQuery, *params.NotTag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_tags", runtime.ParamLocationQuery, *params.NotTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.O != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "o", runtime.ParamLocationQuery, *params.O); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Severity != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "severity", runtime.ParamLocationQuery, *params.Severity); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Title != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "title", runtime.ParamLocationQuery, *params.Title); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindingTemplatesCreateRequest calls the generic FindingTemplatesCreate builder with application/json body
func NewFindingTemplatesCreateRequest(server string, body FindingTemplatesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFindingTemplatesCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewFindingTemplatesCreateRequestWithFormdataBody calls the generic FindingTemplatesCreate builder with application/x-www-form-urlencoded body
func NewFindingTemplatesCreateRequestWithFormdataBody(server string, body FindingTemplatesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewFindingTemplatesCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewFindingTemplatesCreateRequestWithBody generates requests for FindingTemplatesCreate with any type of body
func NewFindingTemplatesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/finding_templates/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindingTemplatesDestroyRequest generates requests for FindingTemplatesDestroy
func NewFindingTemplatesDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/finding_templates/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindingTemplatesRetrieveRequest generates requests for FindingTemplatesRetrieve
func NewFindingTemplatesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/finding_templates/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindingTemplatesPartialUpdateRequest calls the generic FindingTemplatesPartialUpdate builder with application/json body
func NewFindingTemplatesPartialUpdateRequest(server string, id int, body FindingTemplatesPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFindingTemplatesPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewFindingTemplatesPartialUpdateRequestWithFormdataBody calls the generic FindingTemplatesPartialUpdate builder with application/x-www-form-urlencoded body
func NewFindingTemplatesPartialUpdateRequestWithFormdataBody(server string, id int, body FindingTemplatesPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewFindingTemplatesPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewFindingTemplatesPartialUpdateRequestWithBody generates requests for FindingTemplatesPartialUpdate with any type of body
func NewFindingTemplatesPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/finding_templates/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindingTemplatesUpdateRequest calls the generic FindingTemplatesUpdate builder with application/json body
func NewFindingTemplatesUpdateRequest(server string, id int, body FindingTemplatesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFindingTemplatesUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewFindingTemplatesUpdateRequestWithFormdataBody calls the generic FindingTemplatesUpdate builder with application/x-www-form-urlencoded body
func NewFindingTemplatesUpdateRequestWithFormdataBody(server string, id int, body FindingTemplatesUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewFindingTemplatesUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewFindingTemplatesUpdateRequestWithBody generates requests for FindingTemplatesUpdate with any type of body
func NewFindingTemplatesUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/finding_templates/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindingTemplatesDeletePreviewListRequest generates requests for FindingTemplatesDeletePreviewList
func NewFindingTemplatesDeletePreviewListRequest(server string, id int, params *FindingTemplatesDeletePreviewListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/finding_templates/%s/delete_preview/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindingsListRequest generates requests for FindingsList
func NewFindingsListRequest(server string, params *FindingsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Active != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "active", runtime.ParamLocationQuery, *params.Active); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ComponentName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "component_name", runtime.ParamLocationQuery, *params.ComponentName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ComponentVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "component_version", runtime.ParamLocationQuery, *params.ComponentVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Created != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created", runtime.ParamLocationQuery, *params.Created); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cvssv3 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cvssv3", runtime.ParamLocationQuery, *params.Cvssv3); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cvssv3Score != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cvssv3_score", runtime.ParamLocationQuery, *params.Cvssv3Score); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cwe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "cwe", runtime.ParamLocationQuery, *params.Cwe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Date != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DefectReviewRequestedBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "defect_review_requested_by", runtime.ParamLocationQuery, *params.DefectReviewRequestedBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Duplicate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "duplicate", runtime.ParamLocationQuery, *params.Duplicate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DuplicateFinding != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "duplicate_finding", runtime.ParamLocationQuery, *params.DuplicateFinding); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DynamicFinding != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dynamic_finding", runtime.ParamLocationQuery, *params.DynamicFinding); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EffortForFixing != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "effort_for_fixing", runtime.ParamLocationQuery, *params.EffortForFixing); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Endpoints != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "endpoints", runtime.ParamLocationQuery, *params.Endpoints); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FalseP != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "false_p", runtime.ParamLocationQuery, *params.FalseP); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilePath != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_path", runtime.ParamLocationQuery, *params.FilePath); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FindingGroup != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "finding_group", runtime.ParamLocationQuery, *params.FindingGroup); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FoundBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "found_by", runtime.ParamLocationQuery, *params.FoundBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HasJira != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "has_jira", runtime.ParamLocationQuery, *params.HasJira); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HashCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hash_code", runtime.ParamLocationQuery, *params.HashCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Impact != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "impact", runtime.ParamLocationQuery, *params.Impact); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InheritedTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "inherited_tags", runtime.ParamLocationQuery, *params.InheritedTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsMitigated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_mitigated", runtime.ParamLocationQuery, *params.IsMitigated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.JiraChange != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "jira_change", runtime.ParamLocationQuery, *params.JiraChange); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.JiraCreation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "jira_creation", runtime.ParamLocationQuery, *params.JiraCreation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastReviewed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_reviewed", runtime.ParamLocationQuery, *params.LastReviewed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastReviewedBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "last_reviewed_by", runtime.ParamLocationQuery, *params.LastReviewedBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastStatusUpdate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_status_update", runtime.ParamLocationQuery, *params.LastStatusUpdate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Mitigated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mitigated", runtime.ParamLocationQuery, *params.Mitigated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MitigatedBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "mitigated_by", runtime.ParamLocationQuery, *params.MitigatedBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Mitigation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mitigation", runtime.ParamLocationQuery, *params.Mitigation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NbOccurences != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "nb_occurences", runtime.ParamLocationQuery, *params.NbOccurences); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotTag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_tag", runtime.ParamLocationQuery, *params.NotTag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_tags", runtime.ParamLocationQuery, *params.NotTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotTestEngagementProductTagsName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_test__engagement__product__tags__name", runtime.ParamLocationQuery, *params.NotTestEngagementProductTagsName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotTestEngagementTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_test__engagement__tags", runtime.ParamLocationQuery, *params.NotTestEngagementTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotTestTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_test__tags", runtime.ParamLocationQuery, *params.NotTestTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NumericalSeverity != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "numerical_severity", runtime.ParamLocationQuery, *params.NumericalSeverity); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.O != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "o", runtime.ParamLocationQuery, *params.O); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OutOfScope != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "out_of_scope", runtime.ParamLocationQuery, *params.OutOfScope); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Param != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "param", runtime.ParamLocationQuery, *params.Param); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Payload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "payload", runtime.ParamLocationQuery, *params.Payload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PlannedRemediationDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "planned_remediation_date", runtime.ParamLocationQuery, *params.PlannedRemediationDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PlannedRemediationVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "planned_remediation_version", runtime.ParamLocationQuery, *params.PlannedRemediationVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProductName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product_name", runtime.ParamLocationQuery, *params.ProductName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProductNameContains != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product_name_contains", runtime.ParamLocationQuery, *params.ProductNameContains); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PublishDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "publish_date", runtime.ParamLocationQuery, *params.PublishDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.References != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "references", runtime.ParamLocationQuery, *params.References); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RelatedFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "related_fields", runtime.ParamLocationQuery, *params.RelatedFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Reporter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "reporter", runtime.ParamLocationQuery, *params.Reporter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReviewRequestedBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "review_requested_by", runtime.ParamLocationQuery, *params.ReviewRequestedBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Reviewers != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "reviewers", runtime.ParamLocationQuery, *params.Reviewers); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RiskAcceptance != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "risk_acceptance", runtime.ParamLocationQuery, *params.RiskAcceptance); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RiskAccepted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "risk_accepted", runtime.ParamLocationQuery, *params.RiskAccepted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SastSinkObject != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sast_sink_object", runtime.ParamLocationQuery, *params.SastSinkObject); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SastSourceFilePath != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sast_source_file_path", runtime.ParamLocationQuery, *params.SastSourceFilePath); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SastSourceLine != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sast_source_line", runtime.ParamLocationQuery, *params.SastSourceLine); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SastSourceObject != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sast_source_object", runtime.ParamLocationQuery, *params.SastSourceObject); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScannerConfidence != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "scanner_confidence", runtime.ParamLocationQuery, *params.ScannerConfidence); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Service != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service", runtime.ParamLocationQuery, *params.Service); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Severity != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "severity", runtime.ParamLocationQuery, *params.Severity); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SeverityJustification != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "severity_justification", runtime.ParamLocationQuery, *params.SeverityJustification); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SlaStartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sla_start_date", runtime.ParamLocationQuery, *params.SlaStartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SonarqubeIssue != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sonarqube_issue", runtime.ParamLocationQuery, *params.SonarqubeIssue); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StaticFinding != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "static_finding", runtime.ParamLocationQuery, *params.StaticFinding); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StepsToReproduce != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "steps_to_reproduce", runtime.ParamLocationQuery, *params.StepsToReproduce); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Test != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "test", runtime.ParamLocationQuery, *params.Test); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TestEngagement != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "test__engagement", runtime.ParamLocationQuery, *params.TestEngagement); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TestEngagementProduct != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "test__engagement__product", runtime.ParamLocationQuery, *params.TestEngagementProduct); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TestEngagementProductProdType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "test__engagement__product__prod_type", runtime.ParamLocationQuery, *params.TestEngagementProductProdType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TestEngagementProductTagsName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "test__engagement__product__tags__name", runtime.ParamLocationQuery, *params.TestEngagementProductTagsName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TestEngagementTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "test__engagement__tags", runtime.ParamLocationQuery, *params.TestEngagementTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TestTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "test__tags", runtime.ParamLocationQuery, *params.TestTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TestTestType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "test__test_type", runtime.ParamLocationQuery, *params.TestTestType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Title != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "title", runtime.ParamLocationQuery, *params.Title); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UnderDefectReview != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "under_defect_review", runtime.ParamLocationQuery, *params.UnderDefectReview); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UnderReview != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "under_review", runtime.ParamLocationQuery, *params.UnderReview); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UniqueIdFromTool != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unique_id_from_tool", runtime.ParamLocationQuery, *params.UniqueIdFromTool); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Verified != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verified", runtime.ParamLocationQuery, *params.Verified); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VulnIdFromTool != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vuln_id_from_tool", runtime.ParamLocationQuery, *params.VulnIdFromTool); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VulnerabilityId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vulnerability_id", runtime.ParamLocationQuery, *params.VulnerabilityId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindingsCreateRequest calls the generic FindingsCreate builder with application/json body
func NewFindingsCreateRequest(server string, body FindingsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFindingsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewFindingsCreateRequestWithFormdataBody calls the generic FindingsCreate builder with application/x-www-form-urlencoded body
func NewFindingsCreateRequestWithFormdataBody(server string, body FindingsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewFindingsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewFindingsCreateRequestWithBody generates requests for FindingsCreate with any type of body
func NewFindingsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindingsAcceptRisksCreateRequest calls the generic FindingsAcceptRisksCreate builder with application/json body
func NewFindingsAcceptRisksCreateRequest(server string, params *FindingsAcceptRisksCreateParams, body FindingsAcceptRisksCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFindingsAcceptRisksCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewFindingsAcceptRisksCreateRequestWithFormdataBody calls the generic FindingsAcceptRisksCreate builder with application/x-www-form-urlencoded body
func NewFindingsAcceptRisksCreateRequestWithFormdataBody(server string, params *FindingsAcceptRisksCreateParams, body FindingsAcceptRisksCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewFindingsAcceptRisksCreateRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewFindingsAcceptRisksCreateRequestWithBody generates requests for FindingsAcceptRisksCreate with any type of body
func NewFindingsAcceptRisksCreateRequestWithBody(server string, params *FindingsAcceptRisksCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/accept_risks/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Active != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "active", runtime.ParamLocationQuery, *params.Active); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ComponentName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "component_name", runtime.ParamLocationQuery, *params.ComponentName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ComponentVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "component_version", runtime.ParamLocationQuery, *params.ComponentVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Created != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created", runtime.ParamLocationQuery, *params.Created); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cvssv3 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cvssv3", runtime.ParamLocationQuery, *params.Cvssv3); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cvssv3Score != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cvssv3_score", runtime.ParamLocationQuery, *params.Cvssv3Score); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cwe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "cwe", runtime.ParamLocationQuery, *params.Cwe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Date != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DefectReviewRequestedBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "defect_review_requested_by", runtime.ParamLocationQuery, *params.DefectReviewRequestedBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Duplicate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "duplicate", runtime.ParamLocationQuery, *params.Duplicate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DuplicateFinding != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "duplicate_finding", runtime.ParamLocationQuery, *params.DuplicateFinding); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DynamicFinding != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dynamic_finding", runtime.ParamLocationQuery, *params.DynamicFinding); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EffortForFixing != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "effort_for_fixing", runtime.ParamLocationQuery, *params.EffortForFixing); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Endpoints != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "endpoints", runtime.ParamLocationQuery, *params.Endpoints); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FalseP != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "false_p", runtime.ParamLocationQuery, *params.FalseP); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilePath != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_path", runtime.ParamLocationQuery, *params.FilePath); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FindingGroup != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "finding_group", runtime.ParamLocationQuery, *params.FindingGroup); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FoundBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "found_by", runtime.ParamLocationQuery, *params.FoundBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HasJira != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "has_jira", runtime.ParamLocationQuery, *params.HasJira); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HashCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hash_code", runtime.ParamLocationQuery, *params.HashCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Impact != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "impact", runtime.ParamLocationQuery, *params.Impact); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InheritedTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "inherited_tags", runtime.ParamLocationQuery, *params.InheritedTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsMitigated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_mitigated", runtime.ParamLocationQuery, *params.IsMitigated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.JiraChange != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "jira_change", runtime.ParamLocationQuery, *params.JiraChange); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.JiraCreation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "jira_creation", runtime.ParamLocationQuery, *params.JiraCreation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastReviewed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_reviewed", runtime.ParamLocationQuery, *params.LastReviewed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastReviewedBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "last_reviewed_by", runtime.ParamLocationQuery, *params.LastReviewedBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastStatusUpdate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_status_update", runtime.ParamLocationQuery, *params.LastStatusUpdate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Mitigated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mitigated", runtime.ParamLocationQuery, *params.Mitigated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MitigatedBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "mitigated_by", runtime.ParamLocationQuery, *params.MitigatedBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Mitigation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mitigation", runtime.ParamLocationQuery, *params.Mitigation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NbOccurences != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "nb_occurences", runtime.ParamLocationQuery, *params.NbOccurences); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotTag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_tag", runtime.ParamLocationQuery, *params.NotTag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_tags", runtime.ParamLocationQuery, *params.NotTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotTestEngagementProductTagsName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_test__engagement__product__tags__name", runtime.ParamLocationQuery, *params.NotTestEngagementProductTagsName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotTestEngagementTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_test__engagement__tags", runtime.ParamLocationQuery, *params.NotTestEngagementTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotTestTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_test__tags", runtime.ParamLocationQuery, *params.NotTestTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NumericalSeverity != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "numerical_severity", runtime.ParamLocationQuery, *params.NumericalSeverity); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.O != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "o", runtime.ParamLocationQuery, *params.O); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OutOfScope != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "out_of_scope", runtime.ParamLocationQuery, *params.OutOfScope); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Param != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "param", runtime.ParamLocationQuery, *params.Param); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Payload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "payload", runtime.ParamLocationQuery, *params.Payload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PlannedRemediationDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "planned_remediation_date", runtime.ParamLocationQuery, *params.PlannedRemediationDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PlannedRemediationVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "planned_remediation_version", runtime.ParamLocationQuery, *params.PlannedRemediationVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProductName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product_name", runtime.ParamLocationQuery, *params.ProductName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProductNameContains != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product_name_contains", runtime.ParamLocationQuery, *params.ProductNameContains); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PublishDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "publish_date", runtime.ParamLocationQuery, *params.PublishDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.References != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "references", runtime.ParamLocationQuery, *params.References); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Reporter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "reporter", runtime.ParamLocationQuery, *params.Reporter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReviewRequestedBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "review_requested_by", runtime.ParamLocationQuery, *params.ReviewRequestedBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Reviewers != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "reviewers", runtime.ParamLocationQuery, *params.Reviewers); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RiskAcceptance != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "risk_acceptance", runtime.ParamLocationQuery, *params.RiskAcceptance); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RiskAccepted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "risk_accepted", runtime.ParamLocationQuery, *params.RiskAccepted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SastSinkObject != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sast_sink_object", runtime.ParamLocationQuery, *params.SastSinkObject); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SastSourceFilePath != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sast_source_file_path", runtime.ParamLocationQuery, *params.SastSourceFilePath); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SastSourceLine != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sast_source_line", runtime.ParamLocationQuery, *params.SastSourceLine); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SastSourceObject != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sast_source_object", runtime.ParamLocationQuery, *params.SastSourceObject); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScannerConfidence != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "scanner_confidence", runtime.ParamLocationQuery, *params.ScannerConfidence); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Service != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service", runtime.ParamLocationQuery, *params.Service); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Severity != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "severity", runtime.ParamLocationQuery, *params.Severity); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SeverityJustification != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "severity_justification", runtime.ParamLocationQuery, *params.SeverityJustification); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SlaStartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sla_start_date", runtime.ParamLocationQuery, *params.SlaStartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SonarqubeIssue != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sonarqube_issue", runtime.ParamLocationQuery, *params.SonarqubeIssue); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StaticFinding != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "static_finding", runtime.ParamLocationQuery, *params.StaticFinding); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StepsToReproduce != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "steps_to_reproduce", runtime.ParamLocationQuery, *params.StepsToReproduce); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Test != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "test", runtime.ParamLocationQuery, *params.Test); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TestEngagement != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "test__engagement", runtime.ParamLocationQuery, *params.TestEngagement); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TestEngagementProduct != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "test__engagement__product", runtime.ParamLocationQuery, *params.TestEngagementProduct); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TestEngagementProductProdType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "test__engagement__product__prod_type", runtime.ParamLocationQuery, *params.TestEngagementProductProdType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TestEngagementProductTagsName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "test__engagement__product__tags__name", runtime.ParamLocationQuery, *params.TestEngagementProductTagsName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TestEngagementTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "test__engagement__tags", runtime.ParamLocationQuery, *params.TestEngagementTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TestTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "test__tags", runtime.ParamLocationQuery, *params.TestTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TestTestType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "test__test_type", runtime.ParamLocationQuery, *params.TestTestType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Title != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "title", runtime.ParamLocationQuery, *params.Title); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UnderDefectReview != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "under_defect_review", runtime.ParamLocationQuery, *params.UnderDefectReview); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UnderReview != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "under_review", runtime.ParamLocationQuery, *params.UnderReview); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UniqueIdFromTool != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unique_id_from_tool", runtime.ParamLocationQuery, *params.UniqueIdFromTool); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Verified != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verified", runtime.ParamLocationQuery, *params.Verified); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VulnIdFromTool != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vuln_id_from_tool", runtime.ParamLocationQuery, *params.VulnIdFromTool); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VulnerabilityId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vulnerability_id", runtime.ParamLocationQuery, *params.VulnerabilityId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindingsGenerateReportCreateRequest calls the generic FindingsGenerateReportCreate builder with application/json body
func NewFindingsGenerateReportCreateRequest(server string, body FindingsGenerateReportCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFindingsGenerateReportCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewFindingsGenerateReportCreateRequestWithFormdataBody calls the generic FindingsGenerateReportCreate builder with application/x-www-form-urlencoded body
func NewFindingsGenerateReportCreateRequestWithFormdataBody(server string, body FindingsGenerateReportCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewFindingsGenerateReportCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewFindingsGenerateReportCreateRequestWithBody generates requests for FindingsGenerateReportCreate with any type of body
func NewFindingsGenerateReportCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/generate_report/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindingsDestroyRequest generates requests for FindingsDestroy
func NewFindingsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindingsRetrieveRequest generates requests for FindingsRetrieve
func NewFindingsRetrieveRequest(server string, id int, params *FindingsRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RelatedFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "related_fields", runtime.ParamLocationQuery, *params.RelatedFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindingsPartialUpdateRequest calls the generic FindingsPartialUpdate builder with application/json body
func NewFindingsPartialUpdateRequest(server string, id int, body FindingsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFindingsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewFindingsPartialUpdateRequestWithFormdataBody calls the generic FindingsPartialUpdate builder with application/x-www-form-urlencoded body
func NewFindingsPartialUpdateRequestWithFormdataBody(server string, id int, body FindingsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewFindingsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewFindingsPartialUpdateRequestWithBody generates requests for FindingsPartialUpdate with any type of body
func NewFindingsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindingsUpdateRequest calls the generic FindingsUpdate builder with application/json body
func NewFindingsUpdateRequest(server string, id int, body FindingsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFindingsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewFindingsUpdateRequestWithFormdataBody calls the generic FindingsUpdate builder with application/x-www-form-urlencoded body
func NewFindingsUpdateRequestWithFormdataBody(server string, id int, body FindingsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewFindingsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewFindingsUpdateRequestWithBody generates requests for FindingsUpdate with any type of body
func NewFindingsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindingsCloseCreateRequest calls the generic FindingsCloseCreate builder with application/json body
func NewFindingsCloseCreateRequest(server string, id int, body FindingsCloseCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFindingsCloseCreateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewFindingsCloseCreateRequestWithFormdataBody calls the generic FindingsCloseCreate builder with application/x-www-form-urlencoded body
func NewFindingsCloseCreateRequestWithFormdataBody(server string, id int, body FindingsCloseCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewFindingsCloseCreateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewFindingsCloseCreateRequestWithBody generates requests for FindingsCloseCreate with any type of body
func NewFindingsCloseCreateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/%s/close/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindingsDeletePreviewListRequest generates requests for FindingsDeletePreviewList
func NewFindingsDeletePreviewListRequest(server string, id int, params *FindingsDeletePreviewListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/%s/delete_preview/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindingsDuplicateListRequest generates requests for FindingsDuplicateList
func NewFindingsDuplicateListRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/%s/duplicate/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindingsDuplicateResetCreateRequest generates requests for FindingsDuplicateResetCreate
func NewFindingsDuplicateResetCreateRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/%s/duplicate/reset/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindingsFilesRetrieveRequest generates requests for FindingsFilesRetrieve
func NewFindingsFilesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/%s/files/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindingsFilesCreateRequestWithBody generates requests for FindingsFilesCreate with any type of body
func NewFindingsFilesCreateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/%s/files/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindingsFilesDownloadRetrieveRequest generates requests for FindingsFilesDownloadRetrieve
func NewFindingsFilesDownloadRetrieveRequest(server string, id int, fileId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "file_id", runtime.ParamLocationPath, fileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/%s/files/download/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindingsMetadataDestroyRequest generates requests for FindingsMetadataDestroy
func NewFindingsMetadataDestroyRequest(server string, id int, params *FindingsMetadataDestroyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/%s/metadata/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindingsMetadataListRequest generates requests for FindingsMetadataList
func NewFindingsMetadataListRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/%s/metadata/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindingsMetadataCreateRequest calls the generic FindingsMetadataCreate builder with application/json body
func NewFindingsMetadataCreateRequest(server string, id int, body FindingsMetadataCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFindingsMetadataCreateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewFindingsMetadataCreateRequestWithFormdataBody calls the generic FindingsMetadataCreate builder with application/x-www-form-urlencoded body
func NewFindingsMetadataCreateRequestWithFormdataBody(server string, id int, body FindingsMetadataCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewFindingsMetadataCreateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewFindingsMetadataCreateRequestWithBody generates requests for FindingsMetadataCreate with any type of body
func NewFindingsMetadataCreateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/%s/metadata/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindingsMetadataUpdateRequest calls the generic FindingsMetadataUpdate builder with application/json body
func NewFindingsMetadataUpdateRequest(server string, id int, body FindingsMetadataUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFindingsMetadataUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewFindingsMetadataUpdateRequestWithFormdataBody calls the generic FindingsMetadataUpdate builder with application/x-www-form-urlencoded body
func NewFindingsMetadataUpdateRequestWithFormdataBody(server string, id int, body FindingsMetadataUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewFindingsMetadataUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewFindingsMetadataUpdateRequestWithBody generates requests for FindingsMetadataUpdate with any type of body
func NewFindingsMetadataUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/%s/metadata/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindingsNotesRetrieveRequest generates requests for FindingsNotesRetrieve
func NewFindingsNotesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/%s/notes/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindingsNotesCreateRequest calls the generic FindingsNotesCreate builder with application/json body
func NewFindingsNotesCreateRequest(server string, id int, body FindingsNotesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFindingsNotesCreateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewFindingsNotesCreateRequestWithFormdataBody calls the generic FindingsNotesCreate builder with application/x-www-form-urlencoded body
func NewFindingsNotesCreateRequestWithFormdataBody(server string, id int, body FindingsNotesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewFindingsNotesCreateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewFindingsNotesCreateRequestWithBody generates requests for FindingsNotesCreate with any type of body
func NewFindingsNotesCreateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/%s/notes/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindingsOriginalCreateRequest generates requests for FindingsOriginalCreate
func NewFindingsOriginalCreateRequest(server string, id int, newFid int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "new_fid", runtime.ParamLocationPath, newFid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/%s/original/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindingsRemoveNotePartialUpdateRequest calls the generic FindingsRemoveNotePartialUpdate builder with application/json body
func NewFindingsRemoveNotePartialUpdateRequest(server string, id int, body FindingsRemoveNotePartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFindingsRemoveNotePartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewFindingsRemoveNotePartialUpdateRequestWithFormdataBody calls the generic FindingsRemoveNotePartialUpdate builder with application/x-www-form-urlencoded body
func NewFindingsRemoveNotePartialUpdateRequestWithFormdataBody(server string, id int, body FindingsRemoveNotePartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewFindingsRemoveNotePartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewFindingsRemoveNotePartialUpdateRequestWithBody generates requests for FindingsRemoveNotePartialUpdate with any type of body
func NewFindingsRemoveNotePartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/%s/remove_note/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindingsRemoveTagsPartialUpdateRequest calls the generic FindingsRemoveTagsPartialUpdate builder with application/json body
func NewFindingsRemoveTagsPartialUpdateRequest(server string, id int, body FindingsRemoveTagsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFindingsRemoveTagsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewFindingsRemoveTagsPartialUpdateRequestWithFormdataBody calls the generic FindingsRemoveTagsPartialUpdate builder with application/x-www-form-urlencoded body
func NewFindingsRemoveTagsPartialUpdateRequestWithFormdataBody(server string, id int, body FindingsRemoveTagsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewFindingsRemoveTagsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewFindingsRemoveTagsPartialUpdateRequestWithBody generates requests for FindingsRemoveTagsPartialUpdate with any type of body
func NewFindingsRemoveTagsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/%s/remove_tags/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindingsRemoveTagsUpdateRequest calls the generic FindingsRemoveTagsUpdate builder with application/json body
func NewFindingsRemoveTagsUpdateRequest(server string, id int, body FindingsRemoveTagsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFindingsRemoveTagsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewFindingsRemoveTagsUpdateRequestWithFormdataBody calls the generic FindingsRemoveTagsUpdate builder with application/x-www-form-urlencoded body
func NewFindingsRemoveTagsUpdateRequestWithFormdataBody(server string, id int, body FindingsRemoveTagsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewFindingsRemoveTagsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewFindingsRemoveTagsUpdateRequestWithBody generates requests for FindingsRemoveTagsUpdate with any type of body
func NewFindingsRemoveTagsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/%s/remove_tags/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindingsRequestResponseRetrieveRequest generates requests for FindingsRequestResponseRetrieve
func NewFindingsRequestResponseRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/%s/request_response/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindingsRequestResponseCreateRequest calls the generic FindingsRequestResponseCreate builder with application/json body
func NewFindingsRequestResponseCreateRequest(server string, id int, body FindingsRequestResponseCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFindingsRequestResponseCreateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewFindingsRequestResponseCreateRequestWithFormdataBody calls the generic FindingsRequestResponseCreate builder with application/x-www-form-urlencoded body
func NewFindingsRequestResponseCreateRequestWithFormdataBody(server string, id int, body FindingsRequestResponseCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewFindingsRequestResponseCreateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewFindingsRequestResponseCreateRequestWithBody generates requests for FindingsRequestResponseCreate with any type of body
func NewFindingsRequestResponseCreateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/%s/request_response/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindingsTagsRetrieveRequest generates requests for FindingsTagsRetrieve
func NewFindingsTagsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/%s/tags/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindingsTagsCreateRequest calls the generic FindingsTagsCreate builder with application/json body
func NewFindingsTagsCreateRequest(server string, id int, body FindingsTagsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFindingsTagsCreateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewFindingsTagsCreateRequestWithFormdataBody calls the generic FindingsTagsCreate builder with application/x-www-form-urlencoded body
func NewFindingsTagsCreateRequestWithFormdataBody(server string, id int, body FindingsTagsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewFindingsTagsCreateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewFindingsTagsCreateRequestWithBody generates requests for FindingsTagsCreate with any type of body
func NewFindingsTagsCreateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/findings/%s/tags/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGlobalRolesListRequest generates requests for GlobalRolesList
func NewGlobalRolesListRequest(server string, params *GlobalRolesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/global_roles/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Group != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "group", runtime.ParamLocationQuery, *params.Group); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Role != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "role", runtime.ParamLocationQuery, *params.Role); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.User != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user", runtime.ParamLocationQuery, *params.User); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGlobalRolesCreateRequest calls the generic GlobalRolesCreate builder with application/json body
func NewGlobalRolesCreateRequest(server string, body GlobalRolesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGlobalRolesCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewGlobalRolesCreateRequestWithFormdataBody calls the generic GlobalRolesCreate builder with application/x-www-form-urlencoded body
func NewGlobalRolesCreateRequestWithFormdataBody(server string, body GlobalRolesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewGlobalRolesCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewGlobalRolesCreateRequestWithBody generates requests for GlobalRolesCreate with any type of body
func NewGlobalRolesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/global_roles/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGlobalRolesDestroyRequest generates requests for GlobalRolesDestroy
func NewGlobalRolesDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/global_roles/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGlobalRolesRetrieveRequest generates requests for GlobalRolesRetrieve
func NewGlobalRolesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/global_roles/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGlobalRolesPartialUpdateRequest calls the generic GlobalRolesPartialUpdate builder with application/json body
func NewGlobalRolesPartialUpdateRequest(server string, id int, body GlobalRolesPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGlobalRolesPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewGlobalRolesPartialUpdateRequestWithFormdataBody calls the generic GlobalRolesPartialUpdate builder with application/x-www-form-urlencoded body
func NewGlobalRolesPartialUpdateRequestWithFormdataBody(server string, id int, body GlobalRolesPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewGlobalRolesPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewGlobalRolesPartialUpdateRequestWithBody generates requests for GlobalRolesPartialUpdate with any type of body
func NewGlobalRolesPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/global_roles/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGlobalRolesUpdateRequest calls the generic GlobalRolesUpdate builder with application/json body
func NewGlobalRolesUpdateRequest(server string, id int, body GlobalRolesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGlobalRolesUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewGlobalRolesUpdateRequestWithFormdataBody calls the generic GlobalRolesUpdate builder with application/x-www-form-urlencoded body
func NewGlobalRolesUpdateRequestWithFormdataBody(server string, id int, body GlobalRolesUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewGlobalRolesUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewGlobalRolesUpdateRequestWithBody generates requests for GlobalRolesUpdate with any type of body
func NewGlobalRolesUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/global_roles/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGlobalRolesDeletePreviewListRequest generates requests for GlobalRolesDeletePreviewList
func NewGlobalRolesDeletePreviewListRequest(server string, id int, params *GlobalRolesDeletePreviewListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/global_roles/%s/delete_preview/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewImportLanguagesCreateRequestWithBody generates requests for ImportLanguagesCreate with any type of body
func NewImportLanguagesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/import-languages/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewImportScanCreateRequestWithBody generates requests for ImportScanCreate with any type of body
func NewImportScanCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/import-scan/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewJiraConfigurationsListRequest generates requests for JiraConfigurationsList
func NewJiraConfigurationsListRequest(server string, params *JiraConfigurationsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_configurations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Url != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, *params.Url); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewJiraConfigurationsCreateRequest calls the generic JiraConfigurationsCreate builder with application/json body
func NewJiraConfigurationsCreateRequest(server string, body JiraConfigurationsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewJiraConfigurationsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewJiraConfigurationsCreateRequestWithFormdataBody calls the generic JiraConfigurationsCreate builder with application/x-www-form-urlencoded body
func NewJiraConfigurationsCreateRequestWithFormdataBody(server string, body JiraConfigurationsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewJiraConfigurationsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewJiraConfigurationsCreateRequestWithBody generates requests for JiraConfigurationsCreate with any type of body
func NewJiraConfigurationsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_configurations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewJiraConfigurationsDestroyRequest generates requests for JiraConfigurationsDestroy
func NewJiraConfigurationsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_configurations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewJiraConfigurationsRetrieveRequest generates requests for JiraConfigurationsRetrieve
func NewJiraConfigurationsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_configurations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewJiraConfigurationsPartialUpdateRequest calls the generic JiraConfigurationsPartialUpdate builder with application/json body
func NewJiraConfigurationsPartialUpdateRequest(server string, id int, body JiraConfigurationsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewJiraConfigurationsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewJiraConfigurationsPartialUpdateRequestWithFormdataBody calls the generic JiraConfigurationsPartialUpdate builder with application/x-www-form-urlencoded body
func NewJiraConfigurationsPartialUpdateRequestWithFormdataBody(server string, id int, body JiraConfigurationsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewJiraConfigurationsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewJiraConfigurationsPartialUpdateRequestWithBody generates requests for JiraConfigurationsPartialUpdate with any type of body
func NewJiraConfigurationsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_configurations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewJiraConfigurationsUpdateRequest calls the generic JiraConfigurationsUpdate builder with application/json body
func NewJiraConfigurationsUpdateRequest(server string, id int, body JiraConfigurationsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewJiraConfigurationsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewJiraConfigurationsUpdateRequestWithFormdataBody calls the generic JiraConfigurationsUpdate builder with application/x-www-form-urlencoded body
func NewJiraConfigurationsUpdateRequestWithFormdataBody(server string, id int, body JiraConfigurationsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewJiraConfigurationsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewJiraConfigurationsUpdateRequestWithBody generates requests for JiraConfigurationsUpdate with any type of body
func NewJiraConfigurationsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_configurations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewJiraConfigurationsDeletePreviewListRequest generates requests for JiraConfigurationsDeletePreviewList
func NewJiraConfigurationsDeletePreviewListRequest(server string, id int, params *JiraConfigurationsDeletePreviewListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_configurations/%s/delete_preview/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewJiraFindingMappingsListRequest generates requests for JiraFindingMappingsList
func NewJiraFindingMappingsListRequest(server string, params *JiraFindingMappingsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_finding_mappings/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Engagement != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "engagement", runtime.ParamLocationQuery, *params.Engagement); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Finding != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "finding", runtime.ParamLocationQuery, *params.Finding); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FindingGroup != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "finding_group", runtime.ParamLocationQuery, *params.FindingGroup); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.JiraId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "jira_id", runtime.ParamLocationQuery, *params.JiraId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.JiraKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "jira_key", runtime.ParamLocationQuery, *params.JiraKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewJiraFindingMappingsCreateRequest calls the generic JiraFindingMappingsCreate builder with application/json body
func NewJiraFindingMappingsCreateRequest(server string, body JiraFindingMappingsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewJiraFindingMappingsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewJiraFindingMappingsCreateRequestWithFormdataBody calls the generic JiraFindingMappingsCreate builder with application/x-www-form-urlencoded body
func NewJiraFindingMappingsCreateRequestWithFormdataBody(server string, body JiraFindingMappingsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewJiraFindingMappingsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewJiraFindingMappingsCreateRequestWithBody generates requests for JiraFindingMappingsCreate with any type of body
func NewJiraFindingMappingsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_finding_mappings/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewJiraFindingMappingsDestroyRequest generates requests for JiraFindingMappingsDestroy
func NewJiraFindingMappingsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_finding_mappings/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewJiraFindingMappingsRetrieveRequest generates requests for JiraFindingMappingsRetrieve
func NewJiraFindingMappingsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_finding_mappings/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewJiraFindingMappingsPartialUpdateRequest calls the generic JiraFindingMappingsPartialUpdate builder with application/json body
func NewJiraFindingMappingsPartialUpdateRequest(server string, id int, body JiraFindingMappingsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewJiraFindingMappingsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewJiraFindingMappingsPartialUpdateRequestWithFormdataBody calls the generic JiraFindingMappingsPartialUpdate builder with application/x-www-form-urlencoded body
func NewJiraFindingMappingsPartialUpdateRequestWithFormdataBody(server string, id int, body JiraFindingMappingsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewJiraFindingMappingsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewJiraFindingMappingsPartialUpdateRequestWithBody generates requests for JiraFindingMappingsPartialUpdate with any type of body
func NewJiraFindingMappingsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_finding_mappings/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewJiraFindingMappingsUpdateRequest calls the generic JiraFindingMappingsUpdate builder with application/json body
func NewJiraFindingMappingsUpdateRequest(server string, id int, body JiraFindingMappingsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewJiraFindingMappingsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewJiraFindingMappingsUpdateRequestWithFormdataBody calls the generic JiraFindingMappingsUpdate builder with application/x-www-form-urlencoded body
func NewJiraFindingMappingsUpdateRequestWithFormdataBody(server string, id int, body JiraFindingMappingsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewJiraFindingMappingsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewJiraFindingMappingsUpdateRequestWithBody generates requests for JiraFindingMappingsUpdate with any type of body
func NewJiraFindingMappingsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_finding_mappings/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewJiraFindingMappingsDeletePreviewListRequest generates requests for JiraFindingMappingsDeletePreviewList
func NewJiraFindingMappingsDeletePreviewListRequest(server string, id int, params *JiraFindingMappingsDeletePreviewListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_finding_mappings/%s/delete_preview/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewJiraInstancesListRequest generates requests for JiraInstancesList
func NewJiraInstancesListRequest(server string, params *JiraInstancesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_instances/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Url != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, *params.Url); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewJiraInstancesCreateRequest calls the generic JiraInstancesCreate builder with application/json body
func NewJiraInstancesCreateRequest(server string, body JiraInstancesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewJiraInstancesCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewJiraInstancesCreateRequestWithFormdataBody calls the generic JiraInstancesCreate builder with application/x-www-form-urlencoded body
func NewJiraInstancesCreateRequestWithFormdataBody(server string, body JiraInstancesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewJiraInstancesCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewJiraInstancesCreateRequestWithBody generates requests for JiraInstancesCreate with any type of body
func NewJiraInstancesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_instances/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewJiraInstancesDestroyRequest generates requests for JiraInstancesDestroy
func NewJiraInstancesDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_instances/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewJiraInstancesRetrieveRequest generates requests for JiraInstancesRetrieve
func NewJiraInstancesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_instances/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewJiraInstancesPartialUpdateRequest calls the generic JiraInstancesPartialUpdate builder with application/json body
func NewJiraInstancesPartialUpdateRequest(server string, id int, body JiraInstancesPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewJiraInstancesPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewJiraInstancesPartialUpdateRequestWithFormdataBody calls the generic JiraInstancesPartialUpdate builder with application/x-www-form-urlencoded body
func NewJiraInstancesPartialUpdateRequestWithFormdataBody(server string, id int, body JiraInstancesPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewJiraInstancesPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewJiraInstancesPartialUpdateRequestWithBody generates requests for JiraInstancesPartialUpdate with any type of body
func NewJiraInstancesPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_instances/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewJiraInstancesUpdateRequest calls the generic JiraInstancesUpdate builder with application/json body
func NewJiraInstancesUpdateRequest(server string, id int, body JiraInstancesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewJiraInstancesUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewJiraInstancesUpdateRequestWithFormdataBody calls the generic JiraInstancesUpdate builder with application/x-www-form-urlencoded body
func NewJiraInstancesUpdateRequestWithFormdataBody(server string, id int, body JiraInstancesUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewJiraInstancesUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewJiraInstancesUpdateRequestWithBody generates requests for JiraInstancesUpdate with any type of body
func NewJiraInstancesUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_instances/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewJiraInstancesDeletePreviewListRequest generates requests for JiraInstancesDeletePreviewList
func NewJiraInstancesDeletePreviewListRequest(server string, id int, params *JiraInstancesDeletePreviewListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_instances/%s/delete_preview/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewJiraProductConfigurationsListRequest generates requests for JiraProductConfigurationsList
func NewJiraProductConfigurationsListRequest(server string, params *JiraProductConfigurationsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_product_configurations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Component != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "component", runtime.ParamLocationQuery, *params.Component); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EnableEngagementEpicMapping != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enable_engagement_epic_mapping", runtime.ParamLocationQuery, *params.EnableEngagementEpicMapping); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Engagement != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "engagement", runtime.ParamLocationQuery, *params.Engagement); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.JiraInstance != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "jira_instance", runtime.ParamLocationQuery, *params.JiraInstance); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Product != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product", runtime.ParamLocationQuery, *params.Product); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProjectKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project_key", runtime.ParamLocationQuery, *params.ProjectKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PushAllIssues != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "push_all_issues", runtime.ParamLocationQuery, *params.PushAllIssues); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PushNotes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "push_notes", runtime.ParamLocationQuery, *params.PushNotes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewJiraProductConfigurationsCreateRequest calls the generic JiraProductConfigurationsCreate builder with application/json body
func NewJiraProductConfigurationsCreateRequest(server string, body JiraProductConfigurationsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewJiraProductConfigurationsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewJiraProductConfigurationsCreateRequestWithFormdataBody calls the generic JiraProductConfigurationsCreate builder with application/x-www-form-urlencoded body
func NewJiraProductConfigurationsCreateRequestWithFormdataBody(server string, body JiraProductConfigurationsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewJiraProductConfigurationsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewJiraProductConfigurationsCreateRequestWithBody generates requests for JiraProductConfigurationsCreate with any type of body
func NewJiraProductConfigurationsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_product_configurations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewJiraProductConfigurationsDestroyRequest generates requests for JiraProductConfigurationsDestroy
func NewJiraProductConfigurationsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_product_configurations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewJiraProductConfigurationsRetrieveRequest generates requests for JiraProductConfigurationsRetrieve
func NewJiraProductConfigurationsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_product_configurations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewJiraProductConfigurationsPartialUpdateRequest calls the generic JiraProductConfigurationsPartialUpdate builder with application/json body
func NewJiraProductConfigurationsPartialUpdateRequest(server string, id int, body JiraProductConfigurationsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewJiraProductConfigurationsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewJiraProductConfigurationsPartialUpdateRequestWithFormdataBody calls the generic JiraProductConfigurationsPartialUpdate builder with application/x-www-form-urlencoded body
func NewJiraProductConfigurationsPartialUpdateRequestWithFormdataBody(server string, id int, body JiraProductConfigurationsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewJiraProductConfigurationsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewJiraProductConfigurationsPartialUpdateRequestWithBody generates requests for JiraProductConfigurationsPartialUpdate with any type of body
func NewJiraProductConfigurationsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_product_configurations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewJiraProductConfigurationsUpdateRequest calls the generic JiraProductConfigurationsUpdate builder with application/json body
func NewJiraProductConfigurationsUpdateRequest(server string, id int, body JiraProductConfigurationsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewJiraProductConfigurationsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewJiraProductConfigurationsUpdateRequestWithFormdataBody calls the generic JiraProductConfigurationsUpdate builder with application/x-www-form-urlencoded body
func NewJiraProductConfigurationsUpdateRequestWithFormdataBody(server string, id int, body JiraProductConfigurationsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewJiraProductConfigurationsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewJiraProductConfigurationsUpdateRequestWithBody generates requests for JiraProductConfigurationsUpdate with any type of body
func NewJiraProductConfigurationsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_product_configurations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewJiraProductConfigurationsDeletePreviewListRequest generates requests for JiraProductConfigurationsDeletePreviewList
func NewJiraProductConfigurationsDeletePreviewListRequest(server string, id int, params *JiraProductConfigurationsDeletePreviewListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_product_configurations/%s/delete_preview/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewJiraProjectsListRequest generates requests for JiraProjectsList
func NewJiraProjectsListRequest(server string, params *JiraProjectsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_projects/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Component != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "component", runtime.ParamLocationQuery, *params.Component); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EnableEngagementEpicMapping != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enable_engagement_epic_mapping", runtime.ParamLocationQuery, *params.EnableEngagementEpicMapping); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Engagement != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "engagement", runtime.ParamLocationQuery, *params.Engagement); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.JiraInstance != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "jira_instance", runtime.ParamLocationQuery, *params.JiraInstance); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Product != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product", runtime.ParamLocationQuery, *params.Product); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProjectKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project_key", runtime.ParamLocationQuery, *params.ProjectKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PushAllIssues != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "push_all_issues", runtime.ParamLocationQuery, *params.PushAllIssues); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PushNotes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "push_notes", runtime.ParamLocationQuery, *params.PushNotes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewJiraProjectsCreateRequest calls the generic JiraProjectsCreate builder with application/json body
func NewJiraProjectsCreateRequest(server string, body JiraProjectsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewJiraProjectsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewJiraProjectsCreateRequestWithFormdataBody calls the generic JiraProjectsCreate builder with application/x-www-form-urlencoded body
func NewJiraProjectsCreateRequestWithFormdataBody(server string, body JiraProjectsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewJiraProjectsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewJiraProjectsCreateRequestWithBody generates requests for JiraProjectsCreate with any type of body
func NewJiraProjectsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_projects/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewJiraProjectsDestroyRequest generates requests for JiraProjectsDestroy
func NewJiraProjectsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_projects/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewJiraProjectsRetrieveRequest generates requests for JiraProjectsRetrieve
func NewJiraProjectsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_projects/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewJiraProjectsPartialUpdateRequest calls the generic JiraProjectsPartialUpdate builder with application/json body
func NewJiraProjectsPartialUpdateRequest(server string, id int, body JiraProjectsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewJiraProjectsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewJiraProjectsPartialUpdateRequestWithFormdataBody calls the generic JiraProjectsPartialUpdate builder with application/x-www-form-urlencoded body
func NewJiraProjectsPartialUpdateRequestWithFormdataBody(server string, id int, body JiraProjectsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewJiraProjectsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewJiraProjectsPartialUpdateRequestWithBody generates requests for JiraProjectsPartialUpdate with any type of body
func NewJiraProjectsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_projects/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewJiraProjectsUpdateRequest calls the generic JiraProjectsUpdate builder with application/json body
func NewJiraProjectsUpdateRequest(server string, id int, body JiraProjectsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewJiraProjectsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewJiraProjectsUpdateRequestWithFormdataBody calls the generic JiraProjectsUpdate builder with application/x-www-form-urlencoded body
func NewJiraProjectsUpdateRequestWithFormdataBody(server string, id int, body JiraProjectsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewJiraProjectsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewJiraProjectsUpdateRequestWithBody generates requests for JiraProjectsUpdate with any type of body
func NewJiraProjectsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_projects/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewJiraProjectsDeletePreviewListRequest generates requests for JiraProjectsDeletePreviewList
func NewJiraProjectsDeletePreviewListRequest(server string, id int, params *JiraProjectsDeletePreviewListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/jira_projects/%s/delete_preview/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLanguageTypesListRequest generates requests for LanguageTypesList
func NewLanguageTypesListRequest(server string, params *LanguageTypesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/language_types/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Color != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "color", runtime.ParamLocationQuery, *params.Color); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Language != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLanguageTypesCreateRequest calls the generic LanguageTypesCreate builder with application/json body
func NewLanguageTypesCreateRequest(server string, body LanguageTypesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLanguageTypesCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewLanguageTypesCreateRequestWithFormdataBody calls the generic LanguageTypesCreate builder with application/x-www-form-urlencoded body
func NewLanguageTypesCreateRequestWithFormdataBody(server string, body LanguageTypesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewLanguageTypesCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewLanguageTypesCreateRequestWithBody generates requests for LanguageTypesCreate with any type of body
func NewLanguageTypesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/language_types/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLanguageTypesDestroyRequest generates requests for LanguageTypesDestroy
func NewLanguageTypesDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/language_types/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLanguageTypesRetrieveRequest generates requests for LanguageTypesRetrieve
func NewLanguageTypesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/language_types/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLanguageTypesPartialUpdateRequest calls the generic LanguageTypesPartialUpdate builder with application/json body
func NewLanguageTypesPartialUpdateRequest(server string, id int, body LanguageTypesPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLanguageTypesPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewLanguageTypesPartialUpdateRequestWithFormdataBody calls the generic LanguageTypesPartialUpdate builder with application/x-www-form-urlencoded body
func NewLanguageTypesPartialUpdateRequestWithFormdataBody(server string, id int, body LanguageTypesPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewLanguageTypesPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewLanguageTypesPartialUpdateRequestWithBody generates requests for LanguageTypesPartialUpdate with any type of body
func NewLanguageTypesPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/language_types/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLanguageTypesUpdateRequest calls the generic LanguageTypesUpdate builder with application/json body
func NewLanguageTypesUpdateRequest(server string, id int, body LanguageTypesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLanguageTypesUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewLanguageTypesUpdateRequestWithFormdataBody calls the generic LanguageTypesUpdate builder with application/x-www-form-urlencoded body
func NewLanguageTypesUpdateRequestWithFormdataBody(server string, id int, body LanguageTypesUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewLanguageTypesUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewLanguageTypesUpdateRequestWithBody generates requests for LanguageTypesUpdate with any type of body
func NewLanguageTypesUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/language_types/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLanguageTypesDeletePreviewListRequest generates requests for LanguageTypesDeletePreviewList
func NewLanguageTypesDeletePreviewListRequest(server string, id int, params *LanguageTypesDeletePreviewListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/language_types/%s/delete_preview/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLanguagesListRequest generates requests for LanguagesList
func NewLanguagesListRequest(server string, params *LanguagesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/languages/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Language != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Product != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product", runtime.ParamLocationQuery, *params.Product); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLanguagesCreateRequest calls the generic LanguagesCreate builder with application/json body
func NewLanguagesCreateRequest(server string, body LanguagesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLanguagesCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewLanguagesCreateRequestWithFormdataBody calls the generic LanguagesCreate builder with application/x-www-form-urlencoded body
func NewLanguagesCreateRequestWithFormdataBody(server string, body LanguagesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewLanguagesCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewLanguagesCreateRequestWithBody generates requests for LanguagesCreate with any type of body
func NewLanguagesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/languages/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLanguagesDestroyRequest generates requests for LanguagesDestroy
func NewLanguagesDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/languages/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLanguagesRetrieveRequest generates requests for LanguagesRetrieve
func NewLanguagesRetrieveRequest(server string, id int, params *LanguagesRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/languages/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLanguagesPartialUpdateRequest calls the generic LanguagesPartialUpdate builder with application/json body
func NewLanguagesPartialUpdateRequest(server string, id int, body LanguagesPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLanguagesPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewLanguagesPartialUpdateRequestWithFormdataBody calls the generic LanguagesPartialUpdate builder with application/x-www-form-urlencoded body
func NewLanguagesPartialUpdateRequestWithFormdataBody(server string, id int, body LanguagesPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewLanguagesPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewLanguagesPartialUpdateRequestWithBody generates requests for LanguagesPartialUpdate with any type of body
func NewLanguagesPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/languages/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLanguagesUpdateRequest calls the generic LanguagesUpdate builder with application/json body
func NewLanguagesUpdateRequest(server string, id int, body LanguagesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLanguagesUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewLanguagesUpdateRequestWithFormdataBody calls the generic LanguagesUpdate builder with application/x-www-form-urlencoded body
func NewLanguagesUpdateRequestWithFormdataBody(server string, id int, body LanguagesUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewLanguagesUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewLanguagesUpdateRequestWithBody generates requests for LanguagesUpdate with any type of body
func NewLanguagesUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/languages/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLanguagesDeletePreviewListRequest generates requests for LanguagesDeletePreviewList
func NewLanguagesDeletePreviewListRequest(server string, id int, params *LanguagesDeletePreviewListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/languages/%s/delete_preview/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMetadataListRequest generates requests for MetadataList
func NewMetadataListRequest(server string, params *MetadataListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/metadata/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Endpoint != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endpoint", runtime.ParamLocationQuery, *params.Endpoint); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Finding != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "finding", runtime.ParamLocationQuery, *params.Finding); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Product != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product", runtime.ParamLocationQuery, *params.Product); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Value != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value", runtime.ParamLocationQuery, *params.Value); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMetadataCreateRequest calls the generic MetadataCreate builder with application/json body
func NewMetadataCreateRequest(server string, body MetadataCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMetadataCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewMetadataCreateRequestWithFormdataBody calls the generic MetadataCreate builder with application/x-www-form-urlencoded body
func NewMetadataCreateRequestWithFormdataBody(server string, body MetadataCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewMetadataCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewMetadataCreateRequestWithBody generates requests for MetadataCreate with any type of body
func NewMetadataCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/metadata/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMetadataDestroyRequest generates requests for MetadataDestroy
func NewMetadataDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/metadata/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMetadataRetrieveRequest generates requests for MetadataRetrieve
func NewMetadataRetrieveRequest(server string, id int, params *MetadataRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/metadata/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMetadataPartialUpdateRequest calls the generic MetadataPartialUpdate builder with application/json body
func NewMetadataPartialUpdateRequest(server string, id int, body MetadataPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMetadataPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewMetadataPartialUpdateRequestWithFormdataBody calls the generic MetadataPartialUpdate builder with application/x-www-form-urlencoded body
func NewMetadataPartialUpdateRequestWithFormdataBody(server string, id int, body MetadataPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewMetadataPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewMetadataPartialUpdateRequestWithBody generates requests for MetadataPartialUpdate with any type of body
func NewMetadataPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/metadata/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMetadataUpdateRequest calls the generic MetadataUpdate builder with application/json body
func NewMetadataUpdateRequest(server string, id int, body MetadataUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMetadataUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewMetadataUpdateRequestWithFormdataBody calls the generic MetadataUpdate builder with application/x-www-form-urlencoded body
func NewMetadataUpdateRequestWithFormdataBody(server string, id int, body MetadataUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewMetadataUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewMetadataUpdateRequestWithBody generates requests for MetadataUpdate with any type of body
func NewMetadataUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/metadata/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMetadataDeletePreviewListRequest generates requests for MetadataDeletePreviewList
func NewMetadataDeletePreviewListRequest(server string, id int, params *MetadataDeletePreviewListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/metadata/%s/delete_preview/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkLocationsListRequest generates requests for NetworkLocationsList
func NewNetworkLocationsListRequest(server string, params *NetworkLocationsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/network_locations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Location != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "location", runtime.ParamLocationQuery, *params.Location); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkLocationsCreateRequest calls the generic NetworkLocationsCreate builder with application/json body
func NewNetworkLocationsCreateRequest(server string, body NetworkLocationsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNetworkLocationsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewNetworkLocationsCreateRequestWithFormdataBody calls the generic NetworkLocationsCreate builder with application/x-www-form-urlencoded body
func NewNetworkLocationsCreateRequestWithFormdataBody(server string, body NetworkLocationsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewNetworkLocationsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewNetworkLocationsCreateRequestWithBody generates requests for NetworkLocationsCreate with any type of body
func NewNetworkLocationsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/network_locations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNetworkLocationsDestroyRequest generates requests for NetworkLocationsDestroy
func NewNetworkLocationsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/network_locations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkLocationsRetrieveRequest generates requests for NetworkLocationsRetrieve
func NewNetworkLocationsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/network_locations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkLocationsPartialUpdateRequest calls the generic NetworkLocationsPartialUpdate builder with application/json body
func NewNetworkLocationsPartialUpdateRequest(server string, id int, body NetworkLocationsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNetworkLocationsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewNetworkLocationsPartialUpdateRequestWithFormdataBody calls the generic NetworkLocationsPartialUpdate builder with application/x-www-form-urlencoded body
func NewNetworkLocationsPartialUpdateRequestWithFormdataBody(server string, id int, body NetworkLocationsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewNetworkLocationsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewNetworkLocationsPartialUpdateRequestWithBody generates requests for NetworkLocationsPartialUpdate with any type of body
func NewNetworkLocationsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/network_locations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNetworkLocationsUpdateRequest calls the generic NetworkLocationsUpdate builder with application/json body
func NewNetworkLocationsUpdateRequest(server string, id int, body NetworkLocationsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNetworkLocationsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewNetworkLocationsUpdateRequestWithFormdataBody calls the generic NetworkLocationsUpdate builder with application/x-www-form-urlencoded body
func NewNetworkLocationsUpdateRequestWithFormdataBody(server string, id int, body NetworkLocationsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewNetworkLocationsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewNetworkLocationsUpdateRequestWithBody generates requests for NetworkLocationsUpdate with any type of body
func NewNetworkLocationsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/network_locations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNetworkLocationsDeletePreviewListRequest generates requests for NetworkLocationsDeletePreviewList
func NewNetworkLocationsDeletePreviewListRequest(server string, id int, params *NetworkLocationsDeletePreviewListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/network_locations/%s/delete_preview/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNoteTypeListRequest generates requests for NoteTypeList
func NewNoteTypeListRequest(server string, params *NoteTypeListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/note_type/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsActive != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_active", runtime.ParamLocationQuery, *params.IsActive); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsMandatory != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_mandatory", runtime.ParamLocationQuery, *params.IsMandatory); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsSingle != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_single", runtime.ParamLocationQuery, *params.IsSingle); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNoteTypeCreateRequest calls the generic NoteTypeCreate builder with application/json body
func NewNoteTypeCreateRequest(server string, body NoteTypeCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNoteTypeCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewNoteTypeCreateRequestWithFormdataBody calls the generic NoteTypeCreate builder with application/x-www-form-urlencoded body
func NewNoteTypeCreateRequestWithFormdataBody(server string, body NoteTypeCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewNoteTypeCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewNoteTypeCreateRequestWithBody generates requests for NoteTypeCreate with any type of body
func NewNoteTypeCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/note_type/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNoteTypeDestroyRequest generates requests for NoteTypeDestroy
func NewNoteTypeDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/note_type/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNoteTypeRetrieveRequest generates requests for NoteTypeRetrieve
func NewNoteTypeRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/note_type/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNoteTypePartialUpdateRequest calls the generic NoteTypePartialUpdate builder with application/json body
func NewNoteTypePartialUpdateRequest(server string, id int, body NoteTypePartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNoteTypePartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewNoteTypePartialUpdateRequestWithFormdataBody calls the generic NoteTypePartialUpdate builder with application/x-www-form-urlencoded body
func NewNoteTypePartialUpdateRequestWithFormdataBody(server string, id int, body NoteTypePartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewNoteTypePartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewNoteTypePartialUpdateRequestWithBody generates requests for NoteTypePartialUpdate with any type of body
func NewNoteTypePartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/note_type/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNoteTypeUpdateRequest calls the generic NoteTypeUpdate builder with application/json body
func NewNoteTypeUpdateRequest(server string, id int, body NoteTypeUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNoteTypeUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewNoteTypeUpdateRequestWithFormdataBody calls the generic NoteTypeUpdate builder with application/x-www-form-urlencoded body
func NewNoteTypeUpdateRequestWithFormdataBody(server string, id int, body NoteTypeUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewNoteTypeUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewNoteTypeUpdateRequestWithBody generates requests for NoteTypeUpdate with any type of body
func NewNoteTypeUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/note_type/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNoteTypeDeletePreviewListRequest generates requests for NoteTypeDeletePreviewList
func NewNoteTypeDeletePreviewListRequest(server string, id int, params *NoteTypeDeletePreviewListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/note_type/%s/delete_preview/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNotesListRequest generates requests for NotesList
func NewNotesListRequest(server string, params *NotesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/notes/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Author != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "author", runtime.ParamLocationQuery, *params.Author); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Date != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EditTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "edit_time", runtime.ParamLocationQuery, *params.EditTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Edited != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "edited", runtime.ParamLocationQuery, *params.Edited); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Editor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "editor", runtime.ParamLocationQuery, *params.Editor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Entry != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "entry", runtime.ParamLocationQuery, *params.Entry); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Private != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "private", runtime.ParamLocationQuery, *params.Private); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNotesRetrieveRequest generates requests for NotesRetrieve
func NewNotesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/notes/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNotesPartialUpdateRequest calls the generic NotesPartialUpdate builder with application/json body
func NewNotesPartialUpdateRequest(server string, id int, body NotesPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNotesPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewNotesPartialUpdateRequestWithFormdataBody calls the generic NotesPartialUpdate builder with application/x-www-form-urlencoded body
func NewNotesPartialUpdateRequestWithFormdataBody(server string, id int, body NotesPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewNotesPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewNotesPartialUpdateRequestWithBody generates requests for NotesPartialUpdate with any type of body
func NewNotesPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/notes/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNotesUpdateRequest calls the generic NotesUpdate builder with application/json body
func NewNotesUpdateRequest(server string, id int, body NotesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNotesUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewNotesUpdateRequestWithFormdataBody calls the generic NotesUpdate builder with application/x-www-form-urlencoded body
func NewNotesUpdateRequestWithFormdataBody(server string, id int, body NotesUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewNotesUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewNotesUpdateRequestWithBody generates requests for NotesUpdate with any type of body
func NewNotesUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/notes/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNotificationsListRequest generates requests for NotificationsList
func NewNotificationsListRequest(server string, params *NotificationsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/notifications/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Product != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product", runtime.ParamLocationQuery, *params.Product); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Template != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "template", runtime.ParamLocationQuery, *params.Template); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.User != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user", runtime.ParamLocationQuery, *params.User); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNotificationsCreateRequest calls the generic NotificationsCreate builder with application/json body
func NewNotificationsCreateRequest(server string, body NotificationsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNotificationsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewNotificationsCreateRequestWithFormdataBody calls the generic NotificationsCreate builder with application/x-www-form-urlencoded body
func NewNotificationsCreateRequestWithFormdataBody(server string, body NotificationsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewNotificationsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewNotificationsCreateRequestWithBody generates requests for NotificationsCreate with any type of body
func NewNotificationsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/notifications/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNotificationsDestroyRequest generates requests for NotificationsDestroy
func NewNotificationsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/notifications/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNotificationsRetrieveRequest generates requests for NotificationsRetrieve
func NewNotificationsRetrieveRequest(server string, id int, params *NotificationsRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/notifications/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNotificationsPartialUpdateRequest calls the generic NotificationsPartialUpdate builder with application/json body
func NewNotificationsPartialUpdateRequest(server string, id int, body NotificationsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNotificationsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewNotificationsPartialUpdateRequestWithFormdataBody calls the generic NotificationsPartialUpdate builder with application/x-www-form-urlencoded body
func NewNotificationsPartialUpdateRequestWithFormdataBody(server string, id int, body NotificationsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewNotificationsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewNotificationsPartialUpdateRequestWithBody generates requests for NotificationsPartialUpdate with any type of body
func NewNotificationsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/notifications/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNotificationsUpdateRequest calls the generic NotificationsUpdate builder with application/json body
func NewNotificationsUpdateRequest(server string, id int, body NotificationsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNotificationsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewNotificationsUpdateRequestWithFormdataBody calls the generic NotificationsUpdate builder with application/x-www-form-urlencoded body
func NewNotificationsUpdateRequestWithFormdataBody(server string, id int, body NotificationsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewNotificationsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewNotificationsUpdateRequestWithBody generates requests for NotificationsUpdate with any type of body
func NewNotificationsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/notifications/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNotificationsDeletePreviewListRequest generates requests for NotificationsDeletePreviewList
func NewNotificationsDeletePreviewListRequest(server string, id int, params *NotificationsDeletePreviewListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/notifications/%s/delete_preview/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOa3SchemaRetrieveRequest generates requests for Oa3SchemaRetrieve
func NewOa3SchemaRetrieveRequest(server string, params *Oa3SchemaRetrieveParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/oa3/schema/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lang != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lang", runtime.ParamLocationQuery, *params.Lang); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductApiScanConfigurationsListRequest generates requests for ProductApiScanConfigurationsList
func NewProductApiScanConfigurationsListRequest(server string, params *ProductApiScanConfigurationsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_api_scan_configurations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Product != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product", runtime.ParamLocationQuery, *params.Product); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ServiceKey1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service_key_1", runtime.ParamLocationQuery, *params.ServiceKey1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ServiceKey2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service_key_2", runtime.ParamLocationQuery, *params.ServiceKey2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ServiceKey3 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service_key_3", runtime.ParamLocationQuery, *params.ServiceKey3); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ToolConfiguration != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tool_configuration", runtime.ParamLocationQuery, *params.ToolConfiguration); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductApiScanConfigurationsCreateRequest calls the generic ProductApiScanConfigurationsCreate builder with application/json body
func NewProductApiScanConfigurationsCreateRequest(server string, body ProductApiScanConfigurationsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProductApiScanConfigurationsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewProductApiScanConfigurationsCreateRequestWithFormdataBody calls the generic ProductApiScanConfigurationsCreate builder with application/x-www-form-urlencoded body
func NewProductApiScanConfigurationsCreateRequestWithFormdataBody(server string, body ProductApiScanConfigurationsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewProductApiScanConfigurationsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewProductApiScanConfigurationsCreateRequestWithBody generates requests for ProductApiScanConfigurationsCreate with any type of body
func NewProductApiScanConfigurationsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_api_scan_configurations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProductApiScanConfigurationsDestroyRequest generates requests for ProductApiScanConfigurationsDestroy
func NewProductApiScanConfigurationsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_api_scan_configurations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductApiScanConfigurationsRetrieveRequest generates requests for ProductApiScanConfigurationsRetrieve
func NewProductApiScanConfigurationsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_api_scan_configurations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductApiScanConfigurationsPartialUpdateRequest calls the generic ProductApiScanConfigurationsPartialUpdate builder with application/json body
func NewProductApiScanConfigurationsPartialUpdateRequest(server string, id int, body ProductApiScanConfigurationsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProductApiScanConfigurationsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewProductApiScanConfigurationsPartialUpdateRequestWithFormdataBody calls the generic ProductApiScanConfigurationsPartialUpdate builder with application/x-www-form-urlencoded body
func NewProductApiScanConfigurationsPartialUpdateRequestWithFormdataBody(server string, id int, body ProductApiScanConfigurationsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewProductApiScanConfigurationsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewProductApiScanConfigurationsPartialUpdateRequestWithBody generates requests for ProductApiScanConfigurationsPartialUpdate with any type of body
func NewProductApiScanConfigurationsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_api_scan_configurations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProductApiScanConfigurationsUpdateRequest calls the generic ProductApiScanConfigurationsUpdate builder with application/json body
func NewProductApiScanConfigurationsUpdateRequest(server string, id int, body ProductApiScanConfigurationsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProductApiScanConfigurationsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewProductApiScanConfigurationsUpdateRequestWithFormdataBody calls the generic ProductApiScanConfigurationsUpdate builder with application/x-www-form-urlencoded body
func NewProductApiScanConfigurationsUpdateRequestWithFormdataBody(server string, id int, body ProductApiScanConfigurationsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewProductApiScanConfigurationsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewProductApiScanConfigurationsUpdateRequestWithBody generates requests for ProductApiScanConfigurationsUpdate with any type of body
func NewProductApiScanConfigurationsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_api_scan_configurations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProductApiScanConfigurationsDeletePreviewListRequest generates requests for ProductApiScanConfigurationsDeletePreviewList
func NewProductApiScanConfigurationsDeletePreviewListRequest(server string, id int, params *ProductApiScanConfigurationsDeletePreviewListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_api_scan_configurations/%s/delete_preview/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductGroupsListRequest generates requests for ProductGroupsList
func NewProductGroupsListRequest(server string, params *ProductGroupsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_groups/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.GroupId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "group_id", runtime.ParamLocationQuery, *params.GroupId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProductId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product_id", runtime.ParamLocationQuery, *params.ProductId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductGroupsCreateRequest calls the generic ProductGroupsCreate builder with application/json body
func NewProductGroupsCreateRequest(server string, body ProductGroupsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProductGroupsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewProductGroupsCreateRequestWithFormdataBody calls the generic ProductGroupsCreate builder with application/x-www-form-urlencoded body
func NewProductGroupsCreateRequestWithFormdataBody(server string, body ProductGroupsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewProductGroupsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewProductGroupsCreateRequestWithBody generates requests for ProductGroupsCreate with any type of body
func NewProductGroupsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_groups/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProductGroupsDestroyRequest generates requests for ProductGroupsDestroy
func NewProductGroupsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_groups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductGroupsRetrieveRequest generates requests for ProductGroupsRetrieve
func NewProductGroupsRetrieveRequest(server string, id int, params *ProductGroupsRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_groups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductGroupsPartialUpdateRequest generates requests for ProductGroupsPartialUpdate
func NewProductGroupsPartialUpdateRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_groups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductGroupsUpdateRequest calls the generic ProductGroupsUpdate builder with application/json body
func NewProductGroupsUpdateRequest(server string, id int, body ProductGroupsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProductGroupsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewProductGroupsUpdateRequestWithFormdataBody calls the generic ProductGroupsUpdate builder with application/x-www-form-urlencoded body
func NewProductGroupsUpdateRequestWithFormdataBody(server string, id int, body ProductGroupsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewProductGroupsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewProductGroupsUpdateRequestWithBody generates requests for ProductGroupsUpdate with any type of body
func NewProductGroupsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_groups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProductGroupsDeletePreviewListRequest generates requests for ProductGroupsDeletePreviewList
func NewProductGroupsDeletePreviewListRequest(server string, id int, params *ProductGroupsDeletePreviewListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_groups/%s/delete_preview/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductMembersListRequest generates requests for ProductMembersList
func NewProductMembersListRequest(server string, params *ProductMembersListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_members/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProductId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product_id", runtime.ParamLocationQuery, *params.ProductId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_id", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductMembersCreateRequest calls the generic ProductMembersCreate builder with application/json body
func NewProductMembersCreateRequest(server string, body ProductMembersCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProductMembersCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewProductMembersCreateRequestWithFormdataBody calls the generic ProductMembersCreate builder with application/x-www-form-urlencoded body
func NewProductMembersCreateRequestWithFormdataBody(server string, body ProductMembersCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewProductMembersCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewProductMembersCreateRequestWithBody generates requests for ProductMembersCreate with any type of body
func NewProductMembersCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_members/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProductMembersDestroyRequest generates requests for ProductMembersDestroy
func NewProductMembersDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_members/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductMembersRetrieveRequest generates requests for ProductMembersRetrieve
func NewProductMembersRetrieveRequest(server string, id int, params *ProductMembersRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_members/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductMembersPartialUpdateRequest generates requests for ProductMembersPartialUpdate
func NewProductMembersPartialUpdateRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_members/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductMembersUpdateRequest calls the generic ProductMembersUpdate builder with application/json body
func NewProductMembersUpdateRequest(server string, id int, body ProductMembersUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProductMembersUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewProductMembersUpdateRequestWithFormdataBody calls the generic ProductMembersUpdate builder with application/x-www-form-urlencoded body
func NewProductMembersUpdateRequestWithFormdataBody(server string, id int, body ProductMembersUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewProductMembersUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewProductMembersUpdateRequestWithBody generates requests for ProductMembersUpdate with any type of body
func NewProductMembersUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_members/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProductMembersDeletePreviewListRequest generates requests for ProductMembersDeletePreviewList
func NewProductMembersDeletePreviewListRequest(server string, id int, params *ProductMembersDeletePreviewListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_members/%s/delete_preview/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductTypeGroupsListRequest generates requests for ProductTypeGroupsList
func NewProductTypeGroupsListRequest(server string, params *ProductTypeGroupsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_type_groups/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.GroupId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "group_id", runtime.ParamLocationQuery, *params.GroupId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProductTypeId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product_type_id", runtime.ParamLocationQuery, *params.ProductTypeId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductTypeGroupsCreateRequest calls the generic ProductTypeGroupsCreate builder with application/json body
func NewProductTypeGroupsCreateRequest(server string, body ProductTypeGroupsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProductTypeGroupsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewProductTypeGroupsCreateRequestWithFormdataBody calls the generic ProductTypeGroupsCreate builder with application/x-www-form-urlencoded body
func NewProductTypeGroupsCreateRequestWithFormdataBody(server string, body ProductTypeGroupsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewProductTypeGroupsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewProductTypeGroupsCreateRequestWithBody generates requests for ProductTypeGroupsCreate with any type of body
func NewProductTypeGroupsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_type_groups/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProductTypeGroupsDestroyRequest generates requests for ProductTypeGroupsDestroy
func NewProductTypeGroupsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_type_groups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductTypeGroupsRetrieveRequest generates requests for ProductTypeGroupsRetrieve
func NewProductTypeGroupsRetrieveRequest(server string, id int, params *ProductTypeGroupsRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_type_groups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductTypeGroupsPartialUpdateRequest generates requests for ProductTypeGroupsPartialUpdate
func NewProductTypeGroupsPartialUpdateRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_type_groups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductTypeGroupsUpdateRequest calls the generic ProductTypeGroupsUpdate builder with application/json body
func NewProductTypeGroupsUpdateRequest(server string, id int, body ProductTypeGroupsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProductTypeGroupsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewProductTypeGroupsUpdateRequestWithFormdataBody calls the generic ProductTypeGroupsUpdate builder with application/x-www-form-urlencoded body
func NewProductTypeGroupsUpdateRequestWithFormdataBody(server string, id int, body ProductTypeGroupsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewProductTypeGroupsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewProductTypeGroupsUpdateRequestWithBody generates requests for ProductTypeGroupsUpdate with any type of body
func NewProductTypeGroupsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_type_groups/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProductTypeGroupsDeletePreviewListRequest generates requests for ProductTypeGroupsDeletePreviewList
func NewProductTypeGroupsDeletePreviewListRequest(server string, id int, params *ProductTypeGroupsDeletePreviewListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_type_groups/%s/delete_preview/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductTypeMembersListRequest generates requests for ProductTypeMembersList
func NewProductTypeMembersListRequest(server string, params *ProductTypeMembersListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_type_members/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProductTypeId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product_type_id", runtime.ParamLocationQuery, *params.ProductTypeId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_id", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductTypeMembersCreateRequest calls the generic ProductTypeMembersCreate builder with application/json body
func NewProductTypeMembersCreateRequest(server string, body ProductTypeMembersCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProductTypeMembersCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewProductTypeMembersCreateRequestWithFormdataBody calls the generic ProductTypeMembersCreate builder with application/x-www-form-urlencoded body
func NewProductTypeMembersCreateRequestWithFormdataBody(server string, body ProductTypeMembersCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewProductTypeMembersCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewProductTypeMembersCreateRequestWithBody generates requests for ProductTypeMembersCreate with any type of body
func NewProductTypeMembersCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_type_members/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProductTypeMembersDestroyRequest generates requests for ProductTypeMembersDestroy
func NewProductTypeMembersDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_type_members/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductTypeMembersRetrieveRequest generates requests for ProductTypeMembersRetrieve
func NewProductTypeMembersRetrieveRequest(server string, id int, params *ProductTypeMembersRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_type_members/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductTypeMembersPartialUpdateRequest generates requests for ProductTypeMembersPartialUpdate
func NewProductTypeMembersPartialUpdateRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_type_members/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductTypeMembersUpdateRequest calls the generic ProductTypeMembersUpdate builder with application/json body
func NewProductTypeMembersUpdateRequest(server string, id int, body ProductTypeMembersUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProductTypeMembersUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewProductTypeMembersUpdateRequestWithFormdataBody calls the generic ProductTypeMembersUpdate builder with application/x-www-form-urlencoded body
func NewProductTypeMembersUpdateRequestWithFormdataBody(server string, id int, body ProductTypeMembersUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewProductTypeMembersUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewProductTypeMembersUpdateRequestWithBody generates requests for ProductTypeMembersUpdate with any type of body
func NewProductTypeMembersUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_type_members/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProductTypeMembersDeletePreviewListRequest generates requests for ProductTypeMembersDeletePreviewList
func NewProductTypeMembersDeletePreviewListRequest(server string, id int, params *ProductTypeMembersDeletePreviewListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_type_members/%s/delete_preview/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductTypesListRequest generates requests for ProductTypesList
func NewProductTypesListRequest(server string, params *ProductTypesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_types/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Created != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created", runtime.ParamLocationQuery, *params.Created); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CriticalProduct != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "critical_product", runtime.ParamLocationQuery, *params.CriticalProduct); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.KeyProduct != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key_product", runtime.ParamLocationQuery, *params.KeyProduct); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Updated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated", runtime.ParamLocationQuery, *params.Updated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductTypesCreateRequest calls the generic ProductTypesCreate builder with application/json body
func NewProductTypesCreateRequest(server string, body ProductTypesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProductTypesCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewProductTypesCreateRequestWithFormdataBody calls the generic ProductTypesCreate builder with application/x-www-form-urlencoded body
func NewProductTypesCreateRequestWithFormdataBody(server string, body ProductTypesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewProductTypesCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewProductTypesCreateRequestWithBody generates requests for ProductTypesCreate with any type of body
func NewProductTypesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_types/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProductTypesDestroyRequest generates requests for ProductTypesDestroy
func NewProductTypesDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_types/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductTypesRetrieveRequest generates requests for ProductTypesRetrieve
func NewProductTypesRetrieveRequest(server string, id int, params *ProductTypesRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_types/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductTypesPartialUpdateRequest calls the generic ProductTypesPartialUpdate builder with application/json body
func NewProductTypesPartialUpdateRequest(server string, id int, body ProductTypesPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProductTypesPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewProductTypesPartialUpdateRequestWithFormdataBody calls the generic ProductTypesPartialUpdate builder with application/x-www-form-urlencoded body
func NewProductTypesPartialUpdateRequestWithFormdataBody(server string, id int, body ProductTypesPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewProductTypesPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewProductTypesPartialUpdateRequestWithBody generates requests for ProductTypesPartialUpdate with any type of body
func NewProductTypesPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_types/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProductTypesUpdateRequest calls the generic ProductTypesUpdate builder with application/json body
func NewProductTypesUpdateRequest(server string, id int, body ProductTypesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProductTypesUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewProductTypesUpdateRequestWithFormdataBody calls the generic ProductTypesUpdate builder with application/x-www-form-urlencoded body
func NewProductTypesUpdateRequestWithFormdataBody(server string, id int, body ProductTypesUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewProductTypesUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewProductTypesUpdateRequestWithBody generates requests for ProductTypesUpdate with any type of body
func NewProductTypesUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_types/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProductTypesDeletePreviewListRequest generates requests for ProductTypesDeletePreviewList
func NewProductTypesDeletePreviewListRequest(server string, id int, params *ProductTypesDeletePreviewListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_types/%s/delete_preview/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductTypesGenerateReportCreateRequest calls the generic ProductTypesGenerateReportCreate builder with application/json body
func NewProductTypesGenerateReportCreateRequest(server string, id int, body ProductTypesGenerateReportCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProductTypesGenerateReportCreateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewProductTypesGenerateReportCreateRequestWithFormdataBody calls the generic ProductTypesGenerateReportCreate builder with application/x-www-form-urlencoded body
func NewProductTypesGenerateReportCreateRequestWithFormdataBody(server string, id int, body ProductTypesGenerateReportCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewProductTypesGenerateReportCreateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewProductTypesGenerateReportCreateRequestWithBody generates requests for ProductTypesGenerateReportCreate with any type of body
func NewProductTypesGenerateReportCreateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/product_types/%s/generate_report/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProductsListRequest generates requests for ProductsList
func NewProductsListRequest(server string, params *ProductsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/products/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BusinessCriticality != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "business_criticality", runtime.ParamLocationQuery, *params.BusinessCriticality); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Created != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created", runtime.ParamLocationQuery, *params.Created); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalAudience != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_audience", runtime.ParamLocationQuery, *params.ExternalAudience); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InternetAccessible != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "internet_accessible", runtime.ParamLocationQuery, *params.InternetAccessible); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lifecycle != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lifecycle", runtime.ParamLocationQuery, *params.Lifecycle); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameExact != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name_exact", runtime.ParamLocationQuery, *params.NameExact); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotTag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_tag", runtime.ParamLocationQuery, *params.NotTag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_tags", runtime.ParamLocationQuery, *params.NotTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.O != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "o", runtime.ParamLocationQuery, *params.O); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Origin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "origin", runtime.ParamLocationQuery, *params.Origin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Platform != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "platform", runtime.ParamLocationQuery, *params.Platform); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProdNumericGrade != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "prod_numeric_grade", runtime.ParamLocationQuery, *params.ProdNumericGrade); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProdType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "prod_type", runtime.ParamLocationQuery, *params.ProdType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProductManager != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "product_manager", runtime.ParamLocationQuery, *params.ProductManager); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Regulations != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "regulations", runtime.ParamLocationQuery, *params.Regulations); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Revenue != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "revenue", runtime.ParamLocationQuery, *params.Revenue); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TeamManager != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "team_manager", runtime.ParamLocationQuery, *params.TeamManager); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TechnicalContact != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "technical_contact", runtime.ParamLocationQuery, *params.TechnicalContact); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "tid", runtime.ParamLocationQuery, *params.Tid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Updated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated", runtime.ParamLocationQuery, *params.Updated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserRecords != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_records", runtime.ParamLocationQuery, *params.UserRecords); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductsCreateRequest calls the generic ProductsCreate builder with application/json body
func NewProductsCreateRequest(server string, body ProductsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProductsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewProductsCreateRequestWithFormdataBody calls the generic ProductsCreate builder with application/x-www-form-urlencoded body
func NewProductsCreateRequestWithFormdataBody(server string, body ProductsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewProductsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewProductsCreateRequestWithBody generates requests for ProductsCreate with any type of body
func NewProductsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/products/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProductsDestroyRequest generates requests for ProductsDestroy
func NewProductsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/products/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductsRetrieveRequest generates requests for ProductsRetrieve
func NewProductsRetrieveRequest(server string, id int, params *ProductsRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/products/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductsPartialUpdateRequest calls the generic ProductsPartialUpdate builder with application/json body
func NewProductsPartialUpdateRequest(server string, id int, body ProductsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProductsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewProductsPartialUpdateRequestWithFormdataBody calls the generic ProductsPartialUpdate builder with application/x-www-form-urlencoded body
func NewProductsPartialUpdateRequestWithFormdataBody(server string, id int, body ProductsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewProductsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewProductsPartialUpdateRequestWithBody generates requests for ProductsPartialUpdate with any type of body
func NewProductsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/products/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProductsUpdateRequest calls the generic ProductsUpdate builder with application/json body
func NewProductsUpdateRequest(server string, id int, body ProductsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProductsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewProductsUpdateRequestWithFormdataBody calls the generic ProductsUpdate builder with application/x-www-form-urlencoded body
func NewProductsUpdateRequestWithFormdataBody(server string, id int, body ProductsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewProductsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewProductsUpdateRequestWithBody generates requests for ProductsUpdate with any type of body
func NewProductsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/products/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProductsDeletePreviewListRequest generates requests for ProductsDeletePreviewList
func NewProductsDeletePreviewListRequest(server string, id int, params *ProductsDeletePreviewListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/products/%s/delete_preview/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductsGenerateReportCreateRequest calls the generic ProductsGenerateReportCreate builder with application/json body
func NewProductsGenerateReportCreateRequest(server string, id int, body ProductsGenerateReportCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProductsGenerateReportCreateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewProductsGenerateReportCreateRequestWithFormdataBody calls the generic ProductsGenerateReportCreate builder with application/x-www-form-urlencoded body
func NewProductsGenerateReportCreateRequestWithFormdataBody(server string, id int, body ProductsGenerateReportCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewProductsGenerateReportCreateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewProductsGenerateReportCreateRequestWithBody generates requests for ProductsGenerateReportCreate with any type of body
func NewProductsGenerateReportCreateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/products/%s/generate_report/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQuestionnaireAnsweredQuestionnairesListRequest generates requests for QuestionnaireAnsweredQuestionnairesList
func NewQuestionnaireAnsweredQuestionnairesListRequest(server string, params *QuestionnaireAnsweredQuestionnairesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/questionnaire_answered_questionnaires/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuestionnaireAnsweredQuestionnairesRetrieveRequest generates requests for QuestionnaireAnsweredQuestionnairesRetrieve
func NewQuestionnaireAnsweredQuestionnairesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/questionnaire_answered_questionnaires/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuestionnaireAnswersListRequest generates requests for QuestionnaireAnswersList
func NewQuestionnaireAnswersListRequest(server string, params *QuestionnaireAnswersListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/questionnaire_answers/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuestionnaireAnswersRetrieveRequest generates requests for QuestionnaireAnswersRetrieve
func NewQuestionnaireAnswersRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/questionnaire_answers/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuestionnaireEngagementQuestionnairesListRequest generates requests for QuestionnaireEngagementQuestionnairesList
func NewQuestionnaireEngagementQuestionnairesListRequest(server string, params *QuestionnaireEngagementQuestionnairesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/questionnaire_engagement_questionnaires/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuestionnaireEngagementQuestionnairesRetrieveRequest generates requests for QuestionnaireEngagementQuestionnairesRetrieve
func NewQuestionnaireEngagementQuestionnairesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/questionnaire_engagement_questionnaires/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuestionnaireGeneralQuestionnairesListRequest generates requests for QuestionnaireGeneralQuestionnairesList
func NewQuestionnaireGeneralQuestionnairesListRequest(server string, params *QuestionnaireGeneralQuestionnairesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/questionnaire_general_questionnaires/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuestionnaireGeneralQuestionnairesRetrieveRequest generates requests for QuestionnaireGeneralQuestionnairesRetrieve
func NewQuestionnaireGeneralQuestionnairesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/questionnaire_general_questionnaires/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuestionnaireQuestionsListRequest generates requests for QuestionnaireQuestionsList
func NewQuestionnaireQuestionsListRequest(server string, params *QuestionnaireQuestionsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/questionnaire_questions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuestionnaireQuestionsRetrieveRequest generates requests for QuestionnaireQuestionsRetrieve
func NewQuestionnaireQuestionsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/questionnaire_questions/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRegulationsListRequest generates requests for RegulationsList
func NewRegulationsListRequest(server string, params *RegulationsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/regulations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRegulationsCreateRequest calls the generic RegulationsCreate builder with application/json body
func NewRegulationsCreateRequest(server string, body RegulationsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegulationsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewRegulationsCreateRequestWithFormdataBody calls the generic RegulationsCreate builder with application/x-www-form-urlencoded body
func NewRegulationsCreateRequestWithFormdataBody(server string, body RegulationsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewRegulationsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewRegulationsCreateRequestWithBody generates requests for RegulationsCreate with any type of body
func NewRegulationsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/regulations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRegulationsDestroyRequest generates requests for RegulationsDestroy
func NewRegulationsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/regulations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRegulationsRetrieveRequest generates requests for RegulationsRetrieve
func NewRegulationsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/regulations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRegulationsPartialUpdateRequest calls the generic RegulationsPartialUpdate builder with application/json body
func NewRegulationsPartialUpdateRequest(server string, id int, body RegulationsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegulationsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewRegulationsPartialUpdateRequestWithFormdataBody calls the generic RegulationsPartialUpdate builder with application/x-www-form-urlencoded body
func NewRegulationsPartialUpdateRequestWithFormdataBody(server string, id int, body RegulationsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewRegulationsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewRegulationsPartialUpdateRequestWithBody generates requests for RegulationsPartialUpdate with any type of body
func NewRegulationsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/regulations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRegulationsUpdateRequest calls the generic RegulationsUpdate builder with application/json body
func NewRegulationsUpdateRequest(server string, id int, body RegulationsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegulationsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewRegulationsUpdateRequestWithFormdataBody calls the generic RegulationsUpdate builder with application/x-www-form-urlencoded body
func NewRegulationsUpdateRequestWithFormdataBody(server string, id int, body RegulationsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewRegulationsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewRegulationsUpdateRequestWithBody generates requests for RegulationsUpdate with any type of body
func NewRegulationsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/regulations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRegulationsDeletePreviewListRequest generates requests for RegulationsDeletePreviewList
func NewRegulationsDeletePreviewListRequest(server string, id int, params *RegulationsDeletePreviewListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/regulations/%s/delete_preview/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReimportScanCreateRequestWithBody generates requests for ReimportScanCreate with any type of body
func NewReimportScanCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/reimport-scan/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRiskAcceptanceListRequest generates requests for RiskAcceptanceList
func NewRiskAcceptanceListRequest(server string, params *RiskAcceptanceListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/risk_acceptance/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AcceptedBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accepted_by", runtime.ParamLocationQuery, *params.AcceptedBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AcceptedFindings != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accepted_findings", runtime.ParamLocationQuery, *params.AcceptedFindings); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Decision != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "decision", runtime.ParamLocationQuery, *params.Decision); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DecisionDetails != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "decision_details", runtime.ParamLocationQuery, *params.DecisionDetails); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExpirationDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expiration_date", runtime.ParamLocationQuery, *params.ExpirationDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExpirationDateHandled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expiration_date_handled", runtime.ParamLocationQuery, *params.ExpirationDateHandled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExpirationDateWarned != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expiration_date_warned", runtime.ParamLocationQuery, *params.ExpirationDateWarned); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Notes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "notes", runtime.ParamLocationQuery, *params.Notes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.O != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "o", runtime.ParamLocationQuery, *params.O); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Owner != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owner", runtime.ParamLocationQuery, *params.Owner); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReactivateExpired != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reactivate_expired", runtime.ParamLocationQuery, *params.ReactivateExpired); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Recommendation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "recommendation", runtime.ParamLocationQuery, *params.Recommendation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RecommendationDetails != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "recommendation_details", runtime.ParamLocationQuery, *params.RecommendationDetails); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RestartSlaExpired != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "restart_sla_expired", runtime.ParamLocationQuery, *params.RestartSlaExpired); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRiskAcceptanceDestroyRequest generates requests for RiskAcceptanceDestroy
func NewRiskAcceptanceDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/risk_acceptance/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRiskAcceptanceRetrieveRequest generates requests for RiskAcceptanceRetrieve
func NewRiskAcceptanceRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/risk_acceptance/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRiskAcceptanceDeletePreviewListRequest generates requests for RiskAcceptanceDeletePreviewList
func NewRiskAcceptanceDeletePreviewListRequest(server string, id int, params *RiskAcceptanceDeletePreviewListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/risk_acceptance/%s/delete_preview/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRiskAcceptanceDownloadProofRetrieveRequest generates requests for RiskAcceptanceDownloadProofRetrieve
func NewRiskAcceptanceDownloadProofRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/risk_acceptance/%s/download_proof/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRolesListRequest generates requests for RolesList
func NewRolesListRequest(server string, params *RolesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/roles/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRolesRetrieveRequest generates requests for RolesRetrieve
func NewRolesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/roles/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlaConfigurationsListRequest generates requests for SlaConfigurationsList
func NewSlaConfigurationsListRequest(server string, params *SlaConfigurationsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/sla_configurations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlaConfigurationsCreateRequest calls the generic SlaConfigurationsCreate builder with application/json body
func NewSlaConfigurationsCreateRequest(server string, body SlaConfigurationsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlaConfigurationsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewSlaConfigurationsCreateRequestWithFormdataBody calls the generic SlaConfigurationsCreate builder with application/x-www-form-urlencoded body
func NewSlaConfigurationsCreateRequestWithFormdataBody(server string, body SlaConfigurationsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewSlaConfigurationsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewSlaConfigurationsCreateRequestWithBody generates requests for SlaConfigurationsCreate with any type of body
func NewSlaConfigurationsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/sla_configurations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlaConfigurationsDestroyRequest generates requests for SlaConfigurationsDestroy
func NewSlaConfigurationsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/sla_configurations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlaConfigurationsRetrieveRequest generates requests for SlaConfigurationsRetrieve
func NewSlaConfigurationsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/sla_configurations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSlaConfigurationsPartialUpdateRequest calls the generic SlaConfigurationsPartialUpdate builder with application/json body
func NewSlaConfigurationsPartialUpdateRequest(server string, id int, body SlaConfigurationsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlaConfigurationsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewSlaConfigurationsPartialUpdateRequestWithFormdataBody calls the generic SlaConfigurationsPartialUpdate builder with application/x-www-form-urlencoded body
func NewSlaConfigurationsPartialUpdateRequestWithFormdataBody(server string, id int, body SlaConfigurationsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewSlaConfigurationsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewSlaConfigurationsPartialUpdateRequestWithBody generates requests for SlaConfigurationsPartialUpdate with any type of body
func NewSlaConfigurationsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/sla_configurations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSlaConfigurationsUpdateRequest calls the generic SlaConfigurationsUpdate builder with application/json body
func NewSlaConfigurationsUpdateRequest(server string, id int, body SlaConfigurationsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSlaConfigurationsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewSlaConfigurationsUpdateRequestWithFormdataBody calls the generic SlaConfigurationsUpdate builder with application/x-www-form-urlencoded body
func NewSlaConfigurationsUpdateRequestWithFormdataBody(server string, id int, body SlaConfigurationsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewSlaConfigurationsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewSlaConfigurationsUpdateRequestWithBody generates requests for SlaConfigurationsUpdate with any type of body
func NewSlaConfigurationsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/sla_configurations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSonarqubeIssuesListRequest generates requests for SonarqubeIssuesList
func NewSonarqubeIssuesListRequest(server string, params *SonarqubeIssuesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/sonarqube_issues/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Key != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSonarqubeIssuesCreateRequest calls the generic SonarqubeIssuesCreate builder with application/json body
func NewSonarqubeIssuesCreateRequest(server string, body SonarqubeIssuesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSonarqubeIssuesCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewSonarqubeIssuesCreateRequestWithFormdataBody calls the generic SonarqubeIssuesCreate builder with application/x-www-form-urlencoded body
func NewSonarqubeIssuesCreateRequestWithFormdataBody(server string, body SonarqubeIssuesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewSonarqubeIssuesCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewSonarqubeIssuesCreateRequestWithBody generates requests for SonarqubeIssuesCreate with any type of body
func NewSonarqubeIssuesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/sonarqube_issues/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSonarqubeIssuesDestroyRequest generates requests for SonarqubeIssuesDestroy
func NewSonarqubeIssuesDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/sonarqube_issues/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSonarqubeIssuesRetrieveRequest generates requests for SonarqubeIssuesRetrieve
func NewSonarqubeIssuesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/sonarqube_issues/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSonarqubeIssuesPartialUpdateRequest calls the generic SonarqubeIssuesPartialUpdate builder with application/json body
func NewSonarqubeIssuesPartialUpdateRequest(server string, id int, body SonarqubeIssuesPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSonarqubeIssuesPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewSonarqubeIssuesPartialUpdateRequestWithFormdataBody calls the generic SonarqubeIssuesPartialUpdate builder with application/x-www-form-urlencoded body
func NewSonarqubeIssuesPartialUpdateRequestWithFormdataBody(server string, id int, body SonarqubeIssuesPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewSonarqubeIssuesPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewSonarqubeIssuesPartialUpdateRequestWithBody generates requests for SonarqubeIssuesPartialUpdate with any type of body
func NewSonarqubeIssuesPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/sonarqube_issues/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSonarqubeIssuesUpdateRequest calls the generic SonarqubeIssuesUpdate builder with application/json body
func NewSonarqubeIssuesUpdateRequest(server string, id int, body SonarqubeIssuesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSonarqubeIssuesUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewSonarqubeIssuesUpdateRequestWithFormdataBody calls the generic SonarqubeIssuesUpdate builder with application/x-www-form-urlencoded body
func NewSonarqubeIssuesUpdateRequestWithFormdataBody(server string, id int, body SonarqubeIssuesUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewSonarqubeIssuesUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewSonarqubeIssuesUpdateRequestWithBody generates requests for SonarqubeIssuesUpdate with any type of body
func NewSonarqubeIssuesUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/sonarqube_issues/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSonarqubeIssuesDeletePreviewListRequest generates requests for SonarqubeIssuesDeletePreviewList
func NewSonarqubeIssuesDeletePreviewListRequest(server string, id int, params *SonarqubeIssuesDeletePreviewListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/sonarqube_issues/%s/delete_preview/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSonarqubeTransitionsListRequest generates requests for SonarqubeTransitionsList
func NewSonarqubeTransitionsListRequest(server string, params *SonarqubeTransitionsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/sonarqube_transitions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FindingStatus != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "finding_status", runtime.ParamLocationQuery, *params.FindingStatus); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SonarqubeIssue != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sonarqube_issue", runtime.ParamLocationQuery, *params.SonarqubeIssue); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SonarqubeStatus != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sonarqube_status", runtime.ParamLocationQuery, *params.SonarqubeStatus); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Transitions != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transitions", runtime.ParamLocationQuery, *params.Transitions); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSonarqubeTransitionsCreateRequest calls the generic SonarqubeTransitionsCreate builder with application/json body
func NewSonarqubeTransitionsCreateRequest(server string, body SonarqubeTransitionsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSonarqubeTransitionsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewSonarqubeTransitionsCreateRequestWithFormdataBody calls the generic SonarqubeTransitionsCreate builder with application/x-www-form-urlencoded body
func NewSonarqubeTransitionsCreateRequestWithFormdataBody(server string, body SonarqubeTransitionsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewSonarqubeTransitionsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewSonarqubeTransitionsCreateRequestWithBody generates requests for SonarqubeTransitionsCreate with any type of body
func NewSonarqubeTransitionsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/sonarqube_transitions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSonarqubeTransitionsDestroyRequest generates requests for SonarqubeTransitionsDestroy
func NewSonarqubeTransitionsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/sonarqube_transitions/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSonarqubeTransitionsRetrieveRequest generates requests for SonarqubeTransitionsRetrieve
func NewSonarqubeTransitionsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/sonarqube_transitions/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSonarqubeTransitionsPartialUpdateRequest calls the generic SonarqubeTransitionsPartialUpdate builder with application/json body
func NewSonarqubeTransitionsPartialUpdateRequest(server string, id int, body SonarqubeTransitionsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSonarqubeTransitionsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewSonarqubeTransitionsPartialUpdateRequestWithFormdataBody calls the generic SonarqubeTransitionsPartialUpdate builder with application/x-www-form-urlencoded body
func NewSonarqubeTransitionsPartialUpdateRequestWithFormdataBody(server string, id int, body SonarqubeTransitionsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewSonarqubeTransitionsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewSonarqubeTransitionsPartialUpdateRequestWithBody generates requests for SonarqubeTransitionsPartialUpdate with any type of body
func NewSonarqubeTransitionsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/sonarqube_transitions/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSonarqubeTransitionsUpdateRequest calls the generic SonarqubeTransitionsUpdate builder with application/json body
func NewSonarqubeTransitionsUpdateRequest(server string, id int, body SonarqubeTransitionsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSonarqubeTransitionsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewSonarqubeTransitionsUpdateRequestWithFormdataBody calls the generic SonarqubeTransitionsUpdate builder with application/x-www-form-urlencoded body
func NewSonarqubeTransitionsUpdateRequestWithFormdataBody(server string, id int, body SonarqubeTransitionsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewSonarqubeTransitionsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewSonarqubeTransitionsUpdateRequestWithBody generates requests for SonarqubeTransitionsUpdate with any type of body
func NewSonarqubeTransitionsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/sonarqube_transitions/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSonarqubeTransitionsDeletePreviewListRequest generates requests for SonarqubeTransitionsDeletePreviewList
func NewSonarqubeTransitionsDeletePreviewListRequest(server string, id int, params *SonarqubeTransitionsDeletePreviewListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/sonarqube_transitions/%s/delete_preview/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStubFindingsListRequest generates requests for StubFindingsList
func NewStubFindingsListRequest(server string, params *StubFindingsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/stub_findings/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Date != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Severity != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "severity", runtime.ParamLocationQuery, *params.Severity); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Title != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "title", runtime.ParamLocationQuery, *params.Title); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStubFindingsCreateRequest calls the generic StubFindingsCreate builder with application/json body
func NewStubFindingsCreateRequest(server string, body StubFindingsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStubFindingsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewStubFindingsCreateRequestWithFormdataBody calls the generic StubFindingsCreate builder with application/x-www-form-urlencoded body
func NewStubFindingsCreateRequestWithFormdataBody(server string, body StubFindingsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewStubFindingsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewStubFindingsCreateRequestWithBody generates requests for StubFindingsCreate with any type of body
func NewStubFindingsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/stub_findings/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewStubFindingsDestroyRequest generates requests for StubFindingsDestroy
func NewStubFindingsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/stub_findings/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStubFindingsRetrieveRequest generates requests for StubFindingsRetrieve
func NewStubFindingsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/stub_findings/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStubFindingsPartialUpdateRequest calls the generic StubFindingsPartialUpdate builder with application/json body
func NewStubFindingsPartialUpdateRequest(server string, id int, body StubFindingsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStubFindingsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewStubFindingsPartialUpdateRequestWithFormdataBody calls the generic StubFindingsPartialUpdate builder with application/x-www-form-urlencoded body
func NewStubFindingsPartialUpdateRequestWithFormdataBody(server string, id int, body StubFindingsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewStubFindingsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewStubFindingsPartialUpdateRequestWithBody generates requests for StubFindingsPartialUpdate with any type of body
func NewStubFindingsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/stub_findings/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewStubFindingsUpdateRequest calls the generic StubFindingsUpdate builder with application/json body
func NewStubFindingsUpdateRequest(server string, id int, body StubFindingsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStubFindingsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewStubFindingsUpdateRequestWithFormdataBody calls the generic StubFindingsUpdate builder with application/x-www-form-urlencoded body
func NewStubFindingsUpdateRequestWithFormdataBody(server string, id int, body StubFindingsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewStubFindingsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewStubFindingsUpdateRequestWithBody generates requests for StubFindingsUpdate with any type of body
func NewStubFindingsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/stub_findings/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewStubFindingsDeletePreviewListRequest generates requests for StubFindingsDeletePreviewList
func NewStubFindingsDeletePreviewListRequest(server string, id int, params *StubFindingsDeletePreviewListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/stub_findings/%s/delete_preview/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSystemSettingsListRequest generates requests for SystemSettingsList
func NewSystemSettingsListRequest(server string, params *SystemSettingsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/system_settings/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSystemSettingsPartialUpdateRequest calls the generic SystemSettingsPartialUpdate builder with application/json body
func NewSystemSettingsPartialUpdateRequest(server string, id int, body SystemSettingsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSystemSettingsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewSystemSettingsPartialUpdateRequestWithFormdataBody calls the generic SystemSettingsPartialUpdate builder with application/x-www-form-urlencoded body
func NewSystemSettingsPartialUpdateRequestWithFormdataBody(server string, id int, body SystemSettingsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewSystemSettingsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewSystemSettingsPartialUpdateRequestWithBody generates requests for SystemSettingsPartialUpdate with any type of body
func NewSystemSettingsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/system_settings/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSystemSettingsUpdateRequest calls the generic SystemSettingsUpdate builder with application/json body
func NewSystemSettingsUpdateRequest(server string, id int, body SystemSettingsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSystemSettingsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewSystemSettingsUpdateRequestWithFormdataBody calls the generic SystemSettingsUpdate builder with application/x-www-form-urlencoded body
func NewSystemSettingsUpdateRequestWithFormdataBody(server string, id int, body SystemSettingsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewSystemSettingsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewSystemSettingsUpdateRequestWithBody generates requests for SystemSettingsUpdate with any type of body
func NewSystemSettingsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/system_settings/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTechnologiesListRequest generates requests for TechnologiesList
func NewTechnologiesListRequest(server string, params *TechnologiesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/technologies/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotTag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_tag", runtime.ParamLocationQuery, *params.NotTag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_tags", runtime.ParamLocationQuery, *params.NotTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Product != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product", runtime.ParamLocationQuery, *params.Product); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.User != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user", runtime.ParamLocationQuery, *params.User); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTechnologiesCreateRequest calls the generic TechnologiesCreate builder with application/json body
func NewTechnologiesCreateRequest(server string, body TechnologiesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTechnologiesCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewTechnologiesCreateRequestWithFormdataBody calls the generic TechnologiesCreate builder with application/x-www-form-urlencoded body
func NewTechnologiesCreateRequestWithFormdataBody(server string, body TechnologiesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTechnologiesCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewTechnologiesCreateRequestWithBody generates requests for TechnologiesCreate with any type of body
func NewTechnologiesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/technologies/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTechnologiesDestroyRequest generates requests for TechnologiesDestroy
func NewTechnologiesDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/technologies/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTechnologiesRetrieveRequest generates requests for TechnologiesRetrieve
func NewTechnologiesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/technologies/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTechnologiesPartialUpdateRequest calls the generic TechnologiesPartialUpdate builder with application/json body
func NewTechnologiesPartialUpdateRequest(server string, id int, body TechnologiesPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTechnologiesPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewTechnologiesPartialUpdateRequestWithFormdataBody calls the generic TechnologiesPartialUpdate builder with application/x-www-form-urlencoded body
func NewTechnologiesPartialUpdateRequestWithFormdataBody(server string, id int, body TechnologiesPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTechnologiesPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewTechnologiesPartialUpdateRequestWithBody generates requests for TechnologiesPartialUpdate with any type of body
func NewTechnologiesPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/technologies/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTechnologiesUpdateRequest calls the generic TechnologiesUpdate builder with application/json body
func NewTechnologiesUpdateRequest(server string, id int, body TechnologiesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTechnologiesUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewTechnologiesUpdateRequestWithFormdataBody calls the generic TechnologiesUpdate builder with application/x-www-form-urlencoded body
func NewTechnologiesUpdateRequestWithFormdataBody(server string, id int, body TechnologiesUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTechnologiesUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewTechnologiesUpdateRequestWithBody generates requests for TechnologiesUpdate with any type of body
func NewTechnologiesUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/technologies/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTechnologiesDeletePreviewListRequest generates requests for TechnologiesDeletePreviewList
func NewTechnologiesDeletePreviewListRequest(server string, id int, params *TechnologiesDeletePreviewListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/technologies/%s/delete_preview/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestImportsListRequest generates requests for TestImportsList
func NewTestImportsListRequest(server string, params *TestImportsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/test_imports/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BranchTag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "branch_tag", runtime.ParamLocationQuery, *params.BranchTag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BuildId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "build_id", runtime.ParamLocationQuery, *params.BuildId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CommitHash != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "commit_hash", runtime.ParamLocationQuery, *params.CommitHash); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FindingsAffected != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "findings_affected", runtime.ParamLocationQuery, *params.FindingsAffected); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Test != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "test", runtime.ParamLocationQuery, *params.Test); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TestImportFindingActionAction != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "test_import_finding_action__action", runtime.ParamLocationQuery, *params.TestImportFindingActionAction); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TestImportFindingActionCreated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "test_import_finding_action__created", runtime.ParamLocationQuery, *params.TestImportFindingActionCreated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TestImportFindingActionFinding != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "test_import_finding_action__finding", runtime.ParamLocationQuery, *params.TestImportFindingActionFinding); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestImportsCreateRequest calls the generic TestImportsCreate builder with application/json body
func NewTestImportsCreateRequest(server string, body TestImportsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTestImportsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewTestImportsCreateRequestWithFormdataBody calls the generic TestImportsCreate builder with application/x-www-form-urlencoded body
func NewTestImportsCreateRequestWithFormdataBody(server string, body TestImportsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTestImportsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewTestImportsCreateRequestWithBody generates requests for TestImportsCreate with any type of body
func NewTestImportsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/test_imports/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTestImportsDestroyRequest generates requests for TestImportsDestroy
func NewTestImportsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/test_imports/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestImportsRetrieveRequest generates requests for TestImportsRetrieve
func NewTestImportsRetrieveRequest(server string, id int, params *TestImportsRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/test_imports/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestImportsPartialUpdateRequest calls the generic TestImportsPartialUpdate builder with application/json body
func NewTestImportsPartialUpdateRequest(server string, id int, body TestImportsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTestImportsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewTestImportsPartialUpdateRequestWithFormdataBody calls the generic TestImportsPartialUpdate builder with application/x-www-form-urlencoded body
func NewTestImportsPartialUpdateRequestWithFormdataBody(server string, id int, body TestImportsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTestImportsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewTestImportsPartialUpdateRequestWithBody generates requests for TestImportsPartialUpdate with any type of body
func NewTestImportsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/test_imports/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTestImportsUpdateRequest calls the generic TestImportsUpdate builder with application/json body
func NewTestImportsUpdateRequest(server string, id int, body TestImportsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTestImportsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewTestImportsUpdateRequestWithFormdataBody calls the generic TestImportsUpdate builder with application/x-www-form-urlencoded body
func NewTestImportsUpdateRequestWithFormdataBody(server string, id int, body TestImportsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTestImportsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewTestImportsUpdateRequestWithBody generates requests for TestImportsUpdate with any type of body
func NewTestImportsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/test_imports/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTestImportsDeletePreviewListRequest generates requests for TestImportsDeletePreviewList
func NewTestImportsDeletePreviewListRequest(server string, id int, params *TestImportsDeletePreviewListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/test_imports/%s/delete_preview/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestTypesListRequest generates requests for TestTypesList
func NewTestTypesListRequest(server string, params *TestTypesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/test_types/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestTypesCreateRequest calls the generic TestTypesCreate builder with application/json body
func NewTestTypesCreateRequest(server string, body TestTypesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTestTypesCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewTestTypesCreateRequestWithFormdataBody calls the generic TestTypesCreate builder with application/x-www-form-urlencoded body
func NewTestTypesCreateRequestWithFormdataBody(server string, body TestTypesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTestTypesCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewTestTypesCreateRequestWithBody generates requests for TestTypesCreate with any type of body
func NewTestTypesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/test_types/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTestTypesRetrieveRequest generates requests for TestTypesRetrieve
func NewTestTypesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/test_types/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestTypesPartialUpdateRequest calls the generic TestTypesPartialUpdate builder with application/json body
func NewTestTypesPartialUpdateRequest(server string, id int, body TestTypesPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTestTypesPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewTestTypesPartialUpdateRequestWithFormdataBody calls the generic TestTypesPartialUpdate builder with application/x-www-form-urlencoded body
func NewTestTypesPartialUpdateRequestWithFormdataBody(server string, id int, body TestTypesPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTestTypesPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewTestTypesPartialUpdateRequestWithBody generates requests for TestTypesPartialUpdate with any type of body
func NewTestTypesPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/test_types/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTestTypesUpdateRequest calls the generic TestTypesUpdate builder with application/json body
func NewTestTypesUpdateRequest(server string, id int, body TestTypesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTestTypesUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewTestTypesUpdateRequestWithFormdataBody calls the generic TestTypesUpdate builder with application/x-www-form-urlencoded body
func NewTestTypesUpdateRequestWithFormdataBody(server string, id int, body TestTypesUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTestTypesUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewTestTypesUpdateRequestWithBody generates requests for TestTypesUpdate with any type of body
func NewTestTypesUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/test_types/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTestsListRequest generates requests for TestsList
func NewTestsListRequest(server string, params *TestsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tests/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ActualTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "actual_time", runtime.ParamLocationQuery, *params.ActualTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApiScanConfiguration != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api_scan_configuration", runtime.ParamLocationQuery, *params.ApiScanConfiguration); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BranchTag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "branch_tag", runtime.ParamLocationQuery, *params.BranchTag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BuildId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "build_id", runtime.ParamLocationQuery, *params.BuildId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CommitHash != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "commit_hash", runtime.ParamLocationQuery, *params.CommitHash); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Engagement != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "engagement", runtime.ParamLocationQuery, *params.Engagement); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EngagementProductTagsName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "engagement__product__tags__name", runtime.ParamLocationQuery, *params.EngagementProductTagsName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EngagementTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "engagement__tags", runtime.ParamLocationQuery, *params.EngagementTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotEngagementProductTagsName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_engagement__product__tags__name", runtime.ParamLocationQuery, *params.NotEngagementProductTagsName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotEngagementTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_engagement__tags", runtime.ParamLocationQuery, *params.NotEngagementTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotTag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not_tag", runtime.ParamLocationQuery, *params.NotTag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not_tags", runtime.ParamLocationQuery, *params.NotTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Notes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "notes", runtime.ParamLocationQuery, *params.Notes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.O != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "o", runtime.ParamLocationQuery, *params.O); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PercentComplete != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "percent_complete", runtime.ParamLocationQuery, *params.PercentComplete); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TargetEnd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "target_end", runtime.ParamLocationQuery, *params.TargetEnd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TargetStart != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "target_start", runtime.ParamLocationQuery, *params.TargetStart); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TestType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "test_type", runtime.ParamLocationQuery, *params.TestType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Title != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "title", runtime.ParamLocationQuery, *params.Title); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestsCreateRequest calls the generic TestsCreate builder with application/json body
func NewTestsCreateRequest(server string, body TestsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTestsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewTestsCreateRequestWithFormdataBody calls the generic TestsCreate builder with application/x-www-form-urlencoded body
func NewTestsCreateRequestWithFormdataBody(server string, body TestsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTestsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewTestsCreateRequestWithBody generates requests for TestsCreate with any type of body
func NewTestsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tests/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTestsDestroyRequest generates requests for TestsDestroy
func NewTestsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tests/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestsRetrieveRequest generates requests for TestsRetrieve
func NewTestsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tests/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestsPartialUpdateRequest calls the generic TestsPartialUpdate builder with application/json body
func NewTestsPartialUpdateRequest(server string, id int, body TestsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTestsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewTestsPartialUpdateRequestWithFormdataBody calls the generic TestsPartialUpdate builder with application/x-www-form-urlencoded body
func NewTestsPartialUpdateRequestWithFormdataBody(server string, id int, body TestsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTestsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewTestsPartialUpdateRequestWithBody generates requests for TestsPartialUpdate with any type of body
func NewTestsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tests/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTestsUpdateRequest calls the generic TestsUpdate builder with application/json body
func NewTestsUpdateRequest(server string, id int, body TestsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTestsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewTestsUpdateRequestWithFormdataBody calls the generic TestsUpdate builder with application/x-www-form-urlencoded body
func NewTestsUpdateRequestWithFormdataBody(server string, id int, body TestsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTestsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewTestsUpdateRequestWithBody generates requests for TestsUpdate with any type of body
func NewTestsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tests/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTestsAcceptRisksCreateRequest calls the generic TestsAcceptRisksCreate builder with application/json body
func NewTestsAcceptRisksCreateRequest(server string, id int, body TestsAcceptRisksCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTestsAcceptRisksCreateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewTestsAcceptRisksCreateRequestWithFormdataBody calls the generic TestsAcceptRisksCreate builder with application/x-www-form-urlencoded body
func NewTestsAcceptRisksCreateRequestWithFormdataBody(server string, id int, body TestsAcceptRisksCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTestsAcceptRisksCreateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewTestsAcceptRisksCreateRequestWithBody generates requests for TestsAcceptRisksCreate with any type of body
func NewTestsAcceptRisksCreateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tests/%s/accept_risks/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTestsDeletePreviewListRequest generates requests for TestsDeletePreviewList
func NewTestsDeletePreviewListRequest(server string, id int, params *TestsDeletePreviewListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tests/%s/delete_preview/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestsFilesRetrieveRequest generates requests for TestsFilesRetrieve
func NewTestsFilesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tests/%s/files/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestsFilesCreateRequestWithBody generates requests for TestsFilesCreate with any type of body
func NewTestsFilesCreateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tests/%s/files/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTestsFilesDownloadRetrieveRequest generates requests for TestsFilesDownloadRetrieve
func NewTestsFilesDownloadRetrieveRequest(server string, id int, fileId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "file_id", runtime.ParamLocationPath, fileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tests/%s/files/download/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestsGenerateReportCreateRequest calls the generic TestsGenerateReportCreate builder with application/json body
func NewTestsGenerateReportCreateRequest(server string, id int, body TestsGenerateReportCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTestsGenerateReportCreateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewTestsGenerateReportCreateRequestWithFormdataBody calls the generic TestsGenerateReportCreate builder with application/x-www-form-urlencoded body
func NewTestsGenerateReportCreateRequestWithFormdataBody(server string, id int, body TestsGenerateReportCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTestsGenerateReportCreateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewTestsGenerateReportCreateRequestWithBody generates requests for TestsGenerateReportCreate with any type of body
func NewTestsGenerateReportCreateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tests/%s/generate_report/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTestsNotesRetrieveRequest generates requests for TestsNotesRetrieve
func NewTestsNotesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tests/%s/notes/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTestsNotesCreateRequest calls the generic TestsNotesCreate builder with application/json body
func NewTestsNotesCreateRequest(server string, id int, body TestsNotesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTestsNotesCreateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewTestsNotesCreateRequestWithFormdataBody calls the generic TestsNotesCreate builder with application/x-www-form-urlencoded body
func NewTestsNotesCreateRequestWithFormdataBody(server string, id int, body TestsNotesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTestsNotesCreateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewTestsNotesCreateRequestWithBody generates requests for TestsNotesCreate with any type of body
func NewTestsNotesCreateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tests/%s/notes/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewToolConfigurationsListRequest generates requests for ToolConfigurationsList
func NewToolConfigurationsListRequest(server string, params *ToolConfigurationsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tool_configurations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AuthenticationType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "authentication_type", runtime.ParamLocationQuery, *params.AuthenticationType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ToolType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tool_type", runtime.ParamLocationQuery, *params.ToolType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Url != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, *params.Url); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewToolConfigurationsCreateRequest calls the generic ToolConfigurationsCreate builder with application/json body
func NewToolConfigurationsCreateRequest(server string, body ToolConfigurationsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewToolConfigurationsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewToolConfigurationsCreateRequestWithFormdataBody calls the generic ToolConfigurationsCreate builder with application/x-www-form-urlencoded body
func NewToolConfigurationsCreateRequestWithFormdataBody(server string, body ToolConfigurationsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewToolConfigurationsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewToolConfigurationsCreateRequestWithBody generates requests for ToolConfigurationsCreate with any type of body
func NewToolConfigurationsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tool_configurations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewToolConfigurationsDestroyRequest generates requests for ToolConfigurationsDestroy
func NewToolConfigurationsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tool_configurations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewToolConfigurationsRetrieveRequest generates requests for ToolConfigurationsRetrieve
func NewToolConfigurationsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tool_configurations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewToolConfigurationsPartialUpdateRequest calls the generic ToolConfigurationsPartialUpdate builder with application/json body
func NewToolConfigurationsPartialUpdateRequest(server string, id int, body ToolConfigurationsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewToolConfigurationsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewToolConfigurationsPartialUpdateRequestWithFormdataBody calls the generic ToolConfigurationsPartialUpdate builder with application/x-www-form-urlencoded body
func NewToolConfigurationsPartialUpdateRequestWithFormdataBody(server string, id int, body ToolConfigurationsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewToolConfigurationsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewToolConfigurationsPartialUpdateRequestWithBody generates requests for ToolConfigurationsPartialUpdate with any type of body
func NewToolConfigurationsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tool_configurations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewToolConfigurationsUpdateRequest calls the generic ToolConfigurationsUpdate builder with application/json body
func NewToolConfigurationsUpdateRequest(server string, id int, body ToolConfigurationsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewToolConfigurationsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewToolConfigurationsUpdateRequestWithFormdataBody calls the generic ToolConfigurationsUpdate builder with application/x-www-form-urlencoded body
func NewToolConfigurationsUpdateRequestWithFormdataBody(server string, id int, body ToolConfigurationsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewToolConfigurationsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewToolConfigurationsUpdateRequestWithBody generates requests for ToolConfigurationsUpdate with any type of body
func NewToolConfigurationsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tool_configurations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewToolConfigurationsDeletePreviewListRequest generates requests for ToolConfigurationsDeletePreviewList
func NewToolConfigurationsDeletePreviewListRequest(server string, id int, params *ToolConfigurationsDeletePreviewListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tool_configurations/%s/delete_preview/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewToolProductSettingsListRequest generates requests for ToolProductSettingsList
func NewToolProductSettingsListRequest(server string, params *ToolProductSettingsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tool_product_settings/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Product != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product", runtime.ParamLocationQuery, *params.Product); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ToolConfiguration != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tool_configuration", runtime.ParamLocationQuery, *params.ToolConfiguration); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ToolProjectId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tool_project_id", runtime.ParamLocationQuery, *params.ToolProjectId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Url != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, *params.Url); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewToolProductSettingsCreateRequest calls the generic ToolProductSettingsCreate builder with application/json body
func NewToolProductSettingsCreateRequest(server string, body ToolProductSettingsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewToolProductSettingsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewToolProductSettingsCreateRequestWithFormdataBody calls the generic ToolProductSettingsCreate builder with application/x-www-form-urlencoded body
func NewToolProductSettingsCreateRequestWithFormdataBody(server string, body ToolProductSettingsCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewToolProductSettingsCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewToolProductSettingsCreateRequestWithBody generates requests for ToolProductSettingsCreate with any type of body
func NewToolProductSettingsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tool_product_settings/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewToolProductSettingsDestroyRequest generates requests for ToolProductSettingsDestroy
func NewToolProductSettingsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tool_product_settings/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewToolProductSettingsRetrieveRequest generates requests for ToolProductSettingsRetrieve
func NewToolProductSettingsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tool_product_settings/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewToolProductSettingsPartialUpdateRequest calls the generic ToolProductSettingsPartialUpdate builder with application/json body
func NewToolProductSettingsPartialUpdateRequest(server string, id int, body ToolProductSettingsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewToolProductSettingsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewToolProductSettingsPartialUpdateRequestWithFormdataBody calls the generic ToolProductSettingsPartialUpdate builder with application/x-www-form-urlencoded body
func NewToolProductSettingsPartialUpdateRequestWithFormdataBody(server string, id int, body ToolProductSettingsPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewToolProductSettingsPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewToolProductSettingsPartialUpdateRequestWithBody generates requests for ToolProductSettingsPartialUpdate with any type of body
func NewToolProductSettingsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tool_product_settings/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewToolProductSettingsUpdateRequest calls the generic ToolProductSettingsUpdate builder with application/json body
func NewToolProductSettingsUpdateRequest(server string, id int, body ToolProductSettingsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewToolProductSettingsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewToolProductSettingsUpdateRequestWithFormdataBody calls the generic ToolProductSettingsUpdate builder with application/x-www-form-urlencoded body
func NewToolProductSettingsUpdateRequestWithFormdataBody(server string, id int, body ToolProductSettingsUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewToolProductSettingsUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewToolProductSettingsUpdateRequestWithBody generates requests for ToolProductSettingsUpdate with any type of body
func NewToolProductSettingsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tool_product_settings/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewToolProductSettingsDeletePreviewListRequest generates requests for ToolProductSettingsDeletePreviewList
func NewToolProductSettingsDeletePreviewListRequest(server string, id int, params *ToolProductSettingsDeletePreviewListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tool_product_settings/%s/delete_preview/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewToolTypesListRequest generates requests for ToolTypesList
func NewToolTypesListRequest(server string, params *ToolTypesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tool_types/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewToolTypesCreateRequest calls the generic ToolTypesCreate builder with application/json body
func NewToolTypesCreateRequest(server string, body ToolTypesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewToolTypesCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewToolTypesCreateRequestWithFormdataBody calls the generic ToolTypesCreate builder with application/x-www-form-urlencoded body
func NewToolTypesCreateRequestWithFormdataBody(server string, body ToolTypesCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewToolTypesCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewToolTypesCreateRequestWithBody generates requests for ToolTypesCreate with any type of body
func NewToolTypesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tool_types/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewToolTypesDestroyRequest generates requests for ToolTypesDestroy
func NewToolTypesDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tool_types/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewToolTypesRetrieveRequest generates requests for ToolTypesRetrieve
func NewToolTypesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tool_types/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewToolTypesPartialUpdateRequest calls the generic ToolTypesPartialUpdate builder with application/json body
func NewToolTypesPartialUpdateRequest(server string, id int, body ToolTypesPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewToolTypesPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewToolTypesPartialUpdateRequestWithFormdataBody calls the generic ToolTypesPartialUpdate builder with application/x-www-form-urlencoded body
func NewToolTypesPartialUpdateRequestWithFormdataBody(server string, id int, body ToolTypesPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewToolTypesPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewToolTypesPartialUpdateRequestWithBody generates requests for ToolTypesPartialUpdate with any type of body
func NewToolTypesPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tool_types/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewToolTypesUpdateRequest calls the generic ToolTypesUpdate builder with application/json body
func NewToolTypesUpdateRequest(server string, id int, body ToolTypesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewToolTypesUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewToolTypesUpdateRequestWithFormdataBody calls the generic ToolTypesUpdate builder with application/x-www-form-urlencoded body
func NewToolTypesUpdateRequestWithFormdataBody(server string, id int, body ToolTypesUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewToolTypesUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewToolTypesUpdateRequestWithBody generates requests for ToolTypesUpdate with any type of body
func NewToolTypesUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tool_types/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewToolTypesDeletePreviewListRequest generates requests for ToolTypesDeletePreviewList
func NewToolTypesDeletePreviewListRequest(server string, id int, params *ToolTypesDeletePreviewListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/tool_types/%s/delete_preview/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserContactInfosListRequest generates requests for UserContactInfosList
func NewUserContactInfosListRequest(server string, params *UserContactInfosListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/user_contact_infos/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BlockExecution != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "block_execution", runtime.ParamLocationQuery, *params.BlockExecution); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CellNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cell_number", runtime.ParamLocationQuery, *params.CellNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ForcePasswordReset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force_password_reset", runtime.ParamLocationQuery, *params.ForcePasswordReset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GithubUsername != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "github_username", runtime.ParamLocationQuery, *params.GithubUsername); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PhoneNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "phone_number", runtime.ParamLocationQuery, *params.PhoneNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SlackUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "slack_user_id", runtime.ParamLocationQuery, *params.SlackUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SlackUsername != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "slack_username", runtime.ParamLocationQuery, *params.SlackUsername); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Title != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "title", runtime.ParamLocationQuery, *params.Title); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TwitterUsername != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "twitter_username", runtime.ParamLocationQuery, *params.TwitterUsername); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.User != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user", runtime.ParamLocationQuery, *params.User); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserContactInfosCreateRequest calls the generic UserContactInfosCreate builder with application/json body
func NewUserContactInfosCreateRequest(server string, body UserContactInfosCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUserContactInfosCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewUserContactInfosCreateRequestWithFormdataBody calls the generic UserContactInfosCreate builder with application/x-www-form-urlencoded body
func NewUserContactInfosCreateRequestWithFormdataBody(server string, body UserContactInfosCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewUserContactInfosCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewUserContactInfosCreateRequestWithBody generates requests for UserContactInfosCreate with any type of body
func NewUserContactInfosCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/user_contact_infos/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUserContactInfosDestroyRequest generates requests for UserContactInfosDestroy
func NewUserContactInfosDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/user_contact_infos/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserContactInfosRetrieveRequest generates requests for UserContactInfosRetrieve
func NewUserContactInfosRetrieveRequest(server string, id int, params *UserContactInfosRetrieveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/user_contact_infos/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Prefetch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefetch", runtime.ParamLocationQuery, *params.Prefetch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserContactInfosPartialUpdateRequest calls the generic UserContactInfosPartialUpdate builder with application/json body
func NewUserContactInfosPartialUpdateRequest(server string, id int, body UserContactInfosPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUserContactInfosPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUserContactInfosPartialUpdateRequestWithFormdataBody calls the generic UserContactInfosPartialUpdate builder with application/x-www-form-urlencoded body
func NewUserContactInfosPartialUpdateRequestWithFormdataBody(server string, id int, body UserContactInfosPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewUserContactInfosPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewUserContactInfosPartialUpdateRequestWithBody generates requests for UserContactInfosPartialUpdate with any type of body
func NewUserContactInfosPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/user_contact_infos/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUserContactInfosUpdateRequest calls the generic UserContactInfosUpdate builder with application/json body
func NewUserContactInfosUpdateRequest(server string, id int, body UserContactInfosUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUserContactInfosUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUserContactInfosUpdateRequestWithFormdataBody calls the generic UserContactInfosUpdate builder with application/x-www-form-urlencoded body
func NewUserContactInfosUpdateRequestWithFormdataBody(server string, id int, body UserContactInfosUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewUserContactInfosUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewUserContactInfosUpdateRequestWithBody generates requests for UserContactInfosUpdate with any type of body
func NewUserContactInfosUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/user_contact_infos/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUserContactInfosDeletePreviewListRequest generates requests for UserContactInfosDeletePreviewList
func NewUserContactInfosDeletePreviewListRequest(server string, id int, params *UserContactInfosDeletePreviewListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/user_contact_infos/%s/delete_preview/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserProfileRetrieveRequest generates requests for UserProfileRetrieve
func NewUserProfileRetrieveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/user_profile/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersListRequest generates requests for UsersList
func NewUsersListRequest(server string, params *UsersListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/users/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Email != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, *params.Email); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FirstName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first_name", runtime.ParamLocationQuery, *params.FirstName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsActive != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_active", runtime.ParamLocationQuery, *params.IsActive); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsSuperuser != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_superuser", runtime.ParamLocationQuery, *params.IsSuperuser); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_name", runtime.ParamLocationQuery, *params.LastName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Username != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, *params.Username); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersCreateRequest calls the generic UsersCreate builder with application/json body
func NewUsersCreateRequest(server string, body UsersCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewUsersCreateRequestWithFormdataBody calls the generic UsersCreate builder with application/x-www-form-urlencoded body
func NewUsersCreateRequestWithFormdataBody(server string, body UsersCreateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewUsersCreateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewUsersCreateRequestWithBody generates requests for UsersCreate with any type of body
func NewUsersCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/users/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersDestroyRequest generates requests for UsersDestroy
func NewUsersDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/users/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersRetrieveRequest generates requests for UsersRetrieve
func NewUsersRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/users/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersPartialUpdateRequest calls the generic UsersPartialUpdate builder with application/json body
func NewUsersPartialUpdateRequest(server string, id int, body UsersPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUsersPartialUpdateRequestWithFormdataBody calls the generic UsersPartialUpdate builder with application/x-www-form-urlencoded body
func NewUsersPartialUpdateRequestWithFormdataBody(server string, id int, body UsersPartialUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewUsersPartialUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewUsersPartialUpdateRequestWithBody generates requests for UsersPartialUpdate with any type of body
func NewUsersPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/users/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersUpdateRequest calls the generic UsersUpdate builder with application/json body
func NewUsersUpdateRequest(server string, id int, body UsersUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUsersUpdateRequestWithFormdataBody calls the generic UsersUpdate builder with application/x-www-form-urlencoded body
func NewUsersUpdateRequestWithFormdataBody(server string, id int, body UsersUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewUsersUpdateRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewUsersUpdateRequestWithBody generates requests for UsersUpdate with any type of body
func NewUsersUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/users/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersDeletePreviewListRequest generates requests for UsersDeletePreviewList
func NewUsersDeletePreviewListRequest(server string, id int, params *UsersDeletePreviewListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/users/%s/delete_preview/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ApiTokenAuthCreate request with any body
	ApiTokenAuthCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiTokenAuthCreateResponse, error)

	ApiTokenAuthCreateWithResponse(ctx context.Context, body ApiTokenAuthCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ApiTokenAuthCreateResponse, error)

	ApiTokenAuthCreateWithFormdataBodyWithResponse(ctx context.Context, body ApiTokenAuthCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ApiTokenAuthCreateResponse, error)

	// ConfigurationPermissionsList request
	ConfigurationPermissionsListWithResponse(ctx context.Context, params *ConfigurationPermissionsListParams, reqEditors ...RequestEditorFn) (*ConfigurationPermissionsListResponse, error)

	// ConfigurationPermissionsRetrieve request
	ConfigurationPermissionsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ConfigurationPermissionsRetrieveResponse, error)

	// CredentialMappingsList request
	CredentialMappingsListWithResponse(ctx context.Context, params *CredentialMappingsListParams, reqEditors ...RequestEditorFn) (*CredentialMappingsListResponse, error)

	// CredentialMappingsCreate request with any body
	CredentialMappingsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CredentialMappingsCreateResponse, error)

	CredentialMappingsCreateWithResponse(ctx context.Context, body CredentialMappingsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CredentialMappingsCreateResponse, error)

	CredentialMappingsCreateWithFormdataBodyWithResponse(ctx context.Context, body CredentialMappingsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*CredentialMappingsCreateResponse, error)

	// CredentialMappingsDestroy request
	CredentialMappingsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*CredentialMappingsDestroyResponse, error)

	// CredentialMappingsRetrieve request
	CredentialMappingsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*CredentialMappingsRetrieveResponse, error)

	// CredentialMappingsPartialUpdate request with any body
	CredentialMappingsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CredentialMappingsPartialUpdateResponse, error)

	CredentialMappingsPartialUpdateWithResponse(ctx context.Context, id int, body CredentialMappingsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CredentialMappingsPartialUpdateResponse, error)

	CredentialMappingsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body CredentialMappingsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*CredentialMappingsPartialUpdateResponse, error)

	// CredentialMappingsUpdate request with any body
	CredentialMappingsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CredentialMappingsUpdateResponse, error)

	CredentialMappingsUpdateWithResponse(ctx context.Context, id int, body CredentialMappingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CredentialMappingsUpdateResponse, error)

	CredentialMappingsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body CredentialMappingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*CredentialMappingsUpdateResponse, error)

	// CredentialMappingsDeletePreviewList request
	CredentialMappingsDeletePreviewListWithResponse(ctx context.Context, id int, params *CredentialMappingsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*CredentialMappingsDeletePreviewListResponse, error)

	// CredentialsList request
	CredentialsListWithResponse(ctx context.Context, params *CredentialsListParams, reqEditors ...RequestEditorFn) (*CredentialsListResponse, error)

	// CredentialsCreate request with any body
	CredentialsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CredentialsCreateResponse, error)

	CredentialsCreateWithResponse(ctx context.Context, body CredentialsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CredentialsCreateResponse, error)

	CredentialsCreateWithFormdataBodyWithResponse(ctx context.Context, body CredentialsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*CredentialsCreateResponse, error)

	// CredentialsDestroy request
	CredentialsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*CredentialsDestroyResponse, error)

	// CredentialsRetrieve request
	CredentialsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*CredentialsRetrieveResponse, error)

	// CredentialsPartialUpdate request with any body
	CredentialsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CredentialsPartialUpdateResponse, error)

	CredentialsPartialUpdateWithResponse(ctx context.Context, id int, body CredentialsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CredentialsPartialUpdateResponse, error)

	CredentialsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body CredentialsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*CredentialsPartialUpdateResponse, error)

	// CredentialsUpdate request with any body
	CredentialsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CredentialsUpdateResponse, error)

	CredentialsUpdateWithResponse(ctx context.Context, id int, body CredentialsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CredentialsUpdateResponse, error)

	CredentialsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body CredentialsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*CredentialsUpdateResponse, error)

	// CredentialsDeletePreviewList request
	CredentialsDeletePreviewListWithResponse(ctx context.Context, id int, params *CredentialsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*CredentialsDeletePreviewListResponse, error)

	// DevelopmentEnvironmentsList request
	DevelopmentEnvironmentsListWithResponse(ctx context.Context, params *DevelopmentEnvironmentsListParams, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsListResponse, error)

	// DevelopmentEnvironmentsCreate request with any body
	DevelopmentEnvironmentsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsCreateResponse, error)

	DevelopmentEnvironmentsCreateWithResponse(ctx context.Context, body DevelopmentEnvironmentsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsCreateResponse, error)

	DevelopmentEnvironmentsCreateWithFormdataBodyWithResponse(ctx context.Context, body DevelopmentEnvironmentsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsCreateResponse, error)

	// DevelopmentEnvironmentsDestroy request
	DevelopmentEnvironmentsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsDestroyResponse, error)

	// DevelopmentEnvironmentsRetrieve request
	DevelopmentEnvironmentsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsRetrieveResponse, error)

	// DevelopmentEnvironmentsPartialUpdate request with any body
	DevelopmentEnvironmentsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsPartialUpdateResponse, error)

	DevelopmentEnvironmentsPartialUpdateWithResponse(ctx context.Context, id int, body DevelopmentEnvironmentsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsPartialUpdateResponse, error)

	DevelopmentEnvironmentsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body DevelopmentEnvironmentsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsPartialUpdateResponse, error)

	// DevelopmentEnvironmentsUpdate request with any body
	DevelopmentEnvironmentsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsUpdateResponse, error)

	DevelopmentEnvironmentsUpdateWithResponse(ctx context.Context, id int, body DevelopmentEnvironmentsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsUpdateResponse, error)

	DevelopmentEnvironmentsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body DevelopmentEnvironmentsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsUpdateResponse, error)

	// DevelopmentEnvironmentsDeletePreviewList request
	DevelopmentEnvironmentsDeletePreviewListWithResponse(ctx context.Context, id int, params *DevelopmentEnvironmentsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsDeletePreviewListResponse, error)

	// DojoGroupMembersList request
	DojoGroupMembersListWithResponse(ctx context.Context, params *DojoGroupMembersListParams, reqEditors ...RequestEditorFn) (*DojoGroupMembersListResponse, error)

	// DojoGroupMembersCreate request with any body
	DojoGroupMembersCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DojoGroupMembersCreateResponse, error)

	DojoGroupMembersCreateWithResponse(ctx context.Context, body DojoGroupMembersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupMembersCreateResponse, error)

	DojoGroupMembersCreateWithFormdataBodyWithResponse(ctx context.Context, body DojoGroupMembersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupMembersCreateResponse, error)

	// DojoGroupMembersDestroy request
	DojoGroupMembersDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DojoGroupMembersDestroyResponse, error)

	// DojoGroupMembersRetrieve request
	DojoGroupMembersRetrieveWithResponse(ctx context.Context, id int, params *DojoGroupMembersRetrieveParams, reqEditors ...RequestEditorFn) (*DojoGroupMembersRetrieveResponse, error)

	// DojoGroupMembersPartialUpdate request with any body
	DojoGroupMembersPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DojoGroupMembersPartialUpdateResponse, error)

	DojoGroupMembersPartialUpdateWithResponse(ctx context.Context, id int, body DojoGroupMembersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupMembersPartialUpdateResponse, error)

	DojoGroupMembersPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body DojoGroupMembersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupMembersPartialUpdateResponse, error)

	// DojoGroupMembersUpdate request with any body
	DojoGroupMembersUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DojoGroupMembersUpdateResponse, error)

	DojoGroupMembersUpdateWithResponse(ctx context.Context, id int, body DojoGroupMembersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupMembersUpdateResponse, error)

	DojoGroupMembersUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body DojoGroupMembersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupMembersUpdateResponse, error)

	// DojoGroupMembersDeletePreviewList request
	DojoGroupMembersDeletePreviewListWithResponse(ctx context.Context, id int, params *DojoGroupMembersDeletePreviewListParams, reqEditors ...RequestEditorFn) (*DojoGroupMembersDeletePreviewListResponse, error)

	// DojoGroupsList request
	DojoGroupsListWithResponse(ctx context.Context, params *DojoGroupsListParams, reqEditors ...RequestEditorFn) (*DojoGroupsListResponse, error)

	// DojoGroupsCreate request with any body
	DojoGroupsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DojoGroupsCreateResponse, error)

	DojoGroupsCreateWithResponse(ctx context.Context, body DojoGroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupsCreateResponse, error)

	DojoGroupsCreateWithFormdataBodyWithResponse(ctx context.Context, body DojoGroupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupsCreateResponse, error)

	// DojoGroupsDestroy request
	DojoGroupsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DojoGroupsDestroyResponse, error)

	// DojoGroupsRetrieve request
	DojoGroupsRetrieveWithResponse(ctx context.Context, id int, params *DojoGroupsRetrieveParams, reqEditors ...RequestEditorFn) (*DojoGroupsRetrieveResponse, error)

	// DojoGroupsPartialUpdate request with any body
	DojoGroupsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DojoGroupsPartialUpdateResponse, error)

	DojoGroupsPartialUpdateWithResponse(ctx context.Context, id int, body DojoGroupsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupsPartialUpdateResponse, error)

	DojoGroupsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body DojoGroupsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupsPartialUpdateResponse, error)

	// DojoGroupsUpdate request with any body
	DojoGroupsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DojoGroupsUpdateResponse, error)

	DojoGroupsUpdateWithResponse(ctx context.Context, id int, body DojoGroupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupsUpdateResponse, error)

	DojoGroupsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body DojoGroupsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupsUpdateResponse, error)

	// DojoGroupsDeletePreviewList request
	DojoGroupsDeletePreviewListWithResponse(ctx context.Context, id int, params *DojoGroupsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*DojoGroupsDeletePreviewListResponse, error)

	// EndpointMetaImportCreate request with any body
	EndpointMetaImportCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EndpointMetaImportCreateResponse, error)

	// EndpointStatusList request
	EndpointStatusListWithResponse(ctx context.Context, params *EndpointStatusListParams, reqEditors ...RequestEditorFn) (*EndpointStatusListResponse, error)

	// EndpointStatusCreate request with any body
	EndpointStatusCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EndpointStatusCreateResponse, error)

	EndpointStatusCreateWithResponse(ctx context.Context, body EndpointStatusCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EndpointStatusCreateResponse, error)

	EndpointStatusCreateWithFormdataBodyWithResponse(ctx context.Context, body EndpointStatusCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EndpointStatusCreateResponse, error)

	// EndpointStatusDestroy request
	EndpointStatusDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EndpointStatusDestroyResponse, error)

	// EndpointStatusRetrieve request
	EndpointStatusRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EndpointStatusRetrieveResponse, error)

	// EndpointStatusPartialUpdate request with any body
	EndpointStatusPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EndpointStatusPartialUpdateResponse, error)

	EndpointStatusPartialUpdateWithResponse(ctx context.Context, id int, body EndpointStatusPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EndpointStatusPartialUpdateResponse, error)

	EndpointStatusPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body EndpointStatusPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EndpointStatusPartialUpdateResponse, error)

	// EndpointStatusUpdate request with any body
	EndpointStatusUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EndpointStatusUpdateResponse, error)

	EndpointStatusUpdateWithResponse(ctx context.Context, id int, body EndpointStatusUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EndpointStatusUpdateResponse, error)

	EndpointStatusUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body EndpointStatusUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EndpointStatusUpdateResponse, error)

	// EndpointStatusDeletePreviewList request
	EndpointStatusDeletePreviewListWithResponse(ctx context.Context, id int, params *EndpointStatusDeletePreviewListParams, reqEditors ...RequestEditorFn) (*EndpointStatusDeletePreviewListResponse, error)

	// EndpointsList request
	EndpointsListWithResponse(ctx context.Context, params *EndpointsListParams, reqEditors ...RequestEditorFn) (*EndpointsListResponse, error)

	// EndpointsCreate request with any body
	EndpointsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EndpointsCreateResponse, error)

	EndpointsCreateWithResponse(ctx context.Context, body EndpointsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EndpointsCreateResponse, error)

	EndpointsCreateWithFormdataBodyWithResponse(ctx context.Context, body EndpointsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EndpointsCreateResponse, error)

	// EndpointsDestroy request
	EndpointsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EndpointsDestroyResponse, error)

	// EndpointsRetrieve request
	EndpointsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EndpointsRetrieveResponse, error)

	// EndpointsPartialUpdate request with any body
	EndpointsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EndpointsPartialUpdateResponse, error)

	EndpointsPartialUpdateWithResponse(ctx context.Context, id int, body EndpointsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EndpointsPartialUpdateResponse, error)

	EndpointsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body EndpointsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EndpointsPartialUpdateResponse, error)

	// EndpointsUpdate request with any body
	EndpointsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EndpointsUpdateResponse, error)

	EndpointsUpdateWithResponse(ctx context.Context, id int, body EndpointsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EndpointsUpdateResponse, error)

	EndpointsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body EndpointsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EndpointsUpdateResponse, error)

	// EndpointsDeletePreviewList request
	EndpointsDeletePreviewListWithResponse(ctx context.Context, id int, params *EndpointsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*EndpointsDeletePreviewListResponse, error)

	// EndpointsGenerateReportCreate request with any body
	EndpointsGenerateReportCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EndpointsGenerateReportCreateResponse, error)

	EndpointsGenerateReportCreateWithResponse(ctx context.Context, id int, body EndpointsGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EndpointsGenerateReportCreateResponse, error)

	EndpointsGenerateReportCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body EndpointsGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EndpointsGenerateReportCreateResponse, error)

	// EngagementPresetsList request
	EngagementPresetsListWithResponse(ctx context.Context, params *EngagementPresetsListParams, reqEditors ...RequestEditorFn) (*EngagementPresetsListResponse, error)

	// EngagementPresetsCreate request with any body
	EngagementPresetsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EngagementPresetsCreateResponse, error)

	EngagementPresetsCreateWithResponse(ctx context.Context, body EngagementPresetsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EngagementPresetsCreateResponse, error)

	EngagementPresetsCreateWithFormdataBodyWithResponse(ctx context.Context, body EngagementPresetsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EngagementPresetsCreateResponse, error)

	// EngagementPresetsDestroy request
	EngagementPresetsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EngagementPresetsDestroyResponse, error)

	// EngagementPresetsRetrieve request
	EngagementPresetsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EngagementPresetsRetrieveResponse, error)

	// EngagementPresetsPartialUpdate request with any body
	EngagementPresetsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EngagementPresetsPartialUpdateResponse, error)

	EngagementPresetsPartialUpdateWithResponse(ctx context.Context, id int, body EngagementPresetsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EngagementPresetsPartialUpdateResponse, error)

	EngagementPresetsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body EngagementPresetsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EngagementPresetsPartialUpdateResponse, error)

	// EngagementPresetsUpdate request with any body
	EngagementPresetsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EngagementPresetsUpdateResponse, error)

	EngagementPresetsUpdateWithResponse(ctx context.Context, id int, body EngagementPresetsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EngagementPresetsUpdateResponse, error)

	EngagementPresetsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body EngagementPresetsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EngagementPresetsUpdateResponse, error)

	// EngagementPresetsDeletePreviewList request
	EngagementPresetsDeletePreviewListWithResponse(ctx context.Context, id int, params *EngagementPresetsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*EngagementPresetsDeletePreviewListResponse, error)

	// EngagementsList request
	EngagementsListWithResponse(ctx context.Context, params *EngagementsListParams, reqEditors ...RequestEditorFn) (*EngagementsListResponse, error)

	// EngagementsCreate request with any body
	EngagementsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EngagementsCreateResponse, error)

	EngagementsCreateWithResponse(ctx context.Context, body EngagementsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EngagementsCreateResponse, error)

	EngagementsCreateWithFormdataBodyWithResponse(ctx context.Context, body EngagementsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EngagementsCreateResponse, error)

	// EngagementsDestroy request
	EngagementsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EngagementsDestroyResponse, error)

	// EngagementsRetrieve request
	EngagementsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EngagementsRetrieveResponse, error)

	// EngagementsPartialUpdate request with any body
	EngagementsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EngagementsPartialUpdateResponse, error)

	EngagementsPartialUpdateWithResponse(ctx context.Context, id int, body EngagementsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EngagementsPartialUpdateResponse, error)

	EngagementsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body EngagementsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EngagementsPartialUpdateResponse, error)

	// EngagementsUpdate request with any body
	EngagementsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EngagementsUpdateResponse, error)

	EngagementsUpdateWithResponse(ctx context.Context, id int, body EngagementsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EngagementsUpdateResponse, error)

	EngagementsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body EngagementsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EngagementsUpdateResponse, error)

	// EngagementsAcceptRisksCreate request with any body
	EngagementsAcceptRisksCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EngagementsAcceptRisksCreateResponse, error)

	EngagementsAcceptRisksCreateWithResponse(ctx context.Context, id int, body EngagementsAcceptRisksCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EngagementsAcceptRisksCreateResponse, error)

	EngagementsAcceptRisksCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body EngagementsAcceptRisksCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EngagementsAcceptRisksCreateResponse, error)

	// EngagementsCloseCreate request
	EngagementsCloseCreateWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EngagementsCloseCreateResponse, error)

	// EngagementsCompleteChecklistRetrieve request
	EngagementsCompleteChecklistRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EngagementsCompleteChecklistRetrieveResponse, error)

	// EngagementsCompleteChecklistCreate request with any body
	EngagementsCompleteChecklistCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EngagementsCompleteChecklistCreateResponse, error)

	EngagementsCompleteChecklistCreateWithResponse(ctx context.Context, id int, body EngagementsCompleteChecklistCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EngagementsCompleteChecklistCreateResponse, error)

	EngagementsCompleteChecklistCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body EngagementsCompleteChecklistCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EngagementsCompleteChecklistCreateResponse, error)

	// EngagementsDeletePreviewList request
	EngagementsDeletePreviewListWithResponse(ctx context.Context, id int, params *EngagementsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*EngagementsDeletePreviewListResponse, error)

	// EngagementsFilesRetrieve request
	EngagementsFilesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EngagementsFilesRetrieveResponse, error)

	// EngagementsFilesCreate request with any body
	EngagementsFilesCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EngagementsFilesCreateResponse, error)

	// EngagementsFilesDownloadRetrieve request
	EngagementsFilesDownloadRetrieveWithResponse(ctx context.Context, id int, fileId string, reqEditors ...RequestEditorFn) (*EngagementsFilesDownloadRetrieveResponse, error)

	// EngagementsGenerateReportCreate request with any body
	EngagementsGenerateReportCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EngagementsGenerateReportCreateResponse, error)

	EngagementsGenerateReportCreateWithResponse(ctx context.Context, id int, body EngagementsGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EngagementsGenerateReportCreateResponse, error)

	EngagementsGenerateReportCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body EngagementsGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EngagementsGenerateReportCreateResponse, error)

	// EngagementsNotesRetrieve request
	EngagementsNotesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EngagementsNotesRetrieveResponse, error)

	// EngagementsNotesCreate request with any body
	EngagementsNotesCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EngagementsNotesCreateResponse, error)

	EngagementsNotesCreateWithResponse(ctx context.Context, id int, body EngagementsNotesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EngagementsNotesCreateResponse, error)

	EngagementsNotesCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body EngagementsNotesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EngagementsNotesCreateResponse, error)

	// EngagementsReopenCreate request
	EngagementsReopenCreateWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EngagementsReopenCreateResponse, error)

	// FindingTemplatesList request
	FindingTemplatesListWithResponse(ctx context.Context, params *FindingTemplatesListParams, reqEditors ...RequestEditorFn) (*FindingTemplatesListResponse, error)

	// FindingTemplatesCreate request with any body
	FindingTemplatesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingTemplatesCreateResponse, error)

	FindingTemplatesCreateWithResponse(ctx context.Context, body FindingTemplatesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingTemplatesCreateResponse, error)

	FindingTemplatesCreateWithFormdataBodyWithResponse(ctx context.Context, body FindingTemplatesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingTemplatesCreateResponse, error)

	// FindingTemplatesDestroy request
	FindingTemplatesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*FindingTemplatesDestroyResponse, error)

	// FindingTemplatesRetrieve request
	FindingTemplatesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*FindingTemplatesRetrieveResponse, error)

	// FindingTemplatesPartialUpdate request with any body
	FindingTemplatesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingTemplatesPartialUpdateResponse, error)

	FindingTemplatesPartialUpdateWithResponse(ctx context.Context, id int, body FindingTemplatesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingTemplatesPartialUpdateResponse, error)

	FindingTemplatesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingTemplatesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingTemplatesPartialUpdateResponse, error)

	// FindingTemplatesUpdate request with any body
	FindingTemplatesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingTemplatesUpdateResponse, error)

	FindingTemplatesUpdateWithResponse(ctx context.Context, id int, body FindingTemplatesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingTemplatesUpdateResponse, error)

	FindingTemplatesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingTemplatesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingTemplatesUpdateResponse, error)

	// FindingTemplatesDeletePreviewList request
	FindingTemplatesDeletePreviewListWithResponse(ctx context.Context, id int, params *FindingTemplatesDeletePreviewListParams, reqEditors ...RequestEditorFn) (*FindingTemplatesDeletePreviewListResponse, error)

	// FindingsList request
	FindingsListWithResponse(ctx context.Context, params *FindingsListParams, reqEditors ...RequestEditorFn) (*FindingsListResponse, error)

	// FindingsCreate request with any body
	FindingsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsCreateResponse, error)

	FindingsCreateWithResponse(ctx context.Context, body FindingsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsCreateResponse, error)

	FindingsCreateWithFormdataBodyWithResponse(ctx context.Context, body FindingsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsCreateResponse, error)

	// FindingsAcceptRisksCreate request with any body
	FindingsAcceptRisksCreateWithBodyWithResponse(ctx context.Context, params *FindingsAcceptRisksCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsAcceptRisksCreateResponse, error)

	FindingsAcceptRisksCreateWithResponse(ctx context.Context, params *FindingsAcceptRisksCreateParams, body FindingsAcceptRisksCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsAcceptRisksCreateResponse, error)

	FindingsAcceptRisksCreateWithFormdataBodyWithResponse(ctx context.Context, params *FindingsAcceptRisksCreateParams, body FindingsAcceptRisksCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsAcceptRisksCreateResponse, error)

	// FindingsGenerateReportCreate request with any body
	FindingsGenerateReportCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsGenerateReportCreateResponse, error)

	FindingsGenerateReportCreateWithResponse(ctx context.Context, body FindingsGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsGenerateReportCreateResponse, error)

	FindingsGenerateReportCreateWithFormdataBodyWithResponse(ctx context.Context, body FindingsGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsGenerateReportCreateResponse, error)

	// FindingsDestroy request
	FindingsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*FindingsDestroyResponse, error)

	// FindingsRetrieve request
	FindingsRetrieveWithResponse(ctx context.Context, id int, params *FindingsRetrieveParams, reqEditors ...RequestEditorFn) (*FindingsRetrieveResponse, error)

	// FindingsPartialUpdate request with any body
	FindingsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsPartialUpdateResponse, error)

	FindingsPartialUpdateWithResponse(ctx context.Context, id int, body FindingsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsPartialUpdateResponse, error)

	FindingsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsPartialUpdateResponse, error)

	// FindingsUpdate request with any body
	FindingsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsUpdateResponse, error)

	FindingsUpdateWithResponse(ctx context.Context, id int, body FindingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsUpdateResponse, error)

	FindingsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsUpdateResponse, error)

	// FindingsCloseCreate request with any body
	FindingsCloseCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsCloseCreateResponse, error)

	FindingsCloseCreateWithResponse(ctx context.Context, id int, body FindingsCloseCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsCloseCreateResponse, error)

	FindingsCloseCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingsCloseCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsCloseCreateResponse, error)

	// FindingsDeletePreviewList request
	FindingsDeletePreviewListWithResponse(ctx context.Context, id int, params *FindingsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*FindingsDeletePreviewListResponse, error)

	// FindingsDuplicateList request
	FindingsDuplicateListWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*FindingsDuplicateListResponse, error)

	// FindingsDuplicateResetCreate request
	FindingsDuplicateResetCreateWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*FindingsDuplicateResetCreateResponse, error)

	// FindingsFilesRetrieve request
	FindingsFilesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*FindingsFilesRetrieveResponse, error)

	// FindingsFilesCreate request with any body
	FindingsFilesCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsFilesCreateResponse, error)

	// FindingsFilesDownloadRetrieve request
	FindingsFilesDownloadRetrieveWithResponse(ctx context.Context, id int, fileId string, reqEditors ...RequestEditorFn) (*FindingsFilesDownloadRetrieveResponse, error)

	// FindingsMetadataDestroy request
	FindingsMetadataDestroyWithResponse(ctx context.Context, id int, params *FindingsMetadataDestroyParams, reqEditors ...RequestEditorFn) (*FindingsMetadataDestroyResponse, error)

	// FindingsMetadataList request
	FindingsMetadataListWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*FindingsMetadataListResponse, error)

	// FindingsMetadataCreate request with any body
	FindingsMetadataCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsMetadataCreateResponse, error)

	FindingsMetadataCreateWithResponse(ctx context.Context, id int, body FindingsMetadataCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsMetadataCreateResponse, error)

	FindingsMetadataCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingsMetadataCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsMetadataCreateResponse, error)

	// FindingsMetadataUpdate request with any body
	FindingsMetadataUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsMetadataUpdateResponse, error)

	FindingsMetadataUpdateWithResponse(ctx context.Context, id int, body FindingsMetadataUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsMetadataUpdateResponse, error)

	FindingsMetadataUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingsMetadataUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsMetadataUpdateResponse, error)

	// FindingsNotesRetrieve request
	FindingsNotesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*FindingsNotesRetrieveResponse, error)

	// FindingsNotesCreate request with any body
	FindingsNotesCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsNotesCreateResponse, error)

	FindingsNotesCreateWithResponse(ctx context.Context, id int, body FindingsNotesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsNotesCreateResponse, error)

	FindingsNotesCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingsNotesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsNotesCreateResponse, error)

	// FindingsOriginalCreate request
	FindingsOriginalCreateWithResponse(ctx context.Context, id int, newFid int, reqEditors ...RequestEditorFn) (*FindingsOriginalCreateResponse, error)

	// FindingsRemoveNotePartialUpdate request with any body
	FindingsRemoveNotePartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsRemoveNotePartialUpdateResponse, error)

	FindingsRemoveNotePartialUpdateWithResponse(ctx context.Context, id int, body FindingsRemoveNotePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsRemoveNotePartialUpdateResponse, error)

	FindingsRemoveNotePartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingsRemoveNotePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsRemoveNotePartialUpdateResponse, error)

	// FindingsRemoveTagsPartialUpdate request with any body
	FindingsRemoveTagsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsRemoveTagsPartialUpdateResponse, error)

	FindingsRemoveTagsPartialUpdateWithResponse(ctx context.Context, id int, body FindingsRemoveTagsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsRemoveTagsPartialUpdateResponse, error)

	FindingsRemoveTagsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingsRemoveTagsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsRemoveTagsPartialUpdateResponse, error)

	// FindingsRemoveTagsUpdate request with any body
	FindingsRemoveTagsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsRemoveTagsUpdateResponse, error)

	FindingsRemoveTagsUpdateWithResponse(ctx context.Context, id int, body FindingsRemoveTagsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsRemoveTagsUpdateResponse, error)

	FindingsRemoveTagsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingsRemoveTagsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsRemoveTagsUpdateResponse, error)

	// FindingsRequestResponseRetrieve request
	FindingsRequestResponseRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*FindingsRequestResponseRetrieveResponse, error)

	// FindingsRequestResponseCreate request with any body
	FindingsRequestResponseCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsRequestResponseCreateResponse, error)

	FindingsRequestResponseCreateWithResponse(ctx context.Context, id int, body FindingsRequestResponseCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsRequestResponseCreateResponse, error)

	FindingsRequestResponseCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingsRequestResponseCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsRequestResponseCreateResponse, error)

	// FindingsTagsRetrieve request
	FindingsTagsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*FindingsTagsRetrieveResponse, error)

	// FindingsTagsCreate request with any body
	FindingsTagsCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsTagsCreateResponse, error)

	FindingsTagsCreateWithResponse(ctx context.Context, id int, body FindingsTagsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsTagsCreateResponse, error)

	FindingsTagsCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingsTagsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsTagsCreateResponse, error)

	// GlobalRolesList request
	GlobalRolesListWithResponse(ctx context.Context, params *GlobalRolesListParams, reqEditors ...RequestEditorFn) (*GlobalRolesListResponse, error)

	// GlobalRolesCreate request with any body
	GlobalRolesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GlobalRolesCreateResponse, error)

	GlobalRolesCreateWithResponse(ctx context.Context, body GlobalRolesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*GlobalRolesCreateResponse, error)

	GlobalRolesCreateWithFormdataBodyWithResponse(ctx context.Context, body GlobalRolesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*GlobalRolesCreateResponse, error)

	// GlobalRolesDestroy request
	GlobalRolesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GlobalRolesDestroyResponse, error)

	// GlobalRolesRetrieve request
	GlobalRolesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GlobalRolesRetrieveResponse, error)

	// GlobalRolesPartialUpdate request with any body
	GlobalRolesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GlobalRolesPartialUpdateResponse, error)

	GlobalRolesPartialUpdateWithResponse(ctx context.Context, id int, body GlobalRolesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*GlobalRolesPartialUpdateResponse, error)

	GlobalRolesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body GlobalRolesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*GlobalRolesPartialUpdateResponse, error)

	// GlobalRolesUpdate request with any body
	GlobalRolesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GlobalRolesUpdateResponse, error)

	GlobalRolesUpdateWithResponse(ctx context.Context, id int, body GlobalRolesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*GlobalRolesUpdateResponse, error)

	GlobalRolesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body GlobalRolesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*GlobalRolesUpdateResponse, error)

	// GlobalRolesDeletePreviewList request
	GlobalRolesDeletePreviewListWithResponse(ctx context.Context, id int, params *GlobalRolesDeletePreviewListParams, reqEditors ...RequestEditorFn) (*GlobalRolesDeletePreviewListResponse, error)

	// ImportLanguagesCreate request with any body
	ImportLanguagesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportLanguagesCreateResponse, error)

	// ImportScanCreate request with any body
	ImportScanCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportScanCreateResponse, error)

	// JiraConfigurationsList request
	JiraConfigurationsListWithResponse(ctx context.Context, params *JiraConfigurationsListParams, reqEditors ...RequestEditorFn) (*JiraConfigurationsListResponse, error)

	// JiraConfigurationsCreate request with any body
	JiraConfigurationsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraConfigurationsCreateResponse, error)

	JiraConfigurationsCreateWithResponse(ctx context.Context, body JiraConfigurationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraConfigurationsCreateResponse, error)

	JiraConfigurationsCreateWithFormdataBodyWithResponse(ctx context.Context, body JiraConfigurationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraConfigurationsCreateResponse, error)

	// JiraConfigurationsDestroy request
	JiraConfigurationsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*JiraConfigurationsDestroyResponse, error)

	// JiraConfigurationsRetrieve request
	JiraConfigurationsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*JiraConfigurationsRetrieveResponse, error)

	// JiraConfigurationsPartialUpdate request with any body
	JiraConfigurationsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraConfigurationsPartialUpdateResponse, error)

	JiraConfigurationsPartialUpdateWithResponse(ctx context.Context, id int, body JiraConfigurationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraConfigurationsPartialUpdateResponse, error)

	JiraConfigurationsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body JiraConfigurationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraConfigurationsPartialUpdateResponse, error)

	// JiraConfigurationsUpdate request with any body
	JiraConfigurationsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraConfigurationsUpdateResponse, error)

	JiraConfigurationsUpdateWithResponse(ctx context.Context, id int, body JiraConfigurationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraConfigurationsUpdateResponse, error)

	JiraConfigurationsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body JiraConfigurationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraConfigurationsUpdateResponse, error)

	// JiraConfigurationsDeletePreviewList request
	JiraConfigurationsDeletePreviewListWithResponse(ctx context.Context, id int, params *JiraConfigurationsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*JiraConfigurationsDeletePreviewListResponse, error)

	// JiraFindingMappingsList request
	JiraFindingMappingsListWithResponse(ctx context.Context, params *JiraFindingMappingsListParams, reqEditors ...RequestEditorFn) (*JiraFindingMappingsListResponse, error)

	// JiraFindingMappingsCreate request with any body
	JiraFindingMappingsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraFindingMappingsCreateResponse, error)

	JiraFindingMappingsCreateWithResponse(ctx context.Context, body JiraFindingMappingsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraFindingMappingsCreateResponse, error)

	JiraFindingMappingsCreateWithFormdataBodyWithResponse(ctx context.Context, body JiraFindingMappingsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraFindingMappingsCreateResponse, error)

	// JiraFindingMappingsDestroy request
	JiraFindingMappingsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*JiraFindingMappingsDestroyResponse, error)

	// JiraFindingMappingsRetrieve request
	JiraFindingMappingsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*JiraFindingMappingsRetrieveResponse, error)

	// JiraFindingMappingsPartialUpdate request with any body
	JiraFindingMappingsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraFindingMappingsPartialUpdateResponse, error)

	JiraFindingMappingsPartialUpdateWithResponse(ctx context.Context, id int, body JiraFindingMappingsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraFindingMappingsPartialUpdateResponse, error)

	JiraFindingMappingsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body JiraFindingMappingsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraFindingMappingsPartialUpdateResponse, error)

	// JiraFindingMappingsUpdate request with any body
	JiraFindingMappingsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraFindingMappingsUpdateResponse, error)

	JiraFindingMappingsUpdateWithResponse(ctx context.Context, id int, body JiraFindingMappingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraFindingMappingsUpdateResponse, error)

	JiraFindingMappingsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body JiraFindingMappingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraFindingMappingsUpdateResponse, error)

	// JiraFindingMappingsDeletePreviewList request
	JiraFindingMappingsDeletePreviewListWithResponse(ctx context.Context, id int, params *JiraFindingMappingsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*JiraFindingMappingsDeletePreviewListResponse, error)

	// JiraInstancesList request
	JiraInstancesListWithResponse(ctx context.Context, params *JiraInstancesListParams, reqEditors ...RequestEditorFn) (*JiraInstancesListResponse, error)

	// JiraInstancesCreate request with any body
	JiraInstancesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraInstancesCreateResponse, error)

	JiraInstancesCreateWithResponse(ctx context.Context, body JiraInstancesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraInstancesCreateResponse, error)

	JiraInstancesCreateWithFormdataBodyWithResponse(ctx context.Context, body JiraInstancesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraInstancesCreateResponse, error)

	// JiraInstancesDestroy request
	JiraInstancesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*JiraInstancesDestroyResponse, error)

	// JiraInstancesRetrieve request
	JiraInstancesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*JiraInstancesRetrieveResponse, error)

	// JiraInstancesPartialUpdate request with any body
	JiraInstancesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraInstancesPartialUpdateResponse, error)

	JiraInstancesPartialUpdateWithResponse(ctx context.Context, id int, body JiraInstancesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraInstancesPartialUpdateResponse, error)

	JiraInstancesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body JiraInstancesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraInstancesPartialUpdateResponse, error)

	// JiraInstancesUpdate request with any body
	JiraInstancesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraInstancesUpdateResponse, error)

	JiraInstancesUpdateWithResponse(ctx context.Context, id int, body JiraInstancesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraInstancesUpdateResponse, error)

	JiraInstancesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body JiraInstancesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraInstancesUpdateResponse, error)

	// JiraInstancesDeletePreviewList request
	JiraInstancesDeletePreviewListWithResponse(ctx context.Context, id int, params *JiraInstancesDeletePreviewListParams, reqEditors ...RequestEditorFn) (*JiraInstancesDeletePreviewListResponse, error)

	// JiraProductConfigurationsList request
	JiraProductConfigurationsListWithResponse(ctx context.Context, params *JiraProductConfigurationsListParams, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsListResponse, error)

	// JiraProductConfigurationsCreate request with any body
	JiraProductConfigurationsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsCreateResponse, error)

	JiraProductConfigurationsCreateWithResponse(ctx context.Context, body JiraProductConfigurationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsCreateResponse, error)

	JiraProductConfigurationsCreateWithFormdataBodyWithResponse(ctx context.Context, body JiraProductConfigurationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsCreateResponse, error)

	// JiraProductConfigurationsDestroy request
	JiraProductConfigurationsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsDestroyResponse, error)

	// JiraProductConfigurationsRetrieve request
	JiraProductConfigurationsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsRetrieveResponse, error)

	// JiraProductConfigurationsPartialUpdate request with any body
	JiraProductConfigurationsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsPartialUpdateResponse, error)

	JiraProductConfigurationsPartialUpdateWithResponse(ctx context.Context, id int, body JiraProductConfigurationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsPartialUpdateResponse, error)

	JiraProductConfigurationsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body JiraProductConfigurationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsPartialUpdateResponse, error)

	// JiraProductConfigurationsUpdate request with any body
	JiraProductConfigurationsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsUpdateResponse, error)

	JiraProductConfigurationsUpdateWithResponse(ctx context.Context, id int, body JiraProductConfigurationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsUpdateResponse, error)

	JiraProductConfigurationsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body JiraProductConfigurationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsUpdateResponse, error)

	// JiraProductConfigurationsDeletePreviewList request
	JiraProductConfigurationsDeletePreviewListWithResponse(ctx context.Context, id int, params *JiraProductConfigurationsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsDeletePreviewListResponse, error)

	// JiraProjectsList request
	JiraProjectsListWithResponse(ctx context.Context, params *JiraProjectsListParams, reqEditors ...RequestEditorFn) (*JiraProjectsListResponse, error)

	// JiraProjectsCreate request with any body
	JiraProjectsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraProjectsCreateResponse, error)

	JiraProjectsCreateWithResponse(ctx context.Context, body JiraProjectsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraProjectsCreateResponse, error)

	JiraProjectsCreateWithFormdataBodyWithResponse(ctx context.Context, body JiraProjectsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraProjectsCreateResponse, error)

	// JiraProjectsDestroy request
	JiraProjectsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*JiraProjectsDestroyResponse, error)

	// JiraProjectsRetrieve request
	JiraProjectsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*JiraProjectsRetrieveResponse, error)

	// JiraProjectsPartialUpdate request with any body
	JiraProjectsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraProjectsPartialUpdateResponse, error)

	JiraProjectsPartialUpdateWithResponse(ctx context.Context, id int, body JiraProjectsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraProjectsPartialUpdateResponse, error)

	JiraProjectsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body JiraProjectsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraProjectsPartialUpdateResponse, error)

	// JiraProjectsUpdate request with any body
	JiraProjectsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraProjectsUpdateResponse, error)

	JiraProjectsUpdateWithResponse(ctx context.Context, id int, body JiraProjectsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraProjectsUpdateResponse, error)

	JiraProjectsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body JiraProjectsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraProjectsUpdateResponse, error)

	// JiraProjectsDeletePreviewList request
	JiraProjectsDeletePreviewListWithResponse(ctx context.Context, id int, params *JiraProjectsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*JiraProjectsDeletePreviewListResponse, error)

	// LanguageTypesList request
	LanguageTypesListWithResponse(ctx context.Context, params *LanguageTypesListParams, reqEditors ...RequestEditorFn) (*LanguageTypesListResponse, error)

	// LanguageTypesCreate request with any body
	LanguageTypesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LanguageTypesCreateResponse, error)

	LanguageTypesCreateWithResponse(ctx context.Context, body LanguageTypesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*LanguageTypesCreateResponse, error)

	LanguageTypesCreateWithFormdataBodyWithResponse(ctx context.Context, body LanguageTypesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*LanguageTypesCreateResponse, error)

	// LanguageTypesDestroy request
	LanguageTypesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*LanguageTypesDestroyResponse, error)

	// LanguageTypesRetrieve request
	LanguageTypesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*LanguageTypesRetrieveResponse, error)

	// LanguageTypesPartialUpdate request with any body
	LanguageTypesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LanguageTypesPartialUpdateResponse, error)

	LanguageTypesPartialUpdateWithResponse(ctx context.Context, id int, body LanguageTypesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*LanguageTypesPartialUpdateResponse, error)

	LanguageTypesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body LanguageTypesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*LanguageTypesPartialUpdateResponse, error)

	// LanguageTypesUpdate request with any body
	LanguageTypesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LanguageTypesUpdateResponse, error)

	LanguageTypesUpdateWithResponse(ctx context.Context, id int, body LanguageTypesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*LanguageTypesUpdateResponse, error)

	LanguageTypesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body LanguageTypesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*LanguageTypesUpdateResponse, error)

	// LanguageTypesDeletePreviewList request
	LanguageTypesDeletePreviewListWithResponse(ctx context.Context, id int, params *LanguageTypesDeletePreviewListParams, reqEditors ...RequestEditorFn) (*LanguageTypesDeletePreviewListResponse, error)

	// LanguagesList request
	LanguagesListWithResponse(ctx context.Context, params *LanguagesListParams, reqEditors ...RequestEditorFn) (*LanguagesListResponse, error)

	// LanguagesCreate request with any body
	LanguagesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LanguagesCreateResponse, error)

	LanguagesCreateWithResponse(ctx context.Context, body LanguagesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*LanguagesCreateResponse, error)

	LanguagesCreateWithFormdataBodyWithResponse(ctx context.Context, body LanguagesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*LanguagesCreateResponse, error)

	// LanguagesDestroy request
	LanguagesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*LanguagesDestroyResponse, error)

	// LanguagesRetrieve request
	LanguagesRetrieveWithResponse(ctx context.Context, id int, params *LanguagesRetrieveParams, reqEditors ...RequestEditorFn) (*LanguagesRetrieveResponse, error)

	// LanguagesPartialUpdate request with any body
	LanguagesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LanguagesPartialUpdateResponse, error)

	LanguagesPartialUpdateWithResponse(ctx context.Context, id int, body LanguagesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*LanguagesPartialUpdateResponse, error)

	LanguagesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body LanguagesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*LanguagesPartialUpdateResponse, error)

	// LanguagesUpdate request with any body
	LanguagesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LanguagesUpdateResponse, error)

	LanguagesUpdateWithResponse(ctx context.Context, id int, body LanguagesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*LanguagesUpdateResponse, error)

	LanguagesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body LanguagesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*LanguagesUpdateResponse, error)

	// LanguagesDeletePreviewList request
	LanguagesDeletePreviewListWithResponse(ctx context.Context, id int, params *LanguagesDeletePreviewListParams, reqEditors ...RequestEditorFn) (*LanguagesDeletePreviewListResponse, error)

	// MetadataList request
	MetadataListWithResponse(ctx context.Context, params *MetadataListParams, reqEditors ...RequestEditorFn) (*MetadataListResponse, error)

	// MetadataCreate request with any body
	MetadataCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MetadataCreateResponse, error)

	MetadataCreateWithResponse(ctx context.Context, body MetadataCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*MetadataCreateResponse, error)

	MetadataCreateWithFormdataBodyWithResponse(ctx context.Context, body MetadataCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*MetadataCreateResponse, error)

	// MetadataDestroy request
	MetadataDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*MetadataDestroyResponse, error)

	// MetadataRetrieve request
	MetadataRetrieveWithResponse(ctx context.Context, id int, params *MetadataRetrieveParams, reqEditors ...RequestEditorFn) (*MetadataRetrieveResponse, error)

	// MetadataPartialUpdate request with any body
	MetadataPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MetadataPartialUpdateResponse, error)

	MetadataPartialUpdateWithResponse(ctx context.Context, id int, body MetadataPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*MetadataPartialUpdateResponse, error)

	MetadataPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body MetadataPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*MetadataPartialUpdateResponse, error)

	// MetadataUpdate request with any body
	MetadataUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MetadataUpdateResponse, error)

	MetadataUpdateWithResponse(ctx context.Context, id int, body MetadataUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*MetadataUpdateResponse, error)

	MetadataUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body MetadataUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*MetadataUpdateResponse, error)

	// MetadataDeletePreviewList request
	MetadataDeletePreviewListWithResponse(ctx context.Context, id int, params *MetadataDeletePreviewListParams, reqEditors ...RequestEditorFn) (*MetadataDeletePreviewListResponse, error)

	// NetworkLocationsList request
	NetworkLocationsListWithResponse(ctx context.Context, params *NetworkLocationsListParams, reqEditors ...RequestEditorFn) (*NetworkLocationsListResponse, error)

	// NetworkLocationsCreate request with any body
	NetworkLocationsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkLocationsCreateResponse, error)

	NetworkLocationsCreateWithResponse(ctx context.Context, body NetworkLocationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkLocationsCreateResponse, error)

	NetworkLocationsCreateWithFormdataBodyWithResponse(ctx context.Context, body NetworkLocationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*NetworkLocationsCreateResponse, error)

	// NetworkLocationsDestroy request
	NetworkLocationsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*NetworkLocationsDestroyResponse, error)

	// NetworkLocationsRetrieve request
	NetworkLocationsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*NetworkLocationsRetrieveResponse, error)

	// NetworkLocationsPartialUpdate request with any body
	NetworkLocationsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkLocationsPartialUpdateResponse, error)

	NetworkLocationsPartialUpdateWithResponse(ctx context.Context, id int, body NetworkLocationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkLocationsPartialUpdateResponse, error)

	NetworkLocationsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body NetworkLocationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*NetworkLocationsPartialUpdateResponse, error)

	// NetworkLocationsUpdate request with any body
	NetworkLocationsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkLocationsUpdateResponse, error)

	NetworkLocationsUpdateWithResponse(ctx context.Context, id int, body NetworkLocationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkLocationsUpdateResponse, error)

	NetworkLocationsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body NetworkLocationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*NetworkLocationsUpdateResponse, error)

	// NetworkLocationsDeletePreviewList request
	NetworkLocationsDeletePreviewListWithResponse(ctx context.Context, id int, params *NetworkLocationsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*NetworkLocationsDeletePreviewListResponse, error)

	// NoteTypeList request
	NoteTypeListWithResponse(ctx context.Context, params *NoteTypeListParams, reqEditors ...RequestEditorFn) (*NoteTypeListResponse, error)

	// NoteTypeCreate request with any body
	NoteTypeCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NoteTypeCreateResponse, error)

	NoteTypeCreateWithResponse(ctx context.Context, body NoteTypeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*NoteTypeCreateResponse, error)

	NoteTypeCreateWithFormdataBodyWithResponse(ctx context.Context, body NoteTypeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*NoteTypeCreateResponse, error)

	// NoteTypeDestroy request
	NoteTypeDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*NoteTypeDestroyResponse, error)

	// NoteTypeRetrieve request
	NoteTypeRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*NoteTypeRetrieveResponse, error)

	// NoteTypePartialUpdate request with any body
	NoteTypePartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NoteTypePartialUpdateResponse, error)

	NoteTypePartialUpdateWithResponse(ctx context.Context, id int, body NoteTypePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*NoteTypePartialUpdateResponse, error)

	NoteTypePartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body NoteTypePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*NoteTypePartialUpdateResponse, error)

	// NoteTypeUpdate request with any body
	NoteTypeUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NoteTypeUpdateResponse, error)

	NoteTypeUpdateWithResponse(ctx context.Context, id int, body NoteTypeUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*NoteTypeUpdateResponse, error)

	NoteTypeUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body NoteTypeUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*NoteTypeUpdateResponse, error)

	// NoteTypeDeletePreviewList request
	NoteTypeDeletePreviewListWithResponse(ctx context.Context, id int, params *NoteTypeDeletePreviewListParams, reqEditors ...RequestEditorFn) (*NoteTypeDeletePreviewListResponse, error)

	// NotesList request
	NotesListWithResponse(ctx context.Context, params *NotesListParams, reqEditors ...RequestEditorFn) (*NotesListResponse, error)

	// NotesRetrieve request
	NotesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*NotesRetrieveResponse, error)

	// NotesPartialUpdate request with any body
	NotesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NotesPartialUpdateResponse, error)

	NotesPartialUpdateWithResponse(ctx context.Context, id int, body NotesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*NotesPartialUpdateResponse, error)

	NotesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body NotesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*NotesPartialUpdateResponse, error)

	// NotesUpdate request with any body
	NotesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NotesUpdateResponse, error)

	NotesUpdateWithResponse(ctx context.Context, id int, body NotesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*NotesUpdateResponse, error)

	NotesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body NotesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*NotesUpdateResponse, error)

	// NotificationsList request
	NotificationsListWithResponse(ctx context.Context, params *NotificationsListParams, reqEditors ...RequestEditorFn) (*NotificationsListResponse, error)

	// NotificationsCreate request with any body
	NotificationsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NotificationsCreateResponse, error)

	NotificationsCreateWithResponse(ctx context.Context, body NotificationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*NotificationsCreateResponse, error)

	NotificationsCreateWithFormdataBodyWithResponse(ctx context.Context, body NotificationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*NotificationsCreateResponse, error)

	// NotificationsDestroy request
	NotificationsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*NotificationsDestroyResponse, error)

	// NotificationsRetrieve request
	NotificationsRetrieveWithResponse(ctx context.Context, id int, params *NotificationsRetrieveParams, reqEditors ...RequestEditorFn) (*NotificationsRetrieveResponse, error)

	// NotificationsPartialUpdate request with any body
	NotificationsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NotificationsPartialUpdateResponse, error)

	NotificationsPartialUpdateWithResponse(ctx context.Context, id int, body NotificationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*NotificationsPartialUpdateResponse, error)

	NotificationsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body NotificationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*NotificationsPartialUpdateResponse, error)

	// NotificationsUpdate request with any body
	NotificationsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NotificationsUpdateResponse, error)

	NotificationsUpdateWithResponse(ctx context.Context, id int, body NotificationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*NotificationsUpdateResponse, error)

	NotificationsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body NotificationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*NotificationsUpdateResponse, error)

	// NotificationsDeletePreviewList request
	NotificationsDeletePreviewListWithResponse(ctx context.Context, id int, params *NotificationsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*NotificationsDeletePreviewListResponse, error)

	// Oa3SchemaRetrieve request
	Oa3SchemaRetrieveWithResponse(ctx context.Context, params *Oa3SchemaRetrieveParams, reqEditors ...RequestEditorFn) (*Oa3SchemaRetrieveResponse, error)

	// ProductApiScanConfigurationsList request
	ProductApiScanConfigurationsListWithResponse(ctx context.Context, params *ProductApiScanConfigurationsListParams, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsListResponse, error)

	// ProductApiScanConfigurationsCreate request with any body
	ProductApiScanConfigurationsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsCreateResponse, error)

	ProductApiScanConfigurationsCreateWithResponse(ctx context.Context, body ProductApiScanConfigurationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsCreateResponse, error)

	ProductApiScanConfigurationsCreateWithFormdataBodyWithResponse(ctx context.Context, body ProductApiScanConfigurationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsCreateResponse, error)

	// ProductApiScanConfigurationsDestroy request
	ProductApiScanConfigurationsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsDestroyResponse, error)

	// ProductApiScanConfigurationsRetrieve request
	ProductApiScanConfigurationsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsRetrieveResponse, error)

	// ProductApiScanConfigurationsPartialUpdate request with any body
	ProductApiScanConfigurationsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsPartialUpdateResponse, error)

	ProductApiScanConfigurationsPartialUpdateWithResponse(ctx context.Context, id int, body ProductApiScanConfigurationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsPartialUpdateResponse, error)

	ProductApiScanConfigurationsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductApiScanConfigurationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsPartialUpdateResponse, error)

	// ProductApiScanConfigurationsUpdate request with any body
	ProductApiScanConfigurationsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsUpdateResponse, error)

	ProductApiScanConfigurationsUpdateWithResponse(ctx context.Context, id int, body ProductApiScanConfigurationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsUpdateResponse, error)

	ProductApiScanConfigurationsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductApiScanConfigurationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsUpdateResponse, error)

	// ProductApiScanConfigurationsDeletePreviewList request
	ProductApiScanConfigurationsDeletePreviewListWithResponse(ctx context.Context, id int, params *ProductApiScanConfigurationsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsDeletePreviewListResponse, error)

	// ProductGroupsList request
	ProductGroupsListWithResponse(ctx context.Context, params *ProductGroupsListParams, reqEditors ...RequestEditorFn) (*ProductGroupsListResponse, error)

	// ProductGroupsCreate request with any body
	ProductGroupsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductGroupsCreateResponse, error)

	ProductGroupsCreateWithResponse(ctx context.Context, body ProductGroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductGroupsCreateResponse, error)

	ProductGroupsCreateWithFormdataBodyWithResponse(ctx context.Context, body ProductGroupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductGroupsCreateResponse, error)

	// ProductGroupsDestroy request
	ProductGroupsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductGroupsDestroyResponse, error)

	// ProductGroupsRetrieve request
	ProductGroupsRetrieveWithResponse(ctx context.Context, id int, params *ProductGroupsRetrieveParams, reqEditors ...RequestEditorFn) (*ProductGroupsRetrieveResponse, error)

	// ProductGroupsPartialUpdate request
	ProductGroupsPartialUpdateWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductGroupsPartialUpdateResponse, error)

	// ProductGroupsUpdate request with any body
	ProductGroupsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductGroupsUpdateResponse, error)

	ProductGroupsUpdateWithResponse(ctx context.Context, id int, body ProductGroupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductGroupsUpdateResponse, error)

	ProductGroupsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductGroupsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductGroupsUpdateResponse, error)

	// ProductGroupsDeletePreviewList request
	ProductGroupsDeletePreviewListWithResponse(ctx context.Context, id int, params *ProductGroupsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*ProductGroupsDeletePreviewListResponse, error)

	// ProductMembersList request
	ProductMembersListWithResponse(ctx context.Context, params *ProductMembersListParams, reqEditors ...RequestEditorFn) (*ProductMembersListResponse, error)

	// ProductMembersCreate request with any body
	ProductMembersCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductMembersCreateResponse, error)

	ProductMembersCreateWithResponse(ctx context.Context, body ProductMembersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductMembersCreateResponse, error)

	ProductMembersCreateWithFormdataBodyWithResponse(ctx context.Context, body ProductMembersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductMembersCreateResponse, error)

	// ProductMembersDestroy request
	ProductMembersDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductMembersDestroyResponse, error)

	// ProductMembersRetrieve request
	ProductMembersRetrieveWithResponse(ctx context.Context, id int, params *ProductMembersRetrieveParams, reqEditors ...RequestEditorFn) (*ProductMembersRetrieveResponse, error)

	// ProductMembersPartialUpdate request
	ProductMembersPartialUpdateWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductMembersPartialUpdateResponse, error)

	// ProductMembersUpdate request with any body
	ProductMembersUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductMembersUpdateResponse, error)

	ProductMembersUpdateWithResponse(ctx context.Context, id int, body ProductMembersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductMembersUpdateResponse, error)

	ProductMembersUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductMembersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductMembersUpdateResponse, error)

	// ProductMembersDeletePreviewList request
	ProductMembersDeletePreviewListWithResponse(ctx context.Context, id int, params *ProductMembersDeletePreviewListParams, reqEditors ...RequestEditorFn) (*ProductMembersDeletePreviewListResponse, error)

	// ProductTypeGroupsList request
	ProductTypeGroupsListWithResponse(ctx context.Context, params *ProductTypeGroupsListParams, reqEditors ...RequestEditorFn) (*ProductTypeGroupsListResponse, error)

	// ProductTypeGroupsCreate request with any body
	ProductTypeGroupsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductTypeGroupsCreateResponse, error)

	ProductTypeGroupsCreateWithResponse(ctx context.Context, body ProductTypeGroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductTypeGroupsCreateResponse, error)

	ProductTypeGroupsCreateWithFormdataBodyWithResponse(ctx context.Context, body ProductTypeGroupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductTypeGroupsCreateResponse, error)

	// ProductTypeGroupsDestroy request
	ProductTypeGroupsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductTypeGroupsDestroyResponse, error)

	// ProductTypeGroupsRetrieve request
	ProductTypeGroupsRetrieveWithResponse(ctx context.Context, id int, params *ProductTypeGroupsRetrieveParams, reqEditors ...RequestEditorFn) (*ProductTypeGroupsRetrieveResponse, error)

	// ProductTypeGroupsPartialUpdate request
	ProductTypeGroupsPartialUpdateWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductTypeGroupsPartialUpdateResponse, error)

	// ProductTypeGroupsUpdate request with any body
	ProductTypeGroupsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductTypeGroupsUpdateResponse, error)

	ProductTypeGroupsUpdateWithResponse(ctx context.Context, id int, body ProductTypeGroupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductTypeGroupsUpdateResponse, error)

	ProductTypeGroupsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductTypeGroupsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductTypeGroupsUpdateResponse, error)

	// ProductTypeGroupsDeletePreviewList request
	ProductTypeGroupsDeletePreviewListWithResponse(ctx context.Context, id int, params *ProductTypeGroupsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*ProductTypeGroupsDeletePreviewListResponse, error)

	// ProductTypeMembersList request
	ProductTypeMembersListWithResponse(ctx context.Context, params *ProductTypeMembersListParams, reqEditors ...RequestEditorFn) (*ProductTypeMembersListResponse, error)

	// ProductTypeMembersCreate request with any body
	ProductTypeMembersCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductTypeMembersCreateResponse, error)

	ProductTypeMembersCreateWithResponse(ctx context.Context, body ProductTypeMembersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductTypeMembersCreateResponse, error)

	ProductTypeMembersCreateWithFormdataBodyWithResponse(ctx context.Context, body ProductTypeMembersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductTypeMembersCreateResponse, error)

	// ProductTypeMembersDestroy request
	ProductTypeMembersDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductTypeMembersDestroyResponse, error)

	// ProductTypeMembersRetrieve request
	ProductTypeMembersRetrieveWithResponse(ctx context.Context, id int, params *ProductTypeMembersRetrieveParams, reqEditors ...RequestEditorFn) (*ProductTypeMembersRetrieveResponse, error)

	// ProductTypeMembersPartialUpdate request
	ProductTypeMembersPartialUpdateWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductTypeMembersPartialUpdateResponse, error)

	// ProductTypeMembersUpdate request with any body
	ProductTypeMembersUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductTypeMembersUpdateResponse, error)

	ProductTypeMembersUpdateWithResponse(ctx context.Context, id int, body ProductTypeMembersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductTypeMembersUpdateResponse, error)

	ProductTypeMembersUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductTypeMembersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductTypeMembersUpdateResponse, error)

	// ProductTypeMembersDeletePreviewList request
	ProductTypeMembersDeletePreviewListWithResponse(ctx context.Context, id int, params *ProductTypeMembersDeletePreviewListParams, reqEditors ...RequestEditorFn) (*ProductTypeMembersDeletePreviewListResponse, error)

	// ProductTypesList request
	ProductTypesListWithResponse(ctx context.Context, params *ProductTypesListParams, reqEditors ...RequestEditorFn) (*ProductTypesListResponse, error)

	// ProductTypesCreate request with any body
	ProductTypesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductTypesCreateResponse, error)

	ProductTypesCreateWithResponse(ctx context.Context, body ProductTypesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductTypesCreateResponse, error)

	ProductTypesCreateWithFormdataBodyWithResponse(ctx context.Context, body ProductTypesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductTypesCreateResponse, error)

	// ProductTypesDestroy request
	ProductTypesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductTypesDestroyResponse, error)

	// ProductTypesRetrieve request
	ProductTypesRetrieveWithResponse(ctx context.Context, id int, params *ProductTypesRetrieveParams, reqEditors ...RequestEditorFn) (*ProductTypesRetrieveResponse, error)

	// ProductTypesPartialUpdate request with any body
	ProductTypesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductTypesPartialUpdateResponse, error)

	ProductTypesPartialUpdateWithResponse(ctx context.Context, id int, body ProductTypesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductTypesPartialUpdateResponse, error)

	ProductTypesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductTypesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductTypesPartialUpdateResponse, error)

	// ProductTypesUpdate request with any body
	ProductTypesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductTypesUpdateResponse, error)

	ProductTypesUpdateWithResponse(ctx context.Context, id int, body ProductTypesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductTypesUpdateResponse, error)

	ProductTypesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductTypesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductTypesUpdateResponse, error)

	// ProductTypesDeletePreviewList request
	ProductTypesDeletePreviewListWithResponse(ctx context.Context, id int, params *ProductTypesDeletePreviewListParams, reqEditors ...RequestEditorFn) (*ProductTypesDeletePreviewListResponse, error)

	// ProductTypesGenerateReportCreate request with any body
	ProductTypesGenerateReportCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductTypesGenerateReportCreateResponse, error)

	ProductTypesGenerateReportCreateWithResponse(ctx context.Context, id int, body ProductTypesGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductTypesGenerateReportCreateResponse, error)

	ProductTypesGenerateReportCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductTypesGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductTypesGenerateReportCreateResponse, error)

	// ProductsList request
	ProductsListWithResponse(ctx context.Context, params *ProductsListParams, reqEditors ...RequestEditorFn) (*ProductsListResponse, error)

	// ProductsCreate request with any body
	ProductsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductsCreateResponse, error)

	ProductsCreateWithResponse(ctx context.Context, body ProductsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductsCreateResponse, error)

	ProductsCreateWithFormdataBodyWithResponse(ctx context.Context, body ProductsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductsCreateResponse, error)

	// ProductsDestroy request
	ProductsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductsDestroyResponse, error)

	// ProductsRetrieve request
	ProductsRetrieveWithResponse(ctx context.Context, id int, params *ProductsRetrieveParams, reqEditors ...RequestEditorFn) (*ProductsRetrieveResponse, error)

	// ProductsPartialUpdate request with any body
	ProductsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductsPartialUpdateResponse, error)

	ProductsPartialUpdateWithResponse(ctx context.Context, id int, body ProductsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductsPartialUpdateResponse, error)

	ProductsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductsPartialUpdateResponse, error)

	// ProductsUpdate request with any body
	ProductsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductsUpdateResponse, error)

	ProductsUpdateWithResponse(ctx context.Context, id int, body ProductsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductsUpdateResponse, error)

	ProductsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductsUpdateResponse, error)

	// ProductsDeletePreviewList request
	ProductsDeletePreviewListWithResponse(ctx context.Context, id int, params *ProductsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*ProductsDeletePreviewListResponse, error)

	// ProductsGenerateReportCreate request with any body
	ProductsGenerateReportCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductsGenerateReportCreateResponse, error)

	ProductsGenerateReportCreateWithResponse(ctx context.Context, id int, body ProductsGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductsGenerateReportCreateResponse, error)

	ProductsGenerateReportCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductsGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductsGenerateReportCreateResponse, error)

	// QuestionnaireAnsweredQuestionnairesList request
	QuestionnaireAnsweredQuestionnairesListWithResponse(ctx context.Context, params *QuestionnaireAnsweredQuestionnairesListParams, reqEditors ...RequestEditorFn) (*QuestionnaireAnsweredQuestionnairesListResponse, error)

	// QuestionnaireAnsweredQuestionnairesRetrieve request
	QuestionnaireAnsweredQuestionnairesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*QuestionnaireAnsweredQuestionnairesRetrieveResponse, error)

	// QuestionnaireAnswersList request
	QuestionnaireAnswersListWithResponse(ctx context.Context, params *QuestionnaireAnswersListParams, reqEditors ...RequestEditorFn) (*QuestionnaireAnswersListResponse, error)

	// QuestionnaireAnswersRetrieve request
	QuestionnaireAnswersRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*QuestionnaireAnswersRetrieveResponse, error)

	// QuestionnaireEngagementQuestionnairesList request
	QuestionnaireEngagementQuestionnairesListWithResponse(ctx context.Context, params *QuestionnaireEngagementQuestionnairesListParams, reqEditors ...RequestEditorFn) (*QuestionnaireEngagementQuestionnairesListResponse, error)

	// QuestionnaireEngagementQuestionnairesRetrieve request
	QuestionnaireEngagementQuestionnairesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*QuestionnaireEngagementQuestionnairesRetrieveResponse, error)

	// QuestionnaireGeneralQuestionnairesList request
	QuestionnaireGeneralQuestionnairesListWithResponse(ctx context.Context, params *QuestionnaireGeneralQuestionnairesListParams, reqEditors ...RequestEditorFn) (*QuestionnaireGeneralQuestionnairesListResponse, error)

	// QuestionnaireGeneralQuestionnairesRetrieve request
	QuestionnaireGeneralQuestionnairesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*QuestionnaireGeneralQuestionnairesRetrieveResponse, error)

	// QuestionnaireQuestionsList request
	QuestionnaireQuestionsListWithResponse(ctx context.Context, params *QuestionnaireQuestionsListParams, reqEditors ...RequestEditorFn) (*QuestionnaireQuestionsListResponse, error)

	// QuestionnaireQuestionsRetrieve request
	QuestionnaireQuestionsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*QuestionnaireQuestionsRetrieveResponse, error)

	// RegulationsList request
	RegulationsListWithResponse(ctx context.Context, params *RegulationsListParams, reqEditors ...RequestEditorFn) (*RegulationsListResponse, error)

	// RegulationsCreate request with any body
	RegulationsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegulationsCreateResponse, error)

	RegulationsCreateWithResponse(ctx context.Context, body RegulationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*RegulationsCreateResponse, error)

	RegulationsCreateWithFormdataBodyWithResponse(ctx context.Context, body RegulationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*RegulationsCreateResponse, error)

	// RegulationsDestroy request
	RegulationsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*RegulationsDestroyResponse, error)

	// RegulationsRetrieve request
	RegulationsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*RegulationsRetrieveResponse, error)

	// RegulationsPartialUpdate request with any body
	RegulationsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegulationsPartialUpdateResponse, error)

	RegulationsPartialUpdateWithResponse(ctx context.Context, id int, body RegulationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*RegulationsPartialUpdateResponse, error)

	RegulationsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body RegulationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*RegulationsPartialUpdateResponse, error)

	// RegulationsUpdate request with any body
	RegulationsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegulationsUpdateResponse, error)

	RegulationsUpdateWithResponse(ctx context.Context, id int, body RegulationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*RegulationsUpdateResponse, error)

	RegulationsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body RegulationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*RegulationsUpdateResponse, error)

	// RegulationsDeletePreviewList request
	RegulationsDeletePreviewListWithResponse(ctx context.Context, id int, params *RegulationsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*RegulationsDeletePreviewListResponse, error)

	// ReimportScanCreate request with any body
	ReimportScanCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReimportScanCreateResponse, error)

	// RiskAcceptanceList request
	RiskAcceptanceListWithResponse(ctx context.Context, params *RiskAcceptanceListParams, reqEditors ...RequestEditorFn) (*RiskAcceptanceListResponse, error)

	// RiskAcceptanceDestroy request
	RiskAcceptanceDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*RiskAcceptanceDestroyResponse, error)

	// RiskAcceptanceRetrieve request
	RiskAcceptanceRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*RiskAcceptanceRetrieveResponse, error)

	// RiskAcceptanceDeletePreviewList request
	RiskAcceptanceDeletePreviewListWithResponse(ctx context.Context, id int, params *RiskAcceptanceDeletePreviewListParams, reqEditors ...RequestEditorFn) (*RiskAcceptanceDeletePreviewListResponse, error)

	// RiskAcceptanceDownloadProofRetrieve request
	RiskAcceptanceDownloadProofRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*RiskAcceptanceDownloadProofRetrieveResponse, error)

	// RolesList request
	RolesListWithResponse(ctx context.Context, params *RolesListParams, reqEditors ...RequestEditorFn) (*RolesListResponse, error)

	// RolesRetrieve request
	RolesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*RolesRetrieveResponse, error)

	// SlaConfigurationsList request
	SlaConfigurationsListWithResponse(ctx context.Context, params *SlaConfigurationsListParams, reqEditors ...RequestEditorFn) (*SlaConfigurationsListResponse, error)

	// SlaConfigurationsCreate request with any body
	SlaConfigurationsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlaConfigurationsCreateResponse, error)

	SlaConfigurationsCreateWithResponse(ctx context.Context, body SlaConfigurationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*SlaConfigurationsCreateResponse, error)

	SlaConfigurationsCreateWithFormdataBodyWithResponse(ctx context.Context, body SlaConfigurationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SlaConfigurationsCreateResponse, error)

	// SlaConfigurationsDestroy request
	SlaConfigurationsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*SlaConfigurationsDestroyResponse, error)

	// SlaConfigurationsRetrieve request
	SlaConfigurationsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*SlaConfigurationsRetrieveResponse, error)

	// SlaConfigurationsPartialUpdate request with any body
	SlaConfigurationsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlaConfigurationsPartialUpdateResponse, error)

	SlaConfigurationsPartialUpdateWithResponse(ctx context.Context, id int, body SlaConfigurationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SlaConfigurationsPartialUpdateResponse, error)

	SlaConfigurationsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body SlaConfigurationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SlaConfigurationsPartialUpdateResponse, error)

	// SlaConfigurationsUpdate request with any body
	SlaConfigurationsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlaConfigurationsUpdateResponse, error)

	SlaConfigurationsUpdateWithResponse(ctx context.Context, id int, body SlaConfigurationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SlaConfigurationsUpdateResponse, error)

	SlaConfigurationsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body SlaConfigurationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SlaConfigurationsUpdateResponse, error)

	// SonarqubeIssuesList request
	SonarqubeIssuesListWithResponse(ctx context.Context, params *SonarqubeIssuesListParams, reqEditors ...RequestEditorFn) (*SonarqubeIssuesListResponse, error)

	// SonarqubeIssuesCreate request with any body
	SonarqubeIssuesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SonarqubeIssuesCreateResponse, error)

	SonarqubeIssuesCreateWithResponse(ctx context.Context, body SonarqubeIssuesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeIssuesCreateResponse, error)

	SonarqubeIssuesCreateWithFormdataBodyWithResponse(ctx context.Context, body SonarqubeIssuesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeIssuesCreateResponse, error)

	// SonarqubeIssuesDestroy request
	SonarqubeIssuesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*SonarqubeIssuesDestroyResponse, error)

	// SonarqubeIssuesRetrieve request
	SonarqubeIssuesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*SonarqubeIssuesRetrieveResponse, error)

	// SonarqubeIssuesPartialUpdate request with any body
	SonarqubeIssuesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SonarqubeIssuesPartialUpdateResponse, error)

	SonarqubeIssuesPartialUpdateWithResponse(ctx context.Context, id int, body SonarqubeIssuesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeIssuesPartialUpdateResponse, error)

	SonarqubeIssuesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body SonarqubeIssuesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeIssuesPartialUpdateResponse, error)

	// SonarqubeIssuesUpdate request with any body
	SonarqubeIssuesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SonarqubeIssuesUpdateResponse, error)

	SonarqubeIssuesUpdateWithResponse(ctx context.Context, id int, body SonarqubeIssuesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeIssuesUpdateResponse, error)

	SonarqubeIssuesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body SonarqubeIssuesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeIssuesUpdateResponse, error)

	// SonarqubeIssuesDeletePreviewList request
	SonarqubeIssuesDeletePreviewListWithResponse(ctx context.Context, id int, params *SonarqubeIssuesDeletePreviewListParams, reqEditors ...RequestEditorFn) (*SonarqubeIssuesDeletePreviewListResponse, error)

	// SonarqubeTransitionsList request
	SonarqubeTransitionsListWithResponse(ctx context.Context, params *SonarqubeTransitionsListParams, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsListResponse, error)

	// SonarqubeTransitionsCreate request with any body
	SonarqubeTransitionsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsCreateResponse, error)

	SonarqubeTransitionsCreateWithResponse(ctx context.Context, body SonarqubeTransitionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsCreateResponse, error)

	SonarqubeTransitionsCreateWithFormdataBodyWithResponse(ctx context.Context, body SonarqubeTransitionsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsCreateResponse, error)

	// SonarqubeTransitionsDestroy request
	SonarqubeTransitionsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsDestroyResponse, error)

	// SonarqubeTransitionsRetrieve request
	SonarqubeTransitionsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsRetrieveResponse, error)

	// SonarqubeTransitionsPartialUpdate request with any body
	SonarqubeTransitionsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsPartialUpdateResponse, error)

	SonarqubeTransitionsPartialUpdateWithResponse(ctx context.Context, id int, body SonarqubeTransitionsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsPartialUpdateResponse, error)

	SonarqubeTransitionsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body SonarqubeTransitionsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsPartialUpdateResponse, error)

	// SonarqubeTransitionsUpdate request with any body
	SonarqubeTransitionsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsUpdateResponse, error)

	SonarqubeTransitionsUpdateWithResponse(ctx context.Context, id int, body SonarqubeTransitionsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsUpdateResponse, error)

	SonarqubeTransitionsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body SonarqubeTransitionsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsUpdateResponse, error)

	// SonarqubeTransitionsDeletePreviewList request
	SonarqubeTransitionsDeletePreviewListWithResponse(ctx context.Context, id int, params *SonarqubeTransitionsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsDeletePreviewListResponse, error)

	// StubFindingsList request
	StubFindingsListWithResponse(ctx context.Context, params *StubFindingsListParams, reqEditors ...RequestEditorFn) (*StubFindingsListResponse, error)

	// StubFindingsCreate request with any body
	StubFindingsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StubFindingsCreateResponse, error)

	StubFindingsCreateWithResponse(ctx context.Context, body StubFindingsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*StubFindingsCreateResponse, error)

	StubFindingsCreateWithFormdataBodyWithResponse(ctx context.Context, body StubFindingsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*StubFindingsCreateResponse, error)

	// StubFindingsDestroy request
	StubFindingsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*StubFindingsDestroyResponse, error)

	// StubFindingsRetrieve request
	StubFindingsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*StubFindingsRetrieveResponse, error)

	// StubFindingsPartialUpdate request with any body
	StubFindingsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StubFindingsPartialUpdateResponse, error)

	StubFindingsPartialUpdateWithResponse(ctx context.Context, id int, body StubFindingsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*StubFindingsPartialUpdateResponse, error)

	StubFindingsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body StubFindingsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*StubFindingsPartialUpdateResponse, error)

	// StubFindingsUpdate request with any body
	StubFindingsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StubFindingsUpdateResponse, error)

	StubFindingsUpdateWithResponse(ctx context.Context, id int, body StubFindingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*StubFindingsUpdateResponse, error)

	StubFindingsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body StubFindingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*StubFindingsUpdateResponse, error)

	// StubFindingsDeletePreviewList request
	StubFindingsDeletePreviewListWithResponse(ctx context.Context, id int, params *StubFindingsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*StubFindingsDeletePreviewListResponse, error)

	// SystemSettingsList request
	SystemSettingsListWithResponse(ctx context.Context, params *SystemSettingsListParams, reqEditors ...RequestEditorFn) (*SystemSettingsListResponse, error)

	// SystemSettingsPartialUpdate request with any body
	SystemSettingsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SystemSettingsPartialUpdateResponse, error)

	SystemSettingsPartialUpdateWithResponse(ctx context.Context, id int, body SystemSettingsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SystemSettingsPartialUpdateResponse, error)

	SystemSettingsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body SystemSettingsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SystemSettingsPartialUpdateResponse, error)

	// SystemSettingsUpdate request with any body
	SystemSettingsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SystemSettingsUpdateResponse, error)

	SystemSettingsUpdateWithResponse(ctx context.Context, id int, body SystemSettingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SystemSettingsUpdateResponse, error)

	SystemSettingsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body SystemSettingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SystemSettingsUpdateResponse, error)

	// TechnologiesList request
	TechnologiesListWithResponse(ctx context.Context, params *TechnologiesListParams, reqEditors ...RequestEditorFn) (*TechnologiesListResponse, error)

	// TechnologiesCreate request with any body
	TechnologiesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TechnologiesCreateResponse, error)

	TechnologiesCreateWithResponse(ctx context.Context, body TechnologiesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TechnologiesCreateResponse, error)

	TechnologiesCreateWithFormdataBodyWithResponse(ctx context.Context, body TechnologiesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TechnologiesCreateResponse, error)

	// TechnologiesDestroy request
	TechnologiesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TechnologiesDestroyResponse, error)

	// TechnologiesRetrieve request
	TechnologiesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TechnologiesRetrieveResponse, error)

	// TechnologiesPartialUpdate request with any body
	TechnologiesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TechnologiesPartialUpdateResponse, error)

	TechnologiesPartialUpdateWithResponse(ctx context.Context, id int, body TechnologiesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TechnologiesPartialUpdateResponse, error)

	TechnologiesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body TechnologiesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TechnologiesPartialUpdateResponse, error)

	// TechnologiesUpdate request with any body
	TechnologiesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TechnologiesUpdateResponse, error)

	TechnologiesUpdateWithResponse(ctx context.Context, id int, body TechnologiesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TechnologiesUpdateResponse, error)

	TechnologiesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body TechnologiesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TechnologiesUpdateResponse, error)

	// TechnologiesDeletePreviewList request
	TechnologiesDeletePreviewListWithResponse(ctx context.Context, id int, params *TechnologiesDeletePreviewListParams, reqEditors ...RequestEditorFn) (*TechnologiesDeletePreviewListResponse, error)

	// TestImportsList request
	TestImportsListWithResponse(ctx context.Context, params *TestImportsListParams, reqEditors ...RequestEditorFn) (*TestImportsListResponse, error)

	// TestImportsCreate request with any body
	TestImportsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestImportsCreateResponse, error)

	TestImportsCreateWithResponse(ctx context.Context, body TestImportsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestImportsCreateResponse, error)

	TestImportsCreateWithFormdataBodyWithResponse(ctx context.Context, body TestImportsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestImportsCreateResponse, error)

	// TestImportsDestroy request
	TestImportsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TestImportsDestroyResponse, error)

	// TestImportsRetrieve request
	TestImportsRetrieveWithResponse(ctx context.Context, id int, params *TestImportsRetrieveParams, reqEditors ...RequestEditorFn) (*TestImportsRetrieveResponse, error)

	// TestImportsPartialUpdate request with any body
	TestImportsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestImportsPartialUpdateResponse, error)

	TestImportsPartialUpdateWithResponse(ctx context.Context, id int, body TestImportsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestImportsPartialUpdateResponse, error)

	TestImportsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body TestImportsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestImportsPartialUpdateResponse, error)

	// TestImportsUpdate request with any body
	TestImportsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestImportsUpdateResponse, error)

	TestImportsUpdateWithResponse(ctx context.Context, id int, body TestImportsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestImportsUpdateResponse, error)

	TestImportsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body TestImportsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestImportsUpdateResponse, error)

	// TestImportsDeletePreviewList request
	TestImportsDeletePreviewListWithResponse(ctx context.Context, id int, params *TestImportsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*TestImportsDeletePreviewListResponse, error)

	// TestTypesList request
	TestTypesListWithResponse(ctx context.Context, params *TestTypesListParams, reqEditors ...RequestEditorFn) (*TestTypesListResponse, error)

	// TestTypesCreate request with any body
	TestTypesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestTypesCreateResponse, error)

	TestTypesCreateWithResponse(ctx context.Context, body TestTypesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestTypesCreateResponse, error)

	TestTypesCreateWithFormdataBodyWithResponse(ctx context.Context, body TestTypesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestTypesCreateResponse, error)

	// TestTypesRetrieve request
	TestTypesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TestTypesRetrieveResponse, error)

	// TestTypesPartialUpdate request with any body
	TestTypesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestTypesPartialUpdateResponse, error)

	TestTypesPartialUpdateWithResponse(ctx context.Context, id int, body TestTypesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestTypesPartialUpdateResponse, error)

	TestTypesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body TestTypesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestTypesPartialUpdateResponse, error)

	// TestTypesUpdate request with any body
	TestTypesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestTypesUpdateResponse, error)

	TestTypesUpdateWithResponse(ctx context.Context, id int, body TestTypesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestTypesUpdateResponse, error)

	TestTypesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body TestTypesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestTypesUpdateResponse, error)

	// TestsList request
	TestsListWithResponse(ctx context.Context, params *TestsListParams, reqEditors ...RequestEditorFn) (*TestsListResponse, error)

	// TestsCreate request with any body
	TestsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestsCreateResponse, error)

	TestsCreateWithResponse(ctx context.Context, body TestsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestsCreateResponse, error)

	TestsCreateWithFormdataBodyWithResponse(ctx context.Context, body TestsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestsCreateResponse, error)

	// TestsDestroy request
	TestsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TestsDestroyResponse, error)

	// TestsRetrieve request
	TestsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TestsRetrieveResponse, error)

	// TestsPartialUpdate request with any body
	TestsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestsPartialUpdateResponse, error)

	TestsPartialUpdateWithResponse(ctx context.Context, id int, body TestsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestsPartialUpdateResponse, error)

	TestsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body TestsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestsPartialUpdateResponse, error)

	// TestsUpdate request with any body
	TestsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestsUpdateResponse, error)

	TestsUpdateWithResponse(ctx context.Context, id int, body TestsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestsUpdateResponse, error)

	TestsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body TestsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestsUpdateResponse, error)

	// TestsAcceptRisksCreate request with any body
	TestsAcceptRisksCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestsAcceptRisksCreateResponse, error)

	TestsAcceptRisksCreateWithResponse(ctx context.Context, id int, body TestsAcceptRisksCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestsAcceptRisksCreateResponse, error)

	TestsAcceptRisksCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body TestsAcceptRisksCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestsAcceptRisksCreateResponse, error)

	// TestsDeletePreviewList request
	TestsDeletePreviewListWithResponse(ctx context.Context, id int, params *TestsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*TestsDeletePreviewListResponse, error)

	// TestsFilesRetrieve request
	TestsFilesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TestsFilesRetrieveResponse, error)

	// TestsFilesCreate request with any body
	TestsFilesCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestsFilesCreateResponse, error)

	// TestsFilesDownloadRetrieve request
	TestsFilesDownloadRetrieveWithResponse(ctx context.Context, id int, fileId string, reqEditors ...RequestEditorFn) (*TestsFilesDownloadRetrieveResponse, error)

	// TestsGenerateReportCreate request with any body
	TestsGenerateReportCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestsGenerateReportCreateResponse, error)

	TestsGenerateReportCreateWithResponse(ctx context.Context, id int, body TestsGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestsGenerateReportCreateResponse, error)

	TestsGenerateReportCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body TestsGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestsGenerateReportCreateResponse, error)

	// TestsNotesRetrieve request
	TestsNotesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TestsNotesRetrieveResponse, error)

	// TestsNotesCreate request with any body
	TestsNotesCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestsNotesCreateResponse, error)

	TestsNotesCreateWithResponse(ctx context.Context, id int, body TestsNotesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestsNotesCreateResponse, error)

	TestsNotesCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body TestsNotesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestsNotesCreateResponse, error)

	// ToolConfigurationsList request
	ToolConfigurationsListWithResponse(ctx context.Context, params *ToolConfigurationsListParams, reqEditors ...RequestEditorFn) (*ToolConfigurationsListResponse, error)

	// ToolConfigurationsCreate request with any body
	ToolConfigurationsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ToolConfigurationsCreateResponse, error)

	ToolConfigurationsCreateWithResponse(ctx context.Context, body ToolConfigurationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ToolConfigurationsCreateResponse, error)

	ToolConfigurationsCreateWithFormdataBodyWithResponse(ctx context.Context, body ToolConfigurationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ToolConfigurationsCreateResponse, error)

	// ToolConfigurationsDestroy request
	ToolConfigurationsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ToolConfigurationsDestroyResponse, error)

	// ToolConfigurationsRetrieve request
	ToolConfigurationsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ToolConfigurationsRetrieveResponse, error)

	// ToolConfigurationsPartialUpdate request with any body
	ToolConfigurationsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ToolConfigurationsPartialUpdateResponse, error)

	ToolConfigurationsPartialUpdateWithResponse(ctx context.Context, id int, body ToolConfigurationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ToolConfigurationsPartialUpdateResponse, error)

	ToolConfigurationsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ToolConfigurationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ToolConfigurationsPartialUpdateResponse, error)

	// ToolConfigurationsUpdate request with any body
	ToolConfigurationsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ToolConfigurationsUpdateResponse, error)

	ToolConfigurationsUpdateWithResponse(ctx context.Context, id int, body ToolConfigurationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ToolConfigurationsUpdateResponse, error)

	ToolConfigurationsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ToolConfigurationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ToolConfigurationsUpdateResponse, error)

	// ToolConfigurationsDeletePreviewList request
	ToolConfigurationsDeletePreviewListWithResponse(ctx context.Context, id int, params *ToolConfigurationsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*ToolConfigurationsDeletePreviewListResponse, error)

	// ToolProductSettingsList request
	ToolProductSettingsListWithResponse(ctx context.Context, params *ToolProductSettingsListParams, reqEditors ...RequestEditorFn) (*ToolProductSettingsListResponse, error)

	// ToolProductSettingsCreate request with any body
	ToolProductSettingsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ToolProductSettingsCreateResponse, error)

	ToolProductSettingsCreateWithResponse(ctx context.Context, body ToolProductSettingsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ToolProductSettingsCreateResponse, error)

	ToolProductSettingsCreateWithFormdataBodyWithResponse(ctx context.Context, body ToolProductSettingsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ToolProductSettingsCreateResponse, error)

	// ToolProductSettingsDestroy request
	ToolProductSettingsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ToolProductSettingsDestroyResponse, error)

	// ToolProductSettingsRetrieve request
	ToolProductSettingsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ToolProductSettingsRetrieveResponse, error)

	// ToolProductSettingsPartialUpdate request with any body
	ToolProductSettingsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ToolProductSettingsPartialUpdateResponse, error)

	ToolProductSettingsPartialUpdateWithResponse(ctx context.Context, id int, body ToolProductSettingsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ToolProductSettingsPartialUpdateResponse, error)

	ToolProductSettingsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ToolProductSettingsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ToolProductSettingsPartialUpdateResponse, error)

	// ToolProductSettingsUpdate request with any body
	ToolProductSettingsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ToolProductSettingsUpdateResponse, error)

	ToolProductSettingsUpdateWithResponse(ctx context.Context, id int, body ToolProductSettingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ToolProductSettingsUpdateResponse, error)

	ToolProductSettingsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ToolProductSettingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ToolProductSettingsUpdateResponse, error)

	// ToolProductSettingsDeletePreviewList request
	ToolProductSettingsDeletePreviewListWithResponse(ctx context.Context, id int, params *ToolProductSettingsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*ToolProductSettingsDeletePreviewListResponse, error)

	// ToolTypesList request
	ToolTypesListWithResponse(ctx context.Context, params *ToolTypesListParams, reqEditors ...RequestEditorFn) (*ToolTypesListResponse, error)

	// ToolTypesCreate request with any body
	ToolTypesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ToolTypesCreateResponse, error)

	ToolTypesCreateWithResponse(ctx context.Context, body ToolTypesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ToolTypesCreateResponse, error)

	ToolTypesCreateWithFormdataBodyWithResponse(ctx context.Context, body ToolTypesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ToolTypesCreateResponse, error)

	// ToolTypesDestroy request
	ToolTypesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ToolTypesDestroyResponse, error)

	// ToolTypesRetrieve request
	ToolTypesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ToolTypesRetrieveResponse, error)

	// ToolTypesPartialUpdate request with any body
	ToolTypesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ToolTypesPartialUpdateResponse, error)

	ToolTypesPartialUpdateWithResponse(ctx context.Context, id int, body ToolTypesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ToolTypesPartialUpdateResponse, error)

	ToolTypesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ToolTypesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ToolTypesPartialUpdateResponse, error)

	// ToolTypesUpdate request with any body
	ToolTypesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ToolTypesUpdateResponse, error)

	ToolTypesUpdateWithResponse(ctx context.Context, id int, body ToolTypesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ToolTypesUpdateResponse, error)

	ToolTypesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ToolTypesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ToolTypesUpdateResponse, error)

	// ToolTypesDeletePreviewList request
	ToolTypesDeletePreviewListWithResponse(ctx context.Context, id int, params *ToolTypesDeletePreviewListParams, reqEditors ...RequestEditorFn) (*ToolTypesDeletePreviewListResponse, error)

	// UserContactInfosList request
	UserContactInfosListWithResponse(ctx context.Context, params *UserContactInfosListParams, reqEditors ...RequestEditorFn) (*UserContactInfosListResponse, error)

	// UserContactInfosCreate request with any body
	UserContactInfosCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserContactInfosCreateResponse, error)

	UserContactInfosCreateWithResponse(ctx context.Context, body UserContactInfosCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*UserContactInfosCreateResponse, error)

	UserContactInfosCreateWithFormdataBodyWithResponse(ctx context.Context, body UserContactInfosCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UserContactInfosCreateResponse, error)

	// UserContactInfosDestroy request
	UserContactInfosDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*UserContactInfosDestroyResponse, error)

	// UserContactInfosRetrieve request
	UserContactInfosRetrieveWithResponse(ctx context.Context, id int, params *UserContactInfosRetrieveParams, reqEditors ...RequestEditorFn) (*UserContactInfosRetrieveResponse, error)

	// UserContactInfosPartialUpdate request with any body
	UserContactInfosPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserContactInfosPartialUpdateResponse, error)

	UserContactInfosPartialUpdateWithResponse(ctx context.Context, id int, body UserContactInfosPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UserContactInfosPartialUpdateResponse, error)

	UserContactInfosPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body UserContactInfosPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UserContactInfosPartialUpdateResponse, error)

	// UserContactInfosUpdate request with any body
	UserContactInfosUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserContactInfosUpdateResponse, error)

	UserContactInfosUpdateWithResponse(ctx context.Context, id int, body UserContactInfosUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UserContactInfosUpdateResponse, error)

	UserContactInfosUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body UserContactInfosUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UserContactInfosUpdateResponse, error)

	// UserContactInfosDeletePreviewList request
	UserContactInfosDeletePreviewListWithResponse(ctx context.Context, id int, params *UserContactInfosDeletePreviewListParams, reqEditors ...RequestEditorFn) (*UserContactInfosDeletePreviewListResponse, error)

	// UserProfileRetrieve request
	UserProfileRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UserProfileRetrieveResponse, error)

	// UsersList request
	UsersListWithResponse(ctx context.Context, params *UsersListParams, reqEditors ...RequestEditorFn) (*UsersListResponse, error)

	// UsersCreate request with any body
	UsersCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersCreateResponse, error)

	UsersCreateWithResponse(ctx context.Context, body UsersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersCreateResponse, error)

	UsersCreateWithFormdataBodyWithResponse(ctx context.Context, body UsersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UsersCreateResponse, error)

	// UsersDestroy request
	UsersDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*UsersDestroyResponse, error)

	// UsersRetrieve request
	UsersRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*UsersRetrieveResponse, error)

	// UsersPartialUpdate request with any body
	UsersPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersPartialUpdateResponse, error)

	UsersPartialUpdateWithResponse(ctx context.Context, id int, body UsersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersPartialUpdateResponse, error)

	UsersPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body UsersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UsersPartialUpdateResponse, error)

	// UsersUpdate request with any body
	UsersUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUpdateResponse, error)

	UsersUpdateWithResponse(ctx context.Context, id int, body UsersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUpdateResponse, error)

	UsersUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body UsersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UsersUpdateResponse, error)

	// UsersDeletePreviewList request
	UsersDeletePreviewListWithResponse(ctx context.Context, id int, params *UsersDeletePreviewListParams, reqEditors ...RequestEditorFn) (*UsersDeletePreviewListResponse, error)
}

type ApiTokenAuthCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthToken
}

// Status returns HTTPResponse.Status
func (r ApiTokenAuthCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiTokenAuthCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConfigurationPermissionsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedConfigurationPermissionList
}

// Status returns HTTPResponse.Status
func (r ConfigurationPermissionsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConfigurationPermissionsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConfigurationPermissionsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConfigurationPermission
}

// Status returns HTTPResponse.Status
func (r ConfigurationPermissionsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConfigurationPermissionsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CredentialMappingsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedCredentialMappingList
}

// Status returns HTTPResponse.Status
func (r CredentialMappingsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CredentialMappingsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CredentialMappingsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CredentialMapping
}

// Status returns HTTPResponse.Status
func (r CredentialMappingsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CredentialMappingsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CredentialMappingsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CredentialMappingsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CredentialMappingsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CredentialMappingsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CredentialMapping
}

// Status returns HTTPResponse.Status
func (r CredentialMappingsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CredentialMappingsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CredentialMappingsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CredentialMapping
}

// Status returns HTTPResponse.Status
func (r CredentialMappingsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CredentialMappingsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CredentialMappingsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CredentialMapping
}

// Status returns HTTPResponse.Status
func (r CredentialMappingsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CredentialMappingsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CredentialMappingsDeletePreviewListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDeletePreviewList
}

// Status returns HTTPResponse.Status
func (r CredentialMappingsDeletePreviewListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CredentialMappingsDeletePreviewListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CredentialsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedCredentialList
}

// Status returns HTTPResponse.Status
func (r CredentialsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CredentialsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CredentialsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Credential
}

// Status returns HTTPResponse.Status
func (r CredentialsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CredentialsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CredentialsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CredentialsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CredentialsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CredentialsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Credential
}

// Status returns HTTPResponse.Status
func (r CredentialsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CredentialsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CredentialsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Credential
}

// Status returns HTTPResponse.Status
func (r CredentialsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CredentialsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CredentialsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Credential
}

// Status returns HTTPResponse.Status
func (r CredentialsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CredentialsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CredentialsDeletePreviewListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDeletePreviewList
}

// Status returns HTTPResponse.Status
func (r CredentialsDeletePreviewListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CredentialsDeletePreviewListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevelopmentEnvironmentsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDevelopmentEnvironmentList
}

// Status returns HTTPResponse.Status
func (r DevelopmentEnvironmentsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevelopmentEnvironmentsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevelopmentEnvironmentsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *DevelopmentEnvironment
}

// Status returns HTTPResponse.Status
func (r DevelopmentEnvironmentsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevelopmentEnvironmentsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevelopmentEnvironmentsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DevelopmentEnvironmentsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevelopmentEnvironmentsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevelopmentEnvironmentsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DevelopmentEnvironment
}

// Status returns HTTPResponse.Status
func (r DevelopmentEnvironmentsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevelopmentEnvironmentsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevelopmentEnvironmentsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DevelopmentEnvironment
}

// Status returns HTTPResponse.Status
func (r DevelopmentEnvironmentsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevelopmentEnvironmentsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevelopmentEnvironmentsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DevelopmentEnvironment
}

// Status returns HTTPResponse.Status
func (r DevelopmentEnvironmentsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevelopmentEnvironmentsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevelopmentEnvironmentsDeletePreviewListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDeletePreviewList
}

// Status returns HTTPResponse.Status
func (r DevelopmentEnvironmentsDeletePreviewListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevelopmentEnvironmentsDeletePreviewListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DojoGroupMembersListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDojoGroupMemberList
}

// Status returns HTTPResponse.Status
func (r DojoGroupMembersListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DojoGroupMembersListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DojoGroupMembersCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *DojoGroupMember
}

// Status returns HTTPResponse.Status
func (r DojoGroupMembersCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DojoGroupMembersCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DojoGroupMembersDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DojoGroupMembersDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DojoGroupMembersDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DojoGroupMembersRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DojoGroupMember
}

// Status returns HTTPResponse.Status
func (r DojoGroupMembersRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DojoGroupMembersRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DojoGroupMembersPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DojoGroupMember
}

// Status returns HTTPResponse.Status
func (r DojoGroupMembersPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DojoGroupMembersPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DojoGroupMembersUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DojoGroupMember
}

// Status returns HTTPResponse.Status
func (r DojoGroupMembersUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DojoGroupMembersUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DojoGroupMembersDeletePreviewListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDeletePreviewList
}

// Status returns HTTPResponse.Status
func (r DojoGroupMembersDeletePreviewListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DojoGroupMembersDeletePreviewListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DojoGroupsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDojoGroupList
}

// Status returns HTTPResponse.Status
func (r DojoGroupsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DojoGroupsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DojoGroupsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *DojoGroup
}

// Status returns HTTPResponse.Status
func (r DojoGroupsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DojoGroupsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DojoGroupsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DojoGroupsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DojoGroupsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DojoGroupsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DojoGroup
}

// Status returns HTTPResponse.Status
func (r DojoGroupsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DojoGroupsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DojoGroupsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DojoGroup
}

// Status returns HTTPResponse.Status
func (r DojoGroupsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DojoGroupsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DojoGroupsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DojoGroup
}

// Status returns HTTPResponse.Status
func (r DojoGroupsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DojoGroupsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DojoGroupsDeletePreviewListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDeletePreviewList
}

// Status returns HTTPResponse.Status
func (r DojoGroupsDeletePreviewListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DojoGroupsDeletePreviewListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EndpointMetaImportCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *EndpointMetaImporter
}

// Status returns HTTPResponse.Status
func (r EndpointMetaImportCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EndpointMetaImportCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EndpointStatusListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedEndpointStatusList
}

// Status returns HTTPResponse.Status
func (r EndpointStatusListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EndpointStatusListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EndpointStatusCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *EndpointStatus
}

// Status returns HTTPResponse.Status
func (r EndpointStatusCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EndpointStatusCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EndpointStatusDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EndpointStatusDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EndpointStatusDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EndpointStatusRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EndpointStatus
}

// Status returns HTTPResponse.Status
func (r EndpointStatusRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EndpointStatusRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EndpointStatusPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EndpointStatus
}

// Status returns HTTPResponse.Status
func (r EndpointStatusPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EndpointStatusPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EndpointStatusUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EndpointStatus
}

// Status returns HTTPResponse.Status
func (r EndpointStatusUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EndpointStatusUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EndpointStatusDeletePreviewListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDeletePreviewList
}

// Status returns HTTPResponse.Status
func (r EndpointStatusDeletePreviewListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EndpointStatusDeletePreviewListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EndpointsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedEndpointList
}

// Status returns HTTPResponse.Status
func (r EndpointsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EndpointsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EndpointsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Endpoint
}

// Status returns HTTPResponse.Status
func (r EndpointsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EndpointsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EndpointsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EndpointsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EndpointsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EndpointsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Endpoint
}

// Status returns HTTPResponse.Status
func (r EndpointsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EndpointsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EndpointsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Endpoint
}

// Status returns HTTPResponse.Status
func (r EndpointsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EndpointsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EndpointsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Endpoint
}

// Status returns HTTPResponse.Status
func (r EndpointsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EndpointsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EndpointsDeletePreviewListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDeletePreviewList
}

// Status returns HTTPResponse.Status
func (r EndpointsDeletePreviewListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EndpointsDeletePreviewListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EndpointsGenerateReportCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReportGenerate
}

// Status returns HTTPResponse.Status
func (r EndpointsGenerateReportCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EndpointsGenerateReportCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EngagementPresetsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedEngagementPresetsList
}

// Status returns HTTPResponse.Status
func (r EngagementPresetsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EngagementPresetsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EngagementPresetsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *EngagementPresets
}

// Status returns HTTPResponse.Status
func (r EngagementPresetsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EngagementPresetsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EngagementPresetsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EngagementPresetsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EngagementPresetsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EngagementPresetsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EngagementPresets
}

// Status returns HTTPResponse.Status
func (r EngagementPresetsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EngagementPresetsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EngagementPresetsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EngagementPresets
}

// Status returns HTTPResponse.Status
func (r EngagementPresetsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EngagementPresetsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EngagementPresetsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EngagementPresets
}

// Status returns HTTPResponse.Status
func (r EngagementPresetsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EngagementPresetsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EngagementPresetsDeletePreviewListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDeletePreviewList
}

// Status returns HTTPResponse.Status
func (r EngagementPresetsDeletePreviewListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EngagementPresetsDeletePreviewListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EngagementsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedEngagementList
}

// Status returns HTTPResponse.Status
func (r EngagementsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EngagementsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EngagementsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Engagement
}

// Status returns HTTPResponse.Status
func (r EngagementsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EngagementsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EngagementsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EngagementsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EngagementsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EngagementsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Engagement
}

// Status returns HTTPResponse.Status
func (r EngagementsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EngagementsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EngagementsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Engagement
}

// Status returns HTTPResponse.Status
func (r EngagementsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EngagementsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EngagementsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Engagement
}

// Status returns HTTPResponse.Status
func (r EngagementsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EngagementsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EngagementsAcceptRisksCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]RiskAcceptance
}

// Status returns HTTPResponse.Status
func (r EngagementsAcceptRisksCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EngagementsAcceptRisksCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EngagementsCloseCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EngagementsCloseCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EngagementsCloseCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EngagementsCompleteChecklistRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Engagement
}

// Status returns HTTPResponse.Status
func (r EngagementsCompleteChecklistRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EngagementsCompleteChecklistRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EngagementsCompleteChecklistCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *EngagementCheckList
}

// Status returns HTTPResponse.Status
func (r EngagementsCompleteChecklistCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EngagementsCompleteChecklistCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EngagementsDeletePreviewListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDeletePreviewList
}

// Status returns HTTPResponse.Status
func (r EngagementsDeletePreviewListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EngagementsDeletePreviewListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EngagementsFilesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EngagementToFiles
}

// Status returns HTTPResponse.Status
func (r EngagementsFilesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EngagementsFilesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EngagementsFilesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *File
}

// Status returns HTTPResponse.Status
func (r EngagementsFilesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EngagementsFilesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EngagementsFilesDownloadRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RawFile
}

// Status returns HTTPResponse.Status
func (r EngagementsFilesDownloadRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EngagementsFilesDownloadRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EngagementsGenerateReportCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReportGenerate
}

// Status returns HTTPResponse.Status
func (r EngagementsGenerateReportCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EngagementsGenerateReportCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EngagementsNotesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EngagementToNotes
}

// Status returns HTTPResponse.Status
func (r EngagementsNotesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EngagementsNotesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EngagementsNotesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Note
}

// Status returns HTTPResponse.Status
func (r EngagementsNotesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EngagementsNotesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EngagementsReopenCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EngagementsReopenCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EngagementsReopenCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingTemplatesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedFindingTemplateList
}

// Status returns HTTPResponse.Status
func (r FindingTemplatesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingTemplatesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingTemplatesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *FindingTemplate
}

// Status returns HTTPResponse.Status
func (r FindingTemplatesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingTemplatesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingTemplatesDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r FindingTemplatesDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingTemplatesDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingTemplatesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FindingTemplate
}

// Status returns HTTPResponse.Status
func (r FindingTemplatesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingTemplatesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingTemplatesPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FindingTemplate
}

// Status returns HTTPResponse.Status
func (r FindingTemplatesPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingTemplatesPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingTemplatesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FindingTemplate
}

// Status returns HTTPResponse.Status
func (r FindingTemplatesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingTemplatesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingTemplatesDeletePreviewListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDeletePreviewList
}

// Status returns HTTPResponse.Status
func (r FindingTemplatesDeletePreviewListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingTemplatesDeletePreviewListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedFindingList
}

// Status returns HTTPResponse.Status
func (r FindingsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *FindingCreate
}

// Status returns HTTPResponse.Status
func (r FindingsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsAcceptRisksCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PaginatedRiskAcceptanceList
}

// Status returns HTTPResponse.Status
func (r FindingsAcceptRisksCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsAcceptRisksCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsGenerateReportCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReportGenerate
}

// Status returns HTTPResponse.Status
func (r FindingsGenerateReportCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsGenerateReportCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r FindingsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Finding
}

// Status returns HTTPResponse.Status
func (r FindingsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Finding
}

// Status returns HTTPResponse.Status
func (r FindingsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Finding
}

// Status returns HTTPResponse.Status
func (r FindingsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsCloseCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FindingClose
}

// Status returns HTTPResponse.Status
func (r FindingsCloseCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsCloseCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsDeletePreviewListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDeletePreviewList
}

// Status returns HTTPResponse.Status
func (r FindingsDeletePreviewListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsDeletePreviewListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsDuplicateListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Finding
}

// Status returns HTTPResponse.Status
func (r FindingsDuplicateListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsDuplicateListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsDuplicateResetCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r FindingsDuplicateResetCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsDuplicateResetCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsFilesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FindingToFiles
}

// Status returns HTTPResponse.Status
func (r FindingsFilesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsFilesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsFilesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *File
}

// Status returns HTTPResponse.Status
func (r FindingsFilesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsFilesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsFilesDownloadRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RawFile
}

// Status returns HTTPResponse.Status
func (r FindingsFilesDownloadRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsFilesDownloadRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsMetadataDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r FindingsMetadataDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsMetadataDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsMetadataListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FindingMeta
}

// Status returns HTTPResponse.Status
func (r FindingsMetadataListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsMetadataListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsMetadataCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FindingMeta
}

// Status returns HTTPResponse.Status
func (r FindingsMetadataCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsMetadataCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsMetadataUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FindingMeta
}

// Status returns HTTPResponse.Status
func (r FindingsMetadataUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsMetadataUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsNotesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FindingToNotes
}

// Status returns HTTPResponse.Status
func (r FindingsNotesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsNotesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsNotesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Note
}

// Status returns HTTPResponse.Status
func (r FindingsNotesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsNotesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsOriginalCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r FindingsOriginalCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsOriginalCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsRemoveNotePartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r FindingsRemoveNotePartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsRemoveNotePartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsRemoveTagsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r FindingsRemoveTagsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsRemoveTagsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsRemoveTagsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r FindingsRemoveTagsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsRemoveTagsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsRequestResponseRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BurpRawRequestResponse
}

// Status returns HTTPResponse.Status
func (r FindingsRequestResponseRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsRequestResponseRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsRequestResponseCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BurpRawRequestResponse
}

// Status returns HTTPResponse.Status
func (r FindingsRequestResponseCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsRequestResponseCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsTagsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Tag
}

// Status returns HTTPResponse.Status
func (r FindingsTagsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsTagsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindingsTagsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Tag
}

// Status returns HTTPResponse.Status
func (r FindingsTagsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindingsTagsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GlobalRolesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedGlobalRoleList
}

// Status returns HTTPResponse.Status
func (r GlobalRolesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GlobalRolesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GlobalRolesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *GlobalRole
}

// Status returns HTTPResponse.Status
func (r GlobalRolesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GlobalRolesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GlobalRolesDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GlobalRolesDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GlobalRolesDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GlobalRolesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GlobalRole
}

// Status returns HTTPResponse.Status
func (r GlobalRolesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GlobalRolesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GlobalRolesPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GlobalRole
}

// Status returns HTTPResponse.Status
func (r GlobalRolesPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GlobalRolesPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GlobalRolesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GlobalRole
}

// Status returns HTTPResponse.Status
func (r GlobalRolesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GlobalRolesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GlobalRolesDeletePreviewListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDeletePreviewList
}

// Status returns HTTPResponse.Status
func (r GlobalRolesDeletePreviewListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GlobalRolesDeletePreviewListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ImportLanguagesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ImportLanguages
}

// Status returns HTTPResponse.Status
func (r ImportLanguagesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ImportLanguagesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ImportScanCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ImportScan
}

// Status returns HTTPResponse.Status
func (r ImportScanCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ImportScanCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraConfigurationsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedJIRAInstanceList
}

// Status returns HTTPResponse.Status
func (r JiraConfigurationsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraConfigurationsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraConfigurationsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *JIRAInstance
}

// Status returns HTTPResponse.Status
func (r JiraConfigurationsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraConfigurationsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraConfigurationsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r JiraConfigurationsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraConfigurationsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraConfigurationsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JIRAInstance
}

// Status returns HTTPResponse.Status
func (r JiraConfigurationsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraConfigurationsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraConfigurationsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JIRAInstance
}

// Status returns HTTPResponse.Status
func (r JiraConfigurationsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraConfigurationsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraConfigurationsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JIRAInstance
}

// Status returns HTTPResponse.Status
func (r JiraConfigurationsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraConfigurationsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraConfigurationsDeletePreviewListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDeletePreviewList
}

// Status returns HTTPResponse.Status
func (r JiraConfigurationsDeletePreviewListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraConfigurationsDeletePreviewListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraFindingMappingsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedJIRAIssueList
}

// Status returns HTTPResponse.Status
func (r JiraFindingMappingsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraFindingMappingsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraFindingMappingsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *JIRAIssue
}

// Status returns HTTPResponse.Status
func (r JiraFindingMappingsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraFindingMappingsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraFindingMappingsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r JiraFindingMappingsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraFindingMappingsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraFindingMappingsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JIRAIssue
}

// Status returns HTTPResponse.Status
func (r JiraFindingMappingsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraFindingMappingsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraFindingMappingsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JIRAIssue
}

// Status returns HTTPResponse.Status
func (r JiraFindingMappingsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraFindingMappingsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraFindingMappingsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JIRAIssue
}

// Status returns HTTPResponse.Status
func (r JiraFindingMappingsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraFindingMappingsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraFindingMappingsDeletePreviewListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDeletePreviewList
}

// Status returns HTTPResponse.Status
func (r JiraFindingMappingsDeletePreviewListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraFindingMappingsDeletePreviewListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraInstancesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedJIRAInstanceList
}

// Status returns HTTPResponse.Status
func (r JiraInstancesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraInstancesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraInstancesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *JIRAInstance
}

// Status returns HTTPResponse.Status
func (r JiraInstancesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraInstancesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraInstancesDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r JiraInstancesDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraInstancesDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraInstancesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JIRAInstance
}

// Status returns HTTPResponse.Status
func (r JiraInstancesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraInstancesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraInstancesPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JIRAInstance
}

// Status returns HTTPResponse.Status
func (r JiraInstancesPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraInstancesPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraInstancesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JIRAInstance
}

// Status returns HTTPResponse.Status
func (r JiraInstancesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraInstancesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraInstancesDeletePreviewListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDeletePreviewList
}

// Status returns HTTPResponse.Status
func (r JiraInstancesDeletePreviewListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraInstancesDeletePreviewListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraProductConfigurationsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedJIRAProjectList
}

// Status returns HTTPResponse.Status
func (r JiraProductConfigurationsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraProductConfigurationsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraProductConfigurationsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *JIRAProject
}

// Status returns HTTPResponse.Status
func (r JiraProductConfigurationsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraProductConfigurationsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraProductConfigurationsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r JiraProductConfigurationsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraProductConfigurationsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraProductConfigurationsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JIRAProject
}

// Status returns HTTPResponse.Status
func (r JiraProductConfigurationsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraProductConfigurationsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraProductConfigurationsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JIRAProject
}

// Status returns HTTPResponse.Status
func (r JiraProductConfigurationsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraProductConfigurationsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraProductConfigurationsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JIRAProject
}

// Status returns HTTPResponse.Status
func (r JiraProductConfigurationsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraProductConfigurationsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraProductConfigurationsDeletePreviewListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDeletePreviewList
}

// Status returns HTTPResponse.Status
func (r JiraProductConfigurationsDeletePreviewListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraProductConfigurationsDeletePreviewListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraProjectsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedJIRAProjectList
}

// Status returns HTTPResponse.Status
func (r JiraProjectsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraProjectsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraProjectsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *JIRAProject
}

// Status returns HTTPResponse.Status
func (r JiraProjectsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraProjectsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraProjectsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r JiraProjectsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraProjectsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraProjectsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JIRAProject
}

// Status returns HTTPResponse.Status
func (r JiraProjectsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraProjectsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraProjectsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JIRAProject
}

// Status returns HTTPResponse.Status
func (r JiraProjectsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraProjectsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraProjectsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JIRAProject
}

// Status returns HTTPResponse.Status
func (r JiraProjectsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraProjectsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JiraProjectsDeletePreviewListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDeletePreviewList
}

// Status returns HTTPResponse.Status
func (r JiraProjectsDeletePreviewListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JiraProjectsDeletePreviewListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LanguageTypesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedLanguageTypeList
}

// Status returns HTTPResponse.Status
func (r LanguageTypesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LanguageTypesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LanguageTypesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *LanguageType
}

// Status returns HTTPResponse.Status
func (r LanguageTypesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LanguageTypesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LanguageTypesDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LanguageTypesDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LanguageTypesDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LanguageTypesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LanguageType
}

// Status returns HTTPResponse.Status
func (r LanguageTypesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LanguageTypesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LanguageTypesPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LanguageType
}

// Status returns HTTPResponse.Status
func (r LanguageTypesPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LanguageTypesPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LanguageTypesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LanguageType
}

// Status returns HTTPResponse.Status
func (r LanguageTypesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LanguageTypesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LanguageTypesDeletePreviewListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDeletePreviewList
}

// Status returns HTTPResponse.Status
func (r LanguageTypesDeletePreviewListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LanguageTypesDeletePreviewListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LanguagesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedLanguageList
}

// Status returns HTTPResponse.Status
func (r LanguagesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LanguagesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LanguagesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Language
}

// Status returns HTTPResponse.Status
func (r LanguagesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LanguagesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LanguagesDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LanguagesDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LanguagesDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LanguagesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Language
}

// Status returns HTTPResponse.Status
func (r LanguagesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LanguagesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LanguagesPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Language
}

// Status returns HTTPResponse.Status
func (r LanguagesPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LanguagesPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LanguagesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Language
}

// Status returns HTTPResponse.Status
func (r LanguagesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LanguagesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LanguagesDeletePreviewListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDeletePreviewList
}

// Status returns HTTPResponse.Status
func (r LanguagesDeletePreviewListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LanguagesDeletePreviewListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MetadataListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedMetaList
}

// Status returns HTTPResponse.Status
func (r MetadataListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MetadataListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MetadataCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Meta
}

// Status returns HTTPResponse.Status
func (r MetadataCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MetadataCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MetadataDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r MetadataDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MetadataDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MetadataRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Meta
}

// Status returns HTTPResponse.Status
func (r MetadataRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MetadataRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MetadataPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Meta
}

// Status returns HTTPResponse.Status
func (r MetadataPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MetadataPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MetadataUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Meta
}

// Status returns HTTPResponse.Status
func (r MetadataUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MetadataUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MetadataDeletePreviewListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDeletePreviewList
}

// Status returns HTTPResponse.Status
func (r MetadataDeletePreviewListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MetadataDeletePreviewListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkLocationsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedNetworkLocationsList
}

// Status returns HTTPResponse.Status
func (r NetworkLocationsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkLocationsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkLocationsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *NetworkLocations
}

// Status returns HTTPResponse.Status
func (r NetworkLocationsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkLocationsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkLocationsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r NetworkLocationsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkLocationsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkLocationsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkLocations
}

// Status returns HTTPResponse.Status
func (r NetworkLocationsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkLocationsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkLocationsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkLocations
}

// Status returns HTTPResponse.Status
func (r NetworkLocationsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkLocationsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkLocationsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkLocations
}

// Status returns HTTPResponse.Status
func (r NetworkLocationsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkLocationsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkLocationsDeletePreviewListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDeletePreviewList
}

// Status returns HTTPResponse.Status
func (r NetworkLocationsDeletePreviewListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkLocationsDeletePreviewListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NoteTypeListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedNoteTypeList
}

// Status returns HTTPResponse.Status
func (r NoteTypeListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NoteTypeListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NoteTypeCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *NoteType
}

// Status returns HTTPResponse.Status
func (r NoteTypeCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NoteTypeCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NoteTypeDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r NoteTypeDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NoteTypeDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NoteTypeRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NoteType
}

// Status returns HTTPResponse.Status
func (r NoteTypeRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NoteTypeRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NoteTypePartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NoteType
}

// Status returns HTTPResponse.Status
func (r NoteTypePartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NoteTypePartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NoteTypeUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NoteType
}

// Status returns HTTPResponse.Status
func (r NoteTypeUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NoteTypeUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NoteTypeDeletePreviewListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDeletePreviewList
}

// Status returns HTTPResponse.Status
func (r NoteTypeDeletePreviewListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NoteTypeDeletePreviewListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NotesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedNoteList
}

// Status returns HTTPResponse.Status
func (r NotesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NotesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Note
}

// Status returns HTTPResponse.Status
func (r NotesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NotesPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Note
}

// Status returns HTTPResponse.Status
func (r NotesPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotesPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NotesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Note
}

// Status returns HTTPResponse.Status
func (r NotesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NotificationsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedNotificationsList
}

// Status returns HTTPResponse.Status
func (r NotificationsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotificationsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NotificationsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Notifications
}

// Status returns HTTPResponse.Status
func (r NotificationsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotificationsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NotificationsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r NotificationsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotificationsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NotificationsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Notifications
}

// Status returns HTTPResponse.Status
func (r NotificationsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotificationsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NotificationsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Notifications
}

// Status returns HTTPResponse.Status
func (r NotificationsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotificationsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NotificationsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Notifications
}

// Status returns HTTPResponse.Status
func (r NotificationsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotificationsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NotificationsDeletePreviewListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDeletePreviewList
}

// Status returns HTTPResponse.Status
func (r NotificationsDeletePreviewListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotificationsDeletePreviewListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Oa3SchemaRetrieveResponse struct {
	Body                            []byte
	HTTPResponse                    *http.Response
	JSON200                         *map[string]interface{}
	ApplicationvndOaiOpenapiJSON200 *map[string]interface{}
	YAML200                         *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r Oa3SchemaRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Oa3SchemaRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductApiScanConfigurationsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedProductAPIScanConfigurationList
}

// Status returns HTTPResponse.Status
func (r ProductApiScanConfigurationsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductApiScanConfigurationsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductApiScanConfigurationsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ProductAPIScanConfiguration
}

// Status returns HTTPResponse.Status
func (r ProductApiScanConfigurationsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductApiScanConfigurationsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductApiScanConfigurationsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ProductApiScanConfigurationsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductApiScanConfigurationsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductApiScanConfigurationsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductAPIScanConfiguration
}

// Status returns HTTPResponse.Status
func (r ProductApiScanConfigurationsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductApiScanConfigurationsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductApiScanConfigurationsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductAPIScanConfiguration
}

// Status returns HTTPResponse.Status
func (r ProductApiScanConfigurationsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductApiScanConfigurationsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductApiScanConfigurationsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductAPIScanConfiguration
}

// Status returns HTTPResponse.Status
func (r ProductApiScanConfigurationsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductApiScanConfigurationsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductApiScanConfigurationsDeletePreviewListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDeletePreviewList
}

// Status returns HTTPResponse.Status
func (r ProductApiScanConfigurationsDeletePreviewListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductApiScanConfigurationsDeletePreviewListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductGroupsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedProductGroupList
}

// Status returns HTTPResponse.Status
func (r ProductGroupsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductGroupsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductGroupsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ProductGroup
}

// Status returns HTTPResponse.Status
func (r ProductGroupsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductGroupsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductGroupsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ProductGroupsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductGroupsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductGroupsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductGroup
}

// Status returns HTTPResponse.Status
func (r ProductGroupsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductGroupsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductGroupsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ProductGroupsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductGroupsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductGroupsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductGroup
}

// Status returns HTTPResponse.Status
func (r ProductGroupsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductGroupsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductGroupsDeletePreviewListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDeletePreviewList
}

// Status returns HTTPResponse.Status
func (r ProductGroupsDeletePreviewListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductGroupsDeletePreviewListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductMembersListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedProductMemberList
}

// Status returns HTTPResponse.Status
func (r ProductMembersListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductMembersListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductMembersCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ProductMember
}

// Status returns HTTPResponse.Status
func (r ProductMembersCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductMembersCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductMembersDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ProductMembersDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductMembersDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductMembersRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductMember
}

// Status returns HTTPResponse.Status
func (r ProductMembersRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductMembersRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductMembersPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ProductMembersPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductMembersPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductMembersUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductMember
}

// Status returns HTTPResponse.Status
func (r ProductMembersUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductMembersUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductMembersDeletePreviewListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDeletePreviewList
}

// Status returns HTTPResponse.Status
func (r ProductMembersDeletePreviewListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductMembersDeletePreviewListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductTypeGroupsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedProductTypeGroupList
}

// Status returns HTTPResponse.Status
func (r ProductTypeGroupsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductTypeGroupsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductTypeGroupsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ProductTypeGroup
}

// Status returns HTTPResponse.Status
func (r ProductTypeGroupsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductTypeGroupsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductTypeGroupsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ProductTypeGroupsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductTypeGroupsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductTypeGroupsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductTypeGroup
}

// Status returns HTTPResponse.Status
func (r ProductTypeGroupsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductTypeGroupsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductTypeGroupsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ProductTypeGroupsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductTypeGroupsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductTypeGroupsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductTypeGroup
}

// Status returns HTTPResponse.Status
func (r ProductTypeGroupsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductTypeGroupsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductTypeGroupsDeletePreviewListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDeletePreviewList
}

// Status returns HTTPResponse.Status
func (r ProductTypeGroupsDeletePreviewListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductTypeGroupsDeletePreviewListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductTypeMembersListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedProductTypeMemberList
}

// Status returns HTTPResponse.Status
func (r ProductTypeMembersListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductTypeMembersListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductTypeMembersCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ProductTypeMember
}

// Status returns HTTPResponse.Status
func (r ProductTypeMembersCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductTypeMembersCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductTypeMembersDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ProductTypeMembersDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductTypeMembersDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductTypeMembersRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductTypeMember
}

// Status returns HTTPResponse.Status
func (r ProductTypeMembersRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductTypeMembersRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductTypeMembersPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ProductTypeMembersPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductTypeMembersPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductTypeMembersUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductTypeMember
}

// Status returns HTTPResponse.Status
func (r ProductTypeMembersUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductTypeMembersUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductTypeMembersDeletePreviewListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDeletePreviewList
}

// Status returns HTTPResponse.Status
func (r ProductTypeMembersDeletePreviewListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductTypeMembersDeletePreviewListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductTypesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedProductTypeList
}

// Status returns HTTPResponse.Status
func (r ProductTypesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductTypesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductTypesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ProductType
}

// Status returns HTTPResponse.Status
func (r ProductTypesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductTypesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductTypesDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ProductTypesDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductTypesDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductTypesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductType
}

// Status returns HTTPResponse.Status
func (r ProductTypesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductTypesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductTypesPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductType
}

// Status returns HTTPResponse.Status
func (r ProductTypesPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductTypesPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductTypesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductType
}

// Status returns HTTPResponse.Status
func (r ProductTypesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductTypesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductTypesDeletePreviewListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDeletePreviewList
}

// Status returns HTTPResponse.Status
func (r ProductTypesDeletePreviewListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductTypesDeletePreviewListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductTypesGenerateReportCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReportGenerate
}

// Status returns HTTPResponse.Status
func (r ProductTypesGenerateReportCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductTypesGenerateReportCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedProductList
}

// Status returns HTTPResponse.Status
func (r ProductsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Product
}

// Status returns HTTPResponse.Status
func (r ProductsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ProductsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Product
}

// Status returns HTTPResponse.Status
func (r ProductsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Product
}

// Status returns HTTPResponse.Status
func (r ProductsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Product
}

// Status returns HTTPResponse.Status
func (r ProductsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductsDeletePreviewListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDeletePreviewList
}

// Status returns HTTPResponse.Status
func (r ProductsDeletePreviewListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductsDeletePreviewListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductsGenerateReportCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReportGenerate
}

// Status returns HTTPResponse.Status
func (r ProductsGenerateReportCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductsGenerateReportCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuestionnaireAnsweredQuestionnairesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedQuestionnaireAnsweredSurveyList
}

// Status returns HTTPResponse.Status
func (r QuestionnaireAnsweredQuestionnairesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuestionnaireAnsweredQuestionnairesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuestionnaireAnsweredQuestionnairesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QuestionnaireAnsweredSurvey
}

// Status returns HTTPResponse.Status
func (r QuestionnaireAnsweredQuestionnairesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuestionnaireAnsweredQuestionnairesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuestionnaireAnswersListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedQuestionnaireAnswerList
}

// Status returns HTTPResponse.Status
func (r QuestionnaireAnswersListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuestionnaireAnswersListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuestionnaireAnswersRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QuestionnaireAnswer
}

// Status returns HTTPResponse.Status
func (r QuestionnaireAnswersRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuestionnaireAnswersRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuestionnaireEngagementQuestionnairesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedQuestionnaireEngagementSurveyList
}

// Status returns HTTPResponse.Status
func (r QuestionnaireEngagementQuestionnairesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuestionnaireEngagementQuestionnairesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuestionnaireEngagementQuestionnairesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QuestionnaireEngagementSurvey
}

// Status returns HTTPResponse.Status
func (r QuestionnaireEngagementQuestionnairesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuestionnaireEngagementQuestionnairesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuestionnaireGeneralQuestionnairesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedQuestionnaireGeneralSurveyList
}

// Status returns HTTPResponse.Status
func (r QuestionnaireGeneralQuestionnairesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuestionnaireGeneralQuestionnairesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuestionnaireGeneralQuestionnairesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QuestionnaireGeneralSurvey
}

// Status returns HTTPResponse.Status
func (r QuestionnaireGeneralQuestionnairesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuestionnaireGeneralQuestionnairesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuestionnaireQuestionsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedQuestionnaireQuestionList
}

// Status returns HTTPResponse.Status
func (r QuestionnaireQuestionsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuestionnaireQuestionsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuestionnaireQuestionsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QuestionnaireQuestion
}

// Status returns HTTPResponse.Status
func (r QuestionnaireQuestionsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuestionnaireQuestionsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegulationsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedRegulationList
}

// Status returns HTTPResponse.Status
func (r RegulationsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegulationsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegulationsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Regulation
}

// Status returns HTTPResponse.Status
func (r RegulationsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegulationsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegulationsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RegulationsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegulationsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegulationsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Regulation
}

// Status returns HTTPResponse.Status
func (r RegulationsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegulationsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegulationsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Regulation
}

// Status returns HTTPResponse.Status
func (r RegulationsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegulationsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegulationsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Regulation
}

// Status returns HTTPResponse.Status
func (r RegulationsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegulationsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegulationsDeletePreviewListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDeletePreviewList
}

// Status returns HTTPResponse.Status
func (r RegulationsDeletePreviewListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegulationsDeletePreviewListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReimportScanCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ReImportScan
}

// Status returns HTTPResponse.Status
func (r ReimportScanCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReimportScanCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RiskAcceptanceListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedRiskAcceptanceList
}

// Status returns HTTPResponse.Status
func (r RiskAcceptanceListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RiskAcceptanceListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RiskAcceptanceDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RiskAcceptanceDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RiskAcceptanceDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RiskAcceptanceRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RiskAcceptance
}

// Status returns HTTPResponse.Status
func (r RiskAcceptanceRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RiskAcceptanceRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RiskAcceptanceDeletePreviewListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDeletePreviewList
}

// Status returns HTTPResponse.Status
func (r RiskAcceptanceDeletePreviewListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RiskAcceptanceDeletePreviewListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RiskAcceptanceDownloadProofRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RiskAcceptanceProof
}

// Status returns HTTPResponse.Status
func (r RiskAcceptanceDownloadProofRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RiskAcceptanceDownloadProofRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RolesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedRoleList
}

// Status returns HTTPResponse.Status
func (r RolesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RolesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RolesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Role
}

// Status returns HTTPResponse.Status
func (r RolesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RolesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlaConfigurationsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedSLAConfigurationList
}

// Status returns HTTPResponse.Status
func (r SlaConfigurationsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlaConfigurationsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlaConfigurationsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SLAConfiguration
}

// Status returns HTTPResponse.Status
func (r SlaConfigurationsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlaConfigurationsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlaConfigurationsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SlaConfigurationsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlaConfigurationsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlaConfigurationsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SLAConfiguration
}

// Status returns HTTPResponse.Status
func (r SlaConfigurationsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlaConfigurationsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlaConfigurationsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SLAConfiguration
}

// Status returns HTTPResponse.Status
func (r SlaConfigurationsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlaConfigurationsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SlaConfigurationsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SLAConfiguration
}

// Status returns HTTPResponse.Status
func (r SlaConfigurationsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SlaConfigurationsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SonarqubeIssuesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedSonarqubeIssueList
}

// Status returns HTTPResponse.Status
func (r SonarqubeIssuesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SonarqubeIssuesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SonarqubeIssuesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SonarqubeIssue
}

// Status returns HTTPResponse.Status
func (r SonarqubeIssuesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SonarqubeIssuesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SonarqubeIssuesDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SonarqubeIssuesDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SonarqubeIssuesDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SonarqubeIssuesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SonarqubeIssue
}

// Status returns HTTPResponse.Status
func (r SonarqubeIssuesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SonarqubeIssuesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SonarqubeIssuesPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SonarqubeIssue
}

// Status returns HTTPResponse.Status
func (r SonarqubeIssuesPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SonarqubeIssuesPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SonarqubeIssuesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SonarqubeIssue
}

// Status returns HTTPResponse.Status
func (r SonarqubeIssuesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SonarqubeIssuesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SonarqubeIssuesDeletePreviewListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDeletePreviewList
}

// Status returns HTTPResponse.Status
func (r SonarqubeIssuesDeletePreviewListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SonarqubeIssuesDeletePreviewListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SonarqubeTransitionsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedSonarqubeIssueTransitionList
}

// Status returns HTTPResponse.Status
func (r SonarqubeTransitionsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SonarqubeTransitionsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SonarqubeTransitionsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SonarqubeIssueTransition
}

// Status returns HTTPResponse.Status
func (r SonarqubeTransitionsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SonarqubeTransitionsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SonarqubeTransitionsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SonarqubeTransitionsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SonarqubeTransitionsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SonarqubeTransitionsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SonarqubeIssueTransition
}

// Status returns HTTPResponse.Status
func (r SonarqubeTransitionsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SonarqubeTransitionsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SonarqubeTransitionsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SonarqubeIssueTransition
}

// Status returns HTTPResponse.Status
func (r SonarqubeTransitionsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SonarqubeTransitionsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SonarqubeTransitionsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SonarqubeIssueTransition
}

// Status returns HTTPResponse.Status
func (r SonarqubeTransitionsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SonarqubeTransitionsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SonarqubeTransitionsDeletePreviewListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDeletePreviewList
}

// Status returns HTTPResponse.Status
func (r SonarqubeTransitionsDeletePreviewListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SonarqubeTransitionsDeletePreviewListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StubFindingsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedStubFindingList
}

// Status returns HTTPResponse.Status
func (r StubFindingsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StubFindingsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StubFindingsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *StubFindingCreate
}

// Status returns HTTPResponse.Status
func (r StubFindingsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StubFindingsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StubFindingsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r StubFindingsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StubFindingsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StubFindingsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StubFinding
}

// Status returns HTTPResponse.Status
func (r StubFindingsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StubFindingsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StubFindingsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StubFinding
}

// Status returns HTTPResponse.Status
func (r StubFindingsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StubFindingsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StubFindingsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StubFinding
}

// Status returns HTTPResponse.Status
func (r StubFindingsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StubFindingsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StubFindingsDeletePreviewListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDeletePreviewList
}

// Status returns HTTPResponse.Status
func (r StubFindingsDeletePreviewListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StubFindingsDeletePreviewListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SystemSettingsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedSystemSettingsList
}

// Status returns HTTPResponse.Status
func (r SystemSettingsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SystemSettingsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SystemSettingsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SystemSettings
}

// Status returns HTTPResponse.Status
func (r SystemSettingsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SystemSettingsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SystemSettingsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SystemSettings
}

// Status returns HTTPResponse.Status
func (r SystemSettingsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SystemSettingsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TechnologiesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedAppAnalysisList
}

// Status returns HTTPResponse.Status
func (r TechnologiesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TechnologiesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TechnologiesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AppAnalysis
}

// Status returns HTTPResponse.Status
func (r TechnologiesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TechnologiesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TechnologiesDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TechnologiesDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TechnologiesDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TechnologiesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppAnalysis
}

// Status returns HTTPResponse.Status
func (r TechnologiesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TechnologiesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TechnologiesPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppAnalysis
}

// Status returns HTTPResponse.Status
func (r TechnologiesPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TechnologiesPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TechnologiesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppAnalysis
}

// Status returns HTTPResponse.Status
func (r TechnologiesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TechnologiesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TechnologiesDeletePreviewListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDeletePreviewList
}

// Status returns HTTPResponse.Status
func (r TechnologiesDeletePreviewListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TechnologiesDeletePreviewListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestImportsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedTestImportList
}

// Status returns HTTPResponse.Status
func (r TestImportsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestImportsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestImportsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TestImport
}

// Status returns HTTPResponse.Status
func (r TestImportsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestImportsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestImportsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestImportsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestImportsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestImportsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TestImport
}

// Status returns HTTPResponse.Status
func (r TestImportsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestImportsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestImportsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TestImport
}

// Status returns HTTPResponse.Status
func (r TestImportsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestImportsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestImportsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TestImport
}

// Status returns HTTPResponse.Status
func (r TestImportsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestImportsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestImportsDeletePreviewListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDeletePreviewList
}

// Status returns HTTPResponse.Status
func (r TestImportsDeletePreviewListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestImportsDeletePreviewListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestTypesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedTestTypeList
}

// Status returns HTTPResponse.Status
func (r TestTypesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestTypesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestTypesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TestType
}

// Status returns HTTPResponse.Status
func (r TestTypesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestTypesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestTypesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TestType
}

// Status returns HTTPResponse.Status
func (r TestTypesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestTypesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestTypesPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TestType
}

// Status returns HTTPResponse.Status
func (r TestTypesPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestTypesPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestTypesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TestType
}

// Status returns HTTPResponse.Status
func (r TestTypesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestTypesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedTestList
}

// Status returns HTTPResponse.Status
func (r TestsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TestCreate
}

// Status returns HTTPResponse.Status
func (r TestsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TestsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Test
}

// Status returns HTTPResponse.Status
func (r TestsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Test
}

// Status returns HTTPResponse.Status
func (r TestsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Test
}

// Status returns HTTPResponse.Status
func (r TestsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestsAcceptRisksCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]RiskAcceptance
}

// Status returns HTTPResponse.Status
func (r TestsAcceptRisksCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestsAcceptRisksCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestsDeletePreviewListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDeletePreviewList
}

// Status returns HTTPResponse.Status
func (r TestsDeletePreviewListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestsDeletePreviewListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestsFilesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TestToFiles
}

// Status returns HTTPResponse.Status
func (r TestsFilesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestsFilesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestsFilesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *File
}

// Status returns HTTPResponse.Status
func (r TestsFilesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestsFilesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestsFilesDownloadRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RawFile
}

// Status returns HTTPResponse.Status
func (r TestsFilesDownloadRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestsFilesDownloadRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestsGenerateReportCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReportGenerate
}

// Status returns HTTPResponse.Status
func (r TestsGenerateReportCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestsGenerateReportCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestsNotesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TestToNotes
}

// Status returns HTTPResponse.Status
func (r TestsNotesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestsNotesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestsNotesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Note
}

// Status returns HTTPResponse.Status
func (r TestsNotesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestsNotesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToolConfigurationsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedToolConfigurationList
}

// Status returns HTTPResponse.Status
func (r ToolConfigurationsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToolConfigurationsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToolConfigurationsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ToolConfiguration
}

// Status returns HTTPResponse.Status
func (r ToolConfigurationsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToolConfigurationsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToolConfigurationsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ToolConfigurationsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToolConfigurationsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToolConfigurationsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ToolConfiguration
}

// Status returns HTTPResponse.Status
func (r ToolConfigurationsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToolConfigurationsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToolConfigurationsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ToolConfiguration
}

// Status returns HTTPResponse.Status
func (r ToolConfigurationsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToolConfigurationsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToolConfigurationsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ToolConfiguration
}

// Status returns HTTPResponse.Status
func (r ToolConfigurationsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToolConfigurationsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToolConfigurationsDeletePreviewListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDeletePreviewList
}

// Status returns HTTPResponse.Status
func (r ToolConfigurationsDeletePreviewListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToolConfigurationsDeletePreviewListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToolProductSettingsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedToolProductSettingsList
}

// Status returns HTTPResponse.Status
func (r ToolProductSettingsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToolProductSettingsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToolProductSettingsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ToolProductSettings
}

// Status returns HTTPResponse.Status
func (r ToolProductSettingsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToolProductSettingsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToolProductSettingsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ToolProductSettingsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToolProductSettingsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToolProductSettingsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ToolProductSettings
}

// Status returns HTTPResponse.Status
func (r ToolProductSettingsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToolProductSettingsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToolProductSettingsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ToolProductSettings
}

// Status returns HTTPResponse.Status
func (r ToolProductSettingsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToolProductSettingsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToolProductSettingsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ToolProductSettings
}

// Status returns HTTPResponse.Status
func (r ToolProductSettingsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToolProductSettingsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToolProductSettingsDeletePreviewListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDeletePreviewList
}

// Status returns HTTPResponse.Status
func (r ToolProductSettingsDeletePreviewListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToolProductSettingsDeletePreviewListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToolTypesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedToolTypeList
}

// Status returns HTTPResponse.Status
func (r ToolTypesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToolTypesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToolTypesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ToolType
}

// Status returns HTTPResponse.Status
func (r ToolTypesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToolTypesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToolTypesDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ToolTypesDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToolTypesDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToolTypesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ToolType
}

// Status returns HTTPResponse.Status
func (r ToolTypesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToolTypesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToolTypesPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ToolType
}

// Status returns HTTPResponse.Status
func (r ToolTypesPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToolTypesPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToolTypesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ToolType
}

// Status returns HTTPResponse.Status
func (r ToolTypesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToolTypesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToolTypesDeletePreviewListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDeletePreviewList
}

// Status returns HTTPResponse.Status
func (r ToolTypesDeletePreviewListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToolTypesDeletePreviewListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserContactInfosListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedUserContactInfoList
}

// Status returns HTTPResponse.Status
func (r UserContactInfosListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserContactInfosListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserContactInfosCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *UserContactInfo
}

// Status returns HTTPResponse.Status
func (r UserContactInfosCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserContactInfosCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserContactInfosDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UserContactInfosDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserContactInfosDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserContactInfosRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserContactInfo
}

// Status returns HTTPResponse.Status
func (r UserContactInfosRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserContactInfosRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserContactInfosPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserContactInfo
}

// Status returns HTTPResponse.Status
func (r UserContactInfosPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserContactInfosPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserContactInfosUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserContactInfo
}

// Status returns HTTPResponse.Status
func (r UserContactInfosUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserContactInfosUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserContactInfosDeletePreviewListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDeletePreviewList
}

// Status returns HTTPResponse.Status
func (r UserContactInfosDeletePreviewListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserContactInfosDeletePreviewListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserProfileRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserProfile
}

// Status returns HTTPResponse.Status
func (r UserProfileRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserProfileRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedUserList
}

// Status returns HTTPResponse.Status
func (r UsersListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *User
}

// Status returns HTTPResponse.Status
func (r UsersCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UsersDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r UsersRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r UsersPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r UsersUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersDeletePreviewListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDeletePreviewList
}

// Status returns HTTPResponse.Status
func (r UsersDeletePreviewListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersDeletePreviewListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ApiTokenAuthCreateWithBodyWithResponse request with arbitrary body returning *ApiTokenAuthCreateResponse
func (c *ClientWithResponses) ApiTokenAuthCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiTokenAuthCreateResponse, error) {
	rsp, err := c.ApiTokenAuthCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiTokenAuthCreateResponse(rsp)
}

func (c *ClientWithResponses) ApiTokenAuthCreateWithResponse(ctx context.Context, body ApiTokenAuthCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ApiTokenAuthCreateResponse, error) {
	rsp, err := c.ApiTokenAuthCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiTokenAuthCreateResponse(rsp)
}

func (c *ClientWithResponses) ApiTokenAuthCreateWithFormdataBodyWithResponse(ctx context.Context, body ApiTokenAuthCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ApiTokenAuthCreateResponse, error) {
	rsp, err := c.ApiTokenAuthCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiTokenAuthCreateResponse(rsp)
}

// ConfigurationPermissionsListWithResponse request returning *ConfigurationPermissionsListResponse
func (c *ClientWithResponses) ConfigurationPermissionsListWithResponse(ctx context.Context, params *ConfigurationPermissionsListParams, reqEditors ...RequestEditorFn) (*ConfigurationPermissionsListResponse, error) {
	rsp, err := c.ConfigurationPermissionsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConfigurationPermissionsListResponse(rsp)
}

// ConfigurationPermissionsRetrieveWithResponse request returning *ConfigurationPermissionsRetrieveResponse
func (c *ClientWithResponses) ConfigurationPermissionsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ConfigurationPermissionsRetrieveResponse, error) {
	rsp, err := c.ConfigurationPermissionsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConfigurationPermissionsRetrieveResponse(rsp)
}

// CredentialMappingsListWithResponse request returning *CredentialMappingsListResponse
func (c *ClientWithResponses) CredentialMappingsListWithResponse(ctx context.Context, params *CredentialMappingsListParams, reqEditors ...RequestEditorFn) (*CredentialMappingsListResponse, error) {
	rsp, err := c.CredentialMappingsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCredentialMappingsListResponse(rsp)
}

// CredentialMappingsCreateWithBodyWithResponse request with arbitrary body returning *CredentialMappingsCreateResponse
func (c *ClientWithResponses) CredentialMappingsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CredentialMappingsCreateResponse, error) {
	rsp, err := c.CredentialMappingsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCredentialMappingsCreateResponse(rsp)
}

func (c *ClientWithResponses) CredentialMappingsCreateWithResponse(ctx context.Context, body CredentialMappingsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CredentialMappingsCreateResponse, error) {
	rsp, err := c.CredentialMappingsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCredentialMappingsCreateResponse(rsp)
}

func (c *ClientWithResponses) CredentialMappingsCreateWithFormdataBodyWithResponse(ctx context.Context, body CredentialMappingsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*CredentialMappingsCreateResponse, error) {
	rsp, err := c.CredentialMappingsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCredentialMappingsCreateResponse(rsp)
}

// CredentialMappingsDestroyWithResponse request returning *CredentialMappingsDestroyResponse
func (c *ClientWithResponses) CredentialMappingsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*CredentialMappingsDestroyResponse, error) {
	rsp, err := c.CredentialMappingsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCredentialMappingsDestroyResponse(rsp)
}

// CredentialMappingsRetrieveWithResponse request returning *CredentialMappingsRetrieveResponse
func (c *ClientWithResponses) CredentialMappingsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*CredentialMappingsRetrieveResponse, error) {
	rsp, err := c.CredentialMappingsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCredentialMappingsRetrieveResponse(rsp)
}

// CredentialMappingsPartialUpdateWithBodyWithResponse request with arbitrary body returning *CredentialMappingsPartialUpdateResponse
func (c *ClientWithResponses) CredentialMappingsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CredentialMappingsPartialUpdateResponse, error) {
	rsp, err := c.CredentialMappingsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCredentialMappingsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) CredentialMappingsPartialUpdateWithResponse(ctx context.Context, id int, body CredentialMappingsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CredentialMappingsPartialUpdateResponse, error) {
	rsp, err := c.CredentialMappingsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCredentialMappingsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) CredentialMappingsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body CredentialMappingsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*CredentialMappingsPartialUpdateResponse, error) {
	rsp, err := c.CredentialMappingsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCredentialMappingsPartialUpdateResponse(rsp)
}

// CredentialMappingsUpdateWithBodyWithResponse request with arbitrary body returning *CredentialMappingsUpdateResponse
func (c *ClientWithResponses) CredentialMappingsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CredentialMappingsUpdateResponse, error) {
	rsp, err := c.CredentialMappingsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCredentialMappingsUpdateResponse(rsp)
}

func (c *ClientWithResponses) CredentialMappingsUpdateWithResponse(ctx context.Context, id int, body CredentialMappingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CredentialMappingsUpdateResponse, error) {
	rsp, err := c.CredentialMappingsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCredentialMappingsUpdateResponse(rsp)
}

func (c *ClientWithResponses) CredentialMappingsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body CredentialMappingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*CredentialMappingsUpdateResponse, error) {
	rsp, err := c.CredentialMappingsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCredentialMappingsUpdateResponse(rsp)
}

// CredentialMappingsDeletePreviewListWithResponse request returning *CredentialMappingsDeletePreviewListResponse
func (c *ClientWithResponses) CredentialMappingsDeletePreviewListWithResponse(ctx context.Context, id int, params *CredentialMappingsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*CredentialMappingsDeletePreviewListResponse, error) {
	rsp, err := c.CredentialMappingsDeletePreviewList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCredentialMappingsDeletePreviewListResponse(rsp)
}

// CredentialsListWithResponse request returning *CredentialsListResponse
func (c *ClientWithResponses) CredentialsListWithResponse(ctx context.Context, params *CredentialsListParams, reqEditors ...RequestEditorFn) (*CredentialsListResponse, error) {
	rsp, err := c.CredentialsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCredentialsListResponse(rsp)
}

// CredentialsCreateWithBodyWithResponse request with arbitrary body returning *CredentialsCreateResponse
func (c *ClientWithResponses) CredentialsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CredentialsCreateResponse, error) {
	rsp, err := c.CredentialsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCredentialsCreateResponse(rsp)
}

func (c *ClientWithResponses) CredentialsCreateWithResponse(ctx context.Context, body CredentialsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CredentialsCreateResponse, error) {
	rsp, err := c.CredentialsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCredentialsCreateResponse(rsp)
}

func (c *ClientWithResponses) CredentialsCreateWithFormdataBodyWithResponse(ctx context.Context, body CredentialsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*CredentialsCreateResponse, error) {
	rsp, err := c.CredentialsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCredentialsCreateResponse(rsp)
}

// CredentialsDestroyWithResponse request returning *CredentialsDestroyResponse
func (c *ClientWithResponses) CredentialsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*CredentialsDestroyResponse, error) {
	rsp, err := c.CredentialsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCredentialsDestroyResponse(rsp)
}

// CredentialsRetrieveWithResponse request returning *CredentialsRetrieveResponse
func (c *ClientWithResponses) CredentialsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*CredentialsRetrieveResponse, error) {
	rsp, err := c.CredentialsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCredentialsRetrieveResponse(rsp)
}

// CredentialsPartialUpdateWithBodyWithResponse request with arbitrary body returning *CredentialsPartialUpdateResponse
func (c *ClientWithResponses) CredentialsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CredentialsPartialUpdateResponse, error) {
	rsp, err := c.CredentialsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCredentialsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) CredentialsPartialUpdateWithResponse(ctx context.Context, id int, body CredentialsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CredentialsPartialUpdateResponse, error) {
	rsp, err := c.CredentialsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCredentialsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) CredentialsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body CredentialsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*CredentialsPartialUpdateResponse, error) {
	rsp, err := c.CredentialsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCredentialsPartialUpdateResponse(rsp)
}

// CredentialsUpdateWithBodyWithResponse request with arbitrary body returning *CredentialsUpdateResponse
func (c *ClientWithResponses) CredentialsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CredentialsUpdateResponse, error) {
	rsp, err := c.CredentialsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCredentialsUpdateResponse(rsp)
}

func (c *ClientWithResponses) CredentialsUpdateWithResponse(ctx context.Context, id int, body CredentialsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CredentialsUpdateResponse, error) {
	rsp, err := c.CredentialsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCredentialsUpdateResponse(rsp)
}

func (c *ClientWithResponses) CredentialsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body CredentialsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*CredentialsUpdateResponse, error) {
	rsp, err := c.CredentialsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCredentialsUpdateResponse(rsp)
}

// CredentialsDeletePreviewListWithResponse request returning *CredentialsDeletePreviewListResponse
func (c *ClientWithResponses) CredentialsDeletePreviewListWithResponse(ctx context.Context, id int, params *CredentialsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*CredentialsDeletePreviewListResponse, error) {
	rsp, err := c.CredentialsDeletePreviewList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCredentialsDeletePreviewListResponse(rsp)
}

// DevelopmentEnvironmentsListWithResponse request returning *DevelopmentEnvironmentsListResponse
func (c *ClientWithResponses) DevelopmentEnvironmentsListWithResponse(ctx context.Context, params *DevelopmentEnvironmentsListParams, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsListResponse, error) {
	rsp, err := c.DevelopmentEnvironmentsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevelopmentEnvironmentsListResponse(rsp)
}

// DevelopmentEnvironmentsCreateWithBodyWithResponse request with arbitrary body returning *DevelopmentEnvironmentsCreateResponse
func (c *ClientWithResponses) DevelopmentEnvironmentsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsCreateResponse, error) {
	rsp, err := c.DevelopmentEnvironmentsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevelopmentEnvironmentsCreateResponse(rsp)
}

func (c *ClientWithResponses) DevelopmentEnvironmentsCreateWithResponse(ctx context.Context, body DevelopmentEnvironmentsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsCreateResponse, error) {
	rsp, err := c.DevelopmentEnvironmentsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevelopmentEnvironmentsCreateResponse(rsp)
}

func (c *ClientWithResponses) DevelopmentEnvironmentsCreateWithFormdataBodyWithResponse(ctx context.Context, body DevelopmentEnvironmentsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsCreateResponse, error) {
	rsp, err := c.DevelopmentEnvironmentsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevelopmentEnvironmentsCreateResponse(rsp)
}

// DevelopmentEnvironmentsDestroyWithResponse request returning *DevelopmentEnvironmentsDestroyResponse
func (c *ClientWithResponses) DevelopmentEnvironmentsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsDestroyResponse, error) {
	rsp, err := c.DevelopmentEnvironmentsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevelopmentEnvironmentsDestroyResponse(rsp)
}

// DevelopmentEnvironmentsRetrieveWithResponse request returning *DevelopmentEnvironmentsRetrieveResponse
func (c *ClientWithResponses) DevelopmentEnvironmentsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsRetrieveResponse, error) {
	rsp, err := c.DevelopmentEnvironmentsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevelopmentEnvironmentsRetrieveResponse(rsp)
}

// DevelopmentEnvironmentsPartialUpdateWithBodyWithResponse request with arbitrary body returning *DevelopmentEnvironmentsPartialUpdateResponse
func (c *ClientWithResponses) DevelopmentEnvironmentsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsPartialUpdateResponse, error) {
	rsp, err := c.DevelopmentEnvironmentsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevelopmentEnvironmentsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) DevelopmentEnvironmentsPartialUpdateWithResponse(ctx context.Context, id int, body DevelopmentEnvironmentsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsPartialUpdateResponse, error) {
	rsp, err := c.DevelopmentEnvironmentsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevelopmentEnvironmentsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) DevelopmentEnvironmentsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body DevelopmentEnvironmentsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsPartialUpdateResponse, error) {
	rsp, err := c.DevelopmentEnvironmentsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevelopmentEnvironmentsPartialUpdateResponse(rsp)
}

// DevelopmentEnvironmentsUpdateWithBodyWithResponse request with arbitrary body returning *DevelopmentEnvironmentsUpdateResponse
func (c *ClientWithResponses) DevelopmentEnvironmentsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsUpdateResponse, error) {
	rsp, err := c.DevelopmentEnvironmentsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevelopmentEnvironmentsUpdateResponse(rsp)
}

func (c *ClientWithResponses) DevelopmentEnvironmentsUpdateWithResponse(ctx context.Context, id int, body DevelopmentEnvironmentsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsUpdateResponse, error) {
	rsp, err := c.DevelopmentEnvironmentsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevelopmentEnvironmentsUpdateResponse(rsp)
}

func (c *ClientWithResponses) DevelopmentEnvironmentsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body DevelopmentEnvironmentsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsUpdateResponse, error) {
	rsp, err := c.DevelopmentEnvironmentsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevelopmentEnvironmentsUpdateResponse(rsp)
}

// DevelopmentEnvironmentsDeletePreviewListWithResponse request returning *DevelopmentEnvironmentsDeletePreviewListResponse
func (c *ClientWithResponses) DevelopmentEnvironmentsDeletePreviewListWithResponse(ctx context.Context, id int, params *DevelopmentEnvironmentsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*DevelopmentEnvironmentsDeletePreviewListResponse, error) {
	rsp, err := c.DevelopmentEnvironmentsDeletePreviewList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevelopmentEnvironmentsDeletePreviewListResponse(rsp)
}

// DojoGroupMembersListWithResponse request returning *DojoGroupMembersListResponse
func (c *ClientWithResponses) DojoGroupMembersListWithResponse(ctx context.Context, params *DojoGroupMembersListParams, reqEditors ...RequestEditorFn) (*DojoGroupMembersListResponse, error) {
	rsp, err := c.DojoGroupMembersList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupMembersListResponse(rsp)
}

// DojoGroupMembersCreateWithBodyWithResponse request with arbitrary body returning *DojoGroupMembersCreateResponse
func (c *ClientWithResponses) DojoGroupMembersCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DojoGroupMembersCreateResponse, error) {
	rsp, err := c.DojoGroupMembersCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupMembersCreateResponse(rsp)
}

func (c *ClientWithResponses) DojoGroupMembersCreateWithResponse(ctx context.Context, body DojoGroupMembersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupMembersCreateResponse, error) {
	rsp, err := c.DojoGroupMembersCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupMembersCreateResponse(rsp)
}

func (c *ClientWithResponses) DojoGroupMembersCreateWithFormdataBodyWithResponse(ctx context.Context, body DojoGroupMembersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupMembersCreateResponse, error) {
	rsp, err := c.DojoGroupMembersCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupMembersCreateResponse(rsp)
}

// DojoGroupMembersDestroyWithResponse request returning *DojoGroupMembersDestroyResponse
func (c *ClientWithResponses) DojoGroupMembersDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DojoGroupMembersDestroyResponse, error) {
	rsp, err := c.DojoGroupMembersDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupMembersDestroyResponse(rsp)
}

// DojoGroupMembersRetrieveWithResponse request returning *DojoGroupMembersRetrieveResponse
func (c *ClientWithResponses) DojoGroupMembersRetrieveWithResponse(ctx context.Context, id int, params *DojoGroupMembersRetrieveParams, reqEditors ...RequestEditorFn) (*DojoGroupMembersRetrieveResponse, error) {
	rsp, err := c.DojoGroupMembersRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupMembersRetrieveResponse(rsp)
}

// DojoGroupMembersPartialUpdateWithBodyWithResponse request with arbitrary body returning *DojoGroupMembersPartialUpdateResponse
func (c *ClientWithResponses) DojoGroupMembersPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DojoGroupMembersPartialUpdateResponse, error) {
	rsp, err := c.DojoGroupMembersPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupMembersPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) DojoGroupMembersPartialUpdateWithResponse(ctx context.Context, id int, body DojoGroupMembersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupMembersPartialUpdateResponse, error) {
	rsp, err := c.DojoGroupMembersPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupMembersPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) DojoGroupMembersPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body DojoGroupMembersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupMembersPartialUpdateResponse, error) {
	rsp, err := c.DojoGroupMembersPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupMembersPartialUpdateResponse(rsp)
}

// DojoGroupMembersUpdateWithBodyWithResponse request with arbitrary body returning *DojoGroupMembersUpdateResponse
func (c *ClientWithResponses) DojoGroupMembersUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DojoGroupMembersUpdateResponse, error) {
	rsp, err := c.DojoGroupMembersUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupMembersUpdateResponse(rsp)
}

func (c *ClientWithResponses) DojoGroupMembersUpdateWithResponse(ctx context.Context, id int, body DojoGroupMembersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupMembersUpdateResponse, error) {
	rsp, err := c.DojoGroupMembersUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupMembersUpdateResponse(rsp)
}

func (c *ClientWithResponses) DojoGroupMembersUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body DojoGroupMembersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupMembersUpdateResponse, error) {
	rsp, err := c.DojoGroupMembersUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupMembersUpdateResponse(rsp)
}

// DojoGroupMembersDeletePreviewListWithResponse request returning *DojoGroupMembersDeletePreviewListResponse
func (c *ClientWithResponses) DojoGroupMembersDeletePreviewListWithResponse(ctx context.Context, id int, params *DojoGroupMembersDeletePreviewListParams, reqEditors ...RequestEditorFn) (*DojoGroupMembersDeletePreviewListResponse, error) {
	rsp, err := c.DojoGroupMembersDeletePreviewList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupMembersDeletePreviewListResponse(rsp)
}

// DojoGroupsListWithResponse request returning *DojoGroupsListResponse
func (c *ClientWithResponses) DojoGroupsListWithResponse(ctx context.Context, params *DojoGroupsListParams, reqEditors ...RequestEditorFn) (*DojoGroupsListResponse, error) {
	rsp, err := c.DojoGroupsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupsListResponse(rsp)
}

// DojoGroupsCreateWithBodyWithResponse request with arbitrary body returning *DojoGroupsCreateResponse
func (c *ClientWithResponses) DojoGroupsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DojoGroupsCreateResponse, error) {
	rsp, err := c.DojoGroupsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupsCreateResponse(rsp)
}

func (c *ClientWithResponses) DojoGroupsCreateWithResponse(ctx context.Context, body DojoGroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupsCreateResponse, error) {
	rsp, err := c.DojoGroupsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupsCreateResponse(rsp)
}

func (c *ClientWithResponses) DojoGroupsCreateWithFormdataBodyWithResponse(ctx context.Context, body DojoGroupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupsCreateResponse, error) {
	rsp, err := c.DojoGroupsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupsCreateResponse(rsp)
}

// DojoGroupsDestroyWithResponse request returning *DojoGroupsDestroyResponse
func (c *ClientWithResponses) DojoGroupsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DojoGroupsDestroyResponse, error) {
	rsp, err := c.DojoGroupsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupsDestroyResponse(rsp)
}

// DojoGroupsRetrieveWithResponse request returning *DojoGroupsRetrieveResponse
func (c *ClientWithResponses) DojoGroupsRetrieveWithResponse(ctx context.Context, id int, params *DojoGroupsRetrieveParams, reqEditors ...RequestEditorFn) (*DojoGroupsRetrieveResponse, error) {
	rsp, err := c.DojoGroupsRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupsRetrieveResponse(rsp)
}

// DojoGroupsPartialUpdateWithBodyWithResponse request with arbitrary body returning *DojoGroupsPartialUpdateResponse
func (c *ClientWithResponses) DojoGroupsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DojoGroupsPartialUpdateResponse, error) {
	rsp, err := c.DojoGroupsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) DojoGroupsPartialUpdateWithResponse(ctx context.Context, id int, body DojoGroupsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupsPartialUpdateResponse, error) {
	rsp, err := c.DojoGroupsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) DojoGroupsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body DojoGroupsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupsPartialUpdateResponse, error) {
	rsp, err := c.DojoGroupsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupsPartialUpdateResponse(rsp)
}

// DojoGroupsUpdateWithBodyWithResponse request with arbitrary body returning *DojoGroupsUpdateResponse
func (c *ClientWithResponses) DojoGroupsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DojoGroupsUpdateResponse, error) {
	rsp, err := c.DojoGroupsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupsUpdateResponse(rsp)
}

func (c *ClientWithResponses) DojoGroupsUpdateWithResponse(ctx context.Context, id int, body DojoGroupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupsUpdateResponse, error) {
	rsp, err := c.DojoGroupsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupsUpdateResponse(rsp)
}

func (c *ClientWithResponses) DojoGroupsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body DojoGroupsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*DojoGroupsUpdateResponse, error) {
	rsp, err := c.DojoGroupsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupsUpdateResponse(rsp)
}

// DojoGroupsDeletePreviewListWithResponse request returning *DojoGroupsDeletePreviewListResponse
func (c *ClientWithResponses) DojoGroupsDeletePreviewListWithResponse(ctx context.Context, id int, params *DojoGroupsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*DojoGroupsDeletePreviewListResponse, error) {
	rsp, err := c.DojoGroupsDeletePreviewList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDojoGroupsDeletePreviewListResponse(rsp)
}

// EndpointMetaImportCreateWithBodyWithResponse request with arbitrary body returning *EndpointMetaImportCreateResponse
func (c *ClientWithResponses) EndpointMetaImportCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EndpointMetaImportCreateResponse, error) {
	rsp, err := c.EndpointMetaImportCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointMetaImportCreateResponse(rsp)
}

// EndpointStatusListWithResponse request returning *EndpointStatusListResponse
func (c *ClientWithResponses) EndpointStatusListWithResponse(ctx context.Context, params *EndpointStatusListParams, reqEditors ...RequestEditorFn) (*EndpointStatusListResponse, error) {
	rsp, err := c.EndpointStatusList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointStatusListResponse(rsp)
}

// EndpointStatusCreateWithBodyWithResponse request with arbitrary body returning *EndpointStatusCreateResponse
func (c *ClientWithResponses) EndpointStatusCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EndpointStatusCreateResponse, error) {
	rsp, err := c.EndpointStatusCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointStatusCreateResponse(rsp)
}

func (c *ClientWithResponses) EndpointStatusCreateWithResponse(ctx context.Context, body EndpointStatusCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EndpointStatusCreateResponse, error) {
	rsp, err := c.EndpointStatusCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointStatusCreateResponse(rsp)
}

func (c *ClientWithResponses) EndpointStatusCreateWithFormdataBodyWithResponse(ctx context.Context, body EndpointStatusCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EndpointStatusCreateResponse, error) {
	rsp, err := c.EndpointStatusCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointStatusCreateResponse(rsp)
}

// EndpointStatusDestroyWithResponse request returning *EndpointStatusDestroyResponse
func (c *ClientWithResponses) EndpointStatusDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EndpointStatusDestroyResponse, error) {
	rsp, err := c.EndpointStatusDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointStatusDestroyResponse(rsp)
}

// EndpointStatusRetrieveWithResponse request returning *EndpointStatusRetrieveResponse
func (c *ClientWithResponses) EndpointStatusRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EndpointStatusRetrieveResponse, error) {
	rsp, err := c.EndpointStatusRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointStatusRetrieveResponse(rsp)
}

// EndpointStatusPartialUpdateWithBodyWithResponse request with arbitrary body returning *EndpointStatusPartialUpdateResponse
func (c *ClientWithResponses) EndpointStatusPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EndpointStatusPartialUpdateResponse, error) {
	rsp, err := c.EndpointStatusPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointStatusPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) EndpointStatusPartialUpdateWithResponse(ctx context.Context, id int, body EndpointStatusPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EndpointStatusPartialUpdateResponse, error) {
	rsp, err := c.EndpointStatusPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointStatusPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) EndpointStatusPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body EndpointStatusPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EndpointStatusPartialUpdateResponse, error) {
	rsp, err := c.EndpointStatusPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointStatusPartialUpdateResponse(rsp)
}

// EndpointStatusUpdateWithBodyWithResponse request with arbitrary body returning *EndpointStatusUpdateResponse
func (c *ClientWithResponses) EndpointStatusUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EndpointStatusUpdateResponse, error) {
	rsp, err := c.EndpointStatusUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointStatusUpdateResponse(rsp)
}

func (c *ClientWithResponses) EndpointStatusUpdateWithResponse(ctx context.Context, id int, body EndpointStatusUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EndpointStatusUpdateResponse, error) {
	rsp, err := c.EndpointStatusUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointStatusUpdateResponse(rsp)
}

func (c *ClientWithResponses) EndpointStatusUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body EndpointStatusUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EndpointStatusUpdateResponse, error) {
	rsp, err := c.EndpointStatusUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointStatusUpdateResponse(rsp)
}

// EndpointStatusDeletePreviewListWithResponse request returning *EndpointStatusDeletePreviewListResponse
func (c *ClientWithResponses) EndpointStatusDeletePreviewListWithResponse(ctx context.Context, id int, params *EndpointStatusDeletePreviewListParams, reqEditors ...RequestEditorFn) (*EndpointStatusDeletePreviewListResponse, error) {
	rsp, err := c.EndpointStatusDeletePreviewList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointStatusDeletePreviewListResponse(rsp)
}

// EndpointsListWithResponse request returning *EndpointsListResponse
func (c *ClientWithResponses) EndpointsListWithResponse(ctx context.Context, params *EndpointsListParams, reqEditors ...RequestEditorFn) (*EndpointsListResponse, error) {
	rsp, err := c.EndpointsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointsListResponse(rsp)
}

// EndpointsCreateWithBodyWithResponse request with arbitrary body returning *EndpointsCreateResponse
func (c *ClientWithResponses) EndpointsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EndpointsCreateResponse, error) {
	rsp, err := c.EndpointsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointsCreateResponse(rsp)
}

func (c *ClientWithResponses) EndpointsCreateWithResponse(ctx context.Context, body EndpointsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EndpointsCreateResponse, error) {
	rsp, err := c.EndpointsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointsCreateResponse(rsp)
}

func (c *ClientWithResponses) EndpointsCreateWithFormdataBodyWithResponse(ctx context.Context, body EndpointsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EndpointsCreateResponse, error) {
	rsp, err := c.EndpointsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointsCreateResponse(rsp)
}

// EndpointsDestroyWithResponse request returning *EndpointsDestroyResponse
func (c *ClientWithResponses) EndpointsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EndpointsDestroyResponse, error) {
	rsp, err := c.EndpointsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointsDestroyResponse(rsp)
}

// EndpointsRetrieveWithResponse request returning *EndpointsRetrieveResponse
func (c *ClientWithResponses) EndpointsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EndpointsRetrieveResponse, error) {
	rsp, err := c.EndpointsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointsRetrieveResponse(rsp)
}

// EndpointsPartialUpdateWithBodyWithResponse request with arbitrary body returning *EndpointsPartialUpdateResponse
func (c *ClientWithResponses) EndpointsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EndpointsPartialUpdateResponse, error) {
	rsp, err := c.EndpointsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) EndpointsPartialUpdateWithResponse(ctx context.Context, id int, body EndpointsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EndpointsPartialUpdateResponse, error) {
	rsp, err := c.EndpointsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) EndpointsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body EndpointsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EndpointsPartialUpdateResponse, error) {
	rsp, err := c.EndpointsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointsPartialUpdateResponse(rsp)
}

// EndpointsUpdateWithBodyWithResponse request with arbitrary body returning *EndpointsUpdateResponse
func (c *ClientWithResponses) EndpointsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EndpointsUpdateResponse, error) {
	rsp, err := c.EndpointsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointsUpdateResponse(rsp)
}

func (c *ClientWithResponses) EndpointsUpdateWithResponse(ctx context.Context, id int, body EndpointsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EndpointsUpdateResponse, error) {
	rsp, err := c.EndpointsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointsUpdateResponse(rsp)
}

func (c *ClientWithResponses) EndpointsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body EndpointsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EndpointsUpdateResponse, error) {
	rsp, err := c.EndpointsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointsUpdateResponse(rsp)
}

// EndpointsDeletePreviewListWithResponse request returning *EndpointsDeletePreviewListResponse
func (c *ClientWithResponses) EndpointsDeletePreviewListWithResponse(ctx context.Context, id int, params *EndpointsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*EndpointsDeletePreviewListResponse, error) {
	rsp, err := c.EndpointsDeletePreviewList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointsDeletePreviewListResponse(rsp)
}

// EndpointsGenerateReportCreateWithBodyWithResponse request with arbitrary body returning *EndpointsGenerateReportCreateResponse
func (c *ClientWithResponses) EndpointsGenerateReportCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EndpointsGenerateReportCreateResponse, error) {
	rsp, err := c.EndpointsGenerateReportCreateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointsGenerateReportCreateResponse(rsp)
}

func (c *ClientWithResponses) EndpointsGenerateReportCreateWithResponse(ctx context.Context, id int, body EndpointsGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EndpointsGenerateReportCreateResponse, error) {
	rsp, err := c.EndpointsGenerateReportCreate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointsGenerateReportCreateResponse(rsp)
}

func (c *ClientWithResponses) EndpointsGenerateReportCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body EndpointsGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EndpointsGenerateReportCreateResponse, error) {
	rsp, err := c.EndpointsGenerateReportCreateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndpointsGenerateReportCreateResponse(rsp)
}

// EngagementPresetsListWithResponse request returning *EngagementPresetsListResponse
func (c *ClientWithResponses) EngagementPresetsListWithResponse(ctx context.Context, params *EngagementPresetsListParams, reqEditors ...RequestEditorFn) (*EngagementPresetsListResponse, error) {
	rsp, err := c.EngagementPresetsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementPresetsListResponse(rsp)
}

// EngagementPresetsCreateWithBodyWithResponse request with arbitrary body returning *EngagementPresetsCreateResponse
func (c *ClientWithResponses) EngagementPresetsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EngagementPresetsCreateResponse, error) {
	rsp, err := c.EngagementPresetsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementPresetsCreateResponse(rsp)
}

func (c *ClientWithResponses) EngagementPresetsCreateWithResponse(ctx context.Context, body EngagementPresetsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EngagementPresetsCreateResponse, error) {
	rsp, err := c.EngagementPresetsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementPresetsCreateResponse(rsp)
}

func (c *ClientWithResponses) EngagementPresetsCreateWithFormdataBodyWithResponse(ctx context.Context, body EngagementPresetsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EngagementPresetsCreateResponse, error) {
	rsp, err := c.EngagementPresetsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementPresetsCreateResponse(rsp)
}

// EngagementPresetsDestroyWithResponse request returning *EngagementPresetsDestroyResponse
func (c *ClientWithResponses) EngagementPresetsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EngagementPresetsDestroyResponse, error) {
	rsp, err := c.EngagementPresetsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementPresetsDestroyResponse(rsp)
}

// EngagementPresetsRetrieveWithResponse request returning *EngagementPresetsRetrieveResponse
func (c *ClientWithResponses) EngagementPresetsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EngagementPresetsRetrieveResponse, error) {
	rsp, err := c.EngagementPresetsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementPresetsRetrieveResponse(rsp)
}

// EngagementPresetsPartialUpdateWithBodyWithResponse request with arbitrary body returning *EngagementPresetsPartialUpdateResponse
func (c *ClientWithResponses) EngagementPresetsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EngagementPresetsPartialUpdateResponse, error) {
	rsp, err := c.EngagementPresetsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementPresetsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) EngagementPresetsPartialUpdateWithResponse(ctx context.Context, id int, body EngagementPresetsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EngagementPresetsPartialUpdateResponse, error) {
	rsp, err := c.EngagementPresetsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementPresetsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) EngagementPresetsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body EngagementPresetsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EngagementPresetsPartialUpdateResponse, error) {
	rsp, err := c.EngagementPresetsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementPresetsPartialUpdateResponse(rsp)
}

// EngagementPresetsUpdateWithBodyWithResponse request with arbitrary body returning *EngagementPresetsUpdateResponse
func (c *ClientWithResponses) EngagementPresetsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EngagementPresetsUpdateResponse, error) {
	rsp, err := c.EngagementPresetsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementPresetsUpdateResponse(rsp)
}

func (c *ClientWithResponses) EngagementPresetsUpdateWithResponse(ctx context.Context, id int, body EngagementPresetsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EngagementPresetsUpdateResponse, error) {
	rsp, err := c.EngagementPresetsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementPresetsUpdateResponse(rsp)
}

func (c *ClientWithResponses) EngagementPresetsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body EngagementPresetsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EngagementPresetsUpdateResponse, error) {
	rsp, err := c.EngagementPresetsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementPresetsUpdateResponse(rsp)
}

// EngagementPresetsDeletePreviewListWithResponse request returning *EngagementPresetsDeletePreviewListResponse
func (c *ClientWithResponses) EngagementPresetsDeletePreviewListWithResponse(ctx context.Context, id int, params *EngagementPresetsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*EngagementPresetsDeletePreviewListResponse, error) {
	rsp, err := c.EngagementPresetsDeletePreviewList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementPresetsDeletePreviewListResponse(rsp)
}

// EngagementsListWithResponse request returning *EngagementsListResponse
func (c *ClientWithResponses) EngagementsListWithResponse(ctx context.Context, params *EngagementsListParams, reqEditors ...RequestEditorFn) (*EngagementsListResponse, error) {
	rsp, err := c.EngagementsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsListResponse(rsp)
}

// EngagementsCreateWithBodyWithResponse request with arbitrary body returning *EngagementsCreateResponse
func (c *ClientWithResponses) EngagementsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EngagementsCreateResponse, error) {
	rsp, err := c.EngagementsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsCreateResponse(rsp)
}

func (c *ClientWithResponses) EngagementsCreateWithResponse(ctx context.Context, body EngagementsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EngagementsCreateResponse, error) {
	rsp, err := c.EngagementsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsCreateResponse(rsp)
}

func (c *ClientWithResponses) EngagementsCreateWithFormdataBodyWithResponse(ctx context.Context, body EngagementsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EngagementsCreateResponse, error) {
	rsp, err := c.EngagementsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsCreateResponse(rsp)
}

// EngagementsDestroyWithResponse request returning *EngagementsDestroyResponse
func (c *ClientWithResponses) EngagementsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EngagementsDestroyResponse, error) {
	rsp, err := c.EngagementsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsDestroyResponse(rsp)
}

// EngagementsRetrieveWithResponse request returning *EngagementsRetrieveResponse
func (c *ClientWithResponses) EngagementsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EngagementsRetrieveResponse, error) {
	rsp, err := c.EngagementsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsRetrieveResponse(rsp)
}

// EngagementsPartialUpdateWithBodyWithResponse request with arbitrary body returning *EngagementsPartialUpdateResponse
func (c *ClientWithResponses) EngagementsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EngagementsPartialUpdateResponse, error) {
	rsp, err := c.EngagementsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) EngagementsPartialUpdateWithResponse(ctx context.Context, id int, body EngagementsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EngagementsPartialUpdateResponse, error) {
	rsp, err := c.EngagementsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) EngagementsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body EngagementsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EngagementsPartialUpdateResponse, error) {
	rsp, err := c.EngagementsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsPartialUpdateResponse(rsp)
}

// EngagementsUpdateWithBodyWithResponse request with arbitrary body returning *EngagementsUpdateResponse
func (c *ClientWithResponses) EngagementsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EngagementsUpdateResponse, error) {
	rsp, err := c.EngagementsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsUpdateResponse(rsp)
}

func (c *ClientWithResponses) EngagementsUpdateWithResponse(ctx context.Context, id int, body EngagementsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*EngagementsUpdateResponse, error) {
	rsp, err := c.EngagementsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsUpdateResponse(rsp)
}

func (c *ClientWithResponses) EngagementsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body EngagementsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EngagementsUpdateResponse, error) {
	rsp, err := c.EngagementsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsUpdateResponse(rsp)
}

// EngagementsAcceptRisksCreateWithBodyWithResponse request with arbitrary body returning *EngagementsAcceptRisksCreateResponse
func (c *ClientWithResponses) EngagementsAcceptRisksCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EngagementsAcceptRisksCreateResponse, error) {
	rsp, err := c.EngagementsAcceptRisksCreateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsAcceptRisksCreateResponse(rsp)
}

func (c *ClientWithResponses) EngagementsAcceptRisksCreateWithResponse(ctx context.Context, id int, body EngagementsAcceptRisksCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EngagementsAcceptRisksCreateResponse, error) {
	rsp, err := c.EngagementsAcceptRisksCreate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsAcceptRisksCreateResponse(rsp)
}

func (c *ClientWithResponses) EngagementsAcceptRisksCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body EngagementsAcceptRisksCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EngagementsAcceptRisksCreateResponse, error) {
	rsp, err := c.EngagementsAcceptRisksCreateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsAcceptRisksCreateResponse(rsp)
}

// EngagementsCloseCreateWithResponse request returning *EngagementsCloseCreateResponse
func (c *ClientWithResponses) EngagementsCloseCreateWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EngagementsCloseCreateResponse, error) {
	rsp, err := c.EngagementsCloseCreate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsCloseCreateResponse(rsp)
}

// EngagementsCompleteChecklistRetrieveWithResponse request returning *EngagementsCompleteChecklistRetrieveResponse
func (c *ClientWithResponses) EngagementsCompleteChecklistRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EngagementsCompleteChecklistRetrieveResponse, error) {
	rsp, err := c.EngagementsCompleteChecklistRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsCompleteChecklistRetrieveResponse(rsp)
}

// EngagementsCompleteChecklistCreateWithBodyWithResponse request with arbitrary body returning *EngagementsCompleteChecklistCreateResponse
func (c *ClientWithResponses) EngagementsCompleteChecklistCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EngagementsCompleteChecklistCreateResponse, error) {
	rsp, err := c.EngagementsCompleteChecklistCreateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsCompleteChecklistCreateResponse(rsp)
}

func (c *ClientWithResponses) EngagementsCompleteChecklistCreateWithResponse(ctx context.Context, id int, body EngagementsCompleteChecklistCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EngagementsCompleteChecklistCreateResponse, error) {
	rsp, err := c.EngagementsCompleteChecklistCreate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsCompleteChecklistCreateResponse(rsp)
}

func (c *ClientWithResponses) EngagementsCompleteChecklistCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body EngagementsCompleteChecklistCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EngagementsCompleteChecklistCreateResponse, error) {
	rsp, err := c.EngagementsCompleteChecklistCreateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsCompleteChecklistCreateResponse(rsp)
}

// EngagementsDeletePreviewListWithResponse request returning *EngagementsDeletePreviewListResponse
func (c *ClientWithResponses) EngagementsDeletePreviewListWithResponse(ctx context.Context, id int, params *EngagementsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*EngagementsDeletePreviewListResponse, error) {
	rsp, err := c.EngagementsDeletePreviewList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsDeletePreviewListResponse(rsp)
}

// EngagementsFilesRetrieveWithResponse request returning *EngagementsFilesRetrieveResponse
func (c *ClientWithResponses) EngagementsFilesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EngagementsFilesRetrieveResponse, error) {
	rsp, err := c.EngagementsFilesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsFilesRetrieveResponse(rsp)
}

// EngagementsFilesCreateWithBodyWithResponse request with arbitrary body returning *EngagementsFilesCreateResponse
func (c *ClientWithResponses) EngagementsFilesCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EngagementsFilesCreateResponse, error) {
	rsp, err := c.EngagementsFilesCreateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsFilesCreateResponse(rsp)
}

// EngagementsFilesDownloadRetrieveWithResponse request returning *EngagementsFilesDownloadRetrieveResponse
func (c *ClientWithResponses) EngagementsFilesDownloadRetrieveWithResponse(ctx context.Context, id int, fileId string, reqEditors ...RequestEditorFn) (*EngagementsFilesDownloadRetrieveResponse, error) {
	rsp, err := c.EngagementsFilesDownloadRetrieve(ctx, id, fileId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsFilesDownloadRetrieveResponse(rsp)
}

// EngagementsGenerateReportCreateWithBodyWithResponse request with arbitrary body returning *EngagementsGenerateReportCreateResponse
func (c *ClientWithResponses) EngagementsGenerateReportCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EngagementsGenerateReportCreateResponse, error) {
	rsp, err := c.EngagementsGenerateReportCreateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsGenerateReportCreateResponse(rsp)
}

func (c *ClientWithResponses) EngagementsGenerateReportCreateWithResponse(ctx context.Context, id int, body EngagementsGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EngagementsGenerateReportCreateResponse, error) {
	rsp, err := c.EngagementsGenerateReportCreate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsGenerateReportCreateResponse(rsp)
}

func (c *ClientWithResponses) EngagementsGenerateReportCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body EngagementsGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EngagementsGenerateReportCreateResponse, error) {
	rsp, err := c.EngagementsGenerateReportCreateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsGenerateReportCreateResponse(rsp)
}

// EngagementsNotesRetrieveWithResponse request returning *EngagementsNotesRetrieveResponse
func (c *ClientWithResponses) EngagementsNotesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EngagementsNotesRetrieveResponse, error) {
	rsp, err := c.EngagementsNotesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsNotesRetrieveResponse(rsp)
}

// EngagementsNotesCreateWithBodyWithResponse request with arbitrary body returning *EngagementsNotesCreateResponse
func (c *ClientWithResponses) EngagementsNotesCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EngagementsNotesCreateResponse, error) {
	rsp, err := c.EngagementsNotesCreateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsNotesCreateResponse(rsp)
}

func (c *ClientWithResponses) EngagementsNotesCreateWithResponse(ctx context.Context, id int, body EngagementsNotesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*EngagementsNotesCreateResponse, error) {
	rsp, err := c.EngagementsNotesCreate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsNotesCreateResponse(rsp)
}

func (c *ClientWithResponses) EngagementsNotesCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body EngagementsNotesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*EngagementsNotesCreateResponse, error) {
	rsp, err := c.EngagementsNotesCreateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsNotesCreateResponse(rsp)
}

// EngagementsReopenCreateWithResponse request returning *EngagementsReopenCreateResponse
func (c *ClientWithResponses) EngagementsReopenCreateWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*EngagementsReopenCreateResponse, error) {
	rsp, err := c.EngagementsReopenCreate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEngagementsReopenCreateResponse(rsp)
}

// FindingTemplatesListWithResponse request returning *FindingTemplatesListResponse
func (c *ClientWithResponses) FindingTemplatesListWithResponse(ctx context.Context, params *FindingTemplatesListParams, reqEditors ...RequestEditorFn) (*FindingTemplatesListResponse, error) {
	rsp, err := c.FindingTemplatesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingTemplatesListResponse(rsp)
}

// FindingTemplatesCreateWithBodyWithResponse request with arbitrary body returning *FindingTemplatesCreateResponse
func (c *ClientWithResponses) FindingTemplatesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingTemplatesCreateResponse, error) {
	rsp, err := c.FindingTemplatesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingTemplatesCreateResponse(rsp)
}

func (c *ClientWithResponses) FindingTemplatesCreateWithResponse(ctx context.Context, body FindingTemplatesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingTemplatesCreateResponse, error) {
	rsp, err := c.FindingTemplatesCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingTemplatesCreateResponse(rsp)
}

func (c *ClientWithResponses) FindingTemplatesCreateWithFormdataBodyWithResponse(ctx context.Context, body FindingTemplatesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingTemplatesCreateResponse, error) {
	rsp, err := c.FindingTemplatesCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingTemplatesCreateResponse(rsp)
}

// FindingTemplatesDestroyWithResponse request returning *FindingTemplatesDestroyResponse
func (c *ClientWithResponses) FindingTemplatesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*FindingTemplatesDestroyResponse, error) {
	rsp, err := c.FindingTemplatesDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingTemplatesDestroyResponse(rsp)
}

// FindingTemplatesRetrieveWithResponse request returning *FindingTemplatesRetrieveResponse
func (c *ClientWithResponses) FindingTemplatesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*FindingTemplatesRetrieveResponse, error) {
	rsp, err := c.FindingTemplatesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingTemplatesRetrieveResponse(rsp)
}

// FindingTemplatesPartialUpdateWithBodyWithResponse request with arbitrary body returning *FindingTemplatesPartialUpdateResponse
func (c *ClientWithResponses) FindingTemplatesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingTemplatesPartialUpdateResponse, error) {
	rsp, err := c.FindingTemplatesPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingTemplatesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) FindingTemplatesPartialUpdateWithResponse(ctx context.Context, id int, body FindingTemplatesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingTemplatesPartialUpdateResponse, error) {
	rsp, err := c.FindingTemplatesPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingTemplatesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) FindingTemplatesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingTemplatesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingTemplatesPartialUpdateResponse, error) {
	rsp, err := c.FindingTemplatesPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingTemplatesPartialUpdateResponse(rsp)
}

// FindingTemplatesUpdateWithBodyWithResponse request with arbitrary body returning *FindingTemplatesUpdateResponse
func (c *ClientWithResponses) FindingTemplatesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingTemplatesUpdateResponse, error) {
	rsp, err := c.FindingTemplatesUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingTemplatesUpdateResponse(rsp)
}

func (c *ClientWithResponses) FindingTemplatesUpdateWithResponse(ctx context.Context, id int, body FindingTemplatesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingTemplatesUpdateResponse, error) {
	rsp, err := c.FindingTemplatesUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingTemplatesUpdateResponse(rsp)
}

func (c *ClientWithResponses) FindingTemplatesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingTemplatesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingTemplatesUpdateResponse, error) {
	rsp, err := c.FindingTemplatesUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingTemplatesUpdateResponse(rsp)
}

// FindingTemplatesDeletePreviewListWithResponse request returning *FindingTemplatesDeletePreviewListResponse
func (c *ClientWithResponses) FindingTemplatesDeletePreviewListWithResponse(ctx context.Context, id int, params *FindingTemplatesDeletePreviewListParams, reqEditors ...RequestEditorFn) (*FindingTemplatesDeletePreviewListResponse, error) {
	rsp, err := c.FindingTemplatesDeletePreviewList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingTemplatesDeletePreviewListResponse(rsp)
}

// FindingsListWithResponse request returning *FindingsListResponse
func (c *ClientWithResponses) FindingsListWithResponse(ctx context.Context, params *FindingsListParams, reqEditors ...RequestEditorFn) (*FindingsListResponse, error) {
	rsp, err := c.FindingsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsListResponse(rsp)
}

// FindingsCreateWithBodyWithResponse request with arbitrary body returning *FindingsCreateResponse
func (c *ClientWithResponses) FindingsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsCreateResponse, error) {
	rsp, err := c.FindingsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsCreateResponse(rsp)
}

func (c *ClientWithResponses) FindingsCreateWithResponse(ctx context.Context, body FindingsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsCreateResponse, error) {
	rsp, err := c.FindingsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsCreateResponse(rsp)
}

func (c *ClientWithResponses) FindingsCreateWithFormdataBodyWithResponse(ctx context.Context, body FindingsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsCreateResponse, error) {
	rsp, err := c.FindingsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsCreateResponse(rsp)
}

// FindingsAcceptRisksCreateWithBodyWithResponse request with arbitrary body returning *FindingsAcceptRisksCreateResponse
func (c *ClientWithResponses) FindingsAcceptRisksCreateWithBodyWithResponse(ctx context.Context, params *FindingsAcceptRisksCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsAcceptRisksCreateResponse, error) {
	rsp, err := c.FindingsAcceptRisksCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsAcceptRisksCreateResponse(rsp)
}

func (c *ClientWithResponses) FindingsAcceptRisksCreateWithResponse(ctx context.Context, params *FindingsAcceptRisksCreateParams, body FindingsAcceptRisksCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsAcceptRisksCreateResponse, error) {
	rsp, err := c.FindingsAcceptRisksCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsAcceptRisksCreateResponse(rsp)
}

func (c *ClientWithResponses) FindingsAcceptRisksCreateWithFormdataBodyWithResponse(ctx context.Context, params *FindingsAcceptRisksCreateParams, body FindingsAcceptRisksCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsAcceptRisksCreateResponse, error) {
	rsp, err := c.FindingsAcceptRisksCreateWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsAcceptRisksCreateResponse(rsp)
}

// FindingsGenerateReportCreateWithBodyWithResponse request with arbitrary body returning *FindingsGenerateReportCreateResponse
func (c *ClientWithResponses) FindingsGenerateReportCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsGenerateReportCreateResponse, error) {
	rsp, err := c.FindingsGenerateReportCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsGenerateReportCreateResponse(rsp)
}

func (c *ClientWithResponses) FindingsGenerateReportCreateWithResponse(ctx context.Context, body FindingsGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsGenerateReportCreateResponse, error) {
	rsp, err := c.FindingsGenerateReportCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsGenerateReportCreateResponse(rsp)
}

func (c *ClientWithResponses) FindingsGenerateReportCreateWithFormdataBodyWithResponse(ctx context.Context, body FindingsGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsGenerateReportCreateResponse, error) {
	rsp, err := c.FindingsGenerateReportCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsGenerateReportCreateResponse(rsp)
}

// FindingsDestroyWithResponse request returning *FindingsDestroyResponse
func (c *ClientWithResponses) FindingsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*FindingsDestroyResponse, error) {
	rsp, err := c.FindingsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsDestroyResponse(rsp)
}

// FindingsRetrieveWithResponse request returning *FindingsRetrieveResponse
func (c *ClientWithResponses) FindingsRetrieveWithResponse(ctx context.Context, id int, params *FindingsRetrieveParams, reqEditors ...RequestEditorFn) (*FindingsRetrieveResponse, error) {
	rsp, err := c.FindingsRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsRetrieveResponse(rsp)
}

// FindingsPartialUpdateWithBodyWithResponse request with arbitrary body returning *FindingsPartialUpdateResponse
func (c *ClientWithResponses) FindingsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsPartialUpdateResponse, error) {
	rsp, err := c.FindingsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) FindingsPartialUpdateWithResponse(ctx context.Context, id int, body FindingsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsPartialUpdateResponse, error) {
	rsp, err := c.FindingsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) FindingsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsPartialUpdateResponse, error) {
	rsp, err := c.FindingsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsPartialUpdateResponse(rsp)
}

// FindingsUpdateWithBodyWithResponse request with arbitrary body returning *FindingsUpdateResponse
func (c *ClientWithResponses) FindingsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsUpdateResponse, error) {
	rsp, err := c.FindingsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsUpdateResponse(rsp)
}

func (c *ClientWithResponses) FindingsUpdateWithResponse(ctx context.Context, id int, body FindingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsUpdateResponse, error) {
	rsp, err := c.FindingsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsUpdateResponse(rsp)
}

func (c *ClientWithResponses) FindingsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsUpdateResponse, error) {
	rsp, err := c.FindingsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsUpdateResponse(rsp)
}

// FindingsCloseCreateWithBodyWithResponse request with arbitrary body returning *FindingsCloseCreateResponse
func (c *ClientWithResponses) FindingsCloseCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsCloseCreateResponse, error) {
	rsp, err := c.FindingsCloseCreateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsCloseCreateResponse(rsp)
}

func (c *ClientWithResponses) FindingsCloseCreateWithResponse(ctx context.Context, id int, body FindingsCloseCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsCloseCreateResponse, error) {
	rsp, err := c.FindingsCloseCreate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsCloseCreateResponse(rsp)
}

func (c *ClientWithResponses) FindingsCloseCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingsCloseCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsCloseCreateResponse, error) {
	rsp, err := c.FindingsCloseCreateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsCloseCreateResponse(rsp)
}

// FindingsDeletePreviewListWithResponse request returning *FindingsDeletePreviewListResponse
func (c *ClientWithResponses) FindingsDeletePreviewListWithResponse(ctx context.Context, id int, params *FindingsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*FindingsDeletePreviewListResponse, error) {
	rsp, err := c.FindingsDeletePreviewList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsDeletePreviewListResponse(rsp)
}

// FindingsDuplicateListWithResponse request returning *FindingsDuplicateListResponse
func (c *ClientWithResponses) FindingsDuplicateListWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*FindingsDuplicateListResponse, error) {
	rsp, err := c.FindingsDuplicateList(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsDuplicateListResponse(rsp)
}

// FindingsDuplicateResetCreateWithResponse request returning *FindingsDuplicateResetCreateResponse
func (c *ClientWithResponses) FindingsDuplicateResetCreateWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*FindingsDuplicateResetCreateResponse, error) {
	rsp, err := c.FindingsDuplicateResetCreate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsDuplicateResetCreateResponse(rsp)
}

// FindingsFilesRetrieveWithResponse request returning *FindingsFilesRetrieveResponse
func (c *ClientWithResponses) FindingsFilesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*FindingsFilesRetrieveResponse, error) {
	rsp, err := c.FindingsFilesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsFilesRetrieveResponse(rsp)
}

// FindingsFilesCreateWithBodyWithResponse request with arbitrary body returning *FindingsFilesCreateResponse
func (c *ClientWithResponses) FindingsFilesCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsFilesCreateResponse, error) {
	rsp, err := c.FindingsFilesCreateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsFilesCreateResponse(rsp)
}

// FindingsFilesDownloadRetrieveWithResponse request returning *FindingsFilesDownloadRetrieveResponse
func (c *ClientWithResponses) FindingsFilesDownloadRetrieveWithResponse(ctx context.Context, id int, fileId string, reqEditors ...RequestEditorFn) (*FindingsFilesDownloadRetrieveResponse, error) {
	rsp, err := c.FindingsFilesDownloadRetrieve(ctx, id, fileId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsFilesDownloadRetrieveResponse(rsp)
}

// FindingsMetadataDestroyWithResponse request returning *FindingsMetadataDestroyResponse
func (c *ClientWithResponses) FindingsMetadataDestroyWithResponse(ctx context.Context, id int, params *FindingsMetadataDestroyParams, reqEditors ...RequestEditorFn) (*FindingsMetadataDestroyResponse, error) {
	rsp, err := c.FindingsMetadataDestroy(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsMetadataDestroyResponse(rsp)
}

// FindingsMetadataListWithResponse request returning *FindingsMetadataListResponse
func (c *ClientWithResponses) FindingsMetadataListWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*FindingsMetadataListResponse, error) {
	rsp, err := c.FindingsMetadataList(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsMetadataListResponse(rsp)
}

// FindingsMetadataCreateWithBodyWithResponse request with arbitrary body returning *FindingsMetadataCreateResponse
func (c *ClientWithResponses) FindingsMetadataCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsMetadataCreateResponse, error) {
	rsp, err := c.FindingsMetadataCreateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsMetadataCreateResponse(rsp)
}

func (c *ClientWithResponses) FindingsMetadataCreateWithResponse(ctx context.Context, id int, body FindingsMetadataCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsMetadataCreateResponse, error) {
	rsp, err := c.FindingsMetadataCreate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsMetadataCreateResponse(rsp)
}

func (c *ClientWithResponses) FindingsMetadataCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingsMetadataCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsMetadataCreateResponse, error) {
	rsp, err := c.FindingsMetadataCreateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsMetadataCreateResponse(rsp)
}

// FindingsMetadataUpdateWithBodyWithResponse request with arbitrary body returning *FindingsMetadataUpdateResponse
func (c *ClientWithResponses) FindingsMetadataUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsMetadataUpdateResponse, error) {
	rsp, err := c.FindingsMetadataUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsMetadataUpdateResponse(rsp)
}

func (c *ClientWithResponses) FindingsMetadataUpdateWithResponse(ctx context.Context, id int, body FindingsMetadataUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsMetadataUpdateResponse, error) {
	rsp, err := c.FindingsMetadataUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsMetadataUpdateResponse(rsp)
}

func (c *ClientWithResponses) FindingsMetadataUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingsMetadataUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsMetadataUpdateResponse, error) {
	rsp, err := c.FindingsMetadataUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsMetadataUpdateResponse(rsp)
}

// FindingsNotesRetrieveWithResponse request returning *FindingsNotesRetrieveResponse
func (c *ClientWithResponses) FindingsNotesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*FindingsNotesRetrieveResponse, error) {
	rsp, err := c.FindingsNotesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsNotesRetrieveResponse(rsp)
}

// FindingsNotesCreateWithBodyWithResponse request with arbitrary body returning *FindingsNotesCreateResponse
func (c *ClientWithResponses) FindingsNotesCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsNotesCreateResponse, error) {
	rsp, err := c.FindingsNotesCreateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsNotesCreateResponse(rsp)
}

func (c *ClientWithResponses) FindingsNotesCreateWithResponse(ctx context.Context, id int, body FindingsNotesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsNotesCreateResponse, error) {
	rsp, err := c.FindingsNotesCreate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsNotesCreateResponse(rsp)
}

func (c *ClientWithResponses) FindingsNotesCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingsNotesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsNotesCreateResponse, error) {
	rsp, err := c.FindingsNotesCreateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsNotesCreateResponse(rsp)
}

// FindingsOriginalCreateWithResponse request returning *FindingsOriginalCreateResponse
func (c *ClientWithResponses) FindingsOriginalCreateWithResponse(ctx context.Context, id int, newFid int, reqEditors ...RequestEditorFn) (*FindingsOriginalCreateResponse, error) {
	rsp, err := c.FindingsOriginalCreate(ctx, id, newFid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsOriginalCreateResponse(rsp)
}

// FindingsRemoveNotePartialUpdateWithBodyWithResponse request with arbitrary body returning *FindingsRemoveNotePartialUpdateResponse
func (c *ClientWithResponses) FindingsRemoveNotePartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsRemoveNotePartialUpdateResponse, error) {
	rsp, err := c.FindingsRemoveNotePartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsRemoveNotePartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) FindingsRemoveNotePartialUpdateWithResponse(ctx context.Context, id int, body FindingsRemoveNotePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsRemoveNotePartialUpdateResponse, error) {
	rsp, err := c.FindingsRemoveNotePartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsRemoveNotePartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) FindingsRemoveNotePartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingsRemoveNotePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsRemoveNotePartialUpdateResponse, error) {
	rsp, err := c.FindingsRemoveNotePartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsRemoveNotePartialUpdateResponse(rsp)
}

// FindingsRemoveTagsPartialUpdateWithBodyWithResponse request with arbitrary body returning *FindingsRemoveTagsPartialUpdateResponse
func (c *ClientWithResponses) FindingsRemoveTagsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsRemoveTagsPartialUpdateResponse, error) {
	rsp, err := c.FindingsRemoveTagsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsRemoveTagsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) FindingsRemoveTagsPartialUpdateWithResponse(ctx context.Context, id int, body FindingsRemoveTagsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsRemoveTagsPartialUpdateResponse, error) {
	rsp, err := c.FindingsRemoveTagsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsRemoveTagsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) FindingsRemoveTagsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingsRemoveTagsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsRemoveTagsPartialUpdateResponse, error) {
	rsp, err := c.FindingsRemoveTagsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsRemoveTagsPartialUpdateResponse(rsp)
}

// FindingsRemoveTagsUpdateWithBodyWithResponse request with arbitrary body returning *FindingsRemoveTagsUpdateResponse
func (c *ClientWithResponses) FindingsRemoveTagsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsRemoveTagsUpdateResponse, error) {
	rsp, err := c.FindingsRemoveTagsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsRemoveTagsUpdateResponse(rsp)
}

func (c *ClientWithResponses) FindingsRemoveTagsUpdateWithResponse(ctx context.Context, id int, body FindingsRemoveTagsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsRemoveTagsUpdateResponse, error) {
	rsp, err := c.FindingsRemoveTagsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsRemoveTagsUpdateResponse(rsp)
}

func (c *ClientWithResponses) FindingsRemoveTagsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingsRemoveTagsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsRemoveTagsUpdateResponse, error) {
	rsp, err := c.FindingsRemoveTagsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsRemoveTagsUpdateResponse(rsp)
}

// FindingsRequestResponseRetrieveWithResponse request returning *FindingsRequestResponseRetrieveResponse
func (c *ClientWithResponses) FindingsRequestResponseRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*FindingsRequestResponseRetrieveResponse, error) {
	rsp, err := c.FindingsRequestResponseRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsRequestResponseRetrieveResponse(rsp)
}

// FindingsRequestResponseCreateWithBodyWithResponse request with arbitrary body returning *FindingsRequestResponseCreateResponse
func (c *ClientWithResponses) FindingsRequestResponseCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsRequestResponseCreateResponse, error) {
	rsp, err := c.FindingsRequestResponseCreateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsRequestResponseCreateResponse(rsp)
}

func (c *ClientWithResponses) FindingsRequestResponseCreateWithResponse(ctx context.Context, id int, body FindingsRequestResponseCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsRequestResponseCreateResponse, error) {
	rsp, err := c.FindingsRequestResponseCreate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsRequestResponseCreateResponse(rsp)
}

func (c *ClientWithResponses) FindingsRequestResponseCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingsRequestResponseCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsRequestResponseCreateResponse, error) {
	rsp, err := c.FindingsRequestResponseCreateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsRequestResponseCreateResponse(rsp)
}

// FindingsTagsRetrieveWithResponse request returning *FindingsTagsRetrieveResponse
func (c *ClientWithResponses) FindingsTagsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*FindingsTagsRetrieveResponse, error) {
	rsp, err := c.FindingsTagsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsTagsRetrieveResponse(rsp)
}

// FindingsTagsCreateWithBodyWithResponse request with arbitrary body returning *FindingsTagsCreateResponse
func (c *ClientWithResponses) FindingsTagsCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FindingsTagsCreateResponse, error) {
	rsp, err := c.FindingsTagsCreateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsTagsCreateResponse(rsp)
}

func (c *ClientWithResponses) FindingsTagsCreateWithResponse(ctx context.Context, id int, body FindingsTagsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*FindingsTagsCreateResponse, error) {
	rsp, err := c.FindingsTagsCreate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsTagsCreateResponse(rsp)
}

func (c *ClientWithResponses) FindingsTagsCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body FindingsTagsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*FindingsTagsCreateResponse, error) {
	rsp, err := c.FindingsTagsCreateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindingsTagsCreateResponse(rsp)
}

// GlobalRolesListWithResponse request returning *GlobalRolesListResponse
func (c *ClientWithResponses) GlobalRolesListWithResponse(ctx context.Context, params *GlobalRolesListParams, reqEditors ...RequestEditorFn) (*GlobalRolesListResponse, error) {
	rsp, err := c.GlobalRolesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGlobalRolesListResponse(rsp)
}

// GlobalRolesCreateWithBodyWithResponse request with arbitrary body returning *GlobalRolesCreateResponse
func (c *ClientWithResponses) GlobalRolesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GlobalRolesCreateResponse, error) {
	rsp, err := c.GlobalRolesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGlobalRolesCreateResponse(rsp)
}

func (c *ClientWithResponses) GlobalRolesCreateWithResponse(ctx context.Context, body GlobalRolesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*GlobalRolesCreateResponse, error) {
	rsp, err := c.GlobalRolesCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGlobalRolesCreateResponse(rsp)
}

func (c *ClientWithResponses) GlobalRolesCreateWithFormdataBodyWithResponse(ctx context.Context, body GlobalRolesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*GlobalRolesCreateResponse, error) {
	rsp, err := c.GlobalRolesCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGlobalRolesCreateResponse(rsp)
}

// GlobalRolesDestroyWithResponse request returning *GlobalRolesDestroyResponse
func (c *ClientWithResponses) GlobalRolesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GlobalRolesDestroyResponse, error) {
	rsp, err := c.GlobalRolesDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGlobalRolesDestroyResponse(rsp)
}

// GlobalRolesRetrieveWithResponse request returning *GlobalRolesRetrieveResponse
func (c *ClientWithResponses) GlobalRolesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GlobalRolesRetrieveResponse, error) {
	rsp, err := c.GlobalRolesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGlobalRolesRetrieveResponse(rsp)
}

// GlobalRolesPartialUpdateWithBodyWithResponse request with arbitrary body returning *GlobalRolesPartialUpdateResponse
func (c *ClientWithResponses) GlobalRolesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GlobalRolesPartialUpdateResponse, error) {
	rsp, err := c.GlobalRolesPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGlobalRolesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) GlobalRolesPartialUpdateWithResponse(ctx context.Context, id int, body GlobalRolesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*GlobalRolesPartialUpdateResponse, error) {
	rsp, err := c.GlobalRolesPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGlobalRolesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) GlobalRolesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body GlobalRolesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*GlobalRolesPartialUpdateResponse, error) {
	rsp, err := c.GlobalRolesPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGlobalRolesPartialUpdateResponse(rsp)
}

// GlobalRolesUpdateWithBodyWithResponse request with arbitrary body returning *GlobalRolesUpdateResponse
func (c *ClientWithResponses) GlobalRolesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GlobalRolesUpdateResponse, error) {
	rsp, err := c.GlobalRolesUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGlobalRolesUpdateResponse(rsp)
}

func (c *ClientWithResponses) GlobalRolesUpdateWithResponse(ctx context.Context, id int, body GlobalRolesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*GlobalRolesUpdateResponse, error) {
	rsp, err := c.GlobalRolesUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGlobalRolesUpdateResponse(rsp)
}

func (c *ClientWithResponses) GlobalRolesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body GlobalRolesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*GlobalRolesUpdateResponse, error) {
	rsp, err := c.GlobalRolesUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGlobalRolesUpdateResponse(rsp)
}

// GlobalRolesDeletePreviewListWithResponse request returning *GlobalRolesDeletePreviewListResponse
func (c *ClientWithResponses) GlobalRolesDeletePreviewListWithResponse(ctx context.Context, id int, params *GlobalRolesDeletePreviewListParams, reqEditors ...RequestEditorFn) (*GlobalRolesDeletePreviewListResponse, error) {
	rsp, err := c.GlobalRolesDeletePreviewList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGlobalRolesDeletePreviewListResponse(rsp)
}

// ImportLanguagesCreateWithBodyWithResponse request with arbitrary body returning *ImportLanguagesCreateResponse
func (c *ClientWithResponses) ImportLanguagesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportLanguagesCreateResponse, error) {
	rsp, err := c.ImportLanguagesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImportLanguagesCreateResponse(rsp)
}

// ImportScanCreateWithBodyWithResponse request with arbitrary body returning *ImportScanCreateResponse
func (c *ClientWithResponses) ImportScanCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportScanCreateResponse, error) {
	rsp, err := c.ImportScanCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImportScanCreateResponse(rsp)
}

// JiraConfigurationsListWithResponse request returning *JiraConfigurationsListResponse
func (c *ClientWithResponses) JiraConfigurationsListWithResponse(ctx context.Context, params *JiraConfigurationsListParams, reqEditors ...RequestEditorFn) (*JiraConfigurationsListResponse, error) {
	rsp, err := c.JiraConfigurationsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraConfigurationsListResponse(rsp)
}

// JiraConfigurationsCreateWithBodyWithResponse request with arbitrary body returning *JiraConfigurationsCreateResponse
func (c *ClientWithResponses) JiraConfigurationsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraConfigurationsCreateResponse, error) {
	rsp, err := c.JiraConfigurationsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraConfigurationsCreateResponse(rsp)
}

func (c *ClientWithResponses) JiraConfigurationsCreateWithResponse(ctx context.Context, body JiraConfigurationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraConfigurationsCreateResponse, error) {
	rsp, err := c.JiraConfigurationsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraConfigurationsCreateResponse(rsp)
}

func (c *ClientWithResponses) JiraConfigurationsCreateWithFormdataBodyWithResponse(ctx context.Context, body JiraConfigurationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraConfigurationsCreateResponse, error) {
	rsp, err := c.JiraConfigurationsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraConfigurationsCreateResponse(rsp)
}

// JiraConfigurationsDestroyWithResponse request returning *JiraConfigurationsDestroyResponse
func (c *ClientWithResponses) JiraConfigurationsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*JiraConfigurationsDestroyResponse, error) {
	rsp, err := c.JiraConfigurationsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraConfigurationsDestroyResponse(rsp)
}

// JiraConfigurationsRetrieveWithResponse request returning *JiraConfigurationsRetrieveResponse
func (c *ClientWithResponses) JiraConfigurationsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*JiraConfigurationsRetrieveResponse, error) {
	rsp, err := c.JiraConfigurationsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraConfigurationsRetrieveResponse(rsp)
}

// JiraConfigurationsPartialUpdateWithBodyWithResponse request with arbitrary body returning *JiraConfigurationsPartialUpdateResponse
func (c *ClientWithResponses) JiraConfigurationsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraConfigurationsPartialUpdateResponse, error) {
	rsp, err := c.JiraConfigurationsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraConfigurationsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) JiraConfigurationsPartialUpdateWithResponse(ctx context.Context, id int, body JiraConfigurationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraConfigurationsPartialUpdateResponse, error) {
	rsp, err := c.JiraConfigurationsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraConfigurationsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) JiraConfigurationsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body JiraConfigurationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraConfigurationsPartialUpdateResponse, error) {
	rsp, err := c.JiraConfigurationsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraConfigurationsPartialUpdateResponse(rsp)
}

// JiraConfigurationsUpdateWithBodyWithResponse request with arbitrary body returning *JiraConfigurationsUpdateResponse
func (c *ClientWithResponses) JiraConfigurationsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraConfigurationsUpdateResponse, error) {
	rsp, err := c.JiraConfigurationsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraConfigurationsUpdateResponse(rsp)
}

func (c *ClientWithResponses) JiraConfigurationsUpdateWithResponse(ctx context.Context, id int, body JiraConfigurationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraConfigurationsUpdateResponse, error) {
	rsp, err := c.JiraConfigurationsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraConfigurationsUpdateResponse(rsp)
}

func (c *ClientWithResponses) JiraConfigurationsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body JiraConfigurationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraConfigurationsUpdateResponse, error) {
	rsp, err := c.JiraConfigurationsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraConfigurationsUpdateResponse(rsp)
}

// JiraConfigurationsDeletePreviewListWithResponse request returning *JiraConfigurationsDeletePreviewListResponse
func (c *ClientWithResponses) JiraConfigurationsDeletePreviewListWithResponse(ctx context.Context, id int, params *JiraConfigurationsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*JiraConfigurationsDeletePreviewListResponse, error) {
	rsp, err := c.JiraConfigurationsDeletePreviewList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraConfigurationsDeletePreviewListResponse(rsp)
}

// JiraFindingMappingsListWithResponse request returning *JiraFindingMappingsListResponse
func (c *ClientWithResponses) JiraFindingMappingsListWithResponse(ctx context.Context, params *JiraFindingMappingsListParams, reqEditors ...RequestEditorFn) (*JiraFindingMappingsListResponse, error) {
	rsp, err := c.JiraFindingMappingsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraFindingMappingsListResponse(rsp)
}

// JiraFindingMappingsCreateWithBodyWithResponse request with arbitrary body returning *JiraFindingMappingsCreateResponse
func (c *ClientWithResponses) JiraFindingMappingsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraFindingMappingsCreateResponse, error) {
	rsp, err := c.JiraFindingMappingsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraFindingMappingsCreateResponse(rsp)
}

func (c *ClientWithResponses) JiraFindingMappingsCreateWithResponse(ctx context.Context, body JiraFindingMappingsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraFindingMappingsCreateResponse, error) {
	rsp, err := c.JiraFindingMappingsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraFindingMappingsCreateResponse(rsp)
}

func (c *ClientWithResponses) JiraFindingMappingsCreateWithFormdataBodyWithResponse(ctx context.Context, body JiraFindingMappingsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraFindingMappingsCreateResponse, error) {
	rsp, err := c.JiraFindingMappingsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraFindingMappingsCreateResponse(rsp)
}

// JiraFindingMappingsDestroyWithResponse request returning *JiraFindingMappingsDestroyResponse
func (c *ClientWithResponses) JiraFindingMappingsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*JiraFindingMappingsDestroyResponse, error) {
	rsp, err := c.JiraFindingMappingsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraFindingMappingsDestroyResponse(rsp)
}

// JiraFindingMappingsRetrieveWithResponse request returning *JiraFindingMappingsRetrieveResponse
func (c *ClientWithResponses) JiraFindingMappingsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*JiraFindingMappingsRetrieveResponse, error) {
	rsp, err := c.JiraFindingMappingsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraFindingMappingsRetrieveResponse(rsp)
}

// JiraFindingMappingsPartialUpdateWithBodyWithResponse request with arbitrary body returning *JiraFindingMappingsPartialUpdateResponse
func (c *ClientWithResponses) JiraFindingMappingsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraFindingMappingsPartialUpdateResponse, error) {
	rsp, err := c.JiraFindingMappingsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraFindingMappingsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) JiraFindingMappingsPartialUpdateWithResponse(ctx context.Context, id int, body JiraFindingMappingsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraFindingMappingsPartialUpdateResponse, error) {
	rsp, err := c.JiraFindingMappingsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraFindingMappingsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) JiraFindingMappingsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body JiraFindingMappingsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraFindingMappingsPartialUpdateResponse, error) {
	rsp, err := c.JiraFindingMappingsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraFindingMappingsPartialUpdateResponse(rsp)
}

// JiraFindingMappingsUpdateWithBodyWithResponse request with arbitrary body returning *JiraFindingMappingsUpdateResponse
func (c *ClientWithResponses) JiraFindingMappingsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraFindingMappingsUpdateResponse, error) {
	rsp, err := c.JiraFindingMappingsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraFindingMappingsUpdateResponse(rsp)
}

func (c *ClientWithResponses) JiraFindingMappingsUpdateWithResponse(ctx context.Context, id int, body JiraFindingMappingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraFindingMappingsUpdateResponse, error) {
	rsp, err := c.JiraFindingMappingsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraFindingMappingsUpdateResponse(rsp)
}

func (c *ClientWithResponses) JiraFindingMappingsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body JiraFindingMappingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraFindingMappingsUpdateResponse, error) {
	rsp, err := c.JiraFindingMappingsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraFindingMappingsUpdateResponse(rsp)
}

// JiraFindingMappingsDeletePreviewListWithResponse request returning *JiraFindingMappingsDeletePreviewListResponse
func (c *ClientWithResponses) JiraFindingMappingsDeletePreviewListWithResponse(ctx context.Context, id int, params *JiraFindingMappingsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*JiraFindingMappingsDeletePreviewListResponse, error) {
	rsp, err := c.JiraFindingMappingsDeletePreviewList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraFindingMappingsDeletePreviewListResponse(rsp)
}

// JiraInstancesListWithResponse request returning *JiraInstancesListResponse
func (c *ClientWithResponses) JiraInstancesListWithResponse(ctx context.Context, params *JiraInstancesListParams, reqEditors ...RequestEditorFn) (*JiraInstancesListResponse, error) {
	rsp, err := c.JiraInstancesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraInstancesListResponse(rsp)
}

// JiraInstancesCreateWithBodyWithResponse request with arbitrary body returning *JiraInstancesCreateResponse
func (c *ClientWithResponses) JiraInstancesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraInstancesCreateResponse, error) {
	rsp, err := c.JiraInstancesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraInstancesCreateResponse(rsp)
}

func (c *ClientWithResponses) JiraInstancesCreateWithResponse(ctx context.Context, body JiraInstancesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraInstancesCreateResponse, error) {
	rsp, err := c.JiraInstancesCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraInstancesCreateResponse(rsp)
}

func (c *ClientWithResponses) JiraInstancesCreateWithFormdataBodyWithResponse(ctx context.Context, body JiraInstancesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraInstancesCreateResponse, error) {
	rsp, err := c.JiraInstancesCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraInstancesCreateResponse(rsp)
}

// JiraInstancesDestroyWithResponse request returning *JiraInstancesDestroyResponse
func (c *ClientWithResponses) JiraInstancesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*JiraInstancesDestroyResponse, error) {
	rsp, err := c.JiraInstancesDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraInstancesDestroyResponse(rsp)
}

// JiraInstancesRetrieveWithResponse request returning *JiraInstancesRetrieveResponse
func (c *ClientWithResponses) JiraInstancesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*JiraInstancesRetrieveResponse, error) {
	rsp, err := c.JiraInstancesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraInstancesRetrieveResponse(rsp)
}

// JiraInstancesPartialUpdateWithBodyWithResponse request with arbitrary body returning *JiraInstancesPartialUpdateResponse
func (c *ClientWithResponses) JiraInstancesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraInstancesPartialUpdateResponse, error) {
	rsp, err := c.JiraInstancesPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraInstancesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) JiraInstancesPartialUpdateWithResponse(ctx context.Context, id int, body JiraInstancesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraInstancesPartialUpdateResponse, error) {
	rsp, err := c.JiraInstancesPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraInstancesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) JiraInstancesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body JiraInstancesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraInstancesPartialUpdateResponse, error) {
	rsp, err := c.JiraInstancesPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraInstancesPartialUpdateResponse(rsp)
}

// JiraInstancesUpdateWithBodyWithResponse request with arbitrary body returning *JiraInstancesUpdateResponse
func (c *ClientWithResponses) JiraInstancesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraInstancesUpdateResponse, error) {
	rsp, err := c.JiraInstancesUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraInstancesUpdateResponse(rsp)
}

func (c *ClientWithResponses) JiraInstancesUpdateWithResponse(ctx context.Context, id int, body JiraInstancesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraInstancesUpdateResponse, error) {
	rsp, err := c.JiraInstancesUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraInstancesUpdateResponse(rsp)
}

func (c *ClientWithResponses) JiraInstancesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body JiraInstancesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraInstancesUpdateResponse, error) {
	rsp, err := c.JiraInstancesUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraInstancesUpdateResponse(rsp)
}

// JiraInstancesDeletePreviewListWithResponse request returning *JiraInstancesDeletePreviewListResponse
func (c *ClientWithResponses) JiraInstancesDeletePreviewListWithResponse(ctx context.Context, id int, params *JiraInstancesDeletePreviewListParams, reqEditors ...RequestEditorFn) (*JiraInstancesDeletePreviewListResponse, error) {
	rsp, err := c.JiraInstancesDeletePreviewList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraInstancesDeletePreviewListResponse(rsp)
}

// JiraProductConfigurationsListWithResponse request returning *JiraProductConfigurationsListResponse
func (c *ClientWithResponses) JiraProductConfigurationsListWithResponse(ctx context.Context, params *JiraProductConfigurationsListParams, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsListResponse, error) {
	rsp, err := c.JiraProductConfigurationsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProductConfigurationsListResponse(rsp)
}

// JiraProductConfigurationsCreateWithBodyWithResponse request with arbitrary body returning *JiraProductConfigurationsCreateResponse
func (c *ClientWithResponses) JiraProductConfigurationsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsCreateResponse, error) {
	rsp, err := c.JiraProductConfigurationsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProductConfigurationsCreateResponse(rsp)
}

func (c *ClientWithResponses) JiraProductConfigurationsCreateWithResponse(ctx context.Context, body JiraProductConfigurationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsCreateResponse, error) {
	rsp, err := c.JiraProductConfigurationsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProductConfigurationsCreateResponse(rsp)
}

func (c *ClientWithResponses) JiraProductConfigurationsCreateWithFormdataBodyWithResponse(ctx context.Context, body JiraProductConfigurationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsCreateResponse, error) {
	rsp, err := c.JiraProductConfigurationsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProductConfigurationsCreateResponse(rsp)
}

// JiraProductConfigurationsDestroyWithResponse request returning *JiraProductConfigurationsDestroyResponse
func (c *ClientWithResponses) JiraProductConfigurationsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsDestroyResponse, error) {
	rsp, err := c.JiraProductConfigurationsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProductConfigurationsDestroyResponse(rsp)
}

// JiraProductConfigurationsRetrieveWithResponse request returning *JiraProductConfigurationsRetrieveResponse
func (c *ClientWithResponses) JiraProductConfigurationsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsRetrieveResponse, error) {
	rsp, err := c.JiraProductConfigurationsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProductConfigurationsRetrieveResponse(rsp)
}

// JiraProductConfigurationsPartialUpdateWithBodyWithResponse request with arbitrary body returning *JiraProductConfigurationsPartialUpdateResponse
func (c *ClientWithResponses) JiraProductConfigurationsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsPartialUpdateResponse, error) {
	rsp, err := c.JiraProductConfigurationsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProductConfigurationsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) JiraProductConfigurationsPartialUpdateWithResponse(ctx context.Context, id int, body JiraProductConfigurationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsPartialUpdateResponse, error) {
	rsp, err := c.JiraProductConfigurationsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProductConfigurationsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) JiraProductConfigurationsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body JiraProductConfigurationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsPartialUpdateResponse, error) {
	rsp, err := c.JiraProductConfigurationsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProductConfigurationsPartialUpdateResponse(rsp)
}

// JiraProductConfigurationsUpdateWithBodyWithResponse request with arbitrary body returning *JiraProductConfigurationsUpdateResponse
func (c *ClientWithResponses) JiraProductConfigurationsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsUpdateResponse, error) {
	rsp, err := c.JiraProductConfigurationsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProductConfigurationsUpdateResponse(rsp)
}

func (c *ClientWithResponses) JiraProductConfigurationsUpdateWithResponse(ctx context.Context, id int, body JiraProductConfigurationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsUpdateResponse, error) {
	rsp, err := c.JiraProductConfigurationsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProductConfigurationsUpdateResponse(rsp)
}

func (c *ClientWithResponses) JiraProductConfigurationsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body JiraProductConfigurationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsUpdateResponse, error) {
	rsp, err := c.JiraProductConfigurationsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProductConfigurationsUpdateResponse(rsp)
}

// JiraProductConfigurationsDeletePreviewListWithResponse request returning *JiraProductConfigurationsDeletePreviewListResponse
func (c *ClientWithResponses) JiraProductConfigurationsDeletePreviewListWithResponse(ctx context.Context, id int, params *JiraProductConfigurationsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*JiraProductConfigurationsDeletePreviewListResponse, error) {
	rsp, err := c.JiraProductConfigurationsDeletePreviewList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProductConfigurationsDeletePreviewListResponse(rsp)
}

// JiraProjectsListWithResponse request returning *JiraProjectsListResponse
func (c *ClientWithResponses) JiraProjectsListWithResponse(ctx context.Context, params *JiraProjectsListParams, reqEditors ...RequestEditorFn) (*JiraProjectsListResponse, error) {
	rsp, err := c.JiraProjectsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProjectsListResponse(rsp)
}

// JiraProjectsCreateWithBodyWithResponse request with arbitrary body returning *JiraProjectsCreateResponse
func (c *ClientWithResponses) JiraProjectsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraProjectsCreateResponse, error) {
	rsp, err := c.JiraProjectsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProjectsCreateResponse(rsp)
}

func (c *ClientWithResponses) JiraProjectsCreateWithResponse(ctx context.Context, body JiraProjectsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraProjectsCreateResponse, error) {
	rsp, err := c.JiraProjectsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProjectsCreateResponse(rsp)
}

func (c *ClientWithResponses) JiraProjectsCreateWithFormdataBodyWithResponse(ctx context.Context, body JiraProjectsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraProjectsCreateResponse, error) {
	rsp, err := c.JiraProjectsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProjectsCreateResponse(rsp)
}

// JiraProjectsDestroyWithResponse request returning *JiraProjectsDestroyResponse
func (c *ClientWithResponses) JiraProjectsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*JiraProjectsDestroyResponse, error) {
	rsp, err := c.JiraProjectsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProjectsDestroyResponse(rsp)
}

// JiraProjectsRetrieveWithResponse request returning *JiraProjectsRetrieveResponse
func (c *ClientWithResponses) JiraProjectsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*JiraProjectsRetrieveResponse, error) {
	rsp, err := c.JiraProjectsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProjectsRetrieveResponse(rsp)
}

// JiraProjectsPartialUpdateWithBodyWithResponse request with arbitrary body returning *JiraProjectsPartialUpdateResponse
func (c *ClientWithResponses) JiraProjectsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraProjectsPartialUpdateResponse, error) {
	rsp, err := c.JiraProjectsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProjectsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) JiraProjectsPartialUpdateWithResponse(ctx context.Context, id int, body JiraProjectsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraProjectsPartialUpdateResponse, error) {
	rsp, err := c.JiraProjectsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProjectsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) JiraProjectsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body JiraProjectsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraProjectsPartialUpdateResponse, error) {
	rsp, err := c.JiraProjectsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProjectsPartialUpdateResponse(rsp)
}

// JiraProjectsUpdateWithBodyWithResponse request with arbitrary body returning *JiraProjectsUpdateResponse
func (c *ClientWithResponses) JiraProjectsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*JiraProjectsUpdateResponse, error) {
	rsp, err := c.JiraProjectsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProjectsUpdateResponse(rsp)
}

func (c *ClientWithResponses) JiraProjectsUpdateWithResponse(ctx context.Context, id int, body JiraProjectsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*JiraProjectsUpdateResponse, error) {
	rsp, err := c.JiraProjectsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProjectsUpdateResponse(rsp)
}

func (c *ClientWithResponses) JiraProjectsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body JiraProjectsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*JiraProjectsUpdateResponse, error) {
	rsp, err := c.JiraProjectsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProjectsUpdateResponse(rsp)
}

// JiraProjectsDeletePreviewListWithResponse request returning *JiraProjectsDeletePreviewListResponse
func (c *ClientWithResponses) JiraProjectsDeletePreviewListWithResponse(ctx context.Context, id int, params *JiraProjectsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*JiraProjectsDeletePreviewListResponse, error) {
	rsp, err := c.JiraProjectsDeletePreviewList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJiraProjectsDeletePreviewListResponse(rsp)
}

// LanguageTypesListWithResponse request returning *LanguageTypesListResponse
func (c *ClientWithResponses) LanguageTypesListWithResponse(ctx context.Context, params *LanguageTypesListParams, reqEditors ...RequestEditorFn) (*LanguageTypesListResponse, error) {
	rsp, err := c.LanguageTypesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguageTypesListResponse(rsp)
}

// LanguageTypesCreateWithBodyWithResponse request with arbitrary body returning *LanguageTypesCreateResponse
func (c *ClientWithResponses) LanguageTypesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LanguageTypesCreateResponse, error) {
	rsp, err := c.LanguageTypesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguageTypesCreateResponse(rsp)
}

func (c *ClientWithResponses) LanguageTypesCreateWithResponse(ctx context.Context, body LanguageTypesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*LanguageTypesCreateResponse, error) {
	rsp, err := c.LanguageTypesCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguageTypesCreateResponse(rsp)
}

func (c *ClientWithResponses) LanguageTypesCreateWithFormdataBodyWithResponse(ctx context.Context, body LanguageTypesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*LanguageTypesCreateResponse, error) {
	rsp, err := c.LanguageTypesCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguageTypesCreateResponse(rsp)
}

// LanguageTypesDestroyWithResponse request returning *LanguageTypesDestroyResponse
func (c *ClientWithResponses) LanguageTypesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*LanguageTypesDestroyResponse, error) {
	rsp, err := c.LanguageTypesDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguageTypesDestroyResponse(rsp)
}

// LanguageTypesRetrieveWithResponse request returning *LanguageTypesRetrieveResponse
func (c *ClientWithResponses) LanguageTypesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*LanguageTypesRetrieveResponse, error) {
	rsp, err := c.LanguageTypesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguageTypesRetrieveResponse(rsp)
}

// LanguageTypesPartialUpdateWithBodyWithResponse request with arbitrary body returning *LanguageTypesPartialUpdateResponse
func (c *ClientWithResponses) LanguageTypesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LanguageTypesPartialUpdateResponse, error) {
	rsp, err := c.LanguageTypesPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguageTypesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) LanguageTypesPartialUpdateWithResponse(ctx context.Context, id int, body LanguageTypesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*LanguageTypesPartialUpdateResponse, error) {
	rsp, err := c.LanguageTypesPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguageTypesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) LanguageTypesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body LanguageTypesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*LanguageTypesPartialUpdateResponse, error) {
	rsp, err := c.LanguageTypesPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguageTypesPartialUpdateResponse(rsp)
}

// LanguageTypesUpdateWithBodyWithResponse request with arbitrary body returning *LanguageTypesUpdateResponse
func (c *ClientWithResponses) LanguageTypesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LanguageTypesUpdateResponse, error) {
	rsp, err := c.LanguageTypesUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguageTypesUpdateResponse(rsp)
}

func (c *ClientWithResponses) LanguageTypesUpdateWithResponse(ctx context.Context, id int, body LanguageTypesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*LanguageTypesUpdateResponse, error) {
	rsp, err := c.LanguageTypesUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguageTypesUpdateResponse(rsp)
}

func (c *ClientWithResponses) LanguageTypesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body LanguageTypesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*LanguageTypesUpdateResponse, error) {
	rsp, err := c.LanguageTypesUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguageTypesUpdateResponse(rsp)
}

// LanguageTypesDeletePreviewListWithResponse request returning *LanguageTypesDeletePreviewListResponse
func (c *ClientWithResponses) LanguageTypesDeletePreviewListWithResponse(ctx context.Context, id int, params *LanguageTypesDeletePreviewListParams, reqEditors ...RequestEditorFn) (*LanguageTypesDeletePreviewListResponse, error) {
	rsp, err := c.LanguageTypesDeletePreviewList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguageTypesDeletePreviewListResponse(rsp)
}

// LanguagesListWithResponse request returning *LanguagesListResponse
func (c *ClientWithResponses) LanguagesListWithResponse(ctx context.Context, params *LanguagesListParams, reqEditors ...RequestEditorFn) (*LanguagesListResponse, error) {
	rsp, err := c.LanguagesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguagesListResponse(rsp)
}

// LanguagesCreateWithBodyWithResponse request with arbitrary body returning *LanguagesCreateResponse
func (c *ClientWithResponses) LanguagesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LanguagesCreateResponse, error) {
	rsp, err := c.LanguagesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguagesCreateResponse(rsp)
}

func (c *ClientWithResponses) LanguagesCreateWithResponse(ctx context.Context, body LanguagesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*LanguagesCreateResponse, error) {
	rsp, err := c.LanguagesCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguagesCreateResponse(rsp)
}

func (c *ClientWithResponses) LanguagesCreateWithFormdataBodyWithResponse(ctx context.Context, body LanguagesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*LanguagesCreateResponse, error) {
	rsp, err := c.LanguagesCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguagesCreateResponse(rsp)
}

// LanguagesDestroyWithResponse request returning *LanguagesDestroyResponse
func (c *ClientWithResponses) LanguagesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*LanguagesDestroyResponse, error) {
	rsp, err := c.LanguagesDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguagesDestroyResponse(rsp)
}

// LanguagesRetrieveWithResponse request returning *LanguagesRetrieveResponse
func (c *ClientWithResponses) LanguagesRetrieveWithResponse(ctx context.Context, id int, params *LanguagesRetrieveParams, reqEditors ...RequestEditorFn) (*LanguagesRetrieveResponse, error) {
	rsp, err := c.LanguagesRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguagesRetrieveResponse(rsp)
}

// LanguagesPartialUpdateWithBodyWithResponse request with arbitrary body returning *LanguagesPartialUpdateResponse
func (c *ClientWithResponses) LanguagesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LanguagesPartialUpdateResponse, error) {
	rsp, err := c.LanguagesPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguagesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) LanguagesPartialUpdateWithResponse(ctx context.Context, id int, body LanguagesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*LanguagesPartialUpdateResponse, error) {
	rsp, err := c.LanguagesPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguagesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) LanguagesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body LanguagesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*LanguagesPartialUpdateResponse, error) {
	rsp, err := c.LanguagesPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguagesPartialUpdateResponse(rsp)
}

// LanguagesUpdateWithBodyWithResponse request with arbitrary body returning *LanguagesUpdateResponse
func (c *ClientWithResponses) LanguagesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LanguagesUpdateResponse, error) {
	rsp, err := c.LanguagesUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguagesUpdateResponse(rsp)
}

func (c *ClientWithResponses) LanguagesUpdateWithResponse(ctx context.Context, id int, body LanguagesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*LanguagesUpdateResponse, error) {
	rsp, err := c.LanguagesUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguagesUpdateResponse(rsp)
}

func (c *ClientWithResponses) LanguagesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body LanguagesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*LanguagesUpdateResponse, error) {
	rsp, err := c.LanguagesUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguagesUpdateResponse(rsp)
}

// LanguagesDeletePreviewListWithResponse request returning *LanguagesDeletePreviewListResponse
func (c *ClientWithResponses) LanguagesDeletePreviewListWithResponse(ctx context.Context, id int, params *LanguagesDeletePreviewListParams, reqEditors ...RequestEditorFn) (*LanguagesDeletePreviewListResponse, error) {
	rsp, err := c.LanguagesDeletePreviewList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLanguagesDeletePreviewListResponse(rsp)
}

// MetadataListWithResponse request returning *MetadataListResponse
func (c *ClientWithResponses) MetadataListWithResponse(ctx context.Context, params *MetadataListParams, reqEditors ...RequestEditorFn) (*MetadataListResponse, error) {
	rsp, err := c.MetadataList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMetadataListResponse(rsp)
}

// MetadataCreateWithBodyWithResponse request with arbitrary body returning *MetadataCreateResponse
func (c *ClientWithResponses) MetadataCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MetadataCreateResponse, error) {
	rsp, err := c.MetadataCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMetadataCreateResponse(rsp)
}

func (c *ClientWithResponses) MetadataCreateWithResponse(ctx context.Context, body MetadataCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*MetadataCreateResponse, error) {
	rsp, err := c.MetadataCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMetadataCreateResponse(rsp)
}

func (c *ClientWithResponses) MetadataCreateWithFormdataBodyWithResponse(ctx context.Context, body MetadataCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*MetadataCreateResponse, error) {
	rsp, err := c.MetadataCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMetadataCreateResponse(rsp)
}

// MetadataDestroyWithResponse request returning *MetadataDestroyResponse
func (c *ClientWithResponses) MetadataDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*MetadataDestroyResponse, error) {
	rsp, err := c.MetadataDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMetadataDestroyResponse(rsp)
}

// MetadataRetrieveWithResponse request returning *MetadataRetrieveResponse
func (c *ClientWithResponses) MetadataRetrieveWithResponse(ctx context.Context, id int, params *MetadataRetrieveParams, reqEditors ...RequestEditorFn) (*MetadataRetrieveResponse, error) {
	rsp, err := c.MetadataRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMetadataRetrieveResponse(rsp)
}

// MetadataPartialUpdateWithBodyWithResponse request with arbitrary body returning *MetadataPartialUpdateResponse
func (c *ClientWithResponses) MetadataPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MetadataPartialUpdateResponse, error) {
	rsp, err := c.MetadataPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMetadataPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) MetadataPartialUpdateWithResponse(ctx context.Context, id int, body MetadataPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*MetadataPartialUpdateResponse, error) {
	rsp, err := c.MetadataPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMetadataPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) MetadataPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body MetadataPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*MetadataPartialUpdateResponse, error) {
	rsp, err := c.MetadataPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMetadataPartialUpdateResponse(rsp)
}

// MetadataUpdateWithBodyWithResponse request with arbitrary body returning *MetadataUpdateResponse
func (c *ClientWithResponses) MetadataUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MetadataUpdateResponse, error) {
	rsp, err := c.MetadataUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMetadataUpdateResponse(rsp)
}

func (c *ClientWithResponses) MetadataUpdateWithResponse(ctx context.Context, id int, body MetadataUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*MetadataUpdateResponse, error) {
	rsp, err := c.MetadataUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMetadataUpdateResponse(rsp)
}

func (c *ClientWithResponses) MetadataUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body MetadataUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*MetadataUpdateResponse, error) {
	rsp, err := c.MetadataUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMetadataUpdateResponse(rsp)
}

// MetadataDeletePreviewListWithResponse request returning *MetadataDeletePreviewListResponse
func (c *ClientWithResponses) MetadataDeletePreviewListWithResponse(ctx context.Context, id int, params *MetadataDeletePreviewListParams, reqEditors ...RequestEditorFn) (*MetadataDeletePreviewListResponse, error) {
	rsp, err := c.MetadataDeletePreviewList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMetadataDeletePreviewListResponse(rsp)
}

// NetworkLocationsListWithResponse request returning *NetworkLocationsListResponse
func (c *ClientWithResponses) NetworkLocationsListWithResponse(ctx context.Context, params *NetworkLocationsListParams, reqEditors ...RequestEditorFn) (*NetworkLocationsListResponse, error) {
	rsp, err := c.NetworkLocationsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkLocationsListResponse(rsp)
}

// NetworkLocationsCreateWithBodyWithResponse request with arbitrary body returning *NetworkLocationsCreateResponse
func (c *ClientWithResponses) NetworkLocationsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkLocationsCreateResponse, error) {
	rsp, err := c.NetworkLocationsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkLocationsCreateResponse(rsp)
}

func (c *ClientWithResponses) NetworkLocationsCreateWithResponse(ctx context.Context, body NetworkLocationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkLocationsCreateResponse, error) {
	rsp, err := c.NetworkLocationsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkLocationsCreateResponse(rsp)
}

func (c *ClientWithResponses) NetworkLocationsCreateWithFormdataBodyWithResponse(ctx context.Context, body NetworkLocationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*NetworkLocationsCreateResponse, error) {
	rsp, err := c.NetworkLocationsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkLocationsCreateResponse(rsp)
}

// NetworkLocationsDestroyWithResponse request returning *NetworkLocationsDestroyResponse
func (c *ClientWithResponses) NetworkLocationsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*NetworkLocationsDestroyResponse, error) {
	rsp, err := c.NetworkLocationsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkLocationsDestroyResponse(rsp)
}

// NetworkLocationsRetrieveWithResponse request returning *NetworkLocationsRetrieveResponse
func (c *ClientWithResponses) NetworkLocationsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*NetworkLocationsRetrieveResponse, error) {
	rsp, err := c.NetworkLocationsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkLocationsRetrieveResponse(rsp)
}

// NetworkLocationsPartialUpdateWithBodyWithResponse request with arbitrary body returning *NetworkLocationsPartialUpdateResponse
func (c *ClientWithResponses) NetworkLocationsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkLocationsPartialUpdateResponse, error) {
	rsp, err := c.NetworkLocationsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkLocationsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) NetworkLocationsPartialUpdateWithResponse(ctx context.Context, id int, body NetworkLocationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkLocationsPartialUpdateResponse, error) {
	rsp, err := c.NetworkLocationsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkLocationsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) NetworkLocationsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body NetworkLocationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*NetworkLocationsPartialUpdateResponse, error) {
	rsp, err := c.NetworkLocationsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkLocationsPartialUpdateResponse(rsp)
}

// NetworkLocationsUpdateWithBodyWithResponse request with arbitrary body returning *NetworkLocationsUpdateResponse
func (c *ClientWithResponses) NetworkLocationsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkLocationsUpdateResponse, error) {
	rsp, err := c.NetworkLocationsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkLocationsUpdateResponse(rsp)
}

func (c *ClientWithResponses) NetworkLocationsUpdateWithResponse(ctx context.Context, id int, body NetworkLocationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkLocationsUpdateResponse, error) {
	rsp, err := c.NetworkLocationsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkLocationsUpdateResponse(rsp)
}

func (c *ClientWithResponses) NetworkLocationsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body NetworkLocationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*NetworkLocationsUpdateResponse, error) {
	rsp, err := c.NetworkLocationsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkLocationsUpdateResponse(rsp)
}

// NetworkLocationsDeletePreviewListWithResponse request returning *NetworkLocationsDeletePreviewListResponse
func (c *ClientWithResponses) NetworkLocationsDeletePreviewListWithResponse(ctx context.Context, id int, params *NetworkLocationsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*NetworkLocationsDeletePreviewListResponse, error) {
	rsp, err := c.NetworkLocationsDeletePreviewList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkLocationsDeletePreviewListResponse(rsp)
}

// NoteTypeListWithResponse request returning *NoteTypeListResponse
func (c *ClientWithResponses) NoteTypeListWithResponse(ctx context.Context, params *NoteTypeListParams, reqEditors ...RequestEditorFn) (*NoteTypeListResponse, error) {
	rsp, err := c.NoteTypeList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNoteTypeListResponse(rsp)
}

// NoteTypeCreateWithBodyWithResponse request with arbitrary body returning *NoteTypeCreateResponse
func (c *ClientWithResponses) NoteTypeCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NoteTypeCreateResponse, error) {
	rsp, err := c.NoteTypeCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNoteTypeCreateResponse(rsp)
}

func (c *ClientWithResponses) NoteTypeCreateWithResponse(ctx context.Context, body NoteTypeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*NoteTypeCreateResponse, error) {
	rsp, err := c.NoteTypeCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNoteTypeCreateResponse(rsp)
}

func (c *ClientWithResponses) NoteTypeCreateWithFormdataBodyWithResponse(ctx context.Context, body NoteTypeCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*NoteTypeCreateResponse, error) {
	rsp, err := c.NoteTypeCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNoteTypeCreateResponse(rsp)
}

// NoteTypeDestroyWithResponse request returning *NoteTypeDestroyResponse
func (c *ClientWithResponses) NoteTypeDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*NoteTypeDestroyResponse, error) {
	rsp, err := c.NoteTypeDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNoteTypeDestroyResponse(rsp)
}

// NoteTypeRetrieveWithResponse request returning *NoteTypeRetrieveResponse
func (c *ClientWithResponses) NoteTypeRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*NoteTypeRetrieveResponse, error) {
	rsp, err := c.NoteTypeRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNoteTypeRetrieveResponse(rsp)
}

// NoteTypePartialUpdateWithBodyWithResponse request with arbitrary body returning *NoteTypePartialUpdateResponse
func (c *ClientWithResponses) NoteTypePartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NoteTypePartialUpdateResponse, error) {
	rsp, err := c.NoteTypePartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNoteTypePartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) NoteTypePartialUpdateWithResponse(ctx context.Context, id int, body NoteTypePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*NoteTypePartialUpdateResponse, error) {
	rsp, err := c.NoteTypePartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNoteTypePartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) NoteTypePartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body NoteTypePartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*NoteTypePartialUpdateResponse, error) {
	rsp, err := c.NoteTypePartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNoteTypePartialUpdateResponse(rsp)
}

// NoteTypeUpdateWithBodyWithResponse request with arbitrary body returning *NoteTypeUpdateResponse
func (c *ClientWithResponses) NoteTypeUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NoteTypeUpdateResponse, error) {
	rsp, err := c.NoteTypeUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNoteTypeUpdateResponse(rsp)
}

func (c *ClientWithResponses) NoteTypeUpdateWithResponse(ctx context.Context, id int, body NoteTypeUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*NoteTypeUpdateResponse, error) {
	rsp, err := c.NoteTypeUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNoteTypeUpdateResponse(rsp)
}

func (c *ClientWithResponses) NoteTypeUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body NoteTypeUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*NoteTypeUpdateResponse, error) {
	rsp, err := c.NoteTypeUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNoteTypeUpdateResponse(rsp)
}

// NoteTypeDeletePreviewListWithResponse request returning *NoteTypeDeletePreviewListResponse
func (c *ClientWithResponses) NoteTypeDeletePreviewListWithResponse(ctx context.Context, id int, params *NoteTypeDeletePreviewListParams, reqEditors ...RequestEditorFn) (*NoteTypeDeletePreviewListResponse, error) {
	rsp, err := c.NoteTypeDeletePreviewList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNoteTypeDeletePreviewListResponse(rsp)
}

// NotesListWithResponse request returning *NotesListResponse
func (c *ClientWithResponses) NotesListWithResponse(ctx context.Context, params *NotesListParams, reqEditors ...RequestEditorFn) (*NotesListResponse, error) {
	rsp, err := c.NotesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotesListResponse(rsp)
}

// NotesRetrieveWithResponse request returning *NotesRetrieveResponse
func (c *ClientWithResponses) NotesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*NotesRetrieveResponse, error) {
	rsp, err := c.NotesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotesRetrieveResponse(rsp)
}

// NotesPartialUpdateWithBodyWithResponse request with arbitrary body returning *NotesPartialUpdateResponse
func (c *ClientWithResponses) NotesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NotesPartialUpdateResponse, error) {
	rsp, err := c.NotesPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) NotesPartialUpdateWithResponse(ctx context.Context, id int, body NotesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*NotesPartialUpdateResponse, error) {
	rsp, err := c.NotesPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) NotesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body NotesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*NotesPartialUpdateResponse, error) {
	rsp, err := c.NotesPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotesPartialUpdateResponse(rsp)
}

// NotesUpdateWithBodyWithResponse request with arbitrary body returning *NotesUpdateResponse
func (c *ClientWithResponses) NotesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NotesUpdateResponse, error) {
	rsp, err := c.NotesUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotesUpdateResponse(rsp)
}

func (c *ClientWithResponses) NotesUpdateWithResponse(ctx context.Context, id int, body NotesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*NotesUpdateResponse, error) {
	rsp, err := c.NotesUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotesUpdateResponse(rsp)
}

func (c *ClientWithResponses) NotesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body NotesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*NotesUpdateResponse, error) {
	rsp, err := c.NotesUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotesUpdateResponse(rsp)
}

// NotificationsListWithResponse request returning *NotificationsListResponse
func (c *ClientWithResponses) NotificationsListWithResponse(ctx context.Context, params *NotificationsListParams, reqEditors ...RequestEditorFn) (*NotificationsListResponse, error) {
	rsp, err := c.NotificationsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotificationsListResponse(rsp)
}

// NotificationsCreateWithBodyWithResponse request with arbitrary body returning *NotificationsCreateResponse
func (c *ClientWithResponses) NotificationsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NotificationsCreateResponse, error) {
	rsp, err := c.NotificationsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotificationsCreateResponse(rsp)
}

func (c *ClientWithResponses) NotificationsCreateWithResponse(ctx context.Context, body NotificationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*NotificationsCreateResponse, error) {
	rsp, err := c.NotificationsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotificationsCreateResponse(rsp)
}

func (c *ClientWithResponses) NotificationsCreateWithFormdataBodyWithResponse(ctx context.Context, body NotificationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*NotificationsCreateResponse, error) {
	rsp, err := c.NotificationsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotificationsCreateResponse(rsp)
}

// NotificationsDestroyWithResponse request returning *NotificationsDestroyResponse
func (c *ClientWithResponses) NotificationsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*NotificationsDestroyResponse, error) {
	rsp, err := c.NotificationsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotificationsDestroyResponse(rsp)
}

// NotificationsRetrieveWithResponse request returning *NotificationsRetrieveResponse
func (c *ClientWithResponses) NotificationsRetrieveWithResponse(ctx context.Context, id int, params *NotificationsRetrieveParams, reqEditors ...RequestEditorFn) (*NotificationsRetrieveResponse, error) {
	rsp, err := c.NotificationsRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotificationsRetrieveResponse(rsp)
}

// NotificationsPartialUpdateWithBodyWithResponse request with arbitrary body returning *NotificationsPartialUpdateResponse
func (c *ClientWithResponses) NotificationsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NotificationsPartialUpdateResponse, error) {
	rsp, err := c.NotificationsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotificationsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) NotificationsPartialUpdateWithResponse(ctx context.Context, id int, body NotificationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*NotificationsPartialUpdateResponse, error) {
	rsp, err := c.NotificationsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotificationsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) NotificationsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body NotificationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*NotificationsPartialUpdateResponse, error) {
	rsp, err := c.NotificationsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotificationsPartialUpdateResponse(rsp)
}

// NotificationsUpdateWithBodyWithResponse request with arbitrary body returning *NotificationsUpdateResponse
func (c *ClientWithResponses) NotificationsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NotificationsUpdateResponse, error) {
	rsp, err := c.NotificationsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotificationsUpdateResponse(rsp)
}

func (c *ClientWithResponses) NotificationsUpdateWithResponse(ctx context.Context, id int, body NotificationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*NotificationsUpdateResponse, error) {
	rsp, err := c.NotificationsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotificationsUpdateResponse(rsp)
}

func (c *ClientWithResponses) NotificationsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body NotificationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*NotificationsUpdateResponse, error) {
	rsp, err := c.NotificationsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotificationsUpdateResponse(rsp)
}

// NotificationsDeletePreviewListWithResponse request returning *NotificationsDeletePreviewListResponse
func (c *ClientWithResponses) NotificationsDeletePreviewListWithResponse(ctx context.Context, id int, params *NotificationsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*NotificationsDeletePreviewListResponse, error) {
	rsp, err := c.NotificationsDeletePreviewList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotificationsDeletePreviewListResponse(rsp)
}

// Oa3SchemaRetrieveWithResponse request returning *Oa3SchemaRetrieveResponse
func (c *ClientWithResponses) Oa3SchemaRetrieveWithResponse(ctx context.Context, params *Oa3SchemaRetrieveParams, reqEditors ...RequestEditorFn) (*Oa3SchemaRetrieveResponse, error) {
	rsp, err := c.Oa3SchemaRetrieve(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOa3SchemaRetrieveResponse(rsp)
}

// ProductApiScanConfigurationsListWithResponse request returning *ProductApiScanConfigurationsListResponse
func (c *ClientWithResponses) ProductApiScanConfigurationsListWithResponse(ctx context.Context, params *ProductApiScanConfigurationsListParams, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsListResponse, error) {
	rsp, err := c.ProductApiScanConfigurationsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductApiScanConfigurationsListResponse(rsp)
}

// ProductApiScanConfigurationsCreateWithBodyWithResponse request with arbitrary body returning *ProductApiScanConfigurationsCreateResponse
func (c *ClientWithResponses) ProductApiScanConfigurationsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsCreateResponse, error) {
	rsp, err := c.ProductApiScanConfigurationsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductApiScanConfigurationsCreateResponse(rsp)
}

func (c *ClientWithResponses) ProductApiScanConfigurationsCreateWithResponse(ctx context.Context, body ProductApiScanConfigurationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsCreateResponse, error) {
	rsp, err := c.ProductApiScanConfigurationsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductApiScanConfigurationsCreateResponse(rsp)
}

func (c *ClientWithResponses) ProductApiScanConfigurationsCreateWithFormdataBodyWithResponse(ctx context.Context, body ProductApiScanConfigurationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsCreateResponse, error) {
	rsp, err := c.ProductApiScanConfigurationsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductApiScanConfigurationsCreateResponse(rsp)
}

// ProductApiScanConfigurationsDestroyWithResponse request returning *ProductApiScanConfigurationsDestroyResponse
func (c *ClientWithResponses) ProductApiScanConfigurationsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsDestroyResponse, error) {
	rsp, err := c.ProductApiScanConfigurationsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductApiScanConfigurationsDestroyResponse(rsp)
}

// ProductApiScanConfigurationsRetrieveWithResponse request returning *ProductApiScanConfigurationsRetrieveResponse
func (c *ClientWithResponses) ProductApiScanConfigurationsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsRetrieveResponse, error) {
	rsp, err := c.ProductApiScanConfigurationsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductApiScanConfigurationsRetrieveResponse(rsp)
}

// ProductApiScanConfigurationsPartialUpdateWithBodyWithResponse request with arbitrary body returning *ProductApiScanConfigurationsPartialUpdateResponse
func (c *ClientWithResponses) ProductApiScanConfigurationsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsPartialUpdateResponse, error) {
	rsp, err := c.ProductApiScanConfigurationsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductApiScanConfigurationsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) ProductApiScanConfigurationsPartialUpdateWithResponse(ctx context.Context, id int, body ProductApiScanConfigurationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsPartialUpdateResponse, error) {
	rsp, err := c.ProductApiScanConfigurationsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductApiScanConfigurationsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) ProductApiScanConfigurationsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductApiScanConfigurationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsPartialUpdateResponse, error) {
	rsp, err := c.ProductApiScanConfigurationsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductApiScanConfigurationsPartialUpdateResponse(rsp)
}

// ProductApiScanConfigurationsUpdateWithBodyWithResponse request with arbitrary body returning *ProductApiScanConfigurationsUpdateResponse
func (c *ClientWithResponses) ProductApiScanConfigurationsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsUpdateResponse, error) {
	rsp, err := c.ProductApiScanConfigurationsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductApiScanConfigurationsUpdateResponse(rsp)
}

func (c *ClientWithResponses) ProductApiScanConfigurationsUpdateWithResponse(ctx context.Context, id int, body ProductApiScanConfigurationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsUpdateResponse, error) {
	rsp, err := c.ProductApiScanConfigurationsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductApiScanConfigurationsUpdateResponse(rsp)
}

func (c *ClientWithResponses) ProductApiScanConfigurationsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductApiScanConfigurationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsUpdateResponse, error) {
	rsp, err := c.ProductApiScanConfigurationsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductApiScanConfigurationsUpdateResponse(rsp)
}

// ProductApiScanConfigurationsDeletePreviewListWithResponse request returning *ProductApiScanConfigurationsDeletePreviewListResponse
func (c *ClientWithResponses) ProductApiScanConfigurationsDeletePreviewListWithResponse(ctx context.Context, id int, params *ProductApiScanConfigurationsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*ProductApiScanConfigurationsDeletePreviewListResponse, error) {
	rsp, err := c.ProductApiScanConfigurationsDeletePreviewList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductApiScanConfigurationsDeletePreviewListResponse(rsp)
}

// ProductGroupsListWithResponse request returning *ProductGroupsListResponse
func (c *ClientWithResponses) ProductGroupsListWithResponse(ctx context.Context, params *ProductGroupsListParams, reqEditors ...RequestEditorFn) (*ProductGroupsListResponse, error) {
	rsp, err := c.ProductGroupsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductGroupsListResponse(rsp)
}

// ProductGroupsCreateWithBodyWithResponse request with arbitrary body returning *ProductGroupsCreateResponse
func (c *ClientWithResponses) ProductGroupsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductGroupsCreateResponse, error) {
	rsp, err := c.ProductGroupsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductGroupsCreateResponse(rsp)
}

func (c *ClientWithResponses) ProductGroupsCreateWithResponse(ctx context.Context, body ProductGroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductGroupsCreateResponse, error) {
	rsp, err := c.ProductGroupsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductGroupsCreateResponse(rsp)
}

func (c *ClientWithResponses) ProductGroupsCreateWithFormdataBodyWithResponse(ctx context.Context, body ProductGroupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductGroupsCreateResponse, error) {
	rsp, err := c.ProductGroupsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductGroupsCreateResponse(rsp)
}

// ProductGroupsDestroyWithResponse request returning *ProductGroupsDestroyResponse
func (c *ClientWithResponses) ProductGroupsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductGroupsDestroyResponse, error) {
	rsp, err := c.ProductGroupsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductGroupsDestroyResponse(rsp)
}

// ProductGroupsRetrieveWithResponse request returning *ProductGroupsRetrieveResponse
func (c *ClientWithResponses) ProductGroupsRetrieveWithResponse(ctx context.Context, id int, params *ProductGroupsRetrieveParams, reqEditors ...RequestEditorFn) (*ProductGroupsRetrieveResponse, error) {
	rsp, err := c.ProductGroupsRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductGroupsRetrieveResponse(rsp)
}

// ProductGroupsPartialUpdateWithResponse request returning *ProductGroupsPartialUpdateResponse
func (c *ClientWithResponses) ProductGroupsPartialUpdateWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductGroupsPartialUpdateResponse, error) {
	rsp, err := c.ProductGroupsPartialUpdate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductGroupsPartialUpdateResponse(rsp)
}

// ProductGroupsUpdateWithBodyWithResponse request with arbitrary body returning *ProductGroupsUpdateResponse
func (c *ClientWithResponses) ProductGroupsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductGroupsUpdateResponse, error) {
	rsp, err := c.ProductGroupsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductGroupsUpdateResponse(rsp)
}

func (c *ClientWithResponses) ProductGroupsUpdateWithResponse(ctx context.Context, id int, body ProductGroupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductGroupsUpdateResponse, error) {
	rsp, err := c.ProductGroupsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductGroupsUpdateResponse(rsp)
}

func (c *ClientWithResponses) ProductGroupsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductGroupsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductGroupsUpdateResponse, error) {
	rsp, err := c.ProductGroupsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductGroupsUpdateResponse(rsp)
}

// ProductGroupsDeletePreviewListWithResponse request returning *ProductGroupsDeletePreviewListResponse
func (c *ClientWithResponses) ProductGroupsDeletePreviewListWithResponse(ctx context.Context, id int, params *ProductGroupsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*ProductGroupsDeletePreviewListResponse, error) {
	rsp, err := c.ProductGroupsDeletePreviewList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductGroupsDeletePreviewListResponse(rsp)
}

// ProductMembersListWithResponse request returning *ProductMembersListResponse
func (c *ClientWithResponses) ProductMembersListWithResponse(ctx context.Context, params *ProductMembersListParams, reqEditors ...RequestEditorFn) (*ProductMembersListResponse, error) {
	rsp, err := c.ProductMembersList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductMembersListResponse(rsp)
}

// ProductMembersCreateWithBodyWithResponse request with arbitrary body returning *ProductMembersCreateResponse
func (c *ClientWithResponses) ProductMembersCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductMembersCreateResponse, error) {
	rsp, err := c.ProductMembersCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductMembersCreateResponse(rsp)
}

func (c *ClientWithResponses) ProductMembersCreateWithResponse(ctx context.Context, body ProductMembersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductMembersCreateResponse, error) {
	rsp, err := c.ProductMembersCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductMembersCreateResponse(rsp)
}

func (c *ClientWithResponses) ProductMembersCreateWithFormdataBodyWithResponse(ctx context.Context, body ProductMembersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductMembersCreateResponse, error) {
	rsp, err := c.ProductMembersCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductMembersCreateResponse(rsp)
}

// ProductMembersDestroyWithResponse request returning *ProductMembersDestroyResponse
func (c *ClientWithResponses) ProductMembersDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductMembersDestroyResponse, error) {
	rsp, err := c.ProductMembersDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductMembersDestroyResponse(rsp)
}

// ProductMembersRetrieveWithResponse request returning *ProductMembersRetrieveResponse
func (c *ClientWithResponses) ProductMembersRetrieveWithResponse(ctx context.Context, id int, params *ProductMembersRetrieveParams, reqEditors ...RequestEditorFn) (*ProductMembersRetrieveResponse, error) {
	rsp, err := c.ProductMembersRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductMembersRetrieveResponse(rsp)
}

// ProductMembersPartialUpdateWithResponse request returning *ProductMembersPartialUpdateResponse
func (c *ClientWithResponses) ProductMembersPartialUpdateWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductMembersPartialUpdateResponse, error) {
	rsp, err := c.ProductMembersPartialUpdate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductMembersPartialUpdateResponse(rsp)
}

// ProductMembersUpdateWithBodyWithResponse request with arbitrary body returning *ProductMembersUpdateResponse
func (c *ClientWithResponses) ProductMembersUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductMembersUpdateResponse, error) {
	rsp, err := c.ProductMembersUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductMembersUpdateResponse(rsp)
}

func (c *ClientWithResponses) ProductMembersUpdateWithResponse(ctx context.Context, id int, body ProductMembersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductMembersUpdateResponse, error) {
	rsp, err := c.ProductMembersUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductMembersUpdateResponse(rsp)
}

func (c *ClientWithResponses) ProductMembersUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductMembersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductMembersUpdateResponse, error) {
	rsp, err := c.ProductMembersUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductMembersUpdateResponse(rsp)
}

// ProductMembersDeletePreviewListWithResponse request returning *ProductMembersDeletePreviewListResponse
func (c *ClientWithResponses) ProductMembersDeletePreviewListWithResponse(ctx context.Context, id int, params *ProductMembersDeletePreviewListParams, reqEditors ...RequestEditorFn) (*ProductMembersDeletePreviewListResponse, error) {
	rsp, err := c.ProductMembersDeletePreviewList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductMembersDeletePreviewListResponse(rsp)
}

// ProductTypeGroupsListWithResponse request returning *ProductTypeGroupsListResponse
func (c *ClientWithResponses) ProductTypeGroupsListWithResponse(ctx context.Context, params *ProductTypeGroupsListParams, reqEditors ...RequestEditorFn) (*ProductTypeGroupsListResponse, error) {
	rsp, err := c.ProductTypeGroupsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypeGroupsListResponse(rsp)
}

// ProductTypeGroupsCreateWithBodyWithResponse request with arbitrary body returning *ProductTypeGroupsCreateResponse
func (c *ClientWithResponses) ProductTypeGroupsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductTypeGroupsCreateResponse, error) {
	rsp, err := c.ProductTypeGroupsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypeGroupsCreateResponse(rsp)
}

func (c *ClientWithResponses) ProductTypeGroupsCreateWithResponse(ctx context.Context, body ProductTypeGroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductTypeGroupsCreateResponse, error) {
	rsp, err := c.ProductTypeGroupsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypeGroupsCreateResponse(rsp)
}

func (c *ClientWithResponses) ProductTypeGroupsCreateWithFormdataBodyWithResponse(ctx context.Context, body ProductTypeGroupsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductTypeGroupsCreateResponse, error) {
	rsp, err := c.ProductTypeGroupsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypeGroupsCreateResponse(rsp)
}

// ProductTypeGroupsDestroyWithResponse request returning *ProductTypeGroupsDestroyResponse
func (c *ClientWithResponses) ProductTypeGroupsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductTypeGroupsDestroyResponse, error) {
	rsp, err := c.ProductTypeGroupsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypeGroupsDestroyResponse(rsp)
}

// ProductTypeGroupsRetrieveWithResponse request returning *ProductTypeGroupsRetrieveResponse
func (c *ClientWithResponses) ProductTypeGroupsRetrieveWithResponse(ctx context.Context, id int, params *ProductTypeGroupsRetrieveParams, reqEditors ...RequestEditorFn) (*ProductTypeGroupsRetrieveResponse, error) {
	rsp, err := c.ProductTypeGroupsRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypeGroupsRetrieveResponse(rsp)
}

// ProductTypeGroupsPartialUpdateWithResponse request returning *ProductTypeGroupsPartialUpdateResponse
func (c *ClientWithResponses) ProductTypeGroupsPartialUpdateWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductTypeGroupsPartialUpdateResponse, error) {
	rsp, err := c.ProductTypeGroupsPartialUpdate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypeGroupsPartialUpdateResponse(rsp)
}

// ProductTypeGroupsUpdateWithBodyWithResponse request with arbitrary body returning *ProductTypeGroupsUpdateResponse
func (c *ClientWithResponses) ProductTypeGroupsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductTypeGroupsUpdateResponse, error) {
	rsp, err := c.ProductTypeGroupsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypeGroupsUpdateResponse(rsp)
}

func (c *ClientWithResponses) ProductTypeGroupsUpdateWithResponse(ctx context.Context, id int, body ProductTypeGroupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductTypeGroupsUpdateResponse, error) {
	rsp, err := c.ProductTypeGroupsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypeGroupsUpdateResponse(rsp)
}

func (c *ClientWithResponses) ProductTypeGroupsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductTypeGroupsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductTypeGroupsUpdateResponse, error) {
	rsp, err := c.ProductTypeGroupsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypeGroupsUpdateResponse(rsp)
}

// ProductTypeGroupsDeletePreviewListWithResponse request returning *ProductTypeGroupsDeletePreviewListResponse
func (c *ClientWithResponses) ProductTypeGroupsDeletePreviewListWithResponse(ctx context.Context, id int, params *ProductTypeGroupsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*ProductTypeGroupsDeletePreviewListResponse, error) {
	rsp, err := c.ProductTypeGroupsDeletePreviewList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypeGroupsDeletePreviewListResponse(rsp)
}

// ProductTypeMembersListWithResponse request returning *ProductTypeMembersListResponse
func (c *ClientWithResponses) ProductTypeMembersListWithResponse(ctx context.Context, params *ProductTypeMembersListParams, reqEditors ...RequestEditorFn) (*ProductTypeMembersListResponse, error) {
	rsp, err := c.ProductTypeMembersList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypeMembersListResponse(rsp)
}

// ProductTypeMembersCreateWithBodyWithResponse request with arbitrary body returning *ProductTypeMembersCreateResponse
func (c *ClientWithResponses) ProductTypeMembersCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductTypeMembersCreateResponse, error) {
	rsp, err := c.ProductTypeMembersCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypeMembersCreateResponse(rsp)
}

func (c *ClientWithResponses) ProductTypeMembersCreateWithResponse(ctx context.Context, body ProductTypeMembersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductTypeMembersCreateResponse, error) {
	rsp, err := c.ProductTypeMembersCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypeMembersCreateResponse(rsp)
}

func (c *ClientWithResponses) ProductTypeMembersCreateWithFormdataBodyWithResponse(ctx context.Context, body ProductTypeMembersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductTypeMembersCreateResponse, error) {
	rsp, err := c.ProductTypeMembersCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypeMembersCreateResponse(rsp)
}

// ProductTypeMembersDestroyWithResponse request returning *ProductTypeMembersDestroyResponse
func (c *ClientWithResponses) ProductTypeMembersDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductTypeMembersDestroyResponse, error) {
	rsp, err := c.ProductTypeMembersDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypeMembersDestroyResponse(rsp)
}

// ProductTypeMembersRetrieveWithResponse request returning *ProductTypeMembersRetrieveResponse
func (c *ClientWithResponses) ProductTypeMembersRetrieveWithResponse(ctx context.Context, id int, params *ProductTypeMembersRetrieveParams, reqEditors ...RequestEditorFn) (*ProductTypeMembersRetrieveResponse, error) {
	rsp, err := c.ProductTypeMembersRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypeMembersRetrieveResponse(rsp)
}

// ProductTypeMembersPartialUpdateWithResponse request returning *ProductTypeMembersPartialUpdateResponse
func (c *ClientWithResponses) ProductTypeMembersPartialUpdateWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductTypeMembersPartialUpdateResponse, error) {
	rsp, err := c.ProductTypeMembersPartialUpdate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypeMembersPartialUpdateResponse(rsp)
}

// ProductTypeMembersUpdateWithBodyWithResponse request with arbitrary body returning *ProductTypeMembersUpdateResponse
func (c *ClientWithResponses) ProductTypeMembersUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductTypeMembersUpdateResponse, error) {
	rsp, err := c.ProductTypeMembersUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypeMembersUpdateResponse(rsp)
}

func (c *ClientWithResponses) ProductTypeMembersUpdateWithResponse(ctx context.Context, id int, body ProductTypeMembersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductTypeMembersUpdateResponse, error) {
	rsp, err := c.ProductTypeMembersUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypeMembersUpdateResponse(rsp)
}

func (c *ClientWithResponses) ProductTypeMembersUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductTypeMembersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductTypeMembersUpdateResponse, error) {
	rsp, err := c.ProductTypeMembersUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypeMembersUpdateResponse(rsp)
}

// ProductTypeMembersDeletePreviewListWithResponse request returning *ProductTypeMembersDeletePreviewListResponse
func (c *ClientWithResponses) ProductTypeMembersDeletePreviewListWithResponse(ctx context.Context, id int, params *ProductTypeMembersDeletePreviewListParams, reqEditors ...RequestEditorFn) (*ProductTypeMembersDeletePreviewListResponse, error) {
	rsp, err := c.ProductTypeMembersDeletePreviewList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypeMembersDeletePreviewListResponse(rsp)
}

// ProductTypesListWithResponse request returning *ProductTypesListResponse
func (c *ClientWithResponses) ProductTypesListWithResponse(ctx context.Context, params *ProductTypesListParams, reqEditors ...RequestEditorFn) (*ProductTypesListResponse, error) {
	rsp, err := c.ProductTypesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypesListResponse(rsp)
}

// ProductTypesCreateWithBodyWithResponse request with arbitrary body returning *ProductTypesCreateResponse
func (c *ClientWithResponses) ProductTypesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductTypesCreateResponse, error) {
	rsp, err := c.ProductTypesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypesCreateResponse(rsp)
}

func (c *ClientWithResponses) ProductTypesCreateWithResponse(ctx context.Context, body ProductTypesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductTypesCreateResponse, error) {
	rsp, err := c.ProductTypesCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypesCreateResponse(rsp)
}

func (c *ClientWithResponses) ProductTypesCreateWithFormdataBodyWithResponse(ctx context.Context, body ProductTypesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductTypesCreateResponse, error) {
	rsp, err := c.ProductTypesCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypesCreateResponse(rsp)
}

// ProductTypesDestroyWithResponse request returning *ProductTypesDestroyResponse
func (c *ClientWithResponses) ProductTypesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductTypesDestroyResponse, error) {
	rsp, err := c.ProductTypesDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypesDestroyResponse(rsp)
}

// ProductTypesRetrieveWithResponse request returning *ProductTypesRetrieveResponse
func (c *ClientWithResponses) ProductTypesRetrieveWithResponse(ctx context.Context, id int, params *ProductTypesRetrieveParams, reqEditors ...RequestEditorFn) (*ProductTypesRetrieveResponse, error) {
	rsp, err := c.ProductTypesRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypesRetrieveResponse(rsp)
}

// ProductTypesPartialUpdateWithBodyWithResponse request with arbitrary body returning *ProductTypesPartialUpdateResponse
func (c *ClientWithResponses) ProductTypesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductTypesPartialUpdateResponse, error) {
	rsp, err := c.ProductTypesPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) ProductTypesPartialUpdateWithResponse(ctx context.Context, id int, body ProductTypesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductTypesPartialUpdateResponse, error) {
	rsp, err := c.ProductTypesPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) ProductTypesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductTypesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductTypesPartialUpdateResponse, error) {
	rsp, err := c.ProductTypesPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypesPartialUpdateResponse(rsp)
}

// ProductTypesUpdateWithBodyWithResponse request with arbitrary body returning *ProductTypesUpdateResponse
func (c *ClientWithResponses) ProductTypesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductTypesUpdateResponse, error) {
	rsp, err := c.ProductTypesUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypesUpdateResponse(rsp)
}

func (c *ClientWithResponses) ProductTypesUpdateWithResponse(ctx context.Context, id int, body ProductTypesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductTypesUpdateResponse, error) {
	rsp, err := c.ProductTypesUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypesUpdateResponse(rsp)
}

func (c *ClientWithResponses) ProductTypesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductTypesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductTypesUpdateResponse, error) {
	rsp, err := c.ProductTypesUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypesUpdateResponse(rsp)
}

// ProductTypesDeletePreviewListWithResponse request returning *ProductTypesDeletePreviewListResponse
func (c *ClientWithResponses) ProductTypesDeletePreviewListWithResponse(ctx context.Context, id int, params *ProductTypesDeletePreviewListParams, reqEditors ...RequestEditorFn) (*ProductTypesDeletePreviewListResponse, error) {
	rsp, err := c.ProductTypesDeletePreviewList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypesDeletePreviewListResponse(rsp)
}

// ProductTypesGenerateReportCreateWithBodyWithResponse request with arbitrary body returning *ProductTypesGenerateReportCreateResponse
func (c *ClientWithResponses) ProductTypesGenerateReportCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductTypesGenerateReportCreateResponse, error) {
	rsp, err := c.ProductTypesGenerateReportCreateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypesGenerateReportCreateResponse(rsp)
}

func (c *ClientWithResponses) ProductTypesGenerateReportCreateWithResponse(ctx context.Context, id int, body ProductTypesGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductTypesGenerateReportCreateResponse, error) {
	rsp, err := c.ProductTypesGenerateReportCreate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypesGenerateReportCreateResponse(rsp)
}

func (c *ClientWithResponses) ProductTypesGenerateReportCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductTypesGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductTypesGenerateReportCreateResponse, error) {
	rsp, err := c.ProductTypesGenerateReportCreateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductTypesGenerateReportCreateResponse(rsp)
}

// ProductsListWithResponse request returning *ProductsListResponse
func (c *ClientWithResponses) ProductsListWithResponse(ctx context.Context, params *ProductsListParams, reqEditors ...RequestEditorFn) (*ProductsListResponse, error) {
	rsp, err := c.ProductsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductsListResponse(rsp)
}

// ProductsCreateWithBodyWithResponse request with arbitrary body returning *ProductsCreateResponse
func (c *ClientWithResponses) ProductsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductsCreateResponse, error) {
	rsp, err := c.ProductsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductsCreateResponse(rsp)
}

func (c *ClientWithResponses) ProductsCreateWithResponse(ctx context.Context, body ProductsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductsCreateResponse, error) {
	rsp, err := c.ProductsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductsCreateResponse(rsp)
}

func (c *ClientWithResponses) ProductsCreateWithFormdataBodyWithResponse(ctx context.Context, body ProductsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductsCreateResponse, error) {
	rsp, err := c.ProductsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductsCreateResponse(rsp)
}

// ProductsDestroyWithResponse request returning *ProductsDestroyResponse
func (c *ClientWithResponses) ProductsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ProductsDestroyResponse, error) {
	rsp, err := c.ProductsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductsDestroyResponse(rsp)
}

// ProductsRetrieveWithResponse request returning *ProductsRetrieveResponse
func (c *ClientWithResponses) ProductsRetrieveWithResponse(ctx context.Context, id int, params *ProductsRetrieveParams, reqEditors ...RequestEditorFn) (*ProductsRetrieveResponse, error) {
	rsp, err := c.ProductsRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductsRetrieveResponse(rsp)
}

// ProductsPartialUpdateWithBodyWithResponse request with arbitrary body returning *ProductsPartialUpdateResponse
func (c *ClientWithResponses) ProductsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductsPartialUpdateResponse, error) {
	rsp, err := c.ProductsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) ProductsPartialUpdateWithResponse(ctx context.Context, id int, body ProductsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductsPartialUpdateResponse, error) {
	rsp, err := c.ProductsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) ProductsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductsPartialUpdateResponse, error) {
	rsp, err := c.ProductsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductsPartialUpdateResponse(rsp)
}

// ProductsUpdateWithBodyWithResponse request with arbitrary body returning *ProductsUpdateResponse
func (c *ClientWithResponses) ProductsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductsUpdateResponse, error) {
	rsp, err := c.ProductsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductsUpdateResponse(rsp)
}

func (c *ClientWithResponses) ProductsUpdateWithResponse(ctx context.Context, id int, body ProductsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductsUpdateResponse, error) {
	rsp, err := c.ProductsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductsUpdateResponse(rsp)
}

func (c *ClientWithResponses) ProductsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductsUpdateResponse, error) {
	rsp, err := c.ProductsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductsUpdateResponse(rsp)
}

// ProductsDeletePreviewListWithResponse request returning *ProductsDeletePreviewListResponse
func (c *ClientWithResponses) ProductsDeletePreviewListWithResponse(ctx context.Context, id int, params *ProductsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*ProductsDeletePreviewListResponse, error) {
	rsp, err := c.ProductsDeletePreviewList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductsDeletePreviewListResponse(rsp)
}

// ProductsGenerateReportCreateWithBodyWithResponse request with arbitrary body returning *ProductsGenerateReportCreateResponse
func (c *ClientWithResponses) ProductsGenerateReportCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductsGenerateReportCreateResponse, error) {
	rsp, err := c.ProductsGenerateReportCreateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductsGenerateReportCreateResponse(rsp)
}

func (c *ClientWithResponses) ProductsGenerateReportCreateWithResponse(ctx context.Context, id int, body ProductsGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductsGenerateReportCreateResponse, error) {
	rsp, err := c.ProductsGenerateReportCreate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductsGenerateReportCreateResponse(rsp)
}

func (c *ClientWithResponses) ProductsGenerateReportCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body ProductsGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ProductsGenerateReportCreateResponse, error) {
	rsp, err := c.ProductsGenerateReportCreateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductsGenerateReportCreateResponse(rsp)
}

// QuestionnaireAnsweredQuestionnairesListWithResponse request returning *QuestionnaireAnsweredQuestionnairesListResponse
func (c *ClientWithResponses) QuestionnaireAnsweredQuestionnairesListWithResponse(ctx context.Context, params *QuestionnaireAnsweredQuestionnairesListParams, reqEditors ...RequestEditorFn) (*QuestionnaireAnsweredQuestionnairesListResponse, error) {
	rsp, err := c.QuestionnaireAnsweredQuestionnairesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuestionnaireAnsweredQuestionnairesListResponse(rsp)
}

// QuestionnaireAnsweredQuestionnairesRetrieveWithResponse request returning *QuestionnaireAnsweredQuestionnairesRetrieveResponse
func (c *ClientWithResponses) QuestionnaireAnsweredQuestionnairesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*QuestionnaireAnsweredQuestionnairesRetrieveResponse, error) {
	rsp, err := c.QuestionnaireAnsweredQuestionnairesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuestionnaireAnsweredQuestionnairesRetrieveResponse(rsp)
}

// QuestionnaireAnswersListWithResponse request returning *QuestionnaireAnswersListResponse
func (c *ClientWithResponses) QuestionnaireAnswersListWithResponse(ctx context.Context, params *QuestionnaireAnswersListParams, reqEditors ...RequestEditorFn) (*QuestionnaireAnswersListResponse, error) {
	rsp, err := c.QuestionnaireAnswersList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuestionnaireAnswersListResponse(rsp)
}

// QuestionnaireAnswersRetrieveWithResponse request returning *QuestionnaireAnswersRetrieveResponse
func (c *ClientWithResponses) QuestionnaireAnswersRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*QuestionnaireAnswersRetrieveResponse, error) {
	rsp, err := c.QuestionnaireAnswersRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuestionnaireAnswersRetrieveResponse(rsp)
}

// QuestionnaireEngagementQuestionnairesListWithResponse request returning *QuestionnaireEngagementQuestionnairesListResponse
func (c *ClientWithResponses) QuestionnaireEngagementQuestionnairesListWithResponse(ctx context.Context, params *QuestionnaireEngagementQuestionnairesListParams, reqEditors ...RequestEditorFn) (*QuestionnaireEngagementQuestionnairesListResponse, error) {
	rsp, err := c.QuestionnaireEngagementQuestionnairesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuestionnaireEngagementQuestionnairesListResponse(rsp)
}

// QuestionnaireEngagementQuestionnairesRetrieveWithResponse request returning *QuestionnaireEngagementQuestionnairesRetrieveResponse
func (c *ClientWithResponses) QuestionnaireEngagementQuestionnairesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*QuestionnaireEngagementQuestionnairesRetrieveResponse, error) {
	rsp, err := c.QuestionnaireEngagementQuestionnairesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuestionnaireEngagementQuestionnairesRetrieveResponse(rsp)
}

// QuestionnaireGeneralQuestionnairesListWithResponse request returning *QuestionnaireGeneralQuestionnairesListResponse
func (c *ClientWithResponses) QuestionnaireGeneralQuestionnairesListWithResponse(ctx context.Context, params *QuestionnaireGeneralQuestionnairesListParams, reqEditors ...RequestEditorFn) (*QuestionnaireGeneralQuestionnairesListResponse, error) {
	rsp, err := c.QuestionnaireGeneralQuestionnairesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuestionnaireGeneralQuestionnairesListResponse(rsp)
}

// QuestionnaireGeneralQuestionnairesRetrieveWithResponse request returning *QuestionnaireGeneralQuestionnairesRetrieveResponse
func (c *ClientWithResponses) QuestionnaireGeneralQuestionnairesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*QuestionnaireGeneralQuestionnairesRetrieveResponse, error) {
	rsp, err := c.QuestionnaireGeneralQuestionnairesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuestionnaireGeneralQuestionnairesRetrieveResponse(rsp)
}

// QuestionnaireQuestionsListWithResponse request returning *QuestionnaireQuestionsListResponse
func (c *ClientWithResponses) QuestionnaireQuestionsListWithResponse(ctx context.Context, params *QuestionnaireQuestionsListParams, reqEditors ...RequestEditorFn) (*QuestionnaireQuestionsListResponse, error) {
	rsp, err := c.QuestionnaireQuestionsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuestionnaireQuestionsListResponse(rsp)
}

// QuestionnaireQuestionsRetrieveWithResponse request returning *QuestionnaireQuestionsRetrieveResponse
func (c *ClientWithResponses) QuestionnaireQuestionsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*QuestionnaireQuestionsRetrieveResponse, error) {
	rsp, err := c.QuestionnaireQuestionsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuestionnaireQuestionsRetrieveResponse(rsp)
}

// RegulationsListWithResponse request returning *RegulationsListResponse
func (c *ClientWithResponses) RegulationsListWithResponse(ctx context.Context, params *RegulationsListParams, reqEditors ...RequestEditorFn) (*RegulationsListResponse, error) {
	rsp, err := c.RegulationsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegulationsListResponse(rsp)
}

// RegulationsCreateWithBodyWithResponse request with arbitrary body returning *RegulationsCreateResponse
func (c *ClientWithResponses) RegulationsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegulationsCreateResponse, error) {
	rsp, err := c.RegulationsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegulationsCreateResponse(rsp)
}

func (c *ClientWithResponses) RegulationsCreateWithResponse(ctx context.Context, body RegulationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*RegulationsCreateResponse, error) {
	rsp, err := c.RegulationsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegulationsCreateResponse(rsp)
}

func (c *ClientWithResponses) RegulationsCreateWithFormdataBodyWithResponse(ctx context.Context, body RegulationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*RegulationsCreateResponse, error) {
	rsp, err := c.RegulationsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegulationsCreateResponse(rsp)
}

// RegulationsDestroyWithResponse request returning *RegulationsDestroyResponse
func (c *ClientWithResponses) RegulationsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*RegulationsDestroyResponse, error) {
	rsp, err := c.RegulationsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegulationsDestroyResponse(rsp)
}

// RegulationsRetrieveWithResponse request returning *RegulationsRetrieveResponse
func (c *ClientWithResponses) RegulationsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*RegulationsRetrieveResponse, error) {
	rsp, err := c.RegulationsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegulationsRetrieveResponse(rsp)
}

// RegulationsPartialUpdateWithBodyWithResponse request with arbitrary body returning *RegulationsPartialUpdateResponse
func (c *ClientWithResponses) RegulationsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegulationsPartialUpdateResponse, error) {
	rsp, err := c.RegulationsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegulationsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) RegulationsPartialUpdateWithResponse(ctx context.Context, id int, body RegulationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*RegulationsPartialUpdateResponse, error) {
	rsp, err := c.RegulationsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegulationsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) RegulationsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body RegulationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*RegulationsPartialUpdateResponse, error) {
	rsp, err := c.RegulationsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegulationsPartialUpdateResponse(rsp)
}

// RegulationsUpdateWithBodyWithResponse request with arbitrary body returning *RegulationsUpdateResponse
func (c *ClientWithResponses) RegulationsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegulationsUpdateResponse, error) {
	rsp, err := c.RegulationsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegulationsUpdateResponse(rsp)
}

func (c *ClientWithResponses) RegulationsUpdateWithResponse(ctx context.Context, id int, body RegulationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*RegulationsUpdateResponse, error) {
	rsp, err := c.RegulationsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegulationsUpdateResponse(rsp)
}

func (c *ClientWithResponses) RegulationsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body RegulationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*RegulationsUpdateResponse, error) {
	rsp, err := c.RegulationsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegulationsUpdateResponse(rsp)
}

// RegulationsDeletePreviewListWithResponse request returning *RegulationsDeletePreviewListResponse
func (c *ClientWithResponses) RegulationsDeletePreviewListWithResponse(ctx context.Context, id int, params *RegulationsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*RegulationsDeletePreviewListResponse, error) {
	rsp, err := c.RegulationsDeletePreviewList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegulationsDeletePreviewListResponse(rsp)
}

// ReimportScanCreateWithBodyWithResponse request with arbitrary body returning *ReimportScanCreateResponse
func (c *ClientWithResponses) ReimportScanCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReimportScanCreateResponse, error) {
	rsp, err := c.ReimportScanCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReimportScanCreateResponse(rsp)
}

// RiskAcceptanceListWithResponse request returning *RiskAcceptanceListResponse
func (c *ClientWithResponses) RiskAcceptanceListWithResponse(ctx context.Context, params *RiskAcceptanceListParams, reqEditors ...RequestEditorFn) (*RiskAcceptanceListResponse, error) {
	rsp, err := c.RiskAcceptanceList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRiskAcceptanceListResponse(rsp)
}

// RiskAcceptanceDestroyWithResponse request returning *RiskAcceptanceDestroyResponse
func (c *ClientWithResponses) RiskAcceptanceDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*RiskAcceptanceDestroyResponse, error) {
	rsp, err := c.RiskAcceptanceDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRiskAcceptanceDestroyResponse(rsp)
}

// RiskAcceptanceRetrieveWithResponse request returning *RiskAcceptanceRetrieveResponse
func (c *ClientWithResponses) RiskAcceptanceRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*RiskAcceptanceRetrieveResponse, error) {
	rsp, err := c.RiskAcceptanceRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRiskAcceptanceRetrieveResponse(rsp)
}

// RiskAcceptanceDeletePreviewListWithResponse request returning *RiskAcceptanceDeletePreviewListResponse
func (c *ClientWithResponses) RiskAcceptanceDeletePreviewListWithResponse(ctx context.Context, id int, params *RiskAcceptanceDeletePreviewListParams, reqEditors ...RequestEditorFn) (*RiskAcceptanceDeletePreviewListResponse, error) {
	rsp, err := c.RiskAcceptanceDeletePreviewList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRiskAcceptanceDeletePreviewListResponse(rsp)
}

// RiskAcceptanceDownloadProofRetrieveWithResponse request returning *RiskAcceptanceDownloadProofRetrieveResponse
func (c *ClientWithResponses) RiskAcceptanceDownloadProofRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*RiskAcceptanceDownloadProofRetrieveResponse, error) {
	rsp, err := c.RiskAcceptanceDownloadProofRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRiskAcceptanceDownloadProofRetrieveResponse(rsp)
}

// RolesListWithResponse request returning *RolesListResponse
func (c *ClientWithResponses) RolesListWithResponse(ctx context.Context, params *RolesListParams, reqEditors ...RequestEditorFn) (*RolesListResponse, error) {
	rsp, err := c.RolesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRolesListResponse(rsp)
}

// RolesRetrieveWithResponse request returning *RolesRetrieveResponse
func (c *ClientWithResponses) RolesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*RolesRetrieveResponse, error) {
	rsp, err := c.RolesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRolesRetrieveResponse(rsp)
}

// SlaConfigurationsListWithResponse request returning *SlaConfigurationsListResponse
func (c *ClientWithResponses) SlaConfigurationsListWithResponse(ctx context.Context, params *SlaConfigurationsListParams, reqEditors ...RequestEditorFn) (*SlaConfigurationsListResponse, error) {
	rsp, err := c.SlaConfigurationsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlaConfigurationsListResponse(rsp)
}

// SlaConfigurationsCreateWithBodyWithResponse request with arbitrary body returning *SlaConfigurationsCreateResponse
func (c *ClientWithResponses) SlaConfigurationsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlaConfigurationsCreateResponse, error) {
	rsp, err := c.SlaConfigurationsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlaConfigurationsCreateResponse(rsp)
}

func (c *ClientWithResponses) SlaConfigurationsCreateWithResponse(ctx context.Context, body SlaConfigurationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*SlaConfigurationsCreateResponse, error) {
	rsp, err := c.SlaConfigurationsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlaConfigurationsCreateResponse(rsp)
}

func (c *ClientWithResponses) SlaConfigurationsCreateWithFormdataBodyWithResponse(ctx context.Context, body SlaConfigurationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SlaConfigurationsCreateResponse, error) {
	rsp, err := c.SlaConfigurationsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlaConfigurationsCreateResponse(rsp)
}

// SlaConfigurationsDestroyWithResponse request returning *SlaConfigurationsDestroyResponse
func (c *ClientWithResponses) SlaConfigurationsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*SlaConfigurationsDestroyResponse, error) {
	rsp, err := c.SlaConfigurationsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlaConfigurationsDestroyResponse(rsp)
}

// SlaConfigurationsRetrieveWithResponse request returning *SlaConfigurationsRetrieveResponse
func (c *ClientWithResponses) SlaConfigurationsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*SlaConfigurationsRetrieveResponse, error) {
	rsp, err := c.SlaConfigurationsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlaConfigurationsRetrieveResponse(rsp)
}

// SlaConfigurationsPartialUpdateWithBodyWithResponse request with arbitrary body returning *SlaConfigurationsPartialUpdateResponse
func (c *ClientWithResponses) SlaConfigurationsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlaConfigurationsPartialUpdateResponse, error) {
	rsp, err := c.SlaConfigurationsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlaConfigurationsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) SlaConfigurationsPartialUpdateWithResponse(ctx context.Context, id int, body SlaConfigurationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SlaConfigurationsPartialUpdateResponse, error) {
	rsp, err := c.SlaConfigurationsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlaConfigurationsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) SlaConfigurationsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body SlaConfigurationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SlaConfigurationsPartialUpdateResponse, error) {
	rsp, err := c.SlaConfigurationsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlaConfigurationsPartialUpdateResponse(rsp)
}

// SlaConfigurationsUpdateWithBodyWithResponse request with arbitrary body returning *SlaConfigurationsUpdateResponse
func (c *ClientWithResponses) SlaConfigurationsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SlaConfigurationsUpdateResponse, error) {
	rsp, err := c.SlaConfigurationsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlaConfigurationsUpdateResponse(rsp)
}

func (c *ClientWithResponses) SlaConfigurationsUpdateWithResponse(ctx context.Context, id int, body SlaConfigurationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SlaConfigurationsUpdateResponse, error) {
	rsp, err := c.SlaConfigurationsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlaConfigurationsUpdateResponse(rsp)
}

func (c *ClientWithResponses) SlaConfigurationsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body SlaConfigurationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SlaConfigurationsUpdateResponse, error) {
	rsp, err := c.SlaConfigurationsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSlaConfigurationsUpdateResponse(rsp)
}

// SonarqubeIssuesListWithResponse request returning *SonarqubeIssuesListResponse
func (c *ClientWithResponses) SonarqubeIssuesListWithResponse(ctx context.Context, params *SonarqubeIssuesListParams, reqEditors ...RequestEditorFn) (*SonarqubeIssuesListResponse, error) {
	rsp, err := c.SonarqubeIssuesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeIssuesListResponse(rsp)
}

// SonarqubeIssuesCreateWithBodyWithResponse request with arbitrary body returning *SonarqubeIssuesCreateResponse
func (c *ClientWithResponses) SonarqubeIssuesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SonarqubeIssuesCreateResponse, error) {
	rsp, err := c.SonarqubeIssuesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeIssuesCreateResponse(rsp)
}

func (c *ClientWithResponses) SonarqubeIssuesCreateWithResponse(ctx context.Context, body SonarqubeIssuesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeIssuesCreateResponse, error) {
	rsp, err := c.SonarqubeIssuesCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeIssuesCreateResponse(rsp)
}

func (c *ClientWithResponses) SonarqubeIssuesCreateWithFormdataBodyWithResponse(ctx context.Context, body SonarqubeIssuesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeIssuesCreateResponse, error) {
	rsp, err := c.SonarqubeIssuesCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeIssuesCreateResponse(rsp)
}

// SonarqubeIssuesDestroyWithResponse request returning *SonarqubeIssuesDestroyResponse
func (c *ClientWithResponses) SonarqubeIssuesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*SonarqubeIssuesDestroyResponse, error) {
	rsp, err := c.SonarqubeIssuesDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeIssuesDestroyResponse(rsp)
}

// SonarqubeIssuesRetrieveWithResponse request returning *SonarqubeIssuesRetrieveResponse
func (c *ClientWithResponses) SonarqubeIssuesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*SonarqubeIssuesRetrieveResponse, error) {
	rsp, err := c.SonarqubeIssuesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeIssuesRetrieveResponse(rsp)
}

// SonarqubeIssuesPartialUpdateWithBodyWithResponse request with arbitrary body returning *SonarqubeIssuesPartialUpdateResponse
func (c *ClientWithResponses) SonarqubeIssuesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SonarqubeIssuesPartialUpdateResponse, error) {
	rsp, err := c.SonarqubeIssuesPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeIssuesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) SonarqubeIssuesPartialUpdateWithResponse(ctx context.Context, id int, body SonarqubeIssuesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeIssuesPartialUpdateResponse, error) {
	rsp, err := c.SonarqubeIssuesPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeIssuesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) SonarqubeIssuesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body SonarqubeIssuesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeIssuesPartialUpdateResponse, error) {
	rsp, err := c.SonarqubeIssuesPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeIssuesPartialUpdateResponse(rsp)
}

// SonarqubeIssuesUpdateWithBodyWithResponse request with arbitrary body returning *SonarqubeIssuesUpdateResponse
func (c *ClientWithResponses) SonarqubeIssuesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SonarqubeIssuesUpdateResponse, error) {
	rsp, err := c.SonarqubeIssuesUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeIssuesUpdateResponse(rsp)
}

func (c *ClientWithResponses) SonarqubeIssuesUpdateWithResponse(ctx context.Context, id int, body SonarqubeIssuesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeIssuesUpdateResponse, error) {
	rsp, err := c.SonarqubeIssuesUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeIssuesUpdateResponse(rsp)
}

func (c *ClientWithResponses) SonarqubeIssuesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body SonarqubeIssuesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeIssuesUpdateResponse, error) {
	rsp, err := c.SonarqubeIssuesUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeIssuesUpdateResponse(rsp)
}

// SonarqubeIssuesDeletePreviewListWithResponse request returning *SonarqubeIssuesDeletePreviewListResponse
func (c *ClientWithResponses) SonarqubeIssuesDeletePreviewListWithResponse(ctx context.Context, id int, params *SonarqubeIssuesDeletePreviewListParams, reqEditors ...RequestEditorFn) (*SonarqubeIssuesDeletePreviewListResponse, error) {
	rsp, err := c.SonarqubeIssuesDeletePreviewList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeIssuesDeletePreviewListResponse(rsp)
}

// SonarqubeTransitionsListWithResponse request returning *SonarqubeTransitionsListResponse
func (c *ClientWithResponses) SonarqubeTransitionsListWithResponse(ctx context.Context, params *SonarqubeTransitionsListParams, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsListResponse, error) {
	rsp, err := c.SonarqubeTransitionsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeTransitionsListResponse(rsp)
}

// SonarqubeTransitionsCreateWithBodyWithResponse request with arbitrary body returning *SonarqubeTransitionsCreateResponse
func (c *ClientWithResponses) SonarqubeTransitionsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsCreateResponse, error) {
	rsp, err := c.SonarqubeTransitionsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeTransitionsCreateResponse(rsp)
}

func (c *ClientWithResponses) SonarqubeTransitionsCreateWithResponse(ctx context.Context, body SonarqubeTransitionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsCreateResponse, error) {
	rsp, err := c.SonarqubeTransitionsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeTransitionsCreateResponse(rsp)
}

func (c *ClientWithResponses) SonarqubeTransitionsCreateWithFormdataBodyWithResponse(ctx context.Context, body SonarqubeTransitionsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsCreateResponse, error) {
	rsp, err := c.SonarqubeTransitionsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeTransitionsCreateResponse(rsp)
}

// SonarqubeTransitionsDestroyWithResponse request returning *SonarqubeTransitionsDestroyResponse
func (c *ClientWithResponses) SonarqubeTransitionsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsDestroyResponse, error) {
	rsp, err := c.SonarqubeTransitionsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeTransitionsDestroyResponse(rsp)
}

// SonarqubeTransitionsRetrieveWithResponse request returning *SonarqubeTransitionsRetrieveResponse
func (c *ClientWithResponses) SonarqubeTransitionsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsRetrieveResponse, error) {
	rsp, err := c.SonarqubeTransitionsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeTransitionsRetrieveResponse(rsp)
}

// SonarqubeTransitionsPartialUpdateWithBodyWithResponse request with arbitrary body returning *SonarqubeTransitionsPartialUpdateResponse
func (c *ClientWithResponses) SonarqubeTransitionsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsPartialUpdateResponse, error) {
	rsp, err := c.SonarqubeTransitionsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeTransitionsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) SonarqubeTransitionsPartialUpdateWithResponse(ctx context.Context, id int, body SonarqubeTransitionsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsPartialUpdateResponse, error) {
	rsp, err := c.SonarqubeTransitionsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeTransitionsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) SonarqubeTransitionsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body SonarqubeTransitionsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsPartialUpdateResponse, error) {
	rsp, err := c.SonarqubeTransitionsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeTransitionsPartialUpdateResponse(rsp)
}

// SonarqubeTransitionsUpdateWithBodyWithResponse request with arbitrary body returning *SonarqubeTransitionsUpdateResponse
func (c *ClientWithResponses) SonarqubeTransitionsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsUpdateResponse, error) {
	rsp, err := c.SonarqubeTransitionsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeTransitionsUpdateResponse(rsp)
}

func (c *ClientWithResponses) SonarqubeTransitionsUpdateWithResponse(ctx context.Context, id int, body SonarqubeTransitionsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsUpdateResponse, error) {
	rsp, err := c.SonarqubeTransitionsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeTransitionsUpdateResponse(rsp)
}

func (c *ClientWithResponses) SonarqubeTransitionsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body SonarqubeTransitionsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsUpdateResponse, error) {
	rsp, err := c.SonarqubeTransitionsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeTransitionsUpdateResponse(rsp)
}

// SonarqubeTransitionsDeletePreviewListWithResponse request returning *SonarqubeTransitionsDeletePreviewListResponse
func (c *ClientWithResponses) SonarqubeTransitionsDeletePreviewListWithResponse(ctx context.Context, id int, params *SonarqubeTransitionsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*SonarqubeTransitionsDeletePreviewListResponse, error) {
	rsp, err := c.SonarqubeTransitionsDeletePreviewList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSonarqubeTransitionsDeletePreviewListResponse(rsp)
}

// StubFindingsListWithResponse request returning *StubFindingsListResponse
func (c *ClientWithResponses) StubFindingsListWithResponse(ctx context.Context, params *StubFindingsListParams, reqEditors ...RequestEditorFn) (*StubFindingsListResponse, error) {
	rsp, err := c.StubFindingsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStubFindingsListResponse(rsp)
}

// StubFindingsCreateWithBodyWithResponse request with arbitrary body returning *StubFindingsCreateResponse
func (c *ClientWithResponses) StubFindingsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StubFindingsCreateResponse, error) {
	rsp, err := c.StubFindingsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStubFindingsCreateResponse(rsp)
}

func (c *ClientWithResponses) StubFindingsCreateWithResponse(ctx context.Context, body StubFindingsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*StubFindingsCreateResponse, error) {
	rsp, err := c.StubFindingsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStubFindingsCreateResponse(rsp)
}

func (c *ClientWithResponses) StubFindingsCreateWithFormdataBodyWithResponse(ctx context.Context, body StubFindingsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*StubFindingsCreateResponse, error) {
	rsp, err := c.StubFindingsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStubFindingsCreateResponse(rsp)
}

// StubFindingsDestroyWithResponse request returning *StubFindingsDestroyResponse
func (c *ClientWithResponses) StubFindingsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*StubFindingsDestroyResponse, error) {
	rsp, err := c.StubFindingsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStubFindingsDestroyResponse(rsp)
}

// StubFindingsRetrieveWithResponse request returning *StubFindingsRetrieveResponse
func (c *ClientWithResponses) StubFindingsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*StubFindingsRetrieveResponse, error) {
	rsp, err := c.StubFindingsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStubFindingsRetrieveResponse(rsp)
}

// StubFindingsPartialUpdateWithBodyWithResponse request with arbitrary body returning *StubFindingsPartialUpdateResponse
func (c *ClientWithResponses) StubFindingsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StubFindingsPartialUpdateResponse, error) {
	rsp, err := c.StubFindingsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStubFindingsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) StubFindingsPartialUpdateWithResponse(ctx context.Context, id int, body StubFindingsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*StubFindingsPartialUpdateResponse, error) {
	rsp, err := c.StubFindingsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStubFindingsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) StubFindingsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body StubFindingsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*StubFindingsPartialUpdateResponse, error) {
	rsp, err := c.StubFindingsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStubFindingsPartialUpdateResponse(rsp)
}

// StubFindingsUpdateWithBodyWithResponse request with arbitrary body returning *StubFindingsUpdateResponse
func (c *ClientWithResponses) StubFindingsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StubFindingsUpdateResponse, error) {
	rsp, err := c.StubFindingsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStubFindingsUpdateResponse(rsp)
}

func (c *ClientWithResponses) StubFindingsUpdateWithResponse(ctx context.Context, id int, body StubFindingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*StubFindingsUpdateResponse, error) {
	rsp, err := c.StubFindingsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStubFindingsUpdateResponse(rsp)
}

func (c *ClientWithResponses) StubFindingsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body StubFindingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*StubFindingsUpdateResponse, error) {
	rsp, err := c.StubFindingsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStubFindingsUpdateResponse(rsp)
}

// StubFindingsDeletePreviewListWithResponse request returning *StubFindingsDeletePreviewListResponse
func (c *ClientWithResponses) StubFindingsDeletePreviewListWithResponse(ctx context.Context, id int, params *StubFindingsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*StubFindingsDeletePreviewListResponse, error) {
	rsp, err := c.StubFindingsDeletePreviewList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStubFindingsDeletePreviewListResponse(rsp)
}

// SystemSettingsListWithResponse request returning *SystemSettingsListResponse
func (c *ClientWithResponses) SystemSettingsListWithResponse(ctx context.Context, params *SystemSettingsListParams, reqEditors ...RequestEditorFn) (*SystemSettingsListResponse, error) {
	rsp, err := c.SystemSettingsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSystemSettingsListResponse(rsp)
}

// SystemSettingsPartialUpdateWithBodyWithResponse request with arbitrary body returning *SystemSettingsPartialUpdateResponse
func (c *ClientWithResponses) SystemSettingsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SystemSettingsPartialUpdateResponse, error) {
	rsp, err := c.SystemSettingsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSystemSettingsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) SystemSettingsPartialUpdateWithResponse(ctx context.Context, id int, body SystemSettingsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SystemSettingsPartialUpdateResponse, error) {
	rsp, err := c.SystemSettingsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSystemSettingsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) SystemSettingsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body SystemSettingsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SystemSettingsPartialUpdateResponse, error) {
	rsp, err := c.SystemSettingsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSystemSettingsPartialUpdateResponse(rsp)
}

// SystemSettingsUpdateWithBodyWithResponse request with arbitrary body returning *SystemSettingsUpdateResponse
func (c *ClientWithResponses) SystemSettingsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SystemSettingsUpdateResponse, error) {
	rsp, err := c.SystemSettingsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSystemSettingsUpdateResponse(rsp)
}

func (c *ClientWithResponses) SystemSettingsUpdateWithResponse(ctx context.Context, id int, body SystemSettingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SystemSettingsUpdateResponse, error) {
	rsp, err := c.SystemSettingsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSystemSettingsUpdateResponse(rsp)
}

func (c *ClientWithResponses) SystemSettingsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body SystemSettingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*SystemSettingsUpdateResponse, error) {
	rsp, err := c.SystemSettingsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSystemSettingsUpdateResponse(rsp)
}

// TechnologiesListWithResponse request returning *TechnologiesListResponse
func (c *ClientWithResponses) TechnologiesListWithResponse(ctx context.Context, params *TechnologiesListParams, reqEditors ...RequestEditorFn) (*TechnologiesListResponse, error) {
	rsp, err := c.TechnologiesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTechnologiesListResponse(rsp)
}

// TechnologiesCreateWithBodyWithResponse request with arbitrary body returning *TechnologiesCreateResponse
func (c *ClientWithResponses) TechnologiesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TechnologiesCreateResponse, error) {
	rsp, err := c.TechnologiesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTechnologiesCreateResponse(rsp)
}

func (c *ClientWithResponses) TechnologiesCreateWithResponse(ctx context.Context, body TechnologiesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TechnologiesCreateResponse, error) {
	rsp, err := c.TechnologiesCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTechnologiesCreateResponse(rsp)
}

func (c *ClientWithResponses) TechnologiesCreateWithFormdataBodyWithResponse(ctx context.Context, body TechnologiesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TechnologiesCreateResponse, error) {
	rsp, err := c.TechnologiesCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTechnologiesCreateResponse(rsp)
}

// TechnologiesDestroyWithResponse request returning *TechnologiesDestroyResponse
func (c *ClientWithResponses) TechnologiesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TechnologiesDestroyResponse, error) {
	rsp, err := c.TechnologiesDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTechnologiesDestroyResponse(rsp)
}

// TechnologiesRetrieveWithResponse request returning *TechnologiesRetrieveResponse
func (c *ClientWithResponses) TechnologiesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TechnologiesRetrieveResponse, error) {
	rsp, err := c.TechnologiesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTechnologiesRetrieveResponse(rsp)
}

// TechnologiesPartialUpdateWithBodyWithResponse request with arbitrary body returning *TechnologiesPartialUpdateResponse
func (c *ClientWithResponses) TechnologiesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TechnologiesPartialUpdateResponse, error) {
	rsp, err := c.TechnologiesPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTechnologiesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) TechnologiesPartialUpdateWithResponse(ctx context.Context, id int, body TechnologiesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TechnologiesPartialUpdateResponse, error) {
	rsp, err := c.TechnologiesPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTechnologiesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) TechnologiesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body TechnologiesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TechnologiesPartialUpdateResponse, error) {
	rsp, err := c.TechnologiesPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTechnologiesPartialUpdateResponse(rsp)
}

// TechnologiesUpdateWithBodyWithResponse request with arbitrary body returning *TechnologiesUpdateResponse
func (c *ClientWithResponses) TechnologiesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TechnologiesUpdateResponse, error) {
	rsp, err := c.TechnologiesUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTechnologiesUpdateResponse(rsp)
}

func (c *ClientWithResponses) TechnologiesUpdateWithResponse(ctx context.Context, id int, body TechnologiesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TechnologiesUpdateResponse, error) {
	rsp, err := c.TechnologiesUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTechnologiesUpdateResponse(rsp)
}

func (c *ClientWithResponses) TechnologiesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body TechnologiesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TechnologiesUpdateResponse, error) {
	rsp, err := c.TechnologiesUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTechnologiesUpdateResponse(rsp)
}

// TechnologiesDeletePreviewListWithResponse request returning *TechnologiesDeletePreviewListResponse
func (c *ClientWithResponses) TechnologiesDeletePreviewListWithResponse(ctx context.Context, id int, params *TechnologiesDeletePreviewListParams, reqEditors ...RequestEditorFn) (*TechnologiesDeletePreviewListResponse, error) {
	rsp, err := c.TechnologiesDeletePreviewList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTechnologiesDeletePreviewListResponse(rsp)
}

// TestImportsListWithResponse request returning *TestImportsListResponse
func (c *ClientWithResponses) TestImportsListWithResponse(ctx context.Context, params *TestImportsListParams, reqEditors ...RequestEditorFn) (*TestImportsListResponse, error) {
	rsp, err := c.TestImportsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestImportsListResponse(rsp)
}

// TestImportsCreateWithBodyWithResponse request with arbitrary body returning *TestImportsCreateResponse
func (c *ClientWithResponses) TestImportsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestImportsCreateResponse, error) {
	rsp, err := c.TestImportsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestImportsCreateResponse(rsp)
}

func (c *ClientWithResponses) TestImportsCreateWithResponse(ctx context.Context, body TestImportsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestImportsCreateResponse, error) {
	rsp, err := c.TestImportsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestImportsCreateResponse(rsp)
}

func (c *ClientWithResponses) TestImportsCreateWithFormdataBodyWithResponse(ctx context.Context, body TestImportsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestImportsCreateResponse, error) {
	rsp, err := c.TestImportsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestImportsCreateResponse(rsp)
}

// TestImportsDestroyWithResponse request returning *TestImportsDestroyResponse
func (c *ClientWithResponses) TestImportsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TestImportsDestroyResponse, error) {
	rsp, err := c.TestImportsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestImportsDestroyResponse(rsp)
}

// TestImportsRetrieveWithResponse request returning *TestImportsRetrieveResponse
func (c *ClientWithResponses) TestImportsRetrieveWithResponse(ctx context.Context, id int, params *TestImportsRetrieveParams, reqEditors ...RequestEditorFn) (*TestImportsRetrieveResponse, error) {
	rsp, err := c.TestImportsRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestImportsRetrieveResponse(rsp)
}

// TestImportsPartialUpdateWithBodyWithResponse request with arbitrary body returning *TestImportsPartialUpdateResponse
func (c *ClientWithResponses) TestImportsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestImportsPartialUpdateResponse, error) {
	rsp, err := c.TestImportsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestImportsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) TestImportsPartialUpdateWithResponse(ctx context.Context, id int, body TestImportsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestImportsPartialUpdateResponse, error) {
	rsp, err := c.TestImportsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestImportsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) TestImportsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body TestImportsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestImportsPartialUpdateResponse, error) {
	rsp, err := c.TestImportsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestImportsPartialUpdateResponse(rsp)
}

// TestImportsUpdateWithBodyWithResponse request with arbitrary body returning *TestImportsUpdateResponse
func (c *ClientWithResponses) TestImportsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestImportsUpdateResponse, error) {
	rsp, err := c.TestImportsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestImportsUpdateResponse(rsp)
}

func (c *ClientWithResponses) TestImportsUpdateWithResponse(ctx context.Context, id int, body TestImportsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestImportsUpdateResponse, error) {
	rsp, err := c.TestImportsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestImportsUpdateResponse(rsp)
}

func (c *ClientWithResponses) TestImportsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body TestImportsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestImportsUpdateResponse, error) {
	rsp, err := c.TestImportsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestImportsUpdateResponse(rsp)
}

// TestImportsDeletePreviewListWithResponse request returning *TestImportsDeletePreviewListResponse
func (c *ClientWithResponses) TestImportsDeletePreviewListWithResponse(ctx context.Context, id int, params *TestImportsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*TestImportsDeletePreviewListResponse, error) {
	rsp, err := c.TestImportsDeletePreviewList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestImportsDeletePreviewListResponse(rsp)
}

// TestTypesListWithResponse request returning *TestTypesListResponse
func (c *ClientWithResponses) TestTypesListWithResponse(ctx context.Context, params *TestTypesListParams, reqEditors ...RequestEditorFn) (*TestTypesListResponse, error) {
	rsp, err := c.TestTypesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestTypesListResponse(rsp)
}

// TestTypesCreateWithBodyWithResponse request with arbitrary body returning *TestTypesCreateResponse
func (c *ClientWithResponses) TestTypesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestTypesCreateResponse, error) {
	rsp, err := c.TestTypesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestTypesCreateResponse(rsp)
}

func (c *ClientWithResponses) TestTypesCreateWithResponse(ctx context.Context, body TestTypesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestTypesCreateResponse, error) {
	rsp, err := c.TestTypesCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestTypesCreateResponse(rsp)
}

func (c *ClientWithResponses) TestTypesCreateWithFormdataBodyWithResponse(ctx context.Context, body TestTypesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestTypesCreateResponse, error) {
	rsp, err := c.TestTypesCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestTypesCreateResponse(rsp)
}

// TestTypesRetrieveWithResponse request returning *TestTypesRetrieveResponse
func (c *ClientWithResponses) TestTypesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TestTypesRetrieveResponse, error) {
	rsp, err := c.TestTypesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestTypesRetrieveResponse(rsp)
}

// TestTypesPartialUpdateWithBodyWithResponse request with arbitrary body returning *TestTypesPartialUpdateResponse
func (c *ClientWithResponses) TestTypesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestTypesPartialUpdateResponse, error) {
	rsp, err := c.TestTypesPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestTypesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) TestTypesPartialUpdateWithResponse(ctx context.Context, id int, body TestTypesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestTypesPartialUpdateResponse, error) {
	rsp, err := c.TestTypesPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestTypesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) TestTypesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body TestTypesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestTypesPartialUpdateResponse, error) {
	rsp, err := c.TestTypesPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestTypesPartialUpdateResponse(rsp)
}

// TestTypesUpdateWithBodyWithResponse request with arbitrary body returning *TestTypesUpdateResponse
func (c *ClientWithResponses) TestTypesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestTypesUpdateResponse, error) {
	rsp, err := c.TestTypesUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestTypesUpdateResponse(rsp)
}

func (c *ClientWithResponses) TestTypesUpdateWithResponse(ctx context.Context, id int, body TestTypesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestTypesUpdateResponse, error) {
	rsp, err := c.TestTypesUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestTypesUpdateResponse(rsp)
}

func (c *ClientWithResponses) TestTypesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body TestTypesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestTypesUpdateResponse, error) {
	rsp, err := c.TestTypesUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestTypesUpdateResponse(rsp)
}

// TestsListWithResponse request returning *TestsListResponse
func (c *ClientWithResponses) TestsListWithResponse(ctx context.Context, params *TestsListParams, reqEditors ...RequestEditorFn) (*TestsListResponse, error) {
	rsp, err := c.TestsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsListResponse(rsp)
}

// TestsCreateWithBodyWithResponse request with arbitrary body returning *TestsCreateResponse
func (c *ClientWithResponses) TestsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestsCreateResponse, error) {
	rsp, err := c.TestsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsCreateResponse(rsp)
}

func (c *ClientWithResponses) TestsCreateWithResponse(ctx context.Context, body TestsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestsCreateResponse, error) {
	rsp, err := c.TestsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsCreateResponse(rsp)
}

func (c *ClientWithResponses) TestsCreateWithFormdataBodyWithResponse(ctx context.Context, body TestsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestsCreateResponse, error) {
	rsp, err := c.TestsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsCreateResponse(rsp)
}

// TestsDestroyWithResponse request returning *TestsDestroyResponse
func (c *ClientWithResponses) TestsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TestsDestroyResponse, error) {
	rsp, err := c.TestsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsDestroyResponse(rsp)
}

// TestsRetrieveWithResponse request returning *TestsRetrieveResponse
func (c *ClientWithResponses) TestsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TestsRetrieveResponse, error) {
	rsp, err := c.TestsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsRetrieveResponse(rsp)
}

// TestsPartialUpdateWithBodyWithResponse request with arbitrary body returning *TestsPartialUpdateResponse
func (c *ClientWithResponses) TestsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestsPartialUpdateResponse, error) {
	rsp, err := c.TestsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) TestsPartialUpdateWithResponse(ctx context.Context, id int, body TestsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestsPartialUpdateResponse, error) {
	rsp, err := c.TestsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) TestsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body TestsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestsPartialUpdateResponse, error) {
	rsp, err := c.TestsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsPartialUpdateResponse(rsp)
}

// TestsUpdateWithBodyWithResponse request with arbitrary body returning *TestsUpdateResponse
func (c *ClientWithResponses) TestsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestsUpdateResponse, error) {
	rsp, err := c.TestsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsUpdateResponse(rsp)
}

func (c *ClientWithResponses) TestsUpdateWithResponse(ctx context.Context, id int, body TestsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestsUpdateResponse, error) {
	rsp, err := c.TestsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsUpdateResponse(rsp)
}

func (c *ClientWithResponses) TestsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body TestsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestsUpdateResponse, error) {
	rsp, err := c.TestsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsUpdateResponse(rsp)
}

// TestsAcceptRisksCreateWithBodyWithResponse request with arbitrary body returning *TestsAcceptRisksCreateResponse
func (c *ClientWithResponses) TestsAcceptRisksCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestsAcceptRisksCreateResponse, error) {
	rsp, err := c.TestsAcceptRisksCreateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsAcceptRisksCreateResponse(rsp)
}

func (c *ClientWithResponses) TestsAcceptRisksCreateWithResponse(ctx context.Context, id int, body TestsAcceptRisksCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestsAcceptRisksCreateResponse, error) {
	rsp, err := c.TestsAcceptRisksCreate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsAcceptRisksCreateResponse(rsp)
}

func (c *ClientWithResponses) TestsAcceptRisksCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body TestsAcceptRisksCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestsAcceptRisksCreateResponse, error) {
	rsp, err := c.TestsAcceptRisksCreateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsAcceptRisksCreateResponse(rsp)
}

// TestsDeletePreviewListWithResponse request returning *TestsDeletePreviewListResponse
func (c *ClientWithResponses) TestsDeletePreviewListWithResponse(ctx context.Context, id int, params *TestsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*TestsDeletePreviewListResponse, error) {
	rsp, err := c.TestsDeletePreviewList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsDeletePreviewListResponse(rsp)
}

// TestsFilesRetrieveWithResponse request returning *TestsFilesRetrieveResponse
func (c *ClientWithResponses) TestsFilesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TestsFilesRetrieveResponse, error) {
	rsp, err := c.TestsFilesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsFilesRetrieveResponse(rsp)
}

// TestsFilesCreateWithBodyWithResponse request with arbitrary body returning *TestsFilesCreateResponse
func (c *ClientWithResponses) TestsFilesCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestsFilesCreateResponse, error) {
	rsp, err := c.TestsFilesCreateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsFilesCreateResponse(rsp)
}

// TestsFilesDownloadRetrieveWithResponse request returning *TestsFilesDownloadRetrieveResponse
func (c *ClientWithResponses) TestsFilesDownloadRetrieveWithResponse(ctx context.Context, id int, fileId string, reqEditors ...RequestEditorFn) (*TestsFilesDownloadRetrieveResponse, error) {
	rsp, err := c.TestsFilesDownloadRetrieve(ctx, id, fileId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsFilesDownloadRetrieveResponse(rsp)
}

// TestsGenerateReportCreateWithBodyWithResponse request with arbitrary body returning *TestsGenerateReportCreateResponse
func (c *ClientWithResponses) TestsGenerateReportCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestsGenerateReportCreateResponse, error) {
	rsp, err := c.TestsGenerateReportCreateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsGenerateReportCreateResponse(rsp)
}

func (c *ClientWithResponses) TestsGenerateReportCreateWithResponse(ctx context.Context, id int, body TestsGenerateReportCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestsGenerateReportCreateResponse, error) {
	rsp, err := c.TestsGenerateReportCreate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsGenerateReportCreateResponse(rsp)
}

func (c *ClientWithResponses) TestsGenerateReportCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body TestsGenerateReportCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestsGenerateReportCreateResponse, error) {
	rsp, err := c.TestsGenerateReportCreateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsGenerateReportCreateResponse(rsp)
}

// TestsNotesRetrieveWithResponse request returning *TestsNotesRetrieveResponse
func (c *ClientWithResponses) TestsNotesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*TestsNotesRetrieveResponse, error) {
	rsp, err := c.TestsNotesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsNotesRetrieveResponse(rsp)
}

// TestsNotesCreateWithBodyWithResponse request with arbitrary body returning *TestsNotesCreateResponse
func (c *ClientWithResponses) TestsNotesCreateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestsNotesCreateResponse, error) {
	rsp, err := c.TestsNotesCreateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsNotesCreateResponse(rsp)
}

func (c *ClientWithResponses) TestsNotesCreateWithResponse(ctx context.Context, id int, body TestsNotesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*TestsNotesCreateResponse, error) {
	rsp, err := c.TestsNotesCreate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsNotesCreateResponse(rsp)
}

func (c *ClientWithResponses) TestsNotesCreateWithFormdataBodyWithResponse(ctx context.Context, id int, body TestsNotesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*TestsNotesCreateResponse, error) {
	rsp, err := c.TestsNotesCreateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestsNotesCreateResponse(rsp)
}

// ToolConfigurationsListWithResponse request returning *ToolConfigurationsListResponse
func (c *ClientWithResponses) ToolConfigurationsListWithResponse(ctx context.Context, params *ToolConfigurationsListParams, reqEditors ...RequestEditorFn) (*ToolConfigurationsListResponse, error) {
	rsp, err := c.ToolConfigurationsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolConfigurationsListResponse(rsp)
}

// ToolConfigurationsCreateWithBodyWithResponse request with arbitrary body returning *ToolConfigurationsCreateResponse
func (c *ClientWithResponses) ToolConfigurationsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ToolConfigurationsCreateResponse, error) {
	rsp, err := c.ToolConfigurationsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolConfigurationsCreateResponse(rsp)
}

func (c *ClientWithResponses) ToolConfigurationsCreateWithResponse(ctx context.Context, body ToolConfigurationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ToolConfigurationsCreateResponse, error) {
	rsp, err := c.ToolConfigurationsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolConfigurationsCreateResponse(rsp)
}

func (c *ClientWithResponses) ToolConfigurationsCreateWithFormdataBodyWithResponse(ctx context.Context, body ToolConfigurationsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ToolConfigurationsCreateResponse, error) {
	rsp, err := c.ToolConfigurationsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolConfigurationsCreateResponse(rsp)
}

// ToolConfigurationsDestroyWithResponse request returning *ToolConfigurationsDestroyResponse
func (c *ClientWithResponses) ToolConfigurationsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ToolConfigurationsDestroyResponse, error) {
	rsp, err := c.ToolConfigurationsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolConfigurationsDestroyResponse(rsp)
}

// ToolConfigurationsRetrieveWithResponse request returning *ToolConfigurationsRetrieveResponse
func (c *ClientWithResponses) ToolConfigurationsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ToolConfigurationsRetrieveResponse, error) {
	rsp, err := c.ToolConfigurationsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolConfigurationsRetrieveResponse(rsp)
}

// ToolConfigurationsPartialUpdateWithBodyWithResponse request with arbitrary body returning *ToolConfigurationsPartialUpdateResponse
func (c *ClientWithResponses) ToolConfigurationsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ToolConfigurationsPartialUpdateResponse, error) {
	rsp, err := c.ToolConfigurationsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolConfigurationsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) ToolConfigurationsPartialUpdateWithResponse(ctx context.Context, id int, body ToolConfigurationsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ToolConfigurationsPartialUpdateResponse, error) {
	rsp, err := c.ToolConfigurationsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolConfigurationsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) ToolConfigurationsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ToolConfigurationsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ToolConfigurationsPartialUpdateResponse, error) {
	rsp, err := c.ToolConfigurationsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolConfigurationsPartialUpdateResponse(rsp)
}

// ToolConfigurationsUpdateWithBodyWithResponse request with arbitrary body returning *ToolConfigurationsUpdateResponse
func (c *ClientWithResponses) ToolConfigurationsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ToolConfigurationsUpdateResponse, error) {
	rsp, err := c.ToolConfigurationsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolConfigurationsUpdateResponse(rsp)
}

func (c *ClientWithResponses) ToolConfigurationsUpdateWithResponse(ctx context.Context, id int, body ToolConfigurationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ToolConfigurationsUpdateResponse, error) {
	rsp, err := c.ToolConfigurationsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolConfigurationsUpdateResponse(rsp)
}

func (c *ClientWithResponses) ToolConfigurationsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ToolConfigurationsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ToolConfigurationsUpdateResponse, error) {
	rsp, err := c.ToolConfigurationsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolConfigurationsUpdateResponse(rsp)
}

// ToolConfigurationsDeletePreviewListWithResponse request returning *ToolConfigurationsDeletePreviewListResponse
func (c *ClientWithResponses) ToolConfigurationsDeletePreviewListWithResponse(ctx context.Context, id int, params *ToolConfigurationsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*ToolConfigurationsDeletePreviewListResponse, error) {
	rsp, err := c.ToolConfigurationsDeletePreviewList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolConfigurationsDeletePreviewListResponse(rsp)
}

// ToolProductSettingsListWithResponse request returning *ToolProductSettingsListResponse
func (c *ClientWithResponses) ToolProductSettingsListWithResponse(ctx context.Context, params *ToolProductSettingsListParams, reqEditors ...RequestEditorFn) (*ToolProductSettingsListResponse, error) {
	rsp, err := c.ToolProductSettingsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolProductSettingsListResponse(rsp)
}

// ToolProductSettingsCreateWithBodyWithResponse request with arbitrary body returning *ToolProductSettingsCreateResponse
func (c *ClientWithResponses) ToolProductSettingsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ToolProductSettingsCreateResponse, error) {
	rsp, err := c.ToolProductSettingsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolProductSettingsCreateResponse(rsp)
}

func (c *ClientWithResponses) ToolProductSettingsCreateWithResponse(ctx context.Context, body ToolProductSettingsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ToolProductSettingsCreateResponse, error) {
	rsp, err := c.ToolProductSettingsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolProductSettingsCreateResponse(rsp)
}

func (c *ClientWithResponses) ToolProductSettingsCreateWithFormdataBodyWithResponse(ctx context.Context, body ToolProductSettingsCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ToolProductSettingsCreateResponse, error) {
	rsp, err := c.ToolProductSettingsCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolProductSettingsCreateResponse(rsp)
}

// ToolProductSettingsDestroyWithResponse request returning *ToolProductSettingsDestroyResponse
func (c *ClientWithResponses) ToolProductSettingsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ToolProductSettingsDestroyResponse, error) {
	rsp, err := c.ToolProductSettingsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolProductSettingsDestroyResponse(rsp)
}

// ToolProductSettingsRetrieveWithResponse request returning *ToolProductSettingsRetrieveResponse
func (c *ClientWithResponses) ToolProductSettingsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ToolProductSettingsRetrieveResponse, error) {
	rsp, err := c.ToolProductSettingsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolProductSettingsRetrieveResponse(rsp)
}

// ToolProductSettingsPartialUpdateWithBodyWithResponse request with arbitrary body returning *ToolProductSettingsPartialUpdateResponse
func (c *ClientWithResponses) ToolProductSettingsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ToolProductSettingsPartialUpdateResponse, error) {
	rsp, err := c.ToolProductSettingsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolProductSettingsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) ToolProductSettingsPartialUpdateWithResponse(ctx context.Context, id int, body ToolProductSettingsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ToolProductSettingsPartialUpdateResponse, error) {
	rsp, err := c.ToolProductSettingsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolProductSettingsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) ToolProductSettingsPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ToolProductSettingsPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ToolProductSettingsPartialUpdateResponse, error) {
	rsp, err := c.ToolProductSettingsPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolProductSettingsPartialUpdateResponse(rsp)
}

// ToolProductSettingsUpdateWithBodyWithResponse request with arbitrary body returning *ToolProductSettingsUpdateResponse
func (c *ClientWithResponses) ToolProductSettingsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ToolProductSettingsUpdateResponse, error) {
	rsp, err := c.ToolProductSettingsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolProductSettingsUpdateResponse(rsp)
}

func (c *ClientWithResponses) ToolProductSettingsUpdateWithResponse(ctx context.Context, id int, body ToolProductSettingsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ToolProductSettingsUpdateResponse, error) {
	rsp, err := c.ToolProductSettingsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolProductSettingsUpdateResponse(rsp)
}

func (c *ClientWithResponses) ToolProductSettingsUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ToolProductSettingsUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ToolProductSettingsUpdateResponse, error) {
	rsp, err := c.ToolProductSettingsUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolProductSettingsUpdateResponse(rsp)
}

// ToolProductSettingsDeletePreviewListWithResponse request returning *ToolProductSettingsDeletePreviewListResponse
func (c *ClientWithResponses) ToolProductSettingsDeletePreviewListWithResponse(ctx context.Context, id int, params *ToolProductSettingsDeletePreviewListParams, reqEditors ...RequestEditorFn) (*ToolProductSettingsDeletePreviewListResponse, error) {
	rsp, err := c.ToolProductSettingsDeletePreviewList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolProductSettingsDeletePreviewListResponse(rsp)
}

// ToolTypesListWithResponse request returning *ToolTypesListResponse
func (c *ClientWithResponses) ToolTypesListWithResponse(ctx context.Context, params *ToolTypesListParams, reqEditors ...RequestEditorFn) (*ToolTypesListResponse, error) {
	rsp, err := c.ToolTypesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolTypesListResponse(rsp)
}

// ToolTypesCreateWithBodyWithResponse request with arbitrary body returning *ToolTypesCreateResponse
func (c *ClientWithResponses) ToolTypesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ToolTypesCreateResponse, error) {
	rsp, err := c.ToolTypesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolTypesCreateResponse(rsp)
}

func (c *ClientWithResponses) ToolTypesCreateWithResponse(ctx context.Context, body ToolTypesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ToolTypesCreateResponse, error) {
	rsp, err := c.ToolTypesCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolTypesCreateResponse(rsp)
}

func (c *ClientWithResponses) ToolTypesCreateWithFormdataBodyWithResponse(ctx context.Context, body ToolTypesCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ToolTypesCreateResponse, error) {
	rsp, err := c.ToolTypesCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolTypesCreateResponse(rsp)
}

// ToolTypesDestroyWithResponse request returning *ToolTypesDestroyResponse
func (c *ClientWithResponses) ToolTypesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ToolTypesDestroyResponse, error) {
	rsp, err := c.ToolTypesDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolTypesDestroyResponse(rsp)
}

// ToolTypesRetrieveWithResponse request returning *ToolTypesRetrieveResponse
func (c *ClientWithResponses) ToolTypesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*ToolTypesRetrieveResponse, error) {
	rsp, err := c.ToolTypesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolTypesRetrieveResponse(rsp)
}

// ToolTypesPartialUpdateWithBodyWithResponse request with arbitrary body returning *ToolTypesPartialUpdateResponse
func (c *ClientWithResponses) ToolTypesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ToolTypesPartialUpdateResponse, error) {
	rsp, err := c.ToolTypesPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolTypesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) ToolTypesPartialUpdateWithResponse(ctx context.Context, id int, body ToolTypesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ToolTypesPartialUpdateResponse, error) {
	rsp, err := c.ToolTypesPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolTypesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) ToolTypesPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ToolTypesPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ToolTypesPartialUpdateResponse, error) {
	rsp, err := c.ToolTypesPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolTypesPartialUpdateResponse(rsp)
}

// ToolTypesUpdateWithBodyWithResponse request with arbitrary body returning *ToolTypesUpdateResponse
func (c *ClientWithResponses) ToolTypesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ToolTypesUpdateResponse, error) {
	rsp, err := c.ToolTypesUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolTypesUpdateResponse(rsp)
}

func (c *ClientWithResponses) ToolTypesUpdateWithResponse(ctx context.Context, id int, body ToolTypesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ToolTypesUpdateResponse, error) {
	rsp, err := c.ToolTypesUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolTypesUpdateResponse(rsp)
}

func (c *ClientWithResponses) ToolTypesUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body ToolTypesUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*ToolTypesUpdateResponse, error) {
	rsp, err := c.ToolTypesUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolTypesUpdateResponse(rsp)
}

// ToolTypesDeletePreviewListWithResponse request returning *ToolTypesDeletePreviewListResponse
func (c *ClientWithResponses) ToolTypesDeletePreviewListWithResponse(ctx context.Context, id int, params *ToolTypesDeletePreviewListParams, reqEditors ...RequestEditorFn) (*ToolTypesDeletePreviewListResponse, error) {
	rsp, err := c.ToolTypesDeletePreviewList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToolTypesDeletePreviewListResponse(rsp)
}

// UserContactInfosListWithResponse request returning *UserContactInfosListResponse
func (c *ClientWithResponses) UserContactInfosListWithResponse(ctx context.Context, params *UserContactInfosListParams, reqEditors ...RequestEditorFn) (*UserContactInfosListResponse, error) {
	rsp, err := c.UserContactInfosList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserContactInfosListResponse(rsp)
}

// UserContactInfosCreateWithBodyWithResponse request with arbitrary body returning *UserContactInfosCreateResponse
func (c *ClientWithResponses) UserContactInfosCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserContactInfosCreateResponse, error) {
	rsp, err := c.UserContactInfosCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserContactInfosCreateResponse(rsp)
}

func (c *ClientWithResponses) UserContactInfosCreateWithResponse(ctx context.Context, body UserContactInfosCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*UserContactInfosCreateResponse, error) {
	rsp, err := c.UserContactInfosCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserContactInfosCreateResponse(rsp)
}

func (c *ClientWithResponses) UserContactInfosCreateWithFormdataBodyWithResponse(ctx context.Context, body UserContactInfosCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UserContactInfosCreateResponse, error) {
	rsp, err := c.UserContactInfosCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserContactInfosCreateResponse(rsp)
}

// UserContactInfosDestroyWithResponse request returning *UserContactInfosDestroyResponse
func (c *ClientWithResponses) UserContactInfosDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*UserContactInfosDestroyResponse, error) {
	rsp, err := c.UserContactInfosDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserContactInfosDestroyResponse(rsp)
}

// UserContactInfosRetrieveWithResponse request returning *UserContactInfosRetrieveResponse
func (c *ClientWithResponses) UserContactInfosRetrieveWithResponse(ctx context.Context, id int, params *UserContactInfosRetrieveParams, reqEditors ...RequestEditorFn) (*UserContactInfosRetrieveResponse, error) {
	rsp, err := c.UserContactInfosRetrieve(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserContactInfosRetrieveResponse(rsp)
}

// UserContactInfosPartialUpdateWithBodyWithResponse request with arbitrary body returning *UserContactInfosPartialUpdateResponse
func (c *ClientWithResponses) UserContactInfosPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserContactInfosPartialUpdateResponse, error) {
	rsp, err := c.UserContactInfosPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserContactInfosPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) UserContactInfosPartialUpdateWithResponse(ctx context.Context, id int, body UserContactInfosPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UserContactInfosPartialUpdateResponse, error) {
	rsp, err := c.UserContactInfosPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserContactInfosPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) UserContactInfosPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body UserContactInfosPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UserContactInfosPartialUpdateResponse, error) {
	rsp, err := c.UserContactInfosPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserContactInfosPartialUpdateResponse(rsp)
}

// UserContactInfosUpdateWithBodyWithResponse request with arbitrary body returning *UserContactInfosUpdateResponse
func (c *ClientWithResponses) UserContactInfosUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserContactInfosUpdateResponse, error) {
	rsp, err := c.UserContactInfosUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserContactInfosUpdateResponse(rsp)
}

func (c *ClientWithResponses) UserContactInfosUpdateWithResponse(ctx context.Context, id int, body UserContactInfosUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UserContactInfosUpdateResponse, error) {
	rsp, err := c.UserContactInfosUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserContactInfosUpdateResponse(rsp)
}

func (c *ClientWithResponses) UserContactInfosUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body UserContactInfosUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UserContactInfosUpdateResponse, error) {
	rsp, err := c.UserContactInfosUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserContactInfosUpdateResponse(rsp)
}

// UserContactInfosDeletePreviewListWithResponse request returning *UserContactInfosDeletePreviewListResponse
func (c *ClientWithResponses) UserContactInfosDeletePreviewListWithResponse(ctx context.Context, id int, params *UserContactInfosDeletePreviewListParams, reqEditors ...RequestEditorFn) (*UserContactInfosDeletePreviewListResponse, error) {
	rsp, err := c.UserContactInfosDeletePreviewList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserContactInfosDeletePreviewListResponse(rsp)
}

// UserProfileRetrieveWithResponse request returning *UserProfileRetrieveResponse
func (c *ClientWithResponses) UserProfileRetrieveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UserProfileRetrieveResponse, error) {
	rsp, err := c.UserProfileRetrieve(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserProfileRetrieveResponse(rsp)
}

// UsersListWithResponse request returning *UsersListResponse
func (c *ClientWithResponses) UsersListWithResponse(ctx context.Context, params *UsersListParams, reqEditors ...RequestEditorFn) (*UsersListResponse, error) {
	rsp, err := c.UsersList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersListResponse(rsp)
}

// UsersCreateWithBodyWithResponse request with arbitrary body returning *UsersCreateResponse
func (c *ClientWithResponses) UsersCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersCreateResponse, error) {
	rsp, err := c.UsersCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersCreateResponse(rsp)
}

func (c *ClientWithResponses) UsersCreateWithResponse(ctx context.Context, body UsersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersCreateResponse, error) {
	rsp, err := c.UsersCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersCreateResponse(rsp)
}

func (c *ClientWithResponses) UsersCreateWithFormdataBodyWithResponse(ctx context.Context, body UsersCreateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UsersCreateResponse, error) {
	rsp, err := c.UsersCreateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersCreateResponse(rsp)
}

// UsersDestroyWithResponse request returning *UsersDestroyResponse
func (c *ClientWithResponses) UsersDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*UsersDestroyResponse, error) {
	rsp, err := c.UsersDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersDestroyResponse(rsp)
}

// UsersRetrieveWithResponse request returning *UsersRetrieveResponse
func (c *ClientWithResponses) UsersRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*UsersRetrieveResponse, error) {
	rsp, err := c.UsersRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersRetrieveResponse(rsp)
}

// UsersPartialUpdateWithBodyWithResponse request with arbitrary body returning *UsersPartialUpdateResponse
func (c *ClientWithResponses) UsersPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersPartialUpdateResponse, error) {
	rsp, err := c.UsersPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) UsersPartialUpdateWithResponse(ctx context.Context, id int, body UsersPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersPartialUpdateResponse, error) {
	rsp, err := c.UsersPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) UsersPartialUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body UsersPartialUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UsersPartialUpdateResponse, error) {
	rsp, err := c.UsersPartialUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersPartialUpdateResponse(rsp)
}

// UsersUpdateWithBodyWithResponse request with arbitrary body returning *UsersUpdateResponse
func (c *ClientWithResponses) UsersUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUpdateResponse, error) {
	rsp, err := c.UsersUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUpdateResponse(rsp)
}

func (c *ClientWithResponses) UsersUpdateWithResponse(ctx context.Context, id int, body UsersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUpdateResponse, error) {
	rsp, err := c.UsersUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUpdateResponse(rsp)
}

func (c *ClientWithResponses) UsersUpdateWithFormdataBodyWithResponse(ctx context.Context, id int, body UsersUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*UsersUpdateResponse, error) {
	rsp, err := c.UsersUpdateWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUpdateResponse(rsp)
}

// UsersDeletePreviewListWithResponse request returning *UsersDeletePreviewListResponse
func (c *ClientWithResponses) UsersDeletePreviewListWithResponse(ctx context.Context, id int, params *UsersDeletePreviewListParams, reqEditors ...RequestEditorFn) (*UsersDeletePreviewListResponse, error) {
	rsp, err := c.UsersDeletePreviewList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersDeletePreviewListResponse(rsp)
}

// ParseApiTokenAuthCreateResponse parses an HTTP response from a ApiTokenAuthCreateWithResponse call
func ParseApiTokenAuthCreateResponse(rsp *http.Response) (*ApiTokenAuthCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiTokenAuthCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseConfigurationPermissionsListResponse parses an HTTP response from a ConfigurationPermissionsListWithResponse call
func ParseConfigurationPermissionsListResponse(rsp *http.Response) (*ConfigurationPermissionsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConfigurationPermissionsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedConfigurationPermissionList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseConfigurationPermissionsRetrieveResponse parses an HTTP response from a ConfigurationPermissionsRetrieveWithResponse call
func ParseConfigurationPermissionsRetrieveResponse(rsp *http.Response) (*ConfigurationPermissionsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConfigurationPermissionsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConfigurationPermission
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCredentialMappingsListResponse parses an HTTP response from a CredentialMappingsListWithResponse call
func ParseCredentialMappingsListResponse(rsp *http.Response) (*CredentialMappingsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CredentialMappingsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedCredentialMappingList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCredentialMappingsCreateResponse parses an HTTP response from a CredentialMappingsCreateWithResponse call
func ParseCredentialMappingsCreateResponse(rsp *http.Response) (*CredentialMappingsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CredentialMappingsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CredentialMapping
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseCredentialMappingsDestroyResponse parses an HTTP response from a CredentialMappingsDestroyWithResponse call
func ParseCredentialMappingsDestroyResponse(rsp *http.Response) (*CredentialMappingsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CredentialMappingsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCredentialMappingsRetrieveResponse parses an HTTP response from a CredentialMappingsRetrieveWithResponse call
func ParseCredentialMappingsRetrieveResponse(rsp *http.Response) (*CredentialMappingsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CredentialMappingsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CredentialMapping
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCredentialMappingsPartialUpdateResponse parses an HTTP response from a CredentialMappingsPartialUpdateWithResponse call
func ParseCredentialMappingsPartialUpdateResponse(rsp *http.Response) (*CredentialMappingsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CredentialMappingsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CredentialMapping
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCredentialMappingsUpdateResponse parses an HTTP response from a CredentialMappingsUpdateWithResponse call
func ParseCredentialMappingsUpdateResponse(rsp *http.Response) (*CredentialMappingsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CredentialMappingsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CredentialMapping
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCredentialMappingsDeletePreviewListResponse parses an HTTP response from a CredentialMappingsDeletePreviewListWithResponse call
func ParseCredentialMappingsDeletePreviewListResponse(rsp *http.Response) (*CredentialMappingsDeletePreviewListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CredentialMappingsDeletePreviewListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDeletePreviewList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCredentialsListResponse parses an HTTP response from a CredentialsListWithResponse call
func ParseCredentialsListResponse(rsp *http.Response) (*CredentialsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CredentialsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedCredentialList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCredentialsCreateResponse parses an HTTP response from a CredentialsCreateWithResponse call
func ParseCredentialsCreateResponse(rsp *http.Response) (*CredentialsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CredentialsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Credential
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseCredentialsDestroyResponse parses an HTTP response from a CredentialsDestroyWithResponse call
func ParseCredentialsDestroyResponse(rsp *http.Response) (*CredentialsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CredentialsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCredentialsRetrieveResponse parses an HTTP response from a CredentialsRetrieveWithResponse call
func ParseCredentialsRetrieveResponse(rsp *http.Response) (*CredentialsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CredentialsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Credential
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCredentialsPartialUpdateResponse parses an HTTP response from a CredentialsPartialUpdateWithResponse call
func ParseCredentialsPartialUpdateResponse(rsp *http.Response) (*CredentialsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CredentialsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Credential
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCredentialsUpdateResponse parses an HTTP response from a CredentialsUpdateWithResponse call
func ParseCredentialsUpdateResponse(rsp *http.Response) (*CredentialsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CredentialsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Credential
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCredentialsDeletePreviewListResponse parses an HTTP response from a CredentialsDeletePreviewListWithResponse call
func ParseCredentialsDeletePreviewListResponse(rsp *http.Response) (*CredentialsDeletePreviewListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CredentialsDeletePreviewListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDeletePreviewList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDevelopmentEnvironmentsListResponse parses an HTTP response from a DevelopmentEnvironmentsListWithResponse call
func ParseDevelopmentEnvironmentsListResponse(rsp *http.Response) (*DevelopmentEnvironmentsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevelopmentEnvironmentsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDevelopmentEnvironmentList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDevelopmentEnvironmentsCreateResponse parses an HTTP response from a DevelopmentEnvironmentsCreateWithResponse call
func ParseDevelopmentEnvironmentsCreateResponse(rsp *http.Response) (*DevelopmentEnvironmentsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevelopmentEnvironmentsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DevelopmentEnvironment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDevelopmentEnvironmentsDestroyResponse parses an HTTP response from a DevelopmentEnvironmentsDestroyWithResponse call
func ParseDevelopmentEnvironmentsDestroyResponse(rsp *http.Response) (*DevelopmentEnvironmentsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevelopmentEnvironmentsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDevelopmentEnvironmentsRetrieveResponse parses an HTTP response from a DevelopmentEnvironmentsRetrieveWithResponse call
func ParseDevelopmentEnvironmentsRetrieveResponse(rsp *http.Response) (*DevelopmentEnvironmentsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevelopmentEnvironmentsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DevelopmentEnvironment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDevelopmentEnvironmentsPartialUpdateResponse parses an HTTP response from a DevelopmentEnvironmentsPartialUpdateWithResponse call
func ParseDevelopmentEnvironmentsPartialUpdateResponse(rsp *http.Response) (*DevelopmentEnvironmentsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevelopmentEnvironmentsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DevelopmentEnvironment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDevelopmentEnvironmentsUpdateResponse parses an HTTP response from a DevelopmentEnvironmentsUpdateWithResponse call
func ParseDevelopmentEnvironmentsUpdateResponse(rsp *http.Response) (*DevelopmentEnvironmentsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevelopmentEnvironmentsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DevelopmentEnvironment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDevelopmentEnvironmentsDeletePreviewListResponse parses an HTTP response from a DevelopmentEnvironmentsDeletePreviewListWithResponse call
func ParseDevelopmentEnvironmentsDeletePreviewListResponse(rsp *http.Response) (*DevelopmentEnvironmentsDeletePreviewListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevelopmentEnvironmentsDeletePreviewListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDeletePreviewList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDojoGroupMembersListResponse parses an HTTP response from a DojoGroupMembersListWithResponse call
func ParseDojoGroupMembersListResponse(rsp *http.Response) (*DojoGroupMembersListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DojoGroupMembersListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDojoGroupMemberList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDojoGroupMembersCreateResponse parses an HTTP response from a DojoGroupMembersCreateWithResponse call
func ParseDojoGroupMembersCreateResponse(rsp *http.Response) (*DojoGroupMembersCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DojoGroupMembersCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DojoGroupMember
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDojoGroupMembersDestroyResponse parses an HTTP response from a DojoGroupMembersDestroyWithResponse call
func ParseDojoGroupMembersDestroyResponse(rsp *http.Response) (*DojoGroupMembersDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DojoGroupMembersDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDojoGroupMembersRetrieveResponse parses an HTTP response from a DojoGroupMembersRetrieveWithResponse call
func ParseDojoGroupMembersRetrieveResponse(rsp *http.Response) (*DojoGroupMembersRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DojoGroupMembersRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DojoGroupMember
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDojoGroupMembersPartialUpdateResponse parses an HTTP response from a DojoGroupMembersPartialUpdateWithResponse call
func ParseDojoGroupMembersPartialUpdateResponse(rsp *http.Response) (*DojoGroupMembersPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DojoGroupMembersPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DojoGroupMember
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDojoGroupMembersUpdateResponse parses an HTTP response from a DojoGroupMembersUpdateWithResponse call
func ParseDojoGroupMembersUpdateResponse(rsp *http.Response) (*DojoGroupMembersUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DojoGroupMembersUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DojoGroupMember
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDojoGroupMembersDeletePreviewListResponse parses an HTTP response from a DojoGroupMembersDeletePreviewListWithResponse call
func ParseDojoGroupMembersDeletePreviewListResponse(rsp *http.Response) (*DojoGroupMembersDeletePreviewListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DojoGroupMembersDeletePreviewListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDeletePreviewList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDojoGroupsListResponse parses an HTTP response from a DojoGroupsListWithResponse call
func ParseDojoGroupsListResponse(rsp *http.Response) (*DojoGroupsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DojoGroupsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDojoGroupList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDojoGroupsCreateResponse parses an HTTP response from a DojoGroupsCreateWithResponse call
func ParseDojoGroupsCreateResponse(rsp *http.Response) (*DojoGroupsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DojoGroupsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DojoGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDojoGroupsDestroyResponse parses an HTTP response from a DojoGroupsDestroyWithResponse call
func ParseDojoGroupsDestroyResponse(rsp *http.Response) (*DojoGroupsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DojoGroupsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDojoGroupsRetrieveResponse parses an HTTP response from a DojoGroupsRetrieveWithResponse call
func ParseDojoGroupsRetrieveResponse(rsp *http.Response) (*DojoGroupsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DojoGroupsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DojoGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDojoGroupsPartialUpdateResponse parses an HTTP response from a DojoGroupsPartialUpdateWithResponse call
func ParseDojoGroupsPartialUpdateResponse(rsp *http.Response) (*DojoGroupsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DojoGroupsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DojoGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDojoGroupsUpdateResponse parses an HTTP response from a DojoGroupsUpdateWithResponse call
func ParseDojoGroupsUpdateResponse(rsp *http.Response) (*DojoGroupsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DojoGroupsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DojoGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDojoGroupsDeletePreviewListResponse parses an HTTP response from a DojoGroupsDeletePreviewListWithResponse call
func ParseDojoGroupsDeletePreviewListResponse(rsp *http.Response) (*DojoGroupsDeletePreviewListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DojoGroupsDeletePreviewListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDeletePreviewList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEndpointMetaImportCreateResponse parses an HTTP response from a EndpointMetaImportCreateWithResponse call
func ParseEndpointMetaImportCreateResponse(rsp *http.Response) (*EndpointMetaImportCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EndpointMetaImportCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest EndpointMetaImporter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseEndpointStatusListResponse parses an HTTP response from a EndpointStatusListWithResponse call
func ParseEndpointStatusListResponse(rsp *http.Response) (*EndpointStatusListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EndpointStatusListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedEndpointStatusList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEndpointStatusCreateResponse parses an HTTP response from a EndpointStatusCreateWithResponse call
func ParseEndpointStatusCreateResponse(rsp *http.Response) (*EndpointStatusCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EndpointStatusCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest EndpointStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseEndpointStatusDestroyResponse parses an HTTP response from a EndpointStatusDestroyWithResponse call
func ParseEndpointStatusDestroyResponse(rsp *http.Response) (*EndpointStatusDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EndpointStatusDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEndpointStatusRetrieveResponse parses an HTTP response from a EndpointStatusRetrieveWithResponse call
func ParseEndpointStatusRetrieveResponse(rsp *http.Response) (*EndpointStatusRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EndpointStatusRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EndpointStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEndpointStatusPartialUpdateResponse parses an HTTP response from a EndpointStatusPartialUpdateWithResponse call
func ParseEndpointStatusPartialUpdateResponse(rsp *http.Response) (*EndpointStatusPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EndpointStatusPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EndpointStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEndpointStatusUpdateResponse parses an HTTP response from a EndpointStatusUpdateWithResponse call
func ParseEndpointStatusUpdateResponse(rsp *http.Response) (*EndpointStatusUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EndpointStatusUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EndpointStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEndpointStatusDeletePreviewListResponse parses an HTTP response from a EndpointStatusDeletePreviewListWithResponse call
func ParseEndpointStatusDeletePreviewListResponse(rsp *http.Response) (*EndpointStatusDeletePreviewListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EndpointStatusDeletePreviewListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDeletePreviewList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEndpointsListResponse parses an HTTP response from a EndpointsListWithResponse call
func ParseEndpointsListResponse(rsp *http.Response) (*EndpointsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EndpointsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedEndpointList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEndpointsCreateResponse parses an HTTP response from a EndpointsCreateWithResponse call
func ParseEndpointsCreateResponse(rsp *http.Response) (*EndpointsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EndpointsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Endpoint
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseEndpointsDestroyResponse parses an HTTP response from a EndpointsDestroyWithResponse call
func ParseEndpointsDestroyResponse(rsp *http.Response) (*EndpointsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EndpointsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEndpointsRetrieveResponse parses an HTTP response from a EndpointsRetrieveWithResponse call
func ParseEndpointsRetrieveResponse(rsp *http.Response) (*EndpointsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EndpointsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Endpoint
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEndpointsPartialUpdateResponse parses an HTTP response from a EndpointsPartialUpdateWithResponse call
func ParseEndpointsPartialUpdateResponse(rsp *http.Response) (*EndpointsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EndpointsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Endpoint
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEndpointsUpdateResponse parses an HTTP response from a EndpointsUpdateWithResponse call
func ParseEndpointsUpdateResponse(rsp *http.Response) (*EndpointsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EndpointsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Endpoint
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEndpointsDeletePreviewListResponse parses an HTTP response from a EndpointsDeletePreviewListWithResponse call
func ParseEndpointsDeletePreviewListResponse(rsp *http.Response) (*EndpointsDeletePreviewListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EndpointsDeletePreviewListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDeletePreviewList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEndpointsGenerateReportCreateResponse parses an HTTP response from a EndpointsGenerateReportCreateWithResponse call
func ParseEndpointsGenerateReportCreateResponse(rsp *http.Response) (*EndpointsGenerateReportCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EndpointsGenerateReportCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReportGenerate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEngagementPresetsListResponse parses an HTTP response from a EngagementPresetsListWithResponse call
func ParseEngagementPresetsListResponse(rsp *http.Response) (*EngagementPresetsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EngagementPresetsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedEngagementPresetsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEngagementPresetsCreateResponse parses an HTTP response from a EngagementPresetsCreateWithResponse call
func ParseEngagementPresetsCreateResponse(rsp *http.Response) (*EngagementPresetsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EngagementPresetsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest EngagementPresets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseEngagementPresetsDestroyResponse parses an HTTP response from a EngagementPresetsDestroyWithResponse call
func ParseEngagementPresetsDestroyResponse(rsp *http.Response) (*EngagementPresetsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EngagementPresetsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEngagementPresetsRetrieveResponse parses an HTTP response from a EngagementPresetsRetrieveWithResponse call
func ParseEngagementPresetsRetrieveResponse(rsp *http.Response) (*EngagementPresetsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EngagementPresetsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EngagementPresets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEngagementPresetsPartialUpdateResponse parses an HTTP response from a EngagementPresetsPartialUpdateWithResponse call
func ParseEngagementPresetsPartialUpdateResponse(rsp *http.Response) (*EngagementPresetsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EngagementPresetsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EngagementPresets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEngagementPresetsUpdateResponse parses an HTTP response from a EngagementPresetsUpdateWithResponse call
func ParseEngagementPresetsUpdateResponse(rsp *http.Response) (*EngagementPresetsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EngagementPresetsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EngagementPresets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEngagementPresetsDeletePreviewListResponse parses an HTTP response from a EngagementPresetsDeletePreviewListWithResponse call
func ParseEngagementPresetsDeletePreviewListResponse(rsp *http.Response) (*EngagementPresetsDeletePreviewListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EngagementPresetsDeletePreviewListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDeletePreviewList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEngagementsListResponse parses an HTTP response from a EngagementsListWithResponse call
func ParseEngagementsListResponse(rsp *http.Response) (*EngagementsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EngagementsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedEngagementList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEngagementsCreateResponse parses an HTTP response from a EngagementsCreateWithResponse call
func ParseEngagementsCreateResponse(rsp *http.Response) (*EngagementsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EngagementsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Engagement
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseEngagementsDestroyResponse parses an HTTP response from a EngagementsDestroyWithResponse call
func ParseEngagementsDestroyResponse(rsp *http.Response) (*EngagementsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EngagementsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEngagementsRetrieveResponse parses an HTTP response from a EngagementsRetrieveWithResponse call
func ParseEngagementsRetrieveResponse(rsp *http.Response) (*EngagementsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EngagementsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Engagement
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEngagementsPartialUpdateResponse parses an HTTP response from a EngagementsPartialUpdateWithResponse call
func ParseEngagementsPartialUpdateResponse(rsp *http.Response) (*EngagementsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EngagementsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Engagement
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEngagementsUpdateResponse parses an HTTP response from a EngagementsUpdateWithResponse call
func ParseEngagementsUpdateResponse(rsp *http.Response) (*EngagementsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EngagementsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Engagement
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEngagementsAcceptRisksCreateResponse parses an HTTP response from a EngagementsAcceptRisksCreateWithResponse call
func ParseEngagementsAcceptRisksCreateResponse(rsp *http.Response) (*EngagementsAcceptRisksCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EngagementsAcceptRisksCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []RiskAcceptance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseEngagementsCloseCreateResponse parses an HTTP response from a EngagementsCloseCreateWithResponse call
func ParseEngagementsCloseCreateResponse(rsp *http.Response) (*EngagementsCloseCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EngagementsCloseCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEngagementsCompleteChecklistRetrieveResponse parses an HTTP response from a EngagementsCompleteChecklistRetrieveWithResponse call
func ParseEngagementsCompleteChecklistRetrieveResponse(rsp *http.Response) (*EngagementsCompleteChecklistRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EngagementsCompleteChecklistRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Engagement
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEngagementsCompleteChecklistCreateResponse parses an HTTP response from a EngagementsCompleteChecklistCreateWithResponse call
func ParseEngagementsCompleteChecklistCreateResponse(rsp *http.Response) (*EngagementsCompleteChecklistCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EngagementsCompleteChecklistCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest EngagementCheckList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseEngagementsDeletePreviewListResponse parses an HTTP response from a EngagementsDeletePreviewListWithResponse call
func ParseEngagementsDeletePreviewListResponse(rsp *http.Response) (*EngagementsDeletePreviewListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EngagementsDeletePreviewListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDeletePreviewList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEngagementsFilesRetrieveResponse parses an HTTP response from a EngagementsFilesRetrieveWithResponse call
func ParseEngagementsFilesRetrieveResponse(rsp *http.Response) (*EngagementsFilesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EngagementsFilesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EngagementToFiles
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEngagementsFilesCreateResponse parses an HTTP response from a EngagementsFilesCreateWithResponse call
func ParseEngagementsFilesCreateResponse(rsp *http.Response) (*EngagementsFilesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EngagementsFilesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest File
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseEngagementsFilesDownloadRetrieveResponse parses an HTTP response from a EngagementsFilesDownloadRetrieveWithResponse call
func ParseEngagementsFilesDownloadRetrieveResponse(rsp *http.Response) (*EngagementsFilesDownloadRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EngagementsFilesDownloadRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RawFile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEngagementsGenerateReportCreateResponse parses an HTTP response from a EngagementsGenerateReportCreateWithResponse call
func ParseEngagementsGenerateReportCreateResponse(rsp *http.Response) (*EngagementsGenerateReportCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EngagementsGenerateReportCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReportGenerate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEngagementsNotesRetrieveResponse parses an HTTP response from a EngagementsNotesRetrieveWithResponse call
func ParseEngagementsNotesRetrieveResponse(rsp *http.Response) (*EngagementsNotesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EngagementsNotesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EngagementToNotes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEngagementsNotesCreateResponse parses an HTTP response from a EngagementsNotesCreateWithResponse call
func ParseEngagementsNotesCreateResponse(rsp *http.Response) (*EngagementsNotesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EngagementsNotesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Note
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseEngagementsReopenCreateResponse parses an HTTP response from a EngagementsReopenCreateWithResponse call
func ParseEngagementsReopenCreateResponse(rsp *http.Response) (*EngagementsReopenCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EngagementsReopenCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFindingTemplatesListResponse parses an HTTP response from a FindingTemplatesListWithResponse call
func ParseFindingTemplatesListResponse(rsp *http.Response) (*FindingTemplatesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingTemplatesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedFindingTemplateList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindingTemplatesCreateResponse parses an HTTP response from a FindingTemplatesCreateWithResponse call
func ParseFindingTemplatesCreateResponse(rsp *http.Response) (*FindingTemplatesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingTemplatesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest FindingTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseFindingTemplatesDestroyResponse parses an HTTP response from a FindingTemplatesDestroyWithResponse call
func ParseFindingTemplatesDestroyResponse(rsp *http.Response) (*FindingTemplatesDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingTemplatesDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFindingTemplatesRetrieveResponse parses an HTTP response from a FindingTemplatesRetrieveWithResponse call
func ParseFindingTemplatesRetrieveResponse(rsp *http.Response) (*FindingTemplatesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingTemplatesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FindingTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindingTemplatesPartialUpdateResponse parses an HTTP response from a FindingTemplatesPartialUpdateWithResponse call
func ParseFindingTemplatesPartialUpdateResponse(rsp *http.Response) (*FindingTemplatesPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingTemplatesPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FindingTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindingTemplatesUpdateResponse parses an HTTP response from a FindingTemplatesUpdateWithResponse call
func ParseFindingTemplatesUpdateResponse(rsp *http.Response) (*FindingTemplatesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingTemplatesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FindingTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindingTemplatesDeletePreviewListResponse parses an HTTP response from a FindingTemplatesDeletePreviewListWithResponse call
func ParseFindingTemplatesDeletePreviewListResponse(rsp *http.Response) (*FindingTemplatesDeletePreviewListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingTemplatesDeletePreviewListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDeletePreviewList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindingsListResponse parses an HTTP response from a FindingsListWithResponse call
func ParseFindingsListResponse(rsp *http.Response) (*FindingsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedFindingList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindingsCreateResponse parses an HTTP response from a FindingsCreateWithResponse call
func ParseFindingsCreateResponse(rsp *http.Response) (*FindingsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest FindingCreate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseFindingsAcceptRisksCreateResponse parses an HTTP response from a FindingsAcceptRisksCreateWithResponse call
func ParseFindingsAcceptRisksCreateResponse(rsp *http.Response) (*FindingsAcceptRisksCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsAcceptRisksCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PaginatedRiskAcceptanceList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseFindingsGenerateReportCreateResponse parses an HTTP response from a FindingsGenerateReportCreateWithResponse call
func ParseFindingsGenerateReportCreateResponse(rsp *http.Response) (*FindingsGenerateReportCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsGenerateReportCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReportGenerate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindingsDestroyResponse parses an HTTP response from a FindingsDestroyWithResponse call
func ParseFindingsDestroyResponse(rsp *http.Response) (*FindingsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFindingsRetrieveResponse parses an HTTP response from a FindingsRetrieveWithResponse call
func ParseFindingsRetrieveResponse(rsp *http.Response) (*FindingsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Finding
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindingsPartialUpdateResponse parses an HTTP response from a FindingsPartialUpdateWithResponse call
func ParseFindingsPartialUpdateResponse(rsp *http.Response) (*FindingsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Finding
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindingsUpdateResponse parses an HTTP response from a FindingsUpdateWithResponse call
func ParseFindingsUpdateResponse(rsp *http.Response) (*FindingsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Finding
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindingsCloseCreateResponse parses an HTTP response from a FindingsCloseCreateWithResponse call
func ParseFindingsCloseCreateResponse(rsp *http.Response) (*FindingsCloseCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsCloseCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FindingClose
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindingsDeletePreviewListResponse parses an HTTP response from a FindingsDeletePreviewListWithResponse call
func ParseFindingsDeletePreviewListResponse(rsp *http.Response) (*FindingsDeletePreviewListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsDeletePreviewListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDeletePreviewList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindingsDuplicateListResponse parses an HTTP response from a FindingsDuplicateListWithResponse call
func ParseFindingsDuplicateListResponse(rsp *http.Response) (*FindingsDuplicateListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsDuplicateListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Finding
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindingsDuplicateResetCreateResponse parses an HTTP response from a FindingsDuplicateResetCreateWithResponse call
func ParseFindingsDuplicateResetCreateResponse(rsp *http.Response) (*FindingsDuplicateResetCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsDuplicateResetCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFindingsFilesRetrieveResponse parses an HTTP response from a FindingsFilesRetrieveWithResponse call
func ParseFindingsFilesRetrieveResponse(rsp *http.Response) (*FindingsFilesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsFilesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FindingToFiles
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindingsFilesCreateResponse parses an HTTP response from a FindingsFilesCreateWithResponse call
func ParseFindingsFilesCreateResponse(rsp *http.Response) (*FindingsFilesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsFilesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest File
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseFindingsFilesDownloadRetrieveResponse parses an HTTP response from a FindingsFilesDownloadRetrieveWithResponse call
func ParseFindingsFilesDownloadRetrieveResponse(rsp *http.Response) (*FindingsFilesDownloadRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsFilesDownloadRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RawFile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindingsMetadataDestroyResponse parses an HTTP response from a FindingsMetadataDestroyWithResponse call
func ParseFindingsMetadataDestroyResponse(rsp *http.Response) (*FindingsMetadataDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsMetadataDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFindingsMetadataListResponse parses an HTTP response from a FindingsMetadataListWithResponse call
func ParseFindingsMetadataListResponse(rsp *http.Response) (*FindingsMetadataListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsMetadataListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FindingMeta
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindingsMetadataCreateResponse parses an HTTP response from a FindingsMetadataCreateWithResponse call
func ParseFindingsMetadataCreateResponse(rsp *http.Response) (*FindingsMetadataCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsMetadataCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FindingMeta
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindingsMetadataUpdateResponse parses an HTTP response from a FindingsMetadataUpdateWithResponse call
func ParseFindingsMetadataUpdateResponse(rsp *http.Response) (*FindingsMetadataUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsMetadataUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FindingMeta
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindingsNotesRetrieveResponse parses an HTTP response from a FindingsNotesRetrieveWithResponse call
func ParseFindingsNotesRetrieveResponse(rsp *http.Response) (*FindingsNotesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsNotesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FindingToNotes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindingsNotesCreateResponse parses an HTTP response from a FindingsNotesCreateWithResponse call
func ParseFindingsNotesCreateResponse(rsp *http.Response) (*FindingsNotesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsNotesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Note
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseFindingsOriginalCreateResponse parses an HTTP response from a FindingsOriginalCreateWithResponse call
func ParseFindingsOriginalCreateResponse(rsp *http.Response) (*FindingsOriginalCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsOriginalCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFindingsRemoveNotePartialUpdateResponse parses an HTTP response from a FindingsRemoveNotePartialUpdateWithResponse call
func ParseFindingsRemoveNotePartialUpdateResponse(rsp *http.Response) (*FindingsRemoveNotePartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsRemoveNotePartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFindingsRemoveTagsPartialUpdateResponse parses an HTTP response from a FindingsRemoveTagsPartialUpdateWithResponse call
func ParseFindingsRemoveTagsPartialUpdateResponse(rsp *http.Response) (*FindingsRemoveTagsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsRemoveTagsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFindingsRemoveTagsUpdateResponse parses an HTTP response from a FindingsRemoveTagsUpdateWithResponse call
func ParseFindingsRemoveTagsUpdateResponse(rsp *http.Response) (*FindingsRemoveTagsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsRemoveTagsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFindingsRequestResponseRetrieveResponse parses an HTTP response from a FindingsRequestResponseRetrieveWithResponse call
func ParseFindingsRequestResponseRetrieveResponse(rsp *http.Response) (*FindingsRequestResponseRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsRequestResponseRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BurpRawRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindingsRequestResponseCreateResponse parses an HTTP response from a FindingsRequestResponseCreateWithResponse call
func ParseFindingsRequestResponseCreateResponse(rsp *http.Response) (*FindingsRequestResponseCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsRequestResponseCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BurpRawRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseFindingsTagsRetrieveResponse parses an HTTP response from a FindingsTagsRetrieveWithResponse call
func ParseFindingsTagsRetrieveResponse(rsp *http.Response) (*FindingsTagsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsTagsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Tag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFindingsTagsCreateResponse parses an HTTP response from a FindingsTagsCreateWithResponse call
func ParseFindingsTagsCreateResponse(rsp *http.Response) (*FindingsTagsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindingsTagsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Tag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGlobalRolesListResponse parses an HTTP response from a GlobalRolesListWithResponse call
func ParseGlobalRolesListResponse(rsp *http.Response) (*GlobalRolesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GlobalRolesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedGlobalRoleList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGlobalRolesCreateResponse parses an HTTP response from a GlobalRolesCreateWithResponse call
func ParseGlobalRolesCreateResponse(rsp *http.Response) (*GlobalRolesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GlobalRolesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest GlobalRole
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGlobalRolesDestroyResponse parses an HTTP response from a GlobalRolesDestroyWithResponse call
func ParseGlobalRolesDestroyResponse(rsp *http.Response) (*GlobalRolesDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GlobalRolesDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGlobalRolesRetrieveResponse parses an HTTP response from a GlobalRolesRetrieveWithResponse call
func ParseGlobalRolesRetrieveResponse(rsp *http.Response) (*GlobalRolesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GlobalRolesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GlobalRole
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGlobalRolesPartialUpdateResponse parses an HTTP response from a GlobalRolesPartialUpdateWithResponse call
func ParseGlobalRolesPartialUpdateResponse(rsp *http.Response) (*GlobalRolesPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GlobalRolesPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GlobalRole
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGlobalRolesUpdateResponse parses an HTTP response from a GlobalRolesUpdateWithResponse call
func ParseGlobalRolesUpdateResponse(rsp *http.Response) (*GlobalRolesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GlobalRolesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GlobalRole
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGlobalRolesDeletePreviewListResponse parses an HTTP response from a GlobalRolesDeletePreviewListWithResponse call
func ParseGlobalRolesDeletePreviewListResponse(rsp *http.Response) (*GlobalRolesDeletePreviewListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GlobalRolesDeletePreviewListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDeletePreviewList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseImportLanguagesCreateResponse parses an HTTP response from a ImportLanguagesCreateWithResponse call
func ParseImportLanguagesCreateResponse(rsp *http.Response) (*ImportLanguagesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ImportLanguagesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ImportLanguages
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseImportScanCreateResponse parses an HTTP response from a ImportScanCreateWithResponse call
func ParseImportScanCreateResponse(rsp *http.Response) (*ImportScanCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ImportScanCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ImportScan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseJiraConfigurationsListResponse parses an HTTP response from a JiraConfigurationsListWithResponse call
func ParseJiraConfigurationsListResponse(rsp *http.Response) (*JiraConfigurationsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraConfigurationsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedJIRAInstanceList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseJiraConfigurationsCreateResponse parses an HTTP response from a JiraConfigurationsCreateWithResponse call
func ParseJiraConfigurationsCreateResponse(rsp *http.Response) (*JiraConfigurationsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraConfigurationsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest JIRAInstance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseJiraConfigurationsDestroyResponse parses an HTTP response from a JiraConfigurationsDestroyWithResponse call
func ParseJiraConfigurationsDestroyResponse(rsp *http.Response) (*JiraConfigurationsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraConfigurationsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseJiraConfigurationsRetrieveResponse parses an HTTP response from a JiraConfigurationsRetrieveWithResponse call
func ParseJiraConfigurationsRetrieveResponse(rsp *http.Response) (*JiraConfigurationsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraConfigurationsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JIRAInstance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseJiraConfigurationsPartialUpdateResponse parses an HTTP response from a JiraConfigurationsPartialUpdateWithResponse call
func ParseJiraConfigurationsPartialUpdateResponse(rsp *http.Response) (*JiraConfigurationsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraConfigurationsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JIRAInstance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseJiraConfigurationsUpdateResponse parses an HTTP response from a JiraConfigurationsUpdateWithResponse call
func ParseJiraConfigurationsUpdateResponse(rsp *http.Response) (*JiraConfigurationsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraConfigurationsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JIRAInstance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseJiraConfigurationsDeletePreviewListResponse parses an HTTP response from a JiraConfigurationsDeletePreviewListWithResponse call
func ParseJiraConfigurationsDeletePreviewListResponse(rsp *http.Response) (*JiraConfigurationsDeletePreviewListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraConfigurationsDeletePreviewListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDeletePreviewList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseJiraFindingMappingsListResponse parses an HTTP response from a JiraFindingMappingsListWithResponse call
func ParseJiraFindingMappingsListResponse(rsp *http.Response) (*JiraFindingMappingsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraFindingMappingsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedJIRAIssueList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseJiraFindingMappingsCreateResponse parses an HTTP response from a JiraFindingMappingsCreateWithResponse call
func ParseJiraFindingMappingsCreateResponse(rsp *http.Response) (*JiraFindingMappingsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraFindingMappingsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest JIRAIssue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseJiraFindingMappingsDestroyResponse parses an HTTP response from a JiraFindingMappingsDestroyWithResponse call
func ParseJiraFindingMappingsDestroyResponse(rsp *http.Response) (*JiraFindingMappingsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraFindingMappingsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseJiraFindingMappingsRetrieveResponse parses an HTTP response from a JiraFindingMappingsRetrieveWithResponse call
func ParseJiraFindingMappingsRetrieveResponse(rsp *http.Response) (*JiraFindingMappingsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraFindingMappingsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JIRAIssue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseJiraFindingMappingsPartialUpdateResponse parses an HTTP response from a JiraFindingMappingsPartialUpdateWithResponse call
func ParseJiraFindingMappingsPartialUpdateResponse(rsp *http.Response) (*JiraFindingMappingsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraFindingMappingsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JIRAIssue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseJiraFindingMappingsUpdateResponse parses an HTTP response from a JiraFindingMappingsUpdateWithResponse call
func ParseJiraFindingMappingsUpdateResponse(rsp *http.Response) (*JiraFindingMappingsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraFindingMappingsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JIRAIssue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseJiraFindingMappingsDeletePreviewListResponse parses an HTTP response from a JiraFindingMappingsDeletePreviewListWithResponse call
func ParseJiraFindingMappingsDeletePreviewListResponse(rsp *http.Response) (*JiraFindingMappingsDeletePreviewListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraFindingMappingsDeletePreviewListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDeletePreviewList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseJiraInstancesListResponse parses an HTTP response from a JiraInstancesListWithResponse call
func ParseJiraInstancesListResponse(rsp *http.Response) (*JiraInstancesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraInstancesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedJIRAInstanceList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseJiraInstancesCreateResponse parses an HTTP response from a JiraInstancesCreateWithResponse call
func ParseJiraInstancesCreateResponse(rsp *http.Response) (*JiraInstancesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraInstancesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest JIRAInstance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseJiraInstancesDestroyResponse parses an HTTP response from a JiraInstancesDestroyWithResponse call
func ParseJiraInstancesDestroyResponse(rsp *http.Response) (*JiraInstancesDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraInstancesDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseJiraInstancesRetrieveResponse parses an HTTP response from a JiraInstancesRetrieveWithResponse call
func ParseJiraInstancesRetrieveResponse(rsp *http.Response) (*JiraInstancesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraInstancesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JIRAInstance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseJiraInstancesPartialUpdateResponse parses an HTTP response from a JiraInstancesPartialUpdateWithResponse call
func ParseJiraInstancesPartialUpdateResponse(rsp *http.Response) (*JiraInstancesPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraInstancesPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JIRAInstance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseJiraInstancesUpdateResponse parses an HTTP response from a JiraInstancesUpdateWithResponse call
func ParseJiraInstancesUpdateResponse(rsp *http.Response) (*JiraInstancesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraInstancesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JIRAInstance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseJiraInstancesDeletePreviewListResponse parses an HTTP response from a JiraInstancesDeletePreviewListWithResponse call
func ParseJiraInstancesDeletePreviewListResponse(rsp *http.Response) (*JiraInstancesDeletePreviewListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraInstancesDeletePreviewListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDeletePreviewList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseJiraProductConfigurationsListResponse parses an HTTP response from a JiraProductConfigurationsListWithResponse call
func ParseJiraProductConfigurationsListResponse(rsp *http.Response) (*JiraProductConfigurationsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraProductConfigurationsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedJIRAProjectList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseJiraProductConfigurationsCreateResponse parses an HTTP response from a JiraProductConfigurationsCreateWithResponse call
func ParseJiraProductConfigurationsCreateResponse(rsp *http.Response) (*JiraProductConfigurationsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraProductConfigurationsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest JIRAProject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseJiraProductConfigurationsDestroyResponse parses an HTTP response from a JiraProductConfigurationsDestroyWithResponse call
func ParseJiraProductConfigurationsDestroyResponse(rsp *http.Response) (*JiraProductConfigurationsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraProductConfigurationsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseJiraProductConfigurationsRetrieveResponse parses an HTTP response from a JiraProductConfigurationsRetrieveWithResponse call
func ParseJiraProductConfigurationsRetrieveResponse(rsp *http.Response) (*JiraProductConfigurationsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraProductConfigurationsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JIRAProject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseJiraProductConfigurationsPartialUpdateResponse parses an HTTP response from a JiraProductConfigurationsPartialUpdateWithResponse call
func ParseJiraProductConfigurationsPartialUpdateResponse(rsp *http.Response) (*JiraProductConfigurationsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraProductConfigurationsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JIRAProject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseJiraProductConfigurationsUpdateResponse parses an HTTP response from a JiraProductConfigurationsUpdateWithResponse call
func ParseJiraProductConfigurationsUpdateResponse(rsp *http.Response) (*JiraProductConfigurationsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraProductConfigurationsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JIRAProject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseJiraProductConfigurationsDeletePreviewListResponse parses an HTTP response from a JiraProductConfigurationsDeletePreviewListWithResponse call
func ParseJiraProductConfigurationsDeletePreviewListResponse(rsp *http.Response) (*JiraProductConfigurationsDeletePreviewListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraProductConfigurationsDeletePreviewListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDeletePreviewList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseJiraProjectsListResponse parses an HTTP response from a JiraProjectsListWithResponse call
func ParseJiraProjectsListResponse(rsp *http.Response) (*JiraProjectsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraProjectsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedJIRAProjectList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseJiraProjectsCreateResponse parses an HTTP response from a JiraProjectsCreateWithResponse call
func ParseJiraProjectsCreateResponse(rsp *http.Response) (*JiraProjectsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraProjectsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest JIRAProject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseJiraProjectsDestroyResponse parses an HTTP response from a JiraProjectsDestroyWithResponse call
func ParseJiraProjectsDestroyResponse(rsp *http.Response) (*JiraProjectsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraProjectsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseJiraProjectsRetrieveResponse parses an HTTP response from a JiraProjectsRetrieveWithResponse call
func ParseJiraProjectsRetrieveResponse(rsp *http.Response) (*JiraProjectsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraProjectsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JIRAProject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseJiraProjectsPartialUpdateResponse parses an HTTP response from a JiraProjectsPartialUpdateWithResponse call
func ParseJiraProjectsPartialUpdateResponse(rsp *http.Response) (*JiraProjectsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraProjectsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JIRAProject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseJiraProjectsUpdateResponse parses an HTTP response from a JiraProjectsUpdateWithResponse call
func ParseJiraProjectsUpdateResponse(rsp *http.Response) (*JiraProjectsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraProjectsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JIRAProject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseJiraProjectsDeletePreviewListResponse parses an HTTP response from a JiraProjectsDeletePreviewListWithResponse call
func ParseJiraProjectsDeletePreviewListResponse(rsp *http.Response) (*JiraProjectsDeletePreviewListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JiraProjectsDeletePreviewListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDeletePreviewList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLanguageTypesListResponse parses an HTTP response from a LanguageTypesListWithResponse call
func ParseLanguageTypesListResponse(rsp *http.Response) (*LanguageTypesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LanguageTypesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedLanguageTypeList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLanguageTypesCreateResponse parses an HTTP response from a LanguageTypesCreateWithResponse call
func ParseLanguageTypesCreateResponse(rsp *http.Response) (*LanguageTypesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LanguageTypesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest LanguageType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseLanguageTypesDestroyResponse parses an HTTP response from a LanguageTypesDestroyWithResponse call
func ParseLanguageTypesDestroyResponse(rsp *http.Response) (*LanguageTypesDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LanguageTypesDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseLanguageTypesRetrieveResponse parses an HTTP response from a LanguageTypesRetrieveWithResponse call
func ParseLanguageTypesRetrieveResponse(rsp *http.Response) (*LanguageTypesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LanguageTypesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LanguageType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLanguageTypesPartialUpdateResponse parses an HTTP response from a LanguageTypesPartialUpdateWithResponse call
func ParseLanguageTypesPartialUpdateResponse(rsp *http.Response) (*LanguageTypesPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LanguageTypesPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LanguageType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLanguageTypesUpdateResponse parses an HTTP response from a LanguageTypesUpdateWithResponse call
func ParseLanguageTypesUpdateResponse(rsp *http.Response) (*LanguageTypesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LanguageTypesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LanguageType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLanguageTypesDeletePreviewListResponse parses an HTTP response from a LanguageTypesDeletePreviewListWithResponse call
func ParseLanguageTypesDeletePreviewListResponse(rsp *http.Response) (*LanguageTypesDeletePreviewListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LanguageTypesDeletePreviewListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDeletePreviewList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLanguagesListResponse parses an HTTP response from a LanguagesListWithResponse call
func ParseLanguagesListResponse(rsp *http.Response) (*LanguagesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LanguagesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedLanguageList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLanguagesCreateResponse parses an HTTP response from a LanguagesCreateWithResponse call
func ParseLanguagesCreateResponse(rsp *http.Response) (*LanguagesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LanguagesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Language
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseLanguagesDestroyResponse parses an HTTP response from a LanguagesDestroyWithResponse call
func ParseLanguagesDestroyResponse(rsp *http.Response) (*LanguagesDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LanguagesDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseLanguagesRetrieveResponse parses an HTTP response from a LanguagesRetrieveWithResponse call
func ParseLanguagesRetrieveResponse(rsp *http.Response) (*LanguagesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LanguagesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Language
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLanguagesPartialUpdateResponse parses an HTTP response from a LanguagesPartialUpdateWithResponse call
func ParseLanguagesPartialUpdateResponse(rsp *http.Response) (*LanguagesPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LanguagesPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Language
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLanguagesUpdateResponse parses an HTTP response from a LanguagesUpdateWithResponse call
func ParseLanguagesUpdateResponse(rsp *http.Response) (*LanguagesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LanguagesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Language
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLanguagesDeletePreviewListResponse parses an HTTP response from a LanguagesDeletePreviewListWithResponse call
func ParseLanguagesDeletePreviewListResponse(rsp *http.Response) (*LanguagesDeletePreviewListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LanguagesDeletePreviewListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDeletePreviewList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMetadataListResponse parses an HTTP response from a MetadataListWithResponse call
func ParseMetadataListResponse(rsp *http.Response) (*MetadataListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MetadataListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedMetaList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMetadataCreateResponse parses an HTTP response from a MetadataCreateWithResponse call
func ParseMetadataCreateResponse(rsp *http.Response) (*MetadataCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MetadataCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Meta
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseMetadataDestroyResponse parses an HTTP response from a MetadataDestroyWithResponse call
func ParseMetadataDestroyResponse(rsp *http.Response) (*MetadataDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MetadataDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseMetadataRetrieveResponse parses an HTTP response from a MetadataRetrieveWithResponse call
func ParseMetadataRetrieveResponse(rsp *http.Response) (*MetadataRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MetadataRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Meta
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMetadataPartialUpdateResponse parses an HTTP response from a MetadataPartialUpdateWithResponse call
func ParseMetadataPartialUpdateResponse(rsp *http.Response) (*MetadataPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MetadataPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Meta
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMetadataUpdateResponse parses an HTTP response from a MetadataUpdateWithResponse call
func ParseMetadataUpdateResponse(rsp *http.Response) (*MetadataUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MetadataUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Meta
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMetadataDeletePreviewListResponse parses an HTTP response from a MetadataDeletePreviewListWithResponse call
func ParseMetadataDeletePreviewListResponse(rsp *http.Response) (*MetadataDeletePreviewListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MetadataDeletePreviewListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDeletePreviewList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNetworkLocationsListResponse parses an HTTP response from a NetworkLocationsListWithResponse call
func ParseNetworkLocationsListResponse(rsp *http.Response) (*NetworkLocationsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkLocationsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedNetworkLocationsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNetworkLocationsCreateResponse parses an HTTP response from a NetworkLocationsCreateWithResponse call
func ParseNetworkLocationsCreateResponse(rsp *http.Response) (*NetworkLocationsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkLocationsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest NetworkLocations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseNetworkLocationsDestroyResponse parses an HTTP response from a NetworkLocationsDestroyWithResponse call
func ParseNetworkLocationsDestroyResponse(rsp *http.Response) (*NetworkLocationsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkLocationsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseNetworkLocationsRetrieveResponse parses an HTTP response from a NetworkLocationsRetrieveWithResponse call
func ParseNetworkLocationsRetrieveResponse(rsp *http.Response) (*NetworkLocationsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkLocationsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkLocations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNetworkLocationsPartialUpdateResponse parses an HTTP response from a NetworkLocationsPartialUpdateWithResponse call
func ParseNetworkLocationsPartialUpdateResponse(rsp *http.Response) (*NetworkLocationsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkLocationsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkLocations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNetworkLocationsUpdateResponse parses an HTTP response from a NetworkLocationsUpdateWithResponse call
func ParseNetworkLocationsUpdateResponse(rsp *http.Response) (*NetworkLocationsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkLocationsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkLocations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNetworkLocationsDeletePreviewListResponse parses an HTTP response from a NetworkLocationsDeletePreviewListWithResponse call
func ParseNetworkLocationsDeletePreviewListResponse(rsp *http.Response) (*NetworkLocationsDeletePreviewListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkLocationsDeletePreviewListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDeletePreviewList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNoteTypeListResponse parses an HTTP response from a NoteTypeListWithResponse call
func ParseNoteTypeListResponse(rsp *http.Response) (*NoteTypeListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NoteTypeListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedNoteTypeList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNoteTypeCreateResponse parses an HTTP response from a NoteTypeCreateWithResponse call
func ParseNoteTypeCreateResponse(rsp *http.Response) (*NoteTypeCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NoteTypeCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest NoteType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseNoteTypeDestroyResponse parses an HTTP response from a NoteTypeDestroyWithResponse call
func ParseNoteTypeDestroyResponse(rsp *http.Response) (*NoteTypeDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NoteTypeDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseNoteTypeRetrieveResponse parses an HTTP response from a NoteTypeRetrieveWithResponse call
func ParseNoteTypeRetrieveResponse(rsp *http.Response) (*NoteTypeRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NoteTypeRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NoteType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNoteTypePartialUpdateResponse parses an HTTP response from a NoteTypePartialUpdateWithResponse call
func ParseNoteTypePartialUpdateResponse(rsp *http.Response) (*NoteTypePartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NoteTypePartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NoteType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNoteTypeUpdateResponse parses an HTTP response from a NoteTypeUpdateWithResponse call
func ParseNoteTypeUpdateResponse(rsp *http.Response) (*NoteTypeUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NoteTypeUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NoteType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNoteTypeDeletePreviewListResponse parses an HTTP response from a NoteTypeDeletePreviewListWithResponse call
func ParseNoteTypeDeletePreviewListResponse(rsp *http.Response) (*NoteTypeDeletePreviewListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NoteTypeDeletePreviewListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDeletePreviewList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNotesListResponse parses an HTTP response from a NotesListWithResponse call
func ParseNotesListResponse(rsp *http.Response) (*NotesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NotesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedNoteList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNotesRetrieveResponse parses an HTTP response from a NotesRetrieveWithResponse call
func ParseNotesRetrieveResponse(rsp *http.Response) (*NotesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NotesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Note
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNotesPartialUpdateResponse parses an HTTP response from a NotesPartialUpdateWithResponse call
func ParseNotesPartialUpdateResponse(rsp *http.Response) (*NotesPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NotesPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Note
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNotesUpdateResponse parses an HTTP response from a NotesUpdateWithResponse call
func ParseNotesUpdateResponse(rsp *http.Response) (*NotesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NotesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Note
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNotificationsListResponse parses an HTTP response from a NotificationsListWithResponse call
func ParseNotificationsListResponse(rsp *http.Response) (*NotificationsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NotificationsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedNotificationsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNotificationsCreateResponse parses an HTTP response from a NotificationsCreateWithResponse call
func ParseNotificationsCreateResponse(rsp *http.Response) (*NotificationsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NotificationsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Notifications
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseNotificationsDestroyResponse parses an HTTP response from a NotificationsDestroyWithResponse call
func ParseNotificationsDestroyResponse(rsp *http.Response) (*NotificationsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NotificationsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseNotificationsRetrieveResponse parses an HTTP response from a NotificationsRetrieveWithResponse call
func ParseNotificationsRetrieveResponse(rsp *http.Response) (*NotificationsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NotificationsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Notifications
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNotificationsPartialUpdateResponse parses an HTTP response from a NotificationsPartialUpdateWithResponse call
func ParseNotificationsPartialUpdateResponse(rsp *http.Response) (*NotificationsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NotificationsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Notifications
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNotificationsUpdateResponse parses an HTTP response from a NotificationsUpdateWithResponse call
func ParseNotificationsUpdateResponse(rsp *http.Response) (*NotificationsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NotificationsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Notifications
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNotificationsDeletePreviewListResponse parses an HTTP response from a NotificationsDeletePreviewListWithResponse call
func ParseNotificationsDeletePreviewListResponse(rsp *http.Response) (*NotificationsDeletePreviewListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NotificationsDeletePreviewListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDeletePreviewList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOa3SchemaRetrieveResponse parses an HTTP response from a Oa3SchemaRetrieveWithResponse call
func ParseOa3SchemaRetrieveResponse(rsp *http.Response) (*Oa3SchemaRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Oa3SchemaRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndOaiOpenapiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (application/vnd.oai.openapi) unsupported

	}

	return response, nil
}

// ParseProductApiScanConfigurationsListResponse parses an HTTP response from a ProductApiScanConfigurationsListWithResponse call
func ParseProductApiScanConfigurationsListResponse(rsp *http.Response) (*ProductApiScanConfigurationsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductApiScanConfigurationsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedProductAPIScanConfigurationList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductApiScanConfigurationsCreateResponse parses an HTTP response from a ProductApiScanConfigurationsCreateWithResponse call
func ParseProductApiScanConfigurationsCreateResponse(rsp *http.Response) (*ProductApiScanConfigurationsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductApiScanConfigurationsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ProductAPIScanConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseProductApiScanConfigurationsDestroyResponse parses an HTTP response from a ProductApiScanConfigurationsDestroyWithResponse call
func ParseProductApiScanConfigurationsDestroyResponse(rsp *http.Response) (*ProductApiScanConfigurationsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductApiScanConfigurationsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseProductApiScanConfigurationsRetrieveResponse parses an HTTP response from a ProductApiScanConfigurationsRetrieveWithResponse call
func ParseProductApiScanConfigurationsRetrieveResponse(rsp *http.Response) (*ProductApiScanConfigurationsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductApiScanConfigurationsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductAPIScanConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductApiScanConfigurationsPartialUpdateResponse parses an HTTP response from a ProductApiScanConfigurationsPartialUpdateWithResponse call
func ParseProductApiScanConfigurationsPartialUpdateResponse(rsp *http.Response) (*ProductApiScanConfigurationsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductApiScanConfigurationsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductAPIScanConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductApiScanConfigurationsUpdateResponse parses an HTTP response from a ProductApiScanConfigurationsUpdateWithResponse call
func ParseProductApiScanConfigurationsUpdateResponse(rsp *http.Response) (*ProductApiScanConfigurationsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductApiScanConfigurationsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductAPIScanConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductApiScanConfigurationsDeletePreviewListResponse parses an HTTP response from a ProductApiScanConfigurationsDeletePreviewListWithResponse call
func ParseProductApiScanConfigurationsDeletePreviewListResponse(rsp *http.Response) (*ProductApiScanConfigurationsDeletePreviewListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductApiScanConfigurationsDeletePreviewListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDeletePreviewList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductGroupsListResponse parses an HTTP response from a ProductGroupsListWithResponse call
func ParseProductGroupsListResponse(rsp *http.Response) (*ProductGroupsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductGroupsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedProductGroupList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductGroupsCreateResponse parses an HTTP response from a ProductGroupsCreateWithResponse call
func ParseProductGroupsCreateResponse(rsp *http.Response) (*ProductGroupsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductGroupsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ProductGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseProductGroupsDestroyResponse parses an HTTP response from a ProductGroupsDestroyWithResponse call
func ParseProductGroupsDestroyResponse(rsp *http.Response) (*ProductGroupsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductGroupsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseProductGroupsRetrieveResponse parses an HTTP response from a ProductGroupsRetrieveWithResponse call
func ParseProductGroupsRetrieveResponse(rsp *http.Response) (*ProductGroupsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductGroupsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductGroupsPartialUpdateResponse parses an HTTP response from a ProductGroupsPartialUpdateWithResponse call
func ParseProductGroupsPartialUpdateResponse(rsp *http.Response) (*ProductGroupsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductGroupsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseProductGroupsUpdateResponse parses an HTTP response from a ProductGroupsUpdateWithResponse call
func ParseProductGroupsUpdateResponse(rsp *http.Response) (*ProductGroupsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductGroupsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductGroupsDeletePreviewListResponse parses an HTTP response from a ProductGroupsDeletePreviewListWithResponse call
func ParseProductGroupsDeletePreviewListResponse(rsp *http.Response) (*ProductGroupsDeletePreviewListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductGroupsDeletePreviewListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDeletePreviewList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductMembersListResponse parses an HTTP response from a ProductMembersListWithResponse call
func ParseProductMembersListResponse(rsp *http.Response) (*ProductMembersListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductMembersListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedProductMemberList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductMembersCreateResponse parses an HTTP response from a ProductMembersCreateWithResponse call
func ParseProductMembersCreateResponse(rsp *http.Response) (*ProductMembersCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductMembersCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ProductMember
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseProductMembersDestroyResponse parses an HTTP response from a ProductMembersDestroyWithResponse call
func ParseProductMembersDestroyResponse(rsp *http.Response) (*ProductMembersDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductMembersDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseProductMembersRetrieveResponse parses an HTTP response from a ProductMembersRetrieveWithResponse call
func ParseProductMembersRetrieveResponse(rsp *http.Response) (*ProductMembersRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductMembersRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductMember
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductMembersPartialUpdateResponse parses an HTTP response from a ProductMembersPartialUpdateWithResponse call
func ParseProductMembersPartialUpdateResponse(rsp *http.Response) (*ProductMembersPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductMembersPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseProductMembersUpdateResponse parses an HTTP response from a ProductMembersUpdateWithResponse call
func ParseProductMembersUpdateResponse(rsp *http.Response) (*ProductMembersUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductMembersUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductMember
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductMembersDeletePreviewListResponse parses an HTTP response from a ProductMembersDeletePreviewListWithResponse call
func ParseProductMembersDeletePreviewListResponse(rsp *http.Response) (*ProductMembersDeletePreviewListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductMembersDeletePreviewListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDeletePreviewList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductTypeGroupsListResponse parses an HTTP response from a ProductTypeGroupsListWithResponse call
func ParseProductTypeGroupsListResponse(rsp *http.Response) (*ProductTypeGroupsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductTypeGroupsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedProductTypeGroupList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductTypeGroupsCreateResponse parses an HTTP response from a ProductTypeGroupsCreateWithResponse call
func ParseProductTypeGroupsCreateResponse(rsp *http.Response) (*ProductTypeGroupsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductTypeGroupsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ProductTypeGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseProductTypeGroupsDestroyResponse parses an HTTP response from a ProductTypeGroupsDestroyWithResponse call
func ParseProductTypeGroupsDestroyResponse(rsp *http.Response) (*ProductTypeGroupsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductTypeGroupsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseProductTypeGroupsRetrieveResponse parses an HTTP response from a ProductTypeGroupsRetrieveWithResponse call
func ParseProductTypeGroupsRetrieveResponse(rsp *http.Response) (*ProductTypeGroupsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductTypeGroupsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductTypeGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductTypeGroupsPartialUpdateResponse parses an HTTP response from a ProductTypeGroupsPartialUpdateWithResponse call
func ParseProductTypeGroupsPartialUpdateResponse(rsp *http.Response) (*ProductTypeGroupsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductTypeGroupsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseProductTypeGroupsUpdateResponse parses an HTTP response from a ProductTypeGroupsUpdateWithResponse call
func ParseProductTypeGroupsUpdateResponse(rsp *http.Response) (*ProductTypeGroupsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductTypeGroupsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductTypeGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductTypeGroupsDeletePreviewListResponse parses an HTTP response from a ProductTypeGroupsDeletePreviewListWithResponse call
func ParseProductTypeGroupsDeletePreviewListResponse(rsp *http.Response) (*ProductTypeGroupsDeletePreviewListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductTypeGroupsDeletePreviewListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDeletePreviewList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductTypeMembersListResponse parses an HTTP response from a ProductTypeMembersListWithResponse call
func ParseProductTypeMembersListResponse(rsp *http.Response) (*ProductTypeMembersListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductTypeMembersListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedProductTypeMemberList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductTypeMembersCreateResponse parses an HTTP response from a ProductTypeMembersCreateWithResponse call
func ParseProductTypeMembersCreateResponse(rsp *http.Response) (*ProductTypeMembersCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductTypeMembersCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ProductTypeMember
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseProductTypeMembersDestroyResponse parses an HTTP response from a ProductTypeMembersDestroyWithResponse call
func ParseProductTypeMembersDestroyResponse(rsp *http.Response) (*ProductTypeMembersDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductTypeMembersDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseProductTypeMembersRetrieveResponse parses an HTTP response from a ProductTypeMembersRetrieveWithResponse call
func ParseProductTypeMembersRetrieveResponse(rsp *http.Response) (*ProductTypeMembersRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductTypeMembersRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductTypeMember
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductTypeMembersPartialUpdateResponse parses an HTTP response from a ProductTypeMembersPartialUpdateWithResponse call
func ParseProductTypeMembersPartialUpdateResponse(rsp *http.Response) (*ProductTypeMembersPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductTypeMembersPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseProductTypeMembersUpdateResponse parses an HTTP response from a ProductTypeMembersUpdateWithResponse call
func ParseProductTypeMembersUpdateResponse(rsp *http.Response) (*ProductTypeMembersUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductTypeMembersUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductTypeMember
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductTypeMembersDeletePreviewListResponse parses an HTTP response from a ProductTypeMembersDeletePreviewListWithResponse call
func ParseProductTypeMembersDeletePreviewListResponse(rsp *http.Response) (*ProductTypeMembersDeletePreviewListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductTypeMembersDeletePreviewListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDeletePreviewList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductTypesListResponse parses an HTTP response from a ProductTypesListWithResponse call
func ParseProductTypesListResponse(rsp *http.Response) (*ProductTypesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductTypesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedProductTypeList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductTypesCreateResponse parses an HTTP response from a ProductTypesCreateWithResponse call
func ParseProductTypesCreateResponse(rsp *http.Response) (*ProductTypesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductTypesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ProductType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseProductTypesDestroyResponse parses an HTTP response from a ProductTypesDestroyWithResponse call
func ParseProductTypesDestroyResponse(rsp *http.Response) (*ProductTypesDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductTypesDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseProductTypesRetrieveResponse parses an HTTP response from a ProductTypesRetrieveWithResponse call
func ParseProductTypesRetrieveResponse(rsp *http.Response) (*ProductTypesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductTypesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductTypesPartialUpdateResponse parses an HTTP response from a ProductTypesPartialUpdateWithResponse call
func ParseProductTypesPartialUpdateResponse(rsp *http.Response) (*ProductTypesPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductTypesPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductTypesUpdateResponse parses an HTTP response from a ProductTypesUpdateWithResponse call
func ParseProductTypesUpdateResponse(rsp *http.Response) (*ProductTypesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductTypesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductTypesDeletePreviewListResponse parses an HTTP response from a ProductTypesDeletePreviewListWithResponse call
func ParseProductTypesDeletePreviewListResponse(rsp *http.Response) (*ProductTypesDeletePreviewListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductTypesDeletePreviewListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDeletePreviewList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductTypesGenerateReportCreateResponse parses an HTTP response from a ProductTypesGenerateReportCreateWithResponse call
func ParseProductTypesGenerateReportCreateResponse(rsp *http.Response) (*ProductTypesGenerateReportCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductTypesGenerateReportCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReportGenerate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductsListResponse parses an HTTP response from a ProductsListWithResponse call
func ParseProductsListResponse(rsp *http.Response) (*ProductsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedProductList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductsCreateResponse parses an HTTP response from a ProductsCreateWithResponse call
func ParseProductsCreateResponse(rsp *http.Response) (*ProductsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Product
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseProductsDestroyResponse parses an HTTP response from a ProductsDestroyWithResponse call
func ParseProductsDestroyResponse(rsp *http.Response) (*ProductsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseProductsRetrieveResponse parses an HTTP response from a ProductsRetrieveWithResponse call
func ParseProductsRetrieveResponse(rsp *http.Response) (*ProductsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Product
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductsPartialUpdateResponse parses an HTTP response from a ProductsPartialUpdateWithResponse call
func ParseProductsPartialUpdateResponse(rsp *http.Response) (*ProductsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Product
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductsUpdateResponse parses an HTTP response from a ProductsUpdateWithResponse call
func ParseProductsUpdateResponse(rsp *http.Response) (*ProductsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Product
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductsDeletePreviewListResponse parses an HTTP response from a ProductsDeletePreviewListWithResponse call
func ParseProductsDeletePreviewListResponse(rsp *http.Response) (*ProductsDeletePreviewListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductsDeletePreviewListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDeletePreviewList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProductsGenerateReportCreateResponse parses an HTTP response from a ProductsGenerateReportCreateWithResponse call
func ParseProductsGenerateReportCreateResponse(rsp *http.Response) (*ProductsGenerateReportCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductsGenerateReportCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReportGenerate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseQuestionnaireAnsweredQuestionnairesListResponse parses an HTTP response from a QuestionnaireAnsweredQuestionnairesListWithResponse call
func ParseQuestionnaireAnsweredQuestionnairesListResponse(rsp *http.Response) (*QuestionnaireAnsweredQuestionnairesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuestionnaireAnsweredQuestionnairesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedQuestionnaireAnsweredSurveyList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseQuestionnaireAnsweredQuestionnairesRetrieveResponse parses an HTTP response from a QuestionnaireAnsweredQuestionnairesRetrieveWithResponse call
func ParseQuestionnaireAnsweredQuestionnairesRetrieveResponse(rsp *http.Response) (*QuestionnaireAnsweredQuestionnairesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuestionnaireAnsweredQuestionnairesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QuestionnaireAnsweredSurvey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseQuestionnaireAnswersListResponse parses an HTTP response from a QuestionnaireAnswersListWithResponse call
func ParseQuestionnaireAnswersListResponse(rsp *http.Response) (*QuestionnaireAnswersListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuestionnaireAnswersListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedQuestionnaireAnswerList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseQuestionnaireAnswersRetrieveResponse parses an HTTP response from a QuestionnaireAnswersRetrieveWithResponse call
func ParseQuestionnaireAnswersRetrieveResponse(rsp *http.Response) (*QuestionnaireAnswersRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuestionnaireAnswersRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QuestionnaireAnswer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseQuestionnaireEngagementQuestionnairesListResponse parses an HTTP response from a QuestionnaireEngagementQuestionnairesListWithResponse call
func ParseQuestionnaireEngagementQuestionnairesListResponse(rsp *http.Response) (*QuestionnaireEngagementQuestionnairesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuestionnaireEngagementQuestionnairesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedQuestionnaireEngagementSurveyList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseQuestionnaireEngagementQuestionnairesRetrieveResponse parses an HTTP response from a QuestionnaireEngagementQuestionnairesRetrieveWithResponse call
func ParseQuestionnaireEngagementQuestionnairesRetrieveResponse(rsp *http.Response) (*QuestionnaireEngagementQuestionnairesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuestionnaireEngagementQuestionnairesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QuestionnaireEngagementSurvey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseQuestionnaireGeneralQuestionnairesListResponse parses an HTTP response from a QuestionnaireGeneralQuestionnairesListWithResponse call
func ParseQuestionnaireGeneralQuestionnairesListResponse(rsp *http.Response) (*QuestionnaireGeneralQuestionnairesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuestionnaireGeneralQuestionnairesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedQuestionnaireGeneralSurveyList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseQuestionnaireGeneralQuestionnairesRetrieveResponse parses an HTTP response from a QuestionnaireGeneralQuestionnairesRetrieveWithResponse call
func ParseQuestionnaireGeneralQuestionnairesRetrieveResponse(rsp *http.Response) (*QuestionnaireGeneralQuestionnairesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuestionnaireGeneralQuestionnairesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QuestionnaireGeneralSurvey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseQuestionnaireQuestionsListResponse parses an HTTP response from a QuestionnaireQuestionsListWithResponse call
func ParseQuestionnaireQuestionsListResponse(rsp *http.Response) (*QuestionnaireQuestionsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuestionnaireQuestionsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedQuestionnaireQuestionList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseQuestionnaireQuestionsRetrieveResponse parses an HTTP response from a QuestionnaireQuestionsRetrieveWithResponse call
func ParseQuestionnaireQuestionsRetrieveResponse(rsp *http.Response) (*QuestionnaireQuestionsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuestionnaireQuestionsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QuestionnaireQuestion
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRegulationsListResponse parses an HTTP response from a RegulationsListWithResponse call
func ParseRegulationsListResponse(rsp *http.Response) (*RegulationsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegulationsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedRegulationList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRegulationsCreateResponse parses an HTTP response from a RegulationsCreateWithResponse call
func ParseRegulationsCreateResponse(rsp *http.Response) (*RegulationsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegulationsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Regulation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseRegulationsDestroyResponse parses an HTTP response from a RegulationsDestroyWithResponse call
func ParseRegulationsDestroyResponse(rsp *http.Response) (*RegulationsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegulationsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRegulationsRetrieveResponse parses an HTTP response from a RegulationsRetrieveWithResponse call
func ParseRegulationsRetrieveResponse(rsp *http.Response) (*RegulationsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegulationsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Regulation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRegulationsPartialUpdateResponse parses an HTTP response from a RegulationsPartialUpdateWithResponse call
func ParseRegulationsPartialUpdateResponse(rsp *http.Response) (*RegulationsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegulationsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Regulation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRegulationsUpdateResponse parses an HTTP response from a RegulationsUpdateWithResponse call
func ParseRegulationsUpdateResponse(rsp *http.Response) (*RegulationsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegulationsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Regulation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRegulationsDeletePreviewListResponse parses an HTTP response from a RegulationsDeletePreviewListWithResponse call
func ParseRegulationsDeletePreviewListResponse(rsp *http.Response) (*RegulationsDeletePreviewListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegulationsDeletePreviewListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDeletePreviewList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReimportScanCreateResponse parses an HTTP response from a ReimportScanCreateWithResponse call
func ParseReimportScanCreateResponse(rsp *http.Response) (*ReimportScanCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReimportScanCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ReImportScan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseRiskAcceptanceListResponse parses an HTTP response from a RiskAcceptanceListWithResponse call
func ParseRiskAcceptanceListResponse(rsp *http.Response) (*RiskAcceptanceListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RiskAcceptanceListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedRiskAcceptanceList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRiskAcceptanceDestroyResponse parses an HTTP response from a RiskAcceptanceDestroyWithResponse call
func ParseRiskAcceptanceDestroyResponse(rsp *http.Response) (*RiskAcceptanceDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RiskAcceptanceDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRiskAcceptanceRetrieveResponse parses an HTTP response from a RiskAcceptanceRetrieveWithResponse call
func ParseRiskAcceptanceRetrieveResponse(rsp *http.Response) (*RiskAcceptanceRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RiskAcceptanceRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RiskAcceptance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRiskAcceptanceDeletePreviewListResponse parses an HTTP response from a RiskAcceptanceDeletePreviewListWithResponse call
func ParseRiskAcceptanceDeletePreviewListResponse(rsp *http.Response) (*RiskAcceptanceDeletePreviewListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RiskAcceptanceDeletePreviewListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDeletePreviewList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRiskAcceptanceDownloadProofRetrieveResponse parses an HTTP response from a RiskAcceptanceDownloadProofRetrieveWithResponse call
func ParseRiskAcceptanceDownloadProofRetrieveResponse(rsp *http.Response) (*RiskAcceptanceDownloadProofRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RiskAcceptanceDownloadProofRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RiskAcceptanceProof
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRolesListResponse parses an HTTP response from a RolesListWithResponse call
func ParseRolesListResponse(rsp *http.Response) (*RolesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RolesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedRoleList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRolesRetrieveResponse parses an HTTP response from a RolesRetrieveWithResponse call
func ParseRolesRetrieveResponse(rsp *http.Response) (*RolesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RolesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Role
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSlaConfigurationsListResponse parses an HTTP response from a SlaConfigurationsListWithResponse call
func ParseSlaConfigurationsListResponse(rsp *http.Response) (*SlaConfigurationsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlaConfigurationsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedSLAConfigurationList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSlaConfigurationsCreateResponse parses an HTTP response from a SlaConfigurationsCreateWithResponse call
func ParseSlaConfigurationsCreateResponse(rsp *http.Response) (*SlaConfigurationsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlaConfigurationsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SLAConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseSlaConfigurationsDestroyResponse parses an HTTP response from a SlaConfigurationsDestroyWithResponse call
func ParseSlaConfigurationsDestroyResponse(rsp *http.Response) (*SlaConfigurationsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlaConfigurationsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSlaConfigurationsRetrieveResponse parses an HTTP response from a SlaConfigurationsRetrieveWithResponse call
func ParseSlaConfigurationsRetrieveResponse(rsp *http.Response) (*SlaConfigurationsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlaConfigurationsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SLAConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSlaConfigurationsPartialUpdateResponse parses an HTTP response from a SlaConfigurationsPartialUpdateWithResponse call
func ParseSlaConfigurationsPartialUpdateResponse(rsp *http.Response) (*SlaConfigurationsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlaConfigurationsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SLAConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSlaConfigurationsUpdateResponse parses an HTTP response from a SlaConfigurationsUpdateWithResponse call
func ParseSlaConfigurationsUpdateResponse(rsp *http.Response) (*SlaConfigurationsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SlaConfigurationsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SLAConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSonarqubeIssuesListResponse parses an HTTP response from a SonarqubeIssuesListWithResponse call
func ParseSonarqubeIssuesListResponse(rsp *http.Response) (*SonarqubeIssuesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SonarqubeIssuesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedSonarqubeIssueList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSonarqubeIssuesCreateResponse parses an HTTP response from a SonarqubeIssuesCreateWithResponse call
func ParseSonarqubeIssuesCreateResponse(rsp *http.Response) (*SonarqubeIssuesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SonarqubeIssuesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SonarqubeIssue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseSonarqubeIssuesDestroyResponse parses an HTTP response from a SonarqubeIssuesDestroyWithResponse call
func ParseSonarqubeIssuesDestroyResponse(rsp *http.Response) (*SonarqubeIssuesDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SonarqubeIssuesDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSonarqubeIssuesRetrieveResponse parses an HTTP response from a SonarqubeIssuesRetrieveWithResponse call
func ParseSonarqubeIssuesRetrieveResponse(rsp *http.Response) (*SonarqubeIssuesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SonarqubeIssuesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SonarqubeIssue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSonarqubeIssuesPartialUpdateResponse parses an HTTP response from a SonarqubeIssuesPartialUpdateWithResponse call
func ParseSonarqubeIssuesPartialUpdateResponse(rsp *http.Response) (*SonarqubeIssuesPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SonarqubeIssuesPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SonarqubeIssue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSonarqubeIssuesUpdateResponse parses an HTTP response from a SonarqubeIssuesUpdateWithResponse call
func ParseSonarqubeIssuesUpdateResponse(rsp *http.Response) (*SonarqubeIssuesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SonarqubeIssuesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SonarqubeIssue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSonarqubeIssuesDeletePreviewListResponse parses an HTTP response from a SonarqubeIssuesDeletePreviewListWithResponse call
func ParseSonarqubeIssuesDeletePreviewListResponse(rsp *http.Response) (*SonarqubeIssuesDeletePreviewListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SonarqubeIssuesDeletePreviewListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDeletePreviewList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSonarqubeTransitionsListResponse parses an HTTP response from a SonarqubeTransitionsListWithResponse call
func ParseSonarqubeTransitionsListResponse(rsp *http.Response) (*SonarqubeTransitionsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SonarqubeTransitionsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedSonarqubeIssueTransitionList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSonarqubeTransitionsCreateResponse parses an HTTP response from a SonarqubeTransitionsCreateWithResponse call
func ParseSonarqubeTransitionsCreateResponse(rsp *http.Response) (*SonarqubeTransitionsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SonarqubeTransitionsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SonarqubeIssueTransition
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseSonarqubeTransitionsDestroyResponse parses an HTTP response from a SonarqubeTransitionsDestroyWithResponse call
func ParseSonarqubeTransitionsDestroyResponse(rsp *http.Response) (*SonarqubeTransitionsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SonarqubeTransitionsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSonarqubeTransitionsRetrieveResponse parses an HTTP response from a SonarqubeTransitionsRetrieveWithResponse call
func ParseSonarqubeTransitionsRetrieveResponse(rsp *http.Response) (*SonarqubeTransitionsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SonarqubeTransitionsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SonarqubeIssueTransition
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSonarqubeTransitionsPartialUpdateResponse parses an HTTP response from a SonarqubeTransitionsPartialUpdateWithResponse call
func ParseSonarqubeTransitionsPartialUpdateResponse(rsp *http.Response) (*SonarqubeTransitionsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SonarqubeTransitionsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SonarqubeIssueTransition
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSonarqubeTransitionsUpdateResponse parses an HTTP response from a SonarqubeTransitionsUpdateWithResponse call
func ParseSonarqubeTransitionsUpdateResponse(rsp *http.Response) (*SonarqubeTransitionsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SonarqubeTransitionsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SonarqubeIssueTransition
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSonarqubeTransitionsDeletePreviewListResponse parses an HTTP response from a SonarqubeTransitionsDeletePreviewListWithResponse call
func ParseSonarqubeTransitionsDeletePreviewListResponse(rsp *http.Response) (*SonarqubeTransitionsDeletePreviewListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SonarqubeTransitionsDeletePreviewListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDeletePreviewList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseStubFindingsListResponse parses an HTTP response from a StubFindingsListWithResponse call
func ParseStubFindingsListResponse(rsp *http.Response) (*StubFindingsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StubFindingsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedStubFindingList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseStubFindingsCreateResponse parses an HTTP response from a StubFindingsCreateWithResponse call
func ParseStubFindingsCreateResponse(rsp *http.Response) (*StubFindingsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StubFindingsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest StubFindingCreate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseStubFindingsDestroyResponse parses an HTTP response from a StubFindingsDestroyWithResponse call
func ParseStubFindingsDestroyResponse(rsp *http.Response) (*StubFindingsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StubFindingsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseStubFindingsRetrieveResponse parses an HTTP response from a StubFindingsRetrieveWithResponse call
func ParseStubFindingsRetrieveResponse(rsp *http.Response) (*StubFindingsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StubFindingsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StubFinding
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseStubFindingsPartialUpdateResponse parses an HTTP response from a StubFindingsPartialUpdateWithResponse call
func ParseStubFindingsPartialUpdateResponse(rsp *http.Response) (*StubFindingsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StubFindingsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StubFinding
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseStubFindingsUpdateResponse parses an HTTP response from a StubFindingsUpdateWithResponse call
func ParseStubFindingsUpdateResponse(rsp *http.Response) (*StubFindingsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StubFindingsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StubFinding
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseStubFindingsDeletePreviewListResponse parses an HTTP response from a StubFindingsDeletePreviewListWithResponse call
func ParseStubFindingsDeletePreviewListResponse(rsp *http.Response) (*StubFindingsDeletePreviewListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StubFindingsDeletePreviewListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDeletePreviewList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSystemSettingsListResponse parses an HTTP response from a SystemSettingsListWithResponse call
func ParseSystemSettingsListResponse(rsp *http.Response) (*SystemSettingsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SystemSettingsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedSystemSettingsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSystemSettingsPartialUpdateResponse parses an HTTP response from a SystemSettingsPartialUpdateWithResponse call
func ParseSystemSettingsPartialUpdateResponse(rsp *http.Response) (*SystemSettingsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SystemSettingsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SystemSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSystemSettingsUpdateResponse parses an HTTP response from a SystemSettingsUpdateWithResponse call
func ParseSystemSettingsUpdateResponse(rsp *http.Response) (*SystemSettingsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SystemSettingsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SystemSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTechnologiesListResponse parses an HTTP response from a TechnologiesListWithResponse call
func ParseTechnologiesListResponse(rsp *http.Response) (*TechnologiesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TechnologiesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedAppAnalysisList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTechnologiesCreateResponse parses an HTTP response from a TechnologiesCreateWithResponse call
func ParseTechnologiesCreateResponse(rsp *http.Response) (*TechnologiesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TechnologiesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AppAnalysis
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseTechnologiesDestroyResponse parses an HTTP response from a TechnologiesDestroyWithResponse call
func ParseTechnologiesDestroyResponse(rsp *http.Response) (*TechnologiesDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TechnologiesDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTechnologiesRetrieveResponse parses an HTTP response from a TechnologiesRetrieveWithResponse call
func ParseTechnologiesRetrieveResponse(rsp *http.Response) (*TechnologiesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TechnologiesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppAnalysis
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTechnologiesPartialUpdateResponse parses an HTTP response from a TechnologiesPartialUpdateWithResponse call
func ParseTechnologiesPartialUpdateResponse(rsp *http.Response) (*TechnologiesPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TechnologiesPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppAnalysis
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTechnologiesUpdateResponse parses an HTTP response from a TechnologiesUpdateWithResponse call
func ParseTechnologiesUpdateResponse(rsp *http.Response) (*TechnologiesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TechnologiesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppAnalysis
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTechnologiesDeletePreviewListResponse parses an HTTP response from a TechnologiesDeletePreviewListWithResponse call
func ParseTechnologiesDeletePreviewListResponse(rsp *http.Response) (*TechnologiesDeletePreviewListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TechnologiesDeletePreviewListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDeletePreviewList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTestImportsListResponse parses an HTTP response from a TestImportsListWithResponse call
func ParseTestImportsListResponse(rsp *http.Response) (*TestImportsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestImportsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedTestImportList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTestImportsCreateResponse parses an HTTP response from a TestImportsCreateWithResponse call
func ParseTestImportsCreateResponse(rsp *http.Response) (*TestImportsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestImportsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TestImport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseTestImportsDestroyResponse parses an HTTP response from a TestImportsDestroyWithResponse call
func ParseTestImportsDestroyResponse(rsp *http.Response) (*TestImportsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestImportsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestImportsRetrieveResponse parses an HTTP response from a TestImportsRetrieveWithResponse call
func ParseTestImportsRetrieveResponse(rsp *http.Response) (*TestImportsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestImportsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TestImport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTestImportsPartialUpdateResponse parses an HTTP response from a TestImportsPartialUpdateWithResponse call
func ParseTestImportsPartialUpdateResponse(rsp *http.Response) (*TestImportsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestImportsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TestImport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTestImportsUpdateResponse parses an HTTP response from a TestImportsUpdateWithResponse call
func ParseTestImportsUpdateResponse(rsp *http.Response) (*TestImportsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestImportsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TestImport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTestImportsDeletePreviewListResponse parses an HTTP response from a TestImportsDeletePreviewListWithResponse call
func ParseTestImportsDeletePreviewListResponse(rsp *http.Response) (*TestImportsDeletePreviewListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestImportsDeletePreviewListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDeletePreviewList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTestTypesListResponse parses an HTTP response from a TestTypesListWithResponse call
func ParseTestTypesListResponse(rsp *http.Response) (*TestTypesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestTypesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedTestTypeList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTestTypesCreateResponse parses an HTTP response from a TestTypesCreateWithResponse call
func ParseTestTypesCreateResponse(rsp *http.Response) (*TestTypesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestTypesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TestType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseTestTypesRetrieveResponse parses an HTTP response from a TestTypesRetrieveWithResponse call
func ParseTestTypesRetrieveResponse(rsp *http.Response) (*TestTypesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestTypesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TestType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTestTypesPartialUpdateResponse parses an HTTP response from a TestTypesPartialUpdateWithResponse call
func ParseTestTypesPartialUpdateResponse(rsp *http.Response) (*TestTypesPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestTypesPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TestType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTestTypesUpdateResponse parses an HTTP response from a TestTypesUpdateWithResponse call
func ParseTestTypesUpdateResponse(rsp *http.Response) (*TestTypesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestTypesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TestType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTestsListResponse parses an HTTP response from a TestsListWithResponse call
func ParseTestsListResponse(rsp *http.Response) (*TestsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedTestList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTestsCreateResponse parses an HTTP response from a TestsCreateWithResponse call
func ParseTestsCreateResponse(rsp *http.Response) (*TestsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TestCreate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseTestsDestroyResponse parses an HTTP response from a TestsDestroyWithResponse call
func ParseTestsDestroyResponse(rsp *http.Response) (*TestsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTestsRetrieveResponse parses an HTTP response from a TestsRetrieveWithResponse call
func ParseTestsRetrieveResponse(rsp *http.Response) (*TestsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Test
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTestsPartialUpdateResponse parses an HTTP response from a TestsPartialUpdateWithResponse call
func ParseTestsPartialUpdateResponse(rsp *http.Response) (*TestsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Test
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTestsUpdateResponse parses an HTTP response from a TestsUpdateWithResponse call
func ParseTestsUpdateResponse(rsp *http.Response) (*TestsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Test
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTestsAcceptRisksCreateResponse parses an HTTP response from a TestsAcceptRisksCreateWithResponse call
func ParseTestsAcceptRisksCreateResponse(rsp *http.Response) (*TestsAcceptRisksCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestsAcceptRisksCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []RiskAcceptance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseTestsDeletePreviewListResponse parses an HTTP response from a TestsDeletePreviewListWithResponse call
func ParseTestsDeletePreviewListResponse(rsp *http.Response) (*TestsDeletePreviewListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestsDeletePreviewListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDeletePreviewList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTestsFilesRetrieveResponse parses an HTTP response from a TestsFilesRetrieveWithResponse call
func ParseTestsFilesRetrieveResponse(rsp *http.Response) (*TestsFilesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestsFilesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TestToFiles
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTestsFilesCreateResponse parses an HTTP response from a TestsFilesCreateWithResponse call
func ParseTestsFilesCreateResponse(rsp *http.Response) (*TestsFilesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestsFilesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest File
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseTestsFilesDownloadRetrieveResponse parses an HTTP response from a TestsFilesDownloadRetrieveWithResponse call
func ParseTestsFilesDownloadRetrieveResponse(rsp *http.Response) (*TestsFilesDownloadRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestsFilesDownloadRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RawFile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTestsGenerateReportCreateResponse parses an HTTP response from a TestsGenerateReportCreateWithResponse call
func ParseTestsGenerateReportCreateResponse(rsp *http.Response) (*TestsGenerateReportCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestsGenerateReportCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReportGenerate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTestsNotesRetrieveResponse parses an HTTP response from a TestsNotesRetrieveWithResponse call
func ParseTestsNotesRetrieveResponse(rsp *http.Response) (*TestsNotesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestsNotesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TestToNotes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTestsNotesCreateResponse parses an HTTP response from a TestsNotesCreateWithResponse call
func ParseTestsNotesCreateResponse(rsp *http.Response) (*TestsNotesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestsNotesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Note
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseToolConfigurationsListResponse parses an HTTP response from a ToolConfigurationsListWithResponse call
func ParseToolConfigurationsListResponse(rsp *http.Response) (*ToolConfigurationsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToolConfigurationsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedToolConfigurationList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseToolConfigurationsCreateResponse parses an HTTP response from a ToolConfigurationsCreateWithResponse call
func ParseToolConfigurationsCreateResponse(rsp *http.Response) (*ToolConfigurationsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToolConfigurationsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ToolConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseToolConfigurationsDestroyResponse parses an HTTP response from a ToolConfigurationsDestroyWithResponse call
func ParseToolConfigurationsDestroyResponse(rsp *http.Response) (*ToolConfigurationsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToolConfigurationsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseToolConfigurationsRetrieveResponse parses an HTTP response from a ToolConfigurationsRetrieveWithResponse call
func ParseToolConfigurationsRetrieveResponse(rsp *http.Response) (*ToolConfigurationsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToolConfigurationsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ToolConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseToolConfigurationsPartialUpdateResponse parses an HTTP response from a ToolConfigurationsPartialUpdateWithResponse call
func ParseToolConfigurationsPartialUpdateResponse(rsp *http.Response) (*ToolConfigurationsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToolConfigurationsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ToolConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseToolConfigurationsUpdateResponse parses an HTTP response from a ToolConfigurationsUpdateWithResponse call
func ParseToolConfigurationsUpdateResponse(rsp *http.Response) (*ToolConfigurationsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToolConfigurationsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ToolConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseToolConfigurationsDeletePreviewListResponse parses an HTTP response from a ToolConfigurationsDeletePreviewListWithResponse call
func ParseToolConfigurationsDeletePreviewListResponse(rsp *http.Response) (*ToolConfigurationsDeletePreviewListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToolConfigurationsDeletePreviewListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDeletePreviewList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseToolProductSettingsListResponse parses an HTTP response from a ToolProductSettingsListWithResponse call
func ParseToolProductSettingsListResponse(rsp *http.Response) (*ToolProductSettingsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToolProductSettingsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedToolProductSettingsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseToolProductSettingsCreateResponse parses an HTTP response from a ToolProductSettingsCreateWithResponse call
func ParseToolProductSettingsCreateResponse(rsp *http.Response) (*ToolProductSettingsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToolProductSettingsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ToolProductSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseToolProductSettingsDestroyResponse parses an HTTP response from a ToolProductSettingsDestroyWithResponse call
func ParseToolProductSettingsDestroyResponse(rsp *http.Response) (*ToolProductSettingsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToolProductSettingsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseToolProductSettingsRetrieveResponse parses an HTTP response from a ToolProductSettingsRetrieveWithResponse call
func ParseToolProductSettingsRetrieveResponse(rsp *http.Response) (*ToolProductSettingsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToolProductSettingsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ToolProductSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseToolProductSettingsPartialUpdateResponse parses an HTTP response from a ToolProductSettingsPartialUpdateWithResponse call
func ParseToolProductSettingsPartialUpdateResponse(rsp *http.Response) (*ToolProductSettingsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToolProductSettingsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ToolProductSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseToolProductSettingsUpdateResponse parses an HTTP response from a ToolProductSettingsUpdateWithResponse call
func ParseToolProductSettingsUpdateResponse(rsp *http.Response) (*ToolProductSettingsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToolProductSettingsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ToolProductSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseToolProductSettingsDeletePreviewListResponse parses an HTTP response from a ToolProductSettingsDeletePreviewListWithResponse call
func ParseToolProductSettingsDeletePreviewListResponse(rsp *http.Response) (*ToolProductSettingsDeletePreviewListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToolProductSettingsDeletePreviewListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDeletePreviewList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseToolTypesListResponse parses an HTTP response from a ToolTypesListWithResponse call
func ParseToolTypesListResponse(rsp *http.Response) (*ToolTypesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToolTypesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedToolTypeList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseToolTypesCreateResponse parses an HTTP response from a ToolTypesCreateWithResponse call
func ParseToolTypesCreateResponse(rsp *http.Response) (*ToolTypesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToolTypesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ToolType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseToolTypesDestroyResponse parses an HTTP response from a ToolTypesDestroyWithResponse call
func ParseToolTypesDestroyResponse(rsp *http.Response) (*ToolTypesDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToolTypesDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseToolTypesRetrieveResponse parses an HTTP response from a ToolTypesRetrieveWithResponse call
func ParseToolTypesRetrieveResponse(rsp *http.Response) (*ToolTypesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToolTypesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ToolType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseToolTypesPartialUpdateResponse parses an HTTP response from a ToolTypesPartialUpdateWithResponse call
func ParseToolTypesPartialUpdateResponse(rsp *http.Response) (*ToolTypesPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToolTypesPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ToolType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseToolTypesUpdateResponse parses an HTTP response from a ToolTypesUpdateWithResponse call
func ParseToolTypesUpdateResponse(rsp *http.Response) (*ToolTypesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToolTypesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ToolType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseToolTypesDeletePreviewListResponse parses an HTTP response from a ToolTypesDeletePreviewListWithResponse call
func ParseToolTypesDeletePreviewListResponse(rsp *http.Response) (*ToolTypesDeletePreviewListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToolTypesDeletePreviewListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDeletePreviewList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUserContactInfosListResponse parses an HTTP response from a UserContactInfosListWithResponse call
func ParseUserContactInfosListResponse(rsp *http.Response) (*UserContactInfosListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserContactInfosListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedUserContactInfoList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUserContactInfosCreateResponse parses an HTTP response from a UserContactInfosCreateWithResponse call
func ParseUserContactInfosCreateResponse(rsp *http.Response) (*UserContactInfosCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserContactInfosCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UserContactInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseUserContactInfosDestroyResponse parses an HTTP response from a UserContactInfosDestroyWithResponse call
func ParseUserContactInfosDestroyResponse(rsp *http.Response) (*UserContactInfosDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserContactInfosDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUserContactInfosRetrieveResponse parses an HTTP response from a UserContactInfosRetrieveWithResponse call
func ParseUserContactInfosRetrieveResponse(rsp *http.Response) (*UserContactInfosRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserContactInfosRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserContactInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUserContactInfosPartialUpdateResponse parses an HTTP response from a UserContactInfosPartialUpdateWithResponse call
func ParseUserContactInfosPartialUpdateResponse(rsp *http.Response) (*UserContactInfosPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserContactInfosPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserContactInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUserContactInfosUpdateResponse parses an HTTP response from a UserContactInfosUpdateWithResponse call
func ParseUserContactInfosUpdateResponse(rsp *http.Response) (*UserContactInfosUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserContactInfosUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserContactInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUserContactInfosDeletePreviewListResponse parses an HTTP response from a UserContactInfosDeletePreviewListWithResponse call
func ParseUserContactInfosDeletePreviewListResponse(rsp *http.Response) (*UserContactInfosDeletePreviewListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserContactInfosDeletePreviewListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDeletePreviewList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUserProfileRetrieveResponse parses an HTTP response from a UserProfileRetrieveWithResponse call
func ParseUserProfileRetrieveResponse(rsp *http.Response) (*UserProfileRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserProfileRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersListResponse parses an HTTP response from a UsersListWithResponse call
func ParseUsersListResponse(rsp *http.Response) (*UsersListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedUserList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersCreateResponse parses an HTTP response from a UsersCreateWithResponse call
func ParseUsersCreateResponse(rsp *http.Response) (*UsersCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseUsersDestroyResponse parses an HTTP response from a UsersDestroyWithResponse call
func ParseUsersDestroyResponse(rsp *http.Response) (*UsersDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUsersRetrieveResponse parses an HTTP response from a UsersRetrieveWithResponse call
func ParseUsersRetrieveResponse(rsp *http.Response) (*UsersRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersPartialUpdateResponse parses an HTTP response from a UsersPartialUpdateWithResponse call
func ParseUsersPartialUpdateResponse(rsp *http.Response) (*UsersPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersUpdateResponse parses an HTTP response from a UsersUpdateWithResponse call
func ParseUsersUpdateResponse(rsp *http.Response) (*UsersUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersDeletePreviewListResponse parses an HTTP response from a UsersDeletePreviewListWithResponse call
func ParseUsersDeletePreviewListResponse(rsp *http.Response) (*UsersDeletePreviewListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersDeletePreviewListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDeletePreviewList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /api/v2/api-token-auth/)
	ApiTokenAuthCreate(ctx echo.Context) error

	// (GET /api/v2/configuration_permissions/)
	ConfigurationPermissionsList(ctx echo.Context, params ConfigurationPermissionsListParams) error

	// (GET /api/v2/configuration_permissions/{id}/)
	ConfigurationPermissionsRetrieve(ctx echo.Context, id int) error

	// (GET /api/v2/credential_mappings/)
	CredentialMappingsList(ctx echo.Context, params CredentialMappingsListParams) error

	// (POST /api/v2/credential_mappings/)
	CredentialMappingsCreate(ctx echo.Context) error

	// (DELETE /api/v2/credential_mappings/{id}/)
	CredentialMappingsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/credential_mappings/{id}/)
	CredentialMappingsRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/credential_mappings/{id}/)
	CredentialMappingsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/credential_mappings/{id}/)
	CredentialMappingsUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/credential_mappings/{id}/delete_preview/)
	CredentialMappingsDeletePreviewList(ctx echo.Context, id int, params CredentialMappingsDeletePreviewListParams) error

	// (GET /api/v2/credentials/)
	CredentialsList(ctx echo.Context, params CredentialsListParams) error

	// (POST /api/v2/credentials/)
	CredentialsCreate(ctx echo.Context) error

	// (DELETE /api/v2/credentials/{id}/)
	CredentialsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/credentials/{id}/)
	CredentialsRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/credentials/{id}/)
	CredentialsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/credentials/{id}/)
	CredentialsUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/credentials/{id}/delete_preview/)
	CredentialsDeletePreviewList(ctx echo.Context, id int, params CredentialsDeletePreviewListParams) error

	// (GET /api/v2/development_environments/)
	DevelopmentEnvironmentsList(ctx echo.Context, params DevelopmentEnvironmentsListParams) error

	// (POST /api/v2/development_environments/)
	DevelopmentEnvironmentsCreate(ctx echo.Context) error

	// (DELETE /api/v2/development_environments/{id}/)
	DevelopmentEnvironmentsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/development_environments/{id}/)
	DevelopmentEnvironmentsRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/development_environments/{id}/)
	DevelopmentEnvironmentsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/development_environments/{id}/)
	DevelopmentEnvironmentsUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/development_environments/{id}/delete_preview/)
	DevelopmentEnvironmentsDeletePreviewList(ctx echo.Context, id int, params DevelopmentEnvironmentsDeletePreviewListParams) error

	// (GET /api/v2/dojo_group_members/)
	DojoGroupMembersList(ctx echo.Context, params DojoGroupMembersListParams) error

	// (POST /api/v2/dojo_group_members/)
	DojoGroupMembersCreate(ctx echo.Context) error

	// (DELETE /api/v2/dojo_group_members/{id}/)
	DojoGroupMembersDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/dojo_group_members/{id}/)
	DojoGroupMembersRetrieve(ctx echo.Context, id int, params DojoGroupMembersRetrieveParams) error

	// (PATCH /api/v2/dojo_group_members/{id}/)
	DojoGroupMembersPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/dojo_group_members/{id}/)
	DojoGroupMembersUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/dojo_group_members/{id}/delete_preview/)
	DojoGroupMembersDeletePreviewList(ctx echo.Context, id int, params DojoGroupMembersDeletePreviewListParams) error

	// (GET /api/v2/dojo_groups/)
	DojoGroupsList(ctx echo.Context, params DojoGroupsListParams) error

	// (POST /api/v2/dojo_groups/)
	DojoGroupsCreate(ctx echo.Context) error

	// (DELETE /api/v2/dojo_groups/{id}/)
	DojoGroupsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/dojo_groups/{id}/)
	DojoGroupsRetrieve(ctx echo.Context, id int, params DojoGroupsRetrieveParams) error

	// (PATCH /api/v2/dojo_groups/{id}/)
	DojoGroupsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/dojo_groups/{id}/)
	DojoGroupsUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/dojo_groups/{id}/delete_preview/)
	DojoGroupsDeletePreviewList(ctx echo.Context, id int, params DojoGroupsDeletePreviewListParams) error

	// (POST /api/v2/endpoint_meta_import/)
	EndpointMetaImportCreate(ctx echo.Context) error

	// (GET /api/v2/endpoint_status/)
	EndpointStatusList(ctx echo.Context, params EndpointStatusListParams) error

	// (POST /api/v2/endpoint_status/)
	EndpointStatusCreate(ctx echo.Context) error

	// (DELETE /api/v2/endpoint_status/{id}/)
	EndpointStatusDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/endpoint_status/{id}/)
	EndpointStatusRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/endpoint_status/{id}/)
	EndpointStatusPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/endpoint_status/{id}/)
	EndpointStatusUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/endpoint_status/{id}/delete_preview/)
	EndpointStatusDeletePreviewList(ctx echo.Context, id int, params EndpointStatusDeletePreviewListParams) error

	// (GET /api/v2/endpoints/)
	EndpointsList(ctx echo.Context, params EndpointsListParams) error

	// (POST /api/v2/endpoints/)
	EndpointsCreate(ctx echo.Context) error

	// (DELETE /api/v2/endpoints/{id}/)
	EndpointsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/endpoints/{id}/)
	EndpointsRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/endpoints/{id}/)
	EndpointsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/endpoints/{id}/)
	EndpointsUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/endpoints/{id}/delete_preview/)
	EndpointsDeletePreviewList(ctx echo.Context, id int, params EndpointsDeletePreviewListParams) error

	// (POST /api/v2/endpoints/{id}/generate_report/)
	EndpointsGenerateReportCreate(ctx echo.Context, id int) error

	// (GET /api/v2/engagement_presets/)
	EngagementPresetsList(ctx echo.Context, params EngagementPresetsListParams) error

	// (POST /api/v2/engagement_presets/)
	EngagementPresetsCreate(ctx echo.Context) error

	// (DELETE /api/v2/engagement_presets/{id}/)
	EngagementPresetsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/engagement_presets/{id}/)
	EngagementPresetsRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/engagement_presets/{id}/)
	EngagementPresetsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/engagement_presets/{id}/)
	EngagementPresetsUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/engagement_presets/{id}/delete_preview/)
	EngagementPresetsDeletePreviewList(ctx echo.Context, id int, params EngagementPresetsDeletePreviewListParams) error

	// (GET /api/v2/engagements/)
	EngagementsList(ctx echo.Context, params EngagementsListParams) error

	// (POST /api/v2/engagements/)
	EngagementsCreate(ctx echo.Context) error

	// (DELETE /api/v2/engagements/{id}/)
	EngagementsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/engagements/{id}/)
	EngagementsRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/engagements/{id}/)
	EngagementsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/engagements/{id}/)
	EngagementsUpdate(ctx echo.Context, id int) error

	// (POST /api/v2/engagements/{id}/accept_risks/)
	EngagementsAcceptRisksCreate(ctx echo.Context, id int) error

	// (POST /api/v2/engagements/{id}/close/)
	EngagementsCloseCreate(ctx echo.Context, id int) error

	// (GET /api/v2/engagements/{id}/complete_checklist/)
	EngagementsCompleteChecklistRetrieve(ctx echo.Context, id int) error

	// (POST /api/v2/engagements/{id}/complete_checklist/)
	EngagementsCompleteChecklistCreate(ctx echo.Context, id int) error

	// (GET /api/v2/engagements/{id}/delete_preview/)
	EngagementsDeletePreviewList(ctx echo.Context, id int, params EngagementsDeletePreviewListParams) error

	// (GET /api/v2/engagements/{id}/files/)
	EngagementsFilesRetrieve(ctx echo.Context, id int) error

	// (POST /api/v2/engagements/{id}/files/)
	EngagementsFilesCreate(ctx echo.Context, id int) error

	// (GET /api/v2/engagements/{id}/files/download/{file_id}/)
	EngagementsFilesDownloadRetrieve(ctx echo.Context, id int, fileId string) error

	// (POST /api/v2/engagements/{id}/generate_report/)
	EngagementsGenerateReportCreate(ctx echo.Context, id int) error

	// (GET /api/v2/engagements/{id}/notes/)
	EngagementsNotesRetrieve(ctx echo.Context, id int) error

	// (POST /api/v2/engagements/{id}/notes/)
	EngagementsNotesCreate(ctx echo.Context, id int) error

	// (POST /api/v2/engagements/{id}/reopen/)
	EngagementsReopenCreate(ctx echo.Context, id int) error

	// (GET /api/v2/finding_templates/)
	FindingTemplatesList(ctx echo.Context, params FindingTemplatesListParams) error

	// (POST /api/v2/finding_templates/)
	FindingTemplatesCreate(ctx echo.Context) error

	// (DELETE /api/v2/finding_templates/{id}/)
	FindingTemplatesDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/finding_templates/{id}/)
	FindingTemplatesRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/finding_templates/{id}/)
	FindingTemplatesPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/finding_templates/{id}/)
	FindingTemplatesUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/finding_templates/{id}/delete_preview/)
	FindingTemplatesDeletePreviewList(ctx echo.Context, id int, params FindingTemplatesDeletePreviewListParams) error

	// (GET /api/v2/findings/)
	FindingsList(ctx echo.Context, params FindingsListParams) error

	// (POST /api/v2/findings/)
	FindingsCreate(ctx echo.Context) error

	// (POST /api/v2/findings/accept_risks/)
	FindingsAcceptRisksCreate(ctx echo.Context, params FindingsAcceptRisksCreateParams) error

	// (POST /api/v2/findings/generate_report/)
	FindingsGenerateReportCreate(ctx echo.Context) error

	// (DELETE /api/v2/findings/{id}/)
	FindingsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/findings/{id}/)
	FindingsRetrieve(ctx echo.Context, id int, params FindingsRetrieveParams) error

	// (PATCH /api/v2/findings/{id}/)
	FindingsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/findings/{id}/)
	FindingsUpdate(ctx echo.Context, id int) error

	// (POST /api/v2/findings/{id}/close/)
	FindingsCloseCreate(ctx echo.Context, id int) error

	// (GET /api/v2/findings/{id}/delete_preview/)
	FindingsDeletePreviewList(ctx echo.Context, id int, params FindingsDeletePreviewListParams) error

	// (GET /api/v2/findings/{id}/duplicate/)
	FindingsDuplicateList(ctx echo.Context, id int) error

	// (POST /api/v2/findings/{id}/duplicate/reset/)
	FindingsDuplicateResetCreate(ctx echo.Context, id int) error

	// (GET /api/v2/findings/{id}/files/)
	FindingsFilesRetrieve(ctx echo.Context, id int) error

	// (POST /api/v2/findings/{id}/files/)
	FindingsFilesCreate(ctx echo.Context, id int) error

	// (GET /api/v2/findings/{id}/files/download/{file_id}/)
	FindingsFilesDownloadRetrieve(ctx echo.Context, id int, fileId string) error

	// (DELETE /api/v2/findings/{id}/metadata/)
	FindingsMetadataDestroy(ctx echo.Context, id int, params FindingsMetadataDestroyParams) error

	// (GET /api/v2/findings/{id}/metadata/)
	FindingsMetadataList(ctx echo.Context, id int) error

	// (POST /api/v2/findings/{id}/metadata/)
	FindingsMetadataCreate(ctx echo.Context, id int) error

	// (PUT /api/v2/findings/{id}/metadata/)
	FindingsMetadataUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/findings/{id}/notes/)
	FindingsNotesRetrieve(ctx echo.Context, id int) error

	// (POST /api/v2/findings/{id}/notes/)
	FindingsNotesCreate(ctx echo.Context, id int) error

	// (POST /api/v2/findings/{id}/original/{new_fid}/)
	FindingsOriginalCreate(ctx echo.Context, id int, newFid int) error

	// (PATCH /api/v2/findings/{id}/remove_note/)
	FindingsRemoveNotePartialUpdate(ctx echo.Context, id int) error

	// (PATCH /api/v2/findings/{id}/remove_tags/)
	FindingsRemoveTagsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/findings/{id}/remove_tags/)
	FindingsRemoveTagsUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/findings/{id}/request_response/)
	FindingsRequestResponseRetrieve(ctx echo.Context, id int) error

	// (POST /api/v2/findings/{id}/request_response/)
	FindingsRequestResponseCreate(ctx echo.Context, id int) error

	// (GET /api/v2/findings/{id}/tags/)
	FindingsTagsRetrieve(ctx echo.Context, id int) error

	// (POST /api/v2/findings/{id}/tags/)
	FindingsTagsCreate(ctx echo.Context, id int) error

	// (GET /api/v2/global_roles/)
	GlobalRolesList(ctx echo.Context, params GlobalRolesListParams) error

	// (POST /api/v2/global_roles/)
	GlobalRolesCreate(ctx echo.Context) error

	// (DELETE /api/v2/global_roles/{id}/)
	GlobalRolesDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/global_roles/{id}/)
	GlobalRolesRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/global_roles/{id}/)
	GlobalRolesPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/global_roles/{id}/)
	GlobalRolesUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/global_roles/{id}/delete_preview/)
	GlobalRolesDeletePreviewList(ctx echo.Context, id int, params GlobalRolesDeletePreviewListParams) error

	// (POST /api/v2/import-languages/)
	ImportLanguagesCreate(ctx echo.Context) error

	// (POST /api/v2/import-scan/)
	ImportScanCreate(ctx echo.Context) error

	// (GET /api/v2/jira_configurations/)
	JiraConfigurationsList(ctx echo.Context, params JiraConfigurationsListParams) error

	// (POST /api/v2/jira_configurations/)
	JiraConfigurationsCreate(ctx echo.Context) error

	// (DELETE /api/v2/jira_configurations/{id}/)
	JiraConfigurationsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/jira_configurations/{id}/)
	JiraConfigurationsRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/jira_configurations/{id}/)
	JiraConfigurationsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/jira_configurations/{id}/)
	JiraConfigurationsUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/jira_configurations/{id}/delete_preview/)
	JiraConfigurationsDeletePreviewList(ctx echo.Context, id int, params JiraConfigurationsDeletePreviewListParams) error

	// (GET /api/v2/jira_finding_mappings/)
	JiraFindingMappingsList(ctx echo.Context, params JiraFindingMappingsListParams) error

	// (POST /api/v2/jira_finding_mappings/)
	JiraFindingMappingsCreate(ctx echo.Context) error

	// (DELETE /api/v2/jira_finding_mappings/{id}/)
	JiraFindingMappingsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/jira_finding_mappings/{id}/)
	JiraFindingMappingsRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/jira_finding_mappings/{id}/)
	JiraFindingMappingsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/jira_finding_mappings/{id}/)
	JiraFindingMappingsUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/jira_finding_mappings/{id}/delete_preview/)
	JiraFindingMappingsDeletePreviewList(ctx echo.Context, id int, params JiraFindingMappingsDeletePreviewListParams) error

	// (GET /api/v2/jira_instances/)
	JiraInstancesList(ctx echo.Context, params JiraInstancesListParams) error

	// (POST /api/v2/jira_instances/)
	JiraInstancesCreate(ctx echo.Context) error

	// (DELETE /api/v2/jira_instances/{id}/)
	JiraInstancesDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/jira_instances/{id}/)
	JiraInstancesRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/jira_instances/{id}/)
	JiraInstancesPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/jira_instances/{id}/)
	JiraInstancesUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/jira_instances/{id}/delete_preview/)
	JiraInstancesDeletePreviewList(ctx echo.Context, id int, params JiraInstancesDeletePreviewListParams) error

	// (GET /api/v2/jira_product_configurations/)
	JiraProductConfigurationsList(ctx echo.Context, params JiraProductConfigurationsListParams) error

	// (POST /api/v2/jira_product_configurations/)
	JiraProductConfigurationsCreate(ctx echo.Context) error

	// (DELETE /api/v2/jira_product_configurations/{id}/)
	JiraProductConfigurationsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/jira_product_configurations/{id}/)
	JiraProductConfigurationsRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/jira_product_configurations/{id}/)
	JiraProductConfigurationsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/jira_product_configurations/{id}/)
	JiraProductConfigurationsUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/jira_product_configurations/{id}/delete_preview/)
	JiraProductConfigurationsDeletePreviewList(ctx echo.Context, id int, params JiraProductConfigurationsDeletePreviewListParams) error

	// (GET /api/v2/jira_projects/)
	JiraProjectsList(ctx echo.Context, params JiraProjectsListParams) error

	// (POST /api/v2/jira_projects/)
	JiraProjectsCreate(ctx echo.Context) error

	// (DELETE /api/v2/jira_projects/{id}/)
	JiraProjectsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/jira_projects/{id}/)
	JiraProjectsRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/jira_projects/{id}/)
	JiraProjectsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/jira_projects/{id}/)
	JiraProjectsUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/jira_projects/{id}/delete_preview/)
	JiraProjectsDeletePreviewList(ctx echo.Context, id int, params JiraProjectsDeletePreviewListParams) error

	// (GET /api/v2/language_types/)
	LanguageTypesList(ctx echo.Context, params LanguageTypesListParams) error

	// (POST /api/v2/language_types/)
	LanguageTypesCreate(ctx echo.Context) error

	// (DELETE /api/v2/language_types/{id}/)
	LanguageTypesDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/language_types/{id}/)
	LanguageTypesRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/language_types/{id}/)
	LanguageTypesPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/language_types/{id}/)
	LanguageTypesUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/language_types/{id}/delete_preview/)
	LanguageTypesDeletePreviewList(ctx echo.Context, id int, params LanguageTypesDeletePreviewListParams) error

	// (GET /api/v2/languages/)
	LanguagesList(ctx echo.Context, params LanguagesListParams) error

	// (POST /api/v2/languages/)
	LanguagesCreate(ctx echo.Context) error

	// (DELETE /api/v2/languages/{id}/)
	LanguagesDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/languages/{id}/)
	LanguagesRetrieve(ctx echo.Context, id int, params LanguagesRetrieveParams) error

	// (PATCH /api/v2/languages/{id}/)
	LanguagesPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/languages/{id}/)
	LanguagesUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/languages/{id}/delete_preview/)
	LanguagesDeletePreviewList(ctx echo.Context, id int, params LanguagesDeletePreviewListParams) error

	// (GET /api/v2/metadata/)
	MetadataList(ctx echo.Context, params MetadataListParams) error

	// (POST /api/v2/metadata/)
	MetadataCreate(ctx echo.Context) error

	// (DELETE /api/v2/metadata/{id}/)
	MetadataDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/metadata/{id}/)
	MetadataRetrieve(ctx echo.Context, id int, params MetadataRetrieveParams) error

	// (PATCH /api/v2/metadata/{id}/)
	MetadataPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/metadata/{id}/)
	MetadataUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/metadata/{id}/delete_preview/)
	MetadataDeletePreviewList(ctx echo.Context, id int, params MetadataDeletePreviewListParams) error

	// (GET /api/v2/network_locations/)
	NetworkLocationsList(ctx echo.Context, params NetworkLocationsListParams) error

	// (POST /api/v2/network_locations/)
	NetworkLocationsCreate(ctx echo.Context) error

	// (DELETE /api/v2/network_locations/{id}/)
	NetworkLocationsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/network_locations/{id}/)
	NetworkLocationsRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/network_locations/{id}/)
	NetworkLocationsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/network_locations/{id}/)
	NetworkLocationsUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/network_locations/{id}/delete_preview/)
	NetworkLocationsDeletePreviewList(ctx echo.Context, id int, params NetworkLocationsDeletePreviewListParams) error

	// (GET /api/v2/note_type/)
	NoteTypeList(ctx echo.Context, params NoteTypeListParams) error

	// (POST /api/v2/note_type/)
	NoteTypeCreate(ctx echo.Context) error

	// (DELETE /api/v2/note_type/{id}/)
	NoteTypeDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/note_type/{id}/)
	NoteTypeRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/note_type/{id}/)
	NoteTypePartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/note_type/{id}/)
	NoteTypeUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/note_type/{id}/delete_preview/)
	NoteTypeDeletePreviewList(ctx echo.Context, id int, params NoteTypeDeletePreviewListParams) error

	// (GET /api/v2/notes/)
	NotesList(ctx echo.Context, params NotesListParams) error

	// (GET /api/v2/notes/{id}/)
	NotesRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/notes/{id}/)
	NotesPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/notes/{id}/)
	NotesUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/notifications/)
	NotificationsList(ctx echo.Context, params NotificationsListParams) error

	// (POST /api/v2/notifications/)
	NotificationsCreate(ctx echo.Context) error

	// (DELETE /api/v2/notifications/{id}/)
	NotificationsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/notifications/{id}/)
	NotificationsRetrieve(ctx echo.Context, id int, params NotificationsRetrieveParams) error

	// (PATCH /api/v2/notifications/{id}/)
	NotificationsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/notifications/{id}/)
	NotificationsUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/notifications/{id}/delete_preview/)
	NotificationsDeletePreviewList(ctx echo.Context, id int, params NotificationsDeletePreviewListParams) error

	// (GET /api/v2/oa3/schema/)
	Oa3SchemaRetrieve(ctx echo.Context, params Oa3SchemaRetrieveParams) error

	// (GET /api/v2/product_api_scan_configurations/)
	ProductApiScanConfigurationsList(ctx echo.Context, params ProductApiScanConfigurationsListParams) error

	// (POST /api/v2/product_api_scan_configurations/)
	ProductApiScanConfigurationsCreate(ctx echo.Context) error

	// (DELETE /api/v2/product_api_scan_configurations/{id}/)
	ProductApiScanConfigurationsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/product_api_scan_configurations/{id}/)
	ProductApiScanConfigurationsRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/product_api_scan_configurations/{id}/)
	ProductApiScanConfigurationsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/product_api_scan_configurations/{id}/)
	ProductApiScanConfigurationsUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/product_api_scan_configurations/{id}/delete_preview/)
	ProductApiScanConfigurationsDeletePreviewList(ctx echo.Context, id int, params ProductApiScanConfigurationsDeletePreviewListParams) error

	// (GET /api/v2/product_groups/)
	ProductGroupsList(ctx echo.Context, params ProductGroupsListParams) error

	// (POST /api/v2/product_groups/)
	ProductGroupsCreate(ctx echo.Context) error

	// (DELETE /api/v2/product_groups/{id}/)
	ProductGroupsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/product_groups/{id}/)
	ProductGroupsRetrieve(ctx echo.Context, id int, params ProductGroupsRetrieveParams) error

	// (PATCH /api/v2/product_groups/{id}/)
	ProductGroupsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/product_groups/{id}/)
	ProductGroupsUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/product_groups/{id}/delete_preview/)
	ProductGroupsDeletePreviewList(ctx echo.Context, id int, params ProductGroupsDeletePreviewListParams) error

	// (GET /api/v2/product_members/)
	ProductMembersList(ctx echo.Context, params ProductMembersListParams) error

	// (POST /api/v2/product_members/)
	ProductMembersCreate(ctx echo.Context) error

	// (DELETE /api/v2/product_members/{id}/)
	ProductMembersDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/product_members/{id}/)
	ProductMembersRetrieve(ctx echo.Context, id int, params ProductMembersRetrieveParams) error

	// (PATCH /api/v2/product_members/{id}/)
	ProductMembersPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/product_members/{id}/)
	ProductMembersUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/product_members/{id}/delete_preview/)
	ProductMembersDeletePreviewList(ctx echo.Context, id int, params ProductMembersDeletePreviewListParams) error

	// (GET /api/v2/product_type_groups/)
	ProductTypeGroupsList(ctx echo.Context, params ProductTypeGroupsListParams) error

	// (POST /api/v2/product_type_groups/)
	ProductTypeGroupsCreate(ctx echo.Context) error

	// (DELETE /api/v2/product_type_groups/{id}/)
	ProductTypeGroupsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/product_type_groups/{id}/)
	ProductTypeGroupsRetrieve(ctx echo.Context, id int, params ProductTypeGroupsRetrieveParams) error

	// (PATCH /api/v2/product_type_groups/{id}/)
	ProductTypeGroupsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/product_type_groups/{id}/)
	ProductTypeGroupsUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/product_type_groups/{id}/delete_preview/)
	ProductTypeGroupsDeletePreviewList(ctx echo.Context, id int, params ProductTypeGroupsDeletePreviewListParams) error

	// (GET /api/v2/product_type_members/)
	ProductTypeMembersList(ctx echo.Context, params ProductTypeMembersListParams) error

	// (POST /api/v2/product_type_members/)
	ProductTypeMembersCreate(ctx echo.Context) error

	// (DELETE /api/v2/product_type_members/{id}/)
	ProductTypeMembersDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/product_type_members/{id}/)
	ProductTypeMembersRetrieve(ctx echo.Context, id int, params ProductTypeMembersRetrieveParams) error

	// (PATCH /api/v2/product_type_members/{id}/)
	ProductTypeMembersPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/product_type_members/{id}/)
	ProductTypeMembersUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/product_type_members/{id}/delete_preview/)
	ProductTypeMembersDeletePreviewList(ctx echo.Context, id int, params ProductTypeMembersDeletePreviewListParams) error

	// (GET /api/v2/product_types/)
	ProductTypesList(ctx echo.Context, params ProductTypesListParams) error

	// (POST /api/v2/product_types/)
	ProductTypesCreate(ctx echo.Context) error

	// (DELETE /api/v2/product_types/{id}/)
	ProductTypesDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/product_types/{id}/)
	ProductTypesRetrieve(ctx echo.Context, id int, params ProductTypesRetrieveParams) error

	// (PATCH /api/v2/product_types/{id}/)
	ProductTypesPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/product_types/{id}/)
	ProductTypesUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/product_types/{id}/delete_preview/)
	ProductTypesDeletePreviewList(ctx echo.Context, id int, params ProductTypesDeletePreviewListParams) error

	// (POST /api/v2/product_types/{id}/generate_report/)
	ProductTypesGenerateReportCreate(ctx echo.Context, id int) error

	// (GET /api/v2/products/)
	ProductsList(ctx echo.Context, params ProductsListParams) error

	// (POST /api/v2/products/)
	ProductsCreate(ctx echo.Context) error

	// (DELETE /api/v2/products/{id}/)
	ProductsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/products/{id}/)
	ProductsRetrieve(ctx echo.Context, id int, params ProductsRetrieveParams) error

	// (PATCH /api/v2/products/{id}/)
	ProductsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/products/{id}/)
	ProductsUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/products/{id}/delete_preview/)
	ProductsDeletePreviewList(ctx echo.Context, id int, params ProductsDeletePreviewListParams) error

	// (POST /api/v2/products/{id}/generate_report/)
	ProductsGenerateReportCreate(ctx echo.Context, id int) error

	// (GET /api/v2/questionnaire_answered_questionnaires/)
	QuestionnaireAnsweredQuestionnairesList(ctx echo.Context, params QuestionnaireAnsweredQuestionnairesListParams) error

	// (GET /api/v2/questionnaire_answered_questionnaires/{id}/)
	QuestionnaireAnsweredQuestionnairesRetrieve(ctx echo.Context, id int) error

	// (GET /api/v2/questionnaire_answers/)
	QuestionnaireAnswersList(ctx echo.Context, params QuestionnaireAnswersListParams) error

	// (GET /api/v2/questionnaire_answers/{id}/)
	QuestionnaireAnswersRetrieve(ctx echo.Context, id int) error

	// (GET /api/v2/questionnaire_engagement_questionnaires/)
	QuestionnaireEngagementQuestionnairesList(ctx echo.Context, params QuestionnaireEngagementQuestionnairesListParams) error

	// (GET /api/v2/questionnaire_engagement_questionnaires/{id}/)
	QuestionnaireEngagementQuestionnairesRetrieve(ctx echo.Context, id int) error

	// (GET /api/v2/questionnaire_general_questionnaires/)
	QuestionnaireGeneralQuestionnairesList(ctx echo.Context, params QuestionnaireGeneralQuestionnairesListParams) error

	// (GET /api/v2/questionnaire_general_questionnaires/{id}/)
	QuestionnaireGeneralQuestionnairesRetrieve(ctx echo.Context, id int) error

	// (GET /api/v2/questionnaire_questions/)
	QuestionnaireQuestionsList(ctx echo.Context, params QuestionnaireQuestionsListParams) error

	// (GET /api/v2/questionnaire_questions/{id}/)
	QuestionnaireQuestionsRetrieve(ctx echo.Context, id int) error

	// (GET /api/v2/regulations/)
	RegulationsList(ctx echo.Context, params RegulationsListParams) error

	// (POST /api/v2/regulations/)
	RegulationsCreate(ctx echo.Context) error

	// (DELETE /api/v2/regulations/{id}/)
	RegulationsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/regulations/{id}/)
	RegulationsRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/regulations/{id}/)
	RegulationsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/regulations/{id}/)
	RegulationsUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/regulations/{id}/delete_preview/)
	RegulationsDeletePreviewList(ctx echo.Context, id int, params RegulationsDeletePreviewListParams) error

	// (POST /api/v2/reimport-scan/)
	ReimportScanCreate(ctx echo.Context) error

	// (GET /api/v2/risk_acceptance/)
	RiskAcceptanceList(ctx echo.Context, params RiskAcceptanceListParams) error

	// (DELETE /api/v2/risk_acceptance/{id}/)
	RiskAcceptanceDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/risk_acceptance/{id}/)
	RiskAcceptanceRetrieve(ctx echo.Context, id int) error

	// (GET /api/v2/risk_acceptance/{id}/delete_preview/)
	RiskAcceptanceDeletePreviewList(ctx echo.Context, id int, params RiskAcceptanceDeletePreviewListParams) error

	// (GET /api/v2/risk_acceptance/{id}/download_proof/)
	RiskAcceptanceDownloadProofRetrieve(ctx echo.Context, id int) error

	// (GET /api/v2/roles/)
	RolesList(ctx echo.Context, params RolesListParams) error

	// (GET /api/v2/roles/{id}/)
	RolesRetrieve(ctx echo.Context, id int) error

	// (GET /api/v2/sla_configurations/)
	SlaConfigurationsList(ctx echo.Context, params SlaConfigurationsListParams) error

	// (POST /api/v2/sla_configurations/)
	SlaConfigurationsCreate(ctx echo.Context) error

	// (DELETE /api/v2/sla_configurations/{id}/)
	SlaConfigurationsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/sla_configurations/{id}/)
	SlaConfigurationsRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/sla_configurations/{id}/)
	SlaConfigurationsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/sla_configurations/{id}/)
	SlaConfigurationsUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/sonarqube_issues/)
	SonarqubeIssuesList(ctx echo.Context, params SonarqubeIssuesListParams) error

	// (POST /api/v2/sonarqube_issues/)
	SonarqubeIssuesCreate(ctx echo.Context) error

	// (DELETE /api/v2/sonarqube_issues/{id}/)
	SonarqubeIssuesDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/sonarqube_issues/{id}/)
	SonarqubeIssuesRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/sonarqube_issues/{id}/)
	SonarqubeIssuesPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/sonarqube_issues/{id}/)
	SonarqubeIssuesUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/sonarqube_issues/{id}/delete_preview/)
	SonarqubeIssuesDeletePreviewList(ctx echo.Context, id int, params SonarqubeIssuesDeletePreviewListParams) error

	// (GET /api/v2/sonarqube_transitions/)
	SonarqubeTransitionsList(ctx echo.Context, params SonarqubeTransitionsListParams) error

	// (POST /api/v2/sonarqube_transitions/)
	SonarqubeTransitionsCreate(ctx echo.Context) error

	// (DELETE /api/v2/sonarqube_transitions/{id}/)
	SonarqubeTransitionsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/sonarqube_transitions/{id}/)
	SonarqubeTransitionsRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/sonarqube_transitions/{id}/)
	SonarqubeTransitionsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/sonarqube_transitions/{id}/)
	SonarqubeTransitionsUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/sonarqube_transitions/{id}/delete_preview/)
	SonarqubeTransitionsDeletePreviewList(ctx echo.Context, id int, params SonarqubeTransitionsDeletePreviewListParams) error

	// (GET /api/v2/stub_findings/)
	StubFindingsList(ctx echo.Context, params StubFindingsListParams) error

	// (POST /api/v2/stub_findings/)
	StubFindingsCreate(ctx echo.Context) error

	// (DELETE /api/v2/stub_findings/{id}/)
	StubFindingsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/stub_findings/{id}/)
	StubFindingsRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/stub_findings/{id}/)
	StubFindingsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/stub_findings/{id}/)
	StubFindingsUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/stub_findings/{id}/delete_preview/)
	StubFindingsDeletePreviewList(ctx echo.Context, id int, params StubFindingsDeletePreviewListParams) error

	// (GET /api/v2/system_settings/)
	SystemSettingsList(ctx echo.Context, params SystemSettingsListParams) error

	// (PATCH /api/v2/system_settings/{id}/)
	SystemSettingsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/system_settings/{id}/)
	SystemSettingsUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/technologies/)
	TechnologiesList(ctx echo.Context, params TechnologiesListParams) error

	// (POST /api/v2/technologies/)
	TechnologiesCreate(ctx echo.Context) error

	// (DELETE /api/v2/technologies/{id}/)
	TechnologiesDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/technologies/{id}/)
	TechnologiesRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/technologies/{id}/)
	TechnologiesPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/technologies/{id}/)
	TechnologiesUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/technologies/{id}/delete_preview/)
	TechnologiesDeletePreviewList(ctx echo.Context, id int, params TechnologiesDeletePreviewListParams) error

	// (GET /api/v2/test_imports/)
	TestImportsList(ctx echo.Context, params TestImportsListParams) error

	// (POST /api/v2/test_imports/)
	TestImportsCreate(ctx echo.Context) error

	// (DELETE /api/v2/test_imports/{id}/)
	TestImportsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/test_imports/{id}/)
	TestImportsRetrieve(ctx echo.Context, id int, params TestImportsRetrieveParams) error

	// (PATCH /api/v2/test_imports/{id}/)
	TestImportsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/test_imports/{id}/)
	TestImportsUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/test_imports/{id}/delete_preview/)
	TestImportsDeletePreviewList(ctx echo.Context, id int, params TestImportsDeletePreviewListParams) error

	// (GET /api/v2/test_types/)
	TestTypesList(ctx echo.Context, params TestTypesListParams) error

	// (POST /api/v2/test_types/)
	TestTypesCreate(ctx echo.Context) error

	// (GET /api/v2/test_types/{id}/)
	TestTypesRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/test_types/{id}/)
	TestTypesPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/test_types/{id}/)
	TestTypesUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/tests/)
	TestsList(ctx echo.Context, params TestsListParams) error

	// (POST /api/v2/tests/)
	TestsCreate(ctx echo.Context) error

	// (DELETE /api/v2/tests/{id}/)
	TestsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/tests/{id}/)
	TestsRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/tests/{id}/)
	TestsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/tests/{id}/)
	TestsUpdate(ctx echo.Context, id int) error

	// (POST /api/v2/tests/{id}/accept_risks/)
	TestsAcceptRisksCreate(ctx echo.Context, id int) error

	// (GET /api/v2/tests/{id}/delete_preview/)
	TestsDeletePreviewList(ctx echo.Context, id int, params TestsDeletePreviewListParams) error

	// (GET /api/v2/tests/{id}/files/)
	TestsFilesRetrieve(ctx echo.Context, id int) error

	// (POST /api/v2/tests/{id}/files/)
	TestsFilesCreate(ctx echo.Context, id int) error

	// (GET /api/v2/tests/{id}/files/download/{file_id}/)
	TestsFilesDownloadRetrieve(ctx echo.Context, id int, fileId string) error

	// (POST /api/v2/tests/{id}/generate_report/)
	TestsGenerateReportCreate(ctx echo.Context, id int) error

	// (GET /api/v2/tests/{id}/notes/)
	TestsNotesRetrieve(ctx echo.Context, id int) error

	// (POST /api/v2/tests/{id}/notes/)
	TestsNotesCreate(ctx echo.Context, id int) error

	// (GET /api/v2/tool_configurations/)
	ToolConfigurationsList(ctx echo.Context, params ToolConfigurationsListParams) error

	// (POST /api/v2/tool_configurations/)
	ToolConfigurationsCreate(ctx echo.Context) error

	// (DELETE /api/v2/tool_configurations/{id}/)
	ToolConfigurationsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/tool_configurations/{id}/)
	ToolConfigurationsRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/tool_configurations/{id}/)
	ToolConfigurationsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/tool_configurations/{id}/)
	ToolConfigurationsUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/tool_configurations/{id}/delete_preview/)
	ToolConfigurationsDeletePreviewList(ctx echo.Context, id int, params ToolConfigurationsDeletePreviewListParams) error

	// (GET /api/v2/tool_product_settings/)
	ToolProductSettingsList(ctx echo.Context, params ToolProductSettingsListParams) error

	// (POST /api/v2/tool_product_settings/)
	ToolProductSettingsCreate(ctx echo.Context) error

	// (DELETE /api/v2/tool_product_settings/{id}/)
	ToolProductSettingsDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/tool_product_settings/{id}/)
	ToolProductSettingsRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/tool_product_settings/{id}/)
	ToolProductSettingsPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/tool_product_settings/{id}/)
	ToolProductSettingsUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/tool_product_settings/{id}/delete_preview/)
	ToolProductSettingsDeletePreviewList(ctx echo.Context, id int, params ToolProductSettingsDeletePreviewListParams) error

	// (GET /api/v2/tool_types/)
	ToolTypesList(ctx echo.Context, params ToolTypesListParams) error

	// (POST /api/v2/tool_types/)
	ToolTypesCreate(ctx echo.Context) error

	// (DELETE /api/v2/tool_types/{id}/)
	ToolTypesDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/tool_types/{id}/)
	ToolTypesRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/tool_types/{id}/)
	ToolTypesPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/tool_types/{id}/)
	ToolTypesUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/tool_types/{id}/delete_preview/)
	ToolTypesDeletePreviewList(ctx echo.Context, id int, params ToolTypesDeletePreviewListParams) error

	// (GET /api/v2/user_contact_infos/)
	UserContactInfosList(ctx echo.Context, params UserContactInfosListParams) error

	// (POST /api/v2/user_contact_infos/)
	UserContactInfosCreate(ctx echo.Context) error

	// (DELETE /api/v2/user_contact_infos/{id}/)
	UserContactInfosDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/user_contact_infos/{id}/)
	UserContactInfosRetrieve(ctx echo.Context, id int, params UserContactInfosRetrieveParams) error

	// (PATCH /api/v2/user_contact_infos/{id}/)
	UserContactInfosPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/user_contact_infos/{id}/)
	UserContactInfosUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/user_contact_infos/{id}/delete_preview/)
	UserContactInfosDeletePreviewList(ctx echo.Context, id int, params UserContactInfosDeletePreviewListParams) error

	// (GET /api/v2/user_profile/)
	UserProfileRetrieve(ctx echo.Context) error

	// (GET /api/v2/users/)
	UsersList(ctx echo.Context, params UsersListParams) error

	// (POST /api/v2/users/)
	UsersCreate(ctx echo.Context) error

	// (DELETE /api/v2/users/{id}/)
	UsersDestroy(ctx echo.Context, id int) error

	// (GET /api/v2/users/{id}/)
	UsersRetrieve(ctx echo.Context, id int) error

	// (PATCH /api/v2/users/{id}/)
	UsersPartialUpdate(ctx echo.Context, id int) error

	// (PUT /api/v2/users/{id}/)
	UsersUpdate(ctx echo.Context, id int) error

	// (GET /api/v2/users/{id}/delete_preview/)
	UsersDeletePreviewList(ctx echo.Context, id int, params UsersDeletePreviewListParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApiTokenAuthCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiTokenAuthCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiTokenAuthCreate(ctx)
	return err
}

// ConfigurationPermissionsList converts echo context to params.
func (w *ServerInterfaceWrapper) ConfigurationPermissionsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ConfigurationPermissionsListParams
	// ------------- Optional query parameter "codename" -------------

	err = runtime.BindQueryParameter("form", true, false, "codename", ctx.QueryParams(), &params.Codename)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter codename: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConfigurationPermissionsList(ctx, params)
	return err
}

// ConfigurationPermissionsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) ConfigurationPermissionsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConfigurationPermissionsRetrieve(ctx, id)
	return err
}

// CredentialMappingsList converts echo context to params.
func (w *ServerInterfaceWrapper) CredentialMappingsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CredentialMappingsListParams
	// ------------- Optional query parameter "cred_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "cred_id", ctx.QueryParams(), &params.CredId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cred_id: %s", err))
	}

	// ------------- Optional query parameter "engagement" -------------

	err = runtime.BindQueryParameter("form", true, false, "engagement", ctx.QueryParams(), &params.Engagement)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter engagement: %s", err))
	}

	// ------------- Optional query parameter "finding" -------------

	err = runtime.BindQueryParameter("form", true, false, "finding", ctx.QueryParams(), &params.Finding)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter finding: %s", err))
	}

	// ------------- Optional query parameter "is_authn_provider" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_authn_provider", ctx.QueryParams(), &params.IsAuthnProvider)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_authn_provider: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "product" -------------

	err = runtime.BindQueryParameter("form", true, false, "product", ctx.QueryParams(), &params.Product)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product: %s", err))
	}

	// ------------- Optional query parameter "test" -------------

	err = runtime.BindQueryParameter("form", true, false, "test", ctx.QueryParams(), &params.Test)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter test: %s", err))
	}

	// ------------- Optional query parameter "url" -------------

	err = runtime.BindQueryParameter("form", true, false, "url", ctx.QueryParams(), &params.Url)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter url: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CredentialMappingsList(ctx, params)
	return err
}

// CredentialMappingsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) CredentialMappingsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CredentialMappingsCreate(ctx)
	return err
}

// CredentialMappingsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) CredentialMappingsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CredentialMappingsDestroy(ctx, id)
	return err
}

// CredentialMappingsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) CredentialMappingsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CredentialMappingsRetrieve(ctx, id)
	return err
}

// CredentialMappingsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) CredentialMappingsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CredentialMappingsPartialUpdate(ctx, id)
	return err
}

// CredentialMappingsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) CredentialMappingsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CredentialMappingsUpdate(ctx, id)
	return err
}

// CredentialMappingsDeletePreviewList converts echo context to params.
func (w *ServerInterfaceWrapper) CredentialMappingsDeletePreviewList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CredentialMappingsDeletePreviewListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CredentialMappingsDeletePreviewList(ctx, id, params)
	return err
}

// CredentialsList converts echo context to params.
func (w *ServerInterfaceWrapper) CredentialsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CredentialsListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CredentialsList(ctx, params)
	return err
}

// CredentialsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) CredentialsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CredentialsCreate(ctx)
	return err
}

// CredentialsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) CredentialsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CredentialsDestroy(ctx, id)
	return err
}

// CredentialsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) CredentialsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CredentialsRetrieve(ctx, id)
	return err
}

// CredentialsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) CredentialsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CredentialsPartialUpdate(ctx, id)
	return err
}

// CredentialsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) CredentialsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CredentialsUpdate(ctx, id)
	return err
}

// CredentialsDeletePreviewList converts echo context to params.
func (w *ServerInterfaceWrapper) CredentialsDeletePreviewList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CredentialsDeletePreviewListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CredentialsDeletePreviewList(ctx, id, params)
	return err
}

// DevelopmentEnvironmentsList converts echo context to params.
func (w *ServerInterfaceWrapper) DevelopmentEnvironmentsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DevelopmentEnvironmentsListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DevelopmentEnvironmentsList(ctx, params)
	return err
}

// DevelopmentEnvironmentsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) DevelopmentEnvironmentsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DevelopmentEnvironmentsCreate(ctx)
	return err
}

// DevelopmentEnvironmentsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) DevelopmentEnvironmentsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DevelopmentEnvironmentsDestroy(ctx, id)
	return err
}

// DevelopmentEnvironmentsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) DevelopmentEnvironmentsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DevelopmentEnvironmentsRetrieve(ctx, id)
	return err
}

// DevelopmentEnvironmentsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) DevelopmentEnvironmentsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DevelopmentEnvironmentsPartialUpdate(ctx, id)
	return err
}

// DevelopmentEnvironmentsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) DevelopmentEnvironmentsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DevelopmentEnvironmentsUpdate(ctx, id)
	return err
}

// DevelopmentEnvironmentsDeletePreviewList converts echo context to params.
func (w *ServerInterfaceWrapper) DevelopmentEnvironmentsDeletePreviewList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DevelopmentEnvironmentsDeletePreviewListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DevelopmentEnvironmentsDeletePreviewList(ctx, id, params)
	return err
}

// DojoGroupMembersList converts echo context to params.
func (w *ServerInterfaceWrapper) DojoGroupMembersList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DojoGroupMembersListParams
	// ------------- Optional query parameter "group_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "group_id", ctx.QueryParams(), &params.GroupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter group_id: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// ------------- Optional query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DojoGroupMembersList(ctx, params)
	return err
}

// DojoGroupMembersCreate converts echo context to params.
func (w *ServerInterfaceWrapper) DojoGroupMembersCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DojoGroupMembersCreate(ctx)
	return err
}

// DojoGroupMembersDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) DojoGroupMembersDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DojoGroupMembersDestroy(ctx, id)
	return err
}

// DojoGroupMembersRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) DojoGroupMembersRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DojoGroupMembersRetrieveParams
	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DojoGroupMembersRetrieve(ctx, id, params)
	return err
}

// DojoGroupMembersPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) DojoGroupMembersPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DojoGroupMembersPartialUpdate(ctx, id)
	return err
}

// DojoGroupMembersUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) DojoGroupMembersUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DojoGroupMembersUpdate(ctx, id)
	return err
}

// DojoGroupMembersDeletePreviewList converts echo context to params.
func (w *ServerInterfaceWrapper) DojoGroupMembersDeletePreviewList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DojoGroupMembersDeletePreviewListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DojoGroupMembersDeletePreviewList(ctx, id, params)
	return err
}

// DojoGroupsList converts echo context to params.
func (w *ServerInterfaceWrapper) DojoGroupsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DojoGroupsListParams
	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// ------------- Optional query parameter "social_provider" -------------

	err = runtime.BindQueryParameter("form", true, false, "social_provider", ctx.QueryParams(), &params.SocialProvider)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter social_provider: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DojoGroupsList(ctx, params)
	return err
}

// DojoGroupsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) DojoGroupsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DojoGroupsCreate(ctx)
	return err
}

// DojoGroupsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) DojoGroupsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DojoGroupsDestroy(ctx, id)
	return err
}

// DojoGroupsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) DojoGroupsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DojoGroupsRetrieveParams
	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DojoGroupsRetrieve(ctx, id, params)
	return err
}

// DojoGroupsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) DojoGroupsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DojoGroupsPartialUpdate(ctx, id)
	return err
}

// DojoGroupsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) DojoGroupsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DojoGroupsUpdate(ctx, id)
	return err
}

// DojoGroupsDeletePreviewList converts echo context to params.
func (w *ServerInterfaceWrapper) DojoGroupsDeletePreviewList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DojoGroupsDeletePreviewListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DojoGroupsDeletePreviewList(ctx, id, params)
	return err
}

// EndpointMetaImportCreate converts echo context to params.
func (w *ServerInterfaceWrapper) EndpointMetaImportCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndpointMetaImportCreate(ctx)
	return err
}

// EndpointStatusList converts echo context to params.
func (w *ServerInterfaceWrapper) EndpointStatusList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params EndpointStatusListParams
	// ------------- Optional query parameter "endpoint" -------------

	err = runtime.BindQueryParameter("form", true, false, "endpoint", ctx.QueryParams(), &params.Endpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endpoint: %s", err))
	}

	// ------------- Optional query parameter "false_positive" -------------

	err = runtime.BindQueryParameter("form", true, false, "false_positive", ctx.QueryParams(), &params.FalsePositive)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter false_positive: %s", err))
	}

	// ------------- Optional query parameter "finding" -------------

	err = runtime.BindQueryParameter("form", true, false, "finding", ctx.QueryParams(), &params.Finding)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter finding: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "mitigated" -------------

	err = runtime.BindQueryParameter("form", true, false, "mitigated", ctx.QueryParams(), &params.Mitigated)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter mitigated: %s", err))
	}

	// ------------- Optional query parameter "mitigated_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "mitigated_by", ctx.QueryParams(), &params.MitigatedBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter mitigated_by: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "out_of_scope" -------------

	err = runtime.BindQueryParameter("form", true, false, "out_of_scope", ctx.QueryParams(), &params.OutOfScope)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter out_of_scope: %s", err))
	}

	// ------------- Optional query parameter "risk_accepted" -------------

	err = runtime.BindQueryParameter("form", true, false, "risk_accepted", ctx.QueryParams(), &params.RiskAccepted)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter risk_accepted: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndpointStatusList(ctx, params)
	return err
}

// EndpointStatusCreate converts echo context to params.
func (w *ServerInterfaceWrapper) EndpointStatusCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndpointStatusCreate(ctx)
	return err
}

// EndpointStatusDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) EndpointStatusDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndpointStatusDestroy(ctx, id)
	return err
}

// EndpointStatusRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) EndpointStatusRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndpointStatusRetrieve(ctx, id)
	return err
}

// EndpointStatusPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) EndpointStatusPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndpointStatusPartialUpdate(ctx, id)
	return err
}

// EndpointStatusUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) EndpointStatusUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndpointStatusUpdate(ctx, id)
	return err
}

// EndpointStatusDeletePreviewList converts echo context to params.
func (w *ServerInterfaceWrapper) EndpointStatusDeletePreviewList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params EndpointStatusDeletePreviewListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndpointStatusDeletePreviewList(ctx, id, params)
	return err
}

// EndpointsList converts echo context to params.
func (w *ServerInterfaceWrapper) EndpointsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params EndpointsListParams
	// ------------- Optional query parameter "fragment" -------------

	err = runtime.BindQueryParameter("form", true, false, "fragment", ctx.QueryParams(), &params.Fragment)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fragment: %s", err))
	}

	// ------------- Optional query parameter "host" -------------

	err = runtime.BindQueryParameter("form", true, false, "host", ctx.QueryParams(), &params.Host)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter host: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "not_tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "not_tag", ctx.QueryParams(), &params.NotTag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_tag: %s", err))
	}

	// ------------- Optional query parameter "not_tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "not_tags", ctx.QueryParams(), &params.NotTags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_tags: %s", err))
	}

	// ------------- Optional query parameter "o" -------------

	err = runtime.BindQueryParameter("form", false, false, "o", ctx.QueryParams(), &params.O)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter o: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "port" -------------

	err = runtime.BindQueryParameter("form", true, false, "port", ctx.QueryParams(), &params.Port)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter port: %s", err))
	}

	// ------------- Optional query parameter "product" -------------

	err = runtime.BindQueryParameter("form", true, false, "product", ctx.QueryParams(), &params.Product)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product: %s", err))
	}

	// ------------- Optional query parameter "protocol" -------------

	err = runtime.BindQueryParameter("form", true, false, "protocol", ctx.QueryParams(), &params.Protocol)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter protocol: %s", err))
	}

	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "userinfo" -------------

	err = runtime.BindQueryParameter("form", true, false, "userinfo", ctx.QueryParams(), &params.Userinfo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userinfo: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndpointsList(ctx, params)
	return err
}

// EndpointsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) EndpointsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndpointsCreate(ctx)
	return err
}

// EndpointsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) EndpointsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndpointsDestroy(ctx, id)
	return err
}

// EndpointsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) EndpointsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndpointsRetrieve(ctx, id)
	return err
}

// EndpointsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) EndpointsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndpointsPartialUpdate(ctx, id)
	return err
}

// EndpointsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) EndpointsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndpointsUpdate(ctx, id)
	return err
}

// EndpointsDeletePreviewList converts echo context to params.
func (w *ServerInterfaceWrapper) EndpointsDeletePreviewList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params EndpointsDeletePreviewListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndpointsDeletePreviewList(ctx, id, params)
	return err
}

// EndpointsGenerateReportCreate converts echo context to params.
func (w *ServerInterfaceWrapper) EndpointsGenerateReportCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndpointsGenerateReportCreate(ctx, id)
	return err
}

// EngagementPresetsList converts echo context to params.
func (w *ServerInterfaceWrapper) EngagementPresetsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params EngagementPresetsListParams
	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "product" -------------

	err = runtime.BindQueryParameter("form", true, false, "product", ctx.QueryParams(), &params.Product)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product: %s", err))
	}

	// ------------- Optional query parameter "title" -------------

	err = runtime.BindQueryParameter("form", true, false, "title", ctx.QueryParams(), &params.Title)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter title: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EngagementPresetsList(ctx, params)
	return err
}

// EngagementPresetsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) EngagementPresetsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EngagementPresetsCreate(ctx)
	return err
}

// EngagementPresetsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) EngagementPresetsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EngagementPresetsDestroy(ctx, id)
	return err
}

// EngagementPresetsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) EngagementPresetsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EngagementPresetsRetrieve(ctx, id)
	return err
}

// EngagementPresetsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) EngagementPresetsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EngagementPresetsPartialUpdate(ctx, id)
	return err
}

// EngagementPresetsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) EngagementPresetsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EngagementPresetsUpdate(ctx, id)
	return err
}

// EngagementPresetsDeletePreviewList converts echo context to params.
func (w *ServerInterfaceWrapper) EngagementPresetsDeletePreviewList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params EngagementPresetsDeletePreviewListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EngagementPresetsDeletePreviewList(ctx, id, params)
	return err
}

// EngagementsList converts echo context to params.
func (w *ServerInterfaceWrapper) EngagementsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params EngagementsListParams
	// ------------- Optional query parameter "active" -------------

	err = runtime.BindQueryParameter("form", true, false, "active", ctx.QueryParams(), &params.Active)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter active: %s", err))
	}

	// ------------- Optional query parameter "api_test" -------------

	err = runtime.BindQueryParameter("form", true, false, "api_test", ctx.QueryParams(), &params.ApiTest)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter api_test: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "not_product__tags__name" -------------

	err = runtime.BindQueryParameter("form", false, false, "not_product__tags__name", ctx.QueryParams(), &params.NotProductTagsName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_product__tags__name: %s", err))
	}

	// ------------- Optional query parameter "not_tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "not_tag", ctx.QueryParams(), &params.NotTag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_tag: %s", err))
	}

	// ------------- Optional query parameter "not_tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "not_tags", ctx.QueryParams(), &params.NotTags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_tags: %s", err))
	}

	// ------------- Optional query parameter "o" -------------

	err = runtime.BindQueryParameter("form", false, false, "o", ctx.QueryParams(), &params.O)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter o: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pen_test" -------------

	err = runtime.BindQueryParameter("form", true, false, "pen_test", ctx.QueryParams(), &params.PenTest)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pen_test: %s", err))
	}

	// ------------- Optional query parameter "product" -------------

	err = runtime.BindQueryParameter("form", true, false, "product", ctx.QueryParams(), &params.Product)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product: %s", err))
	}

	// ------------- Optional query parameter "product__prod_type" -------------

	err = runtime.BindQueryParameter("form", false, false, "product__prod_type", ctx.QueryParams(), &params.ProductProdType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product__prod_type: %s", err))
	}

	// ------------- Optional query parameter "product__tags__name" -------------

	err = runtime.BindQueryParameter("form", false, false, "product__tags__name", ctx.QueryParams(), &params.ProductTagsName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product__tags__name: %s", err))
	}

	// ------------- Optional query parameter "report_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "report_type", ctx.QueryParams(), &params.ReportType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter report_type: %s", err))
	}

	// ------------- Optional query parameter "requester" -------------

	err = runtime.BindQueryParameter("form", true, false, "requester", ctx.QueryParams(), &params.Requester)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requester: %s", err))
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "target_end" -------------

	err = runtime.BindQueryParameter("form", true, false, "target_end", ctx.QueryParams(), &params.TargetEnd)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter target_end: %s", err))
	}

	// ------------- Optional query parameter "target_start" -------------

	err = runtime.BindQueryParameter("form", true, false, "target_start", ctx.QueryParams(), &params.TargetStart)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter target_start: %s", err))
	}

	// ------------- Optional query parameter "threat_model" -------------

	err = runtime.BindQueryParameter("form", true, false, "threat_model", ctx.QueryParams(), &params.ThreatModel)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter threat_model: %s", err))
	}

	// ------------- Optional query parameter "updated" -------------

	err = runtime.BindQueryParameter("form", true, false, "updated", ctx.QueryParams(), &params.Updated)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter updated: %s", err))
	}

	// ------------- Optional query parameter "version" -------------

	err = runtime.BindQueryParameter("form", true, false, "version", ctx.QueryParams(), &params.Version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EngagementsList(ctx, params)
	return err
}

// EngagementsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) EngagementsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EngagementsCreate(ctx)
	return err
}

// EngagementsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) EngagementsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EngagementsDestroy(ctx, id)
	return err
}

// EngagementsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) EngagementsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EngagementsRetrieve(ctx, id)
	return err
}

// EngagementsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) EngagementsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EngagementsPartialUpdate(ctx, id)
	return err
}

// EngagementsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) EngagementsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EngagementsUpdate(ctx, id)
	return err
}

// EngagementsAcceptRisksCreate converts echo context to params.
func (w *ServerInterfaceWrapper) EngagementsAcceptRisksCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EngagementsAcceptRisksCreate(ctx, id)
	return err
}

// EngagementsCloseCreate converts echo context to params.
func (w *ServerInterfaceWrapper) EngagementsCloseCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EngagementsCloseCreate(ctx, id)
	return err
}

// EngagementsCompleteChecklistRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) EngagementsCompleteChecklistRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EngagementsCompleteChecklistRetrieve(ctx, id)
	return err
}

// EngagementsCompleteChecklistCreate converts echo context to params.
func (w *ServerInterfaceWrapper) EngagementsCompleteChecklistCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EngagementsCompleteChecklistCreate(ctx, id)
	return err
}

// EngagementsDeletePreviewList converts echo context to params.
func (w *ServerInterfaceWrapper) EngagementsDeletePreviewList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params EngagementsDeletePreviewListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EngagementsDeletePreviewList(ctx, id, params)
	return err
}

// EngagementsFilesRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) EngagementsFilesRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EngagementsFilesRetrieve(ctx, id)
	return err
}

// EngagementsFilesCreate converts echo context to params.
func (w *ServerInterfaceWrapper) EngagementsFilesCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EngagementsFilesCreate(ctx, id)
	return err
}

// EngagementsFilesDownloadRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) EngagementsFilesDownloadRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "file_id" -------------
	var fileId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "file_id", runtime.ParamLocationPath, ctx.Param("file_id"), &fileId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter file_id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EngagementsFilesDownloadRetrieve(ctx, id, fileId)
	return err
}

// EngagementsGenerateReportCreate converts echo context to params.
func (w *ServerInterfaceWrapper) EngagementsGenerateReportCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EngagementsGenerateReportCreate(ctx, id)
	return err
}

// EngagementsNotesRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) EngagementsNotesRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EngagementsNotesRetrieve(ctx, id)
	return err
}

// EngagementsNotesCreate converts echo context to params.
func (w *ServerInterfaceWrapper) EngagementsNotesCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EngagementsNotesCreate(ctx, id)
	return err
}

// EngagementsReopenCreate converts echo context to params.
func (w *ServerInterfaceWrapper) EngagementsReopenCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EngagementsReopenCreate(ctx, id)
	return err
}

// FindingTemplatesList converts echo context to params.
func (w *ServerInterfaceWrapper) FindingTemplatesList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindingTemplatesListParams
	// ------------- Optional query parameter "cwe" -------------

	err = runtime.BindQueryParameter("form", true, false, "cwe", ctx.QueryParams(), &params.Cwe)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cwe: %s", err))
	}

	// ------------- Optional query parameter "description" -------------

	err = runtime.BindQueryParameter("form", true, false, "description", ctx.QueryParams(), &params.Description)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter description: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "mitigation" -------------

	err = runtime.BindQueryParameter("form", true, false, "mitigation", ctx.QueryParams(), &params.Mitigation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter mitigation: %s", err))
	}

	// ------------- Optional query parameter "not_tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "not_tag", ctx.QueryParams(), &params.NotTag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_tag: %s", err))
	}

	// ------------- Optional query parameter "not_tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "not_tags", ctx.QueryParams(), &params.NotTags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_tags: %s", err))
	}

	// ------------- Optional query parameter "o" -------------

	err = runtime.BindQueryParameter("form", false, false, "o", ctx.QueryParams(), &params.O)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter o: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "severity" -------------

	err = runtime.BindQueryParameter("form", true, false, "severity", ctx.QueryParams(), &params.Severity)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter severity: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "title" -------------

	err = runtime.BindQueryParameter("form", true, false, "title", ctx.QueryParams(), &params.Title)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter title: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingTemplatesList(ctx, params)
	return err
}

// FindingTemplatesCreate converts echo context to params.
func (w *ServerInterfaceWrapper) FindingTemplatesCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingTemplatesCreate(ctx)
	return err
}

// FindingTemplatesDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) FindingTemplatesDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingTemplatesDestroy(ctx, id)
	return err
}

// FindingTemplatesRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) FindingTemplatesRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingTemplatesRetrieve(ctx, id)
	return err
}

// FindingTemplatesPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) FindingTemplatesPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingTemplatesPartialUpdate(ctx, id)
	return err
}

// FindingTemplatesUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) FindingTemplatesUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingTemplatesUpdate(ctx, id)
	return err
}

// FindingTemplatesDeletePreviewList converts echo context to params.
func (w *ServerInterfaceWrapper) FindingTemplatesDeletePreviewList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindingTemplatesDeletePreviewListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingTemplatesDeletePreviewList(ctx, id, params)
	return err
}

// FindingsList converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindingsListParams
	// ------------- Optional query parameter "active" -------------

	err = runtime.BindQueryParameter("form", true, false, "active", ctx.QueryParams(), &params.Active)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter active: %s", err))
	}

	// ------------- Optional query parameter "component_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "component_name", ctx.QueryParams(), &params.ComponentName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter component_name: %s", err))
	}

	// ------------- Optional query parameter "component_version" -------------

	err = runtime.BindQueryParameter("form", true, false, "component_version", ctx.QueryParams(), &params.ComponentVersion)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter component_version: %s", err))
	}

	// ------------- Optional query parameter "created" -------------

	err = runtime.BindQueryParameter("form", true, false, "created", ctx.QueryParams(), &params.Created)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter created: %s", err))
	}

	// ------------- Optional query parameter "cvssv3" -------------

	err = runtime.BindQueryParameter("form", true, false, "cvssv3", ctx.QueryParams(), &params.Cvssv3)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cvssv3: %s", err))
	}

	// ------------- Optional query parameter "cvssv3_score" -------------

	err = runtime.BindQueryParameter("form", true, false, "cvssv3_score", ctx.QueryParams(), &params.Cvssv3Score)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cvssv3_score: %s", err))
	}

	// ------------- Optional query parameter "cwe" -------------

	err = runtime.BindQueryParameter("form", false, false, "cwe", ctx.QueryParams(), &params.Cwe)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cwe: %s", err))
	}

	// ------------- Optional query parameter "date" -------------

	err = runtime.BindQueryParameter("form", true, false, "date", ctx.QueryParams(), &params.Date)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter date: %s", err))
	}

	// ------------- Optional query parameter "defect_review_requested_by" -------------

	err = runtime.BindQueryParameter("form", false, false, "defect_review_requested_by", ctx.QueryParams(), &params.DefectReviewRequestedBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter defect_review_requested_by: %s", err))
	}

	// ------------- Optional query parameter "description" -------------

	err = runtime.BindQueryParameter("form", true, false, "description", ctx.QueryParams(), &params.Description)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter description: %s", err))
	}

	// ------------- Optional query parameter "duplicate" -------------

	err = runtime.BindQueryParameter("form", true, false, "duplicate", ctx.QueryParams(), &params.Duplicate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duplicate: %s", err))
	}

	// ------------- Optional query parameter "duplicate_finding" -------------

	err = runtime.BindQueryParameter("form", true, false, "duplicate_finding", ctx.QueryParams(), &params.DuplicateFinding)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duplicate_finding: %s", err))
	}

	// ------------- Optional query parameter "dynamic_finding" -------------

	err = runtime.BindQueryParameter("form", true, false, "dynamic_finding", ctx.QueryParams(), &params.DynamicFinding)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dynamic_finding: %s", err))
	}

	// ------------- Optional query parameter "effort_for_fixing" -------------

	err = runtime.BindQueryParameter("form", true, false, "effort_for_fixing", ctx.QueryParams(), &params.EffortForFixing)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter effort_for_fixing: %s", err))
	}

	// ------------- Optional query parameter "endpoints" -------------

	err = runtime.BindQueryParameter("form", false, false, "endpoints", ctx.QueryParams(), &params.Endpoints)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endpoints: %s", err))
	}

	// ------------- Optional query parameter "false_p" -------------

	err = runtime.BindQueryParameter("form", true, false, "false_p", ctx.QueryParams(), &params.FalseP)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter false_p: %s", err))
	}

	// ------------- Optional query parameter "file_path" -------------

	err = runtime.BindQueryParameter("form", true, false, "file_path", ctx.QueryParams(), &params.FilePath)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter file_path: %s", err))
	}

	// ------------- Optional query parameter "finding_group" -------------

	err = runtime.BindQueryParameter("form", false, false, "finding_group", ctx.QueryParams(), &params.FindingGroup)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter finding_group: %s", err))
	}

	// ------------- Optional query parameter "found_by" -------------

	err = runtime.BindQueryParameter("form", false, false, "found_by", ctx.QueryParams(), &params.FoundBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter found_by: %s", err))
	}

	// ------------- Optional query parameter "has_jira" -------------

	err = runtime.BindQueryParameter("form", true, false, "has_jira", ctx.QueryParams(), &params.HasJira)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter has_jira: %s", err))
	}

	// ------------- Optional query parameter "hash_code" -------------

	err = runtime.BindQueryParameter("form", true, false, "hash_code", ctx.QueryParams(), &params.HashCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash_code: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", false, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "impact" -------------

	err = runtime.BindQueryParameter("form", true, false, "impact", ctx.QueryParams(), &params.Impact)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impact: %s", err))
	}

	// ------------- Optional query parameter "inherited_tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "inherited_tags", ctx.QueryParams(), &params.InheritedTags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter inherited_tags: %s", err))
	}

	// ------------- Optional query parameter "is_mitigated" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_mitigated", ctx.QueryParams(), &params.IsMitigated)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_mitigated: %s", err))
	}

	// ------------- Optional query parameter "jira_change" -------------

	err = runtime.BindQueryParameter("form", true, false, "jira_change", ctx.QueryParams(), &params.JiraChange)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter jira_change: %s", err))
	}

	// ------------- Optional query parameter "jira_creation" -------------

	err = runtime.BindQueryParameter("form", true, false, "jira_creation", ctx.QueryParams(), &params.JiraCreation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter jira_creation: %s", err))
	}

	// ------------- Optional query parameter "last_reviewed" -------------

	err = runtime.BindQueryParameter("form", true, false, "last_reviewed", ctx.QueryParams(), &params.LastReviewed)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last_reviewed: %s", err))
	}

	// ------------- Optional query parameter "last_reviewed_by" -------------

	err = runtime.BindQueryParameter("form", false, false, "last_reviewed_by", ctx.QueryParams(), &params.LastReviewedBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last_reviewed_by: %s", err))
	}

	// ------------- Optional query parameter "last_status_update" -------------

	err = runtime.BindQueryParameter("form", true, false, "last_status_update", ctx.QueryParams(), &params.LastStatusUpdate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last_status_update: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "mitigated" -------------

	err = runtime.BindQueryParameter("form", true, false, "mitigated", ctx.QueryParams(), &params.Mitigated)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter mitigated: %s", err))
	}

	// ------------- Optional query parameter "mitigated_by" -------------

	err = runtime.BindQueryParameter("form", false, false, "mitigated_by", ctx.QueryParams(), &params.MitigatedBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter mitigated_by: %s", err))
	}

	// ------------- Optional query parameter "mitigation" -------------

	err = runtime.BindQueryParameter("form", true, false, "mitigation", ctx.QueryParams(), &params.Mitigation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter mitigation: %s", err))
	}

	// ------------- Optional query parameter "nb_occurences" -------------

	err = runtime.BindQueryParameter("form", false, false, "nb_occurences", ctx.QueryParams(), &params.NbOccurences)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nb_occurences: %s", err))
	}

	// ------------- Optional query parameter "not_tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "not_tag", ctx.QueryParams(), &params.NotTag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_tag: %s", err))
	}

	// ------------- Optional query parameter "not_tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "not_tags", ctx.QueryParams(), &params.NotTags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_tags: %s", err))
	}

	// ------------- Optional query parameter "not_test__engagement__product__tags__name" -------------

	err = runtime.BindQueryParameter("form", false, false, "not_test__engagement__product__tags__name", ctx.QueryParams(), &params.NotTestEngagementProductTagsName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_test__engagement__product__tags__name: %s", err))
	}

	// ------------- Optional query parameter "not_test__engagement__tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "not_test__engagement__tags", ctx.QueryParams(), &params.NotTestEngagementTags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_test__engagement__tags: %s", err))
	}

	// ------------- Optional query parameter "not_test__tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "not_test__tags", ctx.QueryParams(), &params.NotTestTags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_test__tags: %s", err))
	}

	// ------------- Optional query parameter "numerical_severity" -------------

	err = runtime.BindQueryParameter("form", true, false, "numerical_severity", ctx.QueryParams(), &params.NumericalSeverity)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter numerical_severity: %s", err))
	}

	// ------------- Optional query parameter "o" -------------

	err = runtime.BindQueryParameter("form", false, false, "o", ctx.QueryParams(), &params.O)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter o: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "out_of_scope" -------------

	err = runtime.BindQueryParameter("form", true, false, "out_of_scope", ctx.QueryParams(), &params.OutOfScope)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter out_of_scope: %s", err))
	}

	// ------------- Optional query parameter "param" -------------

	err = runtime.BindQueryParameter("form", true, false, "param", ctx.QueryParams(), &params.Param)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter param: %s", err))
	}

	// ------------- Optional query parameter "payload" -------------

	err = runtime.BindQueryParameter("form", true, false, "payload", ctx.QueryParams(), &params.Payload)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter payload: %s", err))
	}

	// ------------- Optional query parameter "planned_remediation_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "planned_remediation_date", ctx.QueryParams(), &params.PlannedRemediationDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter planned_remediation_date: %s", err))
	}

	// ------------- Optional query parameter "planned_remediation_version" -------------

	err = runtime.BindQueryParameter("form", true, false, "planned_remediation_version", ctx.QueryParams(), &params.PlannedRemediationVersion)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter planned_remediation_version: %s", err))
	}

	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// ------------- Optional query parameter "product_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "product_name", ctx.QueryParams(), &params.ProductName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product_name: %s", err))
	}

	// ------------- Optional query parameter "product_name_contains" -------------

	err = runtime.BindQueryParameter("form", true, false, "product_name_contains", ctx.QueryParams(), &params.ProductNameContains)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product_name_contains: %s", err))
	}

	// ------------- Optional query parameter "publish_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "publish_date", ctx.QueryParams(), &params.PublishDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter publish_date: %s", err))
	}

	// ------------- Optional query parameter "references" -------------

	err = runtime.BindQueryParameter("form", true, false, "references", ctx.QueryParams(), &params.References)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter references: %s", err))
	}

	// ------------- Optional query parameter "related_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "related_fields", ctx.QueryParams(), &params.RelatedFields)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter related_fields: %s", err))
	}

	// ------------- Optional query parameter "reporter" -------------

	err = runtime.BindQueryParameter("form", false, false, "reporter", ctx.QueryParams(), &params.Reporter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reporter: %s", err))
	}

	// ------------- Optional query parameter "review_requested_by" -------------

	err = runtime.BindQueryParameter("form", false, false, "review_requested_by", ctx.QueryParams(), &params.ReviewRequestedBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter review_requested_by: %s", err))
	}

	// ------------- Optional query parameter "reviewers" -------------

	err = runtime.BindQueryParameter("form", false, false, "reviewers", ctx.QueryParams(), &params.Reviewers)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reviewers: %s", err))
	}

	// ------------- Optional query parameter "risk_acceptance" -------------

	err = runtime.BindQueryParameter("form", true, false, "risk_acceptance", ctx.QueryParams(), &params.RiskAcceptance)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter risk_acceptance: %s", err))
	}

	// ------------- Optional query parameter "risk_accepted" -------------

	err = runtime.BindQueryParameter("form", true, false, "risk_accepted", ctx.QueryParams(), &params.RiskAccepted)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter risk_accepted: %s", err))
	}

	// ------------- Optional query parameter "sast_sink_object" -------------

	err = runtime.BindQueryParameter("form", true, false, "sast_sink_object", ctx.QueryParams(), &params.SastSinkObject)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sast_sink_object: %s", err))
	}

	// ------------- Optional query parameter "sast_source_file_path" -------------

	err = runtime.BindQueryParameter("form", true, false, "sast_source_file_path", ctx.QueryParams(), &params.SastSourceFilePath)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sast_source_file_path: %s", err))
	}

	// ------------- Optional query parameter "sast_source_line" -------------

	err = runtime.BindQueryParameter("form", false, false, "sast_source_line", ctx.QueryParams(), &params.SastSourceLine)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sast_source_line: %s", err))
	}

	// ------------- Optional query parameter "sast_source_object" -------------

	err = runtime.BindQueryParameter("form", true, false, "sast_source_object", ctx.QueryParams(), &params.SastSourceObject)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sast_source_object: %s", err))
	}

	// ------------- Optional query parameter "scanner_confidence" -------------

	err = runtime.BindQueryParameter("form", false, false, "scanner_confidence", ctx.QueryParams(), &params.ScannerConfidence)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanner_confidence: %s", err))
	}

	// ------------- Optional query parameter "service" -------------

	err = runtime.BindQueryParameter("form", true, false, "service", ctx.QueryParams(), &params.Service)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service: %s", err))
	}

	// ------------- Optional query parameter "severity" -------------

	err = runtime.BindQueryParameter("form", true, false, "severity", ctx.QueryParams(), &params.Severity)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter severity: %s", err))
	}

	// ------------- Optional query parameter "severity_justification" -------------

	err = runtime.BindQueryParameter("form", true, false, "severity_justification", ctx.QueryParams(), &params.SeverityJustification)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter severity_justification: %s", err))
	}

	// ------------- Optional query parameter "sla_start_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "sla_start_date", ctx.QueryParams(), &params.SlaStartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sla_start_date: %s", err))
	}

	// ------------- Optional query parameter "sonarqube_issue" -------------

	err = runtime.BindQueryParameter("form", false, false, "sonarqube_issue", ctx.QueryParams(), &params.SonarqubeIssue)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sonarqube_issue: %s", err))
	}

	// ------------- Optional query parameter "static_finding" -------------

	err = runtime.BindQueryParameter("form", true, false, "static_finding", ctx.QueryParams(), &params.StaticFinding)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter static_finding: %s", err))
	}

	// ------------- Optional query parameter "steps_to_reproduce" -------------

	err = runtime.BindQueryParameter("form", true, false, "steps_to_reproduce", ctx.QueryParams(), &params.StepsToReproduce)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter steps_to_reproduce: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "test" -------------

	err = runtime.BindQueryParameter("form", true, false, "test", ctx.QueryParams(), &params.Test)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter test: %s", err))
	}

	// ------------- Optional query parameter "test__engagement" -------------

	err = runtime.BindQueryParameter("form", false, false, "test__engagement", ctx.QueryParams(), &params.TestEngagement)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter test__engagement: %s", err))
	}

	// ------------- Optional query parameter "test__engagement__product" -------------

	err = runtime.BindQueryParameter("form", false, false, "test__engagement__product", ctx.QueryParams(), &params.TestEngagementProduct)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter test__engagement__product: %s", err))
	}

	// ------------- Optional query parameter "test__engagement__product__prod_type" -------------

	err = runtime.BindQueryParameter("form", false, false, "test__engagement__product__prod_type", ctx.QueryParams(), &params.TestEngagementProductProdType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter test__engagement__product__prod_type: %s", err))
	}

	// ------------- Optional query parameter "test__engagement__product__tags__name" -------------

	err = runtime.BindQueryParameter("form", false, false, "test__engagement__product__tags__name", ctx.QueryParams(), &params.TestEngagementProductTagsName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter test__engagement__product__tags__name: %s", err))
	}

	// ------------- Optional query parameter "test__engagement__tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "test__engagement__tags", ctx.QueryParams(), &params.TestEngagementTags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter test__engagement__tags: %s", err))
	}

	// ------------- Optional query parameter "test__tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "test__tags", ctx.QueryParams(), &params.TestTags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter test__tags: %s", err))
	}

	// ------------- Optional query parameter "test__test_type" -------------

	err = runtime.BindQueryParameter("form", false, false, "test__test_type", ctx.QueryParams(), &params.TestTestType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter test__test_type: %s", err))
	}

	// ------------- Optional query parameter "title" -------------

	err = runtime.BindQueryParameter("form", true, false, "title", ctx.QueryParams(), &params.Title)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter title: %s", err))
	}

	// ------------- Optional query parameter "under_defect_review" -------------

	err = runtime.BindQueryParameter("form", true, false, "under_defect_review", ctx.QueryParams(), &params.UnderDefectReview)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter under_defect_review: %s", err))
	}

	// ------------- Optional query parameter "under_review" -------------

	err = runtime.BindQueryParameter("form", true, false, "under_review", ctx.QueryParams(), &params.UnderReview)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter under_review: %s", err))
	}

	// ------------- Optional query parameter "unique_id_from_tool" -------------

	err = runtime.BindQueryParameter("form", true, false, "unique_id_from_tool", ctx.QueryParams(), &params.UniqueIdFromTool)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unique_id_from_tool: %s", err))
	}

	// ------------- Optional query parameter "verified" -------------

	err = runtime.BindQueryParameter("form", true, false, "verified", ctx.QueryParams(), &params.Verified)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter verified: %s", err))
	}

	// ------------- Optional query parameter "vuln_id_from_tool" -------------

	err = runtime.BindQueryParameter("form", true, false, "vuln_id_from_tool", ctx.QueryParams(), &params.VulnIdFromTool)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vuln_id_from_tool: %s", err))
	}

	// ------------- Optional query parameter "vulnerability_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "vulnerability_id", ctx.QueryParams(), &params.VulnerabilityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vulnerability_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsList(ctx, params)
	return err
}

// FindingsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsCreate(ctx)
	return err
}

// FindingsAcceptRisksCreate converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsAcceptRisksCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindingsAcceptRisksCreateParams
	// ------------- Optional query parameter "active" -------------

	err = runtime.BindQueryParameter("form", true, false, "active", ctx.QueryParams(), &params.Active)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter active: %s", err))
	}

	// ------------- Optional query parameter "component_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "component_name", ctx.QueryParams(), &params.ComponentName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter component_name: %s", err))
	}

	// ------------- Optional query parameter "component_version" -------------

	err = runtime.BindQueryParameter("form", true, false, "component_version", ctx.QueryParams(), &params.ComponentVersion)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter component_version: %s", err))
	}

	// ------------- Optional query parameter "created" -------------

	err = runtime.BindQueryParameter("form", true, false, "created", ctx.QueryParams(), &params.Created)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter created: %s", err))
	}

	// ------------- Optional query parameter "cvssv3" -------------

	err = runtime.BindQueryParameter("form", true, false, "cvssv3", ctx.QueryParams(), &params.Cvssv3)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cvssv3: %s", err))
	}

	// ------------- Optional query parameter "cvssv3_score" -------------

	err = runtime.BindQueryParameter("form", true, false, "cvssv3_score", ctx.QueryParams(), &params.Cvssv3Score)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cvssv3_score: %s", err))
	}

	// ------------- Optional query parameter "cwe" -------------

	err = runtime.BindQueryParameter("form", false, false, "cwe", ctx.QueryParams(), &params.Cwe)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cwe: %s", err))
	}

	// ------------- Optional query parameter "date" -------------

	err = runtime.BindQueryParameter("form", true, false, "date", ctx.QueryParams(), &params.Date)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter date: %s", err))
	}

	// ------------- Optional query parameter "defect_review_requested_by" -------------

	err = runtime.BindQueryParameter("form", false, false, "defect_review_requested_by", ctx.QueryParams(), &params.DefectReviewRequestedBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter defect_review_requested_by: %s", err))
	}

	// ------------- Optional query parameter "description" -------------

	err = runtime.BindQueryParameter("form", true, false, "description", ctx.QueryParams(), &params.Description)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter description: %s", err))
	}

	// ------------- Optional query parameter "duplicate" -------------

	err = runtime.BindQueryParameter("form", true, false, "duplicate", ctx.QueryParams(), &params.Duplicate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duplicate: %s", err))
	}

	// ------------- Optional query parameter "duplicate_finding" -------------

	err = runtime.BindQueryParameter("form", true, false, "duplicate_finding", ctx.QueryParams(), &params.DuplicateFinding)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duplicate_finding: %s", err))
	}

	// ------------- Optional query parameter "dynamic_finding" -------------

	err = runtime.BindQueryParameter("form", true, false, "dynamic_finding", ctx.QueryParams(), &params.DynamicFinding)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dynamic_finding: %s", err))
	}

	// ------------- Optional query parameter "effort_for_fixing" -------------

	err = runtime.BindQueryParameter("form", true, false, "effort_for_fixing", ctx.QueryParams(), &params.EffortForFixing)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter effort_for_fixing: %s", err))
	}

	// ------------- Optional query parameter "endpoints" -------------

	err = runtime.BindQueryParameter("form", false, false, "endpoints", ctx.QueryParams(), &params.Endpoints)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endpoints: %s", err))
	}

	// ------------- Optional query parameter "false_p" -------------

	err = runtime.BindQueryParameter("form", true, false, "false_p", ctx.QueryParams(), &params.FalseP)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter false_p: %s", err))
	}

	// ------------- Optional query parameter "file_path" -------------

	err = runtime.BindQueryParameter("form", true, false, "file_path", ctx.QueryParams(), &params.FilePath)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter file_path: %s", err))
	}

	// ------------- Optional query parameter "finding_group" -------------

	err = runtime.BindQueryParameter("form", false, false, "finding_group", ctx.QueryParams(), &params.FindingGroup)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter finding_group: %s", err))
	}

	// ------------- Optional query parameter "found_by" -------------

	err = runtime.BindQueryParameter("form", false, false, "found_by", ctx.QueryParams(), &params.FoundBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter found_by: %s", err))
	}

	// ------------- Optional query parameter "has_jira" -------------

	err = runtime.BindQueryParameter("form", true, false, "has_jira", ctx.QueryParams(), &params.HasJira)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter has_jira: %s", err))
	}

	// ------------- Optional query parameter "hash_code" -------------

	err = runtime.BindQueryParameter("form", true, false, "hash_code", ctx.QueryParams(), &params.HashCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash_code: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", false, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "impact" -------------

	err = runtime.BindQueryParameter("form", true, false, "impact", ctx.QueryParams(), &params.Impact)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impact: %s", err))
	}

	// ------------- Optional query parameter "inherited_tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "inherited_tags", ctx.QueryParams(), &params.InheritedTags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter inherited_tags: %s", err))
	}

	// ------------- Optional query parameter "is_mitigated" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_mitigated", ctx.QueryParams(), &params.IsMitigated)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_mitigated: %s", err))
	}

	// ------------- Optional query parameter "jira_change" -------------

	err = runtime.BindQueryParameter("form", true, false, "jira_change", ctx.QueryParams(), &params.JiraChange)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter jira_change: %s", err))
	}

	// ------------- Optional query parameter "jira_creation" -------------

	err = runtime.BindQueryParameter("form", true, false, "jira_creation", ctx.QueryParams(), &params.JiraCreation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter jira_creation: %s", err))
	}

	// ------------- Optional query parameter "last_reviewed" -------------

	err = runtime.BindQueryParameter("form", true, false, "last_reviewed", ctx.QueryParams(), &params.LastReviewed)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last_reviewed: %s", err))
	}

	// ------------- Optional query parameter "last_reviewed_by" -------------

	err = runtime.BindQueryParameter("form", false, false, "last_reviewed_by", ctx.QueryParams(), &params.LastReviewedBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last_reviewed_by: %s", err))
	}

	// ------------- Optional query parameter "last_status_update" -------------

	err = runtime.BindQueryParameter("form", true, false, "last_status_update", ctx.QueryParams(), &params.LastStatusUpdate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last_status_update: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "mitigated" -------------

	err = runtime.BindQueryParameter("form", true, false, "mitigated", ctx.QueryParams(), &params.Mitigated)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter mitigated: %s", err))
	}

	// ------------- Optional query parameter "mitigated_by" -------------

	err = runtime.BindQueryParameter("form", false, false, "mitigated_by", ctx.QueryParams(), &params.MitigatedBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter mitigated_by: %s", err))
	}

	// ------------- Optional query parameter "mitigation" -------------

	err = runtime.BindQueryParameter("form", true, false, "mitigation", ctx.QueryParams(), &params.Mitigation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter mitigation: %s", err))
	}

	// ------------- Optional query parameter "nb_occurences" -------------

	err = runtime.BindQueryParameter("form", false, false, "nb_occurences", ctx.QueryParams(), &params.NbOccurences)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nb_occurences: %s", err))
	}

	// ------------- Optional query parameter "not_tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "not_tag", ctx.QueryParams(), &params.NotTag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_tag: %s", err))
	}

	// ------------- Optional query parameter "not_tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "not_tags", ctx.QueryParams(), &params.NotTags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_tags: %s", err))
	}

	// ------------- Optional query parameter "not_test__engagement__product__tags__name" -------------

	err = runtime.BindQueryParameter("form", false, false, "not_test__engagement__product__tags__name", ctx.QueryParams(), &params.NotTestEngagementProductTagsName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_test__engagement__product__tags__name: %s", err))
	}

	// ------------- Optional query parameter "not_test__engagement__tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "not_test__engagement__tags", ctx.QueryParams(), &params.NotTestEngagementTags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_test__engagement__tags: %s", err))
	}

	// ------------- Optional query parameter "not_test__tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "not_test__tags", ctx.QueryParams(), &params.NotTestTags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_test__tags: %s", err))
	}

	// ------------- Optional query parameter "numerical_severity" -------------

	err = runtime.BindQueryParameter("form", true, false, "numerical_severity", ctx.QueryParams(), &params.NumericalSeverity)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter numerical_severity: %s", err))
	}

	// ------------- Optional query parameter "o" -------------

	err = runtime.BindQueryParameter("form", false, false, "o", ctx.QueryParams(), &params.O)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter o: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "out_of_scope" -------------

	err = runtime.BindQueryParameter("form", true, false, "out_of_scope", ctx.QueryParams(), &params.OutOfScope)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter out_of_scope: %s", err))
	}

	// ------------- Optional query parameter "param" -------------

	err = runtime.BindQueryParameter("form", true, false, "param", ctx.QueryParams(), &params.Param)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter param: %s", err))
	}

	// ------------- Optional query parameter "payload" -------------

	err = runtime.BindQueryParameter("form", true, false, "payload", ctx.QueryParams(), &params.Payload)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter payload: %s", err))
	}

	// ------------- Optional query parameter "planned_remediation_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "planned_remediation_date", ctx.QueryParams(), &params.PlannedRemediationDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter planned_remediation_date: %s", err))
	}

	// ------------- Optional query parameter "planned_remediation_version" -------------

	err = runtime.BindQueryParameter("form", true, false, "planned_remediation_version", ctx.QueryParams(), &params.PlannedRemediationVersion)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter planned_remediation_version: %s", err))
	}

	// ------------- Optional query parameter "product_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "product_name", ctx.QueryParams(), &params.ProductName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product_name: %s", err))
	}

	// ------------- Optional query parameter "product_name_contains" -------------

	err = runtime.BindQueryParameter("form", true, false, "product_name_contains", ctx.QueryParams(), &params.ProductNameContains)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product_name_contains: %s", err))
	}

	// ------------- Optional query parameter "publish_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "publish_date", ctx.QueryParams(), &params.PublishDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter publish_date: %s", err))
	}

	// ------------- Optional query parameter "references" -------------

	err = runtime.BindQueryParameter("form", true, false, "references", ctx.QueryParams(), &params.References)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter references: %s", err))
	}

	// ------------- Optional query parameter "reporter" -------------

	err = runtime.BindQueryParameter("form", false, false, "reporter", ctx.QueryParams(), &params.Reporter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reporter: %s", err))
	}

	// ------------- Optional query parameter "review_requested_by" -------------

	err = runtime.BindQueryParameter("form", false, false, "review_requested_by", ctx.QueryParams(), &params.ReviewRequestedBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter review_requested_by: %s", err))
	}

	// ------------- Optional query parameter "reviewers" -------------

	err = runtime.BindQueryParameter("form", false, false, "reviewers", ctx.QueryParams(), &params.Reviewers)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reviewers: %s", err))
	}

	// ------------- Optional query parameter "risk_acceptance" -------------

	err = runtime.BindQueryParameter("form", true, false, "risk_acceptance", ctx.QueryParams(), &params.RiskAcceptance)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter risk_acceptance: %s", err))
	}

	// ------------- Optional query parameter "risk_accepted" -------------

	err = runtime.BindQueryParameter("form", true, false, "risk_accepted", ctx.QueryParams(), &params.RiskAccepted)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter risk_accepted: %s", err))
	}

	// ------------- Optional query parameter "sast_sink_object" -------------

	err = runtime.BindQueryParameter("form", true, false, "sast_sink_object", ctx.QueryParams(), &params.SastSinkObject)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sast_sink_object: %s", err))
	}

	// ------------- Optional query parameter "sast_source_file_path" -------------

	err = runtime.BindQueryParameter("form", true, false, "sast_source_file_path", ctx.QueryParams(), &params.SastSourceFilePath)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sast_source_file_path: %s", err))
	}

	// ------------- Optional query parameter "sast_source_line" -------------

	err = runtime.BindQueryParameter("form", false, false, "sast_source_line", ctx.QueryParams(), &params.SastSourceLine)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sast_source_line: %s", err))
	}

	// ------------- Optional query parameter "sast_source_object" -------------

	err = runtime.BindQueryParameter("form", true, false, "sast_source_object", ctx.QueryParams(), &params.SastSourceObject)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sast_source_object: %s", err))
	}

	// ------------- Optional query parameter "scanner_confidence" -------------

	err = runtime.BindQueryParameter("form", false, false, "scanner_confidence", ctx.QueryParams(), &params.ScannerConfidence)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scanner_confidence: %s", err))
	}

	// ------------- Optional query parameter "service" -------------

	err = runtime.BindQueryParameter("form", true, false, "service", ctx.QueryParams(), &params.Service)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service: %s", err))
	}

	// ------------- Optional query parameter "severity" -------------

	err = runtime.BindQueryParameter("form", true, false, "severity", ctx.QueryParams(), &params.Severity)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter severity: %s", err))
	}

	// ------------- Optional query parameter "severity_justification" -------------

	err = runtime.BindQueryParameter("form", true, false, "severity_justification", ctx.QueryParams(), &params.SeverityJustification)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter severity_justification: %s", err))
	}

	// ------------- Optional query parameter "sla_start_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "sla_start_date", ctx.QueryParams(), &params.SlaStartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sla_start_date: %s", err))
	}

	// ------------- Optional query parameter "sonarqube_issue" -------------

	err = runtime.BindQueryParameter("form", false, false, "sonarqube_issue", ctx.QueryParams(), &params.SonarqubeIssue)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sonarqube_issue: %s", err))
	}

	// ------------- Optional query parameter "static_finding" -------------

	err = runtime.BindQueryParameter("form", true, false, "static_finding", ctx.QueryParams(), &params.StaticFinding)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter static_finding: %s", err))
	}

	// ------------- Optional query parameter "steps_to_reproduce" -------------

	err = runtime.BindQueryParameter("form", true, false, "steps_to_reproduce", ctx.QueryParams(), &params.StepsToReproduce)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter steps_to_reproduce: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "test" -------------

	err = runtime.BindQueryParameter("form", true, false, "test", ctx.QueryParams(), &params.Test)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter test: %s", err))
	}

	// ------------- Optional query parameter "test__engagement" -------------

	err = runtime.BindQueryParameter("form", false, false, "test__engagement", ctx.QueryParams(), &params.TestEngagement)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter test__engagement: %s", err))
	}

	// ------------- Optional query parameter "test__engagement__product" -------------

	err = runtime.BindQueryParameter("form", false, false, "test__engagement__product", ctx.QueryParams(), &params.TestEngagementProduct)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter test__engagement__product: %s", err))
	}

	// ------------- Optional query parameter "test__engagement__product__prod_type" -------------

	err = runtime.BindQueryParameter("form", false, false, "test__engagement__product__prod_type", ctx.QueryParams(), &params.TestEngagementProductProdType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter test__engagement__product__prod_type: %s", err))
	}

	// ------------- Optional query parameter "test__engagement__product__tags__name" -------------

	err = runtime.BindQueryParameter("form", false, false, "test__engagement__product__tags__name", ctx.QueryParams(), &params.TestEngagementProductTagsName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter test__engagement__product__tags__name: %s", err))
	}

	// ------------- Optional query parameter "test__engagement__tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "test__engagement__tags", ctx.QueryParams(), &params.TestEngagementTags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter test__engagement__tags: %s", err))
	}

	// ------------- Optional query parameter "test__tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "test__tags", ctx.QueryParams(), &params.TestTags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter test__tags: %s", err))
	}

	// ------------- Optional query parameter "test__test_type" -------------

	err = runtime.BindQueryParameter("form", false, false, "test__test_type", ctx.QueryParams(), &params.TestTestType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter test__test_type: %s", err))
	}

	// ------------- Optional query parameter "title" -------------

	err = runtime.BindQueryParameter("form", true, false, "title", ctx.QueryParams(), &params.Title)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter title: %s", err))
	}

	// ------------- Optional query parameter "under_defect_review" -------------

	err = runtime.BindQueryParameter("form", true, false, "under_defect_review", ctx.QueryParams(), &params.UnderDefectReview)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter under_defect_review: %s", err))
	}

	// ------------- Optional query parameter "under_review" -------------

	err = runtime.BindQueryParameter("form", true, false, "under_review", ctx.QueryParams(), &params.UnderReview)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter under_review: %s", err))
	}

	// ------------- Optional query parameter "unique_id_from_tool" -------------

	err = runtime.BindQueryParameter("form", true, false, "unique_id_from_tool", ctx.QueryParams(), &params.UniqueIdFromTool)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unique_id_from_tool: %s", err))
	}

	// ------------- Optional query parameter "verified" -------------

	err = runtime.BindQueryParameter("form", true, false, "verified", ctx.QueryParams(), &params.Verified)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter verified: %s", err))
	}

	// ------------- Optional query parameter "vuln_id_from_tool" -------------

	err = runtime.BindQueryParameter("form", true, false, "vuln_id_from_tool", ctx.QueryParams(), &params.VulnIdFromTool)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vuln_id_from_tool: %s", err))
	}

	// ------------- Optional query parameter "vulnerability_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "vulnerability_id", ctx.QueryParams(), &params.VulnerabilityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vulnerability_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsAcceptRisksCreate(ctx, params)
	return err
}

// FindingsGenerateReportCreate converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsGenerateReportCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsGenerateReportCreate(ctx)
	return err
}

// FindingsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsDestroy(ctx, id)
	return err
}

// FindingsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindingsRetrieveParams
	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// ------------- Optional query parameter "related_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "related_fields", ctx.QueryParams(), &params.RelatedFields)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter related_fields: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsRetrieve(ctx, id, params)
	return err
}

// FindingsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsPartialUpdate(ctx, id)
	return err
}

// FindingsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsUpdate(ctx, id)
	return err
}

// FindingsCloseCreate converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsCloseCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsCloseCreate(ctx, id)
	return err
}

// FindingsDeletePreviewList converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsDeletePreviewList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindingsDeletePreviewListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsDeletePreviewList(ctx, id, params)
	return err
}

// FindingsDuplicateList converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsDuplicateList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsDuplicateList(ctx, id)
	return err
}

// FindingsDuplicateResetCreate converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsDuplicateResetCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsDuplicateResetCreate(ctx, id)
	return err
}

// FindingsFilesRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsFilesRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsFilesRetrieve(ctx, id)
	return err
}

// FindingsFilesCreate converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsFilesCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsFilesCreate(ctx, id)
	return err
}

// FindingsFilesDownloadRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsFilesDownloadRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "file_id" -------------
	var fileId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "file_id", runtime.ParamLocationPath, ctx.Param("file_id"), &fileId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter file_id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsFilesDownloadRetrieve(ctx, id, fileId)
	return err
}

// FindingsMetadataDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsMetadataDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindingsMetadataDestroyParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsMetadataDestroy(ctx, id, params)
	return err
}

// FindingsMetadataList converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsMetadataList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsMetadataList(ctx, id)
	return err
}

// FindingsMetadataCreate converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsMetadataCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsMetadataCreate(ctx, id)
	return err
}

// FindingsMetadataUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsMetadataUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsMetadataUpdate(ctx, id)
	return err
}

// FindingsNotesRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsNotesRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsNotesRetrieve(ctx, id)
	return err
}

// FindingsNotesCreate converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsNotesCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsNotesCreate(ctx, id)
	return err
}

// FindingsOriginalCreate converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsOriginalCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "new_fid" -------------
	var newFid int

	err = runtime.BindStyledParameterWithLocation("simple", false, "new_fid", runtime.ParamLocationPath, ctx.Param("new_fid"), &newFid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter new_fid: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsOriginalCreate(ctx, id, newFid)
	return err
}

// FindingsRemoveNotePartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsRemoveNotePartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsRemoveNotePartialUpdate(ctx, id)
	return err
}

// FindingsRemoveTagsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsRemoveTagsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsRemoveTagsPartialUpdate(ctx, id)
	return err
}

// FindingsRemoveTagsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsRemoveTagsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsRemoveTagsUpdate(ctx, id)
	return err
}

// FindingsRequestResponseRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsRequestResponseRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsRequestResponseRetrieve(ctx, id)
	return err
}

// FindingsRequestResponseCreate converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsRequestResponseCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsRequestResponseCreate(ctx, id)
	return err
}

// FindingsTagsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsTagsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsTagsRetrieve(ctx, id)
	return err
}

// FindingsTagsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) FindingsTagsCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindingsTagsCreate(ctx, id)
	return err
}

// GlobalRolesList converts echo context to params.
func (w *ServerInterfaceWrapper) GlobalRolesList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GlobalRolesListParams
	// ------------- Optional query parameter "group" -------------

	err = runtime.BindQueryParameter("form", true, false, "group", ctx.QueryParams(), &params.Group)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter group: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "user" -------------

	err = runtime.BindQueryParameter("form", true, false, "user", ctx.QueryParams(), &params.User)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GlobalRolesList(ctx, params)
	return err
}

// GlobalRolesCreate converts echo context to params.
func (w *ServerInterfaceWrapper) GlobalRolesCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GlobalRolesCreate(ctx)
	return err
}

// GlobalRolesDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) GlobalRolesDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GlobalRolesDestroy(ctx, id)
	return err
}

// GlobalRolesRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) GlobalRolesRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GlobalRolesRetrieve(ctx, id)
	return err
}

// GlobalRolesPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) GlobalRolesPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GlobalRolesPartialUpdate(ctx, id)
	return err
}

// GlobalRolesUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) GlobalRolesUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GlobalRolesUpdate(ctx, id)
	return err
}

// GlobalRolesDeletePreviewList converts echo context to params.
func (w *ServerInterfaceWrapper) GlobalRolesDeletePreviewList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GlobalRolesDeletePreviewListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GlobalRolesDeletePreviewList(ctx, id, params)
	return err
}

// ImportLanguagesCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ImportLanguagesCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ImportLanguagesCreate(ctx)
	return err
}

// ImportScanCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ImportScanCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ImportScanCreate(ctx)
	return err
}

// JiraConfigurationsList converts echo context to params.
func (w *ServerInterfaceWrapper) JiraConfigurationsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params JiraConfigurationsListParams
	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "url" -------------

	err = runtime.BindQueryParameter("form", true, false, "url", ctx.QueryParams(), &params.Url)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter url: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraConfigurationsList(ctx, params)
	return err
}

// JiraConfigurationsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) JiraConfigurationsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraConfigurationsCreate(ctx)
	return err
}

// JiraConfigurationsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) JiraConfigurationsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraConfigurationsDestroy(ctx, id)
	return err
}

// JiraConfigurationsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) JiraConfigurationsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraConfigurationsRetrieve(ctx, id)
	return err
}

// JiraConfigurationsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) JiraConfigurationsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraConfigurationsPartialUpdate(ctx, id)
	return err
}

// JiraConfigurationsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) JiraConfigurationsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraConfigurationsUpdate(ctx, id)
	return err
}

// JiraConfigurationsDeletePreviewList converts echo context to params.
func (w *ServerInterfaceWrapper) JiraConfigurationsDeletePreviewList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params JiraConfigurationsDeletePreviewListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraConfigurationsDeletePreviewList(ctx, id, params)
	return err
}

// JiraFindingMappingsList converts echo context to params.
func (w *ServerInterfaceWrapper) JiraFindingMappingsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params JiraFindingMappingsListParams
	// ------------- Optional query parameter "engagement" -------------

	err = runtime.BindQueryParameter("form", true, false, "engagement", ctx.QueryParams(), &params.Engagement)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter engagement: %s", err))
	}

	// ------------- Optional query parameter "finding" -------------

	err = runtime.BindQueryParameter("form", true, false, "finding", ctx.QueryParams(), &params.Finding)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter finding: %s", err))
	}

	// ------------- Optional query parameter "finding_group" -------------

	err = runtime.BindQueryParameter("form", true, false, "finding_group", ctx.QueryParams(), &params.FindingGroup)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter finding_group: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "jira_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "jira_id", ctx.QueryParams(), &params.JiraId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter jira_id: %s", err))
	}

	// ------------- Optional query parameter "jira_key" -------------

	err = runtime.BindQueryParameter("form", true, false, "jira_key", ctx.QueryParams(), &params.JiraKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter jira_key: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraFindingMappingsList(ctx, params)
	return err
}

// JiraFindingMappingsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) JiraFindingMappingsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraFindingMappingsCreate(ctx)
	return err
}

// JiraFindingMappingsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) JiraFindingMappingsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraFindingMappingsDestroy(ctx, id)
	return err
}

// JiraFindingMappingsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) JiraFindingMappingsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraFindingMappingsRetrieve(ctx, id)
	return err
}

// JiraFindingMappingsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) JiraFindingMappingsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraFindingMappingsPartialUpdate(ctx, id)
	return err
}

// JiraFindingMappingsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) JiraFindingMappingsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraFindingMappingsUpdate(ctx, id)
	return err
}

// JiraFindingMappingsDeletePreviewList converts echo context to params.
func (w *ServerInterfaceWrapper) JiraFindingMappingsDeletePreviewList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params JiraFindingMappingsDeletePreviewListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraFindingMappingsDeletePreviewList(ctx, id, params)
	return err
}

// JiraInstancesList converts echo context to params.
func (w *ServerInterfaceWrapper) JiraInstancesList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params JiraInstancesListParams
	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "url" -------------

	err = runtime.BindQueryParameter("form", true, false, "url", ctx.QueryParams(), &params.Url)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter url: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraInstancesList(ctx, params)
	return err
}

// JiraInstancesCreate converts echo context to params.
func (w *ServerInterfaceWrapper) JiraInstancesCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraInstancesCreate(ctx)
	return err
}

// JiraInstancesDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) JiraInstancesDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraInstancesDestroy(ctx, id)
	return err
}

// JiraInstancesRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) JiraInstancesRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraInstancesRetrieve(ctx, id)
	return err
}

// JiraInstancesPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) JiraInstancesPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraInstancesPartialUpdate(ctx, id)
	return err
}

// JiraInstancesUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) JiraInstancesUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraInstancesUpdate(ctx, id)
	return err
}

// JiraInstancesDeletePreviewList converts echo context to params.
func (w *ServerInterfaceWrapper) JiraInstancesDeletePreviewList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params JiraInstancesDeletePreviewListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraInstancesDeletePreviewList(ctx, id, params)
	return err
}

// JiraProductConfigurationsList converts echo context to params.
func (w *ServerInterfaceWrapper) JiraProductConfigurationsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params JiraProductConfigurationsListParams
	// ------------- Optional query parameter "component" -------------

	err = runtime.BindQueryParameter("form", true, false, "component", ctx.QueryParams(), &params.Component)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter component: %s", err))
	}

	// ------------- Optional query parameter "enable_engagement_epic_mapping" -------------

	err = runtime.BindQueryParameter("form", true, false, "enable_engagement_epic_mapping", ctx.QueryParams(), &params.EnableEngagementEpicMapping)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enable_engagement_epic_mapping: %s", err))
	}

	// ------------- Optional query parameter "engagement" -------------

	err = runtime.BindQueryParameter("form", true, false, "engagement", ctx.QueryParams(), &params.Engagement)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter engagement: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "jira_instance" -------------

	err = runtime.BindQueryParameter("form", true, false, "jira_instance", ctx.QueryParams(), &params.JiraInstance)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter jira_instance: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "product" -------------

	err = runtime.BindQueryParameter("form", true, false, "product", ctx.QueryParams(), &params.Product)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product: %s", err))
	}

	// ------------- Optional query parameter "project_key" -------------

	err = runtime.BindQueryParameter("form", true, false, "project_key", ctx.QueryParams(), &params.ProjectKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter project_key: %s", err))
	}

	// ------------- Optional query parameter "push_all_issues" -------------

	err = runtime.BindQueryParameter("form", true, false, "push_all_issues", ctx.QueryParams(), &params.PushAllIssues)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter push_all_issues: %s", err))
	}

	// ------------- Optional query parameter "push_notes" -------------

	err = runtime.BindQueryParameter("form", true, false, "push_notes", ctx.QueryParams(), &params.PushNotes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter push_notes: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraProductConfigurationsList(ctx, params)
	return err
}

// JiraProductConfigurationsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) JiraProductConfigurationsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraProductConfigurationsCreate(ctx)
	return err
}

// JiraProductConfigurationsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) JiraProductConfigurationsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraProductConfigurationsDestroy(ctx, id)
	return err
}

// JiraProductConfigurationsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) JiraProductConfigurationsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraProductConfigurationsRetrieve(ctx, id)
	return err
}

// JiraProductConfigurationsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) JiraProductConfigurationsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraProductConfigurationsPartialUpdate(ctx, id)
	return err
}

// JiraProductConfigurationsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) JiraProductConfigurationsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraProductConfigurationsUpdate(ctx, id)
	return err
}

// JiraProductConfigurationsDeletePreviewList converts echo context to params.
func (w *ServerInterfaceWrapper) JiraProductConfigurationsDeletePreviewList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params JiraProductConfigurationsDeletePreviewListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraProductConfigurationsDeletePreviewList(ctx, id, params)
	return err
}

// JiraProjectsList converts echo context to params.
func (w *ServerInterfaceWrapper) JiraProjectsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params JiraProjectsListParams
	// ------------- Optional query parameter "component" -------------

	err = runtime.BindQueryParameter("form", true, false, "component", ctx.QueryParams(), &params.Component)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter component: %s", err))
	}

	// ------------- Optional query parameter "enable_engagement_epic_mapping" -------------

	err = runtime.BindQueryParameter("form", true, false, "enable_engagement_epic_mapping", ctx.QueryParams(), &params.EnableEngagementEpicMapping)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enable_engagement_epic_mapping: %s", err))
	}

	// ------------- Optional query parameter "engagement" -------------

	err = runtime.BindQueryParameter("form", true, false, "engagement", ctx.QueryParams(), &params.Engagement)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter engagement: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "jira_instance" -------------

	err = runtime.BindQueryParameter("form", true, false, "jira_instance", ctx.QueryParams(), &params.JiraInstance)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter jira_instance: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "product" -------------

	err = runtime.BindQueryParameter("form", true, false, "product", ctx.QueryParams(), &params.Product)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product: %s", err))
	}

	// ------------- Optional query parameter "project_key" -------------

	err = runtime.BindQueryParameter("form", true, false, "project_key", ctx.QueryParams(), &params.ProjectKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter project_key: %s", err))
	}

	// ------------- Optional query parameter "push_all_issues" -------------

	err = runtime.BindQueryParameter("form", true, false, "push_all_issues", ctx.QueryParams(), &params.PushAllIssues)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter push_all_issues: %s", err))
	}

	// ------------- Optional query parameter "push_notes" -------------

	err = runtime.BindQueryParameter("form", true, false, "push_notes", ctx.QueryParams(), &params.PushNotes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter push_notes: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraProjectsList(ctx, params)
	return err
}

// JiraProjectsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) JiraProjectsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraProjectsCreate(ctx)
	return err
}

// JiraProjectsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) JiraProjectsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraProjectsDestroy(ctx, id)
	return err
}

// JiraProjectsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) JiraProjectsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraProjectsRetrieve(ctx, id)
	return err
}

// JiraProjectsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) JiraProjectsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraProjectsPartialUpdate(ctx, id)
	return err
}

// JiraProjectsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) JiraProjectsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraProjectsUpdate(ctx, id)
	return err
}

// JiraProjectsDeletePreviewList converts echo context to params.
func (w *ServerInterfaceWrapper) JiraProjectsDeletePreviewList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params JiraProjectsDeletePreviewListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JiraProjectsDeletePreviewList(ctx, id, params)
	return err
}

// LanguageTypesList converts echo context to params.
func (w *ServerInterfaceWrapper) LanguageTypesList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params LanguageTypesListParams
	// ------------- Optional query parameter "color" -------------

	err = runtime.BindQueryParameter("form", true, false, "color", ctx.QueryParams(), &params.Color)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter color: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "language" -------------

	err = runtime.BindQueryParameter("form", true, false, "language", ctx.QueryParams(), &params.Language)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter language: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LanguageTypesList(ctx, params)
	return err
}

// LanguageTypesCreate converts echo context to params.
func (w *ServerInterfaceWrapper) LanguageTypesCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LanguageTypesCreate(ctx)
	return err
}

// LanguageTypesDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) LanguageTypesDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LanguageTypesDestroy(ctx, id)
	return err
}

// LanguageTypesRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) LanguageTypesRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LanguageTypesRetrieve(ctx, id)
	return err
}

// LanguageTypesPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) LanguageTypesPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LanguageTypesPartialUpdate(ctx, id)
	return err
}

// LanguageTypesUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) LanguageTypesUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LanguageTypesUpdate(ctx, id)
	return err
}

// LanguageTypesDeletePreviewList converts echo context to params.
func (w *ServerInterfaceWrapper) LanguageTypesDeletePreviewList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params LanguageTypesDeletePreviewListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LanguageTypesDeletePreviewList(ctx, id, params)
	return err
}

// LanguagesList converts echo context to params.
func (w *ServerInterfaceWrapper) LanguagesList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params LanguagesListParams
	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "language" -------------

	err = runtime.BindQueryParameter("form", true, false, "language", ctx.QueryParams(), &params.Language)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter language: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// ------------- Optional query parameter "product" -------------

	err = runtime.BindQueryParameter("form", true, false, "product", ctx.QueryParams(), &params.Product)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LanguagesList(ctx, params)
	return err
}

// LanguagesCreate converts echo context to params.
func (w *ServerInterfaceWrapper) LanguagesCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LanguagesCreate(ctx)
	return err
}

// LanguagesDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) LanguagesDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LanguagesDestroy(ctx, id)
	return err
}

// LanguagesRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) LanguagesRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params LanguagesRetrieveParams
	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LanguagesRetrieve(ctx, id, params)
	return err
}

// LanguagesPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) LanguagesPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LanguagesPartialUpdate(ctx, id)
	return err
}

// LanguagesUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) LanguagesUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LanguagesUpdate(ctx, id)
	return err
}

// LanguagesDeletePreviewList converts echo context to params.
func (w *ServerInterfaceWrapper) LanguagesDeletePreviewList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params LanguagesDeletePreviewListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LanguagesDeletePreviewList(ctx, id, params)
	return err
}

// MetadataList converts echo context to params.
func (w *ServerInterfaceWrapper) MetadataList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params MetadataListParams
	// ------------- Optional query parameter "endpoint" -------------

	err = runtime.BindQueryParameter("form", true, false, "endpoint", ctx.QueryParams(), &params.Endpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endpoint: %s", err))
	}

	// ------------- Optional query parameter "finding" -------------

	err = runtime.BindQueryParameter("form", true, false, "finding", ctx.QueryParams(), &params.Finding)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter finding: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// ------------- Optional query parameter "product" -------------

	err = runtime.BindQueryParameter("form", true, false, "product", ctx.QueryParams(), &params.Product)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product: %s", err))
	}

	// ------------- Optional query parameter "value" -------------

	err = runtime.BindQueryParameter("form", true, false, "value", ctx.QueryParams(), &params.Value)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter value: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MetadataList(ctx, params)
	return err
}

// MetadataCreate converts echo context to params.
func (w *ServerInterfaceWrapper) MetadataCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MetadataCreate(ctx)
	return err
}

// MetadataDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) MetadataDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MetadataDestroy(ctx, id)
	return err
}

// MetadataRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) MetadataRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params MetadataRetrieveParams
	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MetadataRetrieve(ctx, id, params)
	return err
}

// MetadataPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) MetadataPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MetadataPartialUpdate(ctx, id)
	return err
}

// MetadataUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) MetadataUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MetadataUpdate(ctx, id)
	return err
}

// MetadataDeletePreviewList converts echo context to params.
func (w *ServerInterfaceWrapper) MetadataDeletePreviewList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params MetadataDeletePreviewListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MetadataDeletePreviewList(ctx, id, params)
	return err
}

// NetworkLocationsList converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkLocationsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NetworkLocationsListParams
	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "location" -------------

	err = runtime.BindQueryParameter("form", true, false, "location", ctx.QueryParams(), &params.Location)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter location: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkLocationsList(ctx, params)
	return err
}

// NetworkLocationsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkLocationsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkLocationsCreate(ctx)
	return err
}

// NetworkLocationsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkLocationsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkLocationsDestroy(ctx, id)
	return err
}

// NetworkLocationsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkLocationsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkLocationsRetrieve(ctx, id)
	return err
}

// NetworkLocationsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkLocationsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkLocationsPartialUpdate(ctx, id)
	return err
}

// NetworkLocationsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkLocationsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkLocationsUpdate(ctx, id)
	return err
}

// NetworkLocationsDeletePreviewList converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkLocationsDeletePreviewList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NetworkLocationsDeletePreviewListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkLocationsDeletePreviewList(ctx, id, params)
	return err
}

// NoteTypeList converts echo context to params.
func (w *ServerInterfaceWrapper) NoteTypeList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NoteTypeListParams
	// ------------- Optional query parameter "description" -------------

	err = runtime.BindQueryParameter("form", true, false, "description", ctx.QueryParams(), &params.Description)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter description: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "is_active" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_active", ctx.QueryParams(), &params.IsActive)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_active: %s", err))
	}

	// ------------- Optional query parameter "is_mandatory" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_mandatory", ctx.QueryParams(), &params.IsMandatory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_mandatory: %s", err))
	}

	// ------------- Optional query parameter "is_single" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_single", ctx.QueryParams(), &params.IsSingle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_single: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NoteTypeList(ctx, params)
	return err
}

// NoteTypeCreate converts echo context to params.
func (w *ServerInterfaceWrapper) NoteTypeCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NoteTypeCreate(ctx)
	return err
}

// NoteTypeDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) NoteTypeDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NoteTypeDestroy(ctx, id)
	return err
}

// NoteTypeRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) NoteTypeRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NoteTypeRetrieve(ctx, id)
	return err
}

// NoteTypePartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) NoteTypePartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NoteTypePartialUpdate(ctx, id)
	return err
}

// NoteTypeUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) NoteTypeUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NoteTypeUpdate(ctx, id)
	return err
}

// NoteTypeDeletePreviewList converts echo context to params.
func (w *ServerInterfaceWrapper) NoteTypeDeletePreviewList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NoteTypeDeletePreviewListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NoteTypeDeletePreviewList(ctx, id, params)
	return err
}

// NotesList converts echo context to params.
func (w *ServerInterfaceWrapper) NotesList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NotesListParams
	// ------------- Optional query parameter "author" -------------

	err = runtime.BindQueryParameter("form", true, false, "author", ctx.QueryParams(), &params.Author)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter author: %s", err))
	}

	// ------------- Optional query parameter "date" -------------

	err = runtime.BindQueryParameter("form", true, false, "date", ctx.QueryParams(), &params.Date)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter date: %s", err))
	}

	// ------------- Optional query parameter "edit_time" -------------

	err = runtime.BindQueryParameter("form", true, false, "edit_time", ctx.QueryParams(), &params.EditTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter edit_time: %s", err))
	}

	// ------------- Optional query parameter "edited" -------------

	err = runtime.BindQueryParameter("form", true, false, "edited", ctx.QueryParams(), &params.Edited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter edited: %s", err))
	}

	// ------------- Optional query parameter "editor" -------------

	err = runtime.BindQueryParameter("form", true, false, "editor", ctx.QueryParams(), &params.Editor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter editor: %s", err))
	}

	// ------------- Optional query parameter "entry" -------------

	err = runtime.BindQueryParameter("form", true, false, "entry", ctx.QueryParams(), &params.Entry)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entry: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "private" -------------

	err = runtime.BindQueryParameter("form", true, false, "private", ctx.QueryParams(), &params.Private)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter private: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NotesList(ctx, params)
	return err
}

// NotesRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) NotesRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NotesRetrieve(ctx, id)
	return err
}

// NotesPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) NotesPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NotesPartialUpdate(ctx, id)
	return err
}

// NotesUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) NotesUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NotesUpdate(ctx, id)
	return err
}

// NotificationsList converts echo context to params.
func (w *ServerInterfaceWrapper) NotificationsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NotificationsListParams
	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// ------------- Optional query parameter "product" -------------

	err = runtime.BindQueryParameter("form", true, false, "product", ctx.QueryParams(), &params.Product)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product: %s", err))
	}

	// ------------- Optional query parameter "template" -------------

	err = runtime.BindQueryParameter("form", true, false, "template", ctx.QueryParams(), &params.Template)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter template: %s", err))
	}

	// ------------- Optional query parameter "user" -------------

	err = runtime.BindQueryParameter("form", true, false, "user", ctx.QueryParams(), &params.User)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NotificationsList(ctx, params)
	return err
}

// NotificationsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) NotificationsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NotificationsCreate(ctx)
	return err
}

// NotificationsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) NotificationsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NotificationsDestroy(ctx, id)
	return err
}

// NotificationsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) NotificationsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NotificationsRetrieveParams
	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NotificationsRetrieve(ctx, id, params)
	return err
}

// NotificationsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) NotificationsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NotificationsPartialUpdate(ctx, id)
	return err
}

// NotificationsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) NotificationsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NotificationsUpdate(ctx, id)
	return err
}

// NotificationsDeletePreviewList converts echo context to params.
func (w *ServerInterfaceWrapper) NotificationsDeletePreviewList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NotificationsDeletePreviewListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NotificationsDeletePreviewList(ctx, id, params)
	return err
}

// Oa3SchemaRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) Oa3SchemaRetrieve(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params Oa3SchemaRetrieveParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "lang" -------------

	err = runtime.BindQueryParameter("form", true, false, "lang", ctx.QueryParams(), &params.Lang)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lang: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Oa3SchemaRetrieve(ctx, params)
	return err
}

// ProductApiScanConfigurationsList converts echo context to params.
func (w *ServerInterfaceWrapper) ProductApiScanConfigurationsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProductApiScanConfigurationsListParams
	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "product" -------------

	err = runtime.BindQueryParameter("form", true, false, "product", ctx.QueryParams(), &params.Product)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product: %s", err))
	}

	// ------------- Optional query parameter "service_key_1" -------------

	err = runtime.BindQueryParameter("form", true, false, "service_key_1", ctx.QueryParams(), &params.ServiceKey1)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service_key_1: %s", err))
	}

	// ------------- Optional query parameter "service_key_2" -------------

	err = runtime.BindQueryParameter("form", true, false, "service_key_2", ctx.QueryParams(), &params.ServiceKey2)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service_key_2: %s", err))
	}

	// ------------- Optional query parameter "service_key_3" -------------

	err = runtime.BindQueryParameter("form", true, false, "service_key_3", ctx.QueryParams(), &params.ServiceKey3)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service_key_3: %s", err))
	}

	// ------------- Optional query parameter "tool_configuration" -------------

	err = runtime.BindQueryParameter("form", true, false, "tool_configuration", ctx.QueryParams(), &params.ToolConfiguration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tool_configuration: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductApiScanConfigurationsList(ctx, params)
	return err
}

// ProductApiScanConfigurationsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ProductApiScanConfigurationsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductApiScanConfigurationsCreate(ctx)
	return err
}

// ProductApiScanConfigurationsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) ProductApiScanConfigurationsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductApiScanConfigurationsDestroy(ctx, id)
	return err
}

// ProductApiScanConfigurationsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) ProductApiScanConfigurationsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductApiScanConfigurationsRetrieve(ctx, id)
	return err
}

// ProductApiScanConfigurationsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ProductApiScanConfigurationsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductApiScanConfigurationsPartialUpdate(ctx, id)
	return err
}

// ProductApiScanConfigurationsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ProductApiScanConfigurationsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductApiScanConfigurationsUpdate(ctx, id)
	return err
}

// ProductApiScanConfigurationsDeletePreviewList converts echo context to params.
func (w *ServerInterfaceWrapper) ProductApiScanConfigurationsDeletePreviewList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProductApiScanConfigurationsDeletePreviewListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductApiScanConfigurationsDeletePreviewList(ctx, id, params)
	return err
}

// ProductGroupsList converts echo context to params.
func (w *ServerInterfaceWrapper) ProductGroupsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProductGroupsListParams
	// ------------- Optional query parameter "group_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "group_id", ctx.QueryParams(), &params.GroupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter group_id: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// ------------- Optional query parameter "product_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "product_id", ctx.QueryParams(), &params.ProductId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductGroupsList(ctx, params)
	return err
}

// ProductGroupsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ProductGroupsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductGroupsCreate(ctx)
	return err
}

// ProductGroupsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) ProductGroupsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductGroupsDestroy(ctx, id)
	return err
}

// ProductGroupsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) ProductGroupsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProductGroupsRetrieveParams
	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductGroupsRetrieve(ctx, id, params)
	return err
}

// ProductGroupsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ProductGroupsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductGroupsPartialUpdate(ctx, id)
	return err
}

// ProductGroupsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ProductGroupsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductGroupsUpdate(ctx, id)
	return err
}

// ProductGroupsDeletePreviewList converts echo context to params.
func (w *ServerInterfaceWrapper) ProductGroupsDeletePreviewList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProductGroupsDeletePreviewListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductGroupsDeletePreviewList(ctx, id, params)
	return err
}

// ProductMembersList converts echo context to params.
func (w *ServerInterfaceWrapper) ProductMembersList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProductMembersListParams
	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// ------------- Optional query parameter "product_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "product_id", ctx.QueryParams(), &params.ProductId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product_id: %s", err))
	}

	// ------------- Optional query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductMembersList(ctx, params)
	return err
}

// ProductMembersCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ProductMembersCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductMembersCreate(ctx)
	return err
}

// ProductMembersDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) ProductMembersDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductMembersDestroy(ctx, id)
	return err
}

// ProductMembersRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) ProductMembersRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProductMembersRetrieveParams
	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductMembersRetrieve(ctx, id, params)
	return err
}

// ProductMembersPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ProductMembersPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductMembersPartialUpdate(ctx, id)
	return err
}

// ProductMembersUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ProductMembersUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductMembersUpdate(ctx, id)
	return err
}

// ProductMembersDeletePreviewList converts echo context to params.
func (w *ServerInterfaceWrapper) ProductMembersDeletePreviewList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProductMembersDeletePreviewListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductMembersDeletePreviewList(ctx, id, params)
	return err
}

// ProductTypeGroupsList converts echo context to params.
func (w *ServerInterfaceWrapper) ProductTypeGroupsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProductTypeGroupsListParams
	// ------------- Optional query parameter "group_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "group_id", ctx.QueryParams(), &params.GroupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter group_id: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// ------------- Optional query parameter "product_type_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "product_type_id", ctx.QueryParams(), &params.ProductTypeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product_type_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductTypeGroupsList(ctx, params)
	return err
}

// ProductTypeGroupsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ProductTypeGroupsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductTypeGroupsCreate(ctx)
	return err
}

// ProductTypeGroupsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) ProductTypeGroupsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductTypeGroupsDestroy(ctx, id)
	return err
}

// ProductTypeGroupsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) ProductTypeGroupsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProductTypeGroupsRetrieveParams
	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductTypeGroupsRetrieve(ctx, id, params)
	return err
}

// ProductTypeGroupsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ProductTypeGroupsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductTypeGroupsPartialUpdate(ctx, id)
	return err
}

// ProductTypeGroupsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ProductTypeGroupsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductTypeGroupsUpdate(ctx, id)
	return err
}

// ProductTypeGroupsDeletePreviewList converts echo context to params.
func (w *ServerInterfaceWrapper) ProductTypeGroupsDeletePreviewList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProductTypeGroupsDeletePreviewListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductTypeGroupsDeletePreviewList(ctx, id, params)
	return err
}

// ProductTypeMembersList converts echo context to params.
func (w *ServerInterfaceWrapper) ProductTypeMembersList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProductTypeMembersListParams
	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// ------------- Optional query parameter "product_type_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "product_type_id", ctx.QueryParams(), &params.ProductTypeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product_type_id: %s", err))
	}

	// ------------- Optional query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductTypeMembersList(ctx, params)
	return err
}

// ProductTypeMembersCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ProductTypeMembersCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductTypeMembersCreate(ctx)
	return err
}

// ProductTypeMembersDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) ProductTypeMembersDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductTypeMembersDestroy(ctx, id)
	return err
}

// ProductTypeMembersRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) ProductTypeMembersRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProductTypeMembersRetrieveParams
	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductTypeMembersRetrieve(ctx, id, params)
	return err
}

// ProductTypeMembersPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ProductTypeMembersPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductTypeMembersPartialUpdate(ctx, id)
	return err
}

// ProductTypeMembersUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ProductTypeMembersUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductTypeMembersUpdate(ctx, id)
	return err
}

// ProductTypeMembersDeletePreviewList converts echo context to params.
func (w *ServerInterfaceWrapper) ProductTypeMembersDeletePreviewList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProductTypeMembersDeletePreviewListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductTypeMembersDeletePreviewList(ctx, id, params)
	return err
}

// ProductTypesList converts echo context to params.
func (w *ServerInterfaceWrapper) ProductTypesList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProductTypesListParams
	// ------------- Optional query parameter "created" -------------

	err = runtime.BindQueryParameter("form", true, false, "created", ctx.QueryParams(), &params.Created)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter created: %s", err))
	}

	// ------------- Optional query parameter "critical_product" -------------

	err = runtime.BindQueryParameter("form", true, false, "critical_product", ctx.QueryParams(), &params.CriticalProduct)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter critical_product: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "key_product" -------------

	err = runtime.BindQueryParameter("form", true, false, "key_product", ctx.QueryParams(), &params.KeyProduct)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key_product: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// ------------- Optional query parameter "updated" -------------

	err = runtime.BindQueryParameter("form", true, false, "updated", ctx.QueryParams(), &params.Updated)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter updated: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductTypesList(ctx, params)
	return err
}

// ProductTypesCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ProductTypesCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductTypesCreate(ctx)
	return err
}

// ProductTypesDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) ProductTypesDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductTypesDestroy(ctx, id)
	return err
}

// ProductTypesRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) ProductTypesRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProductTypesRetrieveParams
	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductTypesRetrieve(ctx, id, params)
	return err
}

// ProductTypesPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ProductTypesPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductTypesPartialUpdate(ctx, id)
	return err
}

// ProductTypesUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ProductTypesUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductTypesUpdate(ctx, id)
	return err
}

// ProductTypesDeletePreviewList converts echo context to params.
func (w *ServerInterfaceWrapper) ProductTypesDeletePreviewList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProductTypesDeletePreviewListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductTypesDeletePreviewList(ctx, id, params)
	return err
}

// ProductTypesGenerateReportCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ProductTypesGenerateReportCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductTypesGenerateReportCreate(ctx, id)
	return err
}

// ProductsList converts echo context to params.
func (w *ServerInterfaceWrapper) ProductsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProductsListParams
	// ------------- Optional query parameter "business_criticality" -------------

	err = runtime.BindQueryParameter("form", true, false, "business_criticality", ctx.QueryParams(), &params.BusinessCriticality)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter business_criticality: %s", err))
	}

	// ------------- Optional query parameter "created" -------------

	err = runtime.BindQueryParameter("form", true, false, "created", ctx.QueryParams(), &params.Created)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter created: %s", err))
	}

	// ------------- Optional query parameter "description" -------------

	err = runtime.BindQueryParameter("form", true, false, "description", ctx.QueryParams(), &params.Description)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter description: %s", err))
	}

	// ------------- Optional query parameter "external_audience" -------------

	err = runtime.BindQueryParameter("form", true, false, "external_audience", ctx.QueryParams(), &params.ExternalAudience)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter external_audience: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", false, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "internet_accessible" -------------

	err = runtime.BindQueryParameter("form", true, false, "internet_accessible", ctx.QueryParams(), &params.InternetAccessible)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter internet_accessible: %s", err))
	}

	// ------------- Optional query parameter "lifecycle" -------------

	err = runtime.BindQueryParameter("form", true, false, "lifecycle", ctx.QueryParams(), &params.Lifecycle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lifecycle: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "name_exact" -------------

	err = runtime.BindQueryParameter("form", true, false, "name_exact", ctx.QueryParams(), &params.NameExact)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name_exact: %s", err))
	}

	// ------------- Optional query parameter "not_tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "not_tag", ctx.QueryParams(), &params.NotTag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_tag: %s", err))
	}

	// ------------- Optional query parameter "not_tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "not_tags", ctx.QueryParams(), &params.NotTags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_tags: %s", err))
	}

	// ------------- Optional query parameter "o" -------------

	err = runtime.BindQueryParameter("form", false, false, "o", ctx.QueryParams(), &params.O)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter o: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "origin" -------------

	err = runtime.BindQueryParameter("form", true, false, "origin", ctx.QueryParams(), &params.Origin)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter origin: %s", err))
	}

	// ------------- Optional query parameter "platform" -------------

	err = runtime.BindQueryParameter("form", true, false, "platform", ctx.QueryParams(), &params.Platform)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter platform: %s", err))
	}

	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// ------------- Optional query parameter "prod_numeric_grade" -------------

	err = runtime.BindQueryParameter("form", false, false, "prod_numeric_grade", ctx.QueryParams(), &params.ProdNumericGrade)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prod_numeric_grade: %s", err))
	}

	// ------------- Optional query parameter "prod_type" -------------

	err = runtime.BindQueryParameter("form", false, false, "prod_type", ctx.QueryParams(), &params.ProdType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prod_type: %s", err))
	}

	// ------------- Optional query parameter "product_manager" -------------

	err = runtime.BindQueryParameter("form", false, false, "product_manager", ctx.QueryParams(), &params.ProductManager)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product_manager: %s", err))
	}

	// ------------- Optional query parameter "regulations" -------------

	err = runtime.BindQueryParameter("form", false, false, "regulations", ctx.QueryParams(), &params.Regulations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regulations: %s", err))
	}

	// ------------- Optional query parameter "revenue" -------------

	err = runtime.BindQueryParameter("form", true, false, "revenue", ctx.QueryParams(), &params.Revenue)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revenue: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "team_manager" -------------

	err = runtime.BindQueryParameter("form", false, false, "team_manager", ctx.QueryParams(), &params.TeamManager)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter team_manager: %s", err))
	}

	// ------------- Optional query parameter "technical_contact" -------------

	err = runtime.BindQueryParameter("form", false, false, "technical_contact", ctx.QueryParams(), &params.TechnicalContact)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter technical_contact: %s", err))
	}

	// ------------- Optional query parameter "tid" -------------

	err = runtime.BindQueryParameter("form", false, false, "tid", ctx.QueryParams(), &params.Tid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tid: %s", err))
	}

	// ------------- Optional query parameter "updated" -------------

	err = runtime.BindQueryParameter("form", true, false, "updated", ctx.QueryParams(), &params.Updated)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter updated: %s", err))
	}

	// ------------- Optional query parameter "user_records" -------------

	err = runtime.BindQueryParameter("form", false, false, "user_records", ctx.QueryParams(), &params.UserRecords)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_records: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductsList(ctx, params)
	return err
}

// ProductsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ProductsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductsCreate(ctx)
	return err
}

// ProductsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) ProductsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductsDestroy(ctx, id)
	return err
}

// ProductsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) ProductsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProductsRetrieveParams
	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductsRetrieve(ctx, id, params)
	return err
}

// ProductsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ProductsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductsPartialUpdate(ctx, id)
	return err
}

// ProductsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ProductsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductsUpdate(ctx, id)
	return err
}

// ProductsDeletePreviewList converts echo context to params.
func (w *ServerInterfaceWrapper) ProductsDeletePreviewList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProductsDeletePreviewListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductsDeletePreviewList(ctx, id, params)
	return err
}

// ProductsGenerateReportCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ProductsGenerateReportCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProductsGenerateReportCreate(ctx, id)
	return err
}

// QuestionnaireAnsweredQuestionnairesList converts echo context to params.
func (w *ServerInterfaceWrapper) QuestionnaireAnsweredQuestionnairesList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params QuestionnaireAnsweredQuestionnairesListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QuestionnaireAnsweredQuestionnairesList(ctx, params)
	return err
}

// QuestionnaireAnsweredQuestionnairesRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) QuestionnaireAnsweredQuestionnairesRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QuestionnaireAnsweredQuestionnairesRetrieve(ctx, id)
	return err
}

// QuestionnaireAnswersList converts echo context to params.
func (w *ServerInterfaceWrapper) QuestionnaireAnswersList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params QuestionnaireAnswersListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QuestionnaireAnswersList(ctx, params)
	return err
}

// QuestionnaireAnswersRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) QuestionnaireAnswersRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QuestionnaireAnswersRetrieve(ctx, id)
	return err
}

// QuestionnaireEngagementQuestionnairesList converts echo context to params.
func (w *ServerInterfaceWrapper) QuestionnaireEngagementQuestionnairesList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params QuestionnaireEngagementQuestionnairesListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QuestionnaireEngagementQuestionnairesList(ctx, params)
	return err
}

// QuestionnaireEngagementQuestionnairesRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) QuestionnaireEngagementQuestionnairesRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QuestionnaireEngagementQuestionnairesRetrieve(ctx, id)
	return err
}

// QuestionnaireGeneralQuestionnairesList converts echo context to params.
func (w *ServerInterfaceWrapper) QuestionnaireGeneralQuestionnairesList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params QuestionnaireGeneralQuestionnairesListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QuestionnaireGeneralQuestionnairesList(ctx, params)
	return err
}

// QuestionnaireGeneralQuestionnairesRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) QuestionnaireGeneralQuestionnairesRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QuestionnaireGeneralQuestionnairesRetrieve(ctx, id)
	return err
}

// QuestionnaireQuestionsList converts echo context to params.
func (w *ServerInterfaceWrapper) QuestionnaireQuestionsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params QuestionnaireQuestionsListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QuestionnaireQuestionsList(ctx, params)
	return err
}

// QuestionnaireQuestionsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) QuestionnaireQuestionsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QuestionnaireQuestionsRetrieve(ctx, id)
	return err
}

// RegulationsList converts echo context to params.
func (w *ServerInterfaceWrapper) RegulationsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegulationsListParams
	// ------------- Optional query parameter "description" -------------

	err = runtime.BindQueryParameter("form", true, false, "description", ctx.QueryParams(), &params.Description)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter description: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegulationsList(ctx, params)
	return err
}

// RegulationsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) RegulationsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegulationsCreate(ctx)
	return err
}

// RegulationsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) RegulationsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegulationsDestroy(ctx, id)
	return err
}

// RegulationsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) RegulationsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegulationsRetrieve(ctx, id)
	return err
}

// RegulationsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) RegulationsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegulationsPartialUpdate(ctx, id)
	return err
}

// RegulationsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) RegulationsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegulationsUpdate(ctx, id)
	return err
}

// RegulationsDeletePreviewList converts echo context to params.
func (w *ServerInterfaceWrapper) RegulationsDeletePreviewList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegulationsDeletePreviewListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegulationsDeletePreviewList(ctx, id, params)
	return err
}

// ReimportScanCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ReimportScanCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReimportScanCreate(ctx)
	return err
}

// RiskAcceptanceList converts echo context to params.
func (w *ServerInterfaceWrapper) RiskAcceptanceList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params RiskAcceptanceListParams
	// ------------- Optional query parameter "accepted_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "accepted_by", ctx.QueryParams(), &params.AcceptedBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accepted_by: %s", err))
	}

	// ------------- Optional query parameter "accepted_findings" -------------

	err = runtime.BindQueryParameter("form", true, false, "accepted_findings", ctx.QueryParams(), &params.AcceptedFindings)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accepted_findings: %s", err))
	}

	// ------------- Optional query parameter "decision" -------------

	err = runtime.BindQueryParameter("form", true, false, "decision", ctx.QueryParams(), &params.Decision)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter decision: %s", err))
	}

	// ------------- Optional query parameter "decision_details" -------------

	err = runtime.BindQueryParameter("form", true, false, "decision_details", ctx.QueryParams(), &params.DecisionDetails)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter decision_details: %s", err))
	}

	// ------------- Optional query parameter "expiration_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "expiration_date", ctx.QueryParams(), &params.ExpirationDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter expiration_date: %s", err))
	}

	// ------------- Optional query parameter "expiration_date_handled" -------------

	err = runtime.BindQueryParameter("form", true, false, "expiration_date_handled", ctx.QueryParams(), &params.ExpirationDateHandled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter expiration_date_handled: %s", err))
	}

	// ------------- Optional query parameter "expiration_date_warned" -------------

	err = runtime.BindQueryParameter("form", true, false, "expiration_date_warned", ctx.QueryParams(), &params.ExpirationDateWarned)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter expiration_date_warned: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "notes" -------------

	err = runtime.BindQueryParameter("form", true, false, "notes", ctx.QueryParams(), &params.Notes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter notes: %s", err))
	}

	// ------------- Optional query parameter "o" -------------

	err = runtime.BindQueryParameter("form", false, false, "o", ctx.QueryParams(), &params.O)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter o: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "owner" -------------

	err = runtime.BindQueryParameter("form", true, false, "owner", ctx.QueryParams(), &params.Owner)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter owner: %s", err))
	}

	// ------------- Optional query parameter "reactivate_expired" -------------

	err = runtime.BindQueryParameter("form", true, false, "reactivate_expired", ctx.QueryParams(), &params.ReactivateExpired)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reactivate_expired: %s", err))
	}

	// ------------- Optional query parameter "recommendation" -------------

	err = runtime.BindQueryParameter("form", true, false, "recommendation", ctx.QueryParams(), &params.Recommendation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recommendation: %s", err))
	}

	// ------------- Optional query parameter "recommendation_details" -------------

	err = runtime.BindQueryParameter("form", true, false, "recommendation_details", ctx.QueryParams(), &params.RecommendationDetails)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recommendation_details: %s", err))
	}

	// ------------- Optional query parameter "restart_sla_expired" -------------

	err = runtime.BindQueryParameter("form", true, false, "restart_sla_expired", ctx.QueryParams(), &params.RestartSlaExpired)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter restart_sla_expired: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RiskAcceptanceList(ctx, params)
	return err
}

// RiskAcceptanceDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) RiskAcceptanceDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RiskAcceptanceDestroy(ctx, id)
	return err
}

// RiskAcceptanceRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) RiskAcceptanceRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RiskAcceptanceRetrieve(ctx, id)
	return err
}

// RiskAcceptanceDeletePreviewList converts echo context to params.
func (w *ServerInterfaceWrapper) RiskAcceptanceDeletePreviewList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params RiskAcceptanceDeletePreviewListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RiskAcceptanceDeletePreviewList(ctx, id, params)
	return err
}

// RiskAcceptanceDownloadProofRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) RiskAcceptanceDownloadProofRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RiskAcceptanceDownloadProofRetrieve(ctx, id)
	return err
}

// RolesList converts echo context to params.
func (w *ServerInterfaceWrapper) RolesList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params RolesListParams
	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RolesList(ctx, params)
	return err
}

// RolesRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) RolesRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RolesRetrieve(ctx, id)
	return err
}

// SlaConfigurationsList converts echo context to params.
func (w *ServerInterfaceWrapper) SlaConfigurationsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SlaConfigurationsListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SlaConfigurationsList(ctx, params)
	return err
}

// SlaConfigurationsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) SlaConfigurationsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SlaConfigurationsCreate(ctx)
	return err
}

// SlaConfigurationsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) SlaConfigurationsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SlaConfigurationsDestroy(ctx, id)
	return err
}

// SlaConfigurationsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) SlaConfigurationsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SlaConfigurationsRetrieve(ctx, id)
	return err
}

// SlaConfigurationsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) SlaConfigurationsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SlaConfigurationsPartialUpdate(ctx, id)
	return err
}

// SlaConfigurationsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) SlaConfigurationsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SlaConfigurationsUpdate(ctx, id)
	return err
}

// SonarqubeIssuesList converts echo context to params.
func (w *ServerInterfaceWrapper) SonarqubeIssuesList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SonarqubeIssuesListParams
	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "key" -------------

	err = runtime.BindQueryParameter("form", true, false, "key", ctx.QueryParams(), &params.Key)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SonarqubeIssuesList(ctx, params)
	return err
}

// SonarqubeIssuesCreate converts echo context to params.
func (w *ServerInterfaceWrapper) SonarqubeIssuesCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SonarqubeIssuesCreate(ctx)
	return err
}

// SonarqubeIssuesDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) SonarqubeIssuesDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SonarqubeIssuesDestroy(ctx, id)
	return err
}

// SonarqubeIssuesRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) SonarqubeIssuesRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SonarqubeIssuesRetrieve(ctx, id)
	return err
}

// SonarqubeIssuesPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) SonarqubeIssuesPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SonarqubeIssuesPartialUpdate(ctx, id)
	return err
}

// SonarqubeIssuesUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) SonarqubeIssuesUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SonarqubeIssuesUpdate(ctx, id)
	return err
}

// SonarqubeIssuesDeletePreviewList converts echo context to params.
func (w *ServerInterfaceWrapper) SonarqubeIssuesDeletePreviewList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SonarqubeIssuesDeletePreviewListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SonarqubeIssuesDeletePreviewList(ctx, id, params)
	return err
}

// SonarqubeTransitionsList converts echo context to params.
func (w *ServerInterfaceWrapper) SonarqubeTransitionsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SonarqubeTransitionsListParams
	// ------------- Optional query parameter "finding_status" -------------

	err = runtime.BindQueryParameter("form", true, false, "finding_status", ctx.QueryParams(), &params.FindingStatus)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter finding_status: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "sonarqube_issue" -------------

	err = runtime.BindQueryParameter("form", true, false, "sonarqube_issue", ctx.QueryParams(), &params.SonarqubeIssue)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sonarqube_issue: %s", err))
	}

	// ------------- Optional query parameter "sonarqube_status" -------------

	err = runtime.BindQueryParameter("form", true, false, "sonarqube_status", ctx.QueryParams(), &params.SonarqubeStatus)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sonarqube_status: %s", err))
	}

	// ------------- Optional query parameter "transitions" -------------

	err = runtime.BindQueryParameter("form", true, false, "transitions", ctx.QueryParams(), &params.Transitions)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter transitions: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SonarqubeTransitionsList(ctx, params)
	return err
}

// SonarqubeTransitionsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) SonarqubeTransitionsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SonarqubeTransitionsCreate(ctx)
	return err
}

// SonarqubeTransitionsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) SonarqubeTransitionsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SonarqubeTransitionsDestroy(ctx, id)
	return err
}

// SonarqubeTransitionsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) SonarqubeTransitionsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SonarqubeTransitionsRetrieve(ctx, id)
	return err
}

// SonarqubeTransitionsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) SonarqubeTransitionsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SonarqubeTransitionsPartialUpdate(ctx, id)
	return err
}

// SonarqubeTransitionsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) SonarqubeTransitionsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SonarqubeTransitionsUpdate(ctx, id)
	return err
}

// SonarqubeTransitionsDeletePreviewList converts echo context to params.
func (w *ServerInterfaceWrapper) SonarqubeTransitionsDeletePreviewList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SonarqubeTransitionsDeletePreviewListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SonarqubeTransitionsDeletePreviewList(ctx, id, params)
	return err
}

// StubFindingsList converts echo context to params.
func (w *ServerInterfaceWrapper) StubFindingsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params StubFindingsListParams
	// ------------- Optional query parameter "date" -------------

	err = runtime.BindQueryParameter("form", true, false, "date", ctx.QueryParams(), &params.Date)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter date: %s", err))
	}

	// ------------- Optional query parameter "description" -------------

	err = runtime.BindQueryParameter("form", true, false, "description", ctx.QueryParams(), &params.Description)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter description: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "severity" -------------

	err = runtime.BindQueryParameter("form", true, false, "severity", ctx.QueryParams(), &params.Severity)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter severity: %s", err))
	}

	// ------------- Optional query parameter "title" -------------

	err = runtime.BindQueryParameter("form", true, false, "title", ctx.QueryParams(), &params.Title)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter title: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StubFindingsList(ctx, params)
	return err
}

// StubFindingsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) StubFindingsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StubFindingsCreate(ctx)
	return err
}

// StubFindingsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) StubFindingsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StubFindingsDestroy(ctx, id)
	return err
}

// StubFindingsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) StubFindingsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StubFindingsRetrieve(ctx, id)
	return err
}

// StubFindingsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) StubFindingsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StubFindingsPartialUpdate(ctx, id)
	return err
}

// StubFindingsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) StubFindingsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StubFindingsUpdate(ctx, id)
	return err
}

// StubFindingsDeletePreviewList converts echo context to params.
func (w *ServerInterfaceWrapper) StubFindingsDeletePreviewList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params StubFindingsDeletePreviewListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StubFindingsDeletePreviewList(ctx, id, params)
	return err
}

// SystemSettingsList converts echo context to params.
func (w *ServerInterfaceWrapper) SystemSettingsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SystemSettingsListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SystemSettingsList(ctx, params)
	return err
}

// SystemSettingsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) SystemSettingsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SystemSettingsPartialUpdate(ctx, id)
	return err
}

// SystemSettingsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) SystemSettingsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SystemSettingsUpdate(ctx, id)
	return err
}

// TechnologiesList converts echo context to params.
func (w *ServerInterfaceWrapper) TechnologiesList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params TechnologiesListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "not_tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "not_tag", ctx.QueryParams(), &params.NotTag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_tag: %s", err))
	}

	// ------------- Optional query parameter "not_tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "not_tags", ctx.QueryParams(), &params.NotTags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_tags: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "product" -------------

	err = runtime.BindQueryParameter("form", true, false, "product", ctx.QueryParams(), &params.Product)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "user" -------------

	err = runtime.BindQueryParameter("form", true, false, "user", ctx.QueryParams(), &params.User)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user: %s", err))
	}

	// ------------- Optional query parameter "version" -------------

	err = runtime.BindQueryParameter("form", true, false, "version", ctx.QueryParams(), &params.Version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TechnologiesList(ctx, params)
	return err
}

// TechnologiesCreate converts echo context to params.
func (w *ServerInterfaceWrapper) TechnologiesCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TechnologiesCreate(ctx)
	return err
}

// TechnologiesDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) TechnologiesDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TechnologiesDestroy(ctx, id)
	return err
}

// TechnologiesRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) TechnologiesRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TechnologiesRetrieve(ctx, id)
	return err
}

// TechnologiesPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) TechnologiesPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TechnologiesPartialUpdate(ctx, id)
	return err
}

// TechnologiesUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) TechnologiesUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TechnologiesUpdate(ctx, id)
	return err
}

// TechnologiesDeletePreviewList converts echo context to params.
func (w *ServerInterfaceWrapper) TechnologiesDeletePreviewList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params TechnologiesDeletePreviewListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TechnologiesDeletePreviewList(ctx, id, params)
	return err
}

// TestImportsList converts echo context to params.
func (w *ServerInterfaceWrapper) TestImportsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params TestImportsListParams
	// ------------- Optional query parameter "branch_tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "branch_tag", ctx.QueryParams(), &params.BranchTag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter branch_tag: %s", err))
	}

	// ------------- Optional query parameter "build_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "build_id", ctx.QueryParams(), &params.BuildId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter build_id: %s", err))
	}

	// ------------- Optional query parameter "commit_hash" -------------

	err = runtime.BindQueryParameter("form", true, false, "commit_hash", ctx.QueryParams(), &params.CommitHash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter commit_hash: %s", err))
	}

	// ------------- Optional query parameter "findings_affected" -------------

	err = runtime.BindQueryParameter("form", true, false, "findings_affected", ctx.QueryParams(), &params.FindingsAffected)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter findings_affected: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// ------------- Optional query parameter "test" -------------

	err = runtime.BindQueryParameter("form", true, false, "test", ctx.QueryParams(), &params.Test)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter test: %s", err))
	}

	// ------------- Optional query parameter "test_import_finding_action__action" -------------

	err = runtime.BindQueryParameter("form", true, false, "test_import_finding_action__action", ctx.QueryParams(), &params.TestImportFindingActionAction)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter test_import_finding_action__action: %s", err))
	}

	// ------------- Optional query parameter "test_import_finding_action__created" -------------

	err = runtime.BindQueryParameter("form", true, false, "test_import_finding_action__created", ctx.QueryParams(), &params.TestImportFindingActionCreated)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter test_import_finding_action__created: %s", err))
	}

	// ------------- Optional query parameter "test_import_finding_action__finding" -------------

	err = runtime.BindQueryParameter("form", true, false, "test_import_finding_action__finding", ctx.QueryParams(), &params.TestImportFindingActionFinding)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter test_import_finding_action__finding: %s", err))
	}

	// ------------- Optional query parameter "version" -------------

	err = runtime.BindQueryParameter("form", true, false, "version", ctx.QueryParams(), &params.Version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestImportsList(ctx, params)
	return err
}

// TestImportsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) TestImportsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestImportsCreate(ctx)
	return err
}

// TestImportsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) TestImportsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestImportsDestroy(ctx, id)
	return err
}

// TestImportsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) TestImportsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params TestImportsRetrieveParams
	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestImportsRetrieve(ctx, id, params)
	return err
}

// TestImportsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) TestImportsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestImportsPartialUpdate(ctx, id)
	return err
}

// TestImportsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) TestImportsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestImportsUpdate(ctx, id)
	return err
}

// TestImportsDeletePreviewList converts echo context to params.
func (w *ServerInterfaceWrapper) TestImportsDeletePreviewList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params TestImportsDeletePreviewListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestImportsDeletePreviewList(ctx, id, params)
	return err
}

// TestTypesList converts echo context to params.
func (w *ServerInterfaceWrapper) TestTypesList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params TestTypesListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestTypesList(ctx, params)
	return err
}

// TestTypesCreate converts echo context to params.
func (w *ServerInterfaceWrapper) TestTypesCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestTypesCreate(ctx)
	return err
}

// TestTypesRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) TestTypesRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestTypesRetrieve(ctx, id)
	return err
}

// TestTypesPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) TestTypesPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestTypesPartialUpdate(ctx, id)
	return err
}

// TestTypesUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) TestTypesUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestTypesUpdate(ctx, id)
	return err
}

// TestsList converts echo context to params.
func (w *ServerInterfaceWrapper) TestsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params TestsListParams
	// ------------- Optional query parameter "actual_time" -------------

	err = runtime.BindQueryParameter("form", true, false, "actual_time", ctx.QueryParams(), &params.ActualTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter actual_time: %s", err))
	}

	// ------------- Optional query parameter "api_scan_configuration" -------------

	err = runtime.BindQueryParameter("form", true, false, "api_scan_configuration", ctx.QueryParams(), &params.ApiScanConfiguration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter api_scan_configuration: %s", err))
	}

	// ------------- Optional query parameter "branch_tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "branch_tag", ctx.QueryParams(), &params.BranchTag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter branch_tag: %s", err))
	}

	// ------------- Optional query parameter "build_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "build_id", ctx.QueryParams(), &params.BuildId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter build_id: %s", err))
	}

	// ------------- Optional query parameter "commit_hash" -------------

	err = runtime.BindQueryParameter("form", true, false, "commit_hash", ctx.QueryParams(), &params.CommitHash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter commit_hash: %s", err))
	}

	// ------------- Optional query parameter "engagement" -------------

	err = runtime.BindQueryParameter("form", true, false, "engagement", ctx.QueryParams(), &params.Engagement)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter engagement: %s", err))
	}

	// ------------- Optional query parameter "engagement__product__tags__name" -------------

	err = runtime.BindQueryParameter("form", false, false, "engagement__product__tags__name", ctx.QueryParams(), &params.EngagementProductTagsName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter engagement__product__tags__name: %s", err))
	}

	// ------------- Optional query parameter "engagement__tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "engagement__tags", ctx.QueryParams(), &params.EngagementTags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter engagement__tags: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "not_engagement__product__tags__name" -------------

	err = runtime.BindQueryParameter("form", false, false, "not_engagement__product__tags__name", ctx.QueryParams(), &params.NotEngagementProductTagsName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_engagement__product__tags__name: %s", err))
	}

	// ------------- Optional query parameter "not_engagement__tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "not_engagement__tags", ctx.QueryParams(), &params.NotEngagementTags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_engagement__tags: %s", err))
	}

	// ------------- Optional query parameter "not_tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "not_tag", ctx.QueryParams(), &params.NotTag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_tag: %s", err))
	}

	// ------------- Optional query parameter "not_tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "not_tags", ctx.QueryParams(), &params.NotTags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_tags: %s", err))
	}

	// ------------- Optional query parameter "notes" -------------

	err = runtime.BindQueryParameter("form", true, false, "notes", ctx.QueryParams(), &params.Notes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter notes: %s", err))
	}

	// ------------- Optional query parameter "o" -------------

	err = runtime.BindQueryParameter("form", false, false, "o", ctx.QueryParams(), &params.O)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter o: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "percent_complete" -------------

	err = runtime.BindQueryParameter("form", true, false, "percent_complete", ctx.QueryParams(), &params.PercentComplete)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter percent_complete: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "target_end" -------------

	err = runtime.BindQueryParameter("form", true, false, "target_end", ctx.QueryParams(), &params.TargetEnd)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter target_end: %s", err))
	}

	// ------------- Optional query parameter "target_start" -------------

	err = runtime.BindQueryParameter("form", true, false, "target_start", ctx.QueryParams(), &params.TargetStart)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter target_start: %s", err))
	}

	// ------------- Optional query parameter "test_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "test_type", ctx.QueryParams(), &params.TestType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter test_type: %s", err))
	}

	// ------------- Optional query parameter "title" -------------

	err = runtime.BindQueryParameter("form", true, false, "title", ctx.QueryParams(), &params.Title)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter title: %s", err))
	}

	// ------------- Optional query parameter "version" -------------

	err = runtime.BindQueryParameter("form", true, false, "version", ctx.QueryParams(), &params.Version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestsList(ctx, params)
	return err
}

// TestsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) TestsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestsCreate(ctx)
	return err
}

// TestsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) TestsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestsDestroy(ctx, id)
	return err
}

// TestsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) TestsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestsRetrieve(ctx, id)
	return err
}

// TestsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) TestsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestsPartialUpdate(ctx, id)
	return err
}

// TestsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) TestsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestsUpdate(ctx, id)
	return err
}

// TestsAcceptRisksCreate converts echo context to params.
func (w *ServerInterfaceWrapper) TestsAcceptRisksCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestsAcceptRisksCreate(ctx, id)
	return err
}

// TestsDeletePreviewList converts echo context to params.
func (w *ServerInterfaceWrapper) TestsDeletePreviewList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params TestsDeletePreviewListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestsDeletePreviewList(ctx, id, params)
	return err
}

// TestsFilesRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) TestsFilesRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestsFilesRetrieve(ctx, id)
	return err
}

// TestsFilesCreate converts echo context to params.
func (w *ServerInterfaceWrapper) TestsFilesCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestsFilesCreate(ctx, id)
	return err
}

// TestsFilesDownloadRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) TestsFilesDownloadRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "file_id" -------------
	var fileId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "file_id", runtime.ParamLocationPath, ctx.Param("file_id"), &fileId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter file_id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestsFilesDownloadRetrieve(ctx, id, fileId)
	return err
}

// TestsGenerateReportCreate converts echo context to params.
func (w *ServerInterfaceWrapper) TestsGenerateReportCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestsGenerateReportCreate(ctx, id)
	return err
}

// TestsNotesRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) TestsNotesRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestsNotesRetrieve(ctx, id)
	return err
}

// TestsNotesCreate converts echo context to params.
func (w *ServerInterfaceWrapper) TestsNotesCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TestsNotesCreate(ctx, id)
	return err
}

// ToolConfigurationsList converts echo context to params.
func (w *ServerInterfaceWrapper) ToolConfigurationsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ToolConfigurationsListParams
	// ------------- Optional query parameter "authentication_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "authentication_type", ctx.QueryParams(), &params.AuthenticationType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter authentication_type: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "tool_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "tool_type", ctx.QueryParams(), &params.ToolType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tool_type: %s", err))
	}

	// ------------- Optional query parameter "url" -------------

	err = runtime.BindQueryParameter("form", true, false, "url", ctx.QueryParams(), &params.Url)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter url: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ToolConfigurationsList(ctx, params)
	return err
}

// ToolConfigurationsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ToolConfigurationsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ToolConfigurationsCreate(ctx)
	return err
}

// ToolConfigurationsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) ToolConfigurationsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ToolConfigurationsDestroy(ctx, id)
	return err
}

// ToolConfigurationsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) ToolConfigurationsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ToolConfigurationsRetrieve(ctx, id)
	return err
}

// ToolConfigurationsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ToolConfigurationsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ToolConfigurationsPartialUpdate(ctx, id)
	return err
}

// ToolConfigurationsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ToolConfigurationsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ToolConfigurationsUpdate(ctx, id)
	return err
}

// ToolConfigurationsDeletePreviewList converts echo context to params.
func (w *ServerInterfaceWrapper) ToolConfigurationsDeletePreviewList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ToolConfigurationsDeletePreviewListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ToolConfigurationsDeletePreviewList(ctx, id, params)
	return err
}

// ToolProductSettingsList converts echo context to params.
func (w *ServerInterfaceWrapper) ToolProductSettingsList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ToolProductSettingsListParams
	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "product" -------------

	err = runtime.BindQueryParameter("form", true, false, "product", ctx.QueryParams(), &params.Product)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product: %s", err))
	}

	// ------------- Optional query parameter "tool_configuration" -------------

	err = runtime.BindQueryParameter("form", true, false, "tool_configuration", ctx.QueryParams(), &params.ToolConfiguration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tool_configuration: %s", err))
	}

	// ------------- Optional query parameter "tool_project_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "tool_project_id", ctx.QueryParams(), &params.ToolProjectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tool_project_id: %s", err))
	}

	// ------------- Optional query parameter "url" -------------

	err = runtime.BindQueryParameter("form", true, false, "url", ctx.QueryParams(), &params.Url)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter url: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ToolProductSettingsList(ctx, params)
	return err
}

// ToolProductSettingsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ToolProductSettingsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ToolProductSettingsCreate(ctx)
	return err
}

// ToolProductSettingsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) ToolProductSettingsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ToolProductSettingsDestroy(ctx, id)
	return err
}

// ToolProductSettingsRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) ToolProductSettingsRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ToolProductSettingsRetrieve(ctx, id)
	return err
}

// ToolProductSettingsPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ToolProductSettingsPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ToolProductSettingsPartialUpdate(ctx, id)
	return err
}

// ToolProductSettingsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ToolProductSettingsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ToolProductSettingsUpdate(ctx, id)
	return err
}

// ToolProductSettingsDeletePreviewList converts echo context to params.
func (w *ServerInterfaceWrapper) ToolProductSettingsDeletePreviewList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ToolProductSettingsDeletePreviewListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ToolProductSettingsDeletePreviewList(ctx, id, params)
	return err
}

// ToolTypesList converts echo context to params.
func (w *ServerInterfaceWrapper) ToolTypesList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ToolTypesListParams
	// ------------- Optional query parameter "description" -------------

	err = runtime.BindQueryParameter("form", true, false, "description", ctx.QueryParams(), &params.Description)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter description: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ToolTypesList(ctx, params)
	return err
}

// ToolTypesCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ToolTypesCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ToolTypesCreate(ctx)
	return err
}

// ToolTypesDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) ToolTypesDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ToolTypesDestroy(ctx, id)
	return err
}

// ToolTypesRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) ToolTypesRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ToolTypesRetrieve(ctx, id)
	return err
}

// ToolTypesPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ToolTypesPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ToolTypesPartialUpdate(ctx, id)
	return err
}

// ToolTypesUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ToolTypesUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ToolTypesUpdate(ctx, id)
	return err
}

// ToolTypesDeletePreviewList converts echo context to params.
func (w *ServerInterfaceWrapper) ToolTypesDeletePreviewList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ToolTypesDeletePreviewListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ToolTypesDeletePreviewList(ctx, id, params)
	return err
}

// UserContactInfosList converts echo context to params.
func (w *ServerInterfaceWrapper) UserContactInfosList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UserContactInfosListParams
	// ------------- Optional query parameter "block_execution" -------------

	err = runtime.BindQueryParameter("form", true, false, "block_execution", ctx.QueryParams(), &params.BlockExecution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter block_execution: %s", err))
	}

	// ------------- Optional query parameter "cell_number" -------------

	err = runtime.BindQueryParameter("form", true, false, "cell_number", ctx.QueryParams(), &params.CellNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cell_number: %s", err))
	}

	// ------------- Optional query parameter "force_password_reset" -------------

	err = runtime.BindQueryParameter("form", true, false, "force_password_reset", ctx.QueryParams(), &params.ForcePasswordReset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter force_password_reset: %s", err))
	}

	// ------------- Optional query parameter "github_username" -------------

	err = runtime.BindQueryParameter("form", true, false, "github_username", ctx.QueryParams(), &params.GithubUsername)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter github_username: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "phone_number" -------------

	err = runtime.BindQueryParameter("form", true, false, "phone_number", ctx.QueryParams(), &params.PhoneNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter phone_number: %s", err))
	}

	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// ------------- Optional query parameter "slack_user_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "slack_user_id", ctx.QueryParams(), &params.SlackUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slack_user_id: %s", err))
	}

	// ------------- Optional query parameter "slack_username" -------------

	err = runtime.BindQueryParameter("form", true, false, "slack_username", ctx.QueryParams(), &params.SlackUsername)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slack_username: %s", err))
	}

	// ------------- Optional query parameter "title" -------------

	err = runtime.BindQueryParameter("form", true, false, "title", ctx.QueryParams(), &params.Title)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter title: %s", err))
	}

	// ------------- Optional query parameter "twitter_username" -------------

	err = runtime.BindQueryParameter("form", true, false, "twitter_username", ctx.QueryParams(), &params.TwitterUsername)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter twitter_username: %s", err))
	}

	// ------------- Optional query parameter "user" -------------

	err = runtime.BindQueryParameter("form", true, false, "user", ctx.QueryParams(), &params.User)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UserContactInfosList(ctx, params)
	return err
}

// UserContactInfosCreate converts echo context to params.
func (w *ServerInterfaceWrapper) UserContactInfosCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UserContactInfosCreate(ctx)
	return err
}

// UserContactInfosDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) UserContactInfosDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UserContactInfosDestroy(ctx, id)
	return err
}

// UserContactInfosRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) UserContactInfosRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UserContactInfosRetrieveParams
	// ------------- Optional query parameter "prefetch" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefetch", ctx.QueryParams(), &params.Prefetch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefetch: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UserContactInfosRetrieve(ctx, id, params)
	return err
}

// UserContactInfosPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) UserContactInfosPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UserContactInfosPartialUpdate(ctx, id)
	return err
}

// UserContactInfosUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) UserContactInfosUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UserContactInfosUpdate(ctx, id)
	return err
}

// UserContactInfosDeletePreviewList converts echo context to params.
func (w *ServerInterfaceWrapper) UserContactInfosDeletePreviewList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UserContactInfosDeletePreviewListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UserContactInfosDeletePreviewList(ctx, id, params)
	return err
}

// UserProfileRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) UserProfileRetrieve(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UserProfileRetrieve(ctx)
	return err
}

// UsersList converts echo context to params.
func (w *ServerInterfaceWrapper) UsersList(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersListParams
	// ------------- Optional query parameter "email" -------------

	err = runtime.BindQueryParameter("form", true, false, "email", ctx.QueryParams(), &params.Email)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter email: %s", err))
	}

	// ------------- Optional query parameter "first_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "first_name", ctx.QueryParams(), &params.FirstName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first_name: %s", err))
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "is_active" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_active", ctx.QueryParams(), &params.IsActive)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_active: %s", err))
	}

	// ------------- Optional query parameter "is_superuser" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_superuser", ctx.QueryParams(), &params.IsSuperuser)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_superuser: %s", err))
	}

	// ------------- Optional query parameter "last_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "last_name", ctx.QueryParams(), &params.LastName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last_name: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, false, "username", ctx.QueryParams(), &params.Username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UsersList(ctx, params)
	return err
}

// UsersCreate converts echo context to params.
func (w *ServerInterfaceWrapper) UsersCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UsersCreate(ctx)
	return err
}

// UsersDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) UsersDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UsersDestroy(ctx, id)
	return err
}

// UsersRetrieve converts echo context to params.
func (w *ServerInterfaceWrapper) UsersRetrieve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UsersRetrieve(ctx, id)
	return err
}

// UsersPartialUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) UsersPartialUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UsersPartialUpdate(ctx, id)
	return err
}

// UsersUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) UsersUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UsersUpdate(ctx, id)
	return err
}

// UsersDeletePreviewList converts echo context to params.
func (w *ServerInterfaceWrapper) UsersDeletePreviewList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersDeletePreviewListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UsersDeletePreviewList(ctx, id, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/api/v2/api-token-auth/", wrapper.ApiTokenAuthCreate)
	router.GET(baseURL+"/api/v2/configuration_permissions/", wrapper.ConfigurationPermissionsList)
	router.GET(baseURL+"/api/v2/configuration_permissions/:id/", wrapper.ConfigurationPermissionsRetrieve)
	router.GET(baseURL+"/api/v2/credential_mappings/", wrapper.CredentialMappingsList)
	router.POST(baseURL+"/api/v2/credential_mappings/", wrapper.CredentialMappingsCreate)
	router.DELETE(baseURL+"/api/v2/credential_mappings/:id/", wrapper.CredentialMappingsDestroy)
	router.GET(baseURL+"/api/v2/credential_mappings/:id/", wrapper.CredentialMappingsRetrieve)
	router.PATCH(baseURL+"/api/v2/credential_mappings/:id/", wrapper.CredentialMappingsPartialUpdate)
	router.PUT(baseURL+"/api/v2/credential_mappings/:id/", wrapper.CredentialMappingsUpdate)
	router.GET(baseURL+"/api/v2/credential_mappings/:id/delete_preview/", wrapper.CredentialMappingsDeletePreviewList)
	router.GET(baseURL+"/api/v2/credentials/", wrapper.CredentialsList)
	router.POST(baseURL+"/api/v2/credentials/", wrapper.CredentialsCreate)
	router.DELETE(baseURL+"/api/v2/credentials/:id/", wrapper.CredentialsDestroy)
	router.GET(baseURL+"/api/v2/credentials/:id/", wrapper.CredentialsRetrieve)
	router.PATCH(baseURL+"/api/v2/credentials/:id/", wrapper.CredentialsPartialUpdate)
	router.PUT(baseURL+"/api/v2/credentials/:id/", wrapper.CredentialsUpdate)
	router.GET(baseURL+"/api/v2/credentials/:id/delete_preview/", wrapper.CredentialsDeletePreviewList)
	router.GET(baseURL+"/api/v2/development_environments/", wrapper.DevelopmentEnvironmentsList)
	router.POST(baseURL+"/api/v2/development_environments/", wrapper.DevelopmentEnvironmentsCreate)
	router.DELETE(baseURL+"/api/v2/development_environments/:id/", wrapper.DevelopmentEnvironmentsDestroy)
	router.GET(baseURL+"/api/v2/development_environments/:id/", wrapper.DevelopmentEnvironmentsRetrieve)
	router.PATCH(baseURL+"/api/v2/development_environments/:id/", wrapper.DevelopmentEnvironmentsPartialUpdate)
	router.PUT(baseURL+"/api/v2/development_environments/:id/", wrapper.DevelopmentEnvironmentsUpdate)
	router.GET(baseURL+"/api/v2/development_environments/:id/delete_preview/", wrapper.DevelopmentEnvironmentsDeletePreviewList)
	router.GET(baseURL+"/api/v2/dojo_group_members/", wrapper.DojoGroupMembersList)
	router.POST(baseURL+"/api/v2/dojo_group_members/", wrapper.DojoGroupMembersCreate)
	router.DELETE(baseURL+"/api/v2/dojo_group_members/:id/", wrapper.DojoGroupMembersDestroy)
	router.GET(baseURL+"/api/v2/dojo_group_members/:id/", wrapper.DojoGroupMembersRetrieve)
	router.PATCH(baseURL+"/api/v2/dojo_group_members/:id/", wrapper.DojoGroupMembersPartialUpdate)
	router.PUT(baseURL+"/api/v2/dojo_group_members/:id/", wrapper.DojoGroupMembersUpdate)
	router.GET(baseURL+"/api/v2/dojo_group_members/:id/delete_preview/", wrapper.DojoGroupMembersDeletePreviewList)
	router.GET(baseURL+"/api/v2/dojo_groups/", wrapper.DojoGroupsList)
	router.POST(baseURL+"/api/v2/dojo_groups/", wrapper.DojoGroupsCreate)
	router.DELETE(baseURL+"/api/v2/dojo_groups/:id/", wrapper.DojoGroupsDestroy)
	router.GET(baseURL+"/api/v2/dojo_groups/:id/", wrapper.DojoGroupsRetrieve)
	router.PATCH(baseURL+"/api/v2/dojo_groups/:id/", wrapper.DojoGroupsPartialUpdate)
	router.PUT(baseURL+"/api/v2/dojo_groups/:id/", wrapper.DojoGroupsUpdate)
	router.GET(baseURL+"/api/v2/dojo_groups/:id/delete_preview/", wrapper.DojoGroupsDeletePreviewList)
	router.POST(baseURL+"/api/v2/endpoint_meta_import/", wrapper.EndpointMetaImportCreate)
	router.GET(baseURL+"/api/v2/endpoint_status/", wrapper.EndpointStatusList)
	router.POST(baseURL+"/api/v2/endpoint_status/", wrapper.EndpointStatusCreate)
	router.DELETE(baseURL+"/api/v2/endpoint_status/:id/", wrapper.EndpointStatusDestroy)
	router.GET(baseURL+"/api/v2/endpoint_status/:id/", wrapper.EndpointStatusRetrieve)
	router.PATCH(baseURL+"/api/v2/endpoint_status/:id/", wrapper.EndpointStatusPartialUpdate)
	router.PUT(baseURL+"/api/v2/endpoint_status/:id/", wrapper.EndpointStatusUpdate)
	router.GET(baseURL+"/api/v2/endpoint_status/:id/delete_preview/", wrapper.EndpointStatusDeletePreviewList)
	router.GET(baseURL+"/api/v2/endpoints/", wrapper.EndpointsList)
	router.POST(baseURL+"/api/v2/endpoints/", wrapper.EndpointsCreate)
	router.DELETE(baseURL+"/api/v2/endpoints/:id/", wrapper.EndpointsDestroy)
	router.GET(baseURL+"/api/v2/endpoints/:id/", wrapper.EndpointsRetrieve)
	router.PATCH(baseURL+"/api/v2/endpoints/:id/", wrapper.EndpointsPartialUpdate)
	router.PUT(baseURL+"/api/v2/endpoints/:id/", wrapper.EndpointsUpdate)
	router.GET(baseURL+"/api/v2/endpoints/:id/delete_preview/", wrapper.EndpointsDeletePreviewList)
	router.POST(baseURL+"/api/v2/endpoints/:id/generate_report/", wrapper.EndpointsGenerateReportCreate)
	router.GET(baseURL+"/api/v2/engagement_presets/", wrapper.EngagementPresetsList)
	router.POST(baseURL+"/api/v2/engagement_presets/", wrapper.EngagementPresetsCreate)
	router.DELETE(baseURL+"/api/v2/engagement_presets/:id/", wrapper.EngagementPresetsDestroy)
	router.GET(baseURL+"/api/v2/engagement_presets/:id/", wrapper.EngagementPresetsRetrieve)
	router.PATCH(baseURL+"/api/v2/engagement_presets/:id/", wrapper.EngagementPresetsPartialUpdate)
	router.PUT(baseURL+"/api/v2/engagement_presets/:id/", wrapper.EngagementPresetsUpdate)
	router.GET(baseURL+"/api/v2/engagement_presets/:id/delete_preview/", wrapper.EngagementPresetsDeletePreviewList)
	router.GET(baseURL+"/api/v2/engagements/", wrapper.EngagementsList)
	router.POST(baseURL+"/api/v2/engagements/", wrapper.EngagementsCreate)
	router.DELETE(baseURL+"/api/v2/engagements/:id/", wrapper.EngagementsDestroy)
	router.GET(baseURL+"/api/v2/engagements/:id/", wrapper.EngagementsRetrieve)
	router.PATCH(baseURL+"/api/v2/engagements/:id/", wrapper.EngagementsPartialUpdate)
	router.PUT(baseURL+"/api/v2/engagements/:id/", wrapper.EngagementsUpdate)
	router.POST(baseURL+"/api/v2/engagements/:id/accept_risks/", wrapper.EngagementsAcceptRisksCreate)
	router.POST(baseURL+"/api/v2/engagements/:id/close/", wrapper.EngagementsCloseCreate)
	router.GET(baseURL+"/api/v2/engagements/:id/complete_checklist/", wrapper.EngagementsCompleteChecklistRetrieve)
	router.POST(baseURL+"/api/v2/engagements/:id/complete_checklist/", wrapper.EngagementsCompleteChecklistCreate)
	router.GET(baseURL+"/api/v2/engagements/:id/delete_preview/", wrapper.EngagementsDeletePreviewList)
	router.GET(baseURL+"/api/v2/engagements/:id/files/", wrapper.EngagementsFilesRetrieve)
	router.POST(baseURL+"/api/v2/engagements/:id/files/", wrapper.EngagementsFilesCreate)
	router.GET(baseURL+"/api/v2/engagements/:id/files/download/:file_id/", wrapper.EngagementsFilesDownloadRetrieve)
	router.POST(baseURL+"/api/v2/engagements/:id/generate_report/", wrapper.EngagementsGenerateReportCreate)
	router.GET(baseURL+"/api/v2/engagements/:id/notes/", wrapper.EngagementsNotesRetrieve)
	router.POST(baseURL+"/api/v2/engagements/:id/notes/", wrapper.EngagementsNotesCreate)
	router.POST(baseURL+"/api/v2/engagements/:id/reopen/", wrapper.EngagementsReopenCreate)
	router.GET(baseURL+"/api/v2/finding_templates/", wrapper.FindingTemplatesList)
	router.POST(baseURL+"/api/v2/finding_templates/", wrapper.FindingTemplatesCreate)
	router.DELETE(baseURL+"/api/v2/finding_templates/:id/", wrapper.FindingTemplatesDestroy)
	router.GET(baseURL+"/api/v2/finding_templates/:id/", wrapper.FindingTemplatesRetrieve)
	router.PATCH(baseURL+"/api/v2/finding_templates/:id/", wrapper.FindingTemplatesPartialUpdate)
	router.PUT(baseURL+"/api/v2/finding_templates/:id/", wrapper.FindingTemplatesUpdate)
	router.GET(baseURL+"/api/v2/finding_templates/:id/delete_preview/", wrapper.FindingTemplatesDeletePreviewList)
	router.GET(baseURL+"/api/v2/findings/", wrapper.FindingsList)
	router.POST(baseURL+"/api/v2/findings/", wrapper.FindingsCreate)
	router.POST(baseURL+"/api/v2/findings/accept_risks/", wrapper.FindingsAcceptRisksCreate)
	router.POST(baseURL+"/api/v2/findings/generate_report/", wrapper.FindingsGenerateReportCreate)
	router.DELETE(baseURL+"/api/v2/findings/:id/", wrapper.FindingsDestroy)
	router.GET(baseURL+"/api/v2/findings/:id/", wrapper.FindingsRetrieve)
	router.PATCH(baseURL+"/api/v2/findings/:id/", wrapper.FindingsPartialUpdate)
	router.PUT(baseURL+"/api/v2/findings/:id/", wrapper.FindingsUpdate)
	router.POST(baseURL+"/api/v2/findings/:id/close/", wrapper.FindingsCloseCreate)
	router.GET(baseURL+"/api/v2/findings/:id/delete_preview/", wrapper.FindingsDeletePreviewList)
	router.GET(baseURL+"/api/v2/findings/:id/duplicate/", wrapper.FindingsDuplicateList)
	router.POST(baseURL+"/api/v2/findings/:id/duplicate/reset/", wrapper.FindingsDuplicateResetCreate)
	router.GET(baseURL+"/api/v2/findings/:id/files/", wrapper.FindingsFilesRetrieve)
	router.POST(baseURL+"/api/v2/findings/:id/files/", wrapper.FindingsFilesCreate)
	router.GET(baseURL+"/api/v2/findings/:id/files/download/:file_id/", wrapper.FindingsFilesDownloadRetrieve)
	router.DELETE(baseURL+"/api/v2/findings/:id/metadata/", wrapper.FindingsMetadataDestroy)
	router.GET(baseURL+"/api/v2/findings/:id/metadata/", wrapper.FindingsMetadataList)
	router.POST(baseURL+"/api/v2/findings/:id/metadata/", wrapper.FindingsMetadataCreate)
	router.PUT(baseURL+"/api/v2/findings/:id/metadata/", wrapper.FindingsMetadataUpdate)
	router.GET(baseURL+"/api/v2/findings/:id/notes/", wrapper.FindingsNotesRetrieve)
	router.POST(baseURL+"/api/v2/findings/:id/notes/", wrapper.FindingsNotesCreate)
	router.POST(baseURL+"/api/v2/findings/:id/original/:new_fid/", wrapper.FindingsOriginalCreate)
	router.PATCH(baseURL+"/api/v2/findings/:id/remove_note/", wrapper.FindingsRemoveNotePartialUpdate)
	router.PATCH(baseURL+"/api/v2/findings/:id/remove_tags/", wrapper.FindingsRemoveTagsPartialUpdate)
	router.PUT(baseURL+"/api/v2/findings/:id/remove_tags/", wrapper.FindingsRemoveTagsUpdate)
	router.GET(baseURL+"/api/v2/findings/:id/request_response/", wrapper.FindingsRequestResponseRetrieve)
	router.POST(baseURL+"/api/v2/findings/:id/request_response/", wrapper.FindingsRequestResponseCreate)
	router.GET(baseURL+"/api/v2/findings/:id/tags/", wrapper.FindingsTagsRetrieve)
	router.POST(baseURL+"/api/v2/findings/:id/tags/", wrapper.FindingsTagsCreate)
	router.GET(baseURL+"/api/v2/global_roles/", wrapper.GlobalRolesList)
	router.POST(baseURL+"/api/v2/global_roles/", wrapper.GlobalRolesCreate)
	router.DELETE(baseURL+"/api/v2/global_roles/:id/", wrapper.GlobalRolesDestroy)
	router.GET(baseURL+"/api/v2/global_roles/:id/", wrapper.GlobalRolesRetrieve)
	router.PATCH(baseURL+"/api/v2/global_roles/:id/", wrapper.GlobalRolesPartialUpdate)
	router.PUT(baseURL+"/api/v2/global_roles/:id/", wrapper.GlobalRolesUpdate)
	router.GET(baseURL+"/api/v2/global_roles/:id/delete_preview/", wrapper.GlobalRolesDeletePreviewList)
	router.POST(baseURL+"/api/v2/import-languages/", wrapper.ImportLanguagesCreate)
	router.POST(baseURL+"/api/v2/import-scan/", wrapper.ImportScanCreate)
	router.GET(baseURL+"/api/v2/jira_configurations/", wrapper.JiraConfigurationsList)
	router.POST(baseURL+"/api/v2/jira_configurations/", wrapper.JiraConfigurationsCreate)
	router.DELETE(baseURL+"/api/v2/jira_configurations/:id/", wrapper.JiraConfigurationsDestroy)
	router.GET(baseURL+"/api/v2/jira_configurations/:id/", wrapper.JiraConfigurationsRetrieve)
	router.PATCH(baseURL+"/api/v2/jira_configurations/:id/", wrapper.JiraConfigurationsPartialUpdate)
	router.PUT(baseURL+"/api/v2/jira_configurations/:id/", wrapper.JiraConfigurationsUpdate)
	router.GET(baseURL+"/api/v2/jira_configurations/:id/delete_preview/", wrapper.JiraConfigurationsDeletePreviewList)
	router.GET(baseURL+"/api/v2/jira_finding_mappings/", wrapper.JiraFindingMappingsList)
	router.POST(baseURL+"/api/v2/jira_finding_mappings/", wrapper.JiraFindingMappingsCreate)
	router.DELETE(baseURL+"/api/v2/jira_finding_mappings/:id/", wrapper.JiraFindingMappingsDestroy)
	router.GET(baseURL+"/api/v2/jira_finding_mappings/:id/", wrapper.JiraFindingMappingsRetrieve)
	router.PATCH(baseURL+"/api/v2/jira_finding_mappings/:id/", wrapper.JiraFindingMappingsPartialUpdate)
	router.PUT(baseURL+"/api/v2/jira_finding_mappings/:id/", wrapper.JiraFindingMappingsUpdate)
	router.GET(baseURL+"/api/v2/jira_finding_mappings/:id/delete_preview/", wrapper.JiraFindingMappingsDeletePreviewList)
	router.GET(baseURL+"/api/v2/jira_instances/", wrapper.JiraInstancesList)
	router.POST(baseURL+"/api/v2/jira_instances/", wrapper.JiraInstancesCreate)
	router.DELETE(baseURL+"/api/v2/jira_instances/:id/", wrapper.JiraInstancesDestroy)
	router.GET(baseURL+"/api/v2/jira_instances/:id/", wrapper.JiraInstancesRetrieve)
	router.PATCH(baseURL+"/api/v2/jira_instances/:id/", wrapper.JiraInstancesPartialUpdate)
	router.PUT(baseURL+"/api/v2/jira_instances/:id/", wrapper.JiraInstancesUpdate)
	router.GET(baseURL+"/api/v2/jira_instances/:id/delete_preview/", wrapper.JiraInstancesDeletePreviewList)
	router.GET(baseURL+"/api/v2/jira_product_configurations/", wrapper.JiraProductConfigurationsList)
	router.POST(baseURL+"/api/v2/jira_product_configurations/", wrapper.JiraProductConfigurationsCreate)
	router.DELETE(baseURL+"/api/v2/jira_product_configurations/:id/", wrapper.JiraProductConfigurationsDestroy)
	router.GET(baseURL+"/api/v2/jira_product_configurations/:id/", wrapper.JiraProductConfigurationsRetrieve)
	router.PATCH(baseURL+"/api/v2/jira_product_configurations/:id/", wrapper.JiraProductConfigurationsPartialUpdate)
	router.PUT(baseURL+"/api/v2/jira_product_configurations/:id/", wrapper.JiraProductConfigurationsUpdate)
	router.GET(baseURL+"/api/v2/jira_product_configurations/:id/delete_preview/", wrapper.JiraProductConfigurationsDeletePreviewList)
	router.GET(baseURL+"/api/v2/jira_projects/", wrapper.JiraProjectsList)
	router.POST(baseURL+"/api/v2/jira_projects/", wrapper.JiraProjectsCreate)
	router.DELETE(baseURL+"/api/v2/jira_projects/:id/", wrapper.JiraProjectsDestroy)
	router.GET(baseURL+"/api/v2/jira_projects/:id/", wrapper.JiraProjectsRetrieve)
	router.PATCH(baseURL+"/api/v2/jira_projects/:id/", wrapper.JiraProjectsPartialUpdate)
	router.PUT(baseURL+"/api/v2/jira_projects/:id/", wrapper.JiraProjectsUpdate)
	router.GET(baseURL+"/api/v2/jira_projects/:id/delete_preview/", wrapper.JiraProjectsDeletePreviewList)
	router.GET(baseURL+"/api/v2/language_types/", wrapper.LanguageTypesList)
	router.POST(baseURL+"/api/v2/language_types/", wrapper.LanguageTypesCreate)
	router.DELETE(baseURL+"/api/v2/language_types/:id/", wrapper.LanguageTypesDestroy)
	router.GET(baseURL+"/api/v2/language_types/:id/", wrapper.LanguageTypesRetrieve)
	router.PATCH(baseURL+"/api/v2/language_types/:id/", wrapper.LanguageTypesPartialUpdate)
	router.PUT(baseURL+"/api/v2/language_types/:id/", wrapper.LanguageTypesUpdate)
	router.GET(baseURL+"/api/v2/language_types/:id/delete_preview/", wrapper.LanguageTypesDeletePreviewList)
	router.GET(baseURL+"/api/v2/languages/", wrapper.LanguagesList)
	router.POST(baseURL+"/api/v2/languages/", wrapper.LanguagesCreate)
	router.DELETE(baseURL+"/api/v2/languages/:id/", wrapper.LanguagesDestroy)
	router.GET(baseURL+"/api/v2/languages/:id/", wrapper.LanguagesRetrieve)
	router.PATCH(baseURL+"/api/v2/languages/:id/", wrapper.LanguagesPartialUpdate)
	router.PUT(baseURL+"/api/v2/languages/:id/", wrapper.LanguagesUpdate)
	router.GET(baseURL+"/api/v2/languages/:id/delete_preview/", wrapper.LanguagesDeletePreviewList)
	router.GET(baseURL+"/api/v2/metadata/", wrapper.MetadataList)
	router.POST(baseURL+"/api/v2/metadata/", wrapper.MetadataCreate)
	router.DELETE(baseURL+"/api/v2/metadata/:id/", wrapper.MetadataDestroy)
	router.GET(baseURL+"/api/v2/metadata/:id/", wrapper.MetadataRetrieve)
	router.PATCH(baseURL+"/api/v2/metadata/:id/", wrapper.MetadataPartialUpdate)
	router.PUT(baseURL+"/api/v2/metadata/:id/", wrapper.MetadataUpdate)
	router.GET(baseURL+"/api/v2/metadata/:id/delete_preview/", wrapper.MetadataDeletePreviewList)
	router.GET(baseURL+"/api/v2/network_locations/", wrapper.NetworkLocationsList)
	router.POST(baseURL+"/api/v2/network_locations/", wrapper.NetworkLocationsCreate)
	router.DELETE(baseURL+"/api/v2/network_locations/:id/", wrapper.NetworkLocationsDestroy)
	router.GET(baseURL+"/api/v2/network_locations/:id/", wrapper.NetworkLocationsRetrieve)
	router.PATCH(baseURL+"/api/v2/network_locations/:id/", wrapper.NetworkLocationsPartialUpdate)
	router.PUT(baseURL+"/api/v2/network_locations/:id/", wrapper.NetworkLocationsUpdate)
	router.GET(baseURL+"/api/v2/network_locations/:id/delete_preview/", wrapper.NetworkLocationsDeletePreviewList)
	router.GET(baseURL+"/api/v2/note_type/", wrapper.NoteTypeList)
	router.POST(baseURL+"/api/v2/note_type/", wrapper.NoteTypeCreate)
	router.DELETE(baseURL+"/api/v2/note_type/:id/", wrapper.NoteTypeDestroy)
	router.GET(baseURL+"/api/v2/note_type/:id/", wrapper.NoteTypeRetrieve)
	router.PATCH(baseURL+"/api/v2/note_type/:id/", wrapper.NoteTypePartialUpdate)
	router.PUT(baseURL+"/api/v2/note_type/:id/", wrapper.NoteTypeUpdate)
	router.GET(baseURL+"/api/v2/note_type/:id/delete_preview/", wrapper.NoteTypeDeletePreviewList)
	router.GET(baseURL+"/api/v2/notes/", wrapper.NotesList)
	router.GET(baseURL+"/api/v2/notes/:id/", wrapper.NotesRetrieve)
	router.PATCH(baseURL+"/api/v2/notes/:id/", wrapper.NotesPartialUpdate)
	router.PUT(baseURL+"/api/v2/notes/:id/", wrapper.NotesUpdate)
	router.GET(baseURL+"/api/v2/notifications/", wrapper.NotificationsList)
	router.POST(baseURL+"/api/v2/notifications/", wrapper.NotificationsCreate)
	router.DELETE(baseURL+"/api/v2/notifications/:id/", wrapper.NotificationsDestroy)
	router.GET(baseURL+"/api/v2/notifications/:id/", wrapper.NotificationsRetrieve)
	router.PATCH(baseURL+"/api/v2/notifications/:id/", wrapper.NotificationsPartialUpdate)
	router.PUT(baseURL+"/api/v2/notifications/:id/", wrapper.NotificationsUpdate)
	router.GET(baseURL+"/api/v2/notifications/:id/delete_preview/", wrapper.NotificationsDeletePreviewList)
	router.GET(baseURL+"/api/v2/oa3/schema/", wrapper.Oa3SchemaRetrieve)
	router.GET(baseURL+"/api/v2/product_api_scan_configurations/", wrapper.ProductApiScanConfigurationsList)
	router.POST(baseURL+"/api/v2/product_api_scan_configurations/", wrapper.ProductApiScanConfigurationsCreate)
	router.DELETE(baseURL+"/api/v2/product_api_scan_configurations/:id/", wrapper.ProductApiScanConfigurationsDestroy)
	router.GET(baseURL+"/api/v2/product_api_scan_configurations/:id/", wrapper.ProductApiScanConfigurationsRetrieve)
	router.PATCH(baseURL+"/api/v2/product_api_scan_configurations/:id/", wrapper.ProductApiScanConfigurationsPartialUpdate)
	router.PUT(baseURL+"/api/v2/product_api_scan_configurations/:id/", wrapper.ProductApiScanConfigurationsUpdate)
	router.GET(baseURL+"/api/v2/product_api_scan_configurations/:id/delete_preview/", wrapper.ProductApiScanConfigurationsDeletePreviewList)
	router.GET(baseURL+"/api/v2/product_groups/", wrapper.ProductGroupsList)
	router.POST(baseURL+"/api/v2/product_groups/", wrapper.ProductGroupsCreate)
	router.DELETE(baseURL+"/api/v2/product_groups/:id/", wrapper.ProductGroupsDestroy)
	router.GET(baseURL+"/api/v2/product_groups/:id/", wrapper.ProductGroupsRetrieve)
	router.PATCH(baseURL+"/api/v2/product_groups/:id/", wrapper.ProductGroupsPartialUpdate)
	router.PUT(baseURL+"/api/v2/product_groups/:id/", wrapper.ProductGroupsUpdate)
	router.GET(baseURL+"/api/v2/product_groups/:id/delete_preview/", wrapper.ProductGroupsDeletePreviewList)
	router.GET(baseURL+"/api/v2/product_members/", wrapper.ProductMembersList)
	router.POST(baseURL+"/api/v2/product_members/", wrapper.ProductMembersCreate)
	router.DELETE(baseURL+"/api/v2/product_members/:id/", wrapper.ProductMembersDestroy)
	router.GET(baseURL+"/api/v2/product_members/:id/", wrapper.ProductMembersRetrieve)
	router.PATCH(baseURL+"/api/v2/product_members/:id/", wrapper.ProductMembersPartialUpdate)
	router.PUT(baseURL+"/api/v2/product_members/:id/", wrapper.ProductMembersUpdate)
	router.GET(baseURL+"/api/v2/product_members/:id/delete_preview/", wrapper.ProductMembersDeletePreviewList)
	router.GET(baseURL+"/api/v2/product_type_groups/", wrapper.ProductTypeGroupsList)
	router.POST(baseURL+"/api/v2/product_type_groups/", wrapper.ProductTypeGroupsCreate)
	router.DELETE(baseURL+"/api/v2/product_type_groups/:id/", wrapper.ProductTypeGroupsDestroy)
	router.GET(baseURL+"/api/v2/product_type_groups/:id/", wrapper.ProductTypeGroupsRetrieve)
	router.PATCH(baseURL+"/api/v2/product_type_groups/:id/", wrapper.ProductTypeGroupsPartialUpdate)
	router.PUT(baseURL+"/api/v2/product_type_groups/:id/", wrapper.ProductTypeGroupsUpdate)
	router.GET(baseURL+"/api/v2/product_type_groups/:id/delete_preview/", wrapper.ProductTypeGroupsDeletePreviewList)
	router.GET(baseURL+"/api/v2/product_type_members/", wrapper.ProductTypeMembersList)
	router.POST(baseURL+"/api/v2/product_type_members/", wrapper.ProductTypeMembersCreate)
	router.DELETE(baseURL+"/api/v2/product_type_members/:id/", wrapper.ProductTypeMembersDestroy)
	router.GET(baseURL+"/api/v2/product_type_members/:id/", wrapper.ProductTypeMembersRetrieve)
	router.PATCH(baseURL+"/api/v2/product_type_members/:id/", wrapper.ProductTypeMembersPartialUpdate)
	router.PUT(baseURL+"/api/v2/product_type_members/:id/", wrapper.ProductTypeMembersUpdate)
	router.GET(baseURL+"/api/v2/product_type_members/:id/delete_preview/", wrapper.ProductTypeMembersDeletePreviewList)
	router.GET(baseURL+"/api/v2/product_types/", wrapper.ProductTypesList)
	router.POST(baseURL+"/api/v2/product_types/", wrapper.ProductTypesCreate)
	router.DELETE(baseURL+"/api/v2/product_types/:id/", wrapper.ProductTypesDestroy)
	router.GET(baseURL+"/api/v2/product_types/:id/", wrapper.ProductTypesRetrieve)
	router.PATCH(baseURL+"/api/v2/product_types/:id/", wrapper.ProductTypesPartialUpdate)
	router.PUT(baseURL+"/api/v2/product_types/:id/", wrapper.ProductTypesUpdate)
	router.GET(baseURL+"/api/v2/product_types/:id/delete_preview/", wrapper.ProductTypesDeletePreviewList)
	router.POST(baseURL+"/api/v2/product_types/:id/generate_report/", wrapper.ProductTypesGenerateReportCreate)
	router.GET(baseURL+"/api/v2/products/", wrapper.ProductsList)
	router.POST(baseURL+"/api/v2/products/", wrapper.ProductsCreate)
	router.DELETE(baseURL+"/api/v2/products/:id/", wrapper.ProductsDestroy)
	router.GET(baseURL+"/api/v2/products/:id/", wrapper.ProductsRetrieve)
	router.PATCH(baseURL+"/api/v2/products/:id/", wrapper.ProductsPartialUpdate)
	router.PUT(baseURL+"/api/v2/products/:id/", wrapper.ProductsUpdate)
	router.GET(baseURL+"/api/v2/products/:id/delete_preview/", wrapper.ProductsDeletePreviewList)
	router.POST(baseURL+"/api/v2/products/:id/generate_report/", wrapper.ProductsGenerateReportCreate)
	router.GET(baseURL+"/api/v2/questionnaire_answered_questionnaires/", wrapper.QuestionnaireAnsweredQuestionnairesList)
	router.GET(baseURL+"/api/v2/questionnaire_answered_questionnaires/:id/", wrapper.QuestionnaireAnsweredQuestionnairesRetrieve)
	router.GET(baseURL+"/api/v2/questionnaire_answers/", wrapper.QuestionnaireAnswersList)
	router.GET(baseURL+"/api/v2/questionnaire_answers/:id/", wrapper.QuestionnaireAnswersRetrieve)
	router.GET(baseURL+"/api/v2/questionnaire_engagement_questionnaires/", wrapper.QuestionnaireEngagementQuestionnairesList)
	router.GET(baseURL+"/api/v2/questionnaire_engagement_questionnaires/:id/", wrapper.QuestionnaireEngagementQuestionnairesRetrieve)
	router.GET(baseURL+"/api/v2/questionnaire_general_questionnaires/", wrapper.QuestionnaireGeneralQuestionnairesList)
	router.GET(baseURL+"/api/v2/questionnaire_general_questionnaires/:id/", wrapper.QuestionnaireGeneralQuestionnairesRetrieve)
	router.GET(baseURL+"/api/v2/questionnaire_questions/", wrapper.QuestionnaireQuestionsList)
	router.GET(baseURL+"/api/v2/questionnaire_questions/:id/", wrapper.QuestionnaireQuestionsRetrieve)
	router.GET(baseURL+"/api/v2/regulations/", wrapper.RegulationsList)
	router.POST(baseURL+"/api/v2/regulations/", wrapper.RegulationsCreate)
	router.DELETE(baseURL+"/api/v2/regulations/:id/", wrapper.RegulationsDestroy)
	router.GET(baseURL+"/api/v2/regulations/:id/", wrapper.RegulationsRetrieve)
	router.PATCH(baseURL+"/api/v2/regulations/:id/", wrapper.RegulationsPartialUpdate)
	router.PUT(baseURL+"/api/v2/regulations/:id/", wrapper.RegulationsUpdate)
	router.GET(baseURL+"/api/v2/regulations/:id/delete_preview/", wrapper.RegulationsDeletePreviewList)
	router.POST(baseURL+"/api/v2/reimport-scan/", wrapper.ReimportScanCreate)
	router.GET(baseURL+"/api/v2/risk_acceptance/", wrapper.RiskAcceptanceList)
	router.DELETE(baseURL+"/api/v2/risk_acceptance/:id/", wrapper.RiskAcceptanceDestroy)
	router.GET(baseURL+"/api/v2/risk_acceptance/:id/", wrapper.RiskAcceptanceRetrieve)
	router.GET(baseURL+"/api/v2/risk_acceptance/:id/delete_preview/", wrapper.RiskAcceptanceDeletePreviewList)
	router.GET(baseURL+"/api/v2/risk_acceptance/:id/download_proof/", wrapper.RiskAcceptanceDownloadProofRetrieve)
	router.GET(baseURL+"/api/v2/roles/", wrapper.RolesList)
	router.GET(baseURL+"/api/v2/roles/:id/", wrapper.RolesRetrieve)
	router.GET(baseURL+"/api/v2/sla_configurations/", wrapper.SlaConfigurationsList)
	router.POST(baseURL+"/api/v2/sla_configurations/", wrapper.SlaConfigurationsCreate)
	router.DELETE(baseURL+"/api/v2/sla_configurations/:id/", wrapper.SlaConfigurationsDestroy)
	router.GET(baseURL+"/api/v2/sla_configurations/:id/", wrapper.SlaConfigurationsRetrieve)
	router.PATCH(baseURL+"/api/v2/sla_configurations/:id/", wrapper.SlaConfigurationsPartialUpdate)
	router.PUT(baseURL+"/api/v2/sla_configurations/:id/", wrapper.SlaConfigurationsUpdate)
	router.GET(baseURL+"/api/v2/sonarqube_issues/", wrapper.SonarqubeIssuesList)
	router.POST(baseURL+"/api/v2/sonarqube_issues/", wrapper.SonarqubeIssuesCreate)
	router.DELETE(baseURL+"/api/v2/sonarqube_issues/:id/", wrapper.SonarqubeIssuesDestroy)
	router.GET(baseURL+"/api/v2/sonarqube_issues/:id/", wrapper.SonarqubeIssuesRetrieve)
	router.PATCH(baseURL+"/api/v2/sonarqube_issues/:id/", wrapper.SonarqubeIssuesPartialUpdate)
	router.PUT(baseURL+"/api/v2/sonarqube_issues/:id/", wrapper.SonarqubeIssuesUpdate)
	router.GET(baseURL+"/api/v2/sonarqube_issues/:id/delete_preview/", wrapper.SonarqubeIssuesDeletePreviewList)
	router.GET(baseURL+"/api/v2/sonarqube_transitions/", wrapper.SonarqubeTransitionsList)
	router.POST(baseURL+"/api/v2/sonarqube_transitions/", wrapper.SonarqubeTransitionsCreate)
	router.DELETE(baseURL+"/api/v2/sonarqube_transitions/:id/", wrapper.SonarqubeTransitionsDestroy)
	router.GET(baseURL+"/api/v2/sonarqube_transitions/:id/", wrapper.SonarqubeTransitionsRetrieve)
	router.PATCH(baseURL+"/api/v2/sonarqube_transitions/:id/", wrapper.SonarqubeTransitionsPartialUpdate)
	router.PUT(baseURL+"/api/v2/sonarqube_transitions/:id/", wrapper.SonarqubeTransitionsUpdate)
	router.GET(baseURL+"/api/v2/sonarqube_transitions/:id/delete_preview/", wrapper.SonarqubeTransitionsDeletePreviewList)
	router.GET(baseURL+"/api/v2/stub_findings/", wrapper.StubFindingsList)
	router.POST(baseURL+"/api/v2/stub_findings/", wrapper.StubFindingsCreate)
	router.DELETE(baseURL+"/api/v2/stub_findings/:id/", wrapper.StubFindingsDestroy)
	router.GET(baseURL+"/api/v2/stub_findings/:id/", wrapper.StubFindingsRetrieve)
	router.PATCH(baseURL+"/api/v2/stub_findings/:id/", wrapper.StubFindingsPartialUpdate)
	router.PUT(baseURL+"/api/v2/stub_findings/:id/", wrapper.StubFindingsUpdate)
	router.GET(baseURL+"/api/v2/stub_findings/:id/delete_preview/", wrapper.StubFindingsDeletePreviewList)
	router.GET(baseURL+"/api/v2/system_settings/", wrapper.SystemSettingsList)
	router.PATCH(baseURL+"/api/v2/system_settings/:id/", wrapper.SystemSettingsPartialUpdate)
	router.PUT(baseURL+"/api/v2/system_settings/:id/", wrapper.SystemSettingsUpdate)
	router.GET(baseURL+"/api/v2/technologies/", wrapper.TechnologiesList)
	router.POST(baseURL+"/api/v2/technologies/", wrapper.TechnologiesCreate)
	router.DELETE(baseURL+"/api/v2/technologies/:id/", wrapper.TechnologiesDestroy)
	router.GET(baseURL+"/api/v2/technologies/:id/", wrapper.TechnologiesRetrieve)
	router.PATCH(baseURL+"/api/v2/technologies/:id/", wrapper.TechnologiesPartialUpdate)
	router.PUT(baseURL+"/api/v2/technologies/:id/", wrapper.TechnologiesUpdate)
	router.GET(baseURL+"/api/v2/technologies/:id/delete_preview/", wrapper.TechnologiesDeletePreviewList)
	router.GET(baseURL+"/api/v2/test_imports/", wrapper.TestImportsList)
	router.POST(baseURL+"/api/v2/test_imports/", wrapper.TestImportsCreate)
	router.DELETE(baseURL+"/api/v2/test_imports/:id/", wrapper.TestImportsDestroy)
	router.GET(baseURL+"/api/v2/test_imports/:id/", wrapper.TestImportsRetrieve)
	router.PATCH(baseURL+"/api/v2/test_imports/:id/", wrapper.TestImportsPartialUpdate)
	router.PUT(baseURL+"/api/v2/test_imports/:id/", wrapper.TestImportsUpdate)
	router.GET(baseURL+"/api/v2/test_imports/:id/delete_preview/", wrapper.TestImportsDeletePreviewList)
	router.GET(baseURL+"/api/v2/test_types/", wrapper.TestTypesList)
	router.POST(baseURL+"/api/v2/test_types/", wrapper.TestTypesCreate)
	router.GET(baseURL+"/api/v2/test_types/:id/", wrapper.TestTypesRetrieve)
	router.PATCH(baseURL+"/api/v2/test_types/:id/", wrapper.TestTypesPartialUpdate)
	router.PUT(baseURL+"/api/v2/test_types/:id/", wrapper.TestTypesUpdate)
	router.GET(baseURL+"/api/v2/tests/", wrapper.TestsList)
	router.POST(baseURL+"/api/v2/tests/", wrapper.TestsCreate)
	router.DELETE(baseURL+"/api/v2/tests/:id/", wrapper.TestsDestroy)
	router.GET(baseURL+"/api/v2/tests/:id/", wrapper.TestsRetrieve)
	router.PATCH(baseURL+"/api/v2/tests/:id/", wrapper.TestsPartialUpdate)
	router.PUT(baseURL+"/api/v2/tests/:id/", wrapper.TestsUpdate)
	router.POST(baseURL+"/api/v2/tests/:id/accept_risks/", wrapper.TestsAcceptRisksCreate)
	router.GET(baseURL+"/api/v2/tests/:id/delete_preview/", wrapper.TestsDeletePreviewList)
	router.GET(baseURL+"/api/v2/tests/:id/files/", wrapper.TestsFilesRetrieve)
	router.POST(baseURL+"/api/v2/tests/:id/files/", wrapper.TestsFilesCreate)
	router.GET(baseURL+"/api/v2/tests/:id/files/download/:file_id/", wrapper.TestsFilesDownloadRetrieve)
	router.POST(baseURL+"/api/v2/tests/:id/generate_report/", wrapper.TestsGenerateReportCreate)
	router.GET(baseURL+"/api/v2/tests/:id/notes/", wrapper.TestsNotesRetrieve)
	router.POST(baseURL+"/api/v2/tests/:id/notes/", wrapper.TestsNotesCreate)
	router.GET(baseURL+"/api/v2/tool_configurations/", wrapper.ToolConfigurationsList)
	router.POST(baseURL+"/api/v2/tool_configurations/", wrapper.ToolConfigurationsCreate)
	router.DELETE(baseURL+"/api/v2/tool_configurations/:id/", wrapper.ToolConfigurationsDestroy)
	router.GET(baseURL+"/api/v2/tool_configurations/:id/", wrapper.ToolConfigurationsRetrieve)
	router.PATCH(baseURL+"/api/v2/tool_configurations/:id/", wrapper.ToolConfigurationsPartialUpdate)
	router.PUT(baseURL+"/api/v2/tool_configurations/:id/", wrapper.ToolConfigurationsUpdate)
	router.GET(baseURL+"/api/v2/tool_configurations/:id/delete_preview/", wrapper.ToolConfigurationsDeletePreviewList)
	router.GET(baseURL+"/api/v2/tool_product_settings/", wrapper.ToolProductSettingsList)
	router.POST(baseURL+"/api/v2/tool_product_settings/", wrapper.ToolProductSettingsCreate)
	router.DELETE(baseURL+"/api/v2/tool_product_settings/:id/", wrapper.ToolProductSettingsDestroy)
	router.GET(baseURL+"/api/v2/tool_product_settings/:id/", wrapper.ToolProductSettingsRetrieve)
	router.PATCH(baseURL+"/api/v2/tool_product_settings/:id/", wrapper.ToolProductSettingsPartialUpdate)
	router.PUT(baseURL+"/api/v2/tool_product_settings/:id/", wrapper.ToolProductSettingsUpdate)
	router.GET(baseURL+"/api/v2/tool_product_settings/:id/delete_preview/", wrapper.ToolProductSettingsDeletePreviewList)
	router.GET(baseURL+"/api/v2/tool_types/", wrapper.ToolTypesList)
	router.POST(baseURL+"/api/v2/tool_types/", wrapper.ToolTypesCreate)
	router.DELETE(baseURL+"/api/v2/tool_types/:id/", wrapper.ToolTypesDestroy)
	router.GET(baseURL+"/api/v2/tool_types/:id/", wrapper.ToolTypesRetrieve)
	router.PATCH(baseURL+"/api/v2/tool_types/:id/", wrapper.ToolTypesPartialUpdate)
	router.PUT(baseURL+"/api/v2/tool_types/:id/", wrapper.ToolTypesUpdate)
	router.GET(baseURL+"/api/v2/tool_types/:id/delete_preview/", wrapper.ToolTypesDeletePreviewList)
	router.GET(baseURL+"/api/v2/user_contact_infos/", wrapper.UserContactInfosList)
	router.POST(baseURL+"/api/v2/user_contact_infos/", wrapper.UserContactInfosCreate)
	router.DELETE(baseURL+"/api/v2/user_contact_infos/:id/", wrapper.UserContactInfosDestroy)
	router.GET(baseURL+"/api/v2/user_contact_infos/:id/", wrapper.UserContactInfosRetrieve)
	router.PATCH(baseURL+"/api/v2/user_contact_infos/:id/", wrapper.UserContactInfosPartialUpdate)
	router.PUT(baseURL+"/api/v2/user_contact_infos/:id/", wrapper.UserContactInfosUpdate)
	router.GET(baseURL+"/api/v2/user_contact_infos/:id/delete_preview/", wrapper.UserContactInfosDeletePreviewList)
	router.GET(baseURL+"/api/v2/user_profile/", wrapper.UserProfileRetrieve)
	router.GET(baseURL+"/api/v2/users/", wrapper.UsersList)
	router.POST(baseURL+"/api/v2/users/", wrapper.UsersCreate)
	router.DELETE(baseURL+"/api/v2/users/:id/", wrapper.UsersDestroy)
	router.GET(baseURL+"/api/v2/users/:id/", wrapper.UsersRetrieve)
	router.PATCH(baseURL+"/api/v2/users/:id/", wrapper.UsersPartialUpdate)
	router.PUT(baseURL+"/api/v2/users/:id/", wrapper.UsersUpdate)
	router.GET(baseURL+"/api/v2/users/:id/delete_preview/", wrapper.UsersDeletePreviewList)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+z9/3fbuNEwiv8r+Oh9PydJH0XOl912n9zT0+u1k41bJ/FjOdn2JnlZiIQkxBTABUAr",
	"2nbv334PBgAJkqBIyY6TdfmLLQIDYPBtMDOYGfxrFPNVxhlhSo6e/Wsk4yVZYfh5GMckUyQ5p/LynPyS",
	"E6l0ciZ4RoSiBICwBYpmG/2ZEBkLminK2ejZ6DVeEcQFIitMU8TnKCNCcobWS45MQYnUkiBB5eVoPFrh",
	"z6eELdRy9OzJo0fj0Yoy9/14PFKbjIyejaQSlC1Gv41Hn3Kp6JzG2LRWb/yvfjaac2GbpGyB5pQllC0k",
	"WlO1RGpJJbrKU0YEntGUqg2iyaiz/UqJiCZNFA4ZoonuN65XzxBGksS50F84uaKSiw3CUvKYYkUSDzGL",
	"6wQdYYZmBGF0xFcrztA7r0pKJMIsQc8/Z1zmgqD7R++eP9BjPxd8hbhaEoEkz0VM5KQ61N93jfRv45Eg",
	"v+RUkGT07H1lxuuTEBiUj0V9fPaJxEqP3GGSvCbrFzQlb2CoWlfXnKYE/nOxwmr0bDSjDAvdbmM2FFUG",
	"1uva40c79g3ac3W1Y/6aqy7MCVMCdkTHImJckcik/mvE8jTFM90NJXJSQFOmyIIIDZ4JeoUVANvMGecp",
	"wazRFYNAsA9ZdshwupFUNvGOOZvThLDYjSVd5avRsyePv/vTdz88/eN3f4IBNYkPi9Qfxk3czXyMjooK",
	"UUquSDoKdSsWRK/6ylQnWJGHiq70hAiCkzcs3dQGphxGGhsSUCchLSPqFYRGW+r3MGR4RUINNCrMBE/y",
	"WHkz5NWi8AJGmSqykh6It4xNAhYCb/R3LokI13VFhKQ9e23n4p0pgl7nqxkRoV20JjNJVXXP5YJWKcZ3",
	"vUbWVhXNec6S61dYW95uxcAM2ukpB9+OW8fqb928X2cT7L2G29ZmB+nZbaV2VDas237rdoeFmqvlBb8k",
	"rLk+lUvuoIu1tk2xrW21bokMS7nmIulaCuPRWlBFSqTsWijW6E5lax0okPDqDHXnx1xk53htO3NOZMaZ",
	"JM1OCfJLJIjMKgsdJwnVRztOz6qD3rLky2are6CGe9FWf4RbJ2MnvPtt3JvoBVC5RS6AFzwjYkWl2+l1",
	"+pqQANF6HDxQr3NCf/995zniUPEPkmDnBEkIUxSnASEoV0ud1yaK/AH98wUXq3+ih0j/R4cV+A/sD+if",
	"0+kbnT2dvkHnJKGCAHEgTB8x70e61Gg8mk7feLiVQ1RprU5W+9A8wq6o4GxFWMtxsFQqi3p080csaaw7",
	"Aj+gZ68vTl/pFP3f6xIAjMYjmzwaayQ/3iDHRmV0hVMD7Q6SU76gDGlpD3LGDSZ6PEo1SCTIgnze6zBO",
	"+YLn6hoV9OY0tegQ5Ca9QWgZpuKYFjzt11gu0u1noVlpzXI+7d/eSEOAKddklcszHbfIG9Q6DoRy877C",
	"WaZba9IkQZKoulq8LR9aYIQt8IK4PdMtu1lBvh/wDqtcb0sWZYJf0cQyXbYDVTqDzhxIaN173GA3dsoe",
	"S92QPdfNzsw/zBUMU6/5bmf1v7Fp/0+ezu0z2a6CHE7fWzx979ip2sEdt52PHcV6bpOuWracnbtoNasn",
	"qT1E+x+exyQlipwJckXJurn9zFqoT0D3ybXiCUl7CLHl3O0m7RoVPjSyha0/JqnCU4UVlYrGIYVoyqXR",
	"TP5vQeajZ6P/dVDemBzY65KDKbkigqqNrimXXn1V5ea+VaRkrlDOFM/j5fVqEgTHCnTI16imTr/NEI09",
	"pVwN4Wq74Xm4IinP9Bp9XiWHodV2Y/ra0JrZslZCOLaeSzexddtx4Z/4T4LnWYv20onhUVbI4VVZoQdX",
	"UJMV2s+57x59cV17QJLXTA6ZExUvA+oqw/5ECz1EW9Uj23bAmWWi2gWpckJcizrjZpq90E30aVpT770b",
	"eyuJmKp81qOlkLYILizTCrtaZUtgkSK6yrhQJDHXkRiZYsgVm3wwfNjhr7kgh8eaYbE/PZ6lTGlnVyxH",
	"MjXVdzLM1bP2esJ0KylxlW/dxq8IqLYbC3nh9vj+ImL7Likq32fhlBSozxp1jNQ+LZ3rsn03wlfaB65/",
	"1cV/saQS6SyUEKUJMSPG4sGjyojPIUkjjxRHK8zwgkASzM9kVK5rs5ks6xaQzlouXWpL00y71ak4PrDt",
	"GqK2QltPuy0L9fc4Nr2HZfsl4rd4DLcdrx3SyN2g9H35q+csyThlQcsOkxNlWODVdRWwzhLputUIvHAM",
	"c32bEeRyEQVdypwSgdZLGi/RnKcpX5t9t8RyiVZYXE7Qhf+J5JLnaYJmBPEVVYokE/SCC0Q+41WWEnRP",
	"klg39vDx03tjdE8Py0LgbPnwyb2GqVGf9bnksqUfOgcxa1R2coZwkggi5QSdKLTKdR5XiLI4zRNDJPRS",
	"RAxujWs4P37yp8mjyaPJY41yymOc6sr1x4bnIuErTNkk5qv9utD7aMZqGe6qRgmWsqWAghjrrTGiXl+l",
	"wkIZWzGM7h3cq3bSrdSD7548OiAJVft0RQ9hGEVG1JqLSzPITdO1sn07hHsbUQQ4mh2Um5ngisc8DXci",
	"5qtVzhzdcLCGKyBI5vESYYnuLZXK9OKYm38Jk/fGiKh4Ulfr9BjRX3IiNmFsIAsZ0DGMIRwuGrWWnVhZ",
	"1HB4/fm7D/mjR0/+qAhe/fmHe1UEH/c7IvazU6Jszpv90owV0lkwkDilMdFDOOOz4BB+v7v+uE6RPara",
	"ekPg6PsrovCJObJE8HYAKxIl/BOPVkRh07s5zlM1ejbHqSQhZact5dCSlVKVDjULuZHvhG+YRhod425W",
	"Pk5o7S9KGHjHQvSypvQa6TsT265rfjcT0m6r2mtO+ljMBEd82yC3W9oODMS3xEAMjMHAGPwuGIM9zEJv",
	"k01oJYTmUqNJBxNcsyKFhOClbSkgBi799VEUZVxSRa+C5voVw4D9lXsplipa8UTT5Hb7+Z63c2XvVlTR",
	"hbskaqJeZFu3n+7NVpYAlG4MUZ6riM8jGfOsZZgFlZeRc1rp5ThhJ7acIasqq451o08fO5db6+n7ray6",
	"G5/2W5me8MD7Vjp1nzU3PC3Ly0MPZzRy5jHN3JnALF5qHjFAtvFCcxkGxJ3W9oCyp6BDEekWSFIjcY+/",
	"32IS/yNUe3CBF6FlMstpmgRd0n7UOejk+OYQCrctibgKKQlN+yZX8y4ZZ5LOUgIOekcnB0fH0Paoz2kf",
	"L0l8GaW0bXb0EU5VpPnQJiJHkGmYVFBVCpLxffrb5bu0M0lLSJJnqeU8Is6iqsVZtRsnc0SYrj5BlXJo",
	"TdMUcZZuDIOAnR8hosz4FXqzjSVyRQm4KzLjMFgUmaMZV8vSbRILEqhngk7mKKES0BnX8KEScVZZcuAJ",
	"42vwj2sdUMsArrpLQROja5thJZwR2OuWPHYThxKtwoWvYZN1whQRhuL8Ez1E3ifowWHJ6wz44enAPcDR",
	"eGRz+1ppaTmwyqdtu/p6Qbfer3m6aiFVFHOmcBxa8aMb1IymBCf9jpjAdcbTfvcgDfvpbYP0mqteg8RF",
	"vCRS2WsfwhaUBRbGGx8KyCGNyXXpYUbYlrMqE0SSAAWZEqXMpmYJgjGBtjMi9OTq7V/f5qMdRbFg5kIL",
	"3r3MvwTBct89rYm6UDs42ArDopmjqwd4yb1g6y54jVscI8lHMU9IZK46gba0naVTAEca3J2o3avG3Zsd",
	"vUJTU2+oXy2Y5II20Ti3GgiUUnaJFLd+5oCX5tJajSD/uM3n79wcx81ryEJwa5Da11yhqcJCkQRMXstP",
	"ILU/pjy+NFn2p6HAeuLS1GQUHyaLa/HZVld8QNYJXDLCIjZkvfiE7DcMveQplLM/IflnTE38AS6QGzYN",
	"E0r3zgKvJ6PxyCKvTwWHrf7t0BuNRx42o/HIIjAaj8LN9D1Udr8UUFgsiIoIS3oJNxYcdFf9ChCpwQVW",
	"ZLHpNLjt08WlZuaiwjS1SUUV5EVOP7czc6cEji9Dm/nUbh6S0VjLDYrGl0QhuZGKrIzqLF5itiBSQ1kn",
	"2snW/dWvz3mW3Cz/6jn4Vrvo3Hj3ET12vxUqeKfSKrXC4TkuyfkWWaei0jM3K7dQncxXlnZt4VbXSDm+",
	"26XUIy3LnNI2/4aISpl3envV91/TZaAW96Mxd7oEF/u3xgX91XA+mCUwYlICxyiMnrWrfWM0s1/7VYOb",
	"8tTq1a7YZIrv126CFY4oy3IVScyociMA3hC9R97Usk/7hAH2uknTjT7NVWXKHn5mPfl2EBz7IACA+3VY",
	"EmY0XJEetD6NlSX2bBAst65XeJcF2dB5FZO15UK7QUq2ekx9IYrScR9wy/SlA5tbojZdWNw27enA58tS",
	"oo7G2+hHn2JfiJp02UV+67Sly4BgCyk5A52BbLPDuE7Apr6+IOYuOXLX3ruOUKHkqbKix+WXZkfXS6wQ",
	"IyQB5npGLBOq+XBp1CMoz5DnRwciVMlJ7q6Y2KoeKa5LavK+TtboPq9yy3AnfHJ2Tx44oU4evD0/vScf",
	"VFH7IeihD0KUU5DsMLJFwLWagl9QMkdJdXyN7il0hbtTlCc3aB/7LNp2v6xhSd3pJbWLwVS/FdXOSA23",
	"g8Pt4PZLpeEy76tc5n3DV3PXv0S7hcux4RqrxzXWt3wzNdwlDXdJv6O7pB3tSO/izdI3dzP0jVzklDcy",
	"7Zcu2/n3C/7CGcTUfTkLLoEmfcN57WNaszVUQBUL10RXl147MfTaXdrPEGanLpkmgl36TOJcs1LTfLXC",
	"xv69tUe9YyP67N9upKJZckeq4Yn0/fGt0JsIRr+T5rSI3e3ddcq5rQXDve0ousnIDn3lCqeR7/jc4ZNf",
	"XwBt09s+eW1TExr45jiGBqjR80a/Qov9hfUR63jloMWVr6/OtPUphF7ueiaCW+sLCC9K+/GWl0AElZf9",
	"yck5lZeH5c16Dyup0ny7roAzbD+d24czUrzWkqqB1ycn48D1B6y8F6Tf0BYdKJZ76MUTcyzi+ZxoEQ8V",
	"hdD9lM4EFhvwQRujDAtlngcxh/kYTSaTB5N9zuoSsb6ndhO9PY7qivlz021Jkw5ozCkf1lgiWwJRJmlC",
	"0DHReBzzT7zCs1zLBCW+kvLqaVitU3s5ZYOmMdfl0NQwVHb80FN0/+jddHr19AGSMRek5XWWFK/r4/b4",
	"T02UM6wUERqH/3P47tn714enZx//fXj07P3py4//Pjt/9v7ta/3r7cmz96/PP/57+uz926OP/35/dHL4",
	"8dl7neWpVjRa6OrpqLXjESAcWJ35igga4xSZntmOgeJ5Sapv1ID+B1JJrLjQG2lBrwgz3memIJXIWreg",
	"9ZKmBEl8ZSTtYsYrU8rzWbpFwWH8LKEbaxJeUEc/P7fumJ3TcXNehc47Z9v61rRGL+6EyphfEWEY306O",
	"IYHFH5nYipET8cOvKR3zONdHl4T3kwpYhJGpBZla7HR6g9Gjh1V1W03+4GxBBFrpGS9yrgg46+nu6c2C",
	"ZzxXxUhMgl2lMkvxJiqF7m5PCKfH3IHYV5WfVvWZ4rVERuNiJiagcXTFIs9DKiyI6W5yQReU4dRXq/rP",
	"NdVwmfSnYv60bBhe0bgdoxe610ss0YwQBnGUYi/0zrEpjg6zUhE7dY9OXZhbHqQ4T9H948PpxYOK+taW",
	"dd0xEMGRI/M5FyqacxHN6ecgns8BBFamAUEHSJAVSShWjmBUX8i6f8rXY/SKJDRfjdFLuljWbp7++797",
	"aYErHv8hd3BZ6qZ9SRYr0IvLXMKbYbOUmJl32wr9F/i4m8XsjlTXXDttQvfd2ZOSMXrl/OnKg/86MYCM",
	"91/PveKtGj0RCCMoj5z3IJptoE8gxQt/abwAuDPnZdgWCyEK+7CfuAgCCdJQ9+UDBMpwyoqTo3mk9oxs",
	"VcjmtV2ik3VDgqQwJ3YPu4auH77JC/jYUy0AxbrC5zWacSEvdmnklS7Tpw2es/DBAz79HmMrY8wYEWaX",
	"0HI+b2hMl1guQVsceFDP3MjpAxZhVJhg6d0pCbDSc0rSRFrUJMqlXmdclLddlYusyT7MZe/Q/KsMx6EQ",
	"CeSzsgfpzK15A1vbnpxZuUCOHWWSY0SYIiITVJLCL75P1O6Ka+8u9GFOP7edmZ+owJHRPe5vCWQq0TKB",
	"5T72qwacsw0HFOqjjQhnApU02TZdGt2z4YrvadqHPcp3M0JJBcPgRqsg6b2VCdi5kpVttjtPAViYYysy",
	"zHtghdIVkQqvMr2jNMmUyp10pgi6b2YdUeYyHG01G/DBDQ5b8OZxWlwTEScQOLlWKRxfWrHlurKAi3Bf",
	"NjMad/nN77y59HKTygihxfKkChZmsftuOK5DDwlDI7nC4hKWnMPcR2mPmO+m+aCYUSeLS742llNS6Sa3",
	"Lvumb+cs4nGcC8LiEEfwulgxJRSyPKC9cQS+eL0kDElyRQROKwwqkWhNQHTOWQJXznixEASG1nFO9pi8",
	"oSUYQnl0c9r8rkOZOdVBJG1Y+BY+oVAxCAJX9UxVwhW50uj+9NEYTR+P0fTJGE2fjtH0u7rm67se8T56",
	"bLY5TlOJeK5A3WS1F1nBzQB1wyw54KJmHRAwPsACrwJ0WycTRYThNzR7KehiQYxaBSx7PRGrc9vYGS9q",
	"DYYQw5uU49BBZzIKTCw5NGNv7DMOEPYkQr14fXRnuZbOMsFnKVntxSBlqV74SVRIeJxFfXUoVCLyOTNi",
	"rLGbdLWENSrdVpEBZFpVpBofo+Yv1IBAApryaRlwyZDwAw/PPQTV9hjdNV+NfUJbh7zM+oTTbjhr3Gbj",
	"Dd+MW2287pJxm43X/C9utemt6sgvHFa9RQe3T6vukqpPo0X0UGtWtt9426BEuzQob6W1QieyV+R9vO4I",
	"DuI35KlCrjOYPZUjXsue5mKfBi+I7P/YRkiK++Ibo862f/EGCyZyn5Y6eMqylbrX1m2SOnsbIG5lOL8W",
	"QbXr9FZeh2l4yV+HBvS2CvBeogn44d3mgmo68t1q65xh8Us+s73ft/mpq+YEaunTsjPV3pfy9m4kMk9L",
	"XGdZ6fZMjOk9n3nJ8llK5bJFnDnWoowVGKisSQxrUKckBEEdcbpB+ApTEAv2E2xyuYwUjz5R0TMMtpYx",
	"2jQiWvIhnxURDKcosXogKyA6NHvfLPtW7qAVjIxWEKYtTd/MR8/e9+IBzk3xF6b0bx/rc1aj49vvy+27",
	"JL4eqVtjZUl2JLxH5Pt1oeUR+pZOXOv+v3Hxb0av391/5YzY3mJAAb2Dd18j0meH7sbePBe6UquLxBJh",
	"hlw9SNcaVtZI0HRTdhnZ/dtUIlN2iUwmun+FBTXXsvOcQTzyyWTyYJtWebd42QYd4wux5X7UKrY1BNIQ",
	"fRDoeT3qY/AtaNWnh9MLZJvs0rD7uLdOp6nq1ibU6Hcj0FQkxIZ/qxucuTzjIadbrx0LEEafSiTzLEtp",
	"UH28u6LdqvpCN6hOCwgGKpKk84f2/p0kKKMkBsWoGzFscDQWEhjZlwknCB7vorATeWYAzc1P2R9QQFJW",
	"8xyEK1p7FWu162ovg8ftauhCzVyMumeCcSSoojFOjV1JaWUCJicnpVUTToO2mK2oRJ9yqei89YXm+g3H",
	"erlBGMVE6NEvUdaMwlbjtu6xSXGU4I2MBFkZw4p+N9a6HJg3t/A393UVnKWbB4XiFmYZS/vgACTpY2h6",
	"eohinMZ5au7Z0ZQovbDJ54zCPZcm26iUFeQEPV9laqNhLCMzRjHOpYYF05R0Bmpsju7pRu7txTIFmOTm",
	"0gEW+H/ymVPch6dilxNWakZqbysueHi3lxHXtG7EZYsWNlzTVhsuqUgmNTcpiLE0IP3sFqCcsbaAtydm",
	"xL4IYvY+F4l5uK+ottT0H6BZvui1nPcIPEjaXgCB2x5nHbJ1l/Wws19qmGhns/wGRV5yoerxDVosob5/",
	"HHwpnCVERBXtbX8GS9NqXb5qRhrmqUxDnS3IqlFmnAtBmEo3aEZg81tOsq0N+ktOIppEegdEem0HjNkr",
	"h6gi8ZLBrSO1+6Z2kztBh/adGo7A0Q6ZViqHMSVyL0bAvvZeM3l0wlQhdZlllzkbD7CnDdnQbqH0fWIv",
	"Fi9B7GKHsMIsx2m6Qa6CgPlfY6L02HVM02vOHtqR7pyj4FMxVWZJ49BriiwBrK6Sk2PbrkY1NHg+dEST",
	"/rfolXZOkk73uJqvjHFAqUSq9EaxYToduijxrxXKyJY188SaIaGnOfet7qwLkG/cVbfSqptbBdTiQUsj",
	"31KmptUuI3AGTA3czXt5791QLXiagIDUHuTWPSYyyDPZc8Qn9G5pmU2/xT/qKOUy4OpVsWgP2M2WJrzN",
	"zLoR35b3Ofr773U90PFbRxfbnzS5Sz2FfbntIZEb80QbHMwGB7PBwWxwMBsczHZ3MBu8xQZvscFbbPAW",
	"+3a9xTxDpR0uzgaHqN+LQ9TghDQ4IQ1OSIMT0uCE1HBC6mOIMrggDS5IgwvS13JBGkwbdzRtLA0P26zq",
	"Bou+waJvsOgbLPoGi77Bou/aFn2DZd5gmXdnLPM6rOkKju/RYEn3n2dJ1ycy/WDm9nswc2s+wVw1bOtr",
	"x7bFTu3rW6J1mZY5KzJrOVYs3o9dFkft744Nhke3YHj01W18qo+iDBY/g8XPf7TFT9e7xbdp/zPY2lzP",
	"1mYwP9nTGOQ/wIji93PXPtwhf8k75K9z39v10vzXvf0d7jWHe83hXnO41xzuNYd7zf4TOtwdfrG7ww52",
	"YbhJHG4Sh5vEW3gQ+tu6V+zAfrhl/AZuGbdr14c7x2/yztFdifW+eqxeOHoXicHLvevd2pXBW5tXdjOB",
	"WbyMFA4cDhd4gbhABmSvV9W/3zJTP0K1Bxd4EZqZWU7Tkjr6WP2oc/TM3hhCgau9FVXREstl+JqNKuPf",
	"BmtLC6Z7tVIGELgZ/5Xa1UaVI3zUy9G0fKZ6E1Ij/QH984QpIswq/id6iLzPD+wP6J9HJwdHxzoDfsC1",
	"uZZm3o88wNF4ZHM1Rh/7aHR7evIF3vp+2qvn7i3/fiHgrYBh+IOdXnHf+el2e+l4c4uk72X1TruqxxjX",
	"6GBpeWGi11ReNa8+aO6GYCuBKx5Qb1K4ayyeJ92vkwP6UHQLfubNgL0xgyBHZfzsXmF+/3pyfmiDZYci",
	"+4Y6+/33LQ/p93gLvwzNZPC0LdjyW4bmlX06sjoyAfQePwlZxF7hNA9u+e2zZpEzpTuwa7V2aUOyg8lu",
	"RXlruT07oEnVhaXlN7ctAitln21xVlLdL4qboe/FmdaTwpunN/bpVzU8eKN3Ts1+Ixu5CHO/S/xyE9++",
	"WV2ts4Bo9xYezMEGc7DBHGwwBxvMwQZzsMEc7I6Zgw12XYNd12DXNdh1DXZdg13XF7LrGiy3BsutwXJr",
	"sNwaLLcGy63Bcmuw3PpGLLcGo6v/BKOrwXzq92Q+VbWa6jSVgk5tubm6IKssDT6hUt6q3MoDF43bjLW7",
	"17xBZX5V1X1jRjelhrCzSgh4oQ//m7NnqWrGuvVbQSXPzq1W5eSdmMmdOdF9ghmZZR2tsIoDctZzphu0",
	"dN4BAwcGBQyVL3QsCCeaoZ+gVzoTrWma6hMb2yByiiOcpvbudlySw4INn23Q0c/PfQ7DbTtbo0EnCVLM",
	"aleilkMZ6iHQFEAgpbmO+1bwkEgSLOLlA9A31nAxKBQYzTboAmqwoGGkHBbVy9pHX5JCFqSqi0SWwWdg",
	"o7VQyd6ksfVyv51C3sJ98DdJL/vTwR2J1lelNjs7PAy05+vQni6zs5umRH15th6kRl7LMB0EyTWW1jh1",
	"DFphusq0mLbCG/csg5WbSHq7VupfBru9Tda/KBak4mjQwxDN80yA4hUz3l7lyxI7sKx6EHYxB9Qr1JgD",
	"hjcgGB32ETVl0zZ/D+NpmnRtp5s3+bwhS+gL/sI9b1TFrXj1qBdJ0pWETh/3jqzpadcZX+tA/XXajmHm",
	"r91jEvWe7IJD6E2KbT3XjXaSXA8FV3+oJz+lfIbTc54G1srCmax3d6DvshI8bdGeLgARpAHazvjCH2GT",
	"EQknpDMmCWoDLfX+qaw4eLWSSxNQYseV0rIyyvFs5Zp3GNbf93A1BucEDptTzBY5XrRRgIpeIBd0tN1X",
	"p8eGHpUFPnZj1TpvDeRmlGGxuSX8pjFm/c2r31wRIZzph7WplkSBzr9QI4JiNchh4oxGMsYsKp5t6xBU",
	"vAWCc8XNc9xEF9escPih5G3c3Y/W31AgzecV/JMxC0omu/FhpZ8gwPSrLk65JBFPE3f9IkPmE7UbWJKS",
	"WCE6Rzz1JBDGUWrMSK2tkDOXMpabaEEUgubgQqywbzOXl4ZBo2wBNsnuZrXQQUuixoizdOPbHcvSFsIV",
	"cDTCtNNiWN/ocmTXpW971G8AmnVZ8iQdeSrSnc0UXhGgVaj6huUE/ehd7VF4KtDYVK4IttaNWJkxqAx7",
	"W72eKxsW5ok23btWZ4NOprrfejI7ovrsPRi84jQNrzGzw2preQ6vJypuxmBc3AKZCs08w1joybavTTur",
	"J2O1DrbMaokZ4oyYcqW8HLYh9u/XI86iKpMfMOe1gZIjxSOctDyQfXKGcJIIIuUYHjAFhwy95ed5mqK3",
	"56cTdFLeDl7hlCbBEymITDA/IixpuaF+zhJ07NQQpUgyQcdmNrxrMKToiqD/Qk//+D1K8EZO0Lkl6Mgc",
	"DWhDsHi44kwtHyZ408cU3sOxLyvlFXHMeqDaijQVfGe0z3kLiyRolXW05FyS0kgDdneu+AqD/UO6MQsM",
	"MbKuqGT0RoyXXBJXcPKBgfdw1bsH3IgL153XeEUCQP/VcLxpFkP/hazvDVRQWCBpyBfO2MhmmR0KDJHJ",
	"NjvswrrbO3fmmh9S3TGpidXIt+AuZYy6csS7KyG4pwBhFZw1s1VLR0YnbM5HdUryyhSp27EYM01z6pDE",
	"ToquwLh6zzkknPK1/j7la/g05i06xfyCxJd0AcOr/xvHcGsUA7Njf1fcwwHLU74ejUemntF4pEuPxqMC",
	"/mM7u9V76zj41n3jAHTGzrVCofaqdzbIBEYsTLU0Uwi+YymBzQcKHHfUg4UNZ5XDtpdfDjTY6v1/GOeM",
	"KPoZ6cb1VFYSYKJdytM/PmpAuTQDyOKlPo2eswVlpIRtJtfAnecAOuMpjTfoaEniy2rRIEilmp/EJiN+",
	"IUjwQY4uTk1xzbecA7fmwQdy64Xf5SkLF/RyTKEsm2Y0IaIchUqKAfolx2W++zBZAsdLRstc79sA5AlV",
	"f52WAN63Afh5is4EX6c+DrW0BuC7p3Wwd08LoGnMc/WkUpmXVII5qyRHaV+YY/T+4fTFiwfV4t2gzWpf",
	"5rNwJS7DFPk1F6TMOwL3FHRONAdIWAK8jyzr6Q0Nlf+IWUJVUdr7NNkpji+P8/gSHZ6dAICfUIIkOqU8",
	"2M6pvCygA3m1gv44NFMNsMCXZIVZCecnGJB8EQu+TjRmyMimANhMduBHkF7U6CdYEJakRDyEFenB1VMt",
	"sMj83V2CN9PLAj8JnC3/57QY3lpaCXj+fHpRgXIJJUilxaKZIywWvNqDWpIB01RohcVn9GZ6CEB+Qg2k",
	"qKiSEgBCCVGYpiRpQhdZZTF+Va3ZfhuAFFOB/pbikgbUkjywKoSXyfNEZin3x6KWZgD5DKdqQnltLYXS",
	"awWKeispFighse4XbEiQsBl2wWpaM21RpgSWHtp+ggWx7JJdJP635XKwXIKDTUEd/jp98xq4TMP5tOe3",
	"VfD3V6fbyrtsW5wkMPFFH/wEA7KJU87I8d9LmEoKAB3jNZsaN6wCrJ5mAElGWEKYO2NL6FBGvcgFWPM5",
	"cn6G40u88An7i7MXD9Dzz25p7FfSNqpIrB5KEguipIdlIxnAE64XycMZYfFS55qhdqXac01bPL5MS+Lk",
	"fZps8ZJgfbLDzJsFTgRABnNMoembs7JG9wFZz5MFkf6cVxIMyPSUsnJhe5+Q/YILRedl//xvAPiJMCJo",
	"7MZbetu1JcsUW8glGO27iisJBoSqZT5rRCmw4G2ZrugpngGVeJH/+quefbupvfJbIPxKjqyLgqiXrWb4",
	"RY4Ppxced9dMrQCXKxe2UImKX7YVyK9qGmx3Gm53CgvbLnMtJDQLhiFcJSnBl9IflDLBgHBJYmTJAoD4",
	"CRbkKk9ZXBCBArCRbCRHrDfXG0bQEZZEghBZTbJgCU/1Kj6GzQg+Q7ETBFozbVEx46JlzbVmmqJc5K5/",
	"AO19G4BcXm6OTrxxrqYYoE0iSla+/DLi9o+vgPvXG1ivJhC9a2kGcLXKGV2Tkq+rpljhXU3pYql8Caae",
	"BoB/fSH4Av1dYDjM0DRfrbDYoENNCXBc7qk+cPUKA2VDYG+Zsd4JgPtZUOxvJ0elNFN8mCyarz1q6H1C",
	"9mU+I4Z0FyC1JKvVUERQr55KggGhseBzHucS/UxmlMmMeAPVnmsK89n0RQlcfLlMOa/Q9GqKBfqVpilG",
	"b2aSiCusuNh44OE8KPiaKJlhcelRu1qSBcvfmQgo90HLQDGLyQMDHcqpF9LMcx0c0izg54x7LLz/bQDo",
	"pSpZvfLLZK5wyYsXHyaLJ55sdpZiNediVQK3Z5viZ69QlZOvphigPE5JKW57n5D9JiNMxjhrITFbsovi",
	"7w6n6Gj6zoHbT5N9foHIFU5zUO+veELSChexLd9UIOUJS8hndEyusOnY0aGRFyr1dIOZ6nKVcamefFd2",
	"sJICQGcvz8pRN6N59UTDBjPKIpvVnLONJ2s7Et+eC4Uzmj3ElWmsppgWXh0X2e63yeAZ2ZRr0/s02T+/",
	"hgMX8uxvyPifHKcbiU7YXMsNIo8VKAr0kN3/mcx+enui2XXYFD1B/WodOt6nn/0zmeEsq0N5qQB8ThQV",
	"ZPKprK6aYoCovAR9BvOEMLMqWrJMsXzGY16i4H9bAKk26CVfeCB+CgBND89PXug8+GGSYswU9USzSoIF",
	"4blC05wq4kFV0wwgWS0EyQyPXR6KgWQD/reSSrvfJoNtSmmn+DBZXMvLh1kmY0GIz1WGc2wh50FYlYdD",
	"6bUCZe1+SgCooipoySqKwbVpxYHQayaYaYpmXP2YL8r1VUkwINNTdIpnHoifYEBkKl2m+emSN796HS4/",
	"XcXuG93XM/nA1l5LNcAKx5cv8foS6T9FlY1UAL7AKZW+bqySYEAI2BKXEN63BRACV071aooFkkrK1AMp",
	"vw3Ai6nHgJZfJlPQq40+MYQ+80uoZrIHXoXyMvP5PCVLb7fWkmpgTwNwTyuAUq3xFUEvcojHAfxjWSKc",
	"WStqJvFo+u5BtVSZbgqsqVQpjy/RyQovvDkJpEOBd0c/FUDut8kgAsfAM7hcP6EGAq55RynxFGitmaYo",
	"cAAg5NifkPwzzqgq+Qvv02b/mi9Nxq+5uV77WQu4hniJgqY1Eg3oksqMiHL3VRIciCIvsUJTwhRlJLVg",
	"1cQS1PokehVW0gxg5ja0+QWJf8eMKvqrRyGrKQD0DyxYjSerJQHY/3NYakjcb++GsXJTNRqP6ndSOql5",
	"9VRJDd4qeRBwhVR+B66IqpneNZDOqFz56AR3x6N/ezc6+tO7v9GftZuaWtK7pzbBu4BxKd13KnVId2eg",
	"03tfhIzGI+/eQ3/5lxzuO3CNUcnymq7cTejv5hWESS3vG+C7fq8Aic3bA5fs3RO4JHcp4L4teE3hr1N8",
	"7X7luwFQOYFdjlXN68+qFr5IKT6q+nWdFNCiV5ILuBaVOOR5+m/4LrXdcCvfrssOZztVNeR6emn9XdFB",
	"j8ajurZZJ4VUytX0HdTCULCh/R2NR+3aXV2kVObqr6DCVmc4De1oPKqoY/V3qX0djUe+rnU0HrWoU3WO",
	"rzvV323KUZO3RfFZAlS1m2W6p8X0ElvVkyXMNFSwRcVoAEp9ov72lYfw3dARjsajmjoQUlr0fZDXotDT",
	"eZ76Tn9WVHU6oVDNjcajuhJOJ1UUbjqhplobjUd9FGZVsGaKr/4ajUeFvkv/LtVbo/GopskCWxpPbaW/",
	"W9VSOrNQQ5kPT+UECWGl0mg8qumPICWkI6pmgDYIkkrdj/4sdD36wyl39O923Y3OrehpdEKplhmNR1u0",
	"LjbXKln01xYVis7u1oxoqIoWZDQeBVUdLj2oyhiNR1W1hYa2igr9s9RL6C+riRiNRz2VCyWkraKpMxiN",
	"R1X9gE4IqwB0jifww6cv3I/GI5Do9X9ffIfvqqCuk5ryuE79W7E8C5Fb/w6K1ZDRFJ4ryQ24+kncKuzq",
	"PF+y1d++GKu/jeRqfjkR1MDVBFKd2BA8R+NRRcrU355MCZ++/AgJpbSoPwvpUH80hcAitfioyHeVlKde",
	"UlhUq+SVAplODohdo/HICVr6py9VVb5rYpPOM5LSaDzyBCP4+jVf6v91sUen+TKO+a4KMy7NE1t0UmYn",
	"sCqWjMajmgQyGo8KmePj7ylgGmYJ2Ovr05zXfBeKAGqmehOwXoL57nrJU9+a/sA5HCXAJUBtDG14Lmrt",
	"1c3t/ThbEOFOz3q0wszZN+eCNkft3M1TShnE97KfurBv5WhMmj0/xj8GozRArC2paCz7P6VgPXPKkuHn",
	"GfAiEFzyMEmQzjHeA0uSZi5ElnXB1asuFGKy+6HBns6vu3nKOpfXHaInVZyQCsf8HdyQOp9R6OF50fb4",
	"WtXivmJD3LT/9W1iK0ulfIvNjmjHa2ylL9fOL2bcfZeujugF13Pw6qh8cPca3L2u4e7VtboG56/B+auP",
	"81cRdmH7eqr5dXVA7+C4PDh6DY5evwNHr57bJOiR1VVm8M8a/LMG/6zBP2vwzxr8swb/rME/a/DPGvyz",
	"Bv+swT9r8M8a/LMG/6zBP2vwzxr8swb/rME/a/DPGvyzBv+swT9r8M8a/LMG/6zBP2vwzxr8swb/rME/",
	"a/DPGvyzBv+swT9r8M8a/LMG/6zBP+t37J/VYSp5e95aXQ+Q3pCH1c7vnPqOUV1vb35jblJb0W1zmvK9",
	"oPr4OVV86mpuTnNlHhLr52o3tcbLuspc1lzuqr12okXppoV01xUXZnMdE71H0DH/xBFgAcNrDKHBz4jM",
	"uSBfHTWDRg23hKQK90ftWIPvihGfa3aKzi05kGiFE+JM+d2LoRP0hqUbhK8wBYt1Q4guzg+P/hadvDp7",
	"c34RvTyZXrw5/wdaYikR4wolVMJLu5PmAoPFEFpIfz05PzxhUmnWNOQrF5NMkSRa4SyjbBEJInmaq+Bu",
	"0FWhEgA8TiSwviv8UJIMC2AlNU9J5AOzaVY4Mx5MDB3atpzcVyVTT3u9rGzcpCQslOiSBNwsLgRmkgJ+",
	"J8e65SNdBAHuVMqcyDG6opIqtFQqk88ODj7kjx49jf/x5u25gXp7fgpJ5EAQqQ5wRg9SrEnVAZS38Iev",
	"/4HeHZ6eHKOT6fTtc/S35/+wpVSBgfwL+ZxhlvzZS5rAiQVjos8gWBMnx+A4AyeJQdRN2HiX57jdC4Sm",
	"x5WBCLr+VBwZC/P+umeP3t/YeBcpjhb0Cv4D/a96Qo5rb50+CvpxGeeEYr1V3TCqb0KblaMH6N6ZoFyD",
	"3bMHPmXor1TgCXrBBSKf8SpLyTPfVaLj2dWxc0uIYE5bnAH+wXNkWOU5ZQSRz0pgs4jsm5CUuWNGTrLN",
	"B3eNYoyW9X97CcPFxty7cLExxmoZjcFKLaOxvVGil8TcJNFL4gyLrTmxvdMzUpO5yDO/PdWvbg04bA6O",
	"Sbpi4N7pJTE6QpA3bLEQ90YyGsMiCHqIXnDEZ5phM/Ohqzdrgib3dt9PTw7MNGrGzLztbTzHdK2v8YpM",
	"0BHPDL1k+WpGBNKyE5+jeP7eJHw073FiqQjSbRNBJjvulsZ+AAeVKON611yRL08S0QtwyzyzDV6HLjoP",
	"qU9U4EhuWBzw8Z0jI1glY7N7wY1Gw6J4idmCOKTsgVb1TVMcJtN7eP2wkg/1FAo9zbsD/F+C/Fbhz2X9",
	"oBtsJ7XcPTwDb5gv90RrkpgHWj333SA1QJTFaQ7ZS76ugGtGzjl3cqHZfF0hCCSxMs/oc3B0NUw15Sz4",
	"3mvD9Q8efrVTkOKIcVXwACEfTvA2NjyqJjIzgkD3nCSEIawAYyv6GIezUf2NWT3shCVoenqI/MaAJzLX",
	"Eyo8AUu6WH4ZEmyd0DrJb9/YCXoSvgym1omuG1NzQNgH+6OEilbfTlhkPE2IQFa8Ne7WBB1/wmzBkavF",
	"CqqKI0FYYhnokkVBXu1aLiWSgOt1yecm/BM/KGozjMlDJUBpLCfolOArgsgqU7Bzc4ubPfMQLFHwEy6q",
	"qD1V3+8x9pSvv8zcGM/GzqlZgevjl0GhcKvsxIJnhO3Gkp6Th28ywv6jmNJzosepB1eai7Q5hC8CRNnQ",
	"dV5woQSmcYw0UTGbDoRBkAUTHueaHBbUvF1fYjlXi7Yb/JAbaS6JCD/z3/nOf0OO2cYa13izNvINRLWN",
	"YrZs1vY91FzXZmq8bneJm1sitAxS5yB1fjGpszOWyFeSQTvwGiTSQSIdJNJBIh0k0tuQSDuI8a3LnV34",
	"DFLoNyKFdkzUV5FJO3AaJNQblVAzLOWaiyQo922bivFoLagileCm34a4W8P6usLvLnfjX0gU/nJScDH9",
	"/QVivQGaYnA19F536DIXZHAXYBMqsV+RvjpZINyGQwvHJoQoXXpJppRdkgQWqj1TNKeTYqnsDbkxpagE",
	"7HqoKMSIa+DrFqWuDKrIs7YAXwZDzVC1cDoWR1xHzTFh1miESsei9UcziAsNEIs2WEuh+wFngsNK6zXB",
	"lta0zHDL/oRt5jrhoWiq27rkWxVA39rKH1b0Da3oDkZk2/ruU3SH1V5bxYEF3LZ0z8pGamrLJImufMPq",
	"iCYu0mGU4hmB3VVIo0mCKtDoBOIVY8OrGPiWELrGDKkXFYhzqfgqMuyRxdIKq2c+9r+NQ4oCU9oynWBN",
	"ao9AxOcaX8WNpmCMyGQxQf/6YNuDAtHjR4+fPPkweobe/+vDSJ+A+veH0Q+TR5PHH0a/ffytfTWVQ+7U",
	"XlhKumCEtKg0nNTgwNB93eADiPKckrlCsxSzS71HGaLKgQPDuF5ipQ905CkPjQCja54E+OnOLWD0FpEf",
	"HFfzJXbw2sL67kb0el+RDqLhdkrlWb/1PApgc8qWlWhGwIAgmeGYIEnA4hyM6XdeS9aquB96LiJrq07H",
	"kZ/pfnoYS2F7MyEQ7RWnqdFah4yIK0q5Faaw7FCGhTPyNrsQHaZrvHHnFehSzWlolp2i8SVRJlB7YbsN",
	"ul8qCwvxcI80howrIsPbUlB5GZkbKb1KIvI5o+5yYtvYgofIYVEOleV2GvImt9VxLrXfqg3H03A83eLx",
	"NBw7w7EzHDu/32OnQepOMVvkeBHQVAHxshPTV63aJu2+ttenc0sSU8rAvzlkKZCQG28UHO62tblalWfb",
	"TTYL9W5r2QjqlXcmfLG8Q2tjXkyQN464qfU68knqLasQZSFzouJlc9H55Vq4hq2+O245X+g2f2sdwHL9",
	"exRxn/YsOejVVC6t79Ye7byVRExVPuvR0G/bexnQEFq8dtSuuLVrTdCKmStb+7iF3rRytAPZ+fJk57ap",
	"Rhc1uPnFueNqvLCGV9WlGPOUixpr8qf2kXh58eoUmTLXMH73x8pr93G3fWl1G3Z1t3UD3mivt/VmlwvD",
	"rd16RYx7Z/2+wbyo9QVuG/rOZeCu9PGTIGvbeiD6vdjn4Hjuyvc5obxB2KctZzn2TZ27Hcdh92SDsqE2",
	"i0977kb79JWpom3pbrkx+2IruG1l9nsb6poDt8vG7xzB10Stubg85VYGag5jb8rL26zkXOX6lGOmPaSI",
	"VJQtnqHnxlJHPkPvzl6P0QlTRDCiEBf2N05rCoXv+9Jyh1Cffreuotvt1k5EfWv/uAr5rudqyXeIgFDy",
	"zaFHht37Y/vJXiShKgLgtirqe6RXlUYcDOjqEqr27vp2TEATqMQm+FTxkkqw5tY7ycX82NaunriXtkw7",
	"eS7igfQ+S7kqDeT7jYDGxAiCocnPBL2y89+hn7eLbuzelisnvpgVN4DlcFmxqES7bZG/LMe3xoiZxzOj",
	"a018aM3j4Dx/tYm4yS1Ul1GrQ2h735gai0PbDLUf0Nu2q9tQnUdq32VoamxDMizCVAj+v27QRVdG5ZPb",
	"zc5TGa0wS7Bb2EEISdkibakgxJ90n5p+b8ceB7ZtzFont2PoOm23v84A7XL+Vodr20iVKubgkcwjY9BZ",
	"vU4qHgF9P8IpESCBFydI4wVOmWLzAAL8AF+jlVQEryCItP1pkjGFuM36PyRA7TrFNFN6I0FVmkkxpYFd",
	"oeloXOLTGa7q7naMJyQS5IqS9Z3pk3f3CR46d6ZjO1npWoPCu9J3rpZE3JnetGt6/uNuIvrfQN+tzVx5",
	"YPtudc2cJ5EwPNVd6ljrzf2d6SKEqbxby1GmOJoJgg25vRtdUji9k/yos76qdAh84UOWNhBF9m4t1jyL",
	"+YqyxV2c3L63uAYy0n2nnN2Zye1n71uRs9stfgdxexC3B3H7i3ZsEKN/JzLUIEYOYuQgRg5i5CBGDmLk",
	"IEYOYuSdFyMbQuMZXlCGFUkOs+yQ4XQjqTylYbve3CwFG1pq9Ozxk6dBAw8bD6+AGy2Vyp4dHOCMTmzi",
	"hIvFAY6hTnnwFz6fS6L+/N2jRx/yR4+e/DGlK6r+/PjRo2YYoh4+auSK8lzuh8KTm0BBEJmnSvY2efLG",
	"fsdZO/Ljmp4RsaJSUs6GGbzlGWyZh11nU5BE0xycDhN42xNYDP3ec/bKeEoPU/fVps7OwI4zeExSosiZ",
	"ERqH2bvl2auM/s4zd0VSnmk+7Tm7ooIz/XOYwlufwtA07DqX/BP/SfA8+91P33b7HBNiTt6GmU5Fw3cj",
	"zfZ2i9byk/xqJkK/vx3kFv++m+YVWc2IuKtbp4jKuM9qqoxt58IVPN07eMC5LvvN28/9fjeHWeQ7bhHn",
	"wDpwBbc8bb7n8B7zZR72HWbtK82aGf6d586pjId5u/V5K7T1+87ZmSCSqGHLfb2pszOw4wzasAl3lfnD",
	"uVp6Idv2C2LhRvhoSeJLGKk+fJpx3P1KjZuwjl+rcbHJFP9KjSdY4a/VNLyHEdUNSKLZ5hb49fEoybOU",
	"xliR6BZDqbgwIZEktxMmxjUobykoTbr/OjrH6xe0p1RXeUPgOoNpJ6+/0DrnObvOGr0gsr9qJ8XSbZDb",
	"2xgrqugC3+JOLKJw7tMSxB7p0woYVX4lUidIxoW6FUVE0yLvtqbRrtNb0UU2zfOuQQPOqbwsI7b2al0S",
	"Zt98/DoLShK48/5arXOGxS/5zPZ+3+anrhrz/lKflpX1s9iX8vZuJKIrvWWvs6x0eydQy3+O/tDjhXaX",
	"qi6sPeAgFX+dWXPjv+PsmadFz3k6TNxtT1w59DvOmf8M/DBrtzxr/uDvM2/6tBwm7WtMmuNTdpwx+zLM",
	"MGdfYc7ca3G7zZqLvnxXFb1D7P7hxr86k3tuEL0ABrr2lebM7b4d5u0VUfiuErUh/voXib/+u9se8MbA",
	"btuiHqF7IGm3PGeN0PA7zh8f1Ea3P2d8Z12Ri+Q7zNVXmKs92IVKnKM77i0wyCbf4KL1olnvtnLtrBye",
	"nUxjzCo+owPxueV53DIX+83qnXZeukUPjFukfLfg7HFHqJ6/xvfbHnfZPJUL+qt5hvd6Xna7bZQVuMPc",
	"jmWL3pTloy234EDofBdXmOHFrRkpLfK0fKZiL6pQVNHPaCXFUVw5evY1Wzk9bBxhPWxK8OpWB1iReMlo",
	"jNMInnTfn8j/57Gd3rG2O+29296hd4thGOSxvTbGXr6h3qE0cO83yr3fKq8wsPE7bpZiwe+/XwZ2/vfL",
	"zt+9xbz/Ov6PYI3uGjUeeKS9d8pefNL/5ETqUWaYCnLI5PoO7Jjf2xwG5uD6s0iSaS6uyGaYza8/m24u",
	"rjOrpfPUMK9ff17rs3Gdmf2JMCJwOkzr15/WylRcZ07dxzCdX3M63ceOM1lq+ofpu+Xpq16y7DJnFafq",
	"Yd5ue94aPu27zN3gy/kVZmx3L876TeQwZ7c8Z6Gr4F3mrxIAYZi92569RvyJvefuQmAICDLswa88i+VE",
	"7DqfKp/dleh+v7spLMd+11nbSEVWU6IUZYvBa+fWJ64y/DvOXRkf565eCVkfQRnh+ZzE9nHML+0teAsh",
	"ku7IVU01QNOOK3egNV9htvaYp8Hb7CvN1R62Ahecp4NA+1Unrj4De8ygvQEfmLKvOIe1OdhjFge6+ZWm",
	"bg+6+VYScWSs/E/YnN9VdnowRNplLdUWxR5Latj+X2HK+s6TipeVh6TPTbjn0HyxOU0Ii8FScIU/01W+",
	"Gj178vi7P333w9M/fven8WhFmUl8WKT+EOgeVTCER0WFKCVXJB2FJp/GxsFqhT+fErZQy9GzJ48e9Rgz",
	"hlckVHBFmft+HJztwjGliYzCi+okdFTW9pZ5s+YrIiTt2VM7fO9MEfQ6B+vAQPNrMpPUPItfW3FeG9/1",
	"Gk1bVQRR669f4Zal2HgZtn1BCpJEFLApllT5InBoMVWfx+9+Ud6LzdQNTGWEc7VkUSb4FU3sTFvEDnO1",
	"1IiZGATozIEUFc04TwlmtSXY3arT0vR4Hl+k2yfuyaObmrnWKcOVYQi+wv+Ci9U/0UOk/6PqsMFT+9Pp",
	"G509nb5B5yShQuNQvrevS43Go+n0TfBt/Upr/9q587qd8q3U4EbW50LUo5s/Yklj3RH4AT17fXH6Sqfo",
	"/16XAGA0Htnk0Vgj+bEHrlRGVzitbpBTvqAMUYlMTmj5pRokEmRBPu9FeFO+4Lm6RgV7Um5nw75jsZ7b",
	"oqsWScReeG/ZT+Enelv31o03X33CsbXdwlGtuRnclFRX/8WSSqSzUEIUESvKiERqSVBWvMEvEZ9Dkh5X",
	"pDgyHs+QBO1NRuVBCEhChUGi33bo9un6dmbI6TYiD/EKe9CDfNc4hHYC9d2jvTfP9993rl/JY4rTytFV",
	"nTQzyOYxA5KgueArhJEphlyxyQdDow9/zQU5PNbEzP706FmZ0k7K7MxOTfWdh2eP1exiMrbO6FzghSPr",
	"9fVKkMtFFI64OSUCrZc0XqI5T1O+Ngt4ieUSrbC4nKAL/xPJJc/TBM0I4iuqFEkm+nxDVnJA9ySJdWMP",
	"Hz+9N0b3MizwQuBs+fDJvUmVGH3faxEsuWzph85Beo0gLtDJGcJJIoiUE3Si0CrXeVwhyuI0T8xu0/ON",
	"GLCYNZwfP/nT5NHk0eSxRjnlMU515fpjw3OR8BWmbBLz1X5dyLBahruQ2tB+jkQIInkuYjJG1OuDVFgo",
	"tKZqiTC6d3CviryL8Hnw3ZNHByShai8UuWgZZWaCEJrBwxJ2id41gI7G2bVvh2ZvSapBT3biHTPBFY95",
	"Gu5EzFernLlN52CNjEmQzOMlwhLd0wyPnvS5+ZcweW+MiIon9VO0x4j+khOxCWMDWciAjmEMf7E2wG07",
	"rLJY4dD483dGFFcEr/78w70qgo/70debEAEpm/NmL7XQjnQWDCtOaUz0gM74LDig31+PWa++GdtKFRNc",
	"kx8hIcgYlzFzA4IUTiWJMm7eOvJgPL7TE7aaFRRviYXL1p8a6177mkXl80jGPGvBx3sYKtzs1tGtPQ/a",
	"zrUZUhGlRcBSf3F1MwzFm2fVxXRcfmk6uV5ihRghidTM1IwgBS966UNAGtU+yjPkCTdozgUA6RkZ7yEo",
	"bdWjFKNeRXqqkzW65fA5HMbo5OyePDi3tF4evD0/vScfVFH7QWPW3IFEls60O4ysZULqSP4oKJmjpDq+",
	"GcxyaIfuy32XQ9AuTGc0cuJ/c/nOBGbxMlJ4ESCoeKGn3oC4c9TOmD2fKhNAklrXHn+/RTH1I1R7cIEX",
	"IUIxy2nq1Da1kdU56OT45hAKty2JuAqxuKZ9k6u5iowzSWcpgb1wdHJwdAxtj/qcw/GSxJdRSttmRx+u",
	"VEWaQ2wicgSZhn0ERluQjO/T34S4x0m1lMJZVFWAVVs9mSPCdHUJqpRDa5qmiLN0Y05ajCylRpQhpWU5",
	"b3KwRMV7qHoeMYPnEssiczTjaum+JcKCBOqZoJM5SqgEdMY1fKhEnFVWCKiPfZHwuNYBtQzgqrsU1IDc",
	"gJbINVIQnoYC6IQpInCsz0MtJ3mfIELBetMZ8MMTnzzA0Xhkc/uqhOZUSOUCeZEkdLJ363cITvqdsQFZ",
	"9Gmv8eMiXhKprHRN2IKywCC+8aFg39KYXHfjZoRtIaqGzgdOLns/jjBLEBzJ0HZGhB5evfDrC3y0Izcf",
	"UK4QLPddoOYd0WJxdmPiHgEV/cDNKR3FPCE2WB1shjbKOwVwpMEd/e2eOqcjOHqFpqbeHTDJBW2i4bgL",
	"lFJ2qRklWeLVvLXzRv2P2+5pzg3xbqpcgPMO0obXXKGpFmBJAgrh8hNow48pjy9Nlv1pSAZmMUlTk1F8",
	"mCyuxSBbXfEBWSegUFkIIqWhQ8UnZL9h6CVPoZz9Cck/Ywpco54mN2waJpTuES+vJ6PxyCKvyZjDVv92",
	"6I3GIw+b0XhkERiNR+Fm+lLB68pwCosFURFhSS/RyIKDRqJfAc2xAmEji02ncrpPh5eCYBWteELSMGFT",
	"AseXoa15arcCyWiseUZF40uikASDbaPQiJeYLQhIFvYac7J1t/TD2bsRrWLk7j334RKvJzNb6+nXXJF2",
	"eY4r4i4l+yucbc3trH7s5Oa6mGcOGzo3B8w8xWvNHxl4PV+Mw1kT5ECN2UDkjulq1a9BSWjG2Jmdo6IQ",
	"up/SmcBiA8rEMcqwUMDv2ZUxRpPJ5MFkn4kvEeu7BJro7THv41F8JeXV0zA7zhl6l6eMCDyjKVUbNI25",
	"LoeM54Jb+Ogpun/0bjq9evoAyZgLEtD+2Wmqo/j4T3VhsY5whpUiQmP0fw7fPXv/+vD07OO/D4+evT99",
	"+fHfZ+fP3r99rX+9PXn2/vX5x39Pn71/e/Tx3++PTg4/PnuvszwGWSOJrp6OWochAvQDyyJfEUFjnCLT",
	"T9tNUBcsCbryBwm4eEglseJCL8wFvSLM6O9MQSpRniVmfJY0JUjiK8MvESck+MQk4fks3cKmGk01dGNN",
	"wprEo5+fW4V25+TcnF7W6dGa6Ogc01u9d9dagKIy5ldEGPLVeVokRK/+qOW19hq94HGuyaNE6yVHBSzC",
	"yNSCTC12Or3B6NHDqtBUO0U4WxCBVnrGi5wrAupO3T29dfCM56oYCZiB7cdyIWjuQBer0qmVTVO8lsg+",
	"rZ+EqWWyYXhF48hTUlZbfKFbWGKJZoQwuNiMvXuyY1McHWalVDolcS40KbkwKi6kOE/R/ePD6cWDiixr",
	"yzoR2kAEsSTzuWbr51xEc/o5iOdzAIEJNiDoAAmyIgnFyu27yiZG90/5eoxekYTmqzF6SRfLmtrtv/+7",
	"j+RpNMA9p8obSI0bwgjKI6dBRrMNYAqnvPBH6wXAnTlN8zioaE5JFL5fOnG3ewnSUPflAwTCMmUFTWqS",
	"7p43s3SV2ejZNSJAPiu7KWauFQNbGxAt5MJpI8eO65FjRJgiIhNUkuKWoI9lSEWhvsuMzOnntk2SBsX0",
	"aSFTEUd33bmtFI4v7elwXZLrDFzKZoLyoO13kErVZ2LJ10ZdLpXudmX+uy/iZxGP41wQFocU9K+LkSih",
	"jCKMOLET6MF6SRiS5IoInFY2JpFoTeDkzVkCege8WAgCc+q2h4wxY+SmhjaEcnCMmeMRIkCcqpY7vQJO",
	"E19BJGGqcrPrSqP700djNH08RtMnYzR9OkbT7+q85Xedx0X9xqfHop/jNJWI50pSex0u3RWFoz565A+4",
	"qKl2ApqjVE9FEhW0lrOoL1NAJSKfM3OgmOsbV0uYRei+nAkg08psa3yMCFtwubAomydFeQcLRMI7WUCY",
	"3/XIyPJZSuWyZZiO9RBZRKisYaLZqBVOCII64nSD8BWm0Nx+A5bLZaR49IkKbFCZ4zxVo2dwLIXmW5A5",
	"adv7ekTJZ83L4xQlliWzTJBDszcL5iv1rsUBNlg/w2/04/5MYRsKeXuLAJhUiOkOt3KNW9mObWyZpuL4",
	"WmFxqbsrEWbI1YN0reF9K7FUkaTsMrJCe/N8o+wSmUx0/woLqkdqjOY5A5seLQdvO/B2szkx6Bid5hY+",
	"xp65GgJpiD4I9GRjfAy+hQN/eji9QLbJrsPfx711Ok1Vtzah5tqiicdhcaMBcosk6fyh5UVJgjJKYjiH",
	"HFbY0D1z04WR9dubIDC2pLDaeWYA0ZySNLHma1r+liTRrEf1lk3X7S7pLBOi9tLnbOcBijMe7vDMuLrj",
	"9/6RoErzB0bsKIUQkEhOStkRp0FVU5fNo206+pTL8n3AbrZwvdwgjGIi9FyUHdBnzlaFQvdIpdhoiVuO",
	"vPuC4ISzdPOg4BFg7rC05m6QpAn49PQQxTiNbci9CZoSpZlC8jmjoLbSBM+SP6wPqQl6vsrURsPYs22M",
	"YpxLDQvCVzrTC11xdE83cm+vU1S6CDsRhUBJwQUBYXj+J5/pdS/zNgXaLmeT1Gfr3qL7FEr3kdyndcnd",
	"Fi0E92mr4C4VyaRmMDQjrHcu6ScnQjmklthaPmrWC+xRzY7mIjHm00W1JVN5gGb5oteyvPZ1SdiQ5lDz",
	"i0LVTWlahOzvHz/uNsJnCRFRRR/Wn0PQhFCXr2rCwkyBaaizBVlVPsW5EISpdINmBPagZYXa2qC/5CSi",
	"SaQXYqSXWEARXuF6i6e6ELXLtyZNTtChNVbmCG58kGmlwj1TIvc6yTQZnNPdFQorzHKcphvkKggodxqj",
	"oxHuGJvXnD203escmKCRblWk0Dj0GhfnnlcpfXJs29WohgbPh45o0t/Xs9LOSeKukHbx/rS3TxdklaV4",
	"y91WeUHyFS4uGtcU62v7oXbpsHdQ6XWCVvVOPWQ5X3zcicfa/Xb4uvTdrptoha27fU3lDFZllhg6YGBT",
	"oIAhhYUiAuFEc70T9EpnGuOzGUFYn79G/4HT1F5wjkuaUfCqsw06+vm5fwy7dW1rNOiEfd+qXYlaTi6o",
	"h0BTAIGUPprvW+5cIkmwiJcPQClXw8WgUGA026ALqMGChpFyWDSs1Tsm6saISp0y7EJcfkr5DKfnPCXd",
	"HmQ99AwtHmUELaAd41fWsmgKU4FNRoypllOjT7YYGP1UVrzVv6wL+S1j9NeT88MTJoEV32IDYJQV0cr4",
	"RUeCSJ7mYZlF14hKALill3qJrlb4oSQZFnDWXeE0J/KB5SBxBpwBZujQKUZeFFewOxvxxSmXJDJWTtEl",
	"Ccl/RYxNfT4qjo50EQS4A/Mvx+iKSqrQUqlMPjs4+JA/evQ0/sebt+cG6u35KSSRA0GkOsAZPdDrVKoD",
	"KG/hD1//A707PD05RifT6dvn6G/P/2FLqQID+RfyOcMs+bOXNAFBGcZEkxdgCvRBzgXa8FxYRO287abN",
	"KO7hoceVgQgusqq/Ydhi4zlTRCBs3LsUh7t24PQ03a2+WLu7g2tsRfFi9bWL9a/sOtLDde9MUK7B7lmt",
	"A2Xor1TgijvWM+QE/d2FeCutGomyxdr2HzxHMdai3ZwyUL0KbKVLQwpAjDcWnJNsY50YL7C8/Cd6iPR/",
	"43muuNiA77n+AUnPM+PErf8bmIxegiEc/DDWevkCLPXyhYGwwiMA2d+ehZxubTQeQROj8UhXrD91baPx",
	"6Mdcb8WiWMjFnWQ0hgUStLG/4IjPQG8Bs6OrN+uFJvd232tPDsykalJqDj3YHFDra7wiE3TEM8PMO0Vg",
	"DmZC8fy9SfhoyDCWiiDdNhFkR71gl7PRlyeXqHrnfB2aabkYuGeI5IbF28z0x2Znw2GnYX1DPOywQDhX",
	"fIVhd6UbnaX76nEkh5V8qOdFoffTopCG/0vLRbrBVtkAPTX5voiuZPgjGLTiZE4Scy57dj5B2mCdUYvr",
	"WA98jSWKBcHWkWm95LpCa9xu+EuwMCr1hL3UHYaRsFOQ4ojxrcpBPQXOh0oTmRlBXFPGJCEMYWPQcub7",
	"KYzqrIUedsISUNr5jUmkO8hXK8JUeAKWdLH8MgT5JV0sdyfGeqi/DD4QeWp3fMyh4Jj6hAYMXI+WXB/B",
	"sLB4mhBRt/g4/oTZgheCi9WXg1IN9EUapmRZfHUWeIFLAj4uUnFh1ez8Ez8oajOMykNrfysn6JTgK4II",
	"aGMV141BC/acQ7As53malgjVVd/ff98rSsf6y8zUKV/vPlErUOx/GYTMpcHuOPGMsN3Y13Py8E1G2H8U",
	"A3tO9Dj14GAzLOWaiyTosLJtKsajtaCKlIH2yqAtNT1+gOI7Gx7H/hJYIWMkCDbDcQza3mP+iVdv4jtN",
	"2JtY2xFx8zraKUzMNVxFQXrUq6VVdPyica8cF7CDFA9EzHArHfYvKWWXJIFJs/RVn/oplgqteAKqn8ZV",
	"1ENFV2SLQA+VQRXG8jg0UQZDzVy02sQAjriOmmNIrJa5elfVD80gLjTZI7YRlLS0a5+imeDukvya2o0z",
	"U1O7ciNJorq6yhncRCmeWb8Vx7MmSU07f2JMOgxFM/BbnR5CI9KUeXOp+CoyRHRLwNC65tiQAFPaHk1/",
	"nb55jezxpgWgE+AgQJ4YIzJZTNC/Ptj2oED0+NHjJ08+jJ6h9//6AI6U+veH0Q+TR5PHH0a/ffytfeWU",
	"E+CEYywlXTBCWgQfx1s4MHRfN/gAzPdTMldolmJ2qfcj00KaBYdjZb3ESh/WyFMxGDZH17yXvYCRbjxX",
	"5QhEWjt4YfelXQncwBh2UBvHE/Qn57DpZMsKMyNgQJDMcEyQJBkRTcvAJ7tGl+jtRdsu0RX39ftJYZZK",
	"thHasDEhTlOjswoMWVUkX2EKyw5lWDgbH7O70GG6xht35oAmxZxoZtkZVz1pbf2tSO/84J2BULhHGsMi",
	"ssjW0Ch6lURgVmJVk9vG9pzKS1S+JojKcjsN+Zaz5hSzRY4X7awQkLIbCmBbGkQbAplS1mIRDR7EN90o",
	"uEtva3O1Kk+6m2wW6t3S8pymZrBvtF1Ta6i91E562IJ0qxP9DVzeuCV3scm2XJ3zlIsadfhTe69fXrw6",
	"RaZMSHb3+lv3ctxXiHhFFN4iP5TBnW5YeghIQ4+f7BSmubsNYLNCgSj2HazXJmjTqYvZ1DpwLqpTyCOu",
	"tLN04eJsrKNn6LnRXchn6N3Z67GJDcKIgph9zNiN32Ssoa0OzSShrWG3CFMmXlvnbNEra9G4Ay3XaG3d",
	"VFvjtPRQDkalW3Wzb1RGK8wSDBcxbRCSskXaUkFoZV9zlsoTcluEZR6Zq9d6sB/rsvB+hFMi1OijZ3ff",
	"iEAhUxzD7Rf8gIurlVQEryBIhP1pkjFNIQ3TFBKgdp1imimvtqAqvWxNaVjAVMtpBT6dpiZ3t2M8IRWD",
	"wjvQJ0+Cg+ueO9MxECSs7uiu9Alcoe9Mb/aSD+/WInW90ul3rGt1R7e707FWufrOdFHGmN2x5ShTHM0E",
	"wc729S50SeH0TvJZTjfaz4kXAnHdrcWaZzFfUba4i5PbV5ljICPdd8rZnZncLbKj1fYenp1MY8wqD3O2",
	"SpLbIzgb39Tokmyix3t5Hfg1PLl2DU/383zgPI2qlrG7xW2z49qubc4lZUTKyJnPBo1a/oD+eUXEBi3p",
	"YqlXxjv98ZIulrBgXGqRYIxldJIxbYHElK91yilfwyfUZ9OgOpfBOCMmpiTzAzMW7Y+MVdnI2eSMwFRo",
	"NB65GkfjETNl+wdc7HrVpMvG1wQCjsqDtnLNEIo5YErAZY4pUbtgoPPadaUqXQicKXA4xJK5nZznaRrV",
	"2LXARY7xtoNbuZrHLXK+tfX0ORersX8zosXMMcqzlOOEgMsCnxehfloRLNh/vIgoWxJBW3B03jmFcwRe",
	"IK/ABB2yjU6U1maTM4QLYDDnrFqY+sadOE29WO5yDA6zcgw3Vc7IdFsnJF1lKek9zga8MaKzDYJw3JQt",
	"DnLmfiJsUmf8c8tA2ggdEc4TSoLtTjMS0/nGODZad5MySDVcB882KCNco+WHkeFigRn9tbA0CigXrc4X",
	"+i0hnPGu7ZclS59HEw8Fudrb4jjNSbyJ03Dg6pgzqUQOUQdMONnyG0iMXRw2+6z4gkxBFBWwHHTmefHl",
	"0SK/gVEhyJoP4RfoT4D2fBWJC7qg4ffb1JKKBMJebpANhQnOApB8BsmnJtmMSS7iJZYmAO+Z+4CsmDMl",
	"cKy4sKNpv5B9/8uCUav4L4KFM9huVSCwxSuj8YI1ogloYbJzZTJNPN/iyxv8QL/0HDiMR+CKYjEcuWUK",
	"jhte2yOItlRW3n+iNHOuKWBwzNdk5oJiwNNSZyfQq4TIS8UznXRsfpoB46ocKwJuBxdLTXHMIcpnNIVq",
	"XsEvSFyTGQQxJjNvRLxWR3CU6RZ01zm8GgSlR/BC5m49FTyJbASsaCFwcvPurNCEc4lp13uZsNiibyDw",
	"hQ0qsetLJYJcERaK+vBcKrpyBn8eDbsnkS1TtZ0jMV3BitviZ/zwLx8+JP96NH789Lf7f3n24cPEfD75",
	"7cFf/veoJfRGJyN4E66yeLXbeBeu6y5q/w4CjiAxF4nsGPEyRA88tmcLlY8mVOak2znn0fg6l+n2tNh+",
	"l+5c0ZoSSq9HHHoGOtJixdYW9jpUtvT9vNhaW3xABWebVWswDcJI0hJMT2MbeJOry+0PK7LgbY9yydxE",
	"SSpeYnMdcA8BwsVvvDF8APyE5DllmjODZ17NT0gmSW5WGbjUuY9C5onN4ffK/LRnp8i4wIqYo9N+mLNO",
	"LQmcqG/gZqOk5xanERgqWMP3omUr9xhXxKL2kbsf6fGmbM1bKxjgthyoexJluci4JJOgGXIuqExo3G6F",
	"rIgQVHGxAa8jG9Sp2oZ1g66bA/6xO2Ri2M/0wq6mwLTXYlo/+aH71VYX6CCwplkZJe/t+WmrR1dHpPn+",
	"G3B6ethPNeIoUBPnkpgmeCONMagNgagFDlvOtwnfx2nYVeN8/LSYe4w3YeuodkL4/eMnfR6TpIvlrh3V",
	"Za7ZyZe6il4dTPl6V/xSvr4meqd83Q87q0bZEUFT6po4GvVQPzTDW/3QBQiC/e6CvEvDTU9PD2WPHe8W",
	"rTGH10i8xiuy0+OtUxc4bLubS9BLqx5PTAPVPHO7I8W1PNVSr9vC7XrIhr3W65UD1G5V9x7S0n2r/X1c",
	"6+ZTjsVOhk3B6G+h53ocULCd73sMZun+dpPWV1OVz7pe6ej9WOaucYauF95nv/Ax28YCopC7N6++tk8P",
	"TlO+jjDTjDHPZSRzcUU2kSCZ5Ey2ajwRZhvOiHsi2D35BPQNajChUOQaYmqYJN9tXreKDl2raGrKnJvX",
	"x0hYrRkLAgHmcSqb5qiPtkS3KHzraiHOyBqENln61RsXnqSI+1G8lt4n+pXXWERWmKZRIVJ3NA3PAzba",
	"L71ToM5xETiaCgT1u/enTSQoFyNKkAX5jGzTZQjTIn5pzJnxw5p0s3v1boUDCHUNpEa40hUvFqWuse8A",
	"p0SRqHiCQoaeIPslp4JIxMhn5W4iniF7+HuyelmJYR0Upi2aZHd7AttuTWZLzi8jSWIResjOatIpM7fE",
	"LkC0UQdo8QUjUxTdh2dKcoEXJEEpWeBYL4AlvqI8Fw/89yvsXcyazJBu21bQhmucYroKvUR1UrxKDrEU",
	"gZso4eFeIk3rfiQsQQvCjKORfeJDNgJzPGpwKcclHiEPNdgac8FXvfx97GUGzhOqUh4IQPpzsZZcIAmV",
	"CwZ3LWMErsnOB8hErdYVoZSDI6GL+QHRzhVHmrxoAozuuwuW4talchNzJnic6x+TyeTByRxteI5EztCM",
	"Luwr/5C0whu0xkzpqu1CMpjOSIydC9oab1ACznAPXSe9YJdrLi4lPPkjyD1Nz3UT9mVEuJ9ZUjVBz2VG",
	"Ygoq7SSHELX3BXn4wKAi/RBqjny7UVgYJ/HWS6QZYfFyhcVl+93Xjw5EFu+a6369+flweoYOp++m6H4w",
	"/us7iD7nUhVmCRbJgyauZf3bEI1xSnQNuyyQ+dw8pnRkyxb0yz2e6u42c/O6uCJijmOy9eoQrsVSKpXc",
	"FZOy5I3gUT0td0KkLHoTmFQiY++zf8sKiKyEKoz5KsOw3J2PjRyjeE2M27C9KoXVJM1rWmtelpdLLLSw",
	"+Pb8FOCW+Mq+UqGltaOfn5sH+1RKCjKilzj41etDV5AYnvp2kYIq7yNN0M9LwppP7xbBhzTPJEEQ9Hrn",
	"BWKkshrlx3ucr4is23iut4jus3WnuLGKVkThBCscGTqx6zJx9SBXjyN9N7BmKmER5D572sntP0ENDZx6",
	"tS5T3E72PMXAPeMmqqgJHVeoIgKEt1JqGw4Lqpb5zOfxbQ0/nVy8fPsjjOOiCEjXWo17c6NWiY1d0rsK",
	"zfpEmv9ojsdZSrAk8G7vM3Si9MqVSnC2SDdwHbJaEWYXsj7yChZoRrQMoHfeAbhmnaH1kioC26Jw/rbv",
	"2Tpzj0zwz5vilHm9oOzz1okEVqNh7dIObozHAiWqo/eKxoJLPlfoQsNX2aZt+ADgBkxx2h6ldMsLHJY2",
	"luevLyyE45iLxERPr61EzV6A0Y4mJ1y41ywdQxNYk7YpU/xHY/ATKLlTx6L2gNZfqIdeONu9+xqoo2ev",
	"yWcTGoPiNJrh+JLP51tkZ+SBIwuO3Ju1xRsEIdsrG+/i8Rg9GaPvxugHY8xk7mnWVEIgQLB5lIiA1VmC",
	"NwH+7xooTHoOCdANeCb+yy+BIugexMnTB7uNfWND9tmAUhPk+wHqWoozqlIL4ypcQb8FBfJ8pcJqZX1M",
	"zwqjhoZtXpbijWY2AAKlRAv6RuKF0IWFKRpH0gX94/ACWoqWBKdqGdgWLsbeTwInHRLBTdnGWYNBO1Je",
	"hGH5Va3miu4JDJZuUeGPvysHUvTb1mR88G+COwKtAuWMYSp2x61a+ibwAePrHc7ZvjHPXVTqRnxzmM0i",
	"/jlnwK7rNIgHDgFiTNhM1zlBshTHdpuX0eTH7q1IXbaMGm8WnLs+Qm8lmecpFM0Ev6JAh2LOJJVKM+SV",
	"OhqoCrLAIgGRwb3MVz4sWNuG517xw8QaTbUOI5ipZILDU1YkoQoH7RxBEilkKqupi/UJkFBl1XO2lgB9",
	"g2Vgs2EI1gJej29BrHRaLVypA8GBdDJoYzyxBs81HXtqLvTuW33hA4hui5LcRgwr45l6IcgCA1lSAHSY",
	"K/4QWuyPcqSR2AlvmFcwKNXMQ+16smcfbjJu75JKFbQ8uf/872fPz09ePX99cXj6wI/gFyCsWuStRI0F",
	"Kbf2miydw4j8kpdX8+h+5eymShoxlyCcLrigarl6UL5hkglyRXkubYP2gbl6M5yV0nnmHug6vLh4/vri",
	"5M3rZ+gwVUueL5ZWc+4L3kWjhWGx4vBUkVhRZjpQYF4+w9iOi40dPCdY5cIGzNcsA8ShoPNWsR9Jqg8+",
	"qlDCiWT3FFrhS4IkYZI4+WjG7QHdWKm3HygKWrQLcEtY0T+gfzqjCrAksr/BkOhl3f/iVcj/4rTqf3HC",
	"5txYn0LcWmd75MU5txF2i+ikJm6qhe9vRtpLqz818iojJDGnozOnKfT8MPg/m2q6zIRa4yp6dbQFwEz5",
	"mogYSxLFSyxwrMBMEe48ki23IYaE2wiisgjzTCHCspbeFeKMoKJ2x1Pexw9/rTzJdWbrMM9luUpCZYML",
	"uCmNR4r3ugRY4c+RJh+y5XQr1GqwlU1cEbsbjJRg9HbbLoIMz8bThEhPgwV3TskEHRcatmKzl9lGfoFY",
	"fxBgboIOTXBC3cIjU0KQFb8iwJ2Wbd7QI46v8OcSwRY7GtNK5FZBlNrx3r5otAxBlLd2gI1RS8yKsTQV",
	"Xfv4clTmugguIJqbsDiaSm8MR6seCsbP1SwnuCpp6mAZvYJArEO04bvgUmecRTFfrTgrx2KvPW7XaIYF",
	"qJmdutnUXYK2729bgSkQ3NBmH30RYpTQBVXo/qOH/92TAkGBtgiDVYnam4MfwjEG/RJRQAd8RkRMmMIL",
	"eNNaGMYYM3Tv8B4ysaX/vJ/R2U8g0x+OtkXaMFjN+mKF7v14I0j92AOpuD9SRzeC1FEPpJL+SB3fCFLH",
	"PZCa77CoXlis4mth9WIU9khRgluV7Z4ixIsz9NKAWhEilWBT4eq1bP1BzkCc0Ecg+UzN258VqaF8wt/j",
	"8UP8t5ygN8xdjjv/vdo7Ig4lx6RTaRCzrEKYxa6HEJlzsYqcCUxYJjy2hi3gc7pBGRGUGzVDyDf1uid+",
	"c/5qGFv964zMuWiGQKm+8AiKy78bEdUUaOAMFZBm/FyrLLohBuY81KqNQE9wIlGeAZbhZ6lB+RQvMWMk",
	"cC6/sXZPE/TaMvDGXMPZZcDjIVbR1FBz1+0fQ55P8WWk+CUJeRjoZOTORCsyKKLPSmAKqFqiqa5ggn4i",
	"5tjD5WMHOKMTqH4S89UBNCH7o+THym8bkJ/1blVaAoX3DGZcWc8Ed5fQbwiM6ckX4QJs3aioG92//+D9",
	"x3/99u8PH/75//7//u//9b////9Hk8Ynf/xD9PC//vx/Pbv3YTQ2tNLQ8cnBX3ryD42mWp44xKuoLTZh",
	"wHh0RaJfOQu7Ah/OBY3xweGMJp8weO1UU0AUdklxLLAPor8rAElCZXQ4w7MKWJlaAU4XlAjpA5qUCpBc",
	"4WqbkFADIXUQUgX5Ea/wJfdATEIVhC1yWgHRCTWQT3laBfmUpxUQKiXOfRBIqICkmKmNID6QTaqACfzr",
	"r/iKpmkFskytAOef8tUsr4xCkeYDHmEq/HGA7yqAJqmYxbgC5RIroCRXFSj9XQHgDF8an+pqig90jC+x",
	"8EDguwogIiKjKU4xXlUAvfRKgU90xnPlz6VLqoDxHKc+/ibBB3meRoeY5v6ucEk+2AtBiOJrH8wl+WA/",
	"4RkXNnRHLckHe4kFrqwOk+CD/JXDOSNnuVh4gH5yBTyvbEf96Wf/Da+y6kjYlArQEgvFc38CXFIFjC5w",
	"6o+8SaiCMLnEstKeTfLBTvGC+7QBvisAdCZIfX+Uif8fe+/eHbdx7Qt+FUzfM8v2NUlZlu0knnVXDkXq",
	"QYuUGDYlJTnOxa0GqhulBqra9SDVyng++6x6ofYuAGRTkpOTc6g/xN6//atCod6vvYGookMk0WG1IbyG",
	"6fEApixMtyCqYYgWQUxVZI1jswCknJGWLGAz9ACmbIzGFAtgiqLSIIoFEMX2uajGBQSRxIrUTDUoqohh",
	"IpfiihHE8xCkvbR9ygJmVEAQqX5HOsphXBFCNEY6CnsQDyCKMGRdNUJrSOtBSH1lyIrUwqwEfFeAQvK5",
	"kFrsvxRXsBQSCKlzIspLXMciBGmXrFuYtYbPjhCiSbYRqBEFBJEMZ7B5OBkS3jJeN4KuASdCnua8FtjB",
	"mXgOkDGBV42QZEURK4IZdWVYG7qSDMuImq1MxnMQpkmyMoRxTIxgRl1Rrhm34x7lQpWHdoaHw40xJiI5",
	"Ipp0RFZkPIZePRVcdKK+YFekJrG93MKZjEjWYjEZg1NOBP3JvDPb8YBONRHslJQXTLybeGTUTgQ+o7wW",
	"HybCBuVE0AsmymekbWns9m9kTEQyJ62eeLpTTQbj5U8mzH4ntTcEPjVMTQe22onAl6Yy3dSDg3Ii6GvV",
	"GDJVuYIyC2rymmTy2qMMr4Lxfo5homZrsc4SHrCMuMbP1Gv8yMekwS/hgCGlfEx4TSVRA26vyQLJBalF",
	"RvcYJtKWdohlgZzCPtCMwz7gzs9O4qv9OVm0OP8gjgMIUr5hClfYHsyoK5HzLJKRmMKJtACmTPSNkz3i",
	"EekWktUrWj4mqDNBijzIRpTPpC2ULESPZwF4ZTimWiQjSVLhwg9QRhvpt8d76yOypZxnSXRQTssaqEcw",
	"qWEVWQnE8lBOawxp8MDXg5jKTE1q2+9I+gHRoQIHEZK05XMiF8JIFAQq8iD58DI2qBwJpW3Hn2Vrj2Ky",
	"pErjJhAgTDOMZE92SEayRYzz1UOIdkzcpq5qyBV6LsSzANdKZFSLjJDKI0npekj1OA5A+RVFOe+RjKSl",
	"YBqzHIRpomM8y/CIIeKTuhM8y++IYSKThtMNqvARw8TWLqqvSC3QuwAY07minNQopRFDxKdC6vIlbbOc",
	"B/CQ/pZscRNN6IBMWoqnHj2IqM9aUg26sx7EVFHrhiwQ0UMZTahhjBHEVNv9lZdGohqV0Iw8yNgAYZoh",
	"NW2FwUWb0JysaUfwHL0Hc+qW/GK879sBmFG3hGdRWgSRnpOWLcl7yApQRrvK4vIIJlHZCcXaFvUNCUXk",
	"E14zwvu/dimFBpIx/WgEL7h4PxbQ4qMBzoikHI8LmWo02DnVVKbdnUntaOBL2rblEdPbsbC9cjToG3pF",
	"RoM5xXgQxis7Zo5maK8cDfqWcdKRaixgUI0Fmyq9sVIzV2yNqRbBpF9Ia3B3HCBE+4l0JOuNA4Rp+Zpr",
	"uNL6yXAadogRgkgvKNemWm8fnArDVNrkmlaPBz8TXLOKZs1kRI2Dc/G+PHmJgngI06QzWGXvUB4nFJFP",
	"SXlO0ETGI5jEOpTFVsYEO0nlK9ri+gbgjD6WexOZdiquqSzPpa2zWexAgYKckYoylLUeyUicZHsdARrQ",
	"jMpZJn+gZCuhMctBOU0z5/QnYwY0I2vSCSmyZwcwo34gusWz4Yhh4nAfYGz1f0a5ndJQmhE9mFElq7MI",
	"LZKRdEvWNjmYGNGM/J5VYtBTAhjTbcZlS7uIYaLgVTYfC1BO01RKus2IHhxSr1hNxYDr0AFZUtLmVIsN",
	"iIpKSXRO9SgivyT9uRZCMIlel38ReGoTMUxkG7bCWRQgTItbqkDOCFLwhmCOg3KabspjshbartxNS5os",
	"SK6eDn5EbQlNBvfq6eA2O+Yk23AYZ+BIjMHZagzO0lfvGCcrlBUBQrRzYgdWyPJITlpxJrXhq4wZ4Ywu",
	"7fKaLQRmRxSTG0E5Q7OoAGGakHqfmH3f6yI20gwClWJZzjeE8TxMrxgEEeVhJQfP8OgI+Q1tGzFkOxjT",
	"DbWKC1ZheoIzOtekPLQTfIX5CUcBLgjj2/KCZWtOAGd0vma8POEt1ZifcByAVmyJ8sUjGWmV7c97JCMp",
	"0RqdxeUxTGSifCwJxzmWUEwWikg8/AYI0ebE5t+JIguKOkWIDwNI3EQjNiCybNsnYgOiKN3yfcjuFVkQ",
	"UZ4T02b0AGJqJSRVi60yvEZsgOMADdtIUaEOJWKYyLLdWwdgii4fE6kb2tIODWVIkQf5STRcZWyH5cQX",
	"TOuc6LCceGoqvI0csZx42YiO5FF6MKf65YvOuAHF5Gu21OWR95eD+FCBglzSlanYirQblGwAY3pj8CzW",
	"ATmF11TmGxEAxnT2zmQL7QBhmh1QNaqGAcppWuB5V4AQ7Y1txSbrsXoQU5lc4W7cI4j0tmGaNkLije+E",
	"YjLjnG0oGtQihoh/IWuj8bwoQJhmV07Xa571kgD2dNt1VDpcpAkTvgzLicfkKqxyM2xANJ3g+vi1TMuc",
	"KWUe9IxUvxgiWR6qx4cB+l3THBxQqzMja5FzPZqTz0nbhRqRgzn1wt0KJBk3oDl5LoxuynMxyJekGATZ",
	"ius8doflxEsp2jYjOiwnvhFKi3XG9KCnOujBqeCrLSVysaU+h4ewpytGHhzWgRQFoGo7EhY0SQTqLh5m",
	"9BJQclJvZdI6Eah/0WEJ0EtIKRYUasWCArVqVmQRmhQEEGXdkAWpIccjgKS3EibCiUn9mKyaGsQQZEho",
	"ZJwcAhkS1gZo1yhyvlqHogQyJEhOwgVBIAMCZdKkPPAiUDPVrCl4gJcBQRpOWdI7MamPSFsZHc4JIQAo",
	"DYN6K0GlYAvSKlBDEoRofPULC4sDhECS4as1JgUEkEQrurBsAHIiHJOqSsl1ElR2RFVhzwQCgNLEq1i9",
	"BJSsTXlpBaAyCwJ0VoJK1RAOKnsEEuUp6cjKKJDVPZJIz8iHpLdCUj0ncgFqqReBmi6kAGonArUojxpW",
	"njHeJE7CIJGvyhcCFFKPQNJVDfRXoDWdyLXRKlXYIAOC0oQvQJOIQKL8RNZEgowKMiRsySZebYUAoFBp",
	"VL+qRkgivSAwIU6Cyq5qiAaVpUcgSZKqYYDiZEiwvZoEBCdDgm46wmsDKAFBpAEnpzSE19sVSG0AAEW0",
	"awLyNciAIIniYkskKECAAaIhLSlPTbcx4NUACKnOFwZgORkSrgnTQG/FpD7rT3t7CSsNUhqoXJEadFxB",
	"hoQ1UQoUTgQghbOWAIIVgdqoCoxgXkzql6wSiqXgQQYEcSXW5gOnsMlAEFMVWzCZMQOWiK86wLACUEmS",
	"qrsVkuq84aIrzynoHxIEaMKuZTlJT+gRQNraKQoBhd4jifQnokHOOwkohe0USJq0RABQth+2rZB1yt0e",
	"SaQLwlcCdItBBgS2JXV6ZS8m9Zz0m5JJhOp1Q1oGCR6AlI7INeE14AQEkKgA/ZCTgLIhfNWAsScCgML4",
	"imyETONPjwCSpDWna9FuYQVBaCJfErYB0wovQrWdhnANCB4AlAVrmQJReBkQaCNB6/QiVLfl4RW7AgQP",
	"AErDukVq/l7E6k2D9ZsGEsR6m7oWJ0ElzCYnJeXrd4avynPCa1jLEQrILSF8QVB9Bxgi8vIxCZ+MyyBA",
	"k6b7JWWsF4Fa6f2XFAyOEUiUN8y5V+OpvvQIILWkZldpqZJhiejWwSCvggwJHLYiLwI1XRNNJeP96fYA",
	"hWRJr0C1CbIn6JZwu0Q6/CDibTYMYdpjKjsTOpAMw8QjwsOHADMop21o+YbKcMltCGP6U0KlwFQP5bQh",
	"a0D6ifDyjMSF4gDF5DNSUybxewcMEy/odv2OxBPzAYrJfgX9jAq5YjhupMkC6fI5beOl/wGakwlv6Taj",
	"OswTjdKStHYReHTpWBDIKTVtCQtFNUAz8mPJVG81MUAHZLGmvHzOwm7AmCILcmTXCjIUyQDNyUbGHZoM",
	"y4jHRF6HwSnDMuITU7XZsx2U0Z6LBfEfuc6xjHj6/ASzTp+f5BTGaxo3HgZoThayLp+L6+ylezijn9F2",
	"IYzMi6uHM/rL+VtMfDl/m1OE1E1GslBGO6cDmoMy2p8MpVy1cVIwgmcBXAPCXAfltG3NQ/PIsIx4SVRH",
	"OMuKPKIZ+Q2rtJA5OaIZ+S1VWQWxSEb6C+GVuGacZ3Em3AV4LMkH1j6IJ3FAhOpjCo58cwwSnxCfNCBC",
	"dUw5EJ366InrSo6e+A7kaH75w9Gxh/xPDxNOavIgdktOjSFIO6Jch6k4RiDJJpBKDkgBgaQzYZylMGBF",
	"CNJe0uulMLyOdW4EhvRzUrEleouAQNKcqLX7vMc1gY+HMKT/xawF5DnZExrW0gdHdh3BKdchX3IQUH0+",
	"nPQtaIh6crBtOIomDU98UT4JRflk7sV5L37/5DhC9qeHV9uNqxjuh4eYr5H2rwd09eDZmQ/qf0L462+A",
	"4utvkOohVD3EKhTsYRYOB8xCfouU3yIl0mHVI6h6hFTfQdV3SPU9VH2PVD9A1Q9I9Tuo+h1S/R6qfo9U",
	"f4CqP0DVPsytfZRZ+zCv9h9iFQr2MAuHA2Yhv0XKb7HyEVI+wsrvkBLl5j6KFUeK4sRRohhxhLB49lHx",
	"7MPi2UfFsw+LZx8Vzz4snn1UPPuwePZR8cBsBpksKeXXrGp6bQR6yuujvlm9PkrN6vXlUQ9fHiWYsysq",
	"le9CENBT/mpaE7X2t1cYKTb0wWFnu5Da25TnGCLyWoTpGkYQyY5r68b3jjmGiLqh/uwbAZDymLbLMH5h",
	"JCM5Hz6Y5SBMk2HPAgGIIolmqiVX8BUTiKlGKdoqRPQQopmqIZLiV4gYJtZkk/M8hGmK8RVFrxEgSDtq",
	"mGLc7xFmEKKJDeUNwfElEFKPzQLnngcg5RlbSNKG5X6OIaKhkofj3wyCtOe0VYyvGaBFCNJOVEtLsSzP",
	"UI0DKCanbfgMgrSfqMTp8wCkvCAt44zbagZ4AEVkRq8gi9ErrJYC66XAhC1D+i1D6lOmFgK+vQcQ5Z1Z",
	"tO/CLYccQ0TBaxyXAxDFvKedXVOsIK0HIfWM1JLBDPIApgRLVShjgmS0IR1HpIAhIuN+PwbKiCA48Req",
	"EIApqvLOTxEAKWB7GyOQ9Eq18EFWhOpzIhnsO5yMCKJeCRku2ucYIkqyMrDv8wCkXLAVjMaKSB0ulwIR",
	"qt3GLQzvAUzhpS0RLhAtgpgqyTt6hYkeymkatYmAIBLrllSKjYDNOYGIuhabd/AtPYAoYokK1cmIoEW1",
	"bkQLh8keg8RL0raMw+oaEERiMuysICCnKPx2EYK01+2WcHGFqn6PIeKHZiWkgM0xQpD2htTmA+A4GRM0",
	"q1BvGxBEYpSj3sYDmNJyZhTiOASRRLsSWS/bY5D4lkhFYMv1AKT8lawkXQCKBzBlI6T40GwpokUQUY2M",
	"czgIOMqzxxZ/9jgI+3HtFH562C+d4rKpXzKl5VI/wU+T+zip7CeUaDKJJ5LP/UrveVjpPRd8tQ5H3PG3",
	"d+9c0bimDD+D1+eaEf7gkGvCCSeSXQUn0AMY0o+a6K4GAZgimdLh7mGOIaKocFRWxoROSIEYFoCUF1Su",
	"DG39FCfHIPGMNBRwrIjVbc2uqEIUD2GakUyHWp1jmLgVWuMnOgSSLqjhwQkBRjwpHCSdxBOkEyWJv9rr",
	"fzkQGGxBQ62fyMaHdj8c9OKavCMt9dO8XvAOwdli66JwP7zjcL+tcBa2Fc58ZTub9+Lvzo4jZH8Gb+Pv",
	"WSUePCbvyEsh/evnWE6c+8N2jEDSM/dNzBaQAuJIL/9qFS//GoT9o+eHlx5xPz1Mrsg7V4/8LweeX7jF",
	"1vmFX2idzy9/f+7fKPz0sN8ienC48aMHlDHBVOvYzHIMER8LsyKM99cYx3AU4KghuvGrtwzKaMF0AgGI",
	"4jeTIMcjmLQkGiXMAZjCayoXxh8eDUBEfUrWRHj38hmEaewdQxz2jmGC4WQZfJ3lGCI+Iy3ZxD5qAGbU",
	"bsFwfgQI0wypSVsR7uvgCJzTu4yHC+q54KIN6/UcQ0R3UTxYWOUYIr4gPKN5BJOY7aU6gvMwoZgsbA+D",
	"iA7BJNihDEBEPSPvjES1wCMZSf5iqCIK8wKIqay+Jqj6eQSRXhIjUS47AFOYQW9pZUwQcila1K4ClNFM",
	"RwlmWQSRzslKlOfBjmIAZtSWGExrCU76OdMVYRJlfsQwUTQ8XHvIoIzGyYZilkUyktTlmTe3wNSEowAX",
	"RAot+ArlTQ8i6pywMGZhJCN1gmBOJ3A8l6RhuJJ7JCNJck0wySKYZNOoyQaVRA9iqsSdr5UR4S1Zo8y1",
	"ckZog8E3RhDpL2QDGX8hG68W/dAj0oAjpDar0GmF305x8cqNfBevjoL4wosvnIiu3eAbN5dGrv2+if/l",
	"wLCXGfcxX88fHLZE+QuGvZBU1GjmSxmIvVqyD4L3Qb0UleB8KUlRaQey/WAhHxgQgrRw/JSkqHxOrglj",
	"QeeFqArR7M81kb4cB2CknrGqYav+FaPYq8HZFhCjGhxSJSkq+8off3uF3zWOO8ZotxjvFL/dn7+2qP3r",
	"AT/JexsmeXEX2f4FH4LBfnJnezPoFReIyfstAL2nWwA4t7ZIplD2DmuhzFeGIfmdaYHs/M4CObiYBUhy",
	"JQvA6DQ2Qc5FLBSjL1iAUaOh6L28JsD5dIUi8NwK4OCkFSDOI2uSo/PVhEQ/qwmJLlUT4v2nJhm6SQWo",
	"geUTPKACIDg7BYjzbApl78Q0Ic5lKRB736QAEx2UnN9RKEcHoxBTZA043nUolDdGI1lRCSpCcAAKgOjq",
	"E0Leq2dCggdPAARnnQBxnjmB3LvgTBhwtZnA5FMzYdF9ZkKip0yAeK+YADCcgfyO7i4tApxbQjF6sUSY",
	"91eJIOeaEiLRByXCxvxLjhJ6h2TjWuQYcoLinHSN6pzLkVFNdN44qgz+GUZ10PPiKME5V5zQeOeJk8pT",
	"w8bjDN4PR3XBvSHSGZwfwWshhIJ/QgStYSDnTjCXe/eCSOEdCUKItrTDMvsAKxb0Awjh6PAPYSuRAUyh",
	"uMZrGHLKh/He9R6CeWU4ApxHPYQMa2rwkocRXFLB+R1GvJc7iEFXdhCH/uowntX65IIOgt7bHEScZzkE",
	"OCdyAIGu4hB8rcQQ8M7fIOwcvSHA+XSDSPDeBqDopw1CwSMbhJLjNYgGF2sAAp7UctR5TMtA5xoNYL0P",
	"NIh5d2cICX7NINb7L0Ngnr7kkgyD3vcYxryTMYRtCepvg+8whFxllN4fGADHvH2NqF9w8X4EDm67RjTJ",
	"LdeIsve7NaJzzrXG8Og9a0QXHGQNNcPXMVcMFkvwbgWQsD8KkWwI8R6qADDigGpMm/xLQa13JQWR3mUU",
	"AL17KAiwDqYR+HxC6Eh6kAMngHtnTQhwfpkyxOAwzt0SRoJbJQQG/0kI856SIDQYdHvvRwiTrMak6NEI",
	"gb3jIogGF0UQ8t6IMOLdDuWYcy+UgZKSNoO8wyAAeudAEAhugCDkPf5AJEz4sCsfjOSeeqa03hHPlLZ3",
	"sgMJxsDkBe85APGecjAQHeIgNDq+gaD3cQMR5McmU/TOajLcO6UZgM73DESTixmEJkcyAAb+YhCavMJA",
	"2HmAQcAKT4OjXxcI9f5bIOhdtQAEOmTJYYmKKjpZyaDekwrCg8sUiAHHKBAOLlAgxPAEETk1wbjbgcaQ",
	"c1SCIeeSBEPe9wjGgo8RCEJHIgAH/kIg2hjUAwIfIBD17j4g4j17YEQL1M/03jog5jxzACB54IBg8LUB",
	"oOBWAyLJe4ZFMz8ZGHIeMTIIubzAut6xRQ7HOd7AUwUGvUsKjAXXExhM/iUyfCuuM6rzGYEh7xzCYkMf",
	"EBaNTh/6387HQy91YSqeXDj00i/ad8rJQ0MvBXcMQPauF3rAeVqIUvCrkETnRSGJa8B0ThKS6Fwi9KLz",
	"gNBL3t9BLzr3BlGKvgx6uWFQiG4KAOJdEiQguB/oAe9sIIrOuUASvCeBXm7Cnkt0FdD/NgsCBO8HIMq9",
	"zX8EnpEP/W9v099LzoS/l5KxfoKCYX4Crvr8D3b3vRju9kU5mNQn0dvP93K0lY+As41PQrCDT4Czek+i",
	"s3FPYrBnBwCWg6V6L3u79F5MFug9BEzNE+YMy5N4TVhfj87i2q63E0+CswpPojcBTzJnbZ8Ub+AdpXDb",
	"rReB3TbEgoV2hF514Lckfa4mc+seiabVPRDNqCPgzKZ7IdhI93K0h45AsH7uRWfsHCVv25wkb8ic5GC0",
	"3ANUpAoRLZJ7OZ6F9AC0Mo6gNypOkrcg7mVvL9yLzjw4Sd4WuJed6S+UNk0SxXorkgBSgAx2ezCZ5gIo",
	"WOH2iDO67aVgYRvl3pq2B5LdbISClWwSOch+ZPyaQGfqakVs1QqRYL8KIW+qipFokQpRb3yKkQzoDUoh",
	"GExHIdSbiEIQmYEiRTT3xKAz7LQQtOLEcrDWRGC0yszA3vQS4dHEEoPOmBJB3mwSQc5CEiHeFhJBp89P",
	"sBwMHDEY7RgR2psrIvTl/C2W7RoGIc7iECHJrhDBrjww4owFERSNAhEYjf8Q+JYq/O7JnG+2NwPWe0nq",
	"7fQS9IS4WIAV3mxvdvTElnuwt7O/sGldQsJRZwLCuWUC4iliQqARXELDeWICoF1bQp0VmxVzc7Ueg2Zp",
	"FvR70k/cGz2Zh/+/f+Ley5mY2b/M5VKwl0m/vv4G/H4IfyMF0nwLBPj7Efj9Hfj9Pfj9A/j9O/D79+D3",
	"H9LvfZCK/YfwN1IgzbdQeAQFkKh9yIIkyAEJ3wcJ3wcJ3wcJ3wcJ75MXb40G+fVRzPzXl0fxVzwnDnI4",
	"Ac6thQDkLYMAEG2AAOQMfpIcjHsQ4L8SDxDpx+eBdQ7EvCEOQKLJDYS8dQ1EvCFNQqLNDEB645iEeUuY",
	"JPc2LwAK5i0JiZYsCQEWKxDsJ7DIEiXJwOIEgIxeQUkKKG4ZkLypCJCjUQiAnAUIkHtTj4R5uw4o+3Ow",
	"3F4DQIy7eQAyxYCyqsR1ktOsE5hUJMkZUAAxmkoAyNlFJPmCrYD2wu+4IRMHKEdbBoh5swWMaJjTyRYB",
	"YM7wAMhiCd+qNyhIUDAeAICzFMCyQg/pr/8DKNz0T4i71w9Fd4cfAO7CPpTd5XwAxGv4CfJ37pPsL9hD",
	"Od6kB5i7Nj/bmz177P7bD+OAHwNi/x872tBvwT7ruRtP4pX22d4s3GK3v4aX1RPqb6ZDOdxBB5CoEMNd",
	"L09yf5E8QWekoVDyV8QhEi6DQ8hd/E5AuORtAT/799e5Z3uzdELhrm3P9mb9dcrZ3sxdzp7tzc7cMHs2",
	"D///7swNs/k9awzN3ZIS35+e7c1e/tX9565K21/uevRsb3Z+YUeGcBHa/gLXnqEYLjgDCF5jBnC4sYwQ",
	"vw+NryJDYEk0jKK/YAywcJcYIuwdg2K4Iwyg/jIwwty9X4ik670Yhe8Qr+0CKF7QBZC/jAuB/tItBN0F",
	"WwiAose3ZhEQrsdCzF2FBYC79wplZuCDwoVWhJiOwoLub6kirCUw1nj5FEL+nilCONlQBKSbowDur4gC",
	"zF8HRUAnIMHf80SAJNeIES9vQkyieviWrCkSW3/QCO5cWknEeh9uVs72Zhevjtz/L2Z7M7hZ4C9LzvZm",
	"fubVX4qMv/0dyCD5O49eSBP/7DpjQvwyoL+v6H/ji4kei/cQg5QWDOmaoRdipvrJIZwYvt2fv7Z/XPfj",
	"Zoh/G/kKv9lsqKyIomX/bf9S0l8Mk7Qefpj/wmtUYRSVxYYodS1krQotikq4JBZEFy0lSheC06KPvWip",
	"1lQWXx7u//Wrg9neTDPd2pSchziKzijdRzIWdtanfiFESwl3yZdtuZF0yd4PE/v64rTwuoIti2O6pJU+",
	"Fu9EwVTBuNKkbWldMF4w/YUqxDUvrpjUhrSFMouaSWoXmFub2I68P6V8pZvZj4+++WaQi7/2iFi8o5W2",
	"CTt367T6kqxsntmp7Y9/n23sECs1o8pKmqzcX6Zp5350jMfHPBwpqgAQKcn25odSpU+6jZB68tkLSXjV",
	"lJqshvl2SVaFkIWnFLohurgmqtBUaVrvFaSQlLnYi45sC7OpiaaFbpgqloy2dZZhD7//Zm/GTduShS1w",
	"LQ1Npe+O35oHl2Q1G3nhhWFtXbKRevjYaoqT498odXlCKtF1TJcNUc0wLUdOWVjlb5sKH2GpqNaM+6pD",
	"6prZZJD2HBbvr5Oxpbrigb/DZPzw3d5tddD2Lu61UcCH39ye/lvq62RNJRtWqorwshJ8yVbGLjF9AiYe",
	"yLimKypdBbqv5f9ytRw99u+38ym/YlLwjnK9W6VoKal3Y9rxh3JdVqLbtFTH5sI6081+/Pbhd7/77veP",
	"fvjud67ReHC/R3+/t8MDXL3uGyJqebe+96eNHja8XFFdUu4yYylkR/Tsx5ktwn3N3Pp75JkujNJE6juE",
	"okr3bznMhNBKUIfy7fff75AFv1lndLnd0OkOqdLsCr4LmI7UW046VpVaiHacwUk3eFmb4FtKT2mib4z3",
	"t5tMCNEewa73xp7azpyzQeX24tibXUum6Svebj3h170ZMbopR6vGNzf0tJf2b7EUspjPnz84PD8pXrip",
	"/OD1bfSUa1a5V+prJ+7z/mfxfw7PvRdJH1Mw7vIzVmewo6i0Jfoggt4ma/7cWWPNn0OznPMTtyzxPLvm",
	"cOrZnn2Xv929Y8RZskvPSt9rSdTwNQ/7SURR0yXjTlBh0GFtWyyonZgr09G6WGwL22txNx+/c4v9yNof",
	"Fxqfp2opP77hiD4qJtscb+jZjGw/rqRMqFY7Vf3dezYh7DSxNpWehznkZFv+5Mr2sSXt0zeen2HmW8Z8",
	"vaWHs4UzmDSOjD+Wt5HC5laYht0xzz+6pG8prBuHoX9OCd2QYtsXHtn1e6VP+FJMLz1bUa1L+p5WJiYe",
	"90cnXGlK6kIsC6K2vCpqWpsN46uCFEvGa/tLNzT+Vn0n5Xi0LmygRgoujGq3BeG1Z3zhnvyFC+v2LwzX",
	"rC3C7I4JfjC6xVDRti256RZUDtN63ghOC6/1WxgLWrg7vn5rwaXTzZJ+LL74+g/x3xcHxetNoUXx8Pui",
	"ZiumVUHaVlzT4ZzZ9n7abRz9OPvfP//89R8f/vHnn+u//2Hv4fe//tvY0LYUsqJl7DJLSRXVw4Q/tSzl",
	"J+suM7QoHNUmmaW9nULwgtP3umjFik3k0IrpxizKiV5rt2n/xmbkv1I2q5ZUa/fOI53GLmNhiiBmGn7n",
	"Jx1hbUHqWlKlCqKUqBjR1FZm3RRbYWThoihIVQnjLi3tuiCdu3D+AYf+AaMT95Hp126lqa+ZzcxPqxI2",
	"8FiXfUsfNNnxoLGg3FDZMWXXD3jefPuqLV9JUZuPaDnkkWx+9F3Kf1S0o22YSaXLqZwb7gypMq1KcC06",
	"poqtONFUFdcN1Y1t6X2bV40wbW3bkpbU1S2iCh/TQfGaK9rSSns+S51yTW13abtjX/EU3M899OkY6yaY",
	"KpXZUBnLdTKhbuaZUtkQ12wLUGKuDQijC/p+07KKadvPKxtBGBw6mKZ5fGphl1FGjaauJXfJcTQjvWHA",
	"HJs1Tjf5sL1eHxQPv/+m6DfkVSFksaTXVB4Up24vXO31/Rmvi39/cPDg6wf7D8pC8HY7tuuCkwh6uv/4",
	"+efrg3//ev9vX490cqMNLU3QstWf0Y2Q7INvXSspzAY3rGFDkpTUKWeGDWthFONUqbKSzC7VWqa3o6u0",
	"Kyq3RcNWzu3aGys8Zyvvdi2iPdDRmpnOu6eyvxzYei+Tp8G3pIsvYC66qODCewl86S3549quf/5sbxb+",
	"+MfM9matuzcRY5ztzbgPu/vCr/Jtc3LDJY9gIlt3WUl+9803Y7W9Zso+oFQtKReSkqopudBsGZbPI2vK",
	"Yx+imJ8eFj5EgUIUbFnE/jgN4atWLEhb9DvcY+2UcpeUpWnbUjK1LklV0Y0mvBppUId2tFeFJReWXCRy",
	"4S4YFWSA2zzesx0L8yNFYfN6rzCbVpCa1sVGCrHcK6iuDm5KYFjJlJqsSsYbKtlEGp84vipCgEKTVQEC",
	"HBSHfGtBZQcM6iZkpCe7iS0xWnTuwkjbbm1v7olauG7zCV+RFe0o12qvuKTK/rG9xtMwfb7pJRSzc+Od",
	"89nTBzm62BZVQ6s146sHhsefBfHoQryfyMj3tpcibUlMzejoc+cbWrHl1tYmW3/Ixo4GvtT86OE2LDZU",
	"2GQJoxWrqWMKuSI8dFbjT4+ri9JPrn78+1S7Ah1aH6ZlfgLyCZ2fn1Te/kz7U3KqXfkoxRbtnfMphSyW",
	"UnSOsjGLllVFjH08j1q2pNW2asf3zirBlZam0sFp4hGQXW8aKnFQn/eSU0qqmXTV1rk76iXQ7cIHzPq9",
	"Ay9IGGD3vrajdonxqQPX2NL6++9HHickWzE+mnu6YbIuNkTqbdGyhQwff7p08LmDTz3s89LIqiGKerdS",
	"UXCqSnBtJxL+k15HvVQc0yvaik2g+aL2johOwu92m5HEhvJCCSMrNw6+suLciV5ttFe6ZLzqJVBoI+9l",
	"yy6meLY3S+mdxertLjSAZ1sJRr57AW9aom0PP5rn13RRKCqvmH+7w3P/xaCaqrUWzpXXsf/pM0zolFdU",
	"26nxZWObv59niAXzLiPP3C8HXnuHt2/dLbyYI+CpMzc42yfYV3f23D4eO5F0ge7wppIuqa6a3adqE6fJ",
	"s3+TdDn7cfY/HlSi2whuR5IHqmpoR9SDY/FOPLMx3NAu0uwRNK+PeZhd3s21Wez0LNsd9JuzH/O00CFd",
	"2ih2faAd8TvCycovcX7zl5R0Zdo0CfuY5130Uez0RDsHHOyqfsxz56eH6Fxpp6drSrp/aAZrWjXczqzK",
	"yu9t/gOe+utUbebGWSOX/hr+5z6NRg1mXJ1V793idIGoJmhQ3aHhndkwO4y2WRu4Ydwehryi3IzNyZW7",
	"8Enz2dIXqghh7IQorcZoxTo3RuU5Apba+25D8Zu9h49+/fKPP/7884EXv/31qz9ObTDudHyRH/zefvKf",
	"taEddrzGGsHtwdzmqKSVkLW6JY/D1q5Y+i2fEMht84S1ISiFsMNxQ83/5vb67oo/3nP8j/ExMa298aJ5",
	"sDrIp/5u+p6GuzAjhE0saxp/m95qOTw/mVeEH+VVAY/puy4Xbjlgc7OQck235cOPOgiDMXz7yTE8+qgY",
	"djv4y8rflVfMnNE47lhEk9vQ9yUwXgIfm/l+9jnI5lWER5bMO7eVqRl0H/lvP2UG1eUTJrG7TSZF+9GT",
	"5Qsb9uOnNpMNIqbplsrjC2Qvb8Yu9G11Z7Kl3lCFPmead0/uGY3Hox/b+U9V6P9atSydHf6TZup3rho3",
	"nnbeME5J78zHBb614nzckPTJSf6I1PrFAk7k2Nnct2OnFVekNTlzwmwDJjNM0XzoG1I3fbHl/rhql9Ol",
	"W65t3Z813Z81/Xc7a7o/w/mcZzhTpy+3dDz3ZzH3ZzG/3VnMv+Tu7f3O6idZWN3vsw4XA3gbdbAtesO8",
	"+zLU7d/82tlnv28V1wPlcJ0FbcdumTffbh+84y7Amm5vTsk/+BLEf++D6rEtBG9J+9lq4F2POsbPLmKi",
	"bmmi/z22Y/+hFwv+ufuyN0wqPmFzNp6C3bbl2VepT9il/Xxv8BGJ/833bP+rVcX/DJu3H1FjPmoHF1Wk",
	"2zdGU326bSv3t3yBj0/7tGnOP2aGdOvM56O2Dsb2kccy4k/23ZngnDBJD7m6HusWiMNpXSojr7wx/bCg",
	"bpuh3joj3bXz6UTNluxTnvRLeOkd6lX+6sMpSUwNiHbHjKb1vM/PiQz3aURvOduhTnmzI0p3W6pFVyL1",
	"eP2j/f7pbtHtWo6Sqo3g9a7r0Om6N9aXBfatJZE2hyfL4ibXGrjxf3SVnjJ7nqy5t9yuunkZNJZfKeJb",
	"syy4fpzKr3RwsLs3lpWL8rOub3fOetOVviYqn/47bIDdVElvmg/cXAPz8gEZCnNq724V/U+gz8vHuX+Z",
	"jlts/NRrxD5/WXjLUFrv+W2kWlDFv9BFQ66oOwpyfao34ex76rHDByHrMVvQy4YWktr+qvCMHfahxnbT",
	"3uvxuGOaCke5bUCfGoXG6sEFuX7K2pF9qmVA+8Iwkt36ZBdo9DHU+/ebV4Tf1I3iV391RaWMp1KeFM8/",
	"06GRFqIdPyn6FE9sxGhR+ox0e5uhaIYPucllm/ejVghZXJJVcorm/dHUB3dzrnZyXAh/kuY4u0VXtULR",
	"UrR1Ge97+oiXxLQ6vn12bOeNqNmyEG2dfFZwUbSCr6gsNpIqynU8l5bUOVRbUV24pzmb7I5ptvLG/w3l",
	"hXe6xvhqwmPFIJX9CbGqRPR0FNK8JK26IdHDuPwOMVXxzLfHQ3Yq0tHCJiq+UXj2QfF4W4TH7hVMF0wV",
	"7uFFR0mw2ybamTDjrJqKN02WCiId6t7uoHgp3G53NCJ3McZEi+Asgkmli8qm3zm+8Dm6b8t+Ik93cI63",
	"WxXyjSC8Xdh+K5dClqRtd69WrhPWNvG+AHvPKD5Cf1jv3nxBi9CD+cqjG2pzSxWdkC6bvLtVF4722T6a",
	"Cc7BSjwdKAUv8Xx1JIAoudClpK63IfpOVc+WU3AvGBwVsBW3aQ5dV19B+r7Ltx03KC1N6/yAacnIiu63",
	"VMVikeqgeGtzZ03ppqDvmfIdYIzNt7q93sVAn/jetUDxVEife4z7/tyOJe6CgUtGLSo1dV+j3gjGdalF",
	"Sep6fHWXMrWkvC7rPtvwTY66OCbaOztL85qD4tjnri3gyn+Wr7BDfvF18eiH74uabNVBEf0MBJ8pxZYS",
	"ud8Jrpv92rmizldBI14X+zTuOiUBQeIc/DZnjiN+MXYZRff8fl25GLl+ddQIoWhhK/3GTwFEdqfFhS04",
	"vU5VYrF15Vo1QtEY8OBnHk70w5zTvZU/1Q9I8ZJ0dIT0dRKDC8NhsOLr4o3XuQjsi5cbot3lMDvDKKwQ",
	"VL4ncd4uvNr3BM4ZHrpqARMx25vdlqqZz3D33GTiELzyjTmT3t21Zpi5lYpeUdnfkwv9wuyEOyfxuOTO",
	"fJAiBilaekVd972I/QStQ6HYCPx9gKVwwCm+MXc2dqvueX737ijsSrnSCb9BfoZUnrprcmfxAt1zf6Gu",
	"5/9t2stZeUejjel2A7fk7hyrCzQdtVGN7a7eMUnGeu9hJ+fmiOO9lp2vAodb7rpb777LXaESHE0qDnbp",
	"jJAb1aELx8pwqtn7wj7cXSWBgCvoiDz64ZsBK2KeyKvG9vtP+IpxmrhDOKNrKjeSKVqci5ZV2+LIDhY4",
	"6CgFRfNMbjcUBnIApBxdnvrgdqpz4UZDwB/R5oHfmJaPBwQaH2izmW+YXaL1uYAQT/rFkKSPgldJUjWc",
	"JS2QPcHUTP80TwQge8LbeXEuxXUL05BhA+KbRzntzaOeNK+E0d+iyACUaLQyrgeKPe1TP4x+eTh/+vQr",
	"HPx26jDa52YxHklU+CAfjKRJ578sXVxQO1OlvA53X/t4dma7yB8TXjPdhwaiV7ekWh+bal0EB6kISJTa",
	"Imlgu2Bq3bNHdFlAmA9D1JMlWdOO8MSDgKeYVSXFde2cuPplsyMO4Ug/cngfIwQChdctlfuuRgJejgay",
	"3MDWnehDPAV4Jsmm+dNpn70ZlogXT+aXiBWBREFP7B9zRORK4DfIIE+zvVBH5Pvi1fzQkSCQUfqIEDJC",
	"KmqqCWv91cQJVQomrnDMQfaEljBZvGhJ6gMyCNAwAyiFqdWmFTAvMswTxYK0+oCJrC6N4VmAPl6EBFJN",
	"3eLBNUi33uHErnA8f0IZgnItiQLJhkCghOlSqCRQDrMcohpNbZjYO/w0f/XSzTL9zGdaPxXBn89Obwof",
	"1SE4rV3B9+8AAU/ZVq3g9PjPiYMQRzom13zuV3g9Lcc8kW4orymPY2xijynyIJeSVOu+Oz8n1ZqsYMf+",
	"9PzpV8WT97FqfFzI8FBNK72vaCWpViCVA9jfjBW2kuwvKK8aq/VZHUNNa/2zRLVuU+cERK+WzymxI7sr",
	"eV/BqbvCPK7xgeavzlOMUXCqJ/WKKljmCPCU+SnjqWID0amfCqnZMr0flB3BHZ2wqjc9AM11QuWDrVTD",
	"aJu6fwR4inN36iZEVJIFa2E+Typj0FOycL3EU/Phgy390KhB+BsYMJIj/60cUNtHFTDI8eH8Eszuhigi",
	"p5rrmlBKCgw7SYJRzUefOx9/7txV7FDN7SJhGHCcESNpKVkrmCkJ8BShaFWEbsFRIBAoV6b11iOYOID9",
	"ypHYxvWK0+KIKKrcIhJDgVaL1tbiY9cY7dra7xr5ABPKEFQuhJyoc5NKH1RIE9/PsYHsCUatt0cnIJ8x",
	"4knbWqapfJL8cvvxmZv92wZsa5NbemeYJ3ad4eyapnkdRsLiXc/ZqtFwBZNjjvjTUylWxZ8lcYNZMTdd",
	"R+S2OLQ9AalSm9qFl0c4EnaM9pq7s6AxOlS5YC9OjtJqphe8iplr0BsC0anXZkF9191TMijsamgqGYgH",
	"AZ7CKimWojKqeEsXjKsNBRk1rfWBxWL+NJF7KSrVEvXpGAmkD6xtSfFqoai8IlrILaCP61zAl1SrDZFr",
	"0NtlUKCZN+6zXcWXbpeBEV7Rrzx7TJMHspPnnO6wQHy/EWAKD2VPYGudpnpJ8sqOpLl4L3iVqMHa7DyY",
	"xSTytNoHPz8r8EweI55kqpam5TYQnfrVhnJVkc1EF3ODug/+5nBeHM3fRHoQvfrisqBXpDXuGKITNW3R",
	"LOImvY9AqRNe0/fFMb0i/sWODv16AcVzO81HZ/RGKP3td+kFEeI/9PH8POW6z82rb51J15giBdl2S8G3",
	"YK0du/hprTcbY5t9gooRI/4JZ8e9Ov72CrGh21Q3gejVb1+6Adfpwm+n+JMh7VYVJ3xp1w3SVNptFNgs",
	"+/ItXTx7fWKn665R7EiF0cbkABGq39IF2WxyFkAd2RsOHrxL0WHEk5hau/0MDhZhvlZMqHwwsxCVSEmA",
	"ciAovS2eixWgQMR/8eXw4uSp++aL/eGhinDNwNIMAYEijC7mhmkKWBjzRNqtJN34OXYaFEdgT3+Reun4",
	"2yv4Nq12esGrhF0vH242qpKUwlnluCYE4kT+ySxoth4ew7MAKXaIjJDQVsGEqg/mjocPgWUsfMyo0gfd",
	"CP3YrFL9QkD4ps9pcUoWgAIBT1Gtikr/M8LbD+CFkxgjjnLxpS3Jr0LsGerJmlTr5+R6Xdj/+igHqCNf",
	"kpYpuDeGAE/xtteJAeRAkJKgUR0jgaS0Ui2gJNkTns7BBDRJXinZ1daOGNKO+Yk1hAEds4DSLJctbUBr",
	"zaCM9miE9wgRlb4mV7R4ahQL/QcIMa7MgvpCPJq/+QqHSrgPcM2UbkW1Lk46sgJlMoK7AG+OnvWk+Nsr",
	"qCSVmzNELQQyirPbPWop2ECbVPqgbgbgFjnhp4Pfkg3TaX4BxKD+YBqv+GD88dpbu8D1nZfs+7QB6KkN",
	"UxsqU+tDQKRo+pzoYk65Zpy2gYbBRPUGyzBChHniJjZo/8uBfyacafYB9JAYcaS/EMmzOVkGOdpfD9MO",
	"SfwNvxkGT6pme7P8TMpCw6MnhI6eKgGGO0JK8sgREVaCYyCrQEc+FohnPPY3ONGxIji/sWJ2UpNBbx4F",
	"ABzAROT2M5WcGc8MLL7zQchsbwbOPawEDzmiPHKMgVTg0ehswsrDIwiPpvMGJ+fnCg4cnh5EGJwTRCge",
	"CkQ50LMNf4vA3X0kDwhoBI6asDVvRbwL3yO9gPfXLTSyi47gnjexJe50YP/byWm3253KT+9lj6vjVrXT",
	"gn1pK6M96NneLN9tttDYljLG77At7AIOdn9ne7Pp3V0bJG3mWml0w9Yq4g7tbG+GtmOtnHZfZ3szuNc6",
	"25tNbKdaDdw7tfLU5qjX3bDxmQh4dzPhYBcTgJPbk4kzHws4scXoCWk/0cpw89DJgz3C2d4s2w50yMR+",
	"n9NNbOhZHdi+syLaqrNAvzU325vlm3AWQhtuFsi21mZ7s102zDBtiMDtr9nerN/vsr/T9tZsb5btZLm7",
	"NGDbysqT21JW2W9DeQFsOTlgfFNptjfL9o8cMrZHhBVuN8hBae/Hiv1ejxXi5o79Pb13Y7Von8YCaVtm",
	"tje7YdclaMMmi5Vu2EKx6tt3RiwL7YLM9majWx0RH93KmO3N8LaFZYeNCvsz7UtYKexEzPZmO24uJGaI",
	"YrhnMNub4f0BC4xvAVgNWPA7ES7uZ3szt6K3f+Hy3cl4oW6h4Xrcoi/66tkvue3v0WW1UwwXzwge8PKR",
	"eHKxa3VwZeu+QguWsVb2K1f/Ky5BPS9bkFpwsPCc7c3QKtPKYE3pRLh+dEBaLVqxXx1aYbgI7NFeQOs7",
	"hDwC0PhSDenSgszCI8uu2d4sLrTsT7iqQnK2bLI6v1Ka7c3AwshJH0xj/+bLHovBNY6X8WImYmDZYqFN",
	"KEC8LJntzbIVyGxv1q85/jbtB3jEA1t0keQcjxWKtsv9KgzLdbFhtKKFWBZLwytvQ2Q7h+BihkQfYQfF",
	"pfuunEp3cUnrvxtfXDesanqvaowX6OK58yhXtcL51BOZXYW74q5ojJ4sl7TSyl3fvW5EC60GHkTHdrWb",
	"JbjYuP+wIn6eNysYvXnocr60pR48/bj7zUaysY+7hXJqGV8XWgT3WYUNDG85+ivN+WeOx78IrjSrvMlP",
	"275azn78j5uN4YLRUAr5699ySzDg9yi7fitqO+fr78s7L4HO4qGh7abw5EX4/L+zoyi+fNKT7ZzahYiX",
	"Pe28/FoyrSm3re0u3uvVhKNS9535XS+/+o/Sxw9cjn1avrefu8GIKtLuYkYFvlqPYw73vfGHtxXVtlb2",
	"2W57y8Ibgh0Up9R2W7Tb6K2tUK0XI9V5MrWtZ9OSaqz+5vbX8dON+HI/uq48vGoMr9+iWpkKBGTnbcZs",
	"O3x1/7+bTdstXsc+zcLtlsjv7d3u7d3uZu92W4W6t367t377r2T91ruTuLneZ4Ztt7AHZm4Lxr1v1ntL",
	"t3tLt39FS7cdm8moSdptYe4N1O4N1O4N1O4N1O4N1O4N1O4N1O4N1O4N1O4N1O4N1O4N1O4N1O4N1O4N",
	"1O4N1O4N1O4N1O4N1O4N1O4N1O4N1O4N1O4N1O4N1O4N1O4N1O4N1O4N1O4N1O4N1O4N1O4N1O4N1O4N",
	"1O4N1O4N1O4N1O4N1O4N1P6FDdRuuSr5jzNXu+1T+f9ME7M7f8b/RoOz3obslmj/a1qU3eXDqL19GTQY",
	"u8UybGVaMv4pPVJJwbfdaONv7Nhpm7qkwdrIt5NgWcNJ5xMPPwE5ZqxCNF0JuR3/iJwyLp0xUtmnNd6X",
	"30h2RaqtO9DwP+MtdjttC/fX7U8H09r41uxvmwTBqTpax8vZZ/5nuGovN0ISHa5hBcGphG7CeZP9ATZs",
	"Qpr8HXf7bKuLD3Nffa/D3e8+9tnezEU32gVnX+XMrHSAfQhZ2NkIzqgvVLEx0s5SR41rdzXlfGckUzWr",
	"xhNhi0rbBuam1rZPCL03Tks0mMrqxQ/fjSQsXkwfPshqRioEjvPht7/fG/uO6JJKykeHM9taNZV2/Hl9",
	"ceqMXnIDnIMb++SxL5wOWqdvT6Dahw8eovzdm/6+cWqtN1hxfu5Ge5u92X0T/mc24d+6ad5S+p+jod7y",
	"iP+UzXb3Fmtn8s/Cd25Hvi8cDPZ29zDwJIYY9SwQ48OfVN4tvtu+tJx/PHvX9PZhxlP8nlbGTltK5feY",
	"7hB1DBp2p9wDsL3Yr8nUjAtNd8+WsJN5KV66YL9Ofqe8zxxoWnuXR+yS8Y3wff2tn9QG397fLQ/DUmy8",
	"bKCx2J2jvLSBRqP1y9vSNtKdXirwd/6uuKakuwtb3SG/7Fx+wqlHv0y57YlG+U8y7/bE14rKuTaL8afa",
	"uIJvglu+JN93NbCXQG16rDGCeh2qYapkWQXBBYuLDRZKyPKYYyE/0qvc3o++2tw4B2K8ak1Ny9Gu5Xbj",
	"xRg8dhysIyuqPi5s3+nsHlTbTqYUS+/xInTltwX/dSzPmFofVhXdaBJGz3yqaHW0HrVttkP4hkoV17ae",
	"7HdRJFPrvaIi3O0BGK3s0losi2O6pJU+Fu/EwcgoO9F/pmbRp2e0Jx3ZHMg6yU/+9HtNKxaX+TuTS7/r",
	"qka/4k6cpSvlylv32xKVovXLfefuIrrhCC4kwhaULKSdb8ac1g3lRcuUnxqOxfil+spm+a1ZnL6+P2Gd",
	"+zZ4cHBPDoVua0/hQlK1BxOaNoKSA4a6+NJw5w2hZsqmpS4WtBXXXw3MeGOx3DXRZUN43Y5t83xpC03w",
	"dvtVcfN7+EnvNVFFiKv4siPcOJN9IaOJfk1Yuy3eicVnTPs1kfyWpDuvC0SHiToXmlUUrgxufiG7qvv4",
	"5O66ITA+7T+O0lWY/odN3OAgxbjjnI5sC9Iq0Zt7axHcJGRvZtvHitpFVWGn4EqBfVvlNoDD6KNwZ/No",
	"dMwdzv6Gb3XbLExccz9w49e2A7R9ydT9FeI6uJ9hCrzRQWFjd5nhonIvoTRZLm1OSOW6VFqz0YIGqz/4",
	"hVmim526q9RCS9+U67EN6cjJNtMnOoM/9mP4eFi3Bxpr5+i+qkR3bnZ8ERhkuvd98n7TEt5vcPQ3IrJH",
	"jjSK8Eb9mSa+GFQchyeOpk1pInWpWjKdy65r8gdite9O56eHbunaZxxTRYgKONWZKoUDVAoulIvx9tw3",
	"m/pTBszBOjkfvtOQDMbWsOUVZoK+WcamFerzoF6kpP7t1nnOuRRiOZzsxIZy83fNs1dygUYfKdqRCdWu",
	"vSdTZd+VDEtlbOHy/fe3JTVl6lh656eHR7n7NZz2KvoYGdRXbroFlbYN1WSrvHOrjtbMDVNFDBcrb5j5",
	"sc50sx+/ffjd7777/aMfvvtd76Vl9uN+j/4+Vdzo4qS/BGVr8DHZqtFeL9tQAzn1/cNvdxjmGrZq7vqi",
	"NswnvuRzG8VOL7hrTWrF9V3foxXXn/gap+J6t7fovB+bOybQh/rENHoXOrslc3wyc1gYzn4xYSbjXH01",
	"4WhvaeNTo2cOsTobpUXnHvsyLHk/Y+udXPjeN+L/TI34vnH+52qc2TnDRzbV6VYafInNNdFGzZHz4Olm",
	"etPO3yAmUOvvGi5utt41XKjEdw2WatddQ2qhPyZnslKqkou1xjtRC5uSrfOw1kUPa/5po8UpOJG/mAU9",
	"Ucp8wmRvTUd219LFPWZjLywpW8ROOKQ26vbYAu/26xfjDtPy6MLm7s2RjQ1o/q361LgQt2f15Oj28Tl5",
	"26WtT8zXna47fVwu3+X2z8dl96UkXLGpRcEn7qjGbfCUw7BTHt2o2bVdqfgWJYsN9CbSaAq+H20UfYbs",
	"kuBBvxMXvNmrh2VvnuqRJOIU3KUAJ1vO7cVw67XGz5PZt7WUm7P+Lo1hkP2fJ+dvHduTF/WRGW+4UDqh",
	"dkc75WZcyVTZu+weZwijS7FM/rhH9jeZWpdxm2biTCWOvkMVvF55y1Fjfw8xvXF6vexdsoTnqYxJuuUe",
	"41ybRTxPH5RJPOq41YtotiT5bNvl/iTUb/js0LMBP7Z3PkSLp9k7fJ9h5Lz64Tff7Da092+UHebeUjZH",
	"rnu8L6GJxvdPK5HJkeM3K5h/eBbeZfC4Swb+q2Xd58mg6ZzZKk27ub9aPzY+1nV5BU3ZSlZH39JlSxbU",
	"jz5hcX5Y1wViFyfu6xWk+Onk4rDw/NGvjrStuC4JF3zbCaNKZeQV3ZaSbpTgatTfvbNQInwrOHWWKgXp",
	"DTPc5oKLwbl45+qayoIECBy/HNqnFofxqcXch7mgamOfqsa/AyFpTblmpM0nPY++GZ0hh7sg/tMOwzd5",
	"Sa/DcWI8nSdKsRX3R63uSNKFvOHCANqlAw8raUdYW26I1lTyWx8dPw+Bn0/jJzt8Mvb6Ay4mCxd/Qepa",
	"UqWKjuiqocqnWdIVfV+ERyfLod5sqBK8ZiNXTL+9PQ9LGY5z7paRNsHoVXy18akVLd01g1uqadnPlNTY",
	"uaxrearg9L2OZis/FmHnrQA7dn0kft9OEzbx8ZFwOcM3u2u6aIRYl96ifGS3zVZrVTBeiY7xVSF9l6f6",
	"T1iQwgctvqyZqoSRZEXroqUrUtkK0JArJoz8CrSUY//84pouCvvsEMFUWquWsG7s7P3EX5rymV75rbzE",
	"j67kudBsGUy5/NWBVbhJVgdbu+Edgm8GW4THKR1jNz1c01hK0e10B9AfAJfORrYVI58tetvXpWinpI3k",
	"zj3+XuEuGXSEOYM7Zz7njW1b4czhqobwFbUNyGaNKGz3Yjvg4stooL/nPfTsgU97qL3iXIrK2B8HBwdf",
	"nSyLrTCFNLxYsFX8UoqFOrItrgl3X4cJFcmndEErYpS/zHRNtkX9jvCV2I8vGT8Y0m6LayHX/jKRpF/Y",
	"/tw+YkOlGyx5RYuG6YPiidrQirlrObWxOVd8Ken+Vz4p6OA7dt8xF1ZTn5gJ+e6MzTsi11MjgSoeR4oq",
	"lKkaO+zY93r19nB+XhzO38yLL5Fxbbwu8MatUyKqCa+JrL8apjXFf1NCK9JSG8NdKshy6e8VHIWwff/V",
	"X8kKV3KMv7miqVzi75eNpKOh1bplSqu7piSF/CzpwKPlnRKSgn6OlCAD0Y9pvykCqtD3YSrRbYir7v1F",
	"3b2iuqbeNFbtuR7M1SZ1UJwsC30tUnjVEEkL4uwhLK8hVzR97ero7ZNCSB+470ZsFbcMd21P0opy3d9F",
	"dJOtPp0H/mIdto1lKl1nIf6eoh2L0tvV6GYLqes0FQBf3Lpi9Bo26eMUQQGulEyWR//to45qUhNNSt9P",
	"3LWaxHiKGE/s+j5DncFf5fqYNh0PzZ6Bz3CBNO30dNWS6W4PnMp9ofzRGusoOgcc6XhRqJvSsHL+X+Ac",
	"P8Tw7OTy+evHLh9XN9xZCtHET9FkkbhVwR2isFOf0s4/hvlx3lKiqJ060B+LE/e9K6Wl4KsW3CHzFdkO",
	"ef0UyN12dS3vgW1pJ+fFdcM07a/vuiQqKq+oLIyzXyfFRor3236Uebli/P2NBemmGmhSM36VKNKVpqRT",
	"IyFw7jknK0osdXFp+XjadFN6HHHrrr1NfUUyVq+Xjhrm/HnFKkhVCekqkhZZTbTTC0lJ1fjPisWPtD0F",
	"XwnKXic8ygd/7MKOhbzTi5XTRua/0RvuJYP1j37XkTh2fGv63h+9MtKWC1KtxXJ5w9q5APQi0G2rIZqu",
	"ti4989PD8JK4du0V9GB1UDzcK77dK77bK36/V1BdHXjTzGumaMF0QVoqtSroFZXbwn9ILp//fUISDnbM",
	"EtdvCLc/+JtXgd6flrfBkN5XhO91fF+nlLGzgJfgTWws/RiFYuFCj0ewW4Vy63kUIY7spgyMlkIrSeqx",
	"q+NMbVqytZMNxyhaahf6fsWrhe8jnacOLQrViGt/i/qKSru+ayhpdTPSLIIpWvFMkvqWFUFvykRWJeMN",
	"law3mxkv5D5BZFWAAMWqFQu3ZHHtr237a+oHxSHfegcafg5kV6d9NG4kx18PXNA0WbIRobVaWL/ZgWaX",
	"Nt2/niTV2k4ClqylHzUD6d87xFS4mD7H7MjtKjDBOWHy7mnDoT9HelRLqvUdxllNu01LtB2fddVM1xxf",
	"Q/oewRlg186Zji1NFzh4orHTdYu5zy8eFN6c+70GdjfOT4hv5uFMjdkFBus2pNIubG8/rXyFi3e3itfp",
	"K6YbKa5YHQyKFFPafT4YxjFIqqQrImu3ZIif0/Wu7kaa4QUIfuiC35Ttzg5wI4X7XiStmfYbaOOmSnFN",
	"NWJBwdx7+Xo+SJKrBkHtsuBaMj3dRfRfI/WfpG7F2B7ykYXdbgz8kPDS9mOP/G26L8N+4VfFhihd1Ib6",
	"7x962z+b/63F/W33kYxMPUBxaLTYd0/cPcmlTcSd0u3KdUMrP3nI7gbu+A53uSE4dSguFHPTr4YpPeps",
	"4ssnfz5/cnFy9uTl5eHpV9AWZ6RjtUteZHHnVrn+09HxUQVbuhz5xaR7scWXaOxmWvllLi1IuxKS6ab7",
	"qmiIKhaU8mIj6RUTRoUH0nr0MeHz0W513n/X+vDy8snLy5NXL38sDlvdCLNqws45coIVH9r7ydKiqKmm",
	"smPcv0Cf8vCF4wW9IS17vnNdUuIstVzG2SnDtZBrG9vUsr9QzA58TBe1oIp/oYuOrGmhKFc0ro8WIgzQ",
	"Q7vXXZ3Q9CdEI1U4zWX8oZAq1IZUNg0bv8/7MQap7onjX5fNPjA69nXX8e/Ajn4tNvuiLPziLHBLAj4b",
	"Gz4M238o1n83NvBne/bN/rbrC962+x/8oHJKaz+KRk8b/XmAy/y3PpqhB5Ep+yoYysY5tqneimsqK6Jo",
	"WTVEkkpTWaZzyMlzEt+5E6WuhazdWUjwTVcQXdh1vXafJO9jj7PNL8n+h69gt3se4ig6o3QfyVjY0ao9",
	"XKeXejeXBx15X9qORd1mP+YauWJ81caLhH794Hf0bjoi8rM50dZUgb0tdxpVHxTH/d5b3w0ktV/ZtHSp",
	"vSOzg+IweC4Ty+IbH0LSTlxRN29Nz7zjcDBVdc7I+5TAievt/illrAVlG/L75kpjVxdUg7rjJjjuI/Yx",
	"L31EnzywxX7lUxO4chc4ZEhj+K7150pj2Dgysh33ELA0rfe8E6aAfZdwPdYbfDdhmcvLSnSd4CkvPqqN",
	"hzq6IdJtQMeNaB93ok637xCBDzDaoH07+k06o5qtmC6+/Gb/Dzv2QC7AaCoHa21QBr+/yW2MD1GO7A6f",
	"U1lRrsnKTvOF9FNmwosvDr8ofjbffPOI/q+PswV55lb7h+PGzShVi11TVXzx+LMk6vEOiap2T9TRZ0nU",
	"0Q6JqndP1PFnSdTxDola3qFSPQ2pqj4pVU9n4zf9tBRhM/cjFxdPz4vnnhoWF61yty1ivGHC/8Bwt9Cw",
	"Q2Dv4BOtJ1TclICz/7GZuQquA9yxuR3z3VGQo5zHhURMUpy+M+UTFqYK45NvcNmW8IqWSyG7Ml6OGV8t",
	"HocrL864fFtsqGTCb0DkBuo2sk8d8W+6xOxSHHZmF3QpZPBtMHEiG7Y0/+wXrz7ApFF97qc1bCN9pgnM",
	"xbQTj4aSWhVm41I5WoP9tlTVEM7pyLj8KtyIOihehim7v8gRb2woyuu4BTXYAL/VPMM/XIs1HXM3aOEi",
	"jolhkaCpHSvdpIDpppjbCA6KZ9QPe0QXjdYb9eODB2TDDlz0B5XoHrhHqN2TZIfZcWPBlCFvbWvVdm3q",
	"XDwvhA5uCuMpw25Z4C+l/CazgBB30cddfPnlV//xt7//+v/+/PP/+f/+r3//H//2f/9v2zV++8P/LPe/",
	"/l//z49f/Dzb832l78cPHvxxx/nD4FGjHcSUL7XxrNGso+UHwenoKvlwKVlFHhwuWP3Of/AII27xG6Gq",
	"kgRSrIwIdc1UebggC0RLKCK3KxY+WIURRFIdwc90QEahOYViymPSkbUAFA9gCl8ZhigWyCjvTIsp70yL",
	"KEwpYiDFAYjSEq63kkJSgBBNkg8fyBVrW8RMKCKbd6ZbGJQLPQaJR4RJmA9OxgTbpRJeEcSKIKJSoxHL",
	"yoggOFnLLaR4BJKOyZpIQHEyJsiSqnJOWkI6RAQ4CvCOLYTRsCwjhGjCkBam3wOQ8qQtDwkzsFVECNKe",
	"Skq1uIa0CEHaM7IQUnBYnBGCtOdEElQ7PAApPwk3zqiFkStAhDCiG9QcrQjVL0i3wTkREERqiNTCwAKI",
	"EKKxFWlhznsAU7hqiELPCxCknZKVgH2DkxGBLSTN20cCEVV0iCQ6rDaE1zA9HsCUhekWRDUM0SKIqYqs",
	"cWwWgJQz0pIFbIYewJSN0ZhiAUxRVBpEsQCi2D4X1biAIJJYkZqpBkUVMUzkUlwxgngegrSXtk9ZwIwK",
	"CCLV70hHOYwrQojGSEdhD+IBRBGGrKtGaA1pPQiprwxZkVqYlYDvClBIPhdSi/2X4gqWQgIhdU5EeYnr",
	"WIQg7ZJ1C7PW8NkRQjTJNgI1ooAgkuEMNg8nQ8JbxutG0DXgRMjTOhoGZ+I5QMYE95FBsqKIFcGMujKs",
	"DV1JhmVEzVYm4zkI0yRZGcI4JkYwo67c11fsuEe5UOWhneHhcGOMiUiOiCYdkRUZj6FXTwUXnagv2BWp",
	"SWwvt3AmI5K1WEzG4JQTQX8y78x2PKBTTQQ7JeUFE+8mHhm1E4HPKK/Fh4mwQTkR9IKJ8hlpWxq7/RsZ",
	"E5HMSasnnu5Uk8F4+ZMJs99J7Q2BTw1T04GtdiLwpalMN/XgoJwI+lo1hkxVrqDMgpq8Jpm89ijDq+DJ",
	"P8cwUbO1WGcJD1hGXONn6jV+5GPS4JdwwJBSPia8ppKoAbfXZIHkgtQio3sME2lLO8SyQE5hH2jGYR9w",
	"52cn8dX+nCxanH8QxwEEKd8whStsD2bUlch5FslITOFEWgBTJvrGyR7xiHQLyeoVLR8T1JkgRR5kI8pn",
	"0hZKFqLHswC8MhxTLZKRJKlw4Qcoo4302+O99RHZUs6zJDoop2UN1COY1LCKrARieSinNYY0eODrQUxl",
	"pia17Xck/YDoUIGDCEna0n2j0kgUBCryIPnwMjaoHAmlbcefZWuPYrKkSuMmECBMM4xkT3ZIRrJFjPPV",
	"Q4h2TNymrmrIFXouxLMA10pkVIuMkMojSel6SPU4DkD5FUU575GMpKVgGrMchGmiYzzL8Igh4pO6EzzL",
	"74hhIpOG0w2q8BHDxNYuqq9ILdC7ABjTuaKc1CilEUPEp0Lq8iVts5wH8JD+lmxxE03ogExaiqcePYio",
	"z1pSDbqzHsRUUeuGLBDRQxlNqGGMEcRU2/2Vl0aiGpXQjDzI2ABhmiE1bYXBRZvQnKxpR/AcvQdz6pb8",
	"YlibUT2YUbeEZ1FaBJGek5YtyXvIClBGu8ri8ggmUdkJxdoW9Q0JReQTXjPC+792KYUGkjH9aAQvuHg/",
	"FtDiowHOiKQcjwuZajTYOdVUpt2dSe1o4EvatuUR09uxsL1yNOgbekVGgznFeBDGKztmjmZorxwN+pZx",
	"0pFqLGBQjQWbKr2xUjNXbI2pFsGkX0hrcHccIET7iXQk640DhGn5mmu40vrJcBp2iBGCSC8o16Zabx+c",
	"CsNU2uSaVo8HPxNcs4pmzWREjYNz8b48eYmCeAjTpDNlZe9QHicUkU9JeU7QRMYjmMQ6lMVWxgQ7SeUr",
	"2uL6BuCMPpZ7E5l2Kq6pLM+lrbNZ7ECBgpyRijKUtR7JSJxkex0BGtCMylkmf6BkK6Exy0E5TTPnizNj",
	"BjQja9IJKbJnBzCjfiC6xbPhiGHicB9gbPV/Rrmd0lCaET2YUSWrswgtkpF0S9Y2OZgY0Yz8nlVi0FMC",
	"GNNtxmVLu4hhouBVNh8LUE7TVEq6zYgeHFKvWE3FgOvQAVlS0uZUiw2IikpJdE71KCK/JP25FkIwiV6X",
	"fxF4ahMxTGQbtsJZFCBMi1uqQM4IUvCGYI6DcppuymOyFtqu3E1LmixIrp4OfkRtCU0G9+rp4DY75iTb",
	"cBhn4EiMwdlqDM7SV+8YJyuUFQFCtHNiB1bI8khOWnEmteGrjBnhjC7t8potBGZHFJMbQTlDs6gAYZqQ",
	"ep+Yfd/rIjbSDAKVYlnON4TxPEyvGAQR5WElB8/w6Aj5DW0bMWQ7GNMNtYoLVmF6gjM616Q8tBN8hfkJ",
	"RwEuCOPb8oJla04AZ3S+Zrw84S3VmJ9wHIBWbInyxSMZaZXtz3skIynRGp3F5TFMZKJ8LAnHOZZQTBaK",
	"SDz8BgjR5sTm34kiC4o6RYgPA0jcRCM2ILJs2ydiA6Io3fJ9yO4VWRBRnhPTZvQAYmolJFWLrTK8RmyA",
	"4wAN20hRoQ4lYpjIst1bB2CKLh8TqRva0g4NZUiRB/lJNFxlbIflxBdM65zosJx4aiq8jRyxnHjZiI7k",
	"UXowp/rli864AcXka7bU5ZH3pIP4UIGCXNKVqdiKtBuUbABjemPwLNYBOYXXVOYbEQDGdPbOZAvtAGGa",
	"HVA1qoYBymla4HlXgBDtjW3FJuuxehBTmVzhbtwjiPS2YZo2QuKN74RiMuOcbSga1CKGiH8ha6PxvChA",
	"mGZXTtdrnvWSAPZ023VUOlykCRO+DMuJx+QqrHIzbEA0neD6+LVMy5wpZR70jFS/GCJZHqrHhwH6XdMc",
	"HFCrMyNrkXM9mpPPSduFGpGDOfXC3QokGTegOXkujG7KczHIl6QYBNmK6zx2h+XESynaNiM6LCe+EUqL",
	"dcb0oKc66MGp4KstJXKxpT6Hh7CnK0YeHNaBFAWgajsSFjRJBOouHmb0ElByUm9l0joRqH/RYQnQS0gp",
	"FhRqxYICtWpWZBGaFAQQZd2QBakhxyOApLcSJsKJSf2YrJoaxBBkSGhknBwCGRLWBmjXKHK+WoeiBDIk",
	"SE7CBUEgAwJl0qQ88CJQM9WsKXiAlwFBGk5Z0jsxqY9IWxkdzgkhACgNg3orQaVgC9IqUEMShGh89QsL",
	"iwOEQJLhqzUmBQSQRCu6sGwAciIck6pKyXUSVHZEVWHPBAKA0sSrWL0ElKxNeWkFoDILAnRWgkrVEA4q",
	"ewQS5SnpyMookNU9kkjPyIekt0JSPSdyAWqpF4GaLqQAaicCtSiPGlaeMd4kTsIgka/KFwIUUo9A0lUN",
	"9FegNZ3ItdEqVdggA4LShC9Ak4hAovxE1kSCjAoyJGzJJl5thQCgUGlUv6pGSCK9IDAhToLKrmqIBpWl",
	"RyBJkqphgOJkSLC9mgQEJ0OCbjrCawMoAUGkASenNITX2xVIbQAARbRrAvI1yIAgieJiSyQoQIABoiEt",
	"KU9NtzHg1QAIqc5LBmA5GRKuCdNAb8WkPutPe3sJKw1SGqhckRp0XEGGhDVRChROBCCFs5YAghWB2qgK",
	"jGBeTOqXrBKKpeBBBgRxJdbmA6ewyUAQUxVbMJkxA5aIrzrAsAJQSZKquxWS6rzhoivPKegfEgRowq5l",
	"OUlP6BFA2topCgGF3iOJ9CeiQc47CSiF7RRImrREAFC2H7atkHXK3R5JpAvCVwJ0i0EGBLYldXplLyb1",
	"nPSbkkmE6nVDWgYJHoCUjsg14TXgBASQqAD9kJOAsiF81YCxJwKAwviKbIRM40+PAJKkNadr0W5hBUFo",
	"Il8StgHTCi9CtZ2GcA0IHgCUBWuZAlF4GRBoI0Hr9CJUt+XhFbsCBA8ASsO6RWr+XsTqTYP1mwYSxHqb",
	"uhYnQSXMJicl5et3hq/Kc8JrWMsRCsgtIXxBUH0HGCLy8jHRAvECBGjSdL+kjPUiUCu9/5KCwTECifKG",
	"OcdrPNWXHgGkltTsKi1VMiwR3ToY5FWQIYHDVuRFoKZroqlkvD/dHqCQLOkVqDZB9gTdEm6XSIcfRLzN",
	"hiFMe0xlZ0IHkmGYeEQ4CUYrGMppG1q+oTJcchvCmP6UUCkw1UM5bcgakH4ivDwjcaE4QDH5jNSUSfze",
	"AcPEC7pdvyPxxHyAYrJfQT+jQq4YjhtpskC6fE7beOl/gOZkwlu6zagO80SjtCStXQQeXToWBHJKTVvC",
	"QlEN0Iz8WDLVW00M0AFZrCkvn7OwGzCmyIIc2bWCDEUyQHOykXGHJsMy4jGR12FwyrCM+MRUbfZsB2W0",
	"52JBpMY8j2XE0+cnmHX6/CSnMF7TuPEwQHOykHX5XFxnL93DGf2MtgthZF5cPZzRX87fYuLL+ducIqRu",
	"MpKFMto5HdAclNH+ZCjlqo2TghE8C+AaEOY6KKdtax6aR4ZlxEuiOsJZVuQRzchvWKWFzMkRzchvqcoq",
	"iEUy0l8Ir8Q14zyLM+EuwGNJPrD2QTyJAyJUH1Nw5JtjkPiE+KQBEapjyoHo1EdPXFdy9MR3IEfzyx+O",
	"jj3kf3qYcFKTB7FbcmoMQdoR5TpMxTECSTaBVHJACggknQnjLIUBK0KQ9pJeL4XhdaxzIzCkn5OKLdFb",
	"BASS5kSt3Yc/rgl8PIQh/S9mLSDPyZ7QsJY+OLLrCP7/s/fm3W3cyr7oV8HjPW8lORFleciw89Zd9yq2",
	"k3jHg5Zkb9+zd3IYiA2SsJoN7h4kM3l+n/0tVGGoajbJlsSmZIn+Q2b98AMajRnVqILKSlcudZBQsRxe",
	"hB60iCLZ2TY89SYNz7Eqn7uqfH6C4kkQv3n+zEP2J8Lj+QwaBvxASGOLtP8jUA4f/PwKo+JPCn99QAK+",
	"PmBBD2nQQx7Eoj2sxeMRazEfscBHLJCF8aDHNOgxC3pCg56woG9o0Dcs6Fsa9C0L+o4GfceCvqdB37Og",
	"v9Ggv9GgPi2tPiusPi2r/kMexKI9rMXjEWsxH7HARzzwMQt8zAOfsEBWmn2WKk+UpcmTZCnyBGn19Fn1",
	"9Gn19Fn19Gn19Fn19Gn19Fn19Gn19Fn10GImhZwrlV3o4SSEeiBQ3j0N3erd09it3r19GuC3TyOc6XOV",
	"FziEMCBQ/lmllQ+1vzGgys1MPTic2iEkQZvyOsaIWWLcco0jjGTntbMJjo51jBHLicJv3wyglB9VOnLz",
	"F0dqJPDhw1kAcVrudBYMYJRclrpI5Tl9xQhyalUUKi0YESFGq4YTmSv+Ch7jxETO6jyEOK3Q2Vix13AQ",
	"pT2d6EJnqCOsQYxmZiqbSJ5eBCn1WXXKSw8BSvlZn+Yyddv9OsaIlcoz9/m3BlHaLyotdHamCc1DlPai",
	"SNXAjAavWIsjKCdHNXwNorS/q5znDwFK+VWmOtOZbWaER1BG1uqcsrQ658G54eG54YS5ZuFzzYJf6uLU",
	"0LdHgFE+VKfpB3fKoY4xoskSnhYAjFJ9VFO7pxhTWgAp9ZVMck0LCAFOcZaqVOaEXKuJnGaM5DBG1Bnq",
	"Y6jMCCaTeKCKAZxSDNHdKQMohai3OUJJb4qUPsiKNPhI5pqOHSAzgknGJncH7esYI+ZyXNGxDwFKOdZj",
	"mowVWbA7XEpEGgyKWxofAU7JBrZGMsNoHuTUXH5Q55yIUJ1Wsj7hEEbS05HKzczQ7hxBRj0zsw/0LRFg",
	"FDNilQoyI5RmeDYxKZ0mA0aJb2Wa6ow2V4cwks6dZoUBdUrB385DlPYuncvMnLOmHzBG/HMyNrmh3dFD",
	"lPYPmVR/Eg7InFDqIRttHcJIWmVstEGAU9JMVwXjAMJIJh2b2igbMEp8L/NC0p6LAKX8U45zdUooCHDK",
	"zOTmz8lcMZoHGbXK/RqOAkD5+UeL//yjE/p+7+R+IoxbJ79tClumuF0KC/y4uPeLyrCgZItJvpD8BXd6",
	"v7id3i8mG5+5T9z+Nzp0Hiq/p3Q/nZ/nRMvswWFWykxmMtfnzu3zAkzpTyfeXQ0DOCXXRenOHtYxRjRD",
	"npSVOWFqcsMYFqCUX1U+rlSKS5w6Romv5EQRjhV5cJroc1UwCkKcVuW6dK26jnHi3JQlfyIglHSsqsw5",
	"IeAIktyHpBf+C9KLIpd4tBd/AUgMtqih1t/lDGPDD4B+vZAfZKpwmRcEdAGuT+eQBPxAV+GoVnjl1Aqv",
	"sLG9Ognid6+eecj+dP7FP+qhefCj/CBfmxxfv47ViSf4sZ0jlPQz3JaZEpJDgPT6nzbg9T+d0H/6y+Fb",
	"ROAnwvJcfoB2hL8APDqGzdbRMW60jk7efn+Eb+R+IowqogeHM5w9qMwJ1fDMd7M6xog/mmosdRaOMTbh",
	"LMLTiSwnuHurQTWaM51gAKOgMolyEOGkkSxZxgDglCxR+WmFH48WQEb9SZ5Jgw7laxCn6Q+acfQHzQlV",
	"JkfO11kdY8SfZSpnfoxaAGvU6anm5eEgTqtkItOhzLANNsB1+rTG4xX1i8lM6vbrdYwR4aC4s7CqY4z4",
	"q8xqNEQ4SdtRaip5GUaUk40dYRgREE6iA8oCyKiv5IcqZ60AkRop/3elCllwngM5VScXkjU/RBjptaxy",
	"VsoAcIqu2FtamRNMPjIp61cOqtGqqZKcZRFGOpJjMzhydhQLYI2ayorTUsmzfqTLodQ5K3yPcaKZZO7Y",
	"Qw2q0TI5U5xlkRopLwev0NyCUyPOIhzL3JQmG7OyCSCjnkjt5iyO1EhTIzlnang6b+VE80aOSI2UywvJ",
	"SRbhJJvHUs5YTQSQU3M++FqZEd7LM1a4Vq4RUmfwzRFG+i85o4z/kjMMNmHqMXHCMXlZjd2g5X5DwPEb",
	"mPmO3zx14q8o/goiO3bDT9y8rfIz1JvgLwCdLtPrMd+dPDhMZYEHDIMQg1RVaqxlIobgXP9pshAVJR9I",
	"vi9FyQfaiazvLOQdg0KU5j4/RckH/iIvpNYuDAUf5JLpn5Qyx3pcAD31lR5O9Di8ohdDMPm2RUQfTD5S",
	"RckHhsbvf2MAao29xphpi7mm+H3/5J1F7f8I4CLvvVvkeS2y/Z9c/cL95Pb2etQrLhGj91sCoqdbAoBb",
	"WyYrKqPDWipn40oz+UOVEhn8zhLZuZglSHQlS0DvNDZC4CKWit4XLMFUVVIRvbxGAHy6UpF4biWwc9JK",
	"EPDIGmXvfDUi3s9qRLxL1Yig/9QoUzepBK1o/TgPqARwzk4JAp5NqYxOTCMCLkuJGHyTEsxMqQR+R6ns",
	"HYxSrJBnhIOuQ6k8q0omFyonDcE5ACWAd/VJIfTqGRHnwZMAzlknQcAzJ5GDC86IEVebEYw+NSPm3WdG",
	"xHvKJAh6xSRAlWlS3t7dpUWIc0sqei+WDEN/lQwC15QU8T4oGdbkX7KREBySNYcyx5BLKOCkqzEMXI40",
	"hnjnjY2Bzj9DYxj1vNhIAOeKS0LQeeLSwJeVbk7TeT9sDHPuDVlYxcvDeS2kkPNPyKAzGgncCdbl4F6Q",
	"BaAjQQqpVE25rP+kDYv6AaSwd/jHsLGpAbpgaTW3MOaUj+PB9R6Ds2GVMQA86jFksaU6L3kc4TXlnN9x",
	"BL3cUYy6sqM49VfH8Vqrjy7oKIje5igCnuUYAE7kCEJdxTH4ojCLADp/ozA4emMA+HSjiPPeRiDvp41C",
	"ziMbhaLjNYo6F2sEIp7U6ih4TKuB4BqNYMEHGsXQ3RlDnF8zigX/ZQys5y+6JOMg+h7jGDoZY9hcsvHW",
	"+Q5jyHmNEvyBEbDJ21dD8K+Z+dgAO7ddDSHRLVdDYPC71RAGzrWacO89qyHMOchaDFl8nepc02px3q0I",
	"4vSjFKlNIeihigANDqiaQqN/KRqKrqQoElxGERDdQ1FAT2keic8nhjbkhzlwIjg6a2IA+GWqIRWPA+6W",
	"OOLcKjHQ+U9iGHpKotDCpBu8HzEs1wkneY9GDAyOiyjqXBRRCL0RcQTdDtUxcC9UA3Ml0xqEDoMIiM6B",
	"KODcAFEIPf5QxC34uCsfjtQ99SwLRUc8y0KDkx1KqCqaPec9hyDoKYcD3iEOQ73jGwqijxuKMD82tYDg",
	"rKaGo1OaBRB8z1A0uphhaHQkQ2DiL4ah0SsMhcEDDAPGfBns/bpQKPhvoSC6aiEIdchSh3NWVd7JSg0K",
	"nlQY7lymUIw4RqGwc4FCIc0XiMypCcdBA80hcFTCIXBJwiH0PcIx52OEgtSRCMGJvxCKTio2AhIfIBRF",
	"dx8UQc8eHCkNG2eCtw6KgWcOAkQPHBR0vjYI5NxqUCR6z7BozU8Gh8AjRg1iLi94WHBsUYf9Gm/BUwUH",
	"0SUFx5zrCQ5G/xI1fG4ualTwGcEhdA5hsUUfEBb1Th/Cb/DxEKSpW4pHFw5B+neJg3L00BAk546ByOh6",
	"IQDgacFLzq9CFMGLQhTPCBOcJEQRXCIEETwgBAn9HQQR3Bt4yfsyCPJEU8G7KSAIuiSIgHM/EAB0NuBF",
	"cC4QBfQkEOSJ07l4VwHhd3UqiYB+ALwcbP498LP8M/xGm/4ggQl/kKKxfoScYX4EzkP5O7v7ILqzfV52",
	"JvVRRPv5IHtbeQ+AbXwUnB18BMDqPYpg4x5FZ89OAC47S/Ugo116EKMFeoCIqXnEwLA8ihdSh3b0yu/t",
	"gp14FMAqPIpoAh7lTKchK2jg7SV32i2IxG6bYs5C20NvpuR3LkOpRnPrgHjT6gB4M2oPgNl0EJyNdJC9",
	"PbQHnPVzEMHY2Uto2xwlNGSOsjNaDoAysUF4i+Qg+28hAaBWxh5Eo+IooQVxkNFeOIhgHhwltAUOMpj+",
	"Umk2iaI5m5sokBwwg90ARtNcAjkr3ICA0W2QnIWtl4M1bQCi3ayHnJVsFDNS/Mz4NYJg6mpFbtVKEWe/",
	"SiE0VeWIt0ilKBqfcqQGBINSCjrTUQoFE1EKMjNQFuDNPTkIhp0WolacXHbWmgz0Vpk1MJheMtybWHIQ",
	"jCkZhGaTDAILSYagLSSDXv7ygsvOwJGD3o6RocFckaGvT95z2e5hGAIWhwyJdoUMhvrgCBgLMsgbBTLQ",
	"G/8x8L0q+LtHc77eXo9Y70Up2OlF6LmEVIgVXm+v9/S5rXdnb2d/cdO6iLhPnRFw3y0j4L8iRoQawUXU",
	"fU+MALVriyhYsVmxbq4WMGqWZkHUST+HN3p+4v5+8xzeC0zM7P8aSsnZy8RfXx+Q3w/pbxbAQh4Rgf5+",
	"TH4/Ib+/Ib+/Jb+/I7+/J7//Fn/3SS76D+lvFsBCHlHhMRVIpvqURUmUQzLeJxnvk4z3Scb7JOMhe/7U",
	"qJPfPfWF/+7tU//Lfyd2svsCXLcWIhBaBhHA2wARCAx+ouyMexiAt8QTJMf5ecE6h2JoiEMQb3JDIbSu",
	"oQga0kTE28wQJBjHRAwtYaIcbF4I5MxbIuItWSJCLFYoGBawzBIlysTihIBanVMpN1ScayKhqQiRvVEI",
	"gcAChMjB1CNiaNdBZfwOVrfXIJDOYB3ATDGoXAzNRZTjqpOYVEQJDCiI6E0lCAR2EVE+1mMSeowaN2bi",
	"QGVvy0AxNFvgSElLOtoiEAwMD4hsRvStgkFBhJzxAAHAUoDLBXtIOP5PIHfSPyJwrp+KcIafAHBgn8pw",
	"OJ8A/hh+hPDMfZTxgD2V/Ul6gsGx+d5e7+cf4U/fzQM4B/jx3w+0btyiY9YvMJ/4I+29vZ47xW5/LR5W",
	"jyieTKeyO4NOIDNkDDheHuVwkDxCr+REUQmPiFPEHQanEBz8joA75G0BXP3jce7eXi9+oYBj2729XjhO",
	"2dvrweHs3l7vFUyzr07c3+9ewTRbP2fNoRPYUvLz07293ut/wh84Km1/wfHo3l7v6NjODO4gtP1Fjj1T",
	"0R1wJhA9xkxgd2KZIaiH5keRKTCSJU0iHDAmmDtLTBH9QVPRnREmUDgMzDA490uReLyXo/Qd/LFdAvkD",
	"ugTCw7gUCIduKQgHbClAqp6fmmWAOx5LMTgKSwA490plXdEHuQOtDKmmilZ0OKXKsFTSVP3hUwrhOVOG",
	"ZHKmGBBPjhI4HBElGB4HZcDUUAKe82RALi8Ywx/epFjO2uF7eaaYmOKHRnLm0krGt3t3srK31zt+8xT+",
	"/trb61FlAR6W7O31cOUVDkX633gG0kl45hGFuPCvHWeMCG4DwnlF/M0PJiLmzyE6KW4Y4jFDFHyh4uKQ",
	"Lgzf90/e2f9g+IEV4u8Nt/BXs5nKh7JQg3C3/yBX/650rpLFi/mPMaQQVaFyMZNFcWHypBClEUMDWRSy",
	"FKmSRSlMpkRIXaSqLFUuvjzs//Or/d5er9RlanNy5NIQ06ooQyJNcXsh96fGpEpmkP08HcxyNdIfFzP7",
	"7vilwDChR+KZGqlh+cx8MEIXQmdFKdNUJUJnQpdfFMJcZOJc52UlU1FUp4nOld1gzm1mp/LjS5WNy0nv",
	"h8cHBwul+GmvF4vsXz2dkJI2px/UsLRZPZkXpZqeqLLU2biwJWkXvD/81ZvZiTcvtSqsJJNkcF6ldsg/",
	"1aku5wOdDEoz+KBzOUjhI9QPf4XiO0wSwdjiRSJkIaT4+4vjQ5G6j1aLBSfT1FwMZGay+dRUxaCo8nM1",
	"H+RqVpisUIul+TyTp6kSMpvbyrnQ5URIkerszFZ+OVECU7CSzIoLlQvpIFLbh/ap4tA/VZxgnGNVzOxT",
	"i8asDnOVgC4rhQLilXHQ0KYTNZJVWg7Gualmi2/yWl1A+y3EhU5TcaqELAo9zlSCr6ILATFtzWdVmtr3",
	"7v1Q5pUKz9JZqcYqX3jYQE2lTgczWUJXX/dok6Xzxecr4dLEbOyJi4nKLK5zAekLmSS5KgoxBWVAgXnO",
	"1Vh9FO7R++KtxXQhDDxbprZvJdr+rrXoR+vLcJCbVF2+IG2G2atgs8HcmlS1LeBUlWqQVLNUD2WJvWTJ",
	"sJSpj6UosIv9IKbyo55WU5FV01OVCzMSMRGbw1zZwWa/sdElurDZwm53oU4nxpwNCjXMVbn4fGjWdlAZ",
	"wodekWPnLuB9TVXargBRxZeJLoamyuVYJSJVYzm0DWAiz7Wp8q9IT3mGzxcX6lTYZ7sEluV1mEo9Vfli",
	"1l5kw7RKFBb6sCpKMxWRL0wmZJqKzJR2SpE2UiFklogxLDpLlYhczUwOH4wXe57L7FNM91nMR0OLwq4x",
	"ys201oubG6CC8WYgq0SXqRkvvtn70JZchYuyym3bM9megHF+KjVMJ/aNBCQkUjO27WA4kdlY2Q5ki8YI",
	"O7zYAVh8+ZPOEjs+74m3tgb3xPNsLMdqqjIrHOVmWNkf+/v7X70YibmpRF5l4lSPhZ7acgJoKufiQmal",
	"Tdo1JMzpqRrKqlDQyS/kXCQfZDY2ff+SYogf0tO5uDD5WbFnibn6wo7n9hEzlY9MPpXZUImJLvfF82Km",
	"hlqm6VwklS058WWu+l9hVgo6z/rh25fCGD9TLTYmV+6nKhtOpjI/WzYTFOJHTylEUQ0ndtqx7/Xm/eHJ",
	"kTg8+ceJ+PJwhv1Nm0ycqKHdbM3FP1QeGps4KWWWyDz5ajGvMf1VGR3CIS2ZX6aBjEZQsuKpixvGL1dZ",
	"sCqwBFjm2LEoH8mh2l+Zj4kanqW6KIvL5iTG3Eg++Gx5qYzEqJvISaL8cAsPv3z/jQmoQoxcxxSnczE0",
	"05mE5q6yZGY09M3hhRIjrdKk2IMRDFpTsS9ejER5YWL8YiJzJaSwy0PLm8hz7JCFnCrx9P1zYXKMHIYR",
	"28QtI7WTbq6GKit9erjYCvncF+/tZM1e3c7CWCTJHqyZ7OJ4RN8uibnThZ3d41JAheFHnGt1Qbv0s5hA",
	"iL+qPnxZDaaqlIks5QDHics2E5+O8On4oW8Dbca9By47iqv0aTeAi58hhYU8tXp6kcrlw55/wMnLwy8K",
	"MYLGMlW4npiqRNtWsDiYsVir8jDW5aQ6pWt8l8LPL97+8u5HKMdxjn1qRTJ23dKQCOwKLpGEXfoM7Ppj",
	"sTyO7DZP2aWD+kG8KG3LLcrcZON0bvuImU5V5hqynfLCEuhU2T2A7XkPbE97cSQuJrpU0C1sBUIWC5Wf",
	"q1zARwAhxSw3H+dhlnk91tnHlRUJSw22qIGyWEovSiWnRUMMXnqv9DA3hRmV4q3l82XTqvwAcW7b1UAO",
	"S32uljev10B1a/56wxJyODQ5NKTS1FqiXV7kSg4ndjgxucAHeVLTYsA9CqP/CHGbYl7qxQbnMLs3KQ86",
	"esM94R959XdtSKPlW6uPM5PhpDk4lcMzMxqt2DsLQheObnuNLNV4Dvk5eXnoXpK3rj2h9sf74uGeeLQn",
	"nuyJ7/eEKof74o1dIV7oQgldCpmqvCyEOlf5XCRy3rD+u0YW9lsWCYwbdmu7hSbga0uUE1kKO7GnOjvD",
	"UQfHuqKo7CrgNXkTm0qYo1gqmSmbE2jXoGA/zxLkia0qwFlukmpoN9wyaRgenulilsq5XWwAwyvUYMdb",
	"GhwjbQJWKCbmAsZSc65yu7+bKJmWk4ZuceQi/ZzLZM2OwGewlOOBziYq16XdiCyv5JAhORYkghin5hS2",
	"LND/0tQTi31xmM0t3a+B7O40JAMzuaxKM4VvY6lTnfjFkk2I7dXc/s1ONG36dHi9XA7P7CJgpFN1pRVI",
	"eG+XkoCUNrE6Aq2CNlkmwcLuknnjsTeRnyKVw7NLzLOlms5SWdr5uRxOlrccbCFhRLBdVibneqigNiGy",
	"fTmTwXLdYm9ts94XbydKlLZH+JfL1SyVQ9fNp7rUY0huzy5Z5bCEuLkaqVxlQ1Vgg3OrwH3xrlCjKoWo",
	"s9ycaxiHhiYrdFHaBTlLYyGruRrLPIEtgxnhBmMos0zlDd3wmEQ/hOirit3WkG2vtl0NVKJLVKAttAYY",
	"Xf2eymnqhnYGSHTp1HMulYbxDTX8GAxFcJHrcvkQ4TvewPbQwTA1TTrkpxYGbQzZ1siRHcce2/mqEF86",
	"feFXYiaLUiSVEomdEjSosWz5pxavZknzMjuOAOKwKk0fntg+ywObiUvlG+p1poa4eCCaRvs2Ld/B6Sl7",
	"Pzx6+OS7J98//vbJd3u9qc4Q7Af0+yb16EimhRrMTKFh+TXRRWnyhqn3y+f/5+j58YtXz1+/PXz5Ff0c",
	"0jCw2i0vvBrb5cKjhH+U0CMokX9XMg28L9ncrcsCt7lKyHRscl1Opl+JiSzEqVKZmOXqXJuqcA9USeNj",
	"TBZ3525o3ReHb98+f/32xZvXP4jDtJyYajxxmnO68Q4PtTN+VeBEkahS5VOd4QuEnBcTU6WJHTOW52UP",
	"B9eRkmWVKyw4u2S4MPmZTW3Ztl8U2k58uhSJUUX2RSmm8kyJQmWF8vujU+Mm6IWWGr/8NDTNuEbBjz2F",
	"KGZyaNOeof62Qdm/ROceda/wRNcAB4VdTuqyoUn9p/jjqR0Uhs5dvvuN/g31GJwg2v+de7hEV1N0C2d/",
	"oSc79O760vl0fZGNnP9AOCTgPZr4hHt7PZscnIywSfT2ei/hVJLj9/bsm/3e9gXXafVPcL+aKZXg7Pju",
	"+CWMhEHPD4X/HpPh5fztE+jBXnzYkCc3cNE07BOaVOepuejwI21IPXyklf0/W36krcdtbMCLu/FBaVp9",
	"BJjKjwM7fBRLZregVoOuXOhsnCrXG3CXgHq7VR+CcM1m0kQVRIMF35ySffEsaNhCZ4/BuH9J1agUajor",
	"5/viUJzLtFL2CQcYI1dTc65gdRqfeclBf1nTeSU/xgySxS2ZHdxTBr4VDFJX3qsbjd1DqJK0HVjGlBOZ",
	"hbLEhK49fflR5roZHOdK4nxs84iJbiyPTj1U5elivuySc1SlKYwObqEXBoiLprHhSWNTz0w2GJrp1GSx",
	"LK7Ux10bnckc1Mxe3YxpR+ry/u0SwAiNHRr7USeDUaLHuhRfHvT/1nIEggiNuVzYUZM6+L6xDliMQYMO",
	"+EjlQ5WVcmwX8ybHhbHMxBeHX4jfqoODx+p/XrKxuff7Gfb0h419mOfqtG2uxBc/biRTP7bI1LB9pp5u",
	"JFNPW2QqaZ+pZxvJ1LMWmRpdolH95HI1vFaufmrMVa7K3DiV7RW3ED8diV+Q6rYQaQFnKny6bln/oAIX",
	"NjAFqo+6AL0E2zUUXvVA1/hN6+9iX7zJ/MdxO+fDBx+gHPntgs+SX6TrAjPmlgrNS+xcF2cDORyqGaio",
	"BiOTTwf+CEzznvCZO9iiPs50PhczlWuDagabmIiJWWx63Rl/sf5qOXb611M1MrkaQKaWfHd1isv/g1tU",
	"jLCQZ0jAlvdLJc8VLm/IaYYNLWCOm56Km6eJkkkhqhnksrEFo/JpCE7zGublN+7c07547RbweFzDn8so",
	"VJZ4RdOCmpvMFA8bZwp8eGnOVEMJv7Ww8HOi2zKUys6VsCjQ5USc2AT2xc8Kpz1ZiklZzoofHjyQM70P",
	"ye8PzfQBPKJonyU7zWZyqlYVyHvbW0u7A52bKrc7T2GjCOO/JbQrAjx60skqwKUtQtriyy+/+tfvf336",
	"f3/77Y//7//63//jP/7v/7ZD46Nv/3PQ//p//j8/fPFbbw/HShzH9x/8r5brh4VHNQ4QdgE48OW6tmhK",
	"PVWDP02mGvfM3EEnXD/IELypkDjtpBQrM0J040lpEWVkdO9JiYgwUuGvGGFAjaLqFMUp6BiUUBDglGxc",
	"aUaxQI3ywd1KTQFGAY+ilAIAozgno5TkIEaLnkcpM6KM7D2SUqrHKBH8lBISyJzgPZcylgcZVVUlY1mZ",
	"EdDFKaUgQkng9pRQQOYE4giVEQnOIjgXqZTrIEYDv6mUBACleFeqhOQhSvP+VQnNQ5Tmna4SmocoDT2x",
	"EhIClEKdsxIihRm9Yt3x7xXvh86NK2E4hJGca1fKchCjgb9XSgKAU9AFLCMhRGkvvR9+KjNC8BRLWQFk",
	"VHeNERFZMHiUpQQAOMU7mWU0D3JqIc94ahagFHRHSygIcMqsKjnFApxSqLxiFAswCvqxpRxEGMn7tqU0",
	"j3EierxlPIQozbnBJSyHMJJzjUtZDmI08JdLSQAwSnChS2kBpFTiWZdwCUrJ0eMu4UaQUr0jXkL0EKV5",
	"77yE5iFGQ5e9lIUII1WZpt0DZErwjn0Jx0NII95+gUNkTvD+fxnLgzUqugXmTMRqRHAWzHkAcZr3IMyI",
	"HqxRmxwL83hNjCWJBJeuzSmE4GXRmXfiJWkwztKEwJvrshQgcElU8E/ZHBGClkTz/o+bY/rQJZGdq8bm",
	"uC5wSVTqPrk5PmUsSeTEXxi4JGhpNPS/vCwmhq6I/LLSxfLINnRJZOe/uTmuC1wS1bl3bo7qAmtRq3pL",
	"quqtxzmEZiyHcaJzE82IDqsRz/gzyzP+SHAfTRkALFKCh+kFbgipRULv05yOGCeqVE0ZywJ1iv5T1Tj6",
	"Tz74UdfVjEpwHsE7tWZsD9aoY1PnWaRG0gXPpAU4ZcnYuHREZM6yaQwWUI8S/GjXYgS8FiEbVhmnWqRG",
	"Aq/bnAVQjdYwbjeP1s5DNycCVKfVOiginISuvBkLoToN/XvXiAhyKnX7zeg0gEehHsFZFBpQj1KfXpom",
	"lehBnDM9ysnoWZwxEeI0cDfOWIDUSOCCnLMAYjTql5xyKV6LcFGYGtUiDST0Yr5IRZxHAP/mjApIjQQ+",
	"zzkLIE5zjtAZz2GM6N2jU6LHONE5TWdEh3FidKXOuBHmdOdjnXEdxojE8zrlEniRDi7ZF9iALpDBVXud",
	"CyCjBg/ulBpATkXH7oyIUI3mvL1zogM5NTiBZ9yA1sgLBesgTgse4xkzoHUyepKvcRGsU9HBfI2KYI06",
	"l1ktybmsLdGdL3rKclCNdl5LCxFOCk7rGTGgjNzkzJ5GawpvTODXzHxsimjxxgjOEX5THBfUGC16yW+K",
	"GUMbIwcv+k1xQ2BjVHCy3xQNApqjeP/7jdF8YGNU556/KaILaoq2rPaaaq0612ecahFOQk//jIUQo5Gb",
	"UmsQp9X3XIs7LbwmgHMswkgNVwfQGA3BzdHj3QKN0WMwj46XD7AoCHFauJGAMQPKyHhTASUiwkl6yorY",
	"ypwQ7zNgvAjX6E2lt6TQ2AUInE8CWBS8G4FyEamR4L4EzgJogVYVdVZVfyBcrMBZANVp7raFGtOhNbK7",
	"hYFzHVij4uUMnIkYJy7qAZp2/+EehxoRwRo110ktQYvUSP7KB070aI0croLg7ABzursjgnEdxol4cwTj",
	"IVSn4XUSNSKCi1S4ZWKBC+gCOVcyrVMttkDEOynqVEQZGe+qoEREOMndX8FoDuNEvNWC8RDiNK9SJXKN",
	"AL5SOQegOq1+I0YtSj14eXS8MmNpdAxeHj3cqbE0hcDgibj7manMCO4mDspxEKPh9RyUhUid5K/sqDE9",
	"XKP7uzw426OcjHd8MCZCnMYu/mBsFrIQKVwKUo8TAhai4H0hdT6iDWS4R2SRDTCnxwtGGD3CNXq8eYTz",
	"I84ikDtJKJ/ANXq8rITzI84jwDUmjApIjTSu6ecRqZHwuhNOQ4wTwyUojBpQTsbLURgTIUajN6ZQLsUX",
	"I+S8i3psgahrah+PLRDDvSt1dgioRXFXsnC6AzmV3NTC2ATnEdwdLozsME7UNe0tAJxCL3thVBpQjwKO",
	"DmtswOpEuB2mRgSsToQ7Y2pEwOpEvEmmxkSwTnUXzNS4DuVkevEM49MAFoXcSUMjEJjTJxVfxQJQp/j7",
	"a2pED3M6XmzDqAhxGt52w2gI1Wml4esuBzFauBeHEgPIqXBdDuMBwkjxCh1KjCgnu6t1GNVhjOgu3KE8",
	"B3FavIWHUSOM9Nr1PMCtYXUiXNpTIwK2QGRX+dRjsMB61HDTTy1WwBcjBK1pHVyg4tVAdS6idTJeGVTj",
	"IlinupuEalyH1snxhqEaPwYsRJmbi3rqgNWJcCVRjQhYnYgXFdWYCCJ18f4iIC/CSPcXGwHJCyQI7jmK",
	"gSCS4Kn/mBEkEggXIcVQEEnwv0u3BQgSCzSnioaaU0WC3dVJkeAARsHblCgHEUKCG5YiA8QY7K5cCuFO",
	"pgS4hIkQQKaEs4qEnrHE4ZYmEgoyJcC9TYQAMiHATU4xHEQSjFc7xXCUCQEue4rhIMZgf/tTIHiAUCaa",
	"hluJBvoLogjDQ4yGt0ZRFiKU5G6SIiSHEBLeLhUpKEcC3DcVgkGigXj/FAlHgFAm/ihWkEigTmNZWoEE",
	"VaeShFmJBuINViQcgUgJl1oFTkAi6Wf5Zwy3QgzCe69CIIokGC7CisEgkuB4M1bkRIwS3X1ZhOYQSjpP",
	"SPg56U3uSq0Q6mRCcHcURIYDIsXduxUYTqYEvImLMBAgFH85V+R4JJLgwq5AAIkGugu8CMEhlASXehEK",
	"yJQA13wRAsiU4C7+IhSHMNICp05x94NFigMIBa8MiwyUCSFeIhZJESNEcrVYZBKQUsEXBmGBTAkXUpck",
	"3Iox+FX42hskHlixwIoGwqVlJBhkSsBrzAgDAUrJdCoJwYokGK46i8EgxmB3C0UIdzIhkNvQIouAnOou",
	"SWNMh0XimylhWIEE5TI2dyvEoHixWiBEiND8bWuR5RFC8jewRZJHIgluZQsEkEigu6UthjuAUPzFbZHj",
	"kUhyl7kFipMJAa53i+EgxmC87y0Eo0iD8QI4QkCAUtydcITjEEJShoxDIJFAd29cDHcAoXjv8JHjEUKi",
	"18tFIkUjGa+dCywUaTDeQ0cICBAKXk0XGSgTAlxWF8NBpMF4ex0hIEAocKFdJIDIg2cTHj6bUII5m8eh",
	"BSQaSIsJpBjI7sQLJIYScrwrL1IjxojuBj3KcxChwbV6kQIiCXb37EWCAyIlXL0XOAEhpHgdX6RFLBLd",
	"JX2B5GRKyGgvQpEE03v8IouilAz3+xEayEjgN/4Bh0Oc5q4BZDyHcSJeDsh4CNVp/sbAGtXDnI5XCTIq",
	"QnXaImuBFO4cZMSAcrK7i5BRHcaJ4YZCRg0oJ7ObC1kEFlKL5G815BE8WifDbYc1KmBIpHcgAosCdYq7",
	"FrHGc2iN7K9L5GSPLpDDNYp1fgioRfE3LHK+R+tkuHmxRgWsRsT7GDkRsRoRbmnkPIBqNLy6kfMQqxFf",
	"/vKCs17+8qJOcXc81ngOrZP93Y81todr9HApJKcHuEZ/ffKeE1+fvK9TTF5OaiQL1WhwqySnAVSjxasm",
	"OTfitQjQgTgXoDoNbqas8QCrEf19lZzq0RrZ32PJyR6tkd+rotZALFIjxTsvOTXiEIHchml5RKTB4XpM",
	"wgkYJT6XmDUi0mCfcyJC8NPnMJQ8fY4DiLtfEyD8iTC/bBOCOURp7iIewnIIJbnreAjJIZTkL94hLA9R",
	"Gr2+k1ApTOnuAh/CdAgl0bs+CZPClA6XgBIeyEioXwsKrDpIqPS20MilKJKdbcNTb9LwHKvyuavK5yco",
	"ngTxm+fPPGR/Ijyez6BhwA+ENLZI+z8CeEMmYPiTwl8fkICvD1jQQxr0kAexaA9r8XjEWsxHLPARC2Rh",
	"POgxDXrMgp7QoCcs6Bsa9A0L+pYGfcuCvqNB37Gg72nQ9yzobzTobzSoT0urzwqrT8uq/5AHsWgPa/F4",
	"xFrMRyzwEQ98zAIf88AnLJCVZp+lyhNlafIkWYo8QVo9fVY9fVo9fVY9fVo9fVY9fVo9fVY9fVo9fVY9",
	"tJhJIftrGUOoBwLl3dPQrd49jd3q3dunAX77NML+erEQ6IFA+WeVVj7U/saA2sW0QKhhjIjX1VIaIozk",
	"r7ClNI8xIlxsS1kAUIq765ZwHFIjgQ8fzgKI03Kns2AAo4R7ciktgJyK1+cyIkKM5u/UpTyPcSLetMt4",
	"CHEaXr/LaAhRmr+Tl9A8xGjhol5KDCCl4v29hIYApYQrfQkrYIzoLvqlPAdRmr/9l9A8RGnkSmDCJCgn",
	"RzV8DaI0vD+YkBCgFHKlMOERlJG1Oqcsrc55cG54eG44Ya5Z+FyzYLyemBAQYBR/YzFleYwR4R5jygKA",
	"UcLVxpQWQErFG48JDQFOcZaqVOYEdy0yIzmMEXWG+hgqMwJcn0wZAHBKMUTnpwygFKLe5gglvSlS+iAr",
	"0mC4iZmEg8wI/m5mSvIYI8KNzZQFAKUc6zFNxoos2B0uJSINxmueCQEBTvE3PzOaBzkVL4RmRITqtJL1",
	"CYcwUrg5mvICyKhwoTSlAcAoZsQqFWRG8LdOU5LHKNHdRU1oDmEkuJ+acgCoUwr+dh6itHCPNeEFjBHd",
	"7daU5yBKgyuvCQdkToBLsBkFEEaCi7EpBwBOgbuyGQcQRvL3Z1OaxygRb9UmLAQoBS/aJhQEOMXfvc1o",
	"HmRUuJKb0gAAys8/WvznH53Q93sn9xNh3Dr5bVPYMsXtUljgx8W9X1SGBSVbTPKF5C+40/vF7fT83d+A",
	"ud/o3hlvAgcPz/jTeX1euBYcnUAvwJSO94UTIgKc4q4QZyyHMaIZ8qSszAlTkxvGsAClhNvHCStglPhK",
	"ThThWJEH4yXljIIQp7mbyxnPYZwI95kzGiCU5O44JySHIMl9SHrhvyDhDegAwS8AicEWNdSCq9ERnLno",
	"4apsCwcBHYLr0zkkAT/QcTiqFV45tcIrbGyvToL43atnHrI/nbdxfr06+h3nWJ14gh/bOUJJ7iJ2QnII",
	"kF7/0wa8/qcT4JJ2ROAnwnBjO6DwC8CjY9hsHR3jRstd4w4Q/kSY3OkOYUTmBHfLOyM5jBHp3e+UTHEW",
	"wd0KT7kOqtGc6QQDGAWVSZSDCCeNZMkyBgCn+EvmGc2DjOrunqdEB3Ga/qAZR3/QnOCuqGckhzFiuLie",
	"MgNYo8J99pwIEKfFS+4ZNcJ1+rTG4xXl78OnJI8xor8lnxI9xoh4dz6lIcJJ4T59RgwoJ8M9+4wICCfR",
	"AWUBZFS8kp/yEKmR3DX9nOdAToXb+xkPEEaCG/0pBwBO0RV7SytzAl77zzgI1WjVVEnOsggjHcmxGRw5",
	"O4oFsEZNZcVpqeRZP9LlUOqcFb7HONFMMnfsoQbVaJmcKc6ySI2Ul4NXaG7BqRFnEY5lbkqTjVnZBJBR",
	"T6R2cxZHaqSpkZwzNTydt3KieSNHpEbK5YXkJItwks1jKWesJgLIqTkffK3MCO/lGStcK9cIqTP45ggj",
	"/ZecUcZ/yRkGmzD1mDjhmLysxm7Qcr8h4PgNzHzHb5468VcUfwWRHbvhJ27eVvkZ6k3wF4BOl+n1mO9O",
	"HhymssADhkGIQaoqNdYyEUNwrv80WYiKkg8k35ei5APtRNZ3FvKOQSFKc5+fouQDf5EXUmsXhoIPcsn0",
	"T0qZYz0ugJ76Sg8nehxe0YshmHzbIqIPJh+pouQDQ+P3vzEAtcZeY8y0xVxT/L5/8s6i9n8EcJH33i3y",
	"vBbZ/k8uguF+cnt7PeoVl4jR+y0B0dMtAcCtLZMVldFhLZWzcaWZ/KFKiQx+Z4nsXMwSJLqSJaB3Ghsh",
	"cBFLRe8LlmCqKqmIXl4jAD5dqUg8txLYOWklCHhkjbJ3vhoR72c1It6lakTQf2qUqZtUgla0fpwHVAI4",
	"Z6cEAc+mVEYnphEBl6VEDL5JCWamVAK/o1T2DkYpVsgzwkHXoVSeVSWTC5WThuAcgBLAu/qkEHr1jIjz",
	"4EkA56yTIOCZk8jBBWfEiKvNCEafmhHz7jMj4j1lEgS9YhKgyjQpb+/u0iLEuSUVvRdLhqG/SgaBa0qK",
	"eB+UDGvyL9lICA7JmkOZY8glFHDS1RgGLkcaQ7zzxsZA55+hMYx6XmwkgHPFJSHoPHFp4MtKN6fpvB82",
	"hjn3hiys4uXhvBZSyPknZNAZjQTuBOtycC/IAtCRIIVUqqZc1n/ShkX9AFLYO/xj2NjUAF2wtJpbGHPK",
	"x/Hgeo/B2bDKGAAe9Riy2FKdlzyO8Jpyzu84gl7uKEZd2VGc+qvjeK3VRxd0FERvcxQBz3IMACdyBKGu",
	"4hh8UZhFAJ2/URgcvTEAfLpRxHlvI5D300Yh55GNQtHxGkWdizUCEU9qdRQ8ptVAcI1GsOADjWLo7owh",
	"zq8ZxYL/MgbW8xddknEQfY9xDJ2MMWwu2XjrfIcx5LxGCf7ACNjk7ash+NfMfGyAnduuhpDolqshMPjd",
	"aggD51pNuPee1RDmHGQthiy+TnWuabU471YEcfpRitSmEPRQRYAGB1RNodG/FA1FV1IUCS6jCIjuoSig",
	"pzSPxOcTQxvywxw4ERydNTEA/DLVkIrHAXdLHHFulRjo/CcxDD0lUWhh0g3ejxiW64STvEcjBgbHRRR1",
	"LooohN6IOIJuh+oYuBeqgbmSaQ1Ch0EEROdAFHBugCiEHn8o4hZ83JUPR+qeepaFoiOeZaHByQ4lVBXN",
	"nvOeQxD0lMMB7xCHod7xDQXRxw1FmB+bWkBwVlPD0SnNAgi+ZygaXcwwNDqSITDxF8PQ6BWGwuABhgFj",
	"vgz2fl0oFPy3UBBdtRCEOmSpwzmrKu9kpQYFTyoMdy5TKEYco1DYuUChkOYLRObUhOOggeYQOCrhELgk",
	"4RD6HuGY8zFCQepIhODEXwhFJxUbAYkPEIqiuw+KoGcPjpSGjTPBWwfFwDMHAaIHDgo6XxsEcm41KBK9",
	"Z1i05ieDQ+ARowYxlxc8LDi2qMN+jbfgqYKD6JKCY871BAejf4kaPjcXNSr4jOAQOoew2KIPCIt6pw/h",
	"N/h4CNLULcWjC4cg/bvEQTl6aAiSc8dAZHS9EADwtOAl51chiuBFIYpnhAlOEqIILhGCCB4QgoT+DoII",
	"7g285H0ZBHmiqeDdFBAEXRJEwLkfCAA6G/AiOBeIAnoSCPLE6Vy8q4DwuzqVREA/AF4ONv8e+Fn+GX6j",
	"TX+QwIQ/SNFYP0LOMD8C56H8nd19EN3ZPi87k/ooov18kL2tvAfANj4Kzg4+AmD1HkWwcY+is2cnAJed",
	"pXqQ0S49iNECPUDE1DxiYFgexQupQzt65fd2wU48CmAVHkU0AY9yptOQFTTw9pI77RZEYrdNMWeh7aE3",
	"U/I7l6FUo7l1QLxpdQC8GbUHwGw6CM5GOsjeHtoDzvo5iGDs7CW0bY4SGjJH2RktB0CZ2CC8RXKQ/beQ",
	"AFArYw+iUXGU0II4yGgvHEQwD44S2gIHGUx/qTSbRNGczU0USA6YwW4Ao2kugZwVbkDA6DZIzsLWy8Ga",
	"NgDRbtZDzko2ihkpfmb8GkEwdbUit2qliLNfpRCaqnLEW6RSFI1POVIDgkEpBZ3pKIWCiSgFmRkoC/Dm",
	"nhwEw04LUStOLjtrTQZ6q8waGEwvGe5NLDkIxpQMQrNJBoGFJEPQFpJBL395wWVn4MhBb8fI0GCuyNDX",
	"J++5bPcwDAGLQ4ZEu0IGQ31wBIwFGeSNAhnojf8Y+F4V/N2jOV9vr0es96IU7PQi9FxCKsQKr7fXe/rc",
	"1ruzt7O/uGldRNynzgi475YR8F8RI0KN4CLqvidGgNq1RRSs2KxYN1cLGDVLsyDqpJ/DGz0/cX+/eQ7v",
	"BSZm9n8NpeTsZeKvrw/I74f0NwtgIY+IQH8/Jr+fkN/fkN/fkt/fkd/fk99/i7/7JBf9h/Q3C2Ahj6jw",
	"mAokU33KoiTKIRnvk4z3Scb7JON9kvGQPX9q1MnvnvrCf/f2qf/lvxM72X0BrlsLEQgtgwjgbYAIBAY/",
	"UXbGPQzAW+IJkuP8vGCdQzE0xCGIN7mhEFrXUAQNaSLibWYIEoxjIoaWMFEONi8EcuYtEfGWLBEhFisU",
	"DAtYZokSZWJxQkCtzqmUGyrONZHQVITI3iiEQGABQuRg6hExtOugMn4Hq9trEEhnsA5gphhULobmIspx",
	"1UlMKqIEBhRE9KYSBAK7iCgf6zEJPUaNGzNxoLK3ZaAYmi1wpKQlHW0RCAaGB0Q2I/pWwaAgQs54gABg",
	"KcDlgj0kHP8nkDvpHxE4109FOMNPADiwT2U4nE8Afww/QnjmPsp4wJ7K/iQ9weDYfG+v9/OP8Kfv5gGc",
	"A/z47wdaN27RMesXmE/8kfbeXs+dYre/Fg+rRxRPplPZnUEnkBkyBhwvj3I4SB6hV3KiqIRHxCniDoNT",
	"CA5+R8Ad8rYArv7xOHdvrxe/UMCx7d5eLxyn7O314HB2b6/3CqbZVyfu73evYJqtn7Pm0AlsKfn56d5e",
	"7/U/4Q8clba/4Hh0b693dGxnBncQ2v4ix56p6A44E4geYyawO7HMENRD86PIFBjJkiYRDhgTzJ0lpoj+",
	"oKnozggTKBwGZhic+6VIPN7LUfoO/tgugfwBXQLhYVwKhEO3FIQDthQgVc9PzTLAHY+lGByFJQCce6Wy",
	"ruiD3IFWhlRTRSs6nFJlWCppqv7wKYXwnClDMjlTDIgnRwkcjogSDI+DMmBqKAHPeTIglxeM4Q9vUixn",
	"7fC9PFNMTPFDIzlzaSXj2707Wdnb6x2/eQp/f+3t9aiyAA9L9vZ6uPIKhyL9bzwD6SQ884hCXPjXjjNG",
	"BLcB4bwi/uYHExHz5xCdFDcM8ZghCr5QcXFIF4bv+yfv7H8w/MAK8feGW/ir2UzlQ1moQbjbf5Crf1c6",
	"V8nixfzHGFKIqlC5mMmiuDB5UojSiKGBLApZilTJohQmUyKkLlJVlioXXx72//nVfm+vV+oytTk5cmmI",
	"aVWUIZGmuL2Q+1NjUiUzyH6eDma5GumPi5l9d/xSYJjQI/FMjdSwfGY+GKELobOilGmqEqEzocsvCmEu",
	"MnGu87KSqSiq00Tnym4w5zazU/nxpcrG5aT3w+ODg4VS/BQQc/pBDUubsbdybHM0s5NqXmpVWKmUY/hf",
	"l2qKQL06HCDzXM4h4VgX/8Lovzc/zNaMXUCvf+ZUZ/5lHu5tLAeNz5ZDW5yDUk+VFUcmn8qy90MPgL1e",
	"VqWpPLXNoMwrZZ8kkzdZOvfyQt7kTA+KocwGQ5ON9Liy2w1b1X8tJOWi6qxUY5XbuKe5zIaTQYn1wlvK",
	"WzkWJhdIEeVEluJCFqJURamSPSFFrvR0ZvJSTOVcVLNElkqUE12IkVZpUmsiD785WHw3397hg+PkgW0e",
	"DS94Wuk0GeiGnvejDREvnnWUu3pGhmY61eVgIovJYl6eQqCwgR3nIleyxHEotB2bbv+qDYi9x1/rM6Cy",
	"sRyrqcqgcS9JnjQylZ3r3GQ+wvpWqQpYWahkc51kpFPFe/x/5GrU+6H3Px4MzXRmMpWVxYNiOFFTWTz4",
	"Saeq92lpsm4YsKlmic7Gg3FuqtllkodoP9tYbR6DTX99QadKJu1KODPlJYrjtSlbFYedmlRWDmwSqSqh",
	"5qbyo55W094Pjx4++e7J94+/ffLdnh1tEewH9Pu9FtmGYQ7hFu30shOLjZGPVTlQ2fLe1fAUiFOUMi8v",
	"EUsVZXiTxRcNwYNMYg9Y28LdWPoXHVAeffNNiwEFh6UNDih2teUGEzq6Hawf3WozK50q48DHRqCF0cL3",
	"9YXeCf3IN31W17VKpLWzUBWxuJbN+E8hm7t5fzfv3+l5/3OZ5xcfexum2/VxdpNrZ5PrbqaszZQ6ucSE",
	"2G7+W7r13k1b92vauvFZ5i4P01xtdflB+1JqrzsxhG9sxGUja7uxc9mI+QL63OJQuRvu7t4qvcUKFnat",
	"xUCORmroktrCahZLYlCosrSPh6k6SbQtP5ke0Xb5aWkxxGY9NYke6euUwyxXI1UOJ4vdorGEluS1jR5u",
	"RSnGFyrdYuYqz4HvAOsf8mnFY9fXHwwzrhK95kMObVZtnbbW9cXxyJXOIaTRpqWFSSn2mW+fdDkEx2Xu",
	"YpNwi9rQDl1Rri2n1WM0L5MmFY/D+ejzn+KP13+IvnAZRif4AKSmcPKxlXNlkzgPJHB1kqpRKaqsNNVw",
	"4hb16NTkdW+vB59re3u9d729Xm/Plt/vWxylWg4tLYeg6w8apHLbPHJde1rSivwTVreVpTug3bT++U3r",
	"m50dl4yUa1bj1xo3GxvqbpO+a95X3KR3tgnfbaDvyQb6envmt+Ynr+qv7w6u8qV/oaJgmm/VZGuv5XWq",
	"PoXlL/Daq5v4C1zt2/zmXiB8IF33Aq5xLS6Bz2mjI+fSknkmp3o4KI1JmxltV4r+qzhtvQ1n0PZ6RSnL",
	"lU+85ukz/KRsc7OqmJbPs9cqrWWlsGZQunyZXOd03PLCMSZ9Wl9e1IqnKieDxqHqYMXM/9b+L0YmFycn",
	"vzw4PHohfoWjq4tf0KtyorJSD+HxYbRc2LsdHuGtiZiSc2aKJzTBQWWhcvuWDzyIPkhPfgHvoye/UDeU",
	"Ry/gGC7yens9DG6/catN1LxI2sz06mOZy2LxNQ/DalYkaqQzEAq3CNJpKk6VGJqsqKYqEadzYWfRDM6f",
	"XnoG2Xgnty15xVxX5enVyqpyFduq8a2c6+IwQXPbqlesXKOfqXl9H7E+c3u9i1yXKha+6wq7nnbXetoV",
	"Jwh/hH0zTavAnQ1P6Eop3f5+3rqLH+UmqYblCdEn8N597ea38VF2cV16+Y8RM3zt5shOuTJw9dg8zC8o",
	"JBr2NpY3y40tb7cEvmStXrktrRj2/bLaFwF/38a3a9l4ls4Q125DVx0/LlHL65aWn12du+reQDU3b7Bu",
	"28BwuQ2Re61b1mTbblns+mMxz6w2BzOVT3VR2Dn9mkdJ1FTqlGl8EKktBJ7E9dhzGy5kkuSqKHqNn23y",
	"ohw0lBGoCa/cVHQxiDtZvtp5pgo9zmSpCnExUeVE5airBFu5YmKqNLELnhI/vQhZCExpX7zLCpWqYYl8",
	"nRWlkokwI5GoVNkeJeRwaKqsLKjp3CHmo8ksTheDopqpvHK1uDSjsBSLuZzYTKWpIDUrLnQ5MVUp1MdZ",
	"qoe6TOdCFjYBm69yoqY0Tyf+qcJuvauiMXepLMpBasY6u/rnL0ijde3SZU+jRWOyLx5+cyCCDWQhTC5G",
	"6kLl++IlmB8WeyLRY10WQmaJ+N8P9h98/aD/YCBMls6bFNEzWYK55w+9//7Xb79d7P/vr/u/f/0fvVaD",
	"Cikgkvdl3fSpyUo5LF9kI9PwBS41w7OB+qiGVfMH2xextcling1FopJqBm1OuG+Dtpb97yIs3IGnEmEj",
	"TXKTmaqwTSNLkPEFPPkLiAsNospKnQqn69Ym229sG0OVpoOsmp42NdyjicmUwFA0GD1VAjyqoiEn5BOa",
	"0w/ii6//5v99sS/ezURpxMNvQh2mqblQi18QWL399tvX/+vh//rtt+Svv+09/ObTfzQOMyYfqoHfRgxy",
	"5U4g8Iz/ZFkF6WilEUC1WdbRklaYTGTqYymg8ptLaKzLSXU6WLKSb/mNr+VoN7MF/jlVx/KjNH4ovMqp",
	"FtvLTsrq9IonW4pUDs+gwhrWa202tzGB5kGMTYZ2dDZDDXOMHbvF3FS5gCT8NHKJb4snEA8fcLh8tm3S",
	"p7RriuWFtjV8vfbsK3eNvh8GV+C2GEuXH2rYDam7IXVx5PnchsrdqHRLRqWVA9JRbkY6bdocmw8G7T0H",
	"U+UbXavvqM/MBwMG2a8wXsN+bJyaU5kOcoNPXpXaz0A9Nvhx2ekCLpslp+ZZniGfLlinXi1xuxlf/gBf",
	"V+uWAZ47GOJMMdBu2b0uIl2l11vAYl3yKlgo1+YCcW/RlMFlzWvpJHeHd/q7HfxmdvCtS5x9ZFmhnGr6",
	"EHIDO3eexSvu49fu2mE/0XCkpxOt1Z3Wlqws6n9UaaZyeapTXc5fJIslfk4Jiyuhb9aqgRcSaJGNpcNu",
	"i9xcRr17lby9VdNZ2ujW4UaKymfnFhUZfNoZVrku5yd2hnfbQlno4WFVgu4BZn4YNC0a2/GkLGd4Ftac",
	"aeXZ2jZ8hPwnhR96hYLhGw2W3Sw6078qPPNmzlTmo9cOHtug/qks7AzFDiPgwtu/rPeN9hvG+K3X28OM",
	"TJRMYBnhMmIfY3L9J37CWciMLQ6/CKrPUiM7JYLPtb54M1OZODFVPlSCFbKA+63AvlBMZaKEksV8Xxw5",
	"VY7IVQrT7Uzmcgq3mT3IVTEzWaEKkZlSzFXp91C44qLzGc3E4dELcf6oR0529h7tP3qy/9AWqZmpTM50",
	"74fe4/2D/cc9GJQmULUP5Ew/OH9k/+tDyfdtwT6AtmiwTdoWCQVkx5je4Uy/9TXknKRgK1NF+aNJ5m6F",
	"VbpDxXJmJ2aI/uBDgSoFfJN1K0v7AHiS7x6fwF1KTO5j/+Liom8XW/0qT1U2NAlanVwj/WmVlnom8/IB",
	"pJvIUl4rRdYD3bwfatim9+jgYPMlhg/mLZb17d4P//qLddR//f5pj/VzBEhf/Nfvn373hwr/1ePNpfe7",
	"Tdw3paXra2hVY9XQqNhZqaMY46UGa6/YPSDj0JX/XSlwwOp6sq1899E2FtbCcNgcF8ahhVhkT1vv/a9R",
	"2WFGIldFlZYFamjKKs/s6lTM5Fjt+zGn9rBUT+HelNXPa4rZ5vVq4+VECTiaJFOhs0R9FKPcTMXFRA8n",
	"JMt2dHEvsizXZjQq1Jps/95h0z6SY203BcmSlgINpfNWv3zn2LID/KWTT5fvBceqzLWC3VStJ9TOpIkK",
	"bkUUrk7EuUytlNh5cjTHLZEuyAYqVLedD2odgo9bN1bzSwrl9lR2rqB8ZTqYytlMZ+NV41wgv3LcS4xw",
	"uQJbp6sMHczNweWjR0PKy8fVxcBOEdlglptzjauvhVTC/vsmxtqbHDOXFBo5d3TpuM5C+vIR8WjT8ull",
	"O+N7vYdsaWRf7MW93z/tLVkDL3bjTlfCC4/raEW88jnXWhmvSLnFCvlhdyV5Uy1rzQQS1gmgY1VtWuAz",
	"VZS5mW9qjQCzjXAZ6myZ8GRxZ/0avnUCSZzaXrSVft5ytt70Smw7pXxw9/oPaDDwLMy6OjuSuRXfgYn1",
	"ra+4zc8eR3CtWrKtSaTN4641l6x/wKdP96QLVK0GrXvb8u/7uungfq6bcM00mOXqXKuLy2zGn0HMI4zY",
	"vDO/PZ3mnu2Ut7L7XGwAt6mdt1IsFW3a7a6pbFBRse120k4zsS2VROdzageT6Y1rH7bdXJYMJ5dQM3Sj",
	"X6gKld9F5UIrpUJH2oROy/TgDnSGFrqDLpUGm66fLWgMtqUq6E5HsHXlwA006tXagOJ+tuV7tFA5uOML",
	"lcvv67ve0G+w+e9283dsN19rzYk6V6mZTVVWDojf1RVb+mcxxnMSYbe931LbaSr97TSiZW1lxb5/SWPp",
	"VAfQ/MyOptn1D7vWlLsu+a3qCZozc6Ptrs1ItlabsKSRblizQPMnSAbvjp5h5fhwmblk0wqIrRf9wV3u",
	"c0v1FEtqsxOdxTaqtDMNxlZnqNbP3IRmY+189ene9ZWq/bi36yK71dt96h2tV29tVSxLV3IdqVs67mI7",
	"5cudUL607AF1jySrdDDcn8wlrHXwAVc017mFBok3bCTDH2+rwb4sXJVUgOv68GjvJk9MTaJS8Fcis6FC",
	"bw0ySUQ5MYWyTJc76AdLchd87tH8BRcx3ks91LUdcdChTc3p0fIbNpaY4Ti3VbegC/PWv6VOvNA9V6m9",
	"av2zW30Xf1hXS6XlT7neGmlZuttVbdUddN1Ic1o9G6zXY9Va3aYVWDZLAvMkMFN3SHfV3L1bzb4bV1d1",
	"VtB3dMbqVAF3K0aG5Tq3WlvsRtnWbc/vTs+2lZlx/cM2ollbOk9+ug+tv2oxDt/zRn9/14EH928d2Foj",
	"trAm7EoVtr1Fy04L9llqwVq39DaKr0uovHZutO6Ftsu7Z8YmVPfXHFC7pyhaqsH4+0K7E3g7ukqwrKUA",
	"F+up8F6E9n/L4NrIwz+rXB0+g/sm8eeSl8P4zV6IwnWTLoXfV7hnx2wccu+TRzHVG/GaE7rrtoeYVsq5",
	"Lanlul6IbX4JdtNKuG23lCWzUHuFW4eqtruoYmujW+tSq3ZPtGmbnhG3oma7gVlijWatc53a56VL25IW",
	"rTP92bY1ZzfQoFcqy4p72o7vy3rs4G6vxy6t+NqKymun6tqpulq0ZpUlM6OzcjBVpRygKoHdaVC71RAI",
	"hZDi6ck/xEin0CSNkMKt5HBhaWZyLEslZH6qy1zmc2GTh4WlzZEwmfAPLkA/8eNcvJZTVfzwW9b3OgLx",
	"h18d2gr8wzY59VEXcJGSC3FRXzxj8Wxb0HDxkv3lM+Yuh/CJ/hGvkrCpvMiwBxVDlclcG0GvjICLF1Nj",
	"zkQ1Y2mezr1oH5yIRJVSp9ACed9/7t72lSollmGLnf61hurFJ97YUZamrHTf5Jta9pK2j5dcLR+5/Quc",
	"AK+9ntc/4GquxGVaqMHMFNrdD7baF/h1vJHfBmXzVJfajhnJld40xB6czj9HN+amKgdmNCiGZna1qs51",
	"cTaQw6GarS3CrcxxDV1mez3eXVq3XOHKc9ep0pU/qqOV/vKHbGQOqSd7I7MHZuImWtGKKWOtQpbnfsNK",
	"2ZAbd03j3dHMNnXlFlPzpjW0WyvggzvUXZbqL3nWOtFhdllhnSkytzJFrH3WJlSaSyeMT3e9xVdrx6b7",
	"3NDv6SLo4B4tgtpqQesLoo40oR31j5069E6oQ1s17xYKoUvogka5HC+7Vm7dtZsTU5R35LrO+iaiFG/l",
	"WNgkhG1VUmfFkvQzUw5KOb7cgcSnZjqVolBQeyoRqTsPoT7KYYm66MyUYparQmWlMBkehujt9dTHWWoS",
	"1fsB9HArs1Q0H3pYc3hhr1eUczgpZyel3mLe3+SJslHd+T3bCP4QffGLKUoA+hQRX9rICvR9X0Fw0HOD",
	"Yhy15TbWIs7itnx1s/qgR9812X68n88hHlh/umNtAd2OCwhxPrl03wR19LZvPJzlpjRDk14lw168zHHg",
	"ll27g27dshlvsvcuM1GHe9Fv/LpIP2Vtd4Jto4Tdjv61403HxrcbKzfPm9eubrdJNK62WutSu1Kj3j31",
	"aQvFaWc6089IV7r18XC1frRb1ehnpRLdjjK0KzXolhWgW2/Gq5SexX1svXdysXFwZxcbl9VZdq+u3Kkp",
	"d2rKy7biscpgGzzI1cLpzSXt+GcX5Vixo4j3aKTGN/fl8AZesqNRe92jrjWCr06809GcP/oGe8NYjhW4",
	"sgQ17mq9veceIfWzttm/jdrQaygn0XD8FijKmtrIFlp3vRmvVJ3V8tixCq32tM6Wtyuec8117tKUt3yW",
	"sZaPG2pXq4fPFoq42mtsXCEX8iRcpu6Sbq6xo7ebrzavrNteSR/cuW60QpNXy2BHGr1OK69D5d525pM2",
	"j9uMum/57PLpfnSDqs3gdc9b/31fRh3cx2VUexXjwpKqM1VjV/1mp3W8I1rHtk29lablEjoWObyyqauc",
	"6UGpmo9Jro18Z/0xXv74Y1TgtD0A6Y304STkYLCQyY2dh9wdFm1/WBQ9JvRF7IbgXwFPgC4JXDxCeq7y",
	"QpvMcv+BPzGBRXwxbinzsYID1jmcNX0LsgAZU1nFWJqeyhLCVVnC0loIXUwHT3xbFlogYPw6uhgvVRLS",
	"fqmkeyZFFvlD0MgBAZVzLtYivhi3goUycHDN7OIu4l0c3XU57O314BXt/65Tu2Kyv2KBEwmqzsouo/an",
	"ayu9vV5M1yXrhwqfKEuzlmRM0Sd4Zw4Qq+zqM1dbfTt/71ewCUgVLhELMZVzcarsyCdx5Dudi6EdDOF9",
	"27SpMAnYH+DNb+UwF/J26SprMUZfeTbrcCZrdNkA388WC6ttw3F71JqH3vW1/5/iDzuVntiehYMJEWGg",
	"+TE1wzMMcj8BfiqzoUpTN3h5AYPMdGYXqhjkBQh6AU5/x7kqYHwlIgS/ycQvJoV47ifA76UGRz8jk4tj",
	"VZgqH8Kc1YQv82Psx5VF98XurXp7vfAa9rfPd2+vR7LZ2+uRAurt9Vw+e3u9xtw0+UTenZRf1xvY4B+f",
	"YuPIsvdDz6mOWhor1GaP66c3sZPXwK/3Lj9Qx/lrSV76pZ5eIkNxWr01n0u3vTtt94F0W59GO1fmdaDF",
	"u/GvoNtuLku0GJf44Nndp867+IWz1afNDj9qflbfMm9g7Fz39bLr75af2efKbX2n7O4D5da/TN5Ao179",
	"LbK4n235Hi1UDu74QgW9PA5yXZwVKw97h3iHEOPYRtj0We/b0/rDfnRVjR46D5m2LEKjWrxo6bIdY6PP",
	"XttnNvi0ja/7W+XN5gnzJ7Ohas7W7ehrw9QUql0ne2qpn0P3Whwsb25zsLLsnTpuMJyo4Vmqi7LV52av",
	"xXvqY+22Fze1ElvbZepVdXdnp3Z1BAXxEtpsx4u0xidtaLXWkPan7eiTwpNv0xxy+SNg2zj8tTvztTvz",
	"dZXWPNKpanfu6yfL3E2+kNm3BkrjFs7BkK/Ped691qR1mCSv1YUtgwXT2W1+EbEZuH2dPDEXWWpk8uAv",
	"Kw/8R5JW/f6Zi7u8/ze0C/eYlY1jJstS5Tbuf//2W/L1f/RafF2/k4PLsby4bc3mMp4IQtRufRF8HjuA",
	"nTeCz9AbQdtekZmy5YrptWXuVkxuxQSlcQtXTJCv+zlO4XLJFkCnY9Sqx2xgudeU8FaXezYDt2mEypWZ",
	"qazddH0M3J2e+8ql7y7lG5RqOkvlyqnhJ6S+9cz2llTDi6udKaYldDcczq+4LbDFS+4skK5qgQTefMAY",
	"x/5wVjoMa7CZuYDQpxeOH+VO7Fygj/S92yEUUbortiWFOlcwmu3ctl/uMPrtcEVVG/+3owpemJ9WrIrr",
	"E1SnZ61rD+to7bniKddaei5Nd8uKRpaLm2lNKxdDa89i19vchg9k+xwJn6W7cy67uWe3WnluWimxvVI+",
	"uFt9Z+mh7XqNdXJyu9Nq6+wA93YmjvUP28RR7uXTyKd70PSrFkPVvW7x93eNdHDf1khtjxUtrpc6OlvU",
	"VVfZHTG6E0eM2rXy9drQ7fiTCoU3aON1aXUKbWy1GxudncigWbnCEReyEM6NitBZoRMlnqmRGpbPzAez",
	"7zRvf4i+OMzmEBuAh6ByM4mcg/gIrn6URSm+E4mcoxuGxwF8fBDRJwH9G0G/AaVclecqK8XUZOUE4G8p",
	"PFcyB/S7kISFlvSL6BpmwVfDw71He4/3nux9s/ft3nfLXStkMCasqI3zojh/fKV6hJiDYmhy1Wy+P0qN",
	"LHuNWena70pdz785Ryu8/aXyAhpfoouhOVe5Sj7j1ubWh2ub2g3UZwK9eYDj8sB7eEkGp/ONVXMHn32S",
	"Ciekqw21IfbADXNX+3I1z+RUD1elsTYnajQyeTkYmXww0h+XpLJ8yN58c4hXXnRZ+5CBwexKRQZH9trc",
	"gdt1UfnlxTg31Wxlcfn+fOkhsYNMmyrrvHNPZDH4oHN5pfqdyGIysNvDm67f2qflTReSns7ksLzcS77I",
	"SpVnMhVVofDjbKFmQz3SQ5mmc3AKNZUaPqHZxdtM2nW0uNDlxDsm2xdvceek0kRc6DS1heS/7spCSFFU",
	"p4UqhcbtBTwE2LTUcCHU+FbZROXaTiDLv5hdoiSvVrLFwH1vV8naJrhiDZLq7Ewl4u86l0IXRaVgQZLa",
	"uX5qEj3Sn/WaxHbQwXAis7G60ioYPlj+0IPSgTKpZtzD1fJVTChlWS9cv9WA7S7d43/2BW1frL7YufqG",
	"g5fnUW7OdaIKaLWLS2ionS9KUw0nKvnCDoRSlODH7zMuVftSbtW6sW1c1zMKy3PXkzA8DD0SDkLXvLwr",
	"uJtVhD1TcJZZ6JEbDWybnshCnCqViZH+iNVQlCZHraBr/7qElg+Ez7iRN09jt7eBh/x23bivep5u86+c",
	"nQ7McFjlKhuqoiPNyO4U4PX8817b47ydLQcDck3B9nzQX/71Yjav9Ya3qcact+rLvUzXR/ayaqpyu/Ma",
	"XO3QY+34Kn46gEkKfuGB1DracISVfTfw3pABgQHDHWxdw1qVLnG+HyOdU/f87bibdVm/uL4B1/h2RkXU",
	"bUic6/yW7CXP8Yu2EMkDJPWlnCsfO4ZAn9dn4V0o0sD3yk2geMHFbAxrSIOrNoGNkN+PufTW8hbTdro/",
	"y/3J/hQzTGsRb4jrtFdAsr/F6dzFbghZjK+hcl64WvNSA49oEIBTiCC7uCsYi+ktDhXgBN2jwqPutoyW",
	"7MXnmKocmNGgGJoZVPGbCgZWkDHtVYyGqyvI809YHptCFuO7HpCDH/ZjL2AKzWHN12fwJnYCCG+J61gN",
	"13ssn9P9EPlWFaUg86nwSwdBRtbrp9OQtyuYMlRZovIB+5wD13ZYWCDsRiR3tUdr/rJn1SMtpt7MaLz2",
	"BdRp7n4X+B0uflkI6cI0I3y47y98h+83fVend5Y4sw63xe7Tb1P9xY9E/fjxo0+08X1QN/drust+Xc3R",
	"b9zW9xvXIqyzWzl0ObhZhRB57wEbldWtmpqxNLWkCEfZV2VvLx6TWCjsprKORY0l7V6alvNiMcdSJoUM",
	"ZVwr4noJNxZwY/nWipeWLl0R1st2fdH6km0u2Fq5hmK9KyZEtWK9whU1MpfTq3xVnsl5amRypaipzDKV",
	"DHI1VYkGzcRgtc6t/c0LTWlf6YTPS7fRgu85BXwuClU7y9VIlcMJ7uyFzgpwlVkImSVCJokoJ6ZQlulq",
	"H86L9Zbda4OJrR50ZVVOBqD7t13GSiaP8tBkIz0mcj6flSbKiSwlkVYdY2j63u8/dA+wmdLv3uCLBv4n",
	"H3gdjwwmDdrcmv4LdJd2oCgnirwZ+iqBW3Sa80tHklwXZwMZXJe6bBQqK7QdQ2OqhSpsiyCAyWT+7+rU",
	"cdzI4wcgPYW7gGxy6weOxaaEe3W/jHHj1qorji5/leCVHjEg6rHLd+LqNNXFZGMd1/aCBsXg2jd//nFm",
	"e51fuqqP7qtvrlLo/YX4Mk4fe0Jl5zo3GQquMPbEZf75ErQ52wNtC/4F4KslxQ65UckAR5NLfmjdvCKW",
	"9KoudLBdZLi7I1fbybtb63Sm5a+NfU1NbN0pTJJEi8MAjRbNsB7U2dnAnH5Q609sLE8DLusa3JrzSzRT",
	"qc5Up1VJH9auHDt//aFdVeUDWGckqt6+Nl4AKj/Xwyud626rXl4Vd/ChKko4KHTVI5dFKvF2sytNj53X",
	"5sJip8OqrO/orjColGpWDEozyBXOvWrnMOGSDhOWXGC61UtI61v5z2b+XqqD+Pzf4PO+EfZ2f2m+zlfm",
	"W/aF+Wpflzf/ZXk7/SRs5jqdGNc7sVl2V2mjovMKd55y1ehVEtD/rtRAJ4NRbqaD0pj0Ku9DVN2Xz8N5",
	"lWbXz0GVZiqXpzq1iz+d3BrXQls1/WzhSWgrHoTwGd3axi8+YxOW8fVUb8J3kKuhbTaaJjPhlreg+XbV",
	"4gq0nQXxzoJ4Z0G8syDeWRDvLIh3FsQ7C+KdBfHOgnhnQbyzIN5ZEO8siHcWxDsL4p0F8c6CeGdBvLMg",
	"3lkQ7yyIdxbEOwvinQXxzoJ4Z0G8syDeWRDvLIh3FsQ7C+KdBfHOgnhnQbyzIN6eBfHO7LNDs8+dTeTO",
	"JnJnE7mzidzZRO5sInc2kTubyJ1N5M4mcmcTubOJ3NlE7mwidzaRN2ETeTWDwNCEVtm2Hbr917EuzoJ5",
	"3aLfrcsaCm702WsNCDf4tK0aFgajVJunw7CZ3rptapOZ4VhlMEIPUHnTwtLwZxfjGCJ0as+Kj/APfAMF",
	"1JFZ67pHXcu6dXXind5szh99480Nbna2ecbbnZe3smeqKHMz3/DdzZu83JxV2BN8J34ILvitFKe2V3Rn",
	"cr7yOuFjVeZanavbWZQ7r6E7r6FdeQ29e44tu3Sd4caLbXvLkLYLLh28jmReapm+89+1b+tksPm1z5Et",
	"mODHpKNVz/KHXGu9syzZTlc6N9R+qxVT7z1stt2210031MUWun5f+Hm32KWL8mFqCtVi+/fU8pa5mLn7",
	"DRtev2PXSvVHbMSzEk90GyMxPPJ2NG7cbQ5muGiFVr5yz/QM+EdIBz3N57F52ra543bP323Fcdxi1d+O",
	"Fuy3hy0ar6fe3oZ73ZpspQkO02uT9vf21GeuCtVG7xqq9dhGuPUz8K1Rjy2tAlChrO9OP1na7VaibUEt",
	"8NZAOdwqX5qQo892KXqtVd1hkrxWF7YAFr4mbNdlZnpLVnjYmRNzkaVGJg/+gjOe/mPD+v79zEVc3s8b",
	"moN7xso2MZNlqXIb979/+y35+j/anM27e4PIsby4PU1lqkppe1ur71CvHPlWf49aaEFwMNGMYOHtX9et",
	"x6F574sXIzy9qAuhprNyvufX6jJNIVqbfyFpWRRmqOF4DDjvIh5Zl7l9wENU12+f/MWP4SVUgg5YyMuD",
	"syaT52pYpnOBtZ7YpeGTFsnk6OxJilluTlM1jS8Z0tcZHsG18SHVJ6tT9R8lEqPQe4D6qN12/wa+EfpW",
	"vtsx2Czb0mi3a7iNFb16zeRr+v5q8GwJdKvAqz9hE/o7nuZNqKmxVyzrBfdjEF35tcd3rfv71WfXtXZd",
	"a8OLdTiesn4T99rSdkoaA+Vwq5Q0kKN7uNpADY19+07Pra56zAY0TE0Jb1XDZDNwO9QGJtdjncn0wV+Z",
	"uhiMvG5pdet/4yLd5g6w16jcci95JzX/uZqaczWwc8sDp6TDQ2j1+dDShG2C4qfcTIWrVUB6e0vP29pY",
	"lrI7vIZ5tWWxlQNs9Qdt8BAbT7rh+MRtbug2SouG/laOvyy+wk/4fv3n7facwd2qJv9W7s5rJm9lx2c1",
	"aw/YRBNnSd6yph323F212HvYVLtro5tsnLxVrl9z3tIBGN5g4LOxfifr3vnYRbi/e9ofq3x2LC9q5XGr",
	"9ra1vN3DXW5zJXU0uqx/2LUGnHXJb3Xfewta/9JBLSwnVw5kdnK9v6PXWzm+VUOVrY17OD7dzaXOw8+2",
	"mZIxZZyaU5kOcrPyFObPwDq2pObDCU2HSxZvOGzry7XZTce9PXG/zKWjaXYyszZiVdS8g97MGf/YqLZz",
	"wJ829RVjNWnrnbrViM/paGxsfsC1hsimJD91OTLGB269fSwbJNc6zyANaMPnFV0+hM3I3bESWOiX66ag",
	"Ta9nt1KsB3ehTyz1FEBqpxPlc1dV1JkGuvPRfeVzNqGPbjnW35V2Xa0ec+5rc77Dq5SDO79KaWtwzVYs",
	"Hdlcd9Dkd4bXd8LwenmLRs9T/VRm40qOnYKiedf2AqgvPbPFzu1aQ0ztcTekN6rlovuqqldIY3UVQ5mx",
	"muI5wkwXQgpLFOjizI4eRkjqTlmY3LvygruYf5yLF89++C3zlzsKKY7chTFfmlxUhYL4H3VR2kHHRf2K",
	"RsjE85i8zgqd4J3njmup7lJ0gHXirbcUjQbIHxH6Q4QB0ubzRYYDXjFUmcy1EVJk6gJvc7vQaSpOVbiw",
	"nuQhpuff9rWcqmJrL/wHvVrnDxZCfFWHQDyOKNN0bhPjKdiRyzMbyuMZ3hL3zHwwWCCpMWeimkHOSH5P",
	"5z6vNvlEJKqUOi2geN5PVCaqwr63fVAh5qYStjmlqsS6m6LnPCGr0kxlqYeQVyx48pRizxcq+i90wuDt",
	"fKaK37LTuXvKHzYdvI8fLx5SH8v/+Tav1B8xP02cP4R9dZspI/4AfsiqrcA/EuV9EGiTDUw2oO0KppCi",
	"zPWwFIwoRib/LXPvmPgTcYX3uZipi/CuCXnZ/YWTGNgZT4Yy286IaZ90o4OlzcDWxkk7wPEh8oPOJd60",
	"Mq6wGlZo3f+uc/mUcdsr33cq9Faa8Dxd7xC86yXX318cH75wTlS3s+JqaIUrFOKLzbBTvTgtjo72nMse",
	"ca0BrjnRrQ5xNAs31YrWDHZrteeLrW3DSvQPOhdyENwW3x09+rJe3XJu2bRWfVvlfHCnus9SDftihXWi",
	"aO+w1jrTtW9hxljzpE3o25fMH5/ufoOvWo1P97id37sl0cG9WxK1VdU3LY860th300V2Svs7obRv19L9",
	"vRhTOZvByeWV7dr7YXDk9sqOJRdPttUCrLjAtG3cQaeHHZuiQfnqK906D1HP1PxyN6Lu+ulmND1FUW1T",
	"zVPvgmsUPbU+2L2mxxZHl2uaevrXX9DwFLev4IErem6s8awd4ltpeGrNrCMVjy2pO6bfaezObWfUrlQ8",
	"nZbzwV3qPSvVO7Xa6lS/s+kq61a50+EkseoxG1Pr1KaMT3e+kVftBqT72rbvy8rn4P6tfC6jyFlYBXWs",
	"ydlgx9htD++OGqdFWw+XvK5u0F7TujuosjuosrHmGdreGtVFaHy74ym74ykNbWf5mNZKZRGa1+48ypU7",
	"7/qJY3cK5YZ7yUoNRaim3dmT3dmTz72ZV+vGot2Jk92Jk7u2yrmMeoKseHZHTHa6iRvRTaxq2t7e7DL2",
	"NM6+66pmNaGIrnLuQmXyNFXEwmugZnro1S5NKZ4akyowWNrr5OTLtc6e+DFu1xfXFphrqVeN+0ENyzYH",
	"dhqjV8VkINN0ANrf4kqtDNKAO2BWR9+aFuoIy2SL41DzWLNGI9U42HSunXKF0+GyreEJ1161LaT5qWtV",
	"lHviTTeglrNaKx1VY4PrRl/lhqU7pq5a0c0vt6ToSI/Vdakf3MUetlKl1Vh7Xaq3OqjCTrVb3U4nqx+0",
	"Kd1Wm8nlrjb96jLD1v1t8Xd75XRw31dOl9F7LVlFdasD22wn2anA7o4K7DLt3zah9RowYO2UXjul107p",
	"tVN6rR55YKhYr+YC2k6zdV81W76VLJ2R2mqvgL1TWF2xi66d83daqZvsHev0UMDbqZ52qqfPt31Xawag",
	"nX5pp1/6bNcvl9QhubXMTm20UxvdkNqooVl71+3gpHuFpsg7lQc/2JdRFaUmv8qO/YpKGf86O1c2W27V",
	"tH1sp1HzlrtCJcGabqc6Cfqkjib1ZY+41qzenOhWbcFoFm6g7SwfEddqKljz2rCqIuRF2MzcHVVFQ99d",
	"P+tsWlmxpcI9uCt9ZKm6gtVSJ/qK7qqqM33FFuaCNU/ahMZiyczw6U638mrdSHR/G/e9W+Ec3JMVTltd",
	"Rm2105Eyo5Musdv23QllRpuW3UKRsVmXNJfVRdznsyH88bYa7MuOtEqTQoxMHh89y9VIlcOJmJpEpcEs",
	"FG9mk0kiyokplL/lzLf2JbnzibH86VJNoXeorJrS1mVbRjivUhUq79kmyBVJAZB5LufXPPiyVS3Ndntq",
	"G+XMdhQzHS9ZNr5cuWFlzHabSOM43lr90pXqpbh7WpcWCpfOlC1FV4u5uzSPbEOJtPXhf7XuqFu9UfFZ",
	"qYy2oy7qSlW0ZTXR1tvxKu1QcS+b771YXR3c2dXVZVU/3at9ip3GZ6fxWduMp6qUtuMvb7GvHOMyN0cl",
	"M6Nv4N6oW+j2uCkm/HepszU79RLdFpD2FVuL3yB0rGFaEhfG4pt3Jm376naGEz9urNBK+YGjU6WUfUhH",
	"S6Z60tdaLvHEtqqIso/eaoNoml7WqqB8a9mwBioxH4ywubg7GijW9VZO2ZvWP226MO/6RNPlmL/1Xr1U",
	"++RbWyfKp076b2fKpw5noyVP2ITSqTY3fbpjrbZaMULey8Z6Z9dMB3dwzdRWsRTXTx3plTqf/Hd6pc9R",
	"r9TchjNVXpj8bJCa4ToH0q+R+tIzP+tbrhpjuje7zSqfrbTOxpruvIEuNMUVKot6DjtVXdQf1tGUvOox",
	"15qelye8VfVGPRs306JWjn1rlR/1d9iwEsTnSIQs3R1tSHP3bjXTbFo9ssViPrhj3WepcqGevU6UDN1W",
	"XGfahi1NIC2etgktxIrp5NN9aP9VixHrfjf7e71gOrh3C6a2mo/FxVNHGpDO+stOFXInVCHrmrkp0d5q",
	"RVM2ZXT+0UoHQt9nex5idDGQw1Kfqys5gdXFYCqzRJYmn181gUJn43T943fHfW6L7oe27O57ou9qq3Q9",
	"Lkfd6njcQ7paqjQkf70lykKC29XluMdvt4U0jtHrdTYur5vW1dgc3DFPNbw7rpz5Nq6T6b44Dz7z5r9c",
	"9+Ky043OpZOK6U7X0u1AvuIpG9GtLA7rn+5iO65WjCz3s/neiwXIwZ1dgLTWgYTFSFe6j023953O427o",
	"PJY342J1c73EQQ9ZlZNmD7hrN99uzI8R7ZgkSxfSLzXszdteu5TocuCibC5FlVztwqZEl1csFJWV+bwj",
	"ddHujqbeLNfn9WZ3Mzcc2X62vXGgaBoDwj56+UDQxZ6v+Ey2e9urmZXbvKKzPV7x2Wzvut/adbGt2+KW",
	"bqttddlWrrh3TbTDtrnRRllrjdvett3UHKdHev0ZZ0r7rA847+zSl5sLbtfX4ZK4pZrO0rWrzyWRId+3",
	"4mNhrbtso2/HR67+ahh5XX86jE/qbvxvfsZ1J4KmVD91/OWQ1N/Wm8vSKaHNZ8RI3/y3xJj2nfqcWOur",
	"6yfdDvaYGy/auze/dbx7vskev2o7HYldbau76dZdbq87n8vWPWpDG+6WM9tdaufVusH13jbv+7BGO7gf",
	"a7RLfGml67XuPrd2v7zYfXH9TL+4LmvWRj52WaTtl2fmzUxlhzP9WCARFpXQ5A6PXuyLn+BbphjKTJwq",
	"UahUDUuViHMthSs4kamxKTU8fv+37LesL/7r8NXLHwQtzfMs2TdS75uZyuRMW9LfT968Xkn6Gqpgr9bd",
	"3sjHJ5DR5Qv4Ri+S+E2WNhC/inWPmctp2rCEXXUPSWNyctTb68kc/vSTP+3/MAxI+/PUZvfURjy1zzy1",
	"tNOit9cbSvsHftmHJFZMLDkpTnt7PZXaPxn86csK/x9DiLF/CvjTh8eqoj9EsD/9iP9nGv+H0oJ+omwa",
	"IwmOrOwfG3Fknzy22NiOJGP7zImNMbGUiaVMIDcTG3li2dqyYdzR9qW0fa62mYGx4IMNPcM/Nt7Zmf0z",
	"tX/sq5xZ9plNJrWhqY2Snvf2elPLm9rHTy1vap88talOoQIsObP5yiwlgzZSQDOwfyw2g3G37EP55vYx",
	"uc1yYdMtLKH4t/0Dqq28n8oSbCXso4uLnu1Z9g98tbdvBWNsaeOWNkYJG57EvkZlwcqCla3dc1tOf076",
	"E5kV4VeTY7Brj0UySbQNkulRbvtHqSGduOEyp+5ub770qHWxThL9enPZhT55xZS6GHX3/qIDr5GP+XDr",
	"9sMDOdODYiizwdBkIz2u8nWfA44w4uFMnwxl9pTF2n0d2PRhjKvr0guVn+uhGpyp+eDhVc7L0AQeXTeB",
	"x1dJoDQm5e3yFqyafPs/erHQ/rezhlrTc1fo/1d13U4/B6wos64UKu2eeD29SptnbNUEaUWO/n/2vrQ5",
	"dhs7+6+gut6qsf22PD1je1xxVT7I19ut2NeKJDtflFBQE5I4YpMdAry6nZT+ewoA9wUEu3HA5vJJIhvL",
	"IfCchQ8OgXPAZQ/307n0oMKy4ZWIXFbkOUhIi0riTmd1Qse29I4KTC9fDDcfm7loausCgWqeQdYLrE42",
	"2BrCAA6wV8cm1hf03OHbrJUq7mk6F11aokjrCYkTiyJ1F0fUESXQWoktlVzWTyaxfnKUdjxFYbzvZvR+",
	"FsX0KTzRrHPsJjwL/zem7Ckx16WTbKPQJ6dnCXfCxyalJxTArh5L1eym7KRu2uDoRE+w4VStCxPxU6XR",
	"IWg3IcIA2Gk3+bosmoQXEG2GhDDT48gKutvtVqE4MKODO10vZIHKG0r7u6g6iT9Qbg5Uw7/efHMGGq5i",
	"buQIj2Vol8jh5MhhM5PIoSdzkkYRwFQJrMtbeJEx8yIqZO8In9luHuQ3WW7JZZr8l84iejT1wfOxTBjv",
	"/axoEIl/u3qb6GY3EZIopw0mRHYFG9DU+zAR0VRbHYIMkTIMgSCF6dflQxKUQREiUpzpMSJFLdbwsGCc",
	"iNHxnaw7s8CJDGcEuliRBIKwtAiong/Ii5SGOe7U89GM7hJKmAglNvMJJXoSJFlYAc2QwDrAhSIZM0Wi",
	"RDcfDd18kdvDniw5IwvPorlaJzfaNpY4IpB6TrRJpg521bmgsd3sSa6yNgiUrDfYwKexGxOxT0PDQzAp",
	"mRhDgarDT+iSKjn4oHgVIdVU002qiq7nmsE4FvNjPXF/ZoFuGdxSdLEuOS5hiRd4QzAg+1Ib8ljHEIxr",
	"pJeYxGhMspllTNKTnSnGJ9AEjQXvubA0Y2Zp9NCum9LCob2ktcwiraUUlhrLbdFiW8aS4JJrwwA6rZ3p",
	"UtBZW2SNjWWq5n5MhUbnkPmSyzEYtLr8RR/KBjgXRkZCU82Iqam8ppcGpm3mmCBzpGO0RNsMbDB0iBsr",
	"KTMWzMHQ1I1u9kxhzEc22EuQYjpI2cw1SDmCw7GWZWPDly4szuhZnE7E6/E3PZibrXhfdI0d9L2NPOZt",
	"se8o9iPuPJ7vSPbghRy0u7WtOk01xZ+OvY4XGqs9WpfH5Xv/I3QgZUDXq0yJjqayYhFDHaEUtqkp+yZK",
	"k42yxkPBB3cQYd3wrJN91LR6tD4MEyi3NE1OSY9MgqWRZkIfne6QLFFIg/iMTtbIAl80ph2gId2bsiOD",
	"OzxXnN3bhOHdQc/R+aJ6VtHaZg7R2hFUmyWSbSHXFnLtWFQ/kYCDlzgR2YcRE7DuftP9Oal1LSpl771z",
	"s/Ly8dPB+H0PuNV+V1cn2X1146ARTLnrc9CObrq5B9X8EFMvIJQ6KUfMn6EX/fkFur9HF+gyOCAeS90F",
	"X6D7v/E7t6GLD+Ly7/zyClOGvkUuPlBx86vs5leb/O7X2d1/Kdz9ht99F0cRCRjahQF7Frf/Ubx9IDgS",
	"d7/NmuC3WgxwE8WevDH+bf339Vfrr9ffrP+x/vY/16sg9n384JNUjZMRCeJk9a2FryyO0hFn55FPjEQB",
	"9h0cux4JtqQne/6b0DefSCtG0Q4f5Km6HBSMuOjhgLbhboeFjyKf9n7oktV3j9inZK2zAJC9aFeNWfX9",
	"eb2i7OCnB+OuWtcXAv7AhDl4uyWUeg8+OWqdwvceyfaw9Xuy+Oe72tBWzyGfcPOiiuIpQ4Zu8RPi9cWh",
	"ytgTx8c29hEyh+Gnfh2845DiKCMSZX5CBglZETdyKAgZ2keEcqUNA5QvDumAMBGKKqHYxuQ0ILFyPnXk",
	"El71LhCWxHO5KXnviouL9Ap9xiuRwPWCp8/FT0z+dOslJfPreln+HPzHD3gnbeVF8U69fGKohKWT/8pa",
	"9fv1unxonSDekcjbOk8RdkU/3Emg5C4Sd2WLuqXr/TQ5EV73++Q+KtyXffWp0fBcPmZ8BoV8yf/JMzT8",
	"Uq+fmQhe7Nf0QrbQ/Fu9jTDynryAF/pd/CdrV+/W60XkIwli0fq1/FfWrN+v1635BF76x+QmSm/K9vTK",
	"1vtoMMMC9sltlN9OtEK7fDM+xZYWOMBPJErhFm8ZSm7lyFSX62zbcR69iDInVbZqfSR+Fnaxsc8e9TVk",
	"8bGqKf6rShLN2g12imyfA5EIIEz/lgkrld5Eyc3EhmmV1eijOnL1Nmpjf1obWjKVxrChucocnNJCkzx4",
	"VwTzLcG7MuJVJdTt1YeqULNhpPvX7Oq/MjDFRmqj2rdei4/jbj5zVvyi4NFqvynacEpqJUtXNFFdrt52",
	"krbAy0qyOfHf9fsNdSmJnIhsw8iloiAlEUquk1YUJUrtaYZXoXot7aLldfEif526aHpxuRDvDhfNIf5F",
	"MWK/SCLixJPy/1KfLv6vxSjZ3SQ9vDpJ6a2CBW24VcR+488ZOPmvia/m/xYhXL2uNtoCd/lTxb403qw3",
	"2G6VxO9y2PPMmRJeVuu2t/98NpsmUzTaPJXFmUyEyOaxMI2Ns1icxPoc1qdQPYPKCcznrzJ9itlrn7ym",
	"ueuauo6ZkxOXz1tp2rpXrDvfc6ynrDVWTZHR++23AKUer6bjykuoK0QZ/hF5iv3k1MD1ivq4fJRgE7ar",
	"MNXLxYOmlRqNgRmayYroyQyNR+IyjsYhdwXtYCRk7hlqhqXI91asqSahBkCmaQ4fHGNmfqorZmsc+GyK",
	"AUYiuUFafwoLQ01p5scvDEHPXiWeNzCNNrPlreYbaCTJW0mQh023Mp1qNWxSvFVwNK2066bBA6XATy75",
	"vTvvHSrnfcl2P5+3SgsJ9bbdijKPHjSHfkzZ81Yy54Gy5u1mzNvGryJRns4RtpOP1TbTjNV6JsGDJ8Av",
	"qe9L6ns/BPdOeLeR7L6kuS9p7hY0QTyqFwYB9iLi4IC+koi4Tum2Iv3934vlLpPapZtUx8QvtvVk29o4",
	"Ezdx9JEc7FhaLSQdA76METoWgab5jbQX9GPwhJ/IjgQMyZEGY4/MAUaBk9FgpJ9BWizQYBZoOMujhaLe",
	"lsW4KZGSjNNsnOHEkswgHxfB5AZ9iWGGtiD5XAwXxbTi6TgQ9rA3bUg0bYBGH8JUYTIKiEjGwT/OSMlX",
	"Rn+xUENbqGQihjNPzTA6Ang9DFMj+kxbpaST8VunEkTOHx7pla4pSi8W8zOA+UkvhrA8GVD00NTDvmSQ",
	"Mm1TUmnGZkLSizOZ4kK+SvuMXueF9DdGOXH7jjM8fG2Mu11bsWM5PuwYr2KSVXtOagG1oGmpeT9gS2ZN",
	"HZy4UFZv0mp+ai6Abbi0GL/ORNUCnAznquZiTCddtaqiXX7FdHhgYUw3E1CG1sTLwtSA5F7CzA9Y+iW4",
	"jVf2YyIJs9Hiv00V1LHa2swTyzMKVDYTD1R0szRLQQtQoqZx+C+5mpPI1VSg2dvtw4hd0C0OSumZZXGu",
	"k3IUYcSLIpnQyfEYIhwg8smjTMCQUPblXXAXfH9A73/47i5It/RDONve67MwQjElpXpJDt3nxQpBkaX2",
	"Auq5REx0UpYXfS+kqgiFAxc9eoErCnsuByv/75ZQUecqCj/KpjyKPImdey73PcqUMHmCD3hHqL2HSOSX",
	"4H71fB9t026rwmf7sInNm0q/FNbNsh9l/iX2v8uL8Sd2mMd8XuIueB/IAaFbEuDIC9EP5JFsGfoh/Gco",
	"ZfHD8AXF+2ws0cMhfRLeootcwrDn0y/vgvePKAhLXSCZfysKrkU1H/OfBWCK45JLL3t9IGj7HFISoAdM",
	"iYvCQMy1+OxLAO0/nkmAYsrHnz8uRYcwRhwNPmESAWJ4SYRwzMIdFnsD+Yd0aPPZoet0cuVHbcmFIzbh",
	"vgseDkkv97wdR1YXX4qRT+xfb6OY3OfyNJURY0C5UCG6F+UzUTmQ7l3ixplxccKgsAB6L00dZZG3ZahU",
	"ED2G0V2QPKOLfvLEHlk0/RAvIK/ZsxbT6riVrPon2cjNFgcaJM2JocT7rK/BWI9cBBsGuGBnKybYoy9i",
	"56m9+KBSEUB49OUyK6fP/sq2ies8dO6GnX2mLwMDZWuPCdKAdlzgT4sYx6GwBS7ZepTD/eGA+Iih8DWQ",
	"ZvoLdH8p9mYQgqHPeMQgSngU4e1LEL76xH3iVudAGIrIDnsBlXvS/SnqfQw9F332Qyg285U6h1499oxe",
	"nzEjH0mUqA+VUYZHX2Tt33jt3zzmPXE7kvdLGbdbwilQ2SmHHwkoFk6CozcKfYp2+IUgjyGfUMp9FEbs",
	"mXckW/+Jt/6T96n8QCTCLsc7cWWpW7EHRYQD+kiiclGW3I2Iy40BRl9FLndw7PB5S4SUjnHTfhGry9V6",
	"9dNqvfpttV7drtarPxs+jm3fPlw27CQe4rg9xPeeVAYneWE0c55opV3nGQeub/C80mr7rzgKjmx+LIss",
	"GlYkCBmBshyVja97bFJtaGPJZIzEn8lscMfN7VE1I4K3zPvIsS90gbg9d/+/JttwtyOBm8Q7/OH5w6bO",
	"GTGCd18ursCkK4hKY97DIfBgf/Xd6iadm+tqQ5pmsyzAKY6Dh804Yg71sR4A7azT1oM5+CC0HGmqw9Du",
	"RbjSE5heh+PSoFycCa3G1SZhrRPuG1+UszXABunf0oCco7poU8EV1YFig2HmeOGEp8EJ94d3+Br4IXad",
	"fRSGj9rwTmpd8UqLGauYMTEqQ0926Ks+kbjmP+vTTUu24IiyBUPfVuzJQdQEO3UCs8CecaMR+qMwFKFP",
	"BpmY2lZ5CuNw4+N3paLL9wpWNPfm18vSuNvR4joyFEm/NWiApv5WBwQor0bVzUlLYu0NW10Wq4oxEKbU",
	"1qiTm6hBzzA9QX2EHVSSajoMRYuS65l/077a5khvpqZFrSnFtWkDSSwGnjuwDGNLrkSjNxPZxgrH8jYL",
	"FYh17NbMkT/r6Gkz5egpDHD03/EDcTxKYxXNc5OWfC8KGiV8mqq9kMO5nWp+huvulGEWH7XuWTvLq1rP",
	"zntqCVWW3lIrmFe9o5ZBD/uGWuoLysK2dnKafW1p1u67aUmIQXCksqzdb6VlsJl+J83kQUKgCb2QNumz",
	"jg8z/jJqa4g3U9KZ9rfQ8mzBvIMCThncC6gNT9HZl5GXzza/8TZ5zMfd9mnOUJ9pNLSZVTSkmxBVi4yA",
	"MqKAVGTJiJpERpQuwkU6tde1MJ4Wv81L63MqycdVzvGv/2eYhnOO9Ep5yk9s4wSyJgfJuXE2OX5ta2Fx",
	"UDQonIKiWeRx8l6txDDN3RmMZpo6GJDlycUZDnmdTkCf+SlgFJj+cVAu4RSpoKpx0HbC0KSQlYHfTFjd",
	"uvmiwmxaIY2gptQSgQTuonr0ap5UanRYb3PTmFjT+i2KsgRx1smp8QRxvQmrUkBnibUC0LKFwZoYg9UO",
	"fhY/ZHv3KADO4od0L6keG80rd2ZZ9dgwZmob1p8j90U+EoG6Y/gqsc/D8ExVjlJLClbUHhUpVVAfWDIq",
	"70j2AxXAqPo5LXJpb9ku71SVwz6aWs10N8FUwJtpYolLghJRJsQk1TS50w8aZ46sjOwGQkMGsbQtrFBh",
	"hmDYIKhpgqN/8iEBZnyaOzJC8jQ1DcvrDAzvuMP8zBbV8HCGwHEzgK2SMEMCWh3LaPMspbgGil8BUIWF",
	"UJkGoaJA9YEysnMoYaxKpZQl+p73lu71iMKPJEI3oi66Sep+if6gBP3Fc/+C/oYewwhd/XG7RleXt+9+",
	"QZk+0NqO3bKVtJFl4w07lEN90OFRWIaaGofZu2IWLw8CR5hQXD4rSh92HNF4aVyAA/LWvozE5C2tw4bl",
	"pU6HULYsNh9EkeasQVZUB0hnZqosBc/EyPY5CP3wyVN9d35bKHUeMYyZ7QI/hAzdYnkojbAS2BO63rId",
	"vsPwU78O3oW7HUaUiNEkLvI9yviwkE94yxCfIbGN+T4ilAQMhQHahS7xNTe5T0RSb9I/7j3tkyOU+sa0",
	"mnMKMJ+aU2dy2praj+mRRwF8JBHtWtK1EsRf7veXAfYP1LMUwRdNoWLZsGgLQZcNCwMA5FVbejjJpTa2",
	"aXWRsCCBddC0edbOxcEiqgwvDuL93kE4GZHpLA7W1LUzcjG9NmhnYDeTUIzWpcHiBIHwEWCzBEZGwBt+",
	"dUcmaIhmN/A2XXTHHcZntqCeVxizmX4Yo7suWA5pgNYFIRRhWRecxLqgCtOUOclh2Sr8UibPn+2RXf0Q",
	"4WD7rEMUNdaOPd91mlOju+puw93OY84zps8GDn9M11Md/PhItqxyHpu5gyAnn9Vd7v7XhC969IjvUrHe",
	"kHW9j8gjYdtnSQEiL6DiHBh50DV2XcSeQ0rSQ6NTlW2RLm1MfQxm0yxz5dA4ErM165zQvoPyBbr/cI8u",
	"0hOwxUmJ78QNP6TJ9TW/zo+plDf/4Dd98shQHLAw5nFnG9GXa3yaKuDwtsLASf42np/4brVefVitV9er",
	"9eoPPihB7Pv4wc9URzcVX9F98tTGDrNV9ZVcj5sYzO2yLT+SewslL5i5C1BaMO8HKJxu7uCkaLqpyTdI",
	"DjDv0Do+2uIMDQowA5BhBlDIgaQgUyIAK3rZFcWZ5v8AhnXKAQOkcxhQ3xXMZoY8EGITSqvBeE1wz6Xs",
	"xwSrqenHpoLrWG1P5wrnCUdgm8lHYPrsZSEaAyIvbQQQC3c5Tu5SiWg+Dh3M5S0vMqVcvQkCK50ni5gS",
	"yOlgMQR0wDkM3gug/6w2f7L3LDdoNaMp7d4yRpqtjvow6Aw/MC/bXIQRZNoMNGHKV1ExK4AvoqanBvQ1",
	"FND4KHox9QpaMUVvk0RyrLIu8wTwLNzmZmJusyNO75FbgLcsxr6TLAc2rBb2WyjEe8+hWxyUz6Y8Kpof",
	"RdZDU3USPOEnsuNQ6/eaq/FhT+GjnvwrFp1vQ3KhHCep6YjvfByn9tpk7Guffg9UGre+zwT97cvZby3Y",
	"/6uwfgAKQuacK4gqD9YbSNVng/v+bfk4sDQ4GkljQcgIBUoU+z1yCZf1LhCpP2Jzy3t0gW75P+LWRfke",
	"+ow3QMR65eeiQJLBwkv8Kf+V9er363UZjp4IcyjDERNdiGskrpPeFSVa2yOBWyhLArfUVu3XhnbSyEMU",
	"JJSJMDZppfG3ehs+waKfXwlO+i/eqZfPvT0v87244nCVddt+bWgn8fuiHP8feUn/Tb/U6xd8Py/4Tlwi",
	"filbaf+93lZzMMSrXe49xH8pHxUve+hbq95vbsp4rR+zK9l+268NYyGzyMRzFtLoLur363Vj8TIlysj3",
	"qqRu/X6prqYdCtUZBRetYehFKaq8KESJF+Wo7yJPobso+ROBY/4316fCldBMcZ3qibhIds1Nn57/m6e+",
	"tQpbkrUgalnSXNCSnImYJSkrQhZlTEXMJUwF7M7CGMlX3yTacu/OX+pEstTy+Xe/ELgEJUN5pWVAGkxW",
	"bTsFvxMm3TtcjyGX1d7qT9fCD/yiD+j+180dnMxgDbrjdS6APYjUCCyt1FWIpNVpJat2ZKmCLJmNZLHM",
	"qv1rXyODWx8bzcoY/KoYxIqYxdUwq1BtWwSjc0MoIDSNYrICRtvLXUMHCXi7JXvmRB59keteimDzUpS9",
	"5kWzuHNCaM7e6JQf+YsxIC4fhQw29U8t+8LdaN+d+mCwN+OxtZZsXCYpHw62pFms4XSqT8YybK7ykqO8",
	"5CjrovbR87tSlOlPvMyM33puQzECZ0L+CFnG6YlP2+rHdT+QV/70v+8HPFOfC3AeSuuGr4EfYvev/8uv",
	"nc58X4mcH5Ja7frcgIKkAyUU9pgxEvG6/3V35/7//9fMLk/aWFzj13OAxxMJxMKHE5F9GLGuAP/npPi1",
	"KD3FGF85Z+Kp0zGomhajb7BdXZ1kHtWNg9It5a6HRr/IbumwhB94mVlHNGIEziSiEbLMze7IcIY/OqjN",
	"UXVjIBxrathqOMYFGMbihKFfTi9RGZ0w9N+Vyuq883+B7i+v3os0pav36N/IQeT7XGFKX8NI5vtQEnFY",
	"/zW9KUrc3PzCf7y5+aXldRjH7JkrjBzx+sJ+mvRzefV+tV6lba/WK97k8dtrnWHC7xi/eW3LsuCAPDpH",
	"I478M0izqKqJJYakrsoql1XTZdh0jGp3UMsrqn5OW2tpb9lujkZVjqGQ1eFFutM4agg0ndPBpSqnxE4o",
	"xaNF2zUdt/G3BotjvZmeLrXnidRmDiZpBHb64HJILLkVne6MZJconMzbTBQh1jJgM8f/3OOpzTzjKe3V",
	"+YbYCmqpHkx1lpX7aazca6E9/Wq46fT0OravZGn1SecLeXOu52e2Ej+nbw6RgumfZMuO3OXhbEikJpTb",
	"UdeqNnYQSRVBwZmkSn+AsY+ip5Ojn9a2rfNJFUmGA1mnV9BilSqPA0IrpZKBnJt+BtRSowXQ9ccw7JK9",
	"Id9MU7uULFNFSkCaCXQeQakmO35Hr0NTdFO7F3qbkV7EeoZtUYcl/pqyJujFX31YqFosBkpDQenSQkVN",
	"h4rSgH3Xjvdh6Ct2vG8a9eJTHUFJLLTViPbZT9BhEdKd++yngAVnZiA3DG5o/uQYYMh99pPuLWOk2dZp",
	"8SoCQiBsCuhO+8MQKLlOqn0IDFcylqMLhtEBJRECeHQByNSAMh4Wji4wbdZb2wUnNIZBcqyyLvME8Cwi",
	"kc2EI5E+DEMSlYDyCgYhv1AJ06ESGpAcUxI5YifYLXO84DFU8Ah/UBK9k0Xf85L6dMKDH25fHPKJbOM2",
	"SuEhDH2CA8VhFsT3nUCA7xhK4jGMtsTZJ19VORFpgUKnHE8ee44fnDj5CKwffzBt5WlLs3kOA6I5dWd9",
	"wDefc53DvFvGgfp4+yKAc2SmT96ADvKMbgrMXj3GSHRS52L4hre+FTNmx/7W7ayC/6oaWlAarNIZUAyq",
	"6OWkULS1XavcWEWKgeCkduudlFkVdYaZMy4SSkRCXKTpEGgtyq0VRJnm06CGeSq+GdLFnIcZaGULq9AD",
	"IQ1B1RyMO7TjBLs7M8EktrvEtzlgP9YwurOG/HwDvs38Aj5dZrIe/AERlNbik4WnHCNPqYXzfRQ+ej5R",
	"o/lKFirE16DWIOnO0gglI1Afmw76tgdnS3bY849iWr2IMudYkkgjdayxGnXwlnkfyVGcrkcdGu9J1MZQ",
	"dTbgY81HXujglRaFaI0JtGfWuhg/eJoPMNQzGt8NyOLZg0LNcGsRdBCs3LSIuA7uDYRwG0Hqml1wKzko",
	"OOJpNFwTPMEEwSpZpJKsQrWNMqJzQ+hkg4TNpIKEPqQOLJOzkDcLedOA2re3/wsAAP//1ceddbyPCgA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
